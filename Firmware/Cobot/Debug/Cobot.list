
Cobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d954  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800dae0  0800dae0  0001dae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db84  0800db84  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800db84  0800db84  0001db84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db8c  0800db8c  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800db8c  0800db8c  0001db8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db94  0800db94  0001db94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800db98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fa4  20000190  0800dd28  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001134  0800dd28  00021134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027b3b  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000630a  00000000  00000000  00047cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ea0  00000000  00000000  0004e008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b98  00000000  00000000  0004fea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e120  00000000  00000000  00051a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002986e  00000000  00000000  0007fb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f174b  00000000  00000000  000a93ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019ab19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cd4  00000000  00000000  0019ab6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000190 	.word	0x20000190
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800dac8 	.word	0x0800dac8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000194 	.word	0x20000194
 80001c8:	0800dac8 	.word	0x0800dac8

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <_ZN11TaskHandlerC1Ev>:


#include "stdint.h"


class TaskHandler{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2200      	movs	r2, #0
 80004dc:	701a      	strb	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2200      	movs	r2, #0
 80004e2:	705a      	strb	r2, [r3, #1]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2200      	movs	r2, #0
 80004e8:	709a      	strb	r2, [r3, #2]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2200      	movs	r2, #0
 80004ee:	70da      	strb	r2, [r3, #3]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2200      	movs	r2, #0
 80004f4:	711a      	strb	r2, [r3, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2201      	movs	r2, #1
 80004fa:	715a      	strb	r2, [r3, #5]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2201      	movs	r2, #1
 8000500:	719a      	strb	r2, [r3, #6]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2201      	movs	r2, #1
 8000506:	71da      	strb	r2, [r3, #7]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2201      	movs	r2, #1
 800050c:	721a      	strb	r2, [r3, #8]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2201      	movs	r2, #1
 8000512:	725a      	strb	r2, [r3, #9]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <_ZN13DriveSettingsC1Ev>:
#ifndef SRC_SETTINGS_DRIVESETTINGS_H_
#define SRC_SETTINGS_DRIVESETTINGS_H_

#include "stdint.h"

class DriveSettings{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	221f      	movs	r2, #31
 800052e:	701a      	strb	r2, [r3, #0]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2200      	movs	r2, #0
 8000534:	805a      	strh	r2, [r3, #2]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	809a      	strh	r2, [r3, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2200      	movs	r2, #0
 8000540:	80da      	strh	r2, [r3, #6]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	811a      	strh	r2, [r3, #8]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800054e:	815a      	strh	r2, [r3, #10]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2214      	movs	r2, #20
 8000554:	819a      	strh	r2, [r3, #12]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2264      	movs	r2, #100	; 0x64
 800055a:	81da      	strh	r2, [r3, #14]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8000562:	821a      	strh	r2, [r3, #16]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800056a:	825a      	strh	r2, [r3, #18]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2232      	movs	r2, #50	; 0x32
 8000570:	829a      	strh	r2, [r3, #20]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2264      	movs	r2, #100	; 0x64
 8000576:	82da      	strh	r2, [r3, #22]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800057e:	831a      	strh	r2, [r3, #24]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4618      	mov	r0, r3
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <_ZN7AppMainC1Ev>:
#include "AppMain.h"
#include "../Tools/Delay.h"

extern TIM_HandleTypeDef htim7;

AppMain::AppMain()
 800058e:	b590      	push	{r4, r7, lr}
 8000590:	b085      	sub	sp, #20
 8000592:	af02      	add	r7, sp, #8
 8000594:	6078      	str	r0, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4618      	mov	r0, r3
 800059a:	f001 f9ff 	bl	800199c <_ZN10RFM95_LoRaC1Ev>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3320      	adds	r3, #32
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3320      	adds	r3, #32
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff8e 	bl	80004d0 <_ZN11TaskHandlerC1Ev>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80005ba:	2301      	movs	r3, #1
 80005bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005c0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005c4:	f000 fed8 	bl	8001378 <_ZN3LEDC1EP12GPIO_TypeDeftb>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80005ce:	2301      	movs	r3, #1
 80005d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005d4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005d8:	f000 fece 	bl	8001378 <_ZN3LEDC1EP12GPIO_TypeDeftb>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	333c      	adds	r3, #60	; 0x3c
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
 80005ec:	615a      	str	r2, [r3, #20]
 80005ee:	831a      	strh	r2, [r3, #24]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	333c      	adds	r3, #60	; 0x3c
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff94 	bl	8000522 <_ZN13DriveSettingsC1Ev>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3356      	adds	r3, #86	; 0x56
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fed9 	bl	80023b6 <_ZN11DriveStatusC1Ev>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3356      	adds	r3, #86	; 0x56
 8000614:	461a      	mov	r2, r3
 8000616:	f000 f88b 	bl	8000730 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f503 7082 	add.w	r0, r3, #260	; 0x104
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f103 0156 	add.w	r1, r3, #86	; 0x56
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800062c:	687c      	ldr	r4, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3360      	adds	r3, #96	; 0x60
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	4623      	mov	r3, r4
 8000636:	f000 fee7 	bl	8001408 <_ZN13CommunicationC1EP11DriveStatusP13DriveSettingsP10RFM95_LoRaP14Digitll_IN_OUT>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3356      	adds	r3, #86	; 0x56
 800064a:	461a      	mov	r2, r3
 800064c:	f002 f952 	bl	80028f4 <_ZN6USBComC1EP13DriveSettingsP11DriveStatus>
{

}
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	bd90      	pop	{r4, r7, pc}
	...

0800065c <_ZN7AppMain7StartupEv>:

void AppMain::Startup()
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Start_IT(&htim7);
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <_ZN7AppMain7StartupEv+0x3c>)
 8000666:	f008 fa55 	bl	8008b14 <HAL_TIM_Base_Start_IT>

	LED_Green.OFF();
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	332c      	adds	r3, #44	; 0x2c
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fe9d 	bl	80013ae <_ZN3LED3OFFEv>
	LED_Red.OFF();
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	3334      	adds	r3, #52	; 0x34
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fe98 	bl	80013ae <_ZN3LED3OFFEv>

	if (rfm95.InitRFM())
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fd31 	bl	80020e8 <_ZN10RFM95_LoRa7InitRFMEv>
	{

	}

	Delay::DWT_Init();
 8000686:	f002 f85d 	bl	8002744 <_ZN5Delay8DWT_InitEv>


	Main();
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f000 f806 	bl	800069c <_ZN7AppMain4MainEv>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200004fc 	.word	0x200004fc

0800069c <_ZN7AppMain4MainEv>:

void AppMain::Main()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]

	while (1)
	{

		if (taskStatus.isErrorTask())
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3320      	adds	r3, #32
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 fffa 	bl	80026a2 <_ZN11TaskHandler11isErrorTaskEv>
		{

		}

		if (taskStatus.isLEDUpdateTask())
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	3320      	adds	r3, #32
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 f82b 	bl	800270e <_ZN11TaskHandler15isLEDUpdateTaskEv>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d004      	beq.n	80006c8 <_ZN7AppMain4MainEv+0x2c>
		{
			LED_Green.Toggle();
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	332c      	adds	r3, #44	; 0x2c
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fe90 	bl	80013e8 <_ZN3LED6ToggleEv>
		}

		if (taskStatus.isComTask())
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3320      	adds	r3, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 ffcd 	bl	800266c <_ZN11TaskHandler9isComTaskEv>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d00b      	beq.n	80006f0 <_ZN7AppMain4MainEv+0x54>
		{
			com.UpdateCom();
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 feb2 	bl	8001448 <_ZN13Communication9UpdateComEv>
			com.ReadData();
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f8b7 	bl	800185e <_ZN13Communication8ReadDataEv>
		}

		if (taskStatus.isIoUpdateTask())
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3320      	adds	r3, #32
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 ffef 	bl	80026d8 <_ZN11TaskHandler14isIoUpdateTaskEv>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0d1      	beq.n	80006a4 <_ZN7AppMain4MainEv+0x8>
		{
			DigitalInOut.Read();
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3360      	adds	r3, #96	; 0x60
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f89f 	bl	8000848 <_ZN14Digitll_IN_OUT4ReadEv>
		if (taskStatus.isErrorTask())
 800070a:	e7cb      	b.n	80006a4 <_ZN7AppMain4MainEv+0x8>

0800070c <_ZN5QueueC1Ev>:

#include "stdint.h"

#define BUFFER_SIZE 10

class Queue{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	705a      	strb	r2, [r3, #1]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4618      	mov	r0, r3
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
	...

08000730 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus>:
 *      Author: marce
 */

#include "DI.h"

Digitll_IN_OUT::Digitll_IN_OUT(DriveSettings *driveSettings, DriveStatus *driveStatus)
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af02      	add	r7, sp, #8
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
 800073c:	68f8      	ldr	r0, [r7, #12]
 800073e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074c:	493c      	ldr	r1, [pc, #240]	; (8000840 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x110>)
 800074e:	f000 fdbc 	bl	80012ca <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	f103 0010 	add.w	r0, r3, #16
 8000758:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	4b39      	ldr	r3, [pc, #228]	; (8000844 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x114>)
 8000760:	2204      	movs	r2, #4
 8000762:	4938      	ldr	r1, [pc, #224]	; (8000844 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x114>)
 8000764:	f000 fdb1 	bl	80012ca <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f103 0020 	add.w	r0, r3, #32
 800076e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	4b32      	ldr	r3, [pc, #200]	; (8000840 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x110>)
 8000776:	2280      	movs	r2, #128	; 0x80
 8000778:	4931      	ldr	r1, [pc, #196]	; (8000840 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x110>)
 800077a:	f000 fda6 	bl	80012ca <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000784:	2301      	movs	r3, #1
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	4b2e      	ldr	r3, [pc, #184]	; (8000844 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x114>)
 800078a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800078e:	492d      	ldr	r1, [pc, #180]	; (8000844 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x114>)
 8000790:	f000 fd9b 	bl	80012ca <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800079a:	2340      	movs	r3, #64	; 0x40
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	4b28      	ldr	r3, [pc, #160]	; (8000840 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x110>)
 80007a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007a4:	4927      	ldr	r1, [pc, #156]	; (8000844 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x114>)
 80007a6:	f000 fd90 	bl	80012ca <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80007b0:	2302      	movs	r3, #2
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	4b23      	ldr	r3, [pc, #140]	; (8000844 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x114>)
 80007b6:	2210      	movs	r2, #16
 80007b8:	4921      	ldr	r1, [pc, #132]	; (8000840 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x110>)
 80007ba:	f000 fd86 	bl	80012ca <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	f103 0060 	add.w	r0, r3, #96	; 0x60
 80007c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x114>)
 80007cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007d0:	491c      	ldr	r1, [pc, #112]	; (8000844 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x114>)
 80007d2:	f000 fd7a 	bl	80012ca <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80007dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x110>)
 80007e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007e8:	4915      	ldr	r1, [pc, #84]	; (8000840 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x110>)
 80007ea:	f000 fd6e 	bl	80012ca <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2200      	movs	r2, #0
 80007f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	338a      	adds	r3, #138	; 0x8a
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	338a      	adds	r3, #138	; 0x8a
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff78 	bl	800070c <_ZN5QueueC1Ev>
{
	this->driveSettings = driveSettings;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	this->driveStatus = driveStatus;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	timeoutCounter = 0;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
}
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4618      	mov	r0, r3
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	48000800 	.word	0x48000800
 8000844:	48000400 	.word	0x48000400

08000848 <_ZN14Digitll_IN_OUT4ReadEv>:

void Digitll_IN_OUT::Read()
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

	configeWriteStatus = CONFIG_WRITE;
 8000850:	2102      	movs	r1, #2
 8000852:	485d      	ldr	r0, [pc, #372]	; (80009c8 <_ZN14Digitll_IN_OUT4ReadEv+0x180>)
 8000854:	f004 fbec 	bl	8005030 <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	2b01      	cmp	r3, #1
 800085c:	bf0c      	ite	eq
 800085e:	2301      	moveq	r3, #1
 8000860:	2300      	movne	r3, #0
 8000862:	b2da      	uxtb	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	if (configeWriteStatus && !previousConfigeWriteStatus)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000870:	2b00      	cmp	r3, #0
 8000872:	f000 8084 	beq.w	800097e <_ZN14Digitll_IN_OUT4ReadEv+0x136>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800087c:	f083 0301 	eor.w	r3, r3, #1
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d07b      	beq.n	800097e <_ZN14Digitll_IN_OUT4ReadEv+0x136>
	{
		//read digial config
		uint8_t data = ((uint8_t) CONFIG_ADDR_7 << 7)
 8000886:	2104      	movs	r1, #4
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f004 fbd0 	bl	8005030 <HAL_GPIO_ReadPin>
 8000890:	4603      	mov	r3, r0
 8000892:	2b80      	cmp	r3, #128	; 0x80
 8000894:	bf0c      	ite	eq
 8000896:	2301      	moveq	r3, #1
 8000898:	2300      	movne	r3, #0
 800089a:	b2db      	uxtb	r3, r3
 800089c:	461c      	mov	r4, r3
				+ (((uint8_t) CONFIG_ADDR_6) << 6)
 800089e:	2102      	movs	r1, #2
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a4:	f004 fbc4 	bl	8005030 <HAL_GPIO_ReadPin>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d101      	bne.n	80008b2 <_ZN14Digitll_IN_OUT4ReadEv+0x6a>
 80008ae:	2340      	movs	r3, #64	; 0x40
 80008b0:	e000      	b.n	80008b4 <_ZN14Digitll_IN_OUT4ReadEv+0x6c>
 80008b2:	2300      	movs	r3, #0
 80008b4:	4423      	add	r3, r4
 80008b6:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_5) << 5)
 80008b8:	2101      	movs	r1, #1
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f004 fbb7 	bl	8005030 <HAL_GPIO_ReadPin>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d101      	bne.n	80008cc <_ZN14Digitll_IN_OUT4ReadEv+0x84>
 80008c8:	2320      	movs	r3, #32
 80008ca:	e000      	b.n	80008ce <_ZN14Digitll_IN_OUT4ReadEv+0x86>
 80008cc:	2300      	movs	r3, #0
 80008ce:	4423      	add	r3, r4
 80008d0:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_4) << 4)
 80008d2:	2108      	movs	r1, #8
 80008d4:	483d      	ldr	r0, [pc, #244]	; (80009cc <_ZN14Digitll_IN_OUT4ReadEv+0x184>)
 80008d6:	f004 fbab 	bl	8005030 <HAL_GPIO_ReadPin>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d101      	bne.n	80008e4 <_ZN14Digitll_IN_OUT4ReadEv+0x9c>
 80008e0:	2310      	movs	r3, #16
 80008e2:	e000      	b.n	80008e6 <_ZN14Digitll_IN_OUT4ReadEv+0x9e>
 80008e4:	2300      	movs	r3, #0
 80008e6:	4423      	add	r3, r4
 80008e8:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_3) << 3)
 80008ea:	2104      	movs	r1, #4
 80008ec:	4837      	ldr	r0, [pc, #220]	; (80009cc <_ZN14Digitll_IN_OUT4ReadEv+0x184>)
 80008ee:	f004 fb9f 	bl	8005030 <HAL_GPIO_ReadPin>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d101      	bne.n	80008fc <_ZN14Digitll_IN_OUT4ReadEv+0xb4>
 80008f8:	2308      	movs	r3, #8
 80008fa:	e000      	b.n	80008fe <_ZN14Digitll_IN_OUT4ReadEv+0xb6>
 80008fc:	2300      	movs	r3, #0
 80008fe:	4423      	add	r3, r4
 8000900:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_2) << 2)
 8000902:	2102      	movs	r1, #2
 8000904:	4831      	ldr	r0, [pc, #196]	; (80009cc <_ZN14Digitll_IN_OUT4ReadEv+0x184>)
 8000906:	f004 fb93 	bl	8005030 <HAL_GPIO_ReadPin>
 800090a:	4603      	mov	r3, r0
 800090c:	2b01      	cmp	r3, #1
 800090e:	d101      	bne.n	8000914 <_ZN14Digitll_IN_OUT4ReadEv+0xcc>
 8000910:	2304      	movs	r3, #4
 8000912:	e000      	b.n	8000916 <_ZN14Digitll_IN_OUT4ReadEv+0xce>
 8000914:	2300      	movs	r3, #0
 8000916:	4423      	add	r3, r4
 8000918:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_1) << 1);
 800091a:	2101      	movs	r1, #1
 800091c:	482b      	ldr	r0, [pc, #172]	; (80009cc <_ZN14Digitll_IN_OUT4ReadEv+0x184>)
 800091e:	f004 fb87 	bl	8005030 <HAL_GPIO_ReadPin>
 8000922:	4603      	mov	r3, r0
 8000924:	2b01      	cmp	r3, #1
 8000926:	d101      	bne.n	800092c <_ZN14Digitll_IN_OUT4ReadEv+0xe4>
 8000928:	2302      	movs	r3, #2
 800092a:	e000      	b.n	800092e <_ZN14Digitll_IN_OUT4ReadEv+0xe6>
 800092c:	2300      	movs	r3, #0
 800092e:	4423      	add	r3, r4
 8000930:	73fb      	strb	r3, [r7, #15]

		//Data/Adress check
		if (isAddressReceived)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000938:	2b00      	cmp	r3, #0
 800093a:	d017      	beq.n	800096c <_ZN14Digitll_IN_OUT4ReadEv+0x124>
		{
			queue.Enqueue(data);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	338a      	adds	r3, #138	; 0x8a
 8000940:	7bfa      	ldrb	r2, [r7, #15]
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f001 ff3f 	bl	80027c8 <_ZN5Queue7EnqueueEh>
			expectedDataSize--;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8000950:	3b01      	subs	r3, #1
 8000952:	b2da      	uxtb	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			if (expectedDataSize == 0)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8000960:	2b00      	cmp	r3, #0
 8000962:	d108      	bne.n	8000976 <_ZN14Digitll_IN_OUT4ReadEv+0x12e>
			{
				CheckData();
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f000 f895 	bl	8000a94 <_ZN14Digitll_IN_OUT9CheckDataEv>
 800096a:	e004      	b.n	8000976 <_ZN14Digitll_IN_OUT4ReadEv+0x12e>
			}
		}
		else
		{
			CheckAddress(data);
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	4619      	mov	r1, r3
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f000 f82d 	bl	80009d0 <_ZN14Digitll_IN_OUT12CheckAddressEh>
		}
		timeoutCounter = 0;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	}

	//Timeoutcounter handling
	if (timeoutCounter >= READ_TIMEOUT)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8000984:	2b63      	cmp	r3, #99	; 0x63
 8000986:	d90c      	bls.n	80009a2 <_ZN14Digitll_IN_OUT4ReadEv+0x15a>
	{
		timeoutCounter = 0;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2200      	movs	r2, #0
 800098c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		isAddressReceived = false;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		expectedDataSize = 0;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 80009a0:	e007      	b.n	80009b2 <_ZN14Digitll_IN_OUT4ReadEv+0x16a>
	}
	else
	{
		timeoutCounter++;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80009a8:	3301      	adds	r3, #1
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	}

	previousConfigeWriteStatus = configeWriteStatus;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 80009be:	bf00      	nop
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd90      	pop	{r4, r7, pc}
 80009c6:	bf00      	nop
 80009c8:	48001c00 	.word	0x48001c00
 80009cc:	48000800 	.word	0x48000800

080009d0 <_ZN14Digitll_IN_OUT12CheckAddressEh>:

bool Digitll_IN_OUT::CheckAddress(uint8_t data)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]
	receivedAddress = data;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	78fa      	ldrb	r2, [r7, #3]
 80009e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	switch (data)
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	2b19      	cmp	r3, #25
 80009ea:	d841      	bhi.n	8000a70 <_ZN14Digitll_IN_OUT12CheckAddressEh+0xa0>
 80009ec:	a201      	add	r2, pc, #4	; (adr r2, 80009f4 <_ZN14Digitll_IN_OUT12CheckAddressEh+0x24>)
 80009ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f2:	bf00      	nop
 80009f4:	08000a5d 	.word	0x08000a5d
 80009f8:	08000a5d 	.word	0x08000a5d
 80009fc:	08000a5d 	.word	0x08000a5d
 8000a00:	08000a5d 	.word	0x08000a5d
 8000a04:	08000a5d 	.word	0x08000a5d
 8000a08:	08000a5d 	.word	0x08000a5d
 8000a0c:	08000a5d 	.word	0x08000a5d
 8000a10:	08000a71 	.word	0x08000a71
 8000a14:	08000a71 	.word	0x08000a71
 8000a18:	08000a71 	.word	0x08000a71
 8000a1c:	08000a71 	.word	0x08000a71
 8000a20:	08000a71 	.word	0x08000a71
 8000a24:	08000a71 	.word	0x08000a71
 8000a28:	08000a71 	.word	0x08000a71
 8000a2c:	08000a71 	.word	0x08000a71
 8000a30:	08000a5d 	.word	0x08000a5d
 8000a34:	08000a5d 	.word	0x08000a5d
 8000a38:	08000a5d 	.word	0x08000a5d
 8000a3c:	08000a5d 	.word	0x08000a5d
 8000a40:	08000a67 	.word	0x08000a67
 8000a44:	08000a5d 	.word	0x08000a5d
 8000a48:	08000a5d 	.word	0x08000a5d
 8000a4c:	08000a67 	.word	0x08000a67
 8000a50:	08000a67 	.word	0x08000a67
 8000a54:	08000a5d 	.word	0x08000a5d
 8000a58:	08000a5d 	.word	0x08000a5d
		case CLAMPING_SPEED:
		case IN_POS_DIFF:
		case OPENING_DISTANCE:
		case OVER_CURRENT_WARNING:
		case OVER_CURRENT_ERROR:
			expectedDataSize = 1;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			break;
 8000a64:	e00e      	b.n	8000a84 <_ZN14Digitll_IN_OUT12CheckAddressEh+0xb4>
		case SELF_SHUTDOWN_DELAY:
		case UNDERVOLTAGE_WARNING:
		case UNDERVOLTAGE_ERROR:
			expectedDataSize = 2;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2202      	movs	r2, #2
 8000a6a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			break;
 8000a6e:	e009      	b.n	8000a84 <_ZN14Digitll_IN_OUT12CheckAddressEh+0xb4>
		default:
			receivedAddress = 0;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2200      	movs	r2, #0
 8000a74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			expectedDataSize = 0;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			return false;
 8000a80:	2300      	movs	r3, #0
 8000a82:	e000      	b.n	8000a86 <_ZN14Digitll_IN_OUT12CheckAddressEh+0xb6>
			break;
	}
	return true;
 8000a84:	2301      	movs	r3, #1
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <_ZN14Digitll_IN_OUT9CheckDataEv>:

void Digitll_IN_OUT::CheckData()
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	switch (receivedAddress)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	2b19      	cmp	r3, #25
 8000aa6:	f200 8339 	bhi.w	800111c <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
 8000aaa:	a201      	add	r2, pc, #4	; (adr r2, 8000ab0 <_ZN14Digitll_IN_OUT9CheckDataEv+0x1c>)
 8000aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab0:	08000b19 	.word	0x08000b19
 8000ab4:	08000b47 	.word	0x08000b47
 8000ab8:	08000b7d 	.word	0x08000b7d
 8000abc:	08000bab 	.word	0x08000bab
 8000ac0:	08000bd9 	.word	0x08000bd9
 8000ac4:	08000c07 	.word	0x08000c07
 8000ac8:	08000c35 	.word	0x08000c35
 8000acc:	0800111d 	.word	0x0800111d
 8000ad0:	0800111d 	.word	0x0800111d
 8000ad4:	0800111d 	.word	0x0800111d
 8000ad8:	0800111d 	.word	0x0800111d
 8000adc:	0800111d 	.word	0x0800111d
 8000ae0:	0800111d 	.word	0x0800111d
 8000ae4:	0800111d 	.word	0x0800111d
 8000ae8:	0800111d 	.word	0x0800111d
 8000aec:	08000c63 	.word	0x08000c63
 8000af0:	08000cd1 	.word	0x08000cd1
 8000af4:	08000d3f 	.word	0x08000d3f
 8000af8:	08000dad 	.word	0x08000dad
 8000afc:	08000fd3 	.word	0x08000fd3
 8000b00:	08000e1b 	.word	0x08000e1b
 8000b04:	08000e89 	.word	0x08000e89
 8000b08:	08001041 	.word	0x08001041
 8000b0c:	080010af 	.word	0x080010af
 8000b10:	08000ef7 	.word	0x08000ef7
 8000b14:	08000f65 	.word	0x08000f65
	{
		case CLOSE:
			driveStatus->setClose(queue.Dequeue() == 0x01);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	338a      	adds	r3, #138	; 0x8a
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 feae 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2301      	moveq	r3, #1
 8000b30:	2300      	movne	r3, #0
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	4619      	mov	r1, r3
 8000b36:	4620      	mov	r0, r4
 8000b38:	f001 fc59 	bl	80023ee <_ZN11DriveStatus8setCloseEb>
			statusChangedReg = true;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
			break;
 8000b44:	e2ea      	b.n	800111c <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case OPEN:
			driveStatus->setOpen(queue.Dequeue() == 0x01);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	338a      	adds	r3, #138	; 0x8a
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 fe97 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	bf0c      	ite	eq
 8000b5c:	2301      	moveq	r3, #1
 8000b5e:	2300      	movne	r3, #0
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	4619      	mov	r1, r3
 8000b64:	4620      	mov	r0, r4
 8000b66:	f001 fc62 	bl	800242e <_ZN11DriveStatus7setOpenEb>
			statusChangedReg = true;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
			statusChangedReg = true;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2201      	movs	r2, #1
 8000b76:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
			break;
 8000b7a:	e2cf      	b.n	800111c <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case TEACH:
			driveStatus->setTeach(queue.Dequeue() == 0x01);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	338a      	adds	r3, #138	; 0x8a
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 fe7c 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	bf0c      	ite	eq
 8000b92:	2301      	moveq	r3, #1
 8000b94:	2300      	movne	r3, #0
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	f001 fce7 	bl	800256e <_ZN11DriveStatus8setTeachEb>
			statusChangedReg = true;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
			break;
 8000ba8:	e2b8      	b.n	800111c <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case RESET:
			driveStatus->setReset(queue.Dequeue() == 0x01);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	338a      	adds	r3, #138	; 0x8a
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f001 fe65 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	bf0c      	ite	eq
 8000bc0:	2301      	moveq	r3, #1
 8000bc2:	2300      	movne	r3, #0
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4620      	mov	r0, r4
 8000bca:	f001 fc90 	bl	80024ee <_ZN11DriveStatus8setResetEb>
			statusChangedReg = true;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
			break;
 8000bd6:	e2a1      	b.n	800111c <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case ENABLE:
			driveStatus->setEnable(queue.Dequeue() == 0x01);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	338a      	adds	r3, #138	; 0x8a
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 fe4e 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	bf0c      	ite	eq
 8000bee:	2301      	moveq	r3, #1
 8000bf0:	2300      	movne	r3, #0
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	f001 fc59 	bl	80024ae <_ZN11DriveStatus9setEnableEb>
			statusChangedReg = true;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
			break;
 8000c04:	e28a      	b.n	800111c <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case DISABLE:
			driveStatus->setDisable(queue.Dequeue() == 0x01);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	338a      	adds	r3, #138	; 0x8a
 8000c10:	4618      	mov	r0, r3
 8000c12:	f001 fe37 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	bf0c      	ite	eq
 8000c1c:	2301      	moveq	r3, #1
 8000c1e:	2300      	movne	r3, #0
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	4619      	mov	r1, r3
 8000c24:	4620      	mov	r0, r4
 8000c26:	f001 fc22 	bl	800246e <_ZN11DriveStatus10setDisableEb>
			statusChangedReg = true;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
			break;
 8000c32:	e273      	b.n	800111c <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case STOP:
			driveStatus->setStop(queue.Dequeue() == 0x01);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	338a      	adds	r3, #138	; 0x8a
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 fe20 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	bf0c      	ite	eq
 8000c4a:	2301      	moveq	r3, #1
 8000c4c:	2300      	movne	r3, #0
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	4619      	mov	r1, r3
 8000c52:	4620      	mov	r0, r4
 8000c54:	f001 fc6b 	bl	800252e <_ZN11DriveStatus7setStopEb>
			statusChangedReg = true;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
			break;
 8000c60:	e25c      	b.n	800111c <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case TEACH_TORQUE:
			dataTemp[0] = queue.Dequeue();
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	338a      	adds	r3, #138	; 0x8a
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 fe0c 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	461a      	mov	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	338a      	adds	r3, #138	; 0x8a
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 fe02 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000c80:	4603      	mov	r3, r0
 8000c82:	461a      	mov	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000c90:	01db      	lsls	r3, r3, #7
 8000c92:	b21a      	sxth	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000c9a:	b21b      	sxth	r3, r3
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	b21b      	sxth	r3, r3
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setTeachTroque(value);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4610      	mov	r0, r2
 8000cb8:	f001 fb11 	bl	80022de <_ZN13DriveSettings14setTeachTroqueEt>
			settingsChangedReg |= TEACH_TORQUE_CHANGE;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 8000cce:	e225      	b.n	800111c <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case TEACH_SPEED:
			dataTemp[0] = queue.Dequeue();
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	338a      	adds	r3, #138	; 0x8a
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f001 fdd5 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461a      	mov	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	338a      	adds	r3, #138	; 0x8a
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f001 fdcb 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000cfe:	01db      	lsls	r3, r3, #7
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000d08:	b21b      	sxth	r3, r3
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b21b      	sxth	r3, r3
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setTeachSpeed(value);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000d22:	4619      	mov	r1, r3
 8000d24:	4610      	mov	r0, r2
 8000d26:	f001 fabf 	bl	80022a8 <_ZN13DriveSettings13setTeachSpeedEt>
			settingsChangedReg |= TEACH_SPEED_CHANGE;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 8000d3c:	e1ee      	b.n	800111c <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case CLAMPING_TORQUE:
			dataTemp[0] = queue.Dequeue();
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	338a      	adds	r3, #138	; 0x8a
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 fd9e 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	338a      	adds	r3, #138	; 0x8a
 8000d56:	4618      	mov	r0, r3
 8000d58:	f001 fd94 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	461a      	mov	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000d6c:	01db      	lsls	r3, r3, #7
 8000d6e:	b21a      	sxth	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000d76:	b21b      	sxth	r3, r3
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setClampingTorque(value);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000d90:	4619      	mov	r1, r3
 8000d92:	4610      	mov	r0, r2
 8000d94:	f001 fa01 	bl	800219a <_ZN13DriveSettings17setClampingTorqueEt>
			settingsChangedReg |= CLAMPING_TORQUE_CHANGE;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 8000daa:	e1b7      	b.n	800111c <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case CLAMPING_SPEED:
			dataTemp[0] = queue.Dequeue();
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	338a      	adds	r3, #138	; 0x8a
 8000db0:	4618      	mov	r0, r3
 8000db2:	f001 fd67 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	338a      	adds	r3, #138	; 0x8a
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f001 fd5d 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000dda:	01db      	lsls	r3, r3, #7
 8000ddc:	b21a      	sxth	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	4313      	orrs	r3, r2
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setClampingSpeed(value);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4610      	mov	r0, r2
 8000e02:	f001 f9af 	bl	8002164 <_ZN13DriveSettings16setClampingSpeedEt>
			settingsChangedReg |= CLAMPING_SPEED_CHANGE;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 8000e18:	e180      	b.n	800111c <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case IN_POS_DIFF:
			dataTemp[0] = queue.Dequeue();
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	338a      	adds	r3, #138	; 0x8a
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 fd30 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461a      	mov	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	338a      	adds	r3, #138	; 0x8a
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fd26 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000e48:	01db      	lsls	r3, r3, #7
 8000e4a:	b21a      	sxth	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000e52:	b21b      	sxth	r3, r3
 8000e54:	4313      	orrs	r3, r2
 8000e56:	b21b      	sxth	r3, r3
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setInPosDiff(value);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4610      	mov	r0, r2
 8000e70:	f001 f9ae 	bl	80021d0 <_ZN13DriveSettings12setInPosDiffEt>
			settingsChangedReg |= IN_POS_DIFF_CHANGE;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000e7a:	f043 0320 	orr.w	r3, r3, #32
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 8000e86:	e149      	b.n	800111c <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case OPENING_DISTANCE:
			dataTemp[0] = queue.Dequeue();
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	338a      	adds	r3, #138	; 0x8a
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 fcf9 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000e92:	4603      	mov	r3, r0
 8000e94:	461a      	mov	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	338a      	adds	r3, #138	; 0x8a
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f001 fcef 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000eb6:	01db      	lsls	r3, r3, #7
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000ec0:	b21b      	sxth	r3, r3
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setOpeningDistance(value);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000eda:	4619      	mov	r1, r3
 8000edc:	4610      	mov	r0, r2
 8000ede:	f001 f992 	bl	8002206 <_ZN13DriveSettings18setOpeningDistanceEt>
			settingsChangedReg |= OPENING_DISTANCE_CHANGE;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 8000ef4:	e112      	b.n	800111c <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case OVER_CURRENT_WARNING:
			dataTemp[0] = queue.Dequeue();
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	338a      	adds	r3, #138	; 0x8a
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fcc2 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	338a      	adds	r3, #138	; 0x8a
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 fcb8 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000f24:	01db      	lsls	r3, r3, #7
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	4313      	orrs	r3, r2
 8000f32:	b21b      	sxth	r3, r3
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setOverCurrentWarning(value);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	f001 f976 	bl	800223c <_ZN13DriveSettings21setOverCurrentWarningEt>
			settingsChangedReg |= OVER_CURRENT_WARNING_CHANGE;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 8000f62:	e0db      	b.n	800111c <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case OVER_CURRENT_ERROR:
			dataTemp[0] = queue.Dequeue();
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	338a      	adds	r3, #138	; 0x8a
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f001 fc8b 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	338a      	adds	r3, #138	; 0x8a
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 fc81 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461a      	mov	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000f92:	01db      	lsls	r3, r3, #7
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setOverCurrentError(value);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4610      	mov	r0, r2
 8000fba:	f001 f9e1 	bl	8002380 <_ZN13DriveSettings19setOverCurrentErrorEt>
			settingsChangedReg |= OVER_CURRENT_ERROR_CHANGE;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000fc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 8000fd0:	e0a4      	b.n	800111c <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case SELF_SHUTDOWN_DELAY:
			dataTemp[0] = queue.Dequeue();
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	338a      	adds	r3, #138	; 0x8a
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 fc54 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	338a      	adds	r3, #138	; 0x8a
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fc4a 	bl	8002884 <_ZN5Queue7DequeueEv>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8001000:	01db      	lsls	r3, r3, #7
 8001002:	b21a      	sxth	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800100a:	b21b      	sxth	r3, r3
 800100c:	4313      	orrs	r3, r2
 800100e:	b21b      	sxth	r3, r3
 8001010:	b29a      	uxth	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setSelfShutdownDelay(value);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001024:	4619      	mov	r1, r3
 8001026:	4610      	mov	r0, r2
 8001028:	f001 f923 	bl	8002272 <_ZN13DriveSettings20setSelfShutdownDelayEt>
			settingsChangedReg |= SELF_SHUTDOWN_DELAY_CHANGE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001032:	f043 0310 	orr.w	r3, r3, #16
 8001036:	b29a      	uxth	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 800103e:	e06d      	b.n	800111c <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case UNDERVOLTAGE_WARNING:
			dataTemp[0] = queue.Dequeue();
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	338a      	adds	r3, #138	; 0x8a
 8001044:	4618      	mov	r0, r3
 8001046:	f001 fc1d 	bl	8002884 <_ZN5Queue7DequeueEv>
 800104a:	4603      	mov	r3, r0
 800104c:	461a      	mov	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	338a      	adds	r3, #138	; 0x8a
 8001058:	4618      	mov	r0, r3
 800105a:	f001 fc13 	bl	8002884 <_ZN5Queue7DequeueEv>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800106e:	01db      	lsls	r3, r3, #7
 8001070:	b21a      	sxth	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21b      	sxth	r3, r3
 800107e:	b29a      	uxth	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setUnderVoltageWarning(value);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001092:	4619      	mov	r1, r3
 8001094:	4610      	mov	r0, r2
 8001096:	f001 f958 	bl	800234a <_ZN13DriveSettings22setUnderVoltageWarningEt>
			settingsChangedReg |= UNDERVOLTAGE_WARNING_CHANGE;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80010a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 80010ac:	e036      	b.n	800111c <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case UNDERVOLTAGE_ERROR:
			dataTemp[0] = queue.Dequeue();
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	338a      	adds	r3, #138	; 0x8a
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 fbe6 	bl	8002884 <_ZN5Queue7DequeueEv>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	338a      	adds	r3, #138	; 0x8a
 80010c6:	4618      	mov	r0, r3
 80010c8:	f001 fbdc 	bl	8002884 <_ZN5Queue7DequeueEv>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80010dc:	01db      	lsls	r3, r3, #7
 80010de:	b21a      	sxth	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setUnderVoltageError(value);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001100:	4619      	mov	r1, r3
 8001102:	4610      	mov	r0, r2
 8001104:	f001 f906 	bl	8002314 <_ZN13DriveSettings20setUnderVoltageErrorEt>
			settingsChangedReg |= UNDERVOLTAGE_ERROR_CHANGE;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800110e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001112:	b29a      	uxth	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 800111a:	bf00      	nop
	}
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bd90      	pop	{r4, r7, pc}

08001124 <_ZN14Digitll_IN_OUT17isSettingsChangedEv>:


uint16_t Digitll_IN_OUT::isSettingsChanged(){
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	settingsChangedReg |= UNDERVOLTAGE_ERROR_CHANGE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001136:	b29a      	uxth	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	settingsChangedReg |= UNDERVOLTAGE_WARNING_CHANGE;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001148:	b29a      	uxth	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	return settingsChangedReg;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>:

void Digitll_IN_OUT::ResetSettingsChanged(uint16_t bit){
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	807b      	strh	r3, [r7, #2]
	settingsChangedReg &= ~bit;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001174:	b21a      	sxth	r2, r3
 8001176:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800117a:	43db      	mvns	r3, r3
 800117c:	b21b      	sxth	r3, r3
 800117e:	4013      	ands	r3, r2
 8001180:	b21b      	sxth	r3, r3
 8001182:	b29a      	uxth	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_ZN14Digitll_IN_OUT15isStatusChangedEv>:

bool Digitll_IN_OUT::isStatusChanged(){
 8001196:	b480      	push	{r7}
 8001198:	b085      	sub	sp, #20
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
	bool statusChangedRegTemp = statusChangedReg;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80011a4:	73fb      	strb	r3, [r7, #15]
	statusChangedReg = false;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
	return statusChangedRegTemp;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <_ZN14Digitll_IN_OUT11WriteOutputEh>:





void Digitll_IN_OUT::WriteOutput(uint8_t data){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	70fb      	strb	r3, [r7, #3]

	data & 0x01 ? Out1.Set() : Out1.Reset();
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d004      	beq.n	80011dc <_ZN14Digitll_IN_OUT11WriteOutputEh+0x20>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 f893 	bl	8001300 <_ZN10DigitalOut3SetEv>
 80011da:	e003      	b.n	80011e4 <_ZN14Digitll_IN_OUT11WriteOutputEh+0x28>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f8ac 	bl	800133c <_ZN10DigitalOut5ResetEv>
	data & 0x02 ? Out2.Set() : Out2.Reset();
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d005      	beq.n	80011fa <_ZN14Digitll_IN_OUT11WriteOutputEh+0x3e>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3310      	adds	r3, #16
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f884 	bl	8001300 <_ZN10DigitalOut3SetEv>
 80011f8:	e004      	b.n	8001204 <_ZN14Digitll_IN_OUT11WriteOutputEh+0x48>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3310      	adds	r3, #16
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f89c 	bl	800133c <_ZN10DigitalOut5ResetEv>
	data & 0x04 ? Out3.Set() : Out3.Reset();
 8001204:	78fb      	ldrb	r3, [r7, #3]
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <_ZN14Digitll_IN_OUT11WriteOutputEh+0x5e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3320      	adds	r3, #32
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f874 	bl	8001300 <_ZN10DigitalOut3SetEv>
 8001218:	e004      	b.n	8001224 <_ZN14Digitll_IN_OUT11WriteOutputEh+0x68>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3320      	adds	r3, #32
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f88c 	bl	800133c <_ZN10DigitalOut5ResetEv>
	data & 0x08 ? Out4.Set() : Out4.Reset();
 8001224:	78fb      	ldrb	r3, [r7, #3]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <_ZN14Digitll_IN_OUT11WriteOutputEh+0x7e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3330      	adds	r3, #48	; 0x30
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f864 	bl	8001300 <_ZN10DigitalOut3SetEv>
 8001238:	e004      	b.n	8001244 <_ZN14Digitll_IN_OUT11WriteOutputEh+0x88>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3330      	adds	r3, #48	; 0x30
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f87c 	bl	800133c <_ZN10DigitalOut5ResetEv>
	data & 0x10 ? Out5.Set() : Out5.Reset();
 8001244:	78fb      	ldrb	r3, [r7, #3]
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	2b00      	cmp	r3, #0
 800124c:	d005      	beq.n	800125a <_ZN14Digitll_IN_OUT11WriteOutputEh+0x9e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3340      	adds	r3, #64	; 0x40
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f854 	bl	8001300 <_ZN10DigitalOut3SetEv>
 8001258:	e004      	b.n	8001264 <_ZN14Digitll_IN_OUT11WriteOutputEh+0xa8>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3340      	adds	r3, #64	; 0x40
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f86c 	bl	800133c <_ZN10DigitalOut5ResetEv>
	data & 0x20 ? Out6.Set() : Out6.Reset();
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	f003 0320 	and.w	r3, r3, #32
 800126a:	2b00      	cmp	r3, #0
 800126c:	d005      	beq.n	800127a <_ZN14Digitll_IN_OUT11WriteOutputEh+0xbe>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3350      	adds	r3, #80	; 0x50
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f844 	bl	8001300 <_ZN10DigitalOut3SetEv>
 8001278:	e004      	b.n	8001284 <_ZN14Digitll_IN_OUT11WriteOutputEh+0xc8>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3350      	adds	r3, #80	; 0x50
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f85c 	bl	800133c <_ZN10DigitalOut5ResetEv>
	data & 0x40 ? Out7.Set() : Out7.Reset();
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800128a:	2b00      	cmp	r3, #0
 800128c:	d005      	beq.n	800129a <_ZN14Digitll_IN_OUT11WriteOutputEh+0xde>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3360      	adds	r3, #96	; 0x60
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f834 	bl	8001300 <_ZN10DigitalOut3SetEv>
 8001298:	e004      	b.n	80012a4 <_ZN14Digitll_IN_OUT11WriteOutputEh+0xe8>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3360      	adds	r3, #96	; 0x60
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f84c 	bl	800133c <_ZN10DigitalOut5ResetEv>
	data & 0x80 ? Out8.Set() : Out7.Reset();
 80012a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	da05      	bge.n	80012b8 <_ZN14Digitll_IN_OUT11WriteOutputEh+0xfc>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3370      	adds	r3, #112	; 0x70
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 f825 	bl	8001300 <_ZN10DigitalOut3SetEv>
}
 80012b6:	e004      	b.n	80012c2 <_ZN14Digitll_IN_OUT11WriteOutputEh+0x106>
	data & 0x80 ? Out8.Set() : Out7.Reset();
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3360      	adds	r3, #96	; 0x60
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 f83d 	bl	800133c <_ZN10DigitalOut5ResetEv>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>:
 */

#include "DO.h"
#include "../Tools/Delay.h"

DigitalOut::DigitalOut(GPIO_TypeDef* GPIOx_N, uint16_t GPIO_Pin_N, GPIO_TypeDef* GPIOx_P, uint16_t GPIO_Pin_P){
 80012ca:	b480      	push	{r7}
 80012cc:	b085      	sub	sp, #20
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	4613      	mov	r3, r2
 80012d8:	80fb      	strh	r3, [r7, #6]
	this->GPIO_Pin_N = GPIO_Pin_N;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	88fa      	ldrh	r2, [r7, #6]
 80012de:	809a      	strh	r2, [r3, #4]
	this->GPIOx_N = GPIOx_N;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	601a      	str	r2, [r3, #0]
	this->GPIO_Pin_N = GPIO_Pin_P;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	8b3a      	ldrh	r2, [r7, #24]
 80012ea:	809a      	strh	r2, [r3, #4]
	this->GPIOx_N = GPIOx_P;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	601a      	str	r2, [r3, #0]
}
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <_ZN10DigitalOut3SetEv>:


/*
 *
 */
void DigitalOut::Set() {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	//P set, N reset
	HAL_GPIO_WritePin(GPIOx_N, GPIO_Pin_N, GPIO_PIN_RESET);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6818      	ldr	r0, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	889b      	ldrh	r3, [r3, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	4619      	mov	r1, r3
 8001314:	f003 fea4 	bl	8005060 <HAL_GPIO_WritePin>
	Delay::DWT_Delay_us(25);
 8001318:	2019      	movs	r0, #25
 800131a:	f001 fa2d 	bl	8002778 <_ZN5Delay12DWT_Delay_usEm>
	HAL_GPIO_WritePin(GPIOx_P, GPIO_Pin_P, GPIO_PIN_SET);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6898      	ldr	r0, [r3, #8]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	899b      	ldrh	r3, [r3, #12]
 8001326:	2201      	movs	r2, #1
 8001328:	4619      	mov	r1, r3
 800132a:	f003 fe99 	bl	8005060 <HAL_GPIO_WritePin>
	status = true;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	739a      	strb	r2, [r3, #14]
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <_ZN10DigitalOut5ResetEv>:


/*
 *
 */
void DigitalOut::Reset() {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOx_P, GPIO_Pin_P, GPIO_PIN_RESET);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6898      	ldr	r0, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	899b      	ldrh	r3, [r3, #12]
 800134c:	2200      	movs	r2, #0
 800134e:	4619      	mov	r1, r3
 8001350:	f003 fe86 	bl	8005060 <HAL_GPIO_WritePin>
	Delay::DWT_Delay_us(25);
 8001354:	2019      	movs	r0, #25
 8001356:	f001 fa0f 	bl	8002778 <_ZN5Delay12DWT_Delay_usEm>
	HAL_GPIO_WritePin(GPIOx_N, GPIO_Pin_N, GPIO_PIN_SET);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	889b      	ldrh	r3, [r3, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	4619      	mov	r1, r3
 8001366:	f003 fe7b 	bl	8005060 <HAL_GPIO_WritePin>
	status = false;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	739a      	strb	r2, [r3, #14]
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <_ZN3LEDC1EP12GPIO_TypeDeftb>:


#include "LED.h"


LED::LED(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool outputInverted) {
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	4611      	mov	r1, r2
 8001384:	461a      	mov	r2, r3
 8001386:	460b      	mov	r3, r1
 8001388:	80fb      	strh	r3, [r7, #6]
 800138a:	4613      	mov	r3, r2
 800138c:	717b      	strb	r3, [r7, #5]

	this->GPIO_Pin = GPIO_Pin;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	88fa      	ldrh	r2, [r7, #6]
 8001392:	809a      	strh	r2, [r3, #4]
	this->GPIOx = GPIOx;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	601a      	str	r2, [r3, #0]
	this->outputInverted = outputInverted;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	797a      	ldrb	r2, [r7, #5]
 800139e:	719a      	strb	r2, [r3, #6]
}
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4618      	mov	r0, r3
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <_ZN3LED3OFFEv>:
}

/*
 * LED OFF method
 */
void LED::OFF() {
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
	//check if output is inverted
	if(outputInverted){
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	799b      	ldrb	r3, [r3, #6]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d008      	beq.n	80013d0 <_ZN3LED3OFFEv+0x22>
		//clear output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	889b      	ldrh	r3, [r3, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	4619      	mov	r1, r3
 80013ca:	f003 fe49 	bl	8005060 <HAL_GPIO_WritePin>
	}else{
		//write output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
	}
}
 80013ce:	e007      	b.n	80013e0 <_ZN3LED3OFFEv+0x32>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6818      	ldr	r0, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	889b      	ldrh	r3, [r3, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	4619      	mov	r1, r3
 80013dc:	f003 fe40 	bl	8005060 <HAL_GPIO_WritePin>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <_ZN3LED6ToggleEv>:

/*
 * LED Toggle method
 */
void LED::Toggle() {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	889b      	ldrh	r3, [r3, #4]
 80013f8:	4619      	mov	r1, r3
 80013fa:	4610      	mov	r0, r2
 80013fc:	f003 fe48 	bl	8005090 <HAL_GPIO_TogglePin>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <_ZN13CommunicationC1EP11DriveStatusP13DriveSettingsP10RFM95_LoRaP14Digitll_IN_OUT>:
 *      Author: marce
 */

#include "Communication.h"

Communication::Communication(DriveStatus *driveStatus,
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	603b      	str	r3, [r7, #0]
		DriveSettings *driveSettings, RFM95_LoRa *rfm95, Digitll_IN_OUT *digitalInOut)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3310      	adds	r3, #16
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	811a      	strh	r2, [r3, #8]
{
	this->driveSettings = driveSettings;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	605a      	str	r2, [r3, #4]
	this->driveStatus = driveStatus;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	601a      	str	r2, [r3, #0]
	this->rfm95 = rfm95;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	609a      	str	r2, [r3, #8]
	this->digitalInOut = digitalInOut;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	60da      	str	r2, [r3, #12]
}
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4618      	mov	r0, r3
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <_ZN13Communication9UpdateComEv>:
 * 1. Priority -> write Status (
 *
 *
 */
bool Communication::UpdateCom()
{
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b08b      	sub	sp, #44	; 0x2c
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	uint8_t data2send[6] =
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	2300      	movs	r3, #0
 8001456:	81bb      	strh	r3, [r7, #12]
	{ 0 };

	if (digitalInOut->isStatusChanged())
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fe9a 	bl	8001196 <_ZN14Digitll_IN_OUT15isStatusChangedEv>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d067      	beq.n	8001538 <_ZN13Communication9UpdateComEv+0xf0>
	{
		uint8_t data = ((uint8_t) driveStatus->isClose() << 8)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f000 ffad 	bl	80023cc <_ZN11DriveStatus7isCloseEv>
 8001472:	4603      	mov	r3, r0
 8001474:	021b      	lsls	r3, r3, #8
				| ((uint8_t) driveStatus->isDisable() << 8)
 8001476:	b25c      	sxtb	r4, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f000 ffe5 	bl	800244c <_ZN11DriveStatus9isDisableEv>
 8001482:	4603      	mov	r3, r0
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	b25b      	sxtb	r3, r3
 8001488:	4323      	orrs	r3, r4
 800148a:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveStatus->isEnable() << 8)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fffb 	bl	800248c <_ZN11DriveStatus8isEnableEv>
 8001496:	4603      	mov	r3, r0
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	b25b      	sxtb	r3, r3
 800149c:	4323      	orrs	r3, r4
 800149e:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveStatus->isOpen() << 8)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 ffb1 	bl	800240c <_ZN11DriveStatus6isOpenEv>
 80014aa:	4603      	mov	r3, r0
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	b25b      	sxtb	r3, r3
 80014b0:	4323      	orrs	r3, r4
 80014b2:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveStatus->isReset() << 8)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f001 f807 	bl	80024cc <_ZN11DriveStatus7isResetEv>
 80014be:	4603      	mov	r3, r0
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	b25b      	sxtb	r3, r3
 80014c4:	4323      	orrs	r3, r4
 80014c6:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveStatus->isStop() << 8)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f001 f81d 	bl	800250c <_ZN11DriveStatus6isStopEv>
 80014d2:	4603      	mov	r3, r0
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	b25b      	sxtb	r3, r3
 80014d8:	4323      	orrs	r3, r4
 80014da:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveStatus->isTeach() << 8)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f001 f833 	bl	800254c <_ZN11DriveStatus7isTeachEv>
 80014e6:	4603      	mov	r3, r0
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	4323      	orrs	r3, r4
 80014ee:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveStatus->isWriteConfig() << 8);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f001 f849 	bl	800258c <_ZN11DriveStatus13isWriteConfigEv>
 80014fa:	4603      	mov	r3, r0
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	4323      	orrs	r3, r4
 8001502:	b25b      	sxtb	r3, r3
 8001504:	73fb      	strb	r3, [r7, #15]

		data2send[0] = driveSettings->getDeviceAddress();
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4618      	mov	r0, r3
 800150c:	f000 ff47 	bl	800239e <_ZNK13DriveSettings16getDeviceAddressEv>
 8001510:	4603      	mov	r3, r0
 8001512:	723b      	strb	r3, [r7, #8]
		data2send[1] = SEND_COMMAND;
 8001514:	2302      	movs	r3, #2
 8001516:	727b      	strb	r3, [r7, #9]
		data2send[2] = data;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	72bb      	strb	r3, [r7, #10]
		data2send[3] = 5;
 800151c:	2305      	movs	r3, #5
 800151e:	72fb      	strb	r3, [r7, #11]
		data2send[4] = CRC8(data2send, data2send[3] - 1);
 8001520:	7afb      	ldrb	r3, [r7, #11]
 8001522:	3b01      	subs	r3, #1
 8001524:	b2da      	uxtb	r2, r3
 8001526:	f107 0308 	add.w	r3, r7, #8
 800152a:	4619      	mov	r1, r3
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 f9fc 	bl	800192a <_ZN13Communication4CRC8EPhh>
 8001532:	4603      	mov	r3, r0
 8001534:	733b      	strb	r3, [r7, #12]
 8001536:	e182      	b.n	800183e <_ZN13Communication9UpdateComEv+0x3f6>
	}
	else if (digitalInOut->isSettingsChanged() != 0)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fdf1 	bl	8001124 <_ZN14Digitll_IN_OUT17isSettingsChangedEv>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf14      	ite	ne
 8001548:	2301      	movne	r3, #1
 800154a:	2300      	moveq	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 815f 	beq.w	8001812 <_ZN13Communication9UpdateComEv+0x3ca>
	{
		uint16_t commands = digitalInOut->isSettingsChanged();
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fde3 	bl	8001124 <_ZN14Digitll_IN_OUT17isSettingsChangedEv>
 800155e:	4603      	mov	r3, r0
 8001560:	84fb      	strh	r3, [r7, #38]	; 0x26
		data2send[0] = driveSettings->getDeviceAddress();
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	4618      	mov	r0, r3
 8001568:	f000 ff19 	bl	800239e <_ZNK13DriveSettings16getDeviceAddressEv>
 800156c:	4603      	mov	r3, r0
 800156e:	723b      	strb	r3, [r7, #8]
		data2send[1] = SEND_SETTINGS;
 8001570:	2301      	movs	r3, #1
 8001572:	727b      	strb	r3, [r7, #9]

		if (commands & TEACH_TORQUE_CHANGE)
 8001574:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d017      	beq.n	80015ae <_ZN13Communication9UpdateComEv+0x166>
		{
			data2send[2] = TEACH_TORQUE;
 800157e:	2310      	movs	r3, #16
 8001580:	72bb      	strb	r3, [r7, #10]
			uint16_t value = driveSettings->getTeachTroque();
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	4618      	mov	r0, r3
 8001588:	f000 fe9d 	bl	80022c6 <_ZNK13DriveSettings14getTeachTroqueEv>
 800158c:	4603      	mov	r3, r0
 800158e:	823b      	strh	r3, [r7, #16]
			data2send[3] = value >> 8;
 8001590:	8a3b      	ldrh	r3, [r7, #16]
 8001592:	0a1b      	lsrs	r3, r3, #8
 8001594:	b29b      	uxth	r3, r3
 8001596:	b2db      	uxtb	r3, r3
 8001598:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 800159a:	8a3b      	ldrh	r3, [r7, #16]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(TEACH_TORQUE_CHANGE);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2101      	movs	r1, #1
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fddb 	bl	8001162 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 80015ac:	e123      	b.n	80017f6 <_ZN13Communication9UpdateComEv+0x3ae>
		}
		else if (commands & TEACH_SPEED_CHANGE)
 80015ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d017      	beq.n	80015e8 <_ZN13Communication9UpdateComEv+0x1a0>
		{
			uint16_t value = driveSettings->getTeachSpeed();
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 fe67 	bl	8002290 <_ZNK13DriveSettings13getTeachSpeedEv>
 80015c2:	4603      	mov	r3, r0
 80015c4:	827b      	strh	r3, [r7, #18]
			data2send[2] = TEACH_SPEED;
 80015c6:	2311      	movs	r3, #17
 80015c8:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 80015ca:	8a7b      	ldrh	r3, [r7, #18]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 80015d4:	8a7b      	ldrh	r3, [r7, #18]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(TEACH_SPEED_CHANGE);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2102      	movs	r1, #2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fdbe 	bl	8001162 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 80015e6:	e106      	b.n	80017f6 <_ZN13Communication9UpdateComEv+0x3ae>
		}
		else if (commands & CLAMPING_TORQUE_CHANGE)
 80015e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d017      	beq.n	8001622 <_ZN13Communication9UpdateComEv+0x1da>
		{
			uint16_t value = driveSettings->getClampingTorque();
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 fdc3 	bl	8002182 <_ZNK13DriveSettings17getClampingTorqueEv>
 80015fc:	4603      	mov	r3, r0
 80015fe:	82bb      	strh	r3, [r7, #20]
			data2send[2] = CLAMPING_TORQUE;
 8001600:	2312      	movs	r3, #18
 8001602:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 8001604:	8abb      	ldrh	r3, [r7, #20]
 8001606:	0a1b      	lsrs	r3, r3, #8
 8001608:	b29b      	uxth	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 800160e:	8abb      	ldrh	r3, [r7, #20]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(CLAMPING_TORQUE_CHANGE);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2104      	movs	r1, #4
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fda1 	bl	8001162 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8001620:	e0e9      	b.n	80017f6 <_ZN13Communication9UpdateComEv+0x3ae>
		}
		else if (commands & CLAMPING_SPEED_CHANGE)
 8001622:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d017      	beq.n	800165c <_ZN13Communication9UpdateComEv+0x214>
		{
			uint16_t value = driveSettings->getClampingSpeed();
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fd8b 	bl	800214c <_ZNK13DriveSettings16getClampingSpeedEv>
 8001636:	4603      	mov	r3, r0
 8001638:	82fb      	strh	r3, [r7, #22]
			data2send[2] = CLAMPING_SPEED;
 800163a:	2313      	movs	r3, #19
 800163c:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 800163e:	8afb      	ldrh	r3, [r7, #22]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	b29b      	uxth	r3, r3
 8001644:	b2db      	uxtb	r3, r3
 8001646:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8001648:	8afb      	ldrh	r3, [r7, #22]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(CLAMPING_SPEED_CHANGE);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2108      	movs	r1, #8
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fd84 	bl	8001162 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 800165a:	e0cc      	b.n	80017f6 <_ZN13Communication9UpdateComEv+0x3ae>
		}
		else if (commands & SELF_SHUTDOWN_DELAY_CHANGE)
 800165c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	2b00      	cmp	r3, #0
 8001664:	d017      	beq.n	8001696 <_ZN13Communication9UpdateComEv+0x24e>
		{
			uint16_t value = driveSettings->getSelfShutdownDelay();
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	4618      	mov	r0, r3
 800166c:	f000 fdf5 	bl	800225a <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8001670:	4603      	mov	r3, r0
 8001672:	833b      	strh	r3, [r7, #24]
			data2send[2] = SELF_SHUTDOWN_DELAY;
 8001674:	2314      	movs	r3, #20
 8001676:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 8001678:	8b3b      	ldrh	r3, [r7, #24]
 800167a:	0a1b      	lsrs	r3, r3, #8
 800167c:	b29b      	uxth	r3, r3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8001682:	8b3b      	ldrh	r3, [r7, #24]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(SELF_SHUTDOWN_DELAY_CHANGE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2110      	movs	r1, #16
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fd67 	bl	8001162 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8001694:	e0af      	b.n	80017f6 <_ZN13Communication9UpdateComEv+0x3ae>
		}
		else if (commands & IN_POS_DIFF_CHANGE)
 8001696:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001698:	f003 0320 	and.w	r3, r3, #32
 800169c:	2b00      	cmp	r3, #0
 800169e:	d017      	beq.n	80016d0 <_ZN13Communication9UpdateComEv+0x288>
		{
			uint16_t value = driveSettings->getInPosDiff();
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 fd87 	bl	80021b8 <_ZNK13DriveSettings12getInPosDiffEv>
 80016aa:	4603      	mov	r3, r0
 80016ac:	837b      	strh	r3, [r7, #26]
			data2send[2] = IN_POS_DIFF;
 80016ae:	2315      	movs	r3, #21
 80016b0:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 80016b2:	8b7b      	ldrh	r3, [r7, #26]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 80016bc:	8b7b      	ldrh	r3, [r7, #26]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(IN_POS_DIFF_CHANGE);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2120      	movs	r1, #32
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fd4a 	bl	8001162 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 80016ce:	e092      	b.n	80017f6 <_ZN13Communication9UpdateComEv+0x3ae>
		}
		else if (commands & OPENING_DISTANCE_CHANGE)
 80016d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d017      	beq.n	800170a <_ZN13Communication9UpdateComEv+0x2c2>
		{
			uint16_t value = driveSettings->getOpeningDistance();
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 fd85 	bl	80021ee <_ZNK13DriveSettings18getOpeningDistanceEv>
 80016e4:	4603      	mov	r3, r0
 80016e6:	83bb      	strh	r3, [r7, #28]
			data2send[2] = OPENING_DISTANCE;
 80016e8:	2316      	movs	r3, #22
 80016ea:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 80016ec:	8bbb      	ldrh	r3, [r7, #28]
 80016ee:	0a1b      	lsrs	r3, r3, #8
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 80016f6:	8bbb      	ldrh	r3, [r7, #28]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(OPENING_DISTANCE_CHANGE);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2140      	movs	r1, #64	; 0x40
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fd2d 	bl	8001162 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8001708:	e075      	b.n	80017f6 <_ZN13Communication9UpdateComEv+0x3ae>
		}
		else if (commands & UNDERVOLTAGE_WARNING_CHANGE)
 800170a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800170c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001710:	2b00      	cmp	r3, #0
 8001712:	d017      	beq.n	8001744 <_ZN13Communication9UpdateComEv+0x2fc>
		{
			uint16_t value = driveSettings->getUnderVoltageWarning();
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	f000 fe0a 	bl	8002332 <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 800171e:	4603      	mov	r3, r0
 8001720:	83fb      	strh	r3, [r7, #30]
			data2send[2] = UNDERVOLTAGE_WARNING;
 8001722:	2317      	movs	r3, #23
 8001724:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 8001726:	8bfb      	ldrh	r3, [r7, #30]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	b29b      	uxth	r3, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8001730:	8bfb      	ldrh	r3, [r7, #30]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(UNDERVOLTAGE_WARNING_CHANGE);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2180      	movs	r1, #128	; 0x80
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fd10 	bl	8001162 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8001742:	e058      	b.n	80017f6 <_ZN13Communication9UpdateComEv+0x3ae>
		}
		else if (commands & UNDERVOLTAGE_ERROR_CHANGE)
 8001744:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174a:	2b00      	cmp	r3, #0
 800174c:	d018      	beq.n	8001780 <_ZN13Communication9UpdateComEv+0x338>
		{
			uint16_t value = driveSettings->getUnderVoltageError();
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4618      	mov	r0, r3
 8001754:	f000 fdd2 	bl	80022fc <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8001758:	4603      	mov	r3, r0
 800175a:	843b      	strh	r3, [r7, #32]
			data2send[2] = UNDERVOLTAGE_ERROR;
 800175c:	2318      	movs	r3, #24
 800175e:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 8001760:	8c3b      	ldrh	r3, [r7, #32]
 8001762:	0a1b      	lsrs	r3, r3, #8
 8001764:	b29b      	uxth	r3, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 800176a:	8c3b      	ldrh	r3, [r7, #32]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(UNDERVOLTAGE_ERROR_CHANGE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fcf2 	bl	8001162 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 800177e:	e03a      	b.n	80017f6 <_ZN13Communication9UpdateComEv+0x3ae>
		}
		else if (commands & OVER_CURRENT_WARNING_CHANGE)
 8001780:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001782:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001786:	2b00      	cmp	r3, #0
 8001788:	d018      	beq.n	80017bc <_ZN13Communication9UpdateComEv+0x374>
		{
			uint16_t value = driveSettings->getOverCurrentWarning();
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4618      	mov	r0, r3
 8001790:	f000 fd48 	bl	8002224 <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8001794:	4603      	mov	r3, r0
 8001796:	847b      	strh	r3, [r7, #34]	; 0x22
			data2send[2] = OVER_CURRENT_WARNING;
 8001798:	2319      	movs	r3, #25
 800179a:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 800179c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 80017a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(OVER_CURRENT_WARNING_CHANGE);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fcd4 	bl	8001162 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 80017ba:	e01c      	b.n	80017f6 <_ZN13Communication9UpdateComEv+0x3ae>
		}
		else if (commands & OVER_CURRENT_ERROR_CHANGE)
 80017bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d017      	beq.n	80017f6 <_ZN13Communication9UpdateComEv+0x3ae>
		{
			uint16_t value = driveSettings->getOverCurrentError();
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 fdcc 	bl	8002368 <_ZNK13DriveSettings19getOverCurrentErrorEv>
 80017d0:	4603      	mov	r3, r0
 80017d2:	84bb      	strh	r3, [r7, #36]	; 0x24
			data2send[2] = OVER_CURRENT_ERROR;
 80017d4:	231a      	movs	r3, #26
 80017d6:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 80017d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017da:	0a1b      	lsrs	r3, r3, #8
 80017dc:	b29b      	uxth	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 80017e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(OVER_CURRENT_ERROR_CHANGE);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fcb6 	bl	8001162 <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
		}

		data2send[4] = 6;
 80017f6:	2306      	movs	r3, #6
 80017f8:	733b      	strb	r3, [r7, #12]
		data2send[5] = CRC8(data2send, data2send[4]-1);
 80017fa:	7b3b      	ldrb	r3, [r7, #12]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	f107 0308 	add.w	r3, r7, #8
 8001804:	4619      	mov	r1, r3
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f88f 	bl	800192a <_ZN13Communication4CRC8EPhh>
 800180c:	4603      	mov	r3, r0
 800180e:	737b      	strb	r3, [r7, #13]
 8001810:	e015      	b.n	800183e <_ZN13Communication9UpdateComEv+0x3f6>
	}
	else
	{
		data2send[0] = driveSettings->getDeviceAddress();
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fdc1 	bl	800239e <_ZNK13DriveSettings16getDeviceAddressEv>
 800181c:	4603      	mov	r3, r0
 800181e:	723b      	strb	r3, [r7, #8]
		data2send[1] = SEND_STATUS_REQ;
 8001820:	2303      	movs	r3, #3
 8001822:	727b      	strb	r3, [r7, #9]
		data2send[2] = 4;
 8001824:	2304      	movs	r3, #4
 8001826:	72bb      	strb	r3, [r7, #10]
		data2send[3] = CRC8(data2send, data2send[2]-1);
 8001828:	7abb      	ldrb	r3, [r7, #10]
 800182a:	3b01      	subs	r3, #1
 800182c:	b2da      	uxtb	r2, r3
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	4619      	mov	r1, r3
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 f878 	bl	800192a <_ZN13Communication4CRC8EPhh>
 800183a:	4603      	mov	r3, r0
 800183c:	72fb      	strb	r3, [r7, #11]
	}

	rfm95->write(data2send, 6);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6898      	ldr	r0, [r3, #8]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	3304      	adds	r3, #4
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f107 0108 	add.w	r1, r7, #8
 8001850:	2206      	movs	r2, #6
 8001852:	4798      	blx	r3
	return true;
 8001854:	2301      	movs	r3, #1
}
 8001856:	4618      	mov	r0, r3
 8001858:	372c      	adds	r7, #44	; 0x2c
 800185a:	46bd      	mov	sp, r7
 800185c:	bd90      	pop	{r4, r7, pc}

0800185e <_ZN13Communication8ReadDataEv>:


void Communication::ReadData(){
 800185e:	b580      	push	{r7, lr}
 8001860:	b084      	sub	sp, #16
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]

	uint8_t packetSize = rfm95->parsePacket();
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f000 f980 	bl	8001b72 <_ZN10RFM95_LoRa11parsePacketEi>
 8001872:	4603      	mov	r3, r0
 8001874:	73fb      	strb	r3, [r7, #15]
	if(packetSize != 0){
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d053      	beq.n	8001924 <_ZN13Communication8ReadDataEv+0xc6>
		uint8_t counter = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	73bb      	strb	r3, [r7, #14]
		while(rfm95->available()){
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	3308      	adds	r3, #8
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4610      	mov	r0, r2
 8001890:	4798      	blx	r3
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	bf14      	ite	ne
 8001898:	2301      	movne	r3, #1
 800189a:	2300      	moveq	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d013      	beq.n	80018ca <_ZN13Communication8ReadDataEv+0x6c>
			rxData[counter] = rfm95->read();
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	330c      	adds	r3, #12
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4610      	mov	r0, r2
 80018b2:	4798      	blx	r3
 80018b4:	4602      	mov	r2, r0
 80018b6:	7bbb      	ldrb	r3, [r7, #14]
 80018b8:	b2d1      	uxtb	r1, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	460a      	mov	r2, r1
 80018c0:	741a      	strb	r2, [r3, #16]
			if(counter > MAX_PACKET_2_RECEIVE){
 80018c2:	7bbb      	ldrb	r3, [r7, #14]
 80018c4:	2b0a      	cmp	r3, #10
 80018c6:	d828      	bhi.n	800191a <_ZN13Communication8ReadDataEv+0xbc>
		while(rfm95->available()){
 80018c8:	e7da      	b.n	8001880 <_ZN13Communication8ReadDataEv+0x22>
				return;
			}
		}

		//uint8_t addr = rxData[0];
		uint8_t command = rxData[1];
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7c5b      	ldrb	r3, [r3, #17]
 80018ce:	737b      	strb	r3, [r7, #13]
		//data = rxData[2...(counter-1)]
		//uint8_t size = rxData[counter-1];
		uint8_t crc8 = rxData[counter];
 80018d0:	7bbb      	ldrb	r3, [r7, #14]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	7c1b      	ldrb	r3, [r3, #16]
 80018d8:	733b      	strb	r3, [r7, #12]

		if(CRC8(rxData, counter-1) != crc8){
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f103 0110 	add.w	r1, r3, #16
 80018e0:	7bbb      	ldrb	r3, [r7, #14]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f81e 	bl	800192a <_ZN13Communication4CRC8EPhh>
 80018ee:	4603      	mov	r3, r0
 80018f0:	461a      	mov	r2, r3
 80018f2:	7b3b      	ldrb	r3, [r7, #12]
 80018f4:	4293      	cmp	r3, r2
 80018f6:	bf14      	ite	ne
 80018f8:	2301      	movne	r3, #1
 80018fa:	2300      	moveq	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10d      	bne.n	800191e <_ZN13Communication8ReadDataEv+0xc0>
			//error crc error //ToDO
			return;
		}

		switch (command) {
 8001902:	7b7b      	ldrb	r3, [r7, #13]
 8001904:	2b11      	cmp	r3, #17
 8001906:	d10c      	bne.n	8001922 <_ZN13Communication8ReadDataEv+0xc4>
			case RCV_STATUS:
				digitalInOut->WriteOutput(rxData[2]);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7c9b      	ldrb	r3, [r3, #18]
 8001910:	4619      	mov	r1, r3
 8001912:	4610      	mov	r0, r2
 8001914:	f7ff fc52 	bl	80011bc <_ZN14Digitll_IN_OUT11WriteOutputEh>
				break;
 8001918:	e004      	b.n	8001924 <_ZN13Communication8ReadDataEv+0xc6>
				return;
 800191a:	bf00      	nop
 800191c:	e002      	b.n	8001924 <_ZN13Communication8ReadDataEv+0xc6>
			return;
 800191e:	bf00      	nop
 8001920:	e000      	b.n	8001924 <_ZN13Communication8ReadDataEv+0xc6>
			default:
				//error no supported command //ToDO
				break;
 8001922:	bf00      	nop
		}
	}
}
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_ZN13Communication4CRC8EPhh>:


uint8_t Communication::CRC8(uint8_t *data, uint8_t length)
{
 800192a:	b480      	push	{r7}
 800192c:	b089      	sub	sp, #36	; 0x24
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	4613      	mov	r3, r2
 8001936:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0xff;
 8001938:	23ff      	movs	r3, #255	; 0xff
 800193a:	77fb      	strb	r3, [r7, #31]
	size_t i, j;
	for (i = 0; i < length; i++)
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	429a      	cmp	r2, r3
 8001946:	d222      	bcs.n	800198e <_ZN13Communication4CRC8EPhh+0x64>
	{
		crc ^= data[i];
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	4413      	add	r3, r2
 800194e:	781a      	ldrb	r2, [r3, #0]
 8001950:	7ffb      	ldrb	r3, [r7, #31]
 8001952:	4053      	eors	r3, r2
 8001954:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	2b07      	cmp	r3, #7
 800195e:	d812      	bhi.n	8001986 <_ZN13Communication4CRC8EPhh+0x5c>
		{
			if ((crc & 0x80) != 0)
 8001960:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001964:	2b00      	cmp	r3, #0
 8001966:	da07      	bge.n	8001978 <_ZN13Communication4CRC8EPhh+0x4e>
				crc = (uint8_t) ((crc << 1) ^ 0x31);
 8001968:	7ffb      	ldrb	r3, [r7, #31]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	b25b      	sxtb	r3, r3
 800196e:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001972:	b25b      	sxtb	r3, r3
 8001974:	77fb      	strb	r3, [r7, #31]
 8001976:	e002      	b.n	800197e <_ZN13Communication4CRC8EPhh+0x54>
			else
				crc <<= 1;
 8001978:	7ffb      	ldrb	r3, [r7, #31]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3301      	adds	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	e7e9      	b.n	800195a <_ZN13Communication4CRC8EPhh+0x30>
	for (i = 0; i < length; i++)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	3301      	adds	r3, #1
 800198a:	61bb      	str	r3, [r7, #24]
 800198c:	e7d8      	b.n	8001940 <_ZN13Communication4CRC8EPhh+0x16>
		}
	}
	return crc;
 800198e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3724      	adds	r7, #36	; 0x24
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_ZN10RFM95_LoRaC1Ev>:
 */

#include "RFM95.h"
#include "../AppMain/AppMain.h"

RFM95_LoRa::RFM95_LoRa() :
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(0)
 80019a4:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <_ZN10RFM95_LoRaC1Ev+0x34>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	615a      	str	r2, [r3, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
{

}
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	0800db30 	.word	0x0800db30

080019d4 <_ZN10RFM95_LoRa9selectRFMEv>:
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::selectRFM(){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	2108      	movs	r1, #8
 80019e0:	4803      	ldr	r0, [pc, #12]	; (80019f0 <_ZN10RFM95_LoRa9selectRFMEv+0x1c>)
 80019e2:	f003 fb3d 	bl	8005060 <HAL_GPIO_WritePin>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	48000400 	.word	0x48000400

080019f4 <_ZN10RFM95_LoRa11deselectRFMEv>:
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::deselectRFM(){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_SET);
 80019fc:	2201      	movs	r2, #1
 80019fe:	2108      	movs	r1, #8
 8001a00:	4803      	ldr	r0, [pc, #12]	; (8001a10 <_ZN10RFM95_LoRa11deselectRFMEv+0x1c>)
 8001a02:	f003 fb2d 	bl	8005060 <HAL_GPIO_WritePin>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	48000400 	.word	0x48000400

08001a14 <_ZN10RFM95_LoRa8resetRFMEv>:

void RFM95_LoRa::resetRFM(){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2110      	movs	r1, #16
 8001a20:	4808      	ldr	r0, [pc, #32]	; (8001a44 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 8001a22:	f003 fb1d 	bl	8005060 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001a26:	2001      	movs	r0, #1
 8001a28:	f001 fe10 	bl	800364c <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	2110      	movs	r1, #16
 8001a30:	4804      	ldr	r0, [pc, #16]	; (8001a44 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 8001a32:	f003 fb15 	bl	8005060 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001a36:	2005      	movs	r0, #5
 8001a38:	f001 fe08 	bl	800364c <HAL_Delay>
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	48000400 	.word	0x48000400

08001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>:

bool RFM95_LoRa::writeRegister(uint8_t addr, uint8_t data){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	70fb      	strb	r3, [r7, #3]
 8001a54:	4613      	mov	r3, r2
 8001a56:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	733b      	strb	r3, [r7, #12]
 8001a62:	78bb      	ldrb	r3, [r7, #2]
 8001a64:	737b      	strb	r3, [r7, #13]
	selectRFM();
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffb4 	bl	80019d4 <_ZN10RFM95_LoRa9selectRFMEv>
	if(HAL_SPI_Transmit(&hspi3, (uint8_t*)buff, 2, 100) != HAL_OK){
 8001a6c:	f107 010c 	add.w	r1, r7, #12
 8001a70:	2364      	movs	r3, #100	; 0x64
 8001a72:	2202      	movs	r2, #2
 8001a74:	480b      	ldr	r0, [pc, #44]	; (8001aa4 <_ZN10RFM95_LoRa13writeRegisterEhh+0x5c>)
 8001a76:	f006 fb10 	bl	800809a <HAL_SPI_Transmit>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	bf14      	ite	ne
 8001a80:	2301      	movne	r3, #1
 8001a82:	2300      	moveq	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d004      	beq.n	8001a94 <_ZN10RFM95_LoRa13writeRegisterEhh+0x4c>
		deselectRFM();
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ffb2 	bl	80019f4 <_ZN10RFM95_LoRa11deselectRFMEv>
		return false;
 8001a90:	2300      	movs	r3, #0
 8001a92:	e003      	b.n	8001a9c <_ZN10RFM95_LoRa13writeRegisterEhh+0x54>
	}
	deselectRFM();
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ffad 	bl	80019f4 <_ZN10RFM95_LoRa11deselectRFMEv>
	return true;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2000044c 	.word	0x2000044c

08001aa8 <_ZN10RFM95_LoRa12readRegisterEh>:

uint8_t RFM95_LoRa::readRegister(uint8_t addr){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	81bb      	strh	r3, [r7, #12]
	uint8_t txData[1] = {addr};
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	723b      	strb	r3, [r7, #8]

	selectRFM();
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ff89 	bl	80019d4 <_ZN10RFM95_LoRa9selectRFMEv>
		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 8001ac2:	f107 020c 	add.w	r2, r7, #12
 8001ac6:	f107 0108 	add.w	r1, r7, #8
 8001aca:	2364      	movs	r3, #100	; 0x64
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2302      	movs	r3, #2
 8001ad0:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <_ZN10RFM95_LoRa12readRegisterEh+0x40>)
 8001ad2:	f006 fc50 	bl	8008376 <HAL_SPI_TransmitReceive>
	deselectRFM();
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ff8c 	bl	80019f4 <_ZN10RFM95_LoRa11deselectRFMEv>
	return rxData[1];
 8001adc:	7b7b      	ldrb	r3, [r7, #13]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000044c 	.word	0x2000044c

08001aec <_ZN10RFM95_LoRa5beginEl>:


int RFM95_LoRa::begin(long frequency){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
 resetRFM();
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ff8c 	bl	8001a14 <_ZN10RFM95_LoRa8resetRFMEv>
  // check version
  uint8_t version = readRegister(REG_VERSION);
 8001afc:	2142      	movs	r1, #66	; 0x42
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ffd2 	bl	8001aa8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001b04:	4603      	mov	r3, r0
 8001b06:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	2b12      	cmp	r3, #18
 8001b0c:	d001      	beq.n	8001b12 <_ZN10RFM95_LoRa5beginEl+0x26>
    return 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e02b      	b.n	8001b6a <_ZN10RFM95_LoRa5beginEl+0x7e>
  }
  // put in sleep mode
  sleep();
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f952 	bl	8001dbc <_ZN10RFM95_LoRa5sleepEv>
  // set frequency
  setFrequency(frequency);
 8001b18:	6839      	ldr	r1, [r7, #0]
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f998 	bl	8001e50 <_ZN10RFM95_LoRa12setFrequencyEl>
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 8001b20:	2200      	movs	r2, #0
 8001b22:	210e      	movs	r1, #14
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff8f 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	210f      	movs	r1, #15
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ff8a 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 8001b34:	210c      	movs	r1, #12
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ffb6 	bl	8001aa8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f043 0303 	orr.w	r3, r3, #3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	461a      	mov	r2, r3
 8001b46:	210c      	movs	r1, #12
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff7d 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 8001b4e:	2204      	movs	r2, #4
 8001b50:	2126      	movs	r1, #38	; 0x26
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ff78 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set output power to 17 dBm
  setTxPower(20);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2114      	movs	r1, #20
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f93a 	bl	8001dd6 <_ZN10RFM95_LoRa10setTxPowerEii>
  // put in standby mode
  idle();
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f91d 	bl	8001da2 <_ZN10RFM95_LoRa4idleEv>
  return 1;
 8001b68:	2301      	movs	r3, #1
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <_ZN10RFM95_LoRa11parsePacketEi>:



int RFM95_LoRa::parsePacket(int size)

{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 8001b80:	2112      	movs	r1, #18
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ff90 	bl	8001aa8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	60bb      	str	r3, [r7, #8]
  if (size > 0) {
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	dd0a      	ble.n	8001ba8 <_ZN10RFM95_LoRa11parsePacketEi+0x36>
    implicitHeaderMode();
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 fa8f 	bl	80020b6 <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2122      	movs	r1, #34	; 0x22
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ff51 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001ba6:	e002      	b.n	8001bae <_ZN10RFM95_LoRa11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 fa6c 	bl	8002086 <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	2112      	movs	r1, #18
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ff46 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
  if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d026      	beq.n	8001c14 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f003 0320 	and.w	r3, r3, #32
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d121      	bne.n	8001c14 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
    // received a packet
    _packetIndex = 0;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	615a      	str	r2, [r3, #20]
    // read packet length
    if (_implicitHeaderMode) {
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d006      	beq.n	8001bec <_ZN10RFM95_LoRa11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 8001bde:	2122      	movs	r1, #34	; 0x22
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ff61 	bl	8001aa8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001be6:	4603      	mov	r3, r0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	e005      	b.n	8001bf8 <_ZN10RFM95_LoRa11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 8001bec:	2113      	movs	r1, #19
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ff5a 	bl	8001aa8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	60fb      	str	r3, [r7, #12]
    }
    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 8001bf8:	2110      	movs	r1, #16
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ff54 	bl	8001aa8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	210d      	movs	r1, #13
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ff1e 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in standby mode
    idle();
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f8c8 	bl	8001da2 <_ZN10RFM95_LoRa4idleEv>
 8001c12:	e015      	b.n	8001c40 <_ZN10RFM95_LoRa11parsePacketEi+0xce>
  } else if (readRegister(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
 8001c14:	2101      	movs	r1, #1
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ff46 	bl	8001aa8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b86      	cmp	r3, #134	; 0x86
 8001c20:	bf14      	ite	ne
 8001c22:	2301      	movne	r3, #1
 8001c24:	2300      	moveq	r3, #0
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d009      	beq.n	8001c40 <_ZN10RFM95_LoRa11parsePacketEi+0xce>
    // not currently in RX mode
    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	210d      	movs	r1, #13
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff09 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in single RX mode
    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001c36:	2286      	movs	r2, #134	; 0x86
 8001c38:	2101      	movs	r1, #1
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ff04 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  return packetLength;
 8001c40:	68fb      	ldr	r3, [r7, #12]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <_ZN10RFM95_LoRa5writeEh>:

float RFM95_LoRa::packetSnr(){
  return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
}

size_t RFM95_LoRa::write(uint8_t byte){
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	1cf9      	adds	r1, r7, #3
 8001c60:	2201      	movs	r2, #1
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	4798      	blx	r3
 8001c66:	4603      	mov	r3, r0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <_ZN10RFM95_LoRa5writeEPKhj>:



size_t RFM95_LoRa::write(const uint8_t *buffer, size_t size){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 8001c7c:	2122      	movs	r1, #34	; 0x22
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f7ff ff12 	bl	8001aa8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001c84:	4603      	mov	r3, r0
 8001c86:	613b      	str	r3, [r7, #16]
  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	2bff      	cmp	r3, #255	; 0xff
 8001c90:	d903      	bls.n	8001c9a <_ZN10RFM95_LoRa5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001c98:	607b      	str	r3, [r7, #4]
  }
  // write data
  for (size_t i = 0; i < size; i++) {
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d20c      	bcs.n	8001cc0 <_ZN10RFM95_LoRa5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	4413      	add	r3, r2
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f7ff fec8 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	e7ee      	b.n	8001c9e <_ZN10RFM95_LoRa5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	461a      	mov	r2, r3
 8001cce:	2122      	movs	r1, #34	; 0x22
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f7ff feb9 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return size;
 8001cd6:	687b      	ldr	r3, [r7, #4]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_ZN10RFM95_LoRa9availableEv>:


int RFM95_LoRa::available()
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8001ce8:	2113      	movs	r1, #19
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fedc 	bl	8001aa8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	1ad3      	subs	r3, r2, r3
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <_ZN10RFM95_LoRa4readEv>:



int RFM95_LoRa::read(){
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	3308      	adds	r3, #8
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	4798      	blx	r3
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	bf0c      	ite	eq
 8001d1c:	2301      	moveq	r3, #1
 8001d1e:	2300      	movne	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d002      	beq.n	8001d2c <_ZN10RFM95_LoRa4readEv+0x2a>
    return -1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2a:	e009      	b.n	8001d40 <_ZN10RFM95_LoRa4readEv+0x3e>
  }
  _packetIndex++;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	615a      	str	r2, [r3, #20]
  return readRegister(REG_FIFO);
 8001d36:	2100      	movs	r1, #0
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff feb5 	bl	8001aa8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001d3e:	4603      	mov	r3, r0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <_ZN10RFM95_LoRa4peekEv>:



int RFM95_LoRa::peek(){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	3308      	adds	r3, #8
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	4798      	blx	r3
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	bf0c      	ite	eq
 8001d62:	2301      	moveq	r3, #1
 8001d64:	2300      	movne	r3, #0
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <_ZN10RFM95_LoRa4peekEv+0x2a>
    return -1;
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d70:	e013      	b.n	8001d9a <_ZN10RFM95_LoRa4peekEv+0x52>
  }
  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 8001d72:	210d      	movs	r1, #13
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff fe97 	bl	8001aa8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	60fb      	str	r3, [r7, #12]
  // read
  uint8_t b = readRegister(REG_FIFO);
 8001d7e:	2100      	movs	r1, #0
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff fe91 	bl	8001aa8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001d86:	4603      	mov	r3, r0
 8001d88:	72fb      	strb	r3, [r7, #11]
  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	210d      	movs	r1, #13
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff fe58 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return b;
 8001d98:	7afb      	ldrb	r3, [r7, #11]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <_ZN10RFM95_LoRa4idleEv>:
    explicitHeaderMode();
  }
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
}

void RFM95_LoRa::idle(){
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001daa:	2281      	movs	r2, #129	; 0x81
 8001dac:	2101      	movs	r1, #1
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff fe4a 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_ZN10RFM95_LoRa5sleepEv>:

void RFM95_LoRa::sleep(){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8001dc4:	2280      	movs	r2, #128	; 0x80
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff fe3d 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <_ZN10RFM95_LoRa10setTxPowerEii>:



void RFM95_LoRa::setTxPower(int level, int outputPin){
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d116      	bne.n	8001e16 <_ZN10RFM95_LoRa10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	da02      	bge.n	8001df4 <_ZN10RFM95_LoRa10setTxPowerEii+0x1e>
      level = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	e004      	b.n	8001dfe <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
    } else if (level > 14) {
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b0e      	cmp	r3, #14
 8001df8:	dd01      	ble.n	8001dfe <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
      level = 14;
 8001dfa:	230e      	movs	r3, #14
 8001dfc:	60bb      	str	r3, [r7, #8]
    }
    writeRegister(REG_PA_CONFIG, 0x70 | level);
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	b25b      	sxtb	r3, r3
 8001e02:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001e06:	b25b      	sxtb	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	2109      	movs	r1, #9
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f7ff fe1a 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
    } else if (level > 17) {
      level = 17;
    }
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 8001e14:	e018      	b.n	8001e48 <_ZN10RFM95_LoRa10setTxPowerEii+0x72>
    if (level < 2) {
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	dc02      	bgt.n	8001e22 <_ZN10RFM95_LoRa10setTxPowerEii+0x4c>
      level = 2;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	e004      	b.n	8001e2c <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
    } else if (level > 17) {
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2b11      	cmp	r3, #17
 8001e26:	dd01      	ble.n	8001e2c <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
      level = 17;
 8001e28:	2311      	movs	r3, #17
 8001e2a:	60bb      	str	r3, [r7, #8]
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	3b02      	subs	r3, #2
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	b25b      	sxtb	r3, r3
 8001e36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e3a:	b25b      	sxtb	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	461a      	mov	r2, r3
 8001e40:	2109      	movs	r1, #9
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f7ff fe00 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <_ZN10RFM95_LoRa12setFrequencyEl>:



void RFM95_LoRa::setFrequency(long frequency){
 8001e50:	b5b0      	push	{r4, r5, r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	6838      	ldr	r0, [r7, #0]
 8001e5e:	6108      	str	r0, [r1, #16]
  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8001e60:	6839      	ldr	r1, [r7, #0]
 8001e62:	17c8      	asrs	r0, r1, #31
 8001e64:	460a      	mov	r2, r1
 8001e66:	4603      	mov	r3, r0
 8001e68:	1355      	asrs	r5, r2, #13
 8001e6a:	04d4      	lsls	r4, r2, #19
 8001e6c:	4a1a      	ldr	r2, [pc, #104]	; (8001ed8 <_ZN10RFM95_LoRa12setFrequencyEl+0x88>)
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	4620      	mov	r0, r4
 8001e74:	4629      	mov	r1, r5
 8001e76:	f7fe f9a9 	bl	80001cc <__aeabi_uldivmod>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8001e82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	0c02      	lsrs	r2, r0, #16
 8001e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001e94:	0c0b      	lsrs	r3, r1, #16
 8001e96:	b2d3      	uxtb	r3, r2
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2106      	movs	r1, #6
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff fdd3 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8001ea2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	0a02      	lsrs	r2, r0, #8
 8001eb0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001eb4:	0a0b      	lsrs	r3, r1, #8
 8001eb6:	b2d3      	uxtb	r3, r2
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2107      	movs	r1, #7
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff fdc3 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8001ec2:	7a3b      	ldrb	r3, [r7, #8]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2108      	movs	r1, #8
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff fdbd 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	01e84800 	.word	0x01e84800

08001edc <_ZN10RFM95_LoRa18setSpreadingFactorEi>:



void RFM95_LoRa::setSpreadingFactor(int sf){
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	2b05      	cmp	r3, #5
 8001eea:	dc02      	bgt.n	8001ef2 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x16>
    sf = 6;
 8001eec:	2306      	movs	r3, #6
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	e004      	b.n	8001efc <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b0c      	cmp	r3, #12
 8001ef6:	dd01      	ble.n	8001efc <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
    sf = 12;
 8001ef8:	230c      	movs	r3, #12
 8001efa:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	2b06      	cmp	r3, #6
 8001f00:	d10a      	bne.n	8001f18 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 8001f02:	22c5      	movs	r2, #197	; 0xc5
 8001f04:	2131      	movs	r1, #49	; 0x31
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff fd9e 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 8001f0c:	220c      	movs	r2, #12
 8001f0e:	2137      	movs	r1, #55	; 0x37
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff fd99 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001f16:	e009      	b.n	8001f2c <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 8001f18:	22c3      	movs	r2, #195	; 0xc3
 8001f1a:	2131      	movs	r1, #49	; 0x31
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff fd93 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 8001f22:	220a      	movs	r2, #10
 8001f24:	2137      	movs	r1, #55	; 0x37
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff fd8e 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 8001f2c:	211e      	movs	r1, #30
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff fdba 	bl	8001aa8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001f34:	4603      	mov	r3, r0
 8001f36:	b25b      	sxtb	r3, r3
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	b25a      	sxtb	r2, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	b25b      	sxtb	r3, r3
 8001f44:	4313      	orrs	r3, r2
 8001f46:	b25b      	sxtb	r3, r3
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	211e      	movs	r1, #30
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff fd7a 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <_ZN10RFM95_LoRa18setSignalBandwidthEl>:


void RFM95_LoRa::setSignalBandwidth(long sbw){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  int bw;
  if (sbw <= 7.8E3) {
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	f641 6278 	movw	r2, #7800	; 0x1e78
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	dc02      	bgt.n	8001f76 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x1a>
    bw = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	e03f      	b.n	8001ff6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 10.4E3) {
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	dc02      	bgt.n	8001f86 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x2a>
    bw = 1;
 8001f80:	2301      	movs	r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	e037      	b.n	8001ff6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 15.6E3) {
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	dc02      	bgt.n	8001f96 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x3a>
    bw = 2;
 8001f90:	2302      	movs	r3, #2
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	e02f      	b.n	8001ff6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 20.8E3) {
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	f245 1240 	movw	r2, #20800	; 0x5140
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	dc02      	bgt.n	8001fa6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x4a>
    bw = 3;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	e027      	b.n	8001ff6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 31.25E3) {
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	f647 2212 	movw	r2, #31250	; 0x7a12
 8001fac:	4293      	cmp	r3, r2
 8001fae:	dc02      	bgt.n	8001fb6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x5a>
    bw = 4;
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	e01f      	b.n	8001ff6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 41.7E3) {
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	dc02      	bgt.n	8001fc6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x6a>
    bw = 5;
 8001fc0:	2305      	movs	r3, #5
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	e017      	b.n	8001ff6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 62.5E3) {
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	f24f 4224 	movw	r2, #62500	; 0xf424
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	dc02      	bgt.n	8001fd6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x7a>
    bw = 6;
 8001fd0:	2306      	movs	r3, #6
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	e00f      	b.n	8001ff6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 125E3) {
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	4a13      	ldr	r2, [pc, #76]	; (8002028 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xcc>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	dc02      	bgt.n	8001fe4 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x88>
    bw = 7;
 8001fde:	2307      	movs	r3, #7
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	e008      	b.n	8001ff6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 250E3) {
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	4a11      	ldr	r2, [pc, #68]	; (800202c <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xd0>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	dc02      	bgt.n	8001ff2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x96>
    bw = 8;
 8001fec:	2308      	movs	r3, #8
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	e001      	b.n	8001ff6 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 8001ff2:	2309      	movs	r3, #9
 8001ff4:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 8001ff6:	211d      	movs	r1, #29
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff fd55 	bl	8001aa8 <_ZN10RFM95_LoRa12readRegisterEh>
 8001ffe:	4603      	mov	r3, r0
 8002000:	b25b      	sxtb	r3, r3
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	b25a      	sxtb	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	b25b      	sxtb	r3, r3
 800200e:	4313      	orrs	r3, r2
 8002010:	b25b      	sxtb	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	211d      	movs	r1, #29
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff fd15 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	0001e848 	.word	0x0001e848
 800202c:	0003d090 	.word	0x0003d090

08002030 <_ZN10RFM95_LoRa14setCodingRate4Ei>:



void RFM95_LoRa::setCodingRate4(int denominator){
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b04      	cmp	r3, #4
 800203e:	dc02      	bgt.n	8002046 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x16>
    denominator = 5;
 8002040:	2305      	movs	r3, #5
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	e004      	b.n	8002050 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2b08      	cmp	r3, #8
 800204a:	dd01      	ble.n	8002050 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
	  denominator = 8;
 800204c:	2308      	movs	r3, #8
 800204e:	603b      	str	r3, [r7, #0]
  }
  int cr = denominator - 4;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	3b04      	subs	r3, #4
 8002054:	60fb      	str	r3, [r7, #12]
  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 8002056:	211d      	movs	r1, #29
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff fd25 	bl	8001aa8 <_ZN10RFM95_LoRa12readRegisterEh>
 800205e:	4603      	mov	r3, r0
 8002060:	b25b      	sxtb	r3, r3
 8002062:	f023 030e 	bic.w	r3, r3, #14
 8002066:	b25a      	sxtb	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	b25b      	sxtb	r3, r3
 800206e:	4313      	orrs	r3, r2
 8002070:	b25b      	sxtb	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	211d      	movs	r1, #29
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fce5 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <_ZN10RFM95_LoRa18explicitHeaderModeEv>:
uint8_t RFM95_LoRa::random(){
  return readRegister(REG_RSSI_WIDEBAND);
}


void RFM95_LoRa::explicitHeaderMode(){
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8002094:	211d      	movs	r1, #29
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff fd06 	bl	8001aa8 <_ZN10RFM95_LoRa12readRegisterEh>
 800209c:	4603      	mov	r3, r0
 800209e:	f023 0301 	bic.w	r3, r3, #1
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	211d      	movs	r1, #29
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff fccd 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <_ZN10RFM95_LoRa18implicitHeaderModeEv>:


void RFM95_LoRa::implicitHeaderMode(){
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 80020c4:	211d      	movs	r1, #29
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff fcee 	bl	8001aa8 <_ZN10RFM95_LoRa12readRegisterEh>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	461a      	mov	r2, r3
 80020d6:	211d      	movs	r1, #29
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff fcb5 	bl	8001a48 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <_ZN10RFM95_LoRa7InitRFMEv>:
    writeRegister(REG_FIFO_ADDR_PTR, 0);
  }
}


bool RFM95_LoRa::InitRFM(){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]


	setFrequency(868000000);
 80020f0:	4914      	ldr	r1, [pc, #80]	; (8002144 <_ZN10RFM95_LoRa7InitRFMEv+0x5c>)
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff feac 	bl	8001e50 <_ZN10RFM95_LoRa12setFrequencyEl>
	setTxPower(17, PA_OUTPUT_PA_BOOST_PIN);
 80020f8:	2201      	movs	r2, #1
 80020fa:	2111      	movs	r1, #17
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff fe6a 	bl	8001dd6 <_ZN10RFM95_LoRa10setTxPowerEii>
	setSignalBandwidth(31.25E3);
 8002102:	f647 2112 	movw	r1, #31250	; 0x7a12
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ff28 	bl	8001f5c <_ZN10RFM95_LoRa18setSignalBandwidthEl>
	setSpreadingFactor(12);
 800210c:	210c      	movs	r1, #12
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff fee4 	bl	8001edc <_ZN10RFM95_LoRa18setSpreadingFactorEi>
	setCodingRate4(5);
 8002114:	2105      	movs	r1, #5
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ff8a 	bl	8002030 <_ZN10RFM95_LoRa14setCodingRate4Ei>
	if (!begin(866E6)) {
 800211c:	490a      	ldr	r1, [pc, #40]	; (8002148 <_ZN10RFM95_LoRa7InitRFMEv+0x60>)
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff fce4 	bl	8001aec <_ZN10RFM95_LoRa5beginEl>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <_ZN10RFM95_LoRa7InitRFMEv+0x50>
		return false;
 8002134:	2300      	movs	r3, #0
 8002136:	e000      	b.n	800213a <_ZN10RFM95_LoRa7InitRFMEv+0x52>
	}
	return true;
 8002138:	2301      	movs	r3, #1
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	33bca100 	.word	0x33bca100
 8002148:	339e1c80 	.word	0x339e1c80

0800214c <_ZNK13DriveSettings16getClampingSpeedEv>:

/****************************************************************************************
 / * 	Clamping speed get/set
 ****************************************************************************************/
uint16_t DriveSettings::getClampingSpeed() const
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	return clampingSpeed;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	891b      	ldrh	r3, [r3, #8]
}
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_ZN13DriveSettings16setClampingSpeedEt>:

void DriveSettings::setClampingSpeed(uint16_t clampingSpeed)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
	this->clampingSpeed = clampingSpeed;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	811a      	strh	r2, [r3, #8]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <_ZNK13DriveSettings17getClampingTorqueEv>:

/****************************************************************************************
 / * 	Clamping torque get/set
 ****************************************************************************************/
uint16_t DriveSettings::getClampingTorque() const
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
	return clampingTorque;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	889b      	ldrh	r3, [r3, #4]
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <_ZN13DriveSettings17setClampingTorqueEt>:

void DriveSettings::setClampingTorque(uint16_t clampingTorque)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	460b      	mov	r3, r1
 80021a4:	807b      	strh	r3, [r7, #2]
	this->clampingTorque = clampingTorque;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	887a      	ldrh	r2, [r7, #2]
 80021aa:	809a      	strh	r2, [r3, #4]
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <_ZNK13DriveSettings12getInPosDiffEv>:

/****************************************************************************************
 / * 	clamping position difference get/set
 ****************************************************************************************/
uint16_t DriveSettings::getInPosDiff() const
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	return inPosDiff;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	899b      	ldrh	r3, [r3, #12]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <_ZN13DriveSettings12setInPosDiffEt>:

void DriveSettings::setInPosDiff(uint16_t inPosDiff)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	807b      	strh	r3, [r7, #2]
	this->inPosDiff = inPosDiff;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	819a      	strh	r2, [r3, #12]
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <_ZNK13DriveSettings18getOpeningDistanceEv>:

/****************************************************************************************
 / * 	opening distance get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOpeningDistance() const
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
	return openingDistance;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	89db      	ldrh	r3, [r3, #14]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <_ZN13DriveSettings18setOpeningDistanceEt>:

void DriveSettings::setOpeningDistance(uint16_t openingDistance)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	460b      	mov	r3, r1
 8002210:	807b      	strh	r3, [r7, #2]
	this->openingDistance = openingDistance;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	887a      	ldrh	r2, [r7, #2]
 8002216:	81da      	strh	r2, [r3, #14]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <_ZNK13DriveSettings21getOverCurrentWarningEv>:

/****************************************************************************************
 / * 	overcurrent warning get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentWarning() const
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	return overCurrentWarning;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	8a9b      	ldrh	r3, [r3, #20]
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <_ZN13DriveSettings21setOverCurrentWarningEt>:

void DriveSettings::setOverCurrentWarning(uint16_t overCurrentWarning)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	807b      	strh	r3, [r7, #2]
	this->overCurrentWarning = overCurrentWarning;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	887a      	ldrh	r2, [r7, #2]
 800224c:	829a      	strh	r2, [r3, #20]
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <_ZNK13DriveSettings20getSelfShutdownDelayEv>:

/****************************************************************************************
 / * 	self shutdown delay get/set
 ****************************************************************************************/
uint16_t DriveSettings::getSelfShutdownDelay() const
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
	return selfShutdownDelay;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	895b      	ldrh	r3, [r3, #10]
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <_ZN13DriveSettings20setSelfShutdownDelayEt>:

void DriveSettings::setSelfShutdownDelay(uint16_t selfShutdownDelay)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	807b      	strh	r3, [r7, #2]
	this->selfShutdownDelay = selfShutdownDelay;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	887a      	ldrh	r2, [r7, #2]
 8002282:	815a      	strh	r2, [r3, #10]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <_ZNK13DriveSettings13getTeachSpeedEv>:

/****************************************************************************************
 / * 	teach speed get/set
 ****************************************************************************************/
uint16_t DriveSettings::getTeachSpeed() const
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	return teachSpeed;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	88db      	ldrh	r3, [r3, #6]
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <_ZN13DriveSettings13setTeachSpeedEt>:

void DriveSettings::setTeachSpeed(uint16_t teachSpeed)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	807b      	strh	r3, [r7, #2]
	this->teachSpeed = teachSpeed;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	80da      	strh	r2, [r3, #6]
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <_ZNK13DriveSettings14getTeachTroqueEv>:

/****************************************************************************************
 / * 	teach torque get/set
 ****************************************************************************************/
uint16_t DriveSettings::getTeachTroque() const
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
	return teachTroque;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	885b      	ldrh	r3, [r3, #2]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <_ZN13DriveSettings14setTeachTroqueEt>:

void DriveSettings::setTeachTroque(uint16_t teachTroque)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	460b      	mov	r3, r1
 80022e8:	807b      	strh	r3, [r7, #2]
	this->teachTroque = teachTroque;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	887a      	ldrh	r2, [r7, #2]
 80022ee:	805a      	strh	r2, [r3, #2]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <_ZNK13DriveSettings20getUnderVoltageErrorEv>:

/****************************************************************************************
 / * 	undervoltage error get/set
 ****************************************************************************************/
uint16_t DriveSettings::getUnderVoltageError() const
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
	return underVoltageError;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	8a5b      	ldrh	r3, [r3, #18]
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <_ZN13DriveSettings20setUnderVoltageErrorEt>:

void DriveSettings::setUnderVoltageError(uint16_t underVoltageError)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	807b      	strh	r3, [r7, #2]
	this->underVoltageError = underVoltageError;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	887a      	ldrh	r2, [r7, #2]
 8002324:	825a      	strh	r2, [r3, #18]
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <_ZNK13DriveSettings22getUnderVoltageWarningEv>:

/****************************************************************************************
 / * 	undervoltage warning get/set
 ****************************************************************************************/
uint16_t DriveSettings::getUnderVoltageWarning() const
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
	return underVoltageWarning;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	8a1b      	ldrh	r3, [r3, #16]
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <_ZN13DriveSettings22setUnderVoltageWarningEt>:

void DriveSettings::setUnderVoltageWarning(uint16_t underVoltageWarning)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	807b      	strh	r3, [r7, #2]
	this->underVoltageWarning = underVoltageWarning;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	887a      	ldrh	r2, [r7, #2]
 800235a:	821a      	strh	r2, [r3, #16]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <_ZNK13DriveSettings19getOverCurrentErrorEv>:

/****************************************************************************************
 / * 	overcurrent error get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentError() const
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	return overCurrentError;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	8adb      	ldrh	r3, [r3, #22]
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <_ZN13DriveSettings19setOverCurrentErrorEt>:

void DriveSettings::setOverCurrentError(uint16_t overCurrentError)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	807b      	strh	r3, [r7, #2]
	this->overCurrentError = overCurrentError;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	887a      	ldrh	r2, [r7, #2]
 8002390:	82da      	strh	r2, [r3, #22]
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <_ZNK13DriveSettings16getDeviceAddressEv>:

/****************************************************************************************
 / * 	device address get/set
 ****************************************************************************************/
uint8_t DriveSettings::getDeviceAddress() const
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
	return deviceAddress;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	781b      	ldrb	r3, [r3, #0]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <_ZN11DriveStatusC1Ev>:
 *      Author: marce
 */

#include "DriveStatus.h"

DriveStatus::DriveStatus()
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
{
}
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <_ZN11DriveStatus7isCloseEv>:

/****************************************************************************************
 / * 	close get/set (read reset)
 ****************************************************************************************/
bool DriveStatus::isClose()
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	bool closeTemp = close;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	73fb      	strb	r3, [r7, #15]
	close = false;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
	return closeTemp;
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <_ZN11DriveStatus8setCloseEb>:

void DriveStatus::setClose(bool close)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	70fb      	strb	r3, [r7, #3]
	this->close = close;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	701a      	strb	r2, [r3, #0]
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <_ZN11DriveStatus6isOpenEv>:

/****************************************************************************************
 / * 	open get/set (read reset)
 ****************************************************************************************/
bool DriveStatus::isOpen()
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	bool openTemp = open;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	785b      	ldrb	r3, [r3, #1]
 8002418:	73fb      	strb	r3, [r7, #15]
	open = false;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	705a      	strb	r2, [r3, #1]
	return openTemp;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <_ZN11DriveStatus7setOpenEb>:

void DriveStatus::setOpen(bool open)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	460b      	mov	r3, r1
 8002438:	70fb      	strb	r3, [r7, #3]
	this->open = open;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	705a      	strb	r2, [r3, #1]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <_ZN11DriveStatus9isDisableEv>:

/****************************************************************************************
 / * 	disable get/set (read reset)
 ****************************************************************************************/
bool DriveStatus::isDisable()
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	bool disableTemp = disable;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	799b      	ldrb	r3, [r3, #6]
 8002458:	73fb      	strb	r3, [r7, #15]
	disable = false;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	719a      	strb	r2, [r3, #6]
	return disableTemp;
 8002460:	7bfb      	ldrb	r3, [r7, #15]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <_ZN11DriveStatus10setDisableEb>:

void DriveStatus::setDisable(bool disable)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	70fb      	strb	r3, [r7, #3]
	this->disable = disable;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	719a      	strb	r2, [r3, #6]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <_ZN11DriveStatus8isEnableEv>:

/****************************************************************************************
 / * 	enable get/set (read reset)
 ****************************************************************************************/
bool DriveStatus::isEnable()
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	bool enableTemp = enable;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	791b      	ldrb	r3, [r3, #4]
 8002498:	73fb      	strb	r3, [r7, #15]
	enable = false;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	711a      	strb	r2, [r3, #4]
	return enableTemp;
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <_ZN11DriveStatus9setEnableEb>:

void DriveStatus::setEnable(bool enable)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	460b      	mov	r3, r1
 80024b8:	70fb      	strb	r3, [r7, #3]
	this->enable = enable;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	711a      	strb	r2, [r3, #4]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <_ZN11DriveStatus7isResetEv>:

/****************************************************************************************
 / * 	reset get/set (read reset)
 ****************************************************************************************/
bool DriveStatus::isReset()
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
	bool resetTemp = reset;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	78db      	ldrb	r3, [r3, #3]
 80024d8:	73fb      	strb	r3, [r7, #15]
	reset = false;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	70da      	strb	r2, [r3, #3]
	return resetTemp;
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <_ZN11DriveStatus8setResetEb>:

void DriveStatus::setReset(bool reset)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	460b      	mov	r3, r1
 80024f8:	70fb      	strb	r3, [r7, #3]
	this->reset = reset;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	70da      	strb	r2, [r3, #3]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <_ZN11DriveStatus6isStopEv>:

/****************************************************************************************
 / * 	stop get/set (read reset)
 /****************************************************************************************/
bool DriveStatus::isStop()
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	bool stopTemp = stop;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	795b      	ldrb	r3, [r3, #5]
 8002518:	73fb      	strb	r3, [r7, #15]
	stop = false;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	715a      	strb	r2, [r3, #5]
	return stopTemp;
 8002520:	7bfb      	ldrb	r3, [r7, #15]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <_ZN11DriveStatus7setStopEb>:

void DriveStatus::setStop(bool stop)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	460b      	mov	r3, r1
 8002538:	70fb      	strb	r3, [r7, #3]
	this->stop = stop;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	715a      	strb	r2, [r3, #5]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <_ZN11DriveStatus7isTeachEv>:

/****************************************************************************************
 / * 	teach get/set (read reset)
 /****************************************************************************************/
bool DriveStatus::isTeach()
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
	bool teachTemp = teach;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	789b      	ldrb	r3, [r3, #2]
 8002558:	73fb      	strb	r3, [r7, #15]
	teach = false;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	709a      	strb	r2, [r3, #2]
	return teachTemp;
 8002560:	7bfb      	ldrb	r3, [r7, #15]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <_ZN11DriveStatus8setTeachEb>:

void DriveStatus::setTeach(bool teach)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	460b      	mov	r3, r1
 8002578:	70fb      	strb	r3, [r7, #3]
	this->teach = teach;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	709a      	strb	r2, [r3, #2]
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <_ZN11DriveStatus13isWriteConfigEv>:

/****************************************************************************************
 / * 	write config get/set (read reset)
 /****************************************************************************************/
bool DriveStatus::isWriteConfig()
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	bool writeConfigTemp = writeConfig;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	79db      	ldrb	r3, [r3, #7]
 8002598:	73fb      	strb	r3, [r7, #15]
	writeConfig = false;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	71da      	strb	r2, [r3, #7]
	return writeConfigTemp;
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <_ZN11TaskHandler11UpdateTasksEv>:

#include "TaskHandler.h"
#include "gpio.h"

//update tasks, should be called every 1ms
void TaskHandler::UpdateTasks() {
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

	//1ms

	//2ms
	if(counter % 2 == 0){
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	895b      	ldrh	r3, [r3, #10]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d102      	bne.n	80025ca <_ZN11TaskHandler11UpdateTasksEv+0x1a>
		adcUpdateTask = true;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	70da      	strb	r2, [r3, #3]
	}


	//15ms
	if(counter % 15 == 0){
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	895a      	ldrh	r2, [r3, #10]
 80025ce:	4b24      	ldr	r3, [pc, #144]	; (8002660 <_ZN11TaskHandler11UpdateTasksEv+0xb0>)
 80025d0:	fba3 1302 	umull	r1, r3, r3, r2
 80025d4:	08d9      	lsrs	r1, r3, #3
 80025d6:	460b      	mov	r3, r1
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	1a5b      	subs	r3, r3, r1
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d102      	bne.n	80025ea <_ZN11TaskHandler11UpdateTasksEv+0x3a>
		ioUpdateTask = true;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	709a      	strb	r2, [r3, #2]
	}



	//100ms
	if(counter % 100 == 0){
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	895b      	ldrh	r3, [r3, #10]
 80025ee:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <_ZN11TaskHandler11UpdateTasksEv+0xb4>)
 80025f0:	fba2 1203 	umull	r1, r2, r2, r3
 80025f4:	0952      	lsrs	r2, r2, #5
 80025f6:	2164      	movs	r1, #100	; 0x64
 80025f8:	fb01 f202 	mul.w	r2, r1, r2
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	b29b      	uxth	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <_ZN11TaskHandler11UpdateTasksEv+0x5a>
		errorTask = true;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	701a      	strb	r2, [r3, #0]
	}


	//500ms
	if(counter % 500 == 0){
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	895b      	ldrh	r3, [r3, #10]
 800260e:	4a16      	ldr	r2, [pc, #88]	; (8002668 <_ZN11TaskHandler11UpdateTasksEv+0xb8>)
 8002610:	fba2 1203 	umull	r1, r2, r2, r3
 8002614:	0952      	lsrs	r2, r2, #5
 8002616:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800261a:	fb01 f202 	mul.w	r2, r1, r2
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	b29b      	uxth	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d105      	bne.n	8002632 <_ZN11TaskHandler11UpdateTasksEv+0x82>
		ledUpdateTask = true;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	711a      	strb	r2, [r3, #4]
		comTask = true;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	705a      	strb	r2, [r3, #1]
	}



	//increment counter
	if(counter > 2999){
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	895b      	ldrh	r3, [r3, #10]
 8002636:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800263a:	4293      	cmp	r3, r2
 800263c:	d903      	bls.n	8002646 <_ZN11TaskHandler11UpdateTasksEv+0x96>
		counter = 1;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	815a      	strh	r2, [r3, #10]
	}else{
		counter++;
	}

}
 8002644:	e005      	b.n	8002652 <_ZN11TaskHandler11UpdateTasksEv+0xa2>
		counter++;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	895b      	ldrh	r3, [r3, #10]
 800264a:	3301      	adds	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	815a      	strh	r2, [r3, #10]
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	88888889 	.word	0x88888889
 8002664:	51eb851f 	.word	0x51eb851f
 8002668:	10624dd3 	.word	0x10624dd3

0800266c <_ZN11TaskHandler9isComTaskEv>:



bool TaskHandler::isComTask()  {
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	bool comTaskTemp = (comTask & comTaskEnable);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	785b      	ldrb	r3, [r3, #1]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	799b      	ldrb	r3, [r3, #6]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	bf14      	ite	ne
 8002688:	2301      	movne	r3, #1
 800268a:	2300      	moveq	r3, #0
 800268c:	73fb      	strb	r3, [r7, #15]
	comTask = false;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	705a      	strb	r2, [r3, #1]
	return comTaskTemp;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <_ZN11TaskHandler11isErrorTaskEv>:


bool TaskHandler::isErrorTask()  {
 80026a2:	b480      	push	{r7}
 80026a4:	b085      	sub	sp, #20
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
	bool errorTaskTemp = (errorTask & errorTaskEnable);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	795b      	ldrb	r3, [r3, #5]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bf14      	ite	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	2300      	moveq	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]
	errorTask = false;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
	return errorTaskTemp;
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <_ZN11TaskHandler14isIoUpdateTaskEv>:

bool TaskHandler::isIoUpdateTask()  {
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	bool ioUpdateTaskTemp = (ioUpdateTask & ioUpdateTaskEnable);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	789b      	ldrb	r3, [r3, #2]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	79db      	ldrb	r3, [r3, #7]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf14      	ite	ne
 80026f4:	2301      	movne	r3, #1
 80026f6:	2300      	moveq	r3, #0
 80026f8:	73fb      	strb	r3, [r7, #15]
	ioUpdateTask = false;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	709a      	strb	r2, [r3, #2]
	return ioUpdateTaskTemp;
 8002700:	7bfb      	ldrb	r3, [r7, #15]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <_ZN11TaskHandler15isLEDUpdateTaskEv>:
	adcUpdateTask = false;
	return adcUpdateTaskTemp;
}


bool TaskHandler::isLEDUpdateTask(){
 800270e:	b480      	push	{r7}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
	bool ledUpdateTaskTemp = (ledUpdateTask & ledUpdateTaskEnable);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	791b      	ldrb	r3, [r3, #4]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7a5b      	ldrb	r3, [r3, #9]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	bf14      	ite	ne
 800272a:	2301      	movne	r3, #1
 800272c:	2300      	moveq	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]
	ledUpdateTask = false;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	711a      	strb	r2, [r3, #4]
	return ledUpdateTaskTemp;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <_ZN5Delay8DWT_InitEv>:


/*
 * Mikrosenkunden delay Initialisieren
 */
void Delay::DWT_Init(void) {
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <_ZN5Delay8DWT_InitEv+0x2c>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4a08      	ldr	r2, [pc, #32]	; (8002770 <_ZN5Delay8DWT_InitEv+0x2c>)
 800274e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002752:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8002754:	4b07      	ldr	r3, [pc, #28]	; (8002774 <_ZN5Delay8DWT_InitEv+0x30>)
 8002756:	2200      	movs	r2, #0
 8002758:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <_ZN5Delay8DWT_InitEv+0x30>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a05      	ldr	r2, [pc, #20]	; (8002774 <_ZN5Delay8DWT_InitEv+0x30>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6013      	str	r3, [r2, #0]
}
 8002766:	bf00      	nop
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000edf0 	.word	0xe000edf0
 8002774:	e0001000 	.word	0xe0001000

08002778 <_ZN5Delay12DWT_Delay_usEm>:

/*
 * Mikrosenkunden delay für Push-Pull ansteuerung
 */
void Delay::DWT_Delay_us(volatile uint32_t microseconds) {
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8002780:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <_ZN5Delay12DWT_Delay_usEm+0x48>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	60fb      	str	r3, [r7, #12]
	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002786:	f005 f83d 	bl	8007804 <HAL_RCC_GetHCLKFreq>
 800278a:	4603      	mov	r3, r0
 800278c:	4a0d      	ldr	r2, [pc, #52]	; (80027c4 <_ZN5Delay12DWT_Delay_usEm+0x4c>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	0c9b      	lsrs	r3, r3, #18
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	fb02 f303 	mul.w	r3, r2, r3
 800279a:	607b      	str	r3, [r7, #4]
	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800279c:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <_ZN5Delay12DWT_Delay_usEm+0x48>)
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1ad2      	subs	r2, r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	bf34      	ite	cc
 80027aa:	2301      	movcc	r3, #1
 80027ac:	2300      	movcs	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d000      	beq.n	80027b6 <_ZN5Delay12DWT_Delay_usEm+0x3e>
 80027b4:	e7f2      	b.n	800279c <_ZN5Delay12DWT_Delay_usEm+0x24>
}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	e0001000 	.word	0xe0001000
 80027c4:	431bde83 	.word	0x431bde83

080027c8 <_ZN5Queue7EnqueueEh>:
 *
 * @param data to push in queue
 * @return none
 */
void Queue::Enqueue(uint8_t data)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	70fb      	strb	r3, [r7, #3]
	//push data to buffer
	buffer[enqueuePointer] = data;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4413      	add	r3, r2
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	709a      	strb	r2, [r3, #2]

	if (dequeuePointer == 0 && enqueuePointer == BUFFER_SIZE - 1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	785b      	ldrb	r3, [r3, #1]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10d      	bne.n	8002806 <_ZN5Queue7EnqueueEh+0x3e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b09      	cmp	r3, #9
 80027f0:	d109      	bne.n	8002806 <_ZN5Queue7EnqueueEh+0x3e>
	{
		dequeuePointer++;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	785b      	ldrb	r3, [r3, #1]
 80027f6:	3301      	adds	r3, #1
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	705a      	strb	r2, [r3, #1]
		enqueuePointer = 0;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
 8002804:	e038      	b.n	8002878 <_ZN5Queue7EnqueueEh+0xb0>
	}
	else if (dequeuePointer == BUFFER_SIZE - 1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	785b      	ldrb	r3, [r3, #1]
 800280a:	2b09      	cmp	r3, #9
 800280c:	d111      	bne.n	8002832 <_ZN5Queue7EnqueueEh+0x6a>
			&& enqueuePointer == dequeuePointer - 1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	785b      	ldrb	r3, [r3, #1]
 8002818:	3b01      	subs	r3, #1
 800281a:	429a      	cmp	r2, r3
 800281c:	d109      	bne.n	8002832 <_ZN5Queue7EnqueueEh+0x6a>
	{
		dequeuePointer = 0;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	705a      	strb	r2, [r3, #1]
		enqueuePointer++;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	3301      	adds	r3, #1
 800282a:	b2da      	uxtb	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	701a      	strb	r2, [r3, #0]
 8002830:	e022      	b.n	8002878 <_ZN5Queue7EnqueueEh+0xb0>
	}
	else if (enqueuePointer + 1 == dequeuePointer)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	3301      	adds	r3, #1
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	7852      	ldrb	r2, [r2, #1]
 800283c:	4293      	cmp	r3, r2
 800283e:	d10c      	bne.n	800285a <_ZN5Queue7EnqueueEh+0x92>
	{
		dequeuePointer++;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	785b      	ldrb	r3, [r3, #1]
 8002844:	3301      	adds	r3, #1
 8002846:	b2da      	uxtb	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	705a      	strb	r2, [r3, #1]
		enqueuePointer++;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	3301      	adds	r3, #1
 8002852:	b2da      	uxtb	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		enqueuePointer++;
	}
}
 8002858:	e00e      	b.n	8002878 <_ZN5Queue7EnqueueEh+0xb0>
	else if (enqueuePointer == BUFFER_SIZE - 1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b09      	cmp	r3, #9
 8002860:	d103      	bne.n	800286a <_ZN5Queue7EnqueueEh+0xa2>
		enqueuePointer = 0;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]
}
 8002868:	e006      	b.n	8002878 <_ZN5Queue7EnqueueEh+0xb0>
		enqueuePointer++;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	3301      	adds	r3, #1
 8002870:	b2da      	uxtb	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	701a      	strb	r2, [r3, #0]
}
 8002876:	e7ff      	b.n	8002878 <_ZN5Queue7EnqueueEh+0xb0>
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <_ZN5Queue7DequeueEv>:
 *
 * @param none
 * @return data at actual dequeue position
 */
uint8_t Queue::Dequeue()
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
	//return 0 if queue is empty
	if (IsEmpty())
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f81e 	bl	80028ce <_ZN5Queue7IsEmptyEv>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <_ZN5Queue7DequeueEv+0x18>
	{
		return 0;
 8002898:	2300      	movs	r3, #0
 800289a:	e014      	b.n	80028c6 <_ZN5Queue7DequeueEv+0x42>
	}
	//get acutal dequeue pointer
	uint8_t dequeuePointerTemp = dequeuePointer;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	785b      	ldrb	r3, [r3, #1]
 80028a0:	73fb      	strb	r3, [r7, #15]

	//incfement dequeuePointer, set to 0 if queue overflow occures
	if (dequeuePointer == BUFFER_SIZE - 1)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	785b      	ldrb	r3, [r3, #1]
 80028a6:	2b09      	cmp	r3, #9
 80028a8:	d103      	bne.n	80028b2 <_ZN5Queue7DequeueEv+0x2e>
	{
		dequeuePointer = 0;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	705a      	strb	r2, [r3, #1]
 80028b0:	e005      	b.n	80028be <_ZN5Queue7DequeueEv+0x3a>
	}
	else
	{
		dequeuePointer++;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	785b      	ldrb	r3, [r3, #1]
 80028b6:	3301      	adds	r3, #1
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	705a      	strb	r2, [r3, #1]
	}
	//return queue data
	return buffer[dequeuePointerTemp];
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	4413      	add	r3, r2
 80028c4:	789b      	ldrb	r3, [r3, #2]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <_ZN5Queue7IsEmptyEv>:
 *
 * @param none
 * @return true if queue is empty otherwise false
 */
bool Queue::IsEmpty()
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
	return (enqueuePointer == dequeuePointer);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	781a      	ldrb	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	785b      	ldrb	r3, [r3, #1]
 80028de:	429a      	cmp	r2, r3
 80028e0:	bf0c      	ite	eq
 80028e2:	2301      	moveq	r3, #1
 80028e4:	2300      	movne	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <_ZN6USBComC1EP13DriveSettingsP11DriveStatus>:
 */
#include "USB.h"
#include "usb_device.h"
#include "usbd_cdc_if.h"

USBCom::USBCom(DriveSettings *driveSettings, DriveStatus *driveStatus)
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
{
	this->driveSettings = driveSettings;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	605a      	str	r2, [r3, #4]
	this->driveStatus = driveStatus;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	609a      	str	r2, [r3, #8]
}
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <_ZN6USBCom12USB_TransmitEPhh>:

bool USBCom::USB_Transmit(uint8_t *data, uint8_t length)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	4613      	mov	r3, r2
 8002926:	71fb      	strb	r3, [r7, #7]
	uint16_t counter = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	82fb      	strh	r3, [r7, #22]
	while (CDC_Transmit_FS((uint8_t*) data, length) != USBD_OK)
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	b29b      	uxth	r3, r3
 8002930:	4619      	mov	r1, r3
 8002932:	68b8      	ldr	r0, [r7, #8]
 8002934:	f00a fbaa 	bl	800d08c <CDC_Transmit_FS>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	bf14      	ite	ne
 800293e:	2301      	movne	r3, #1
 8002940:	2300      	moveq	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <_ZN6USBCom12USB_TransmitEPhh+0x40>
	{
		counter++;
 8002948:	8afb      	ldrh	r3, [r7, #22]
 800294a:	3301      	adds	r3, #1
 800294c:	82fb      	strh	r3, [r7, #22]
		if (counter >= 1000)
 800294e:	8afb      	ldrh	r3, [r7, #22]
 8002950:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002954:	d3ea      	bcc.n	800292c <_ZN6USBCom12USB_TransmitEPhh+0x12>
		{
			return false;	//Trasmit faild
 8002956:	2300      	movs	r3, #0
 8002958:	e000      	b.n	800295c <_ZN6USBCom12USB_TransmitEPhh+0x42>
		}
	}
	return true;	//Transmit successful
 800295a:	2301      	movs	r3, #1
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <_ZN6USBCom11USB_ReceiveEPhm>:

void USBCom::USB_Receive(uint8_t *data, uint32_t length)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]

	uint8_t response[2];

	if(length == 0){
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d015      	beq.n	80029a2 <_ZN6USBCom11USB_ReceiveEPhm+0x3e>
		return;
	}

	switch (data[0])
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b07      	cmp	r3, #7
 800297c:	dc02      	bgt.n	8002984 <_ZN6USBCom11USB_ReceiveEPhm+0x20>
 800297e:	2b00      	cmp	r3, #0
 8002980:	dc11      	bgt.n	80029a6 <_ZN6USBCom11USB_ReceiveEPhm+0x42>
 8002982:	e002      	b.n	800298a <_ZN6USBCom11USB_ReceiveEPhm+0x26>
 8002984:	3b10      	subs	r3, #16
 8002986:	2b0a      	cmp	r3, #10
 8002988:	d90d      	bls.n	80029a6 <_ZN6USBCom11USB_ReceiveEPhm+0x42>
		case UNDERVOLTAGE_ERROR:
		case OVER_CURRENT_WARNING:
		case OVER_CURRENT_ERROR:
			break;
		default:
			response[0] = 0x1F;
 800298a:	231f      	movs	r3, #31
 800298c:	753b      	strb	r3, [r7, #20]
			response[1] = 0xAA;
 800298e:	23aa      	movs	r3, #170	; 0xaa
 8002990:	757b      	strb	r3, [r7, #21]
			USB_Transmit(response, 2);
 8002992:	f107 0314 	add.w	r3, r7, #20
 8002996:	2202      	movs	r2, #2
 8002998:	4619      	mov	r1, r3
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f7ff ffbd 	bl	800291a <_ZN6USBCom12USB_TransmitEPhh>
			break;
 80029a0:	e002      	b.n	80029a8 <_ZN6USBCom11USB_ReceiveEPhm+0x44>
		return;
 80029a2:	bf00      	nop
 80029a4:	e000      	b.n	80029a8 <_ZN6USBCom11USB_ReceiveEPhm+0x44>
			break;
 80029a6:	bf00      	nop
	}

}
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029b6:	463b      	mov	r3, r7
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
 80029c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80029c6:	4b29      	ldr	r3, [pc, #164]	; (8002a6c <MX_ADC1_Init+0xbc>)
 80029c8:	4a29      	ldr	r2, [pc, #164]	; (8002a70 <MX_ADC1_Init+0xc0>)
 80029ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80029cc:	4b27      	ldr	r3, [pc, #156]	; (8002a6c <MX_ADC1_Init+0xbc>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029d2:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <MX_ADC1_Init+0xbc>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029d8:	4b24      	ldr	r3, [pc, #144]	; (8002a6c <MX_ADC1_Init+0xbc>)
 80029da:	2200      	movs	r2, #0
 80029dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80029de:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <MX_ADC1_Init+0xbc>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029e4:	4b21      	ldr	r3, [pc, #132]	; (8002a6c <MX_ADC1_Init+0xbc>)
 80029e6:	2204      	movs	r2, #4
 80029e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80029ea:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <MX_ADC1_Init+0xbc>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80029f0:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <MX_ADC1_Init+0xbc>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80029f6:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <MX_ADC1_Init+0xbc>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <MX_ADC1_Init+0xbc>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a04:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <MX_ADC1_Init+0xbc>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a0a:	4b18      	ldr	r3, [pc, #96]	; (8002a6c <MX_ADC1_Init+0xbc>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a10:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <MX_ADC1_Init+0xbc>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002a18:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <MX_ADC1_Init+0xbc>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002a1e:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <MX_ADC1_Init+0xbc>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a26:	4811      	ldr	r0, [pc, #68]	; (8002a6c <MX_ADC1_Init+0xbc>)
 8002a28:	f000 ffc0 	bl	80039ac <HAL_ADC_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002a32:	f000 fb8f 	bl	8003154 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002a36:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <MX_ADC1_Init+0xc4>)
 8002a38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a3a:	2306      	movs	r3, #6
 8002a3c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002a42:	237f      	movs	r3, #127	; 0x7f
 8002a44:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002a46:	2304      	movs	r3, #4
 8002a48:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a4e:	463b      	mov	r3, r7
 8002a50:	4619      	mov	r1, r3
 8002a52:	4806      	ldr	r0, [pc, #24]	; (8002a6c <MX_ADC1_Init+0xbc>)
 8002a54:	f001 f8f2 	bl	8003c3c <HAL_ADC_ConfigChannel>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002a5e:	f000 fb79 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a62:	bf00      	nop
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200001ac 	.word	0x200001ac
 8002a70:	50040000 	.word	0x50040000
 8002a74:	2e300800 	.word	0x2e300800

08002a78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b0a2      	sub	sp, #136	; 0x88
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a80:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	2260      	movs	r2, #96	; 0x60
 8002a96:	2100      	movs	r1, #0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f00b f80d 	bl	800dab8 <memset>
  if(adcHandle->Instance==ADC1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a3b      	ldr	r2, [pc, #236]	; (8002b90 <HAL_ADC_MspInit+0x118>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d16e      	bne.n	8002b86 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002aa8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002aac:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002aae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002ab2:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002abc:	2310      	movs	r3, #16
 8002abe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002ac0:	2307      	movs	r3, #7
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002acc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ad0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ad2:	f107 0314 	add.w	r3, r7, #20
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f004 ff00 	bl	80078dc <HAL_RCCEx_PeriphCLKConfig>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002ae2:	f000 fb37 	bl	8003154 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002ae6:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <HAL_ADC_MspInit+0x11c>)
 8002ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aea:	4a2a      	ldr	r2, [pc, #168]	; (8002b94 <HAL_ADC_MspInit+0x11c>)
 8002aec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002af2:	4b28      	ldr	r3, [pc, #160]	; (8002b94 <HAL_ADC_MspInit+0x11c>)
 8002af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afe:	4b25      	ldr	r3, [pc, #148]	; (8002b94 <HAL_ADC_MspInit+0x11c>)
 8002b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b02:	4a24      	ldr	r2, [pc, #144]	; (8002b94 <HAL_ADC_MspInit+0x11c>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b0a:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <HAL_ADC_MspInit+0x11c>)
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b16:	23c0      	movs	r3, #192	; 0xc0
 8002b18:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002b1a:	230b      	movs	r3, #11
 8002b1c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b22:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b26:	4619      	mov	r1, r3
 8002b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b2c:	f002 f906 	bl	8004d3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <HAL_ADC_MspInit+0x120>)
 8002b32:	4a1a      	ldr	r2, [pc, #104]	; (8002b9c <HAL_ADC_MspInit+0x124>)
 8002b34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002b36:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <HAL_ADC_MspInit+0x120>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b3c:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <HAL_ADC_MspInit+0x120>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <HAL_ADC_MspInit+0x120>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b48:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <HAL_ADC_MspInit+0x120>)
 8002b4a:	2280      	movs	r2, #128	; 0x80
 8002b4c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b4e:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <HAL_ADC_MspInit+0x120>)
 8002b50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b54:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b56:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <HAL_ADC_MspInit+0x120>)
 8002b58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <HAL_ADC_MspInit+0x120>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b64:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <HAL_ADC_MspInit+0x120>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b6a:	480b      	ldr	r0, [pc, #44]	; (8002b98 <HAL_ADC_MspInit+0x120>)
 8002b6c:	f001 ff7e 	bl	8004a6c <HAL_DMA_Init>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8002b76:	f000 faed 	bl	8003154 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a06      	ldr	r2, [pc, #24]	; (8002b98 <HAL_ADC_MspInit+0x120>)
 8002b7e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b80:	4a05      	ldr	r2, [pc, #20]	; (8002b98 <HAL_ADC_MspInit+0x120>)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002b86:	bf00      	nop
 8002b88:	3788      	adds	r7, #136	; 0x88
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	50040000 	.word	0x50040000
 8002b94:	40021000 	.word	0x40021000
 8002b98:	20000210 	.word	0x20000210
 8002b9c:	40020008 	.word	0x40020008

08002ba0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002ba4:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <MX_CRC_Init+0x3c>)
 8002ba6:	4a0e      	ldr	r2, [pc, #56]	; (8002be0 <MX_CRC_Init+0x40>)
 8002ba8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002baa:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <MX_CRC_Init+0x3c>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <MX_CRC_Init+0x3c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002bb6:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <MX_CRC_Init+0x3c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002bbc:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <MX_CRC_Init+0x3c>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <MX_CRC_Init+0x3c>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002bc8:	4804      	ldr	r0, [pc, #16]	; (8002bdc <MX_CRC_Init+0x3c>)
 8002bca:	f001 fd29 	bl	8004620 <HAL_CRC_Init>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002bd4:	f000 fabe 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20000258 	.word	0x20000258
 8002be0:	40023000 	.word	0x40023000

08002be4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <HAL_CRC_MspInit+0x38>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d10b      	bne.n	8002c0e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <HAL_CRC_MspInit+0x3c>)
 8002bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bfa:	4a09      	ldr	r2, [pc, #36]	; (8002c20 <HAL_CRC_MspInit+0x3c>)
 8002bfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c00:	6493      	str	r3, [r2, #72]	; 0x48
 8002c02:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <HAL_CRC_MspInit+0x3c>)
 8002c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8002c0e:	bf00      	nop
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40023000 	.word	0x40023000
 8002c20:	40021000 	.word	0x40021000

08002c24 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	; 0x28
 8002c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002c2a:	1d3b      	adds	r3, r7, #4
 8002c2c:	2224      	movs	r2, #36	; 0x24
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f00a ff41 	bl	800dab8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002c36:	4b17      	ldr	r3, [pc, #92]	; (8002c94 <MX_DAC1_Init+0x70>)
 8002c38:	4a17      	ldr	r2, [pc, #92]	; (8002c98 <MX_DAC1_Init+0x74>)
 8002c3a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002c3c:	4815      	ldr	r0, [pc, #84]	; (8002c94 <MX_DAC1_Init+0x70>)
 8002c3e:	f001 fdd9 	bl	80047f4 <HAL_DAC_Init>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002c48:	f000 fa84 	bl	8003154 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	2200      	movs	r2, #0
 8002c64:	4619      	mov	r1, r3
 8002c66:	480b      	ldr	r0, [pc, #44]	; (8002c94 <MX_DAC1_Init+0x70>)
 8002c68:	f001 fde6 	bl	8004838 <HAL_DAC_ConfigChannel>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8002c72:	f000 fa6f 	bl	8003154 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002c76:	1d3b      	adds	r3, r7, #4
 8002c78:	2210      	movs	r2, #16
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4805      	ldr	r0, [pc, #20]	; (8002c94 <MX_DAC1_Init+0x70>)
 8002c7e:	f001 fddb 	bl	8004838 <HAL_DAC_ConfigChannel>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8002c88:	f000 fa64 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002c8c:	bf00      	nop
 8002c8e:	3728      	adds	r7, #40	; 0x28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	2000027c 	.word	0x2000027c
 8002c98:	40007400 	.word	0x40007400

08002c9c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	; 0x28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a40      	ldr	r2, [pc, #256]	; (8002dbc <HAL_DAC_MspInit+0x120>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d17a      	bne.n	8002db4 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002cbe:	4b40      	ldr	r3, [pc, #256]	; (8002dc0 <HAL_DAC_MspInit+0x124>)
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc2:	4a3f      	ldr	r2, [pc, #252]	; (8002dc0 <HAL_DAC_MspInit+0x124>)
 8002cc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cc8:	6593      	str	r3, [r2, #88]	; 0x58
 8002cca:	4b3d      	ldr	r3, [pc, #244]	; (8002dc0 <HAL_DAC_MspInit+0x124>)
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd6:	4b3a      	ldr	r3, [pc, #232]	; (8002dc0 <HAL_DAC_MspInit+0x124>)
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cda:	4a39      	ldr	r2, [pc, #228]	; (8002dc0 <HAL_DAC_MspInit+0x124>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ce2:	4b37      	ldr	r3, [pc, #220]	; (8002dc0 <HAL_DAC_MspInit+0x124>)
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002cee:	2330      	movs	r3, #48	; 0x30
 8002cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfa:	f107 0314 	add.w	r3, r7, #20
 8002cfe:	4619      	mov	r1, r3
 8002d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d04:	f002 f81a 	bl	8004d3c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8002d08:	4b2e      	ldr	r3, [pc, #184]	; (8002dc4 <HAL_DAC_MspInit+0x128>)
 8002d0a:	4a2f      	ldr	r2, [pc, #188]	; (8002dc8 <HAL_DAC_MspInit+0x12c>)
 8002d0c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8002d0e:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <HAL_DAC_MspInit+0x128>)
 8002d10:	2206      	movs	r2, #6
 8002d12:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d14:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <HAL_DAC_MspInit+0x128>)
 8002d16:	2210      	movs	r2, #16
 8002d18:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d1a:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <HAL_DAC_MspInit+0x128>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002d20:	4b28      	ldr	r3, [pc, #160]	; (8002dc4 <HAL_DAC_MspInit+0x128>)
 8002d22:	2280      	movs	r2, #128	; 0x80
 8002d24:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d26:	4b27      	ldr	r3, [pc, #156]	; (8002dc4 <HAL_DAC_MspInit+0x128>)
 8002d28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d2c:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d2e:	4b25      	ldr	r3, [pc, #148]	; (8002dc4 <HAL_DAC_MspInit+0x128>)
 8002d30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d34:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8002d36:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <HAL_DAC_MspInit+0x128>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002d3c:	4b21      	ldr	r3, [pc, #132]	; (8002dc4 <HAL_DAC_MspInit+0x128>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002d42:	4820      	ldr	r0, [pc, #128]	; (8002dc4 <HAL_DAC_MspInit+0x128>)
 8002d44:	f001 fe92 	bl	8004a6c <HAL_DMA_Init>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8002d4e:	f000 fa01 	bl	8003154 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a1b      	ldr	r2, [pc, #108]	; (8002dc4 <HAL_DAC_MspInit+0x128>)
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	4a1a      	ldr	r2, [pc, #104]	; (8002dc4 <HAL_DAC_MspInit+0x128>)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8002d5e:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <HAL_DAC_MspInit+0x130>)
 8002d60:	4a1b      	ldr	r2, [pc, #108]	; (8002dd0 <HAL_DAC_MspInit+0x134>)
 8002d62:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8002d64:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_DAC_MspInit+0x130>)
 8002d66:	2205      	movs	r2, #5
 8002d68:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d6a:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <HAL_DAC_MspInit+0x130>)
 8002d6c:	2210      	movs	r2, #16
 8002d6e:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d70:	4b16      	ldr	r3, [pc, #88]	; (8002dcc <HAL_DAC_MspInit+0x130>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002d76:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <HAL_DAC_MspInit+0x130>)
 8002d78:	2280      	movs	r2, #128	; 0x80
 8002d7a:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d7c:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <HAL_DAC_MspInit+0x130>)
 8002d7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d82:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d84:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <HAL_DAC_MspInit+0x130>)
 8002d86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d8a:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_NORMAL;
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <HAL_DAC_MspInit+0x130>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002d92:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <HAL_DAC_MspInit+0x130>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8002d98:	480c      	ldr	r0, [pc, #48]	; (8002dcc <HAL_DAC_MspInit+0x130>)
 8002d9a:	f001 fe67 	bl	8004a6c <HAL_DMA_Init>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8002da4:	f000 f9d6 	bl	8003154 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a08      	ldr	r2, [pc, #32]	; (8002dcc <HAL_DAC_MspInit+0x130>)
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	4a07      	ldr	r2, [pc, #28]	; (8002dcc <HAL_DAC_MspInit+0x130>)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8002db4:	bf00      	nop
 8002db6:	3728      	adds	r7, #40	; 0x28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40007400 	.word	0x40007400
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	20000290 	.word	0x20000290
 8002dc8:	40020030 	.word	0x40020030
 8002dcc:	200002d8 	.word	0x200002d8
 8002dd0:	40020044 	.word	0x40020044

08002dd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002dda:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <MX_DMA_Init+0x58>)
 8002ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dde:	4a13      	ldr	r2, [pc, #76]	; (8002e2c <MX_DMA_Init+0x58>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6493      	str	r3, [r2, #72]	; 0x48
 8002de6:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <MX_DMA_Init+0x58>)
 8002de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	607b      	str	r3, [r7, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2100      	movs	r1, #0
 8002df6:	200b      	movs	r0, #11
 8002df8:	f001 fbdb 	bl	80045b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002dfc:	200b      	movs	r0, #11
 8002dfe:	f001 fbf4 	bl	80045ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2100      	movs	r1, #0
 8002e06:	200d      	movs	r0, #13
 8002e08:	f001 fbd3 	bl	80045b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002e0c:	200d      	movs	r0, #13
 8002e0e:	f001 fbec 	bl	80045ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002e12:	2200      	movs	r2, #0
 8002e14:	2100      	movs	r1, #0
 8002e16:	200e      	movs	r0, #14
 8002e18:	f001 fbcb 	bl	80045b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002e1c:	200e      	movs	r0, #14
 8002e1e:	f001 fbe4 	bl	80045ea <HAL_NVIC_EnableIRQ>

}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40021000 	.word	0x40021000

08002e30 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e36:	f107 0314 	add.w	r3, r7, #20
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	605a      	str	r2, [r3, #4]
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	60da      	str	r2, [r3, #12]
 8002e44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e46:	4b67      	ldr	r3, [pc, #412]	; (8002fe4 <MX_GPIO_Init+0x1b4>)
 8002e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4a:	4a66      	ldr	r2, [pc, #408]	; (8002fe4 <MX_GPIO_Init+0x1b4>)
 8002e4c:	f043 0304 	orr.w	r3, r3, #4
 8002e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e52:	4b64      	ldr	r3, [pc, #400]	; (8002fe4 <MX_GPIO_Init+0x1b4>)
 8002e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e5e:	4b61      	ldr	r3, [pc, #388]	; (8002fe4 <MX_GPIO_Init+0x1b4>)
 8002e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e62:	4a60      	ldr	r2, [pc, #384]	; (8002fe4 <MX_GPIO_Init+0x1b4>)
 8002e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e6a:	4b5e      	ldr	r3, [pc, #376]	; (8002fe4 <MX_GPIO_Init+0x1b4>)
 8002e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e76:	4b5b      	ldr	r3, [pc, #364]	; (8002fe4 <MX_GPIO_Init+0x1b4>)
 8002e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7a:	4a5a      	ldr	r2, [pc, #360]	; (8002fe4 <MX_GPIO_Init+0x1b4>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e82:	4b58      	ldr	r3, [pc, #352]	; (8002fe4 <MX_GPIO_Init+0x1b4>)
 8002e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e8e:	4b55      	ldr	r3, [pc, #340]	; (8002fe4 <MX_GPIO_Init+0x1b4>)
 8002e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e92:	4a54      	ldr	r2, [pc, #336]	; (8002fe4 <MX_GPIO_Init+0x1b4>)
 8002e94:	f043 0302 	orr.w	r3, r3, #2
 8002e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e9a:	4b52      	ldr	r3, [pc, #328]	; (8002fe4 <MX_GPIO_Init+0x1b4>)
 8002e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	607b      	str	r3, [r7, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f24c 31d0 	movw	r1, #50128	; 0xc3d0
 8002eac:	484e      	ldr	r0, [pc, #312]	; (8002fe8 <MX_GPIO_Init+0x1b8>)
 8002eae:	f002 f8d7 	bl	8005060 <HAL_GPIO_WritePin>
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f64e 41ff 	movw	r1, #60671	; 0xecff
 8002eb8:	484c      	ldr	r0, [pc, #304]	; (8002fec <MX_GPIO_Init+0x1bc>)
 8002eba:	f002 f8d1 	bl	8005060 <HAL_GPIO_WritePin>
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DI_OUT_1_P_Pin|LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ec8:	f002 f8ca 	bl	8005060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eda:	f107 0314 	add.w	r3, r7, #20
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4841      	ldr	r0, [pc, #260]	; (8002fe8 <MX_GPIO_Init+0x1b8>)
 8002ee2:	f001 ff2b 	bl	8004d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 8002ee6:	f24c 33d0 	movw	r3, #50128	; 0xc3d0
 8002eea:	617b      	str	r3, [r7, #20]
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eec:	2301      	movs	r3, #1
 8002eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ef8:	f107 0314 	add.w	r3, r7, #20
 8002efc:	4619      	mov	r1, r3
 8002efe:	483a      	ldr	r0, [pc, #232]	; (8002fe8 <MX_GPIO_Init+0x1b8>)
 8002f00:	f001 ff1c 	bl	8004d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002f04:	2309      	movs	r3, #9
 8002f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002f10:	f107 0314 	add.w	r3, r7, #20
 8002f14:	4619      	mov	r1, r3
 8002f16:	4836      	ldr	r0, [pc, #216]	; (8002ff0 <MX_GPIO_Init+0x1c0>)
 8002f18:	f001 ff10 	bl	8004d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DI_1_Pin;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f20:	2300      	movs	r3, #0
 8002f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DI_1_GPIO_Port, &GPIO_InitStruct);
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4830      	ldr	r0, [pc, #192]	; (8002ff0 <MX_GPIO_Init+0x1c0>)
 8002f30:	f001 ff04 	bl	8004d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_2_Pin|DI_3_Pin|DI_4_Pin|DI_5_Pin;
 8002f34:	230f      	movs	r3, #15
 8002f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f40:	f107 0314 	add.w	r3, r7, #20
 8002f44:	4619      	mov	r1, r3
 8002f46:	4828      	ldr	r0, [pc, #160]	; (8002fe8 <MX_GPIO_Init+0x1b8>)
 8002f48:	f001 fef8 	bl	8004d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DI_6_Pin|DI_7_Pin|DI_8_Pin;
 8002f4c:	2307      	movs	r3, #7
 8002f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f58:	f107 0314 	add.w	r3, r7, #20
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f62:	f001 feeb 	bl	8004d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_15;
 8002f66:	f248 0308 	movw	r3, #32776	; 0x8008
 8002f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f7e:	f001 fedd 	bl	8004d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 8002f82:	f64e 43ff 	movw	r3, #60671	; 0xecff
 8002f86:	617b      	str	r3, [r7, #20]
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f90:	2300      	movs	r3, #0
 8002f92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f94:	f107 0314 	add.w	r3, r7, #20
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4814      	ldr	r0, [pc, #80]	; (8002fec <MX_GPIO_Init+0x1bc>)
 8002f9c:	f001 fece 	bl	8004d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 8002fa0:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8002fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fae:	f107 0314 	add.w	r3, r7, #20
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	480d      	ldr	r0, [pc, #52]	; (8002fec <MX_GPIO_Init+0x1bc>)
 8002fb6:	f001 fec1 	bl	8004d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DI_OUT_1_P_Pin|LED_R_Pin|LED_G_Pin;
 8002fba:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fcc:	f107 0314 	add.w	r3, r7, #20
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fd6:	f001 feb1 	bl	8004d3c <HAL_GPIO_Init>

}
 8002fda:	bf00      	nop
 8002fdc:	3728      	adds	r7, #40	; 0x28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	48000800 	.word	0x48000800
 8002fec:	48000400 	.word	0x48000400
 8002ff0:	48001c00 	.word	0x48001c00

08002ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ff8:	f000 fab3 	bl	8003562 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ffc:	f000 f818 	bl	8003030 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003000:	f7ff ff16 	bl	8002e30 <MX_GPIO_Init>
  MX_DMA_Init();
 8003004:	f7ff fee6 	bl	8002dd4 <MX_DMA_Init>
  MX_ADC1_Init();
 8003008:	f7ff fcd2 	bl	80029b0 <MX_ADC1_Init>
  MX_DAC1_Init();
 800300c:	f7ff fe0a 	bl	8002c24 <MX_DAC1_Init>
  MX_SPI3_Init();
 8003010:	f000 f8c4 	bl	800319c <MX_SPI3_Init>
  MX_CRC_Init();
 8003014:	f7ff fdc4 	bl	8002ba0 <MX_CRC_Init>
  MX_TIM6_Init();
 8003018:	f000 f9d4 	bl	80033c4 <MX_TIM6_Init>
  MX_TIM7_Init();
 800301c:	f000 fa08 	bl	8003430 <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 8003020:	f009 ff70 	bl	800cf04 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  appMain.Startup();
 8003024:	4801      	ldr	r0, [pc, #4]	; (800302c <main+0x38>)
 8003026:	f7fd fb19 	bl	800065c <_ZN7AppMain7StartupEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800302a:	e7fe      	b.n	800302a <main+0x36>
 800302c:	20000320 	.word	0x20000320

08003030 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b096      	sub	sp, #88	; 0x58
 8003034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003036:	f107 0314 	add.w	r3, r7, #20
 800303a:	2244      	movs	r2, #68	; 0x44
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f00a fd3a 	bl	800dab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003044:	463b      	mov	r3, r7
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	605a      	str	r2, [r3, #4]
 800304c:	609a      	str	r2, [r3, #8]
 800304e:	60da      	str	r2, [r3, #12]
 8003050:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003052:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003056:	f003 fdcf 	bl	8006bf8 <HAL_PWREx_ControlVoltageScaling>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf14      	ite	ne
 8003060:	2301      	movne	r3, #1
 8003062:	2300      	moveq	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800306a:	f000 f873 	bl	8003154 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 800306e:	2330      	movs	r3, #48	; 0x30
 8003070:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003072:	2301      	movs	r3, #1
 8003074:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003076:	2301      	movs	r3, #1
 8003078:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800307e:	2360      	movs	r3, #96	; 0x60
 8003080:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003082:	2302      	movs	r3, #2
 8003084:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003086:	2301      	movs	r3, #1
 8003088:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800308a:	2301      	movs	r3, #1
 800308c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 800308e:	2324      	movs	r3, #36	; 0x24
 8003090:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003092:	2307      	movs	r3, #7
 8003094:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003096:	2302      	movs	r3, #2
 8003098:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800309a:	2302      	movs	r3, #2
 800309c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800309e:	f107 0314 	add.w	r3, r7, #20
 80030a2:	4618      	mov	r0, r3
 80030a4:	f003 fe0e 	bl	8006cc4 <HAL_RCC_OscConfig>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	bf14      	ite	ne
 80030ae:	2301      	movne	r3, #1
 80030b0:	2300      	moveq	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 80030b8:	f000 f84c 	bl	8003154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030bc:	230f      	movs	r3, #15
 80030be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030c0:	2303      	movs	r3, #3
 80030c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030cc:	2300      	movs	r3, #0
 80030ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80030d0:	463b      	mov	r3, r7
 80030d2:	2104      	movs	r1, #4
 80030d4:	4618      	mov	r0, r3
 80030d6:	f004 fa09 	bl	80074ec <HAL_RCC_ClockConfig>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf14      	ite	ne
 80030e0:	2301      	movne	r3, #1
 80030e2:	2300      	moveq	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 80030ea:	f000 f833 	bl	8003154 <Error_Handler>
  }
}
 80030ee:	bf00      	nop
 80030f0:	3758      	adds	r7, #88	; 0x58
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <HAL_TIM_PeriodElapsedCallback>:


/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM7){
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a04      	ldr	r2, [pc, #16]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d102      	bne.n	8003110 <HAL_TIM_PeriodElapsedCallback+0x18>
		appMain.taskStatus.UpdateTasks();
 800310a:	4804      	ldr	r0, [pc, #16]	; (800311c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800310c:	f7ff fa50 	bl	80025b0 <_ZN11TaskHandler11UpdateTasksEv>
	}



}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40001400 	.word	0x40001400
 800311c:	20000340 	.word	0x20000340

08003120 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]

}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <USB_CDC_RX_Interrupt>:
}




void USB_CDC_RX_Interrupt(uint8_t *data, uint32_t length){
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
	appMain.USBCDC.USB_Receive(data, length);
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4803      	ldr	r0, [pc, #12]	; (8003150 <USB_CDC_RX_Interrupt+0x1c>)
 8003144:	f7ff fc0e 	bl	8002964 <_ZN6USBCom11USB_ReceiveEPhm>
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	20000440 	.word	0x20000440

08003154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003158:	b672      	cpsid	i
}
 800315a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800315c:	e7fe      	b.n	800315c <Error_Handler+0x8>
	...

08003160 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d107      	bne.n	8003180 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003176:	4293      	cmp	r3, r2
 8003178:	d102      	bne.n	8003180 <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 800317a:	4803      	ldr	r0, [pc, #12]	; (8003188 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800317c:	f7fd fa07 	bl	800058e <_ZN7AppMainC1Ev>
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20000320 	.word	0x20000320

0800318c <_GLOBAL__sub_I_appMain>:
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
 8003190:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003194:	2001      	movs	r0, #1
 8003196:	f7ff ffe3 	bl	8003160 <_Z41__static_initialization_and_destruction_0ii>
 800319a:	bd80      	pop	{r7, pc}

0800319c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80031a0:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <MX_SPI3_Init+0x74>)
 80031a2:	4a1c      	ldr	r2, [pc, #112]	; (8003214 <MX_SPI3_Init+0x78>)
 80031a4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80031a6:	4b1a      	ldr	r3, [pc, #104]	; (8003210 <MX_SPI3_Init+0x74>)
 80031a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031ac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80031ae:	4b18      	ldr	r3, [pc, #96]	; (8003210 <MX_SPI3_Init+0x74>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80031b4:	4b16      	ldr	r3, [pc, #88]	; (8003210 <MX_SPI3_Init+0x74>)
 80031b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80031ba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031bc:	4b14      	ldr	r3, [pc, #80]	; (8003210 <MX_SPI3_Init+0x74>)
 80031be:	2200      	movs	r2, #0
 80031c0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031c2:	4b13      	ldr	r3, [pc, #76]	; (8003210 <MX_SPI3_Init+0x74>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80031c8:	4b11      	ldr	r3, [pc, #68]	; (8003210 <MX_SPI3_Init+0x74>)
 80031ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ce:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80031d0:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <MX_SPI3_Init+0x74>)
 80031d2:	2218      	movs	r2, #24
 80031d4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031d6:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <MX_SPI3_Init+0x74>)
 80031d8:	2200      	movs	r2, #0
 80031da:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <MX_SPI3_Init+0x74>)
 80031de:	2200      	movs	r2, #0
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <MX_SPI3_Init+0x74>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <MX_SPI3_Init+0x74>)
 80031ea:	2207      	movs	r2, #7
 80031ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <MX_SPI3_Init+0x74>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <MX_SPI3_Init+0x74>)
 80031f6:	2208      	movs	r2, #8
 80031f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80031fa:	4805      	ldr	r0, [pc, #20]	; (8003210 <MX_SPI3_Init+0x74>)
 80031fc:	f004 feaa 	bl	8007f54 <HAL_SPI_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003206:	f7ff ffa5 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	2000044c 	.word	0x2000044c
 8003214:	40003c00 	.word	0x40003c00

08003218 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	; 0x28
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003220:	f107 0314 	add.w	r3, r7, #20
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a17      	ldr	r2, [pc, #92]	; (8003294 <HAL_SPI_MspInit+0x7c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d128      	bne.n	800328c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800323a:	4b17      	ldr	r3, [pc, #92]	; (8003298 <HAL_SPI_MspInit+0x80>)
 800323c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323e:	4a16      	ldr	r2, [pc, #88]	; (8003298 <HAL_SPI_MspInit+0x80>)
 8003240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003244:	6593      	str	r3, [r2, #88]	; 0x58
 8003246:	4b14      	ldr	r3, [pc, #80]	; (8003298 <HAL_SPI_MspInit+0x80>)
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003252:	4b11      	ldr	r3, [pc, #68]	; (8003298 <HAL_SPI_MspInit+0x80>)
 8003254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003256:	4a10      	ldr	r2, [pc, #64]	; (8003298 <HAL_SPI_MspInit+0x80>)
 8003258:	f043 0304 	orr.w	r3, r3, #4
 800325c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800325e:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <HAL_SPI_MspInit+0x80>)
 8003260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800326a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800326e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003270:	2302      	movs	r3, #2
 8003272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003274:	2300      	movs	r3, #0
 8003276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003278:	2303      	movs	r3, #3
 800327a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800327c:	2306      	movs	r3, #6
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003280:	f107 0314 	add.w	r3, r7, #20
 8003284:	4619      	mov	r1, r3
 8003286:	4805      	ldr	r0, [pc, #20]	; (800329c <HAL_SPI_MspInit+0x84>)
 8003288:	f001 fd58 	bl	8004d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800328c:	bf00      	nop
 800328e:	3728      	adds	r7, #40	; 0x28
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40003c00 	.word	0x40003c00
 8003298:	40021000 	.word	0x40021000
 800329c:	48000800 	.word	0x48000800

080032a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a6:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <HAL_MspInit+0x44>)
 80032a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032aa:	4a0e      	ldr	r2, [pc, #56]	; (80032e4 <HAL_MspInit+0x44>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	6613      	str	r3, [r2, #96]	; 0x60
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <HAL_MspInit+0x44>)
 80032b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	607b      	str	r3, [r7, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032be:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <HAL_MspInit+0x44>)
 80032c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c2:	4a08      	ldr	r2, [pc, #32]	; (80032e4 <HAL_MspInit+0x44>)
 80032c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c8:	6593      	str	r3, [r2, #88]	; 0x58
 80032ca:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_MspInit+0x44>)
 80032cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40021000 	.word	0x40021000

080032e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032ec:	e7fe      	b.n	80032ec <NMI_Handler+0x4>

080032ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ee:	b480      	push	{r7}
 80032f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032f2:	e7fe      	b.n	80032f2 <HardFault_Handler+0x4>

080032f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032f8:	e7fe      	b.n	80032f8 <MemManage_Handler+0x4>

080032fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032fa:	b480      	push	{r7}
 80032fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032fe:	e7fe      	b.n	80032fe <BusFault_Handler+0x4>

08003300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003304:	e7fe      	b.n	8003304 <UsageFault_Handler+0x4>

08003306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003306:	b480      	push	{r7}
 8003308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800330a:	bf00      	nop
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003322:	b480      	push	{r7}
 8003324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003334:	f000 f96a 	bl	800360c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003338:	bf00      	nop
 800333a:	bd80      	pop	{r7, pc}

0800333c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003340:	4802      	ldr	r0, [pc, #8]	; (800334c <DMA1_Channel1_IRQHandler+0x10>)
 8003342:	f001 fc4b 	bl	8004bdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20000210 	.word	0x20000210

08003350 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8003354:	4802      	ldr	r0, [pc, #8]	; (8003360 <DMA1_Channel3_IRQHandler+0x10>)
 8003356:	f001 fc41 	bl	8004bdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000290 	.word	0x20000290

08003364 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8003368:	4802      	ldr	r0, [pc, #8]	; (8003374 <DMA1_Channel4_IRQHandler+0x10>)
 800336a:	f001 fc37 	bl	8004bdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	200002d8 	.word	0x200002d8

08003378 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800337c:	4802      	ldr	r0, [pc, #8]	; (8003388 <TIM7_IRQHandler+0x10>)
 800337e:	f005 fc1d 	bl	8008bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	200004fc 	.word	0x200004fc

0800338c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003390:	4802      	ldr	r0, [pc, #8]	; (800339c <USB_IRQHandler+0x10>)
 8003392:	f001 ffd0 	bl	8005336 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000c18 	.word	0x20000c18

080033a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80033a4:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <SystemInit+0x20>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033aa:	4a05      	ldr	r2, [pc, #20]	; (80033c0 <SystemInit+0x20>)
 80033ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033ca:	1d3b      	adds	r3, r7, #4
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80033d4:	4b14      	ldr	r3, [pc, #80]	; (8003428 <MX_TIM6_Init+0x64>)
 80033d6:	4a15      	ldr	r2, [pc, #84]	; (800342c <MX_TIM6_Init+0x68>)
 80033d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 80033da:	4b13      	ldr	r3, [pc, #76]	; (8003428 <MX_TIM6_Init+0x64>)
 80033dc:	220a      	movs	r2, #10
 80033de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033e0:	4b11      	ldr	r3, [pc, #68]	; (8003428 <MX_TIM6_Init+0x64>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16000;
 80033e6:	4b10      	ldr	r3, [pc, #64]	; (8003428 <MX_TIM6_Init+0x64>)
 80033e8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80033ec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ee:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <MX_TIM6_Init+0x64>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80033f4:	480c      	ldr	r0, [pc, #48]	; (8003428 <MX_TIM6_Init+0x64>)
 80033f6:	f005 fb35 	bl	8008a64 <HAL_TIM_Base_Init>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003400:	f7ff fea8 	bl	8003154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003404:	2300      	movs	r3, #0
 8003406:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800340c:	1d3b      	adds	r3, r7, #4
 800340e:	4619      	mov	r1, r3
 8003410:	4805      	ldr	r0, [pc, #20]	; (8003428 <MX_TIM6_Init+0x64>)
 8003412:	f005 fd75 	bl	8008f00 <HAL_TIMEx_MasterConfigSynchronization>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800341c:	f7ff fe9a 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003420:	bf00      	nop
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	200004b0 	.word	0x200004b0
 800342c:	40001000 	.word	0x40001000

08003430 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003436:	1d3b      	adds	r3, r7, #4
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003440:	4b14      	ldr	r3, [pc, #80]	; (8003494 <MX_TIM7_Init+0x64>)
 8003442:	4a15      	ldr	r2, [pc, #84]	; (8003498 <MX_TIM7_Init+0x68>)
 8003444:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10;
 8003446:	4b13      	ldr	r3, [pc, #76]	; (8003494 <MX_TIM7_Init+0x64>)
 8003448:	220a      	movs	r2, #10
 800344a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800344c:	4b11      	ldr	r3, [pc, #68]	; (8003494 <MX_TIM7_Init+0x64>)
 800344e:	2200      	movs	r2, #0
 8003450:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7199;
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <MX_TIM7_Init+0x64>)
 8003454:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003458:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800345a:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <MX_TIM7_Init+0x64>)
 800345c:	2200      	movs	r2, #0
 800345e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003460:	480c      	ldr	r0, [pc, #48]	; (8003494 <MX_TIM7_Init+0x64>)
 8003462:	f005 faff 	bl	8008a64 <HAL_TIM_Base_Init>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800346c:	f7ff fe72 	bl	8003154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003470:	2320      	movs	r3, #32
 8003472:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003478:	1d3b      	adds	r3, r7, #4
 800347a:	4619      	mov	r1, r3
 800347c:	4805      	ldr	r0, [pc, #20]	; (8003494 <MX_TIM7_Init+0x64>)
 800347e:	f005 fd3f 	bl	8008f00 <HAL_TIMEx_MasterConfigSynchronization>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003488:	f7ff fe64 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800348c:	bf00      	nop
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	200004fc 	.word	0x200004fc
 8003498:	40001400 	.word	0x40001400

0800349c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a16      	ldr	r2, [pc, #88]	; (8003504 <HAL_TIM_Base_MspInit+0x68>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d10c      	bne.n	80034c8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80034ae:	4b16      	ldr	r3, [pc, #88]	; (8003508 <HAL_TIM_Base_MspInit+0x6c>)
 80034b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b2:	4a15      	ldr	r2, [pc, #84]	; (8003508 <HAL_TIM_Base_MspInit+0x6c>)
 80034b4:	f043 0310 	orr.w	r3, r3, #16
 80034b8:	6593      	str	r3, [r2, #88]	; 0x58
 80034ba:	4b13      	ldr	r3, [pc, #76]	; (8003508 <HAL_TIM_Base_MspInit+0x6c>)
 80034bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80034c6:	e018      	b.n	80034fa <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a0f      	ldr	r2, [pc, #60]	; (800350c <HAL_TIM_Base_MspInit+0x70>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d113      	bne.n	80034fa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80034d2:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <HAL_TIM_Base_MspInit+0x6c>)
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d6:	4a0c      	ldr	r2, [pc, #48]	; (8003508 <HAL_TIM_Base_MspInit+0x6c>)
 80034d8:	f043 0320 	orr.w	r3, r3, #32
 80034dc:	6593      	str	r3, [r2, #88]	; 0x58
 80034de:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <HAL_TIM_Base_MspInit+0x6c>)
 80034e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80034ea:	2200      	movs	r2, #0
 80034ec:	2100      	movs	r1, #0
 80034ee:	2037      	movs	r0, #55	; 0x37
 80034f0:	f001 f85f 	bl	80045b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80034f4:	2037      	movs	r0, #55	; 0x37
 80034f6:	f001 f878 	bl	80045ea <HAL_NVIC_EnableIRQ>
}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40001000 	.word	0x40001000
 8003508:	40021000 	.word	0x40021000
 800350c:	40001400 	.word	0x40001400

08003510 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003510:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003548 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003514:	f7ff ff44 	bl	80033a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003518:	480c      	ldr	r0, [pc, #48]	; (800354c <LoopForever+0x6>)
  ldr r1, =_edata
 800351a:	490d      	ldr	r1, [pc, #52]	; (8003550 <LoopForever+0xa>)
  ldr r2, =_sidata
 800351c:	4a0d      	ldr	r2, [pc, #52]	; (8003554 <LoopForever+0xe>)
  movs r3, #0
 800351e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003520:	e002      	b.n	8003528 <LoopCopyDataInit>

08003522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003526:	3304      	adds	r3, #4

08003528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800352a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800352c:	d3f9      	bcc.n	8003522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800352e:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003530:	4c0a      	ldr	r4, [pc, #40]	; (800355c <LoopForever+0x16>)
  movs r3, #0
 8003532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003534:	e001      	b.n	800353a <LoopFillZerobss>

08003536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003538:	3204      	adds	r2, #4

0800353a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800353a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800353c:	d3fb      	bcc.n	8003536 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800353e:	f00a fa97 	bl	800da70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003542:	f7ff fd57 	bl	8002ff4 <main>

08003546 <LoopForever>:

LoopForever:
    b LoopForever
 8003546:	e7fe      	b.n	8003546 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003548:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800354c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003550:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8003554:	0800db98 	.word	0x0800db98
  ldr r2, =_sbss
 8003558:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 800355c:	20001134 	.word	0x20001134

08003560 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003560:	e7fe      	b.n	8003560 <ADC1_IRQHandler>

08003562 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800356c:	2003      	movs	r0, #3
 800356e:	f001 f815 	bl	800459c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003572:	200f      	movs	r0, #15
 8003574:	f000 f80e 	bl	8003594 <HAL_InitTick>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	71fb      	strb	r3, [r7, #7]
 8003582:	e001      	b.n	8003588 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003584:	f7ff fe8c 	bl	80032a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003588:	79fb      	ldrb	r3, [r7, #7]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80035a0:	4b17      	ldr	r3, [pc, #92]	; (8003600 <HAL_InitTick+0x6c>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d023      	beq.n	80035f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80035a8:	4b16      	ldr	r3, [pc, #88]	; (8003604 <HAL_InitTick+0x70>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b14      	ldr	r3, [pc, #80]	; (8003600 <HAL_InitTick+0x6c>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	4619      	mov	r1, r3
 80035b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80035ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80035be:	4618      	mov	r0, r3
 80035c0:	f001 f821 	bl	8004606 <HAL_SYSTICK_Config>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10f      	bne.n	80035ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b0f      	cmp	r3, #15
 80035ce:	d809      	bhi.n	80035e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035d0:	2200      	movs	r2, #0
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295
 80035d8:	f000 ffeb 	bl	80045b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035dc:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <HAL_InitTick+0x74>)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e007      	b.n	80035f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]
 80035e8:	e004      	b.n	80035f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	73fb      	strb	r3, [r7, #15]
 80035ee:	e001      	b.n	80035f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000008 	.word	0x20000008
 8003604:	20000000 	.word	0x20000000
 8003608:	20000004 	.word	0x20000004

0800360c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003610:	4b06      	ldr	r3, [pc, #24]	; (800362c <HAL_IncTick+0x20>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	4b06      	ldr	r3, [pc, #24]	; (8003630 <HAL_IncTick+0x24>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4413      	add	r3, r2
 800361c:	4a04      	ldr	r2, [pc, #16]	; (8003630 <HAL_IncTick+0x24>)
 800361e:	6013      	str	r3, [r2, #0]
}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	20000008 	.word	0x20000008
 8003630:	20000548 	.word	0x20000548

08003634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return uwTick;
 8003638:	4b03      	ldr	r3, [pc, #12]	; (8003648 <HAL_GetTick+0x14>)
 800363a:	681b      	ldr	r3, [r3, #0]
}
 800363c:	4618      	mov	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000548 	.word	0x20000548

0800364c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003654:	f7ff ffee 	bl	8003634 <HAL_GetTick>
 8003658:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003664:	d005      	beq.n	8003672 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003666:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <HAL_Delay+0x44>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4413      	add	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003672:	bf00      	nop
 8003674:	f7ff ffde 	bl	8003634 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	429a      	cmp	r2, r3
 8003682:	d8f7      	bhi.n	8003674 <HAL_Delay+0x28>
  {
  }
}
 8003684:	bf00      	nop
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000008 	.word	0x20000008

08003694 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	609a      	str	r2, [r3, #8]
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	609a      	str	r2, [r3, #8]
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	3360      	adds	r3, #96	; 0x60
 800370e:	461a      	mov	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	4b08      	ldr	r3, [pc, #32]	; (8003740 <LL_ADC_SetOffset+0x44>)
 800371e:	4013      	ands	r3, r2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	4313      	orrs	r3, r2
 800372c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003734:	bf00      	nop
 8003736:	371c      	adds	r7, #28
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	03fff000 	.word	0x03fff000

08003744 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3360      	adds	r3, #96	; 0x60
 8003752:	461a      	mov	r2, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003770:	b480      	push	{r7}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	3360      	adds	r3, #96	; 0x60
 8003780:	461a      	mov	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	431a      	orrs	r2, r3
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800379a:	bf00      	nop
 800379c:	371c      	adds	r7, #28
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b087      	sub	sp, #28
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	3330      	adds	r3, #48	; 0x30
 80037b6:	461a      	mov	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	0a1b      	lsrs	r3, r3, #8
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	4413      	add	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	211f      	movs	r1, #31
 80037d2:	fa01 f303 	lsl.w	r3, r1, r3
 80037d6:	43db      	mvns	r3, r3
 80037d8:	401a      	ands	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	0e9b      	lsrs	r3, r3, #26
 80037de:	f003 011f 	and.w	r1, r3, #31
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ec:	431a      	orrs	r2, r3
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037f2:	bf00      	nop
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80037fe:	b480      	push	{r7}
 8003800:	b087      	sub	sp, #28
 8003802:	af00      	add	r7, sp, #0
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	3314      	adds	r3, #20
 800380e:	461a      	mov	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	0e5b      	lsrs	r3, r3, #25
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	4413      	add	r3, r2
 800381c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	0d1b      	lsrs	r3, r3, #20
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	2107      	movs	r1, #7
 800382c:	fa01 f303 	lsl.w	r3, r1, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	401a      	ands	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	0d1b      	lsrs	r3, r3, #20
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	fa01 f303 	lsl.w	r3, r1, r3
 8003842:	431a      	orrs	r2, r3
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003848:	bf00      	nop
 800384a:	371c      	adds	r7, #28
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800386c:	43db      	mvns	r3, r3
 800386e:	401a      	ands	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f003 0318 	and.w	r3, r3, #24
 8003876:	4908      	ldr	r1, [pc, #32]	; (8003898 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003878:	40d9      	lsrs	r1, r3
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	400b      	ands	r3, r1
 800387e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003882:	431a      	orrs	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800388a:	bf00      	nop
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	0007ffff 	.word	0x0007ffff

0800389c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80038ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6093      	str	r3, [r2, #8]
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038d4:	d101      	bne.n	80038da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80038f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003924:	d101      	bne.n	800392a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <LL_ADC_IsEnabled+0x18>
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <LL_ADC_IsEnabled+0x1a>
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b04      	cmp	r3, #4
 8003970:	d101      	bne.n	8003976 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b08      	cmp	r3, #8
 8003996:	d101      	bne.n	800399c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003998:	2301      	movs	r3, #1
 800399a:	e000      	b.n	800399e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e12c      	b.n	8003c20 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff f84f 	bl	8002a78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff ff67 	bl	80038c0 <LL_ADC_IsDeepPowerDownEnabled>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d004      	beq.n	8003a02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff ff4d 	bl	800389c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff ff82 	bl	8003910 <LL_ADC_IsInternalRegulatorEnabled>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d115      	bne.n	8003a3e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff ff66 	bl	80038e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a1c:	4b82      	ldr	r3, [pc, #520]	; (8003c28 <HAL_ADC_Init+0x27c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	099b      	lsrs	r3, r3, #6
 8003a22:	4a82      	ldr	r2, [pc, #520]	; (8003c2c <HAL_ADC_Init+0x280>)
 8003a24:	fba2 2303 	umull	r2, r3, r2, r3
 8003a28:	099b      	lsrs	r3, r3, #6
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a30:	e002      	b.n	8003a38 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	3b01      	subs	r3, #1
 8003a36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f9      	bne.n	8003a32 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff ff64 	bl	8003910 <LL_ADC_IsInternalRegulatorEnabled>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10d      	bne.n	8003a6a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a52:	f043 0210 	orr.w	r2, r3, #16
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5e:	f043 0201 	orr.w	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff ff75 	bl	800395e <LL_ADC_REG_IsConversionOngoing>
 8003a74:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7a:	f003 0310 	and.w	r3, r3, #16
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f040 80c5 	bne.w	8003c0e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f040 80c1 	bne.w	8003c0e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003a94:	f043 0202 	orr.w	r2, r3, #2
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff ff49 	bl	8003938 <LL_ADC_IsEnabled>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10b      	bne.n	8003ac4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003aac:	4860      	ldr	r0, [pc, #384]	; (8003c30 <HAL_ADC_Init+0x284>)
 8003aae:	f7ff ff43 	bl	8003938 <LL_ADC_IsEnabled>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d105      	bne.n	8003ac4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4619      	mov	r1, r3
 8003abe:	485d      	ldr	r0, [pc, #372]	; (8003c34 <HAL_ADC_Init+0x288>)
 8003ac0:	f7ff fde8 	bl	8003694 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	7e5b      	ldrb	r3, [r3, #25]
 8003ac8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ace:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003ad4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003ada:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ae2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d106      	bne.n	8003b00 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	3b01      	subs	r3, #1
 8003af8:	045b      	lsls	r3, r3, #17
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d009      	beq.n	8003b1c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	4b45      	ldr	r3, [pc, #276]	; (8003c38 <HAL_ADC_Init+0x28c>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	69b9      	ldr	r1, [r7, #24]
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff ff12 	bl	800395e <LL_ADC_REG_IsConversionOngoing>
 8003b3a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff ff1f 	bl	8003984 <LL_ADC_INJ_IsConversionOngoing>
 8003b46:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d13d      	bne.n	8003bca <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d13a      	bne.n	8003bca <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b58:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b60:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b62:	4313      	orrs	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b70:	f023 0302 	bic.w	r3, r3, #2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	69b9      	ldr	r1, [r7, #24]
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d118      	bne.n	8003bba <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b92:	f023 0304 	bic.w	r3, r3, #4
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b9e:	4311      	orrs	r1, r2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003ba4:	4311      	orrs	r1, r2
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003baa:	430a      	orrs	r2, r1
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	611a      	str	r2, [r3, #16]
 8003bb8:	e007      	b.n	8003bca <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0201 	bic.w	r2, r2, #1
 8003bc8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d10c      	bne.n	8003bec <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	f023 010f 	bic.w	r1, r3, #15
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	1e5a      	subs	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
 8003bea:	e007      	b.n	8003bfc <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 020f 	bic.w	r2, r2, #15
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c00:	f023 0303 	bic.w	r3, r3, #3
 8003c04:	f043 0201 	orr.w	r2, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	655a      	str	r2, [r3, #84]	; 0x54
 8003c0c:	e007      	b.n	8003c1e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c12:	f043 0210 	orr.w	r2, r3, #16
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3720      	adds	r7, #32
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000000 	.word	0x20000000
 8003c2c:	053e2d63 	.word	0x053e2d63
 8003c30:	50040000 	.word	0x50040000
 8003c34:	50040300 	.word	0x50040300
 8003c38:	fff0c007 	.word	0xfff0c007

08003c3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b0b6      	sub	sp, #216	; 0xd8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_ADC_ConfigChannel+0x22>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e3b9      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x796>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff fe77 	bl	800395e <LL_ADC_REG_IsConversionOngoing>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f040 839e 	bne.w	80043b4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b05      	cmp	r3, #5
 8003c7e:	d824      	bhi.n	8003cca <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	3b02      	subs	r3, #2
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d81b      	bhi.n	8003cc2 <HAL_ADC_ConfigChannel+0x86>
 8003c8a:	a201      	add	r2, pc, #4	; (adr r2, 8003c90 <HAL_ADC_ConfigChannel+0x54>)
 8003c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c90:	08003ca1 	.word	0x08003ca1
 8003c94:	08003ca9 	.word	0x08003ca9
 8003c98:	08003cb1 	.word	0x08003cb1
 8003c9c:	08003cb9 	.word	0x08003cb9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	220c      	movs	r2, #12
 8003ca4:	605a      	str	r2, [r3, #4]
          break;
 8003ca6:	e011      	b.n	8003ccc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	2212      	movs	r2, #18
 8003cac:	605a      	str	r2, [r3, #4]
          break;
 8003cae:	e00d      	b.n	8003ccc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2218      	movs	r2, #24
 8003cb4:	605a      	str	r2, [r3, #4]
          break;
 8003cb6:	e009      	b.n	8003ccc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cbe:	605a      	str	r2, [r3, #4]
          break;
 8003cc0:	e004      	b.n	8003ccc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2206      	movs	r2, #6
 8003cc6:	605a      	str	r2, [r3, #4]
          break;
 8003cc8:	e000      	b.n	8003ccc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003cca:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	6859      	ldr	r1, [r3, #4]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	f7ff fd64 	bl	80037a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff fe3b 	bl	800395e <LL_ADC_REG_IsConversionOngoing>
 8003ce8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fe47 	bl	8003984 <LL_ADC_INJ_IsConversionOngoing>
 8003cf6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cfa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f040 81a6 	bne.w	8004050 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f040 81a1 	bne.w	8004050 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6819      	ldr	r1, [r3, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f7ff fd6f 	bl	80037fe <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	08db      	lsrs	r3, r3, #3
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d00a      	beq.n	8003d58 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6919      	ldr	r1, [r3, #16]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d52:	f7ff fcd3 	bl	80036fc <LL_ADC_SetOffset>
 8003d56:	e17b      	b.n	8004050 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff fcf0 	bl	8003744 <LL_ADC_GetOffsetChannel>
 8003d64:	4603      	mov	r3, r0
 8003d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10a      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x148>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2100      	movs	r1, #0
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fce5 	bl	8003744 <LL_ADC_GetOffsetChannel>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	0e9b      	lsrs	r3, r3, #26
 8003d7e:	f003 021f 	and.w	r2, r3, #31
 8003d82:	e01e      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0x186>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fcda 	bl	8003744 <LL_ADC_GetOffsetChannel>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d9a:	fa93 f3a3 	rbit	r3, r3
 8003d9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003da2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003da6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003daa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003db2:	2320      	movs	r3, #32
 8003db4:	e004      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003db6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003dba:	fab3 f383 	clz	r3, r3
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d105      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x19e>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	0e9b      	lsrs	r3, r3, #26
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	e018      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x1d0>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003de6:	fa93 f3a3 	rbit	r3, r3
 8003dea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003df2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003df6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003dfe:	2320      	movs	r3, #32
 8003e00:	e004      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003e02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e06:	fab3 f383 	clz	r3, r3
 8003e0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d106      	bne.n	8003e1e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2200      	movs	r2, #0
 8003e16:	2100      	movs	r1, #0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff fca9 	bl	8003770 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2101      	movs	r1, #1
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff fc8d 	bl	8003744 <LL_ADC_GetOffsetChannel>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10a      	bne.n	8003e4a <HAL_ADC_ConfigChannel+0x20e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2101      	movs	r1, #1
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff fc82 	bl	8003744 <LL_ADC_GetOffsetChannel>
 8003e40:	4603      	mov	r3, r0
 8003e42:	0e9b      	lsrs	r3, r3, #26
 8003e44:	f003 021f 	and.w	r2, r3, #31
 8003e48:	e01e      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x24c>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2101      	movs	r1, #1
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff fc77 	bl	8003744 <LL_ADC_GetOffsetChannel>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e60:	fa93 f3a3 	rbit	r3, r3
 8003e64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003e68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003e70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003e78:	2320      	movs	r3, #32
 8003e7a:	e004      	b.n	8003e86 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003e7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e80:	fab3 f383 	clz	r3, r3
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d105      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x264>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	0e9b      	lsrs	r3, r3, #26
 8003e9a:	f003 031f 	and.w	r3, r3, #31
 8003e9e:	e018      	b.n	8003ed2 <HAL_ADC_ConfigChannel+0x296>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003eac:	fa93 f3a3 	rbit	r3, r3
 8003eb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003eb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003eb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003ebc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003ec4:	2320      	movs	r3, #32
 8003ec6:	e004      	b.n	8003ed2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ecc:	fab3 f383 	clz	r3, r3
 8003ed0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d106      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2200      	movs	r2, #0
 8003edc:	2101      	movs	r1, #1
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff fc46 	bl	8003770 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2102      	movs	r1, #2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fc2a 	bl	8003744 <LL_ADC_GetOffsetChannel>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10a      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x2d4>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2102      	movs	r1, #2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff fc1f 	bl	8003744 <LL_ADC_GetOffsetChannel>
 8003f06:	4603      	mov	r3, r0
 8003f08:	0e9b      	lsrs	r3, r3, #26
 8003f0a:	f003 021f 	and.w	r2, r3, #31
 8003f0e:	e01e      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x312>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2102      	movs	r1, #2
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff fc14 	bl	8003744 <LL_ADC_GetOffsetChannel>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f26:	fa93 f3a3 	rbit	r3, r3
 8003f2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003f2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003f36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003f3e:	2320      	movs	r3, #32
 8003f40:	e004      	b.n	8003f4c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003f42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f46:	fab3 f383 	clz	r3, r3
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d105      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x32a>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	0e9b      	lsrs	r3, r3, #26
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	e016      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x358>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f72:	fa93 f3a3 	rbit	r3, r3
 8003f76:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003f78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003f86:	2320      	movs	r3, #32
 8003f88:	e004      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f8e:	fab3 f383 	clz	r3, r3
 8003f92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d106      	bne.n	8003fa6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	2102      	movs	r1, #2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff fbe5 	bl	8003770 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2103      	movs	r1, #3
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff fbc9 	bl	8003744 <LL_ADC_GetOffsetChannel>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <HAL_ADC_ConfigChannel+0x396>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2103      	movs	r1, #3
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff fbbe 	bl	8003744 <LL_ADC_GetOffsetChannel>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	0e9b      	lsrs	r3, r3, #26
 8003fcc:	f003 021f 	and.w	r2, r3, #31
 8003fd0:	e017      	b.n	8004002 <HAL_ADC_ConfigChannel+0x3c6>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2103      	movs	r1, #3
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fbb3 	bl	8003744 <LL_ADC_GetOffsetChannel>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fe4:	fa93 f3a3 	rbit	r3, r3
 8003fe8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003fea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fec:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003fee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003ff4:	2320      	movs	r3, #32
 8003ff6:	e003      	b.n	8004000 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ffa:	fab3 f383 	clz	r3, r3
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800400a:	2b00      	cmp	r3, #0
 800400c:	d105      	bne.n	800401a <HAL_ADC_ConfigChannel+0x3de>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	0e9b      	lsrs	r3, r3, #26
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	e011      	b.n	800403e <HAL_ADC_ConfigChannel+0x402>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004020:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004022:	fa93 f3a3 	rbit	r3, r3
 8004026:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800402a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800402c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004032:	2320      	movs	r3, #32
 8004034:	e003      	b.n	800403e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004038:	fab3 f383 	clz	r3, r3
 800403c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800403e:	429a      	cmp	r2, r3
 8004040:	d106      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2200      	movs	r2, #0
 8004048:	2103      	movs	r1, #3
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fb90 	bl	8003770 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff fc6f 	bl	8003938 <LL_ADC_IsEnabled>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	f040 813f 	bne.w	80042e0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6819      	ldr	r1, [r3, #0]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	461a      	mov	r2, r3
 8004070:	f7ff fbf0 	bl	8003854 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	4a8e      	ldr	r2, [pc, #568]	; (80042b4 <HAL_ADC_ConfigChannel+0x678>)
 800407a:	4293      	cmp	r3, r2
 800407c:	f040 8130 	bne.w	80042e0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10b      	bne.n	80040a8 <HAL_ADC_ConfigChannel+0x46c>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	0e9b      	lsrs	r3, r3, #26
 8004096:	3301      	adds	r3, #1
 8004098:	f003 031f 	and.w	r3, r3, #31
 800409c:	2b09      	cmp	r3, #9
 800409e:	bf94      	ite	ls
 80040a0:	2301      	movls	r3, #1
 80040a2:	2300      	movhi	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	e019      	b.n	80040dc <HAL_ADC_ConfigChannel+0x4a0>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040b0:	fa93 f3a3 	rbit	r3, r3
 80040b4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80040b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040b8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80040ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80040c0:	2320      	movs	r3, #32
 80040c2:	e003      	b.n	80040cc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80040c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040c6:	fab3 f383 	clz	r3, r3
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	3301      	adds	r3, #1
 80040ce:	f003 031f 	and.w	r3, r3, #31
 80040d2:	2b09      	cmp	r3, #9
 80040d4:	bf94      	ite	ls
 80040d6:	2301      	movls	r3, #1
 80040d8:	2300      	movhi	r3, #0
 80040da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d079      	beq.n	80041d4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d107      	bne.n	80040fc <HAL_ADC_ConfigChannel+0x4c0>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	0e9b      	lsrs	r3, r3, #26
 80040f2:	3301      	adds	r3, #1
 80040f4:	069b      	lsls	r3, r3, #26
 80040f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040fa:	e015      	b.n	8004128 <HAL_ADC_ConfigChannel+0x4ec>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004104:	fa93 f3a3 	rbit	r3, r3
 8004108:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800410a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800410c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800410e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004114:	2320      	movs	r3, #32
 8004116:	e003      	b.n	8004120 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800411a:	fab3 f383 	clz	r3, r3
 800411e:	b2db      	uxtb	r3, r3
 8004120:	3301      	adds	r3, #1
 8004122:	069b      	lsls	r3, r3, #26
 8004124:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004130:	2b00      	cmp	r3, #0
 8004132:	d109      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x50c>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	0e9b      	lsrs	r3, r3, #26
 800413a:	3301      	adds	r3, #1
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	2101      	movs	r1, #1
 8004142:	fa01 f303 	lsl.w	r3, r1, r3
 8004146:	e017      	b.n	8004178 <HAL_ADC_ConfigChannel+0x53c>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004150:	fa93 f3a3 	rbit	r3, r3
 8004154:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004158:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800415a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004160:	2320      	movs	r3, #32
 8004162:	e003      	b.n	800416c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004166:	fab3 f383 	clz	r3, r3
 800416a:	b2db      	uxtb	r3, r3
 800416c:	3301      	adds	r3, #1
 800416e:	f003 031f 	and.w	r3, r3, #31
 8004172:	2101      	movs	r1, #1
 8004174:	fa01 f303 	lsl.w	r3, r1, r3
 8004178:	ea42 0103 	orr.w	r1, r2, r3
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10a      	bne.n	800419e <HAL_ADC_ConfigChannel+0x562>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	0e9b      	lsrs	r3, r3, #26
 800418e:	3301      	adds	r3, #1
 8004190:	f003 021f 	and.w	r2, r3, #31
 8004194:	4613      	mov	r3, r2
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	4413      	add	r3, r2
 800419a:	051b      	lsls	r3, r3, #20
 800419c:	e018      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x594>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a6:	fa93 f3a3 	rbit	r3, r3
 80041aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80041ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80041b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80041b6:	2320      	movs	r3, #32
 80041b8:	e003      	b.n	80041c2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80041ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041bc:	fab3 f383 	clz	r3, r3
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	3301      	adds	r3, #1
 80041c4:	f003 021f 	and.w	r2, r3, #31
 80041c8:	4613      	mov	r3, r2
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	4413      	add	r3, r2
 80041ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041d0:	430b      	orrs	r3, r1
 80041d2:	e080      	b.n	80042d6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d107      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x5b4>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	0e9b      	lsrs	r3, r3, #26
 80041e6:	3301      	adds	r3, #1
 80041e8:	069b      	lsls	r3, r3, #26
 80041ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041ee:	e015      	b.n	800421c <HAL_ADC_ConfigChannel+0x5e0>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f8:	fa93 f3a3 	rbit	r3, r3
 80041fc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004200:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004208:	2320      	movs	r3, #32
 800420a:	e003      	b.n	8004214 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420e:	fab3 f383 	clz	r3, r3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	3301      	adds	r3, #1
 8004216:	069b      	lsls	r3, r3, #26
 8004218:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004224:	2b00      	cmp	r3, #0
 8004226:	d109      	bne.n	800423c <HAL_ADC_ConfigChannel+0x600>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	0e9b      	lsrs	r3, r3, #26
 800422e:	3301      	adds	r3, #1
 8004230:	f003 031f 	and.w	r3, r3, #31
 8004234:	2101      	movs	r1, #1
 8004236:	fa01 f303 	lsl.w	r3, r1, r3
 800423a:	e017      	b.n	800426c <HAL_ADC_ConfigChannel+0x630>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	fa93 f3a3 	rbit	r3, r3
 8004248:	61fb      	str	r3, [r7, #28]
  return result;
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004254:	2320      	movs	r3, #32
 8004256:	e003      	b.n	8004260 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	fab3 f383 	clz	r3, r3
 800425e:	b2db      	uxtb	r3, r3
 8004260:	3301      	adds	r3, #1
 8004262:	f003 031f 	and.w	r3, r3, #31
 8004266:	2101      	movs	r1, #1
 8004268:	fa01 f303 	lsl.w	r3, r1, r3
 800426c:	ea42 0103 	orr.w	r1, r2, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10d      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x65c>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	0e9b      	lsrs	r3, r3, #26
 8004282:	3301      	adds	r3, #1
 8004284:	f003 021f 	and.w	r2, r3, #31
 8004288:	4613      	mov	r3, r2
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	4413      	add	r3, r2
 800428e:	3b1e      	subs	r3, #30
 8004290:	051b      	lsls	r3, r3, #20
 8004292:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004296:	e01d      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x698>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	fa93 f3a3 	rbit	r3, r3
 80042a4:	613b      	str	r3, [r7, #16]
  return result;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d103      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80042b0:	2320      	movs	r3, #32
 80042b2:	e005      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x684>
 80042b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	fab3 f383 	clz	r3, r3
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	3301      	adds	r3, #1
 80042c2:	f003 021f 	and.w	r2, r3, #31
 80042c6:	4613      	mov	r3, r2
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	4413      	add	r3, r2
 80042cc:	3b1e      	subs	r3, #30
 80042ce:	051b      	lsls	r3, r3, #20
 80042d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042d4:	430b      	orrs	r3, r1
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	6892      	ldr	r2, [r2, #8]
 80042da:	4619      	mov	r1, r3
 80042dc:	f7ff fa8f 	bl	80037fe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	4b3d      	ldr	r3, [pc, #244]	; (80043dc <HAL_ADC_ConfigChannel+0x7a0>)
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d06c      	beq.n	80043c6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042ec:	483c      	ldr	r0, [pc, #240]	; (80043e0 <HAL_ADC_ConfigChannel+0x7a4>)
 80042ee:	f7ff f9f7 	bl	80036e0 <LL_ADC_GetCommonPathInternalCh>
 80042f2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a3a      	ldr	r2, [pc, #232]	; (80043e4 <HAL_ADC_ConfigChannel+0x7a8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d127      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004300:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004304:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d121      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a35      	ldr	r2, [pc, #212]	; (80043e8 <HAL_ADC_ConfigChannel+0x7ac>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d157      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004316:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800431a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800431e:	4619      	mov	r1, r3
 8004320:	482f      	ldr	r0, [pc, #188]	; (80043e0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004322:	f7ff f9ca 	bl	80036ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004326:	4b31      	ldr	r3, [pc, #196]	; (80043ec <HAL_ADC_ConfigChannel+0x7b0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	099b      	lsrs	r3, r3, #6
 800432c:	4a30      	ldr	r2, [pc, #192]	; (80043f0 <HAL_ADC_ConfigChannel+0x7b4>)
 800432e:	fba2 2303 	umull	r2, r3, r2, r3
 8004332:	099b      	lsrs	r3, r3, #6
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	4613      	mov	r3, r2
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004340:	e002      	b.n	8004348 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	3b01      	subs	r3, #1
 8004346:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f9      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800434e:	e03a      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a27      	ldr	r2, [pc, #156]	; (80043f4 <HAL_ADC_ConfigChannel+0x7b8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d113      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x746>
 800435a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800435e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10d      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1f      	ldr	r2, [pc, #124]	; (80043e8 <HAL_ADC_ConfigChannel+0x7ac>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d12a      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004370:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004378:	4619      	mov	r1, r3
 800437a:	4819      	ldr	r0, [pc, #100]	; (80043e0 <HAL_ADC_ConfigChannel+0x7a4>)
 800437c:	f7ff f99d 	bl	80036ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004380:	e021      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a1c      	ldr	r2, [pc, #112]	; (80043f8 <HAL_ADC_ConfigChannel+0x7bc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d11c      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800438c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d116      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a12      	ldr	r2, [pc, #72]	; (80043e8 <HAL_ADC_ConfigChannel+0x7ac>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d111      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043aa:	4619      	mov	r1, r3
 80043ac:	480c      	ldr	r0, [pc, #48]	; (80043e0 <HAL_ADC_ConfigChannel+0x7a4>)
 80043ae:	f7ff f984 	bl	80036ba <LL_ADC_SetCommonPathInternalCh>
 80043b2:	e008      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b8:	f043 0220 	orr.w	r2, r3, #32
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80043ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	37d8      	adds	r7, #216	; 0xd8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	80080000 	.word	0x80080000
 80043e0:	50040300 	.word	0x50040300
 80043e4:	c7520000 	.word	0xc7520000
 80043e8:	50040000 	.word	0x50040000
 80043ec:	20000000 	.word	0x20000000
 80043f0:	053e2d63 	.word	0x053e2d63
 80043f4:	cb840000 	.word	0xcb840000
 80043f8:	80000001 	.word	0x80000001

080043fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800440c:	4b0c      	ldr	r3, [pc, #48]	; (8004440 <__NVIC_SetPriorityGrouping+0x44>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004418:	4013      	ands	r3, r2
 800441a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800442c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800442e:	4a04      	ldr	r2, [pc, #16]	; (8004440 <__NVIC_SetPriorityGrouping+0x44>)
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	60d3      	str	r3, [r2, #12]
}
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	e000ed00 	.word	0xe000ed00

08004444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004448:	4b04      	ldr	r3, [pc, #16]	; (800445c <__NVIC_GetPriorityGrouping+0x18>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	0a1b      	lsrs	r3, r3, #8
 800444e:	f003 0307 	and.w	r3, r3, #7
}
 8004452:	4618      	mov	r0, r3
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	e000ed00 	.word	0xe000ed00

08004460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800446a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446e:	2b00      	cmp	r3, #0
 8004470:	db0b      	blt.n	800448a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	f003 021f 	and.w	r2, r3, #31
 8004478:	4907      	ldr	r1, [pc, #28]	; (8004498 <__NVIC_EnableIRQ+0x38>)
 800447a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	2001      	movs	r0, #1
 8004482:	fa00 f202 	lsl.w	r2, r0, r2
 8004486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	e000e100 	.word	0xe000e100

0800449c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	6039      	str	r1, [r7, #0]
 80044a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	db0a      	blt.n	80044c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	490c      	ldr	r1, [pc, #48]	; (80044e8 <__NVIC_SetPriority+0x4c>)
 80044b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ba:	0112      	lsls	r2, r2, #4
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	440b      	add	r3, r1
 80044c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044c4:	e00a      	b.n	80044dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	4908      	ldr	r1, [pc, #32]	; (80044ec <__NVIC_SetPriority+0x50>)
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	3b04      	subs	r3, #4
 80044d4:	0112      	lsls	r2, r2, #4
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	440b      	add	r3, r1
 80044da:	761a      	strb	r2, [r3, #24]
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	e000e100 	.word	0xe000e100
 80044ec:	e000ed00 	.word	0xe000ed00

080044f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b089      	sub	sp, #36	; 0x24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	f1c3 0307 	rsb	r3, r3, #7
 800450a:	2b04      	cmp	r3, #4
 800450c:	bf28      	it	cs
 800450e:	2304      	movcs	r3, #4
 8004510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	3304      	adds	r3, #4
 8004516:	2b06      	cmp	r3, #6
 8004518:	d902      	bls.n	8004520 <NVIC_EncodePriority+0x30>
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	3b03      	subs	r3, #3
 800451e:	e000      	b.n	8004522 <NVIC_EncodePriority+0x32>
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004524:	f04f 32ff 	mov.w	r2, #4294967295
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	43da      	mvns	r2, r3
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	401a      	ands	r2, r3
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004538:	f04f 31ff 	mov.w	r1, #4294967295
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	fa01 f303 	lsl.w	r3, r1, r3
 8004542:	43d9      	mvns	r1, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004548:	4313      	orrs	r3, r2
         );
}
 800454a:	4618      	mov	r0, r3
 800454c:	3724      	adds	r7, #36	; 0x24
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3b01      	subs	r3, #1
 8004564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004568:	d301      	bcc.n	800456e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800456a:	2301      	movs	r3, #1
 800456c:	e00f      	b.n	800458e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800456e:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <SysTick_Config+0x40>)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3b01      	subs	r3, #1
 8004574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004576:	210f      	movs	r1, #15
 8004578:	f04f 30ff 	mov.w	r0, #4294967295
 800457c:	f7ff ff8e 	bl	800449c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004580:	4b05      	ldr	r3, [pc, #20]	; (8004598 <SysTick_Config+0x40>)
 8004582:	2200      	movs	r2, #0
 8004584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004586:	4b04      	ldr	r3, [pc, #16]	; (8004598 <SysTick_Config+0x40>)
 8004588:	2207      	movs	r2, #7
 800458a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	e000e010 	.word	0xe000e010

0800459c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7ff ff29 	bl	80043fc <__NVIC_SetPriorityGrouping>
}
 80045aa:	bf00      	nop
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b086      	sub	sp, #24
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	4603      	mov	r3, r0
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
 80045be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045c4:	f7ff ff3e 	bl	8004444 <__NVIC_GetPriorityGrouping>
 80045c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	6978      	ldr	r0, [r7, #20]
 80045d0:	f7ff ff8e 	bl	80044f0 <NVIC_EncodePriority>
 80045d4:	4602      	mov	r2, r0
 80045d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045da:	4611      	mov	r1, r2
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff ff5d 	bl	800449c <__NVIC_SetPriority>
}
 80045e2:	bf00      	nop
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b082      	sub	sp, #8
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	4603      	mov	r3, r0
 80045f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff ff31 	bl	8004460 <__NVIC_EnableIRQ>
}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7ff ffa2 	bl	8004558 <SysTick_Config>
 8004614:	4603      	mov	r3, r0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e054      	b.n	80046dc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	7f5b      	ldrb	r3, [r3, #29]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d105      	bne.n	8004648 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7fe face 	bl	8002be4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	791b      	ldrb	r3, [r3, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10c      	bne.n	8004670 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a22      	ldr	r2, [pc, #136]	; (80046e4 <HAL_CRC_Init+0xc4>)
 800465c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0218 	bic.w	r2, r2, #24
 800466c:	609a      	str	r2, [r3, #8]
 800466e:	e00c      	b.n	800468a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6899      	ldr	r1, [r3, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	461a      	mov	r2, r3
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f834 	bl	80046e8 <HAL_CRCEx_Polynomial_Set>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e028      	b.n	80046dc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	795b      	ldrb	r3, [r3, #5]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d105      	bne.n	800469e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f04f 32ff 	mov.w	r2, #4294967295
 800469a:	611a      	str	r2, [r3, #16]
 800469c:	e004      	b.n	80046a8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6912      	ldr	r2, [r2, #16]
 80046a6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695a      	ldr	r2, [r3, #20]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699a      	ldr	r2, [r3, #24]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	04c11db7 	.word	0x04c11db7

080046e8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80046f8:	231f      	movs	r3, #31
 80046fa:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80046fc:	bf00      	nop
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1e5a      	subs	r2, r3, #1
 8004702:	613a      	str	r2, [r7, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d009      	beq.n	800471c <HAL_CRCEx_Polynomial_Set+0x34>
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	fa22 f303 	lsr.w	r3, r2, r3
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0f0      	beq.n	80046fe <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b18      	cmp	r3, #24
 8004720:	d846      	bhi.n	80047b0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004722:	a201      	add	r2, pc, #4	; (adr r2, 8004728 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004728:	080047b7 	.word	0x080047b7
 800472c:	080047b1 	.word	0x080047b1
 8004730:	080047b1 	.word	0x080047b1
 8004734:	080047b1 	.word	0x080047b1
 8004738:	080047b1 	.word	0x080047b1
 800473c:	080047b1 	.word	0x080047b1
 8004740:	080047b1 	.word	0x080047b1
 8004744:	080047b1 	.word	0x080047b1
 8004748:	080047a5 	.word	0x080047a5
 800474c:	080047b1 	.word	0x080047b1
 8004750:	080047b1 	.word	0x080047b1
 8004754:	080047b1 	.word	0x080047b1
 8004758:	080047b1 	.word	0x080047b1
 800475c:	080047b1 	.word	0x080047b1
 8004760:	080047b1 	.word	0x080047b1
 8004764:	080047b1 	.word	0x080047b1
 8004768:	08004799 	.word	0x08004799
 800476c:	080047b1 	.word	0x080047b1
 8004770:	080047b1 	.word	0x080047b1
 8004774:	080047b1 	.word	0x080047b1
 8004778:	080047b1 	.word	0x080047b1
 800477c:	080047b1 	.word	0x080047b1
 8004780:	080047b1 	.word	0x080047b1
 8004784:	080047b1 	.word	0x080047b1
 8004788:	0800478d 	.word	0x0800478d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	2b06      	cmp	r3, #6
 8004790:	d913      	bls.n	80047ba <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004796:	e010      	b.n	80047ba <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	2b07      	cmp	r3, #7
 800479c:	d90f      	bls.n	80047be <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80047a2:	e00c      	b.n	80047be <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	2b0f      	cmp	r3, #15
 80047a8:	d90b      	bls.n	80047c2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80047ae:	e008      	b.n	80047c2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	75fb      	strb	r3, [r7, #23]
      break;
 80047b4:	e006      	b.n	80047c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80047b6:	bf00      	nop
 80047b8:	e004      	b.n	80047c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80047ba:	bf00      	nop
 80047bc:	e002      	b.n	80047c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80047be:	bf00      	nop
 80047c0:	e000      	b.n	80047c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80047c2:	bf00      	nop
  }
  if (status == HAL_OK)
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10d      	bne.n	80047e6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f023 0118 	bic.w	r1, r3, #24
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	371c      	adds	r7, #28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e014      	b.n	8004830 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	791b      	ldrb	r3, [r3, #4]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d105      	bne.n	800481c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7fe fa40 	bl	8002c9c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	795b      	ldrb	r3, [r3, #5]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d101      	bne.n	8004854 <HAL_DAC_ConfigChannel+0x1c>
 8004850:	2302      	movs	r3, #2
 8004852:	e107      	b.n	8004a64 <HAL_DAC_ConfigChannel+0x22c>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2201      	movs	r2, #1
 8004858:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2202      	movs	r2, #2
 800485e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b04      	cmp	r3, #4
 8004866:	d174      	bne.n	8004952 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004868:	f7fe fee4 	bl	8003634 <HAL_GetTick>
 800486c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d134      	bne.n	80048de <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004874:	e011      	b.n	800489a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004876:	f7fe fedd 	bl	8003634 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	d90a      	bls.n	800489a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f043 0208 	orr.w	r2, r3, #8
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2203      	movs	r2, #3
 8004894:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e0e4      	b.n	8004a64 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1e6      	bne.n	8004876 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80048a8:	2001      	movs	r0, #1
 80048aa:	f7fe fecf 	bl	800364c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	6992      	ldr	r2, [r2, #24]
 80048b6:	641a      	str	r2, [r3, #64]	; 0x40
 80048b8:	e01e      	b.n	80048f8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80048ba:	f7fe febb 	bl	8003634 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d90a      	bls.n	80048de <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f043 0208 	orr.w	r2, r3, #8
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2203      	movs	r2, #3
 80048d8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e0c2      	b.n	8004a64 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	dbe8      	blt.n	80048ba <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80048e8:	2001      	movs	r0, #1
 80048ea:	f7fe feaf 	bl	800364c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	6992      	ldr	r2, [r2, #24]
 80048f6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004908:	fa01 f303 	lsl.w	r3, r1, r3
 800490c:	43db      	mvns	r3, r3
 800490e:	ea02 0103 	and.w	r1, r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	69da      	ldr	r2, [r3, #28]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	409a      	lsls	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f003 0310 	and.w	r3, r3, #16
 8004932:	21ff      	movs	r1, #255	; 0xff
 8004934:	fa01 f303 	lsl.w	r3, r1, r3
 8004938:	43db      	mvns	r3, r3
 800493a:	ea02 0103 	and.w	r1, r2, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	6a1a      	ldr	r2, [r3, #32]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f003 0310 	and.w	r3, r3, #16
 8004948:	409a      	lsls	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d11d      	bne.n	8004996 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f003 0310 	and.w	r3, r3, #16
 8004968:	221f      	movs	r2, #31
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4013      	ands	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f003 0310 	and.w	r3, r3, #16
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	4313      	orrs	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2207      	movs	r2, #7
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	43db      	mvns	r3, r3
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4013      	ands	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f003 0310 	and.w	r3, r3, #16
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6819      	ldr	r1, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f003 0310 	and.w	r3, r3, #16
 80049ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43da      	mvns	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	400a      	ands	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f003 0310 	and.w	r3, r3, #16
 8004a0a:	f640 72fc 	movw	r2, #4092	; 0xffc
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	43db      	mvns	r3, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4013      	ands	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6819      	ldr	r1, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	22c0      	movs	r2, #192	; 0xc0
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	43da      	mvns	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	400a      	ands	r2, r1
 8004a54:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3720      	adds	r7, #32
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e098      	b.n	8004bb0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	4b4d      	ldr	r3, [pc, #308]	; (8004bbc <HAL_DMA_Init+0x150>)
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d80f      	bhi.n	8004aaa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	4b4b      	ldr	r3, [pc, #300]	; (8004bc0 <HAL_DMA_Init+0x154>)
 8004a92:	4413      	add	r3, r2
 8004a94:	4a4b      	ldr	r2, [pc, #300]	; (8004bc4 <HAL_DMA_Init+0x158>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	091b      	lsrs	r3, r3, #4
 8004a9c:	009a      	lsls	r2, r3, #2
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a48      	ldr	r2, [pc, #288]	; (8004bc8 <HAL_DMA_Init+0x15c>)
 8004aa6:	641a      	str	r2, [r3, #64]	; 0x40
 8004aa8:	e00e      	b.n	8004ac8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	4b46      	ldr	r3, [pc, #280]	; (8004bcc <HAL_DMA_Init+0x160>)
 8004ab2:	4413      	add	r3, r2
 8004ab4:	4a43      	ldr	r2, [pc, #268]	; (8004bc4 <HAL_DMA_Init+0x158>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	091b      	lsrs	r3, r3, #4
 8004abc:	009a      	lsls	r2, r3, #2
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a42      	ldr	r2, [pc, #264]	; (8004bd0 <HAL_DMA_Init+0x164>)
 8004ac6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b22:	d039      	beq.n	8004b98 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	4a27      	ldr	r2, [pc, #156]	; (8004bc8 <HAL_DMA_Init+0x15c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d11a      	bne.n	8004b64 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004b2e:	4b29      	ldr	r3, [pc, #164]	; (8004bd4 <HAL_DMA_Init+0x168>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b36:	f003 031c 	and.w	r3, r3, #28
 8004b3a:	210f      	movs	r1, #15
 8004b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b40:	43db      	mvns	r3, r3
 8004b42:	4924      	ldr	r1, [pc, #144]	; (8004bd4 <HAL_DMA_Init+0x168>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004b48:	4b22      	ldr	r3, [pc, #136]	; (8004bd4 <HAL_DMA_Init+0x168>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6859      	ldr	r1, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b54:	f003 031c 	and.w	r3, r3, #28
 8004b58:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5c:	491d      	ldr	r1, [pc, #116]	; (8004bd4 <HAL_DMA_Init+0x168>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	600b      	str	r3, [r1, #0]
 8004b62:	e019      	b.n	8004b98 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004b64:	4b1c      	ldr	r3, [pc, #112]	; (8004bd8 <HAL_DMA_Init+0x16c>)
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6c:	f003 031c 	and.w	r3, r3, #28
 8004b70:	210f      	movs	r1, #15
 8004b72:	fa01 f303 	lsl.w	r3, r1, r3
 8004b76:	43db      	mvns	r3, r3
 8004b78:	4917      	ldr	r1, [pc, #92]	; (8004bd8 <HAL_DMA_Init+0x16c>)
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004b7e:	4b16      	ldr	r3, [pc, #88]	; (8004bd8 <HAL_DMA_Init+0x16c>)
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6859      	ldr	r1, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8a:	f003 031c 	and.w	r3, r3, #28
 8004b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b92:	4911      	ldr	r1, [pc, #68]	; (8004bd8 <HAL_DMA_Init+0x16c>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	40020407 	.word	0x40020407
 8004bc0:	bffdfff8 	.word	0xbffdfff8
 8004bc4:	cccccccd 	.word	0xcccccccd
 8004bc8:	40020000 	.word	0x40020000
 8004bcc:	bffdfbf8 	.word	0xbffdfbf8
 8004bd0:	40020400 	.word	0x40020400
 8004bd4:	400200a8 	.word	0x400200a8
 8004bd8:	400204a8 	.word	0x400204a8

08004bdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf8:	f003 031c 	and.w	r3, r3, #28
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	409a      	lsls	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d026      	beq.n	8004c56 <HAL_DMA_IRQHandler+0x7a>
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d021      	beq.n	8004c56 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d107      	bne.n	8004c30 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0204 	bic.w	r2, r2, #4
 8004c2e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c34:	f003 021c 	and.w	r2, r3, #28
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	2104      	movs	r1, #4
 8004c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c42:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d071      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004c54:	e06c      	b.n	8004d30 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5a:	f003 031c 	and.w	r3, r3, #28
 8004c5e:	2202      	movs	r2, #2
 8004c60:	409a      	lsls	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4013      	ands	r3, r2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d02e      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0xec>
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d029      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10b      	bne.n	8004c9a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 020a 	bic.w	r2, r2, #10
 8004c90:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9e:	f003 021c 	and.w	r2, r3, #28
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	2102      	movs	r1, #2
 8004ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8004cac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d038      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004cc6:	e033      	b.n	8004d30 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ccc:	f003 031c 	and.w	r3, r3, #28
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	409a      	lsls	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d02a      	beq.n	8004d32 <HAL_DMA_IRQHandler+0x156>
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d025      	beq.n	8004d32 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 020e 	bic.w	r2, r2, #14
 8004cf4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfa:	f003 021c 	and.w	r2, r3, #28
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	2101      	movs	r1, #1
 8004d04:	fa01 f202 	lsl.w	r2, r1, r2
 8004d08:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d004      	beq.n	8004d32 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d30:	bf00      	nop
 8004d32:	bf00      	nop
}
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d46:	2300      	movs	r3, #0
 8004d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d4a:	e154      	b.n	8004ff6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	2101      	movs	r1, #1
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	fa01 f303 	lsl.w	r3, r1, r3
 8004d58:	4013      	ands	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 8146 	beq.w	8004ff0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d005      	beq.n	8004d7c <HAL_GPIO_Init+0x40>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 0303 	and.w	r3, r3, #3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d130      	bne.n	8004dde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	2203      	movs	r2, #3
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4013      	ands	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004db2:	2201      	movs	r2, #1
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	091b      	lsrs	r3, r3, #4
 8004dc8:	f003 0201 	and.w	r2, r3, #1
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d017      	beq.n	8004e1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	2203      	movs	r2, #3
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d123      	bne.n	8004e6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	08da      	lsrs	r2, r3, #3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3208      	adds	r2, #8
 8004e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	220f      	movs	r2, #15
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	43db      	mvns	r3, r3
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4013      	ands	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	08da      	lsrs	r2, r3, #3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3208      	adds	r2, #8
 8004e68:	6939      	ldr	r1, [r7, #16]
 8004e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	2203      	movs	r2, #3
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	43db      	mvns	r3, r3
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4013      	ands	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f003 0203 	and.w	r2, r3, #3
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 80a0 	beq.w	8004ff0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eb0:	4b58      	ldr	r3, [pc, #352]	; (8005014 <HAL_GPIO_Init+0x2d8>)
 8004eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb4:	4a57      	ldr	r2, [pc, #348]	; (8005014 <HAL_GPIO_Init+0x2d8>)
 8004eb6:	f043 0301 	orr.w	r3, r3, #1
 8004eba:	6613      	str	r3, [r2, #96]	; 0x60
 8004ebc:	4b55      	ldr	r3, [pc, #340]	; (8005014 <HAL_GPIO_Init+0x2d8>)
 8004ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	60bb      	str	r3, [r7, #8]
 8004ec6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004ec8:	4a53      	ldr	r2, [pc, #332]	; (8005018 <HAL_GPIO_Init+0x2dc>)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	089b      	lsrs	r3, r3, #2
 8004ece:	3302      	adds	r3, #2
 8004ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f003 0303 	and.w	r3, r3, #3
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	220f      	movs	r2, #15
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ef2:	d019      	beq.n	8004f28 <HAL_GPIO_Init+0x1ec>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a49      	ldr	r2, [pc, #292]	; (800501c <HAL_GPIO_Init+0x2e0>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d013      	beq.n	8004f24 <HAL_GPIO_Init+0x1e8>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a48      	ldr	r2, [pc, #288]	; (8005020 <HAL_GPIO_Init+0x2e4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00d      	beq.n	8004f20 <HAL_GPIO_Init+0x1e4>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a47      	ldr	r2, [pc, #284]	; (8005024 <HAL_GPIO_Init+0x2e8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d007      	beq.n	8004f1c <HAL_GPIO_Init+0x1e0>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a46      	ldr	r2, [pc, #280]	; (8005028 <HAL_GPIO_Init+0x2ec>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d101      	bne.n	8004f18 <HAL_GPIO_Init+0x1dc>
 8004f14:	2304      	movs	r3, #4
 8004f16:	e008      	b.n	8004f2a <HAL_GPIO_Init+0x1ee>
 8004f18:	2307      	movs	r3, #7
 8004f1a:	e006      	b.n	8004f2a <HAL_GPIO_Init+0x1ee>
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e004      	b.n	8004f2a <HAL_GPIO_Init+0x1ee>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e002      	b.n	8004f2a <HAL_GPIO_Init+0x1ee>
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <HAL_GPIO_Init+0x1ee>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	f002 0203 	and.w	r2, r2, #3
 8004f30:	0092      	lsls	r2, r2, #2
 8004f32:	4093      	lsls	r3, r2
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f3a:	4937      	ldr	r1, [pc, #220]	; (8005018 <HAL_GPIO_Init+0x2dc>)
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	089b      	lsrs	r3, r3, #2
 8004f40:	3302      	adds	r3, #2
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f48:	4b38      	ldr	r3, [pc, #224]	; (800502c <HAL_GPIO_Init+0x2f0>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	43db      	mvns	r3, r3
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4013      	ands	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f6c:	4a2f      	ldr	r2, [pc, #188]	; (800502c <HAL_GPIO_Init+0x2f0>)
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f72:	4b2e      	ldr	r3, [pc, #184]	; (800502c <HAL_GPIO_Init+0x2f0>)
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f96:	4a25      	ldr	r2, [pc, #148]	; (800502c <HAL_GPIO_Init+0x2f0>)
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004f9c:	4b23      	ldr	r3, [pc, #140]	; (800502c <HAL_GPIO_Init+0x2f0>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004fc0:	4a1a      	ldr	r2, [pc, #104]	; (800502c <HAL_GPIO_Init+0x2f0>)
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004fc6:	4b19      	ldr	r3, [pc, #100]	; (800502c <HAL_GPIO_Init+0x2f0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004fea:	4a10      	ldr	r2, [pc, #64]	; (800502c <HAL_GPIO_Init+0x2f0>)
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	f47f aea3 	bne.w	8004d4c <HAL_GPIO_Init+0x10>
  }
}
 8005006:	bf00      	nop
 8005008:	bf00      	nop
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	40021000 	.word	0x40021000
 8005018:	40010000 	.word	0x40010000
 800501c:	48000400 	.word	0x48000400
 8005020:	48000800 	.word	0x48000800
 8005024:	48000c00 	.word	0x48000c00
 8005028:	48001000 	.word	0x48001000
 800502c:	40010400 	.word	0x40010400

08005030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	887b      	ldrh	r3, [r7, #2]
 8005042:	4013      	ands	r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005048:	2301      	movs	r3, #1
 800504a:	73fb      	strb	r3, [r7, #15]
 800504c:	e001      	b.n	8005052 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800504e:	2300      	movs	r3, #0
 8005050:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005052:	7bfb      	ldrb	r3, [r7, #15]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	807b      	strh	r3, [r7, #2]
 800506c:	4613      	mov	r3, r2
 800506e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005070:	787b      	ldrb	r3, [r7, #1]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005076:	887a      	ldrh	r2, [r7, #2]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800507c:	e002      	b.n	8005084 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800507e:	887a      	ldrh	r2, [r7, #2]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	460b      	mov	r3, r1
 800509a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050a2:	887a      	ldrh	r2, [r7, #2]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4013      	ands	r3, r2
 80050a8:	041a      	lsls	r2, r3, #16
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	43d9      	mvns	r1, r3
 80050ae:	887b      	ldrh	r3, [r7, #2]
 80050b0:	400b      	ands	r3, r1
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	619a      	str	r2, [r3, #24]
}
 80050b8:	bf00      	nop
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80050c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050c6:	b08b      	sub	sp, #44	; 0x2c
 80050c8:	af06      	add	r7, sp, #24
 80050ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e109      	b.n	80052ea <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d106      	bne.n	80050f0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f008 f928 	bl	800d340 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2203      	movs	r2, #3
 80050f4:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f003 ffab 	bl	8009058 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	603b      	str	r3, [r7, #0]
 8005108:	687e      	ldr	r6, [r7, #4]
 800510a:	466d      	mov	r5, sp
 800510c:	f106 0410 	add.w	r4, r6, #16
 8005110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005114:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005118:	e885 0003 	stmia.w	r5, {r0, r1}
 800511c:	1d33      	adds	r3, r6, #4
 800511e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005120:	6838      	ldr	r0, [r7, #0]
 8005122:	f003 ff71 	bl	8009008 <USB_CoreInit>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e0d8      	b.n	80052ea <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2100      	movs	r1, #0
 800513e:	4618      	mov	r0, r3
 8005140:	f003 ffa5 	bl	800908e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005144:	2300      	movs	r3, #0
 8005146:	73fb      	strb	r3, [r7, #15]
 8005148:	e04d      	b.n	80051e6 <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800514a:	7bfb      	ldrb	r3, [r7, #15]
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	440b      	add	r3, r1
 800515a:	3305      	adds	r3, #5
 800515c:	2201      	movs	r2, #1
 800515e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	4613      	mov	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	440b      	add	r3, r1
 8005170:	3304      	adds	r3, #4
 8005172:	7bfa      	ldrb	r2, [r7, #15]
 8005174:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005176:	7bfa      	ldrb	r2, [r7, #15]
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	b298      	uxth	r0, r3
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	4613      	mov	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	440b      	add	r3, r1
 8005188:	333a      	adds	r3, #58	; 0x3a
 800518a:	4602      	mov	r2, r0
 800518c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800518e:	7bfb      	ldrb	r3, [r7, #15]
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	4613      	mov	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	440b      	add	r3, r1
 800519e:	3307      	adds	r3, #7
 80051a0:	2200      	movs	r2, #0
 80051a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80051a4:	7bfa      	ldrb	r2, [r7, #15]
 80051a6:	6879      	ldr	r1, [r7, #4]
 80051a8:	4613      	mov	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	440b      	add	r3, r1
 80051b2:	333c      	adds	r3, #60	; 0x3c
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80051b8:	7bfa      	ldrb	r2, [r7, #15]
 80051ba:	6879      	ldr	r1, [r7, #4]
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	440b      	add	r3, r1
 80051c6:	3340      	adds	r3, #64	; 0x40
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051cc:	7bfa      	ldrb	r2, [r7, #15]
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	440b      	add	r3, r1
 80051da:	3344      	adds	r3, #68	; 0x44
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	3301      	adds	r3, #1
 80051e4:	73fb      	strb	r3, [r7, #15]
 80051e6:	7bfa      	ldrb	r2, [r7, #15]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d3ac      	bcc.n	800514a <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051f0:	2300      	movs	r3, #0
 80051f2:	73fb      	strb	r3, [r7, #15]
 80051f4:	e044      	b.n	8005280 <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80051f6:	7bfa      	ldrb	r2, [r7, #15]
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	4613      	mov	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	440b      	add	r3, r1
 8005204:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8005208:	2200      	movs	r2, #0
 800520a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800520c:	7bfa      	ldrb	r2, [r7, #15]
 800520e:	6879      	ldr	r1, [r7, #4]
 8005210:	4613      	mov	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	440b      	add	r3, r1
 800521a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800521e:	7bfa      	ldrb	r2, [r7, #15]
 8005220:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005222:	7bfa      	ldrb	r2, [r7, #15]
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	440b      	add	r3, r1
 8005230:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8005234:	2200      	movs	r2, #0
 8005236:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005238:	7bfa      	ldrb	r2, [r7, #15]
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	440b      	add	r3, r1
 8005246:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800524e:	7bfa      	ldrb	r2, [r7, #15]
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	440b      	add	r3, r1
 800525c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005264:	7bfa      	ldrb	r2, [r7, #15]
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	4613      	mov	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	440b      	add	r3, r1
 8005272:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800527a:	7bfb      	ldrb	r3, [r7, #15]
 800527c:	3301      	adds	r3, #1
 800527e:	73fb      	strb	r3, [r7, #15]
 8005280:	7bfa      	ldrb	r2, [r7, #15]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	429a      	cmp	r2, r3
 8005288:	d3b5      	bcc.n	80051f6 <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	603b      	str	r3, [r7, #0]
 8005290:	687e      	ldr	r6, [r7, #4]
 8005292:	466d      	mov	r5, sp
 8005294:	f106 0410 	add.w	r4, r6, #16
 8005298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800529a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800529c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80052a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80052a4:	1d33      	adds	r3, r6, #4
 80052a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052a8:	6838      	ldr	r0, [r7, #0]
 80052aa:	f003 fefd 	bl	80090a8 <USB_DevInit>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e014      	b.n	80052ea <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d102      	bne.n	80052de <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f001 fc55 	bl	8006b88 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f006 f909 	bl	800b4fa <USB_DevDisconnect>

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_PCD_Start+0x16>
 8005304:	2302      	movs	r3, #2
 8005306:	e012      	b.n	800532e <HAL_PCD_Start+0x3c>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4618      	mov	r0, r3
 8005316:	f003 fe88 	bl	800902a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f006 f8d4 	bl	800b4cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f006 f8ee 	bl	800b524 <USB_ReadInterrupts>
 8005348:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fb3e 	bl	80059d6 <PCD_EP_ISR_Handler>

    return;
 800535a:	e110      	b.n	800557e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005362:	2b00      	cmp	r3, #0
 8005364:	d013      	beq.n	800538e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800536e:	b29a      	uxth	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005378:	b292      	uxth	r2, r2
 800537a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f008 f86f 	bl	800d462 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005384:	2100      	movs	r1, #0
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f8fc 	bl	8005584 <HAL_PCD_SetAddress>

    return;
 800538c:	e0f7      	b.n	800557e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00c      	beq.n	80053b2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053aa:	b292      	uxth	r2, r2
 80053ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80053b0:	e0e5      	b.n	800557e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00c      	beq.n	80053d6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053ce:	b292      	uxth	r2, r2
 80053d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80053d4:	e0d3      	b.n	800557e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d034      	beq.n	800544a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0204 	bic.w	r2, r2, #4
 80053f2:	b292      	uxth	r2, r2
 80053f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005400:	b29a      	uxth	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0208 	bic.w	r2, r2, #8
 800540a:	b292      	uxth	r2, r2
 800540c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8005416:	2b01      	cmp	r3, #1
 8005418:	d107      	bne.n	800542a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005422:	2100      	movs	r1, #0
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f008 facd 	bl	800d9c4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f008 f852 	bl	800d4d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005438:	b29a      	uxth	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005442:	b292      	uxth	r2, r2
 8005444:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005448:	e099      	b.n	800557e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005450:	2b00      	cmp	r3, #0
 8005452:	d027      	beq.n	80054a4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800545c:	b29a      	uxth	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0208 	orr.w	r2, r2, #8
 8005466:	b292      	uxth	r2, r2
 8005468:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005474:	b29a      	uxth	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800547e:	b292      	uxth	r2, r2
 8005480:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800548c:	b29a      	uxth	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0204 	orr.w	r2, r2, #4
 8005496:	b292      	uxth	r2, r2
 8005498:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f007 ffff 	bl	800d4a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80054a2:	e06c      	b.n	800557e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d040      	beq.n	8005530 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054c0:	b292      	uxth	r2, r2
 80054c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d12b      	bne.n	8005528 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054d8:	b29a      	uxth	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0204 	orr.w	r2, r2, #4
 80054e2:	b292      	uxth	r2, r2
 80054e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0208 	orr.w	r2, r2, #8
 80054fa:	b292      	uxth	r2, r2
 80054fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005510:	b29b      	uxth	r3, r3
 8005512:	089b      	lsrs	r3, r3, #2
 8005514:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800551e:	2101      	movs	r1, #1
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f008 fa4f 	bl	800d9c4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005526:	e02a      	b.n	800557e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f007 ffb9 	bl	800d4a0 <HAL_PCD_SuspendCallback>
    return;
 800552e:	e026      	b.n	800557e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00f      	beq.n	800555a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005542:	b29a      	uxth	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800554c:	b292      	uxth	r2, r2
 800554e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f007 ff77 	bl	800d446 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005558:	e011      	b.n	800557e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00c      	beq.n	800557e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800556c:	b29a      	uxth	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005576:	b292      	uxth	r2, r2
 8005578:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800557c:	bf00      	nop
  }
}
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_PCD_SetAddress+0x1a>
 800559a:	2302      	movs	r3, #2
 800559c:	e013      	b.n	80055c6 <HAL_PCD_SetAddress+0x42>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	78fa      	ldrb	r2, [r7, #3]
 80055aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	78fa      	ldrb	r2, [r7, #3]
 80055b4:	4611      	mov	r1, r2
 80055b6:	4618      	mov	r0, r3
 80055b8:	f005 ff74 	bl	800b4a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b084      	sub	sp, #16
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	4608      	mov	r0, r1
 80055d8:	4611      	mov	r1, r2
 80055da:	461a      	mov	r2, r3
 80055dc:	4603      	mov	r3, r0
 80055de:	70fb      	strb	r3, [r7, #3]
 80055e0:	460b      	mov	r3, r1
 80055e2:	803b      	strh	r3, [r7, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	da0f      	bge.n	8005614 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055f4:	78fb      	ldrb	r3, [r7, #3]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	4413      	add	r3, r2
 8005608:	3304      	adds	r3, #4
 800560a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2201      	movs	r2, #1
 8005610:	705a      	strb	r2, [r3, #1]
 8005612:	e00f      	b.n	8005634 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005614:	78fb      	ldrb	r3, [r7, #3]
 8005616:	f003 0207 	and.w	r2, r3, #7
 800561a:	4613      	mov	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	4413      	add	r3, r2
 800562a:	3304      	adds	r3, #4
 800562c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005634:	78fb      	ldrb	r3, [r7, #3]
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	b2da      	uxtb	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005640:	883a      	ldrh	r2, [r7, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	78ba      	ldrb	r2, [r7, #2]
 800564a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	785b      	ldrb	r3, [r3, #1]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d004      	beq.n	800565e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	b29a      	uxth	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800565e:	78bb      	ldrb	r3, [r7, #2]
 8005660:	2b02      	cmp	r3, #2
 8005662:	d102      	bne.n	800566a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_PCD_EP_Open+0xaa>
 8005674:	2302      	movs	r3, #2
 8005676:	e00e      	b.n	8005696 <HAL_PCD_EP_Open+0xc8>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68f9      	ldr	r1, [r7, #12]
 8005686:	4618      	mov	r0, r3
 8005688:	f003 fd30 	bl	80090ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8005694:	7afb      	ldrb	r3, [r7, #11]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	460b      	mov	r3, r1
 80056a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	da0f      	bge.n	80056d2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056b2:	78fb      	ldrb	r3, [r7, #3]
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	4613      	mov	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	4413      	add	r3, r2
 80056c6:	3304      	adds	r3, #4
 80056c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2201      	movs	r2, #1
 80056ce:	705a      	strb	r2, [r3, #1]
 80056d0:	e00f      	b.n	80056f2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056d2:	78fb      	ldrb	r3, [r7, #3]
 80056d4:	f003 0207 	and.w	r2, r3, #7
 80056d8:	4613      	mov	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	4413      	add	r3, r2
 80056e8:	3304      	adds	r3, #4
 80056ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_PCD_EP_Close+0x6e>
 8005708:	2302      	movs	r3, #2
 800570a:	e00e      	b.n	800572a <HAL_PCD_EP_Close+0x8c>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68f9      	ldr	r1, [r7, #12]
 800571a:	4618      	mov	r0, r3
 800571c:	f004 f8a0 	bl	8009860 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b086      	sub	sp, #24
 8005736:	af00      	add	r7, sp, #0
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	607a      	str	r2, [r7, #4]
 800573c:	603b      	str	r3, [r7, #0]
 800573e:	460b      	mov	r3, r1
 8005740:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005742:	7afb      	ldrb	r3, [r7, #11]
 8005744:	f003 0207 	and.w	r2, r3, #7
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4413      	add	r3, r2
 8005758:	3304      	adds	r3, #4
 800575a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2200      	movs	r2, #0
 800576c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2200      	movs	r2, #0
 8005772:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005774:	7afb      	ldrb	r3, [r7, #11]
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	b2da      	uxtb	r2, r3
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005780:	7afb      	ldrb	r3, [r7, #11]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6979      	ldr	r1, [r7, #20]
 8005790:	4618      	mov	r0, r3
 8005792:	f004 fa52 	bl	8009c3a <USB_EPStartXfer>
 8005796:	e005      	b.n	80057a4 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6979      	ldr	r1, [r7, #20]
 800579e:	4618      	mov	r0, r3
 80057a0:	f004 fa4b 	bl	8009c3a <USB_EPStartXfer>
  }

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	460b      	mov	r3, r1
 80057b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80057ba:	78fb      	ldrb	r3, [r7, #3]
 80057bc:	f003 0207 	and.w	r2, r3, #7
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	440b      	add	r3, r1
 80057cc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80057d0:	681b      	ldr	r3, [r3, #0]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b086      	sub	sp, #24
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
 80057ea:	460b      	mov	r3, r1
 80057ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057ee:	7afb      	ldrb	r3, [r7, #11]
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	4613      	mov	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4413      	add	r3, r2
 80057fc:	00db      	lsls	r3, r3, #3
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4413      	add	r3, r2
 8005802:	3304      	adds	r3, #4
 8005804:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2200      	movs	r2, #0
 8005824:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2201      	movs	r2, #1
 800582a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800582c:	7afb      	ldrb	r3, [r7, #11]
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	b2da      	uxtb	r2, r3
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005838:	7afb      	ldrb	r3, [r7, #11]
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6979      	ldr	r1, [r7, #20]
 8005848:	4618      	mov	r0, r3
 800584a:	f004 f9f6 	bl	8009c3a <USB_EPStartXfer>
 800584e:	e005      	b.n	800585c <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6979      	ldr	r1, [r7, #20]
 8005856:	4618      	mov	r0, r3
 8005858:	f004 f9ef 	bl	8009c3a <USB_EPStartXfer>
  }

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	460b      	mov	r3, r1
 8005870:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	f003 0207 	and.w	r2, r3, #7
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	429a      	cmp	r2, r3
 800587e:	d901      	bls.n	8005884 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e04e      	b.n	8005922 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005884:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005888:	2b00      	cmp	r3, #0
 800588a:	da0f      	bge.n	80058ac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800588c:	78fb      	ldrb	r3, [r7, #3]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	4413      	add	r3, r2
 80058a0:	3304      	adds	r3, #4
 80058a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2201      	movs	r2, #1
 80058a8:	705a      	strb	r2, [r3, #1]
 80058aa:	e00d      	b.n	80058c8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80058ac:	78fa      	ldrb	r2, [r7, #3]
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	4413      	add	r3, r2
 80058be:	3304      	adds	r3, #4
 80058c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2201      	movs	r2, #1
 80058cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058ce:	78fb      	ldrb	r3, [r7, #3]
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d101      	bne.n	80058e8 <HAL_PCD_EP_SetStall+0x82>
 80058e4:	2302      	movs	r3, #2
 80058e6:	e01c      	b.n	8005922 <HAL_PCD_EP_SetStall+0xbc>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68f9      	ldr	r1, [r7, #12]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f005 fcd5 	bl	800b2a6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058fc:	78fb      	ldrb	r3, [r7, #3]
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	2b00      	cmp	r3, #0
 8005904:	d108      	bne.n	8005918 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8005910:	4619      	mov	r1, r3
 8005912:	4610      	mov	r0, r2
 8005914:	f005 fe16 	bl	800b544 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	460b      	mov	r3, r1
 8005934:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005936:	78fb      	ldrb	r3, [r7, #3]
 8005938:	f003 020f 	and.w	r2, r3, #15
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	429a      	cmp	r2, r3
 8005942:	d901      	bls.n	8005948 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e042      	b.n	80059ce <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005948:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800594c:	2b00      	cmp	r3, #0
 800594e:	da0f      	bge.n	8005970 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005950:	78fb      	ldrb	r3, [r7, #3]
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	4413      	add	r3, r2
 8005964:	3304      	adds	r3, #4
 8005966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2201      	movs	r2, #1
 800596c:	705a      	strb	r2, [r3, #1]
 800596e:	e00f      	b.n	8005990 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005970:	78fb      	ldrb	r3, [r7, #3]
 8005972:	f003 0207 	and.w	r2, r3, #7
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	4413      	add	r3, r2
 8005986:	3304      	adds	r3, #4
 8005988:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	b2da      	uxtb	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_PCD_EP_ClrStall+0x86>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e00e      	b.n	80059ce <HAL_PCD_EP_ClrStall+0xa4>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68f9      	ldr	r1, [r7, #12]
 80059be:	4618      	mov	r0, r3
 80059c0:	f005 fcc2 	bl	800b348 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b096      	sub	sp, #88	; 0x58
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80059de:	e3a9      	b.n	8006134 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80059e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80059ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	f003 030f 	and.w	r3, r3, #15
 80059f6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80059fa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f040 8169 	bne.w	8005cd6 <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005a04:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a08:	f003 0310 	and.w	r3, r3, #16
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d150      	bne.n	8005ab2 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a20:	81fb      	strh	r3, [r7, #14]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	89fb      	ldrh	r3, [r7, #14]
 8005a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	332c      	adds	r3, #44	; 0x2c
 8005a38:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	461a      	mov	r2, r3
 8005a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	4413      	add	r3, r2
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6812      	ldr	r2, [r2, #0]
 8005a52:	4413      	add	r3, r2
 8005a54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a60:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a64:	695a      	ldr	r2, [r3, #20]
 8005a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	441a      	add	r2, r3
 8005a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a6e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005a70:	2100      	movs	r1, #0
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f007 fccd 	bl	800d412 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 8357 	beq.w	8006134 <PCD_EP_ISR_Handler+0x75e>
 8005a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f040 8352 	bne.w	8006134 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	b292      	uxth	r2, r2
 8005aa4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005ab0:	e340      	b.n	8006134 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8005ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005ac4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d032      	beq.n	8005b36 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	461a      	mov	r2, r3
 8005adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	4413      	add	r3, r2
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6812      	ldr	r2, [r2, #0]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6818      	ldr	r0, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8005b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b04:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b08:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f005 fd68 	bl	800b5e0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	823b      	strh	r3, [r7, #16]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	8a3a      	ldrh	r2, [r7, #16]
 8005b26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b2a:	b292      	uxth	r2, r2
 8005b2c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f007 fc42 	bl	800d3b8 <HAL_PCD_SetupStageCallback>
 8005b34:	e2fe      	b.n	8006134 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005b36:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f280 82fa 	bge.w	8006134 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	83fb      	strh	r3, [r7, #30]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	8bfa      	ldrh	r2, [r7, #30]
 8005b56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b5a:	b292      	uxth	r2, r2
 8005b5c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	461a      	mov	r2, r3
 8005b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	4413      	add	r3, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	4413      	add	r3, r2
 8005b78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b84:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d019      	beq.n	8005bc2 <PCD_EP_ISR_Handler+0x1ec>
 8005b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d015      	beq.n	8005bc2 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6818      	ldr	r0, [r3, #0]
 8005b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b9c:	6959      	ldr	r1, [r3, #20]
 8005b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f005 fd1a 	bl	800b5e0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bae:	695a      	ldr	r2, [r3, #20]
 8005bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	441a      	add	r2, r3
 8005bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005bba:	2100      	movs	r1, #0
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f007 fc0d 	bl	800d3dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005bcc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f040 82ad 	bne.w	8006134 <PCD_EP_ISR_Handler+0x75e>
 8005bda:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005bde:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005be2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005be6:	f000 82a5 	beq.w	8006134 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	61bb      	str	r3, [r7, #24]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	4413      	add	r3, r2
 8005c00:	61bb      	str	r3, [r7, #24]
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c08:	617b      	str	r3, [r7, #20]
 8005c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	2b3e      	cmp	r3, #62	; 0x3e
 8005c10:	d918      	bls.n	8005c44 <PCD_EP_ISR_Handler+0x26e>
 8005c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	647b      	str	r3, [r7, #68]	; 0x44
 8005c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f003 031f 	and.w	r3, r3, #31
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d102      	bne.n	8005c2c <PCD_EP_ISR_Handler+0x256>
 8005c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	029b      	lsls	r3, r3, #10
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	801a      	strh	r2, [r3, #0]
 8005c42:	e029      	b.n	8005c98 <PCD_EP_ISR_Handler+0x2c2>
 8005c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d112      	bne.n	8005c72 <PCD_EP_ISR_Handler+0x29c>
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	801a      	strh	r2, [r3, #0]
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	801a      	strh	r2, [r3, #0]
 8005c70:	e012      	b.n	8005c98 <PCD_EP_ISR_Handler+0x2c2>
 8005c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	085b      	lsrs	r3, r3, #1
 8005c78:	647b      	str	r3, [r7, #68]	; 0x44
 8005c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <PCD_EP_ISR_Handler+0x2b6>
 8005c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c88:	3301      	adds	r3, #1
 8005c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	029b      	lsls	r3, r3, #10
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca8:	827b      	strh	r3, [r7, #18]
 8005caa:	8a7b      	ldrh	r3, [r7, #18]
 8005cac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cb0:	827b      	strh	r3, [r7, #18]
 8005cb2:	8a7b      	ldrh	r3, [r7, #18]
 8005cb4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cb8:	827b      	strh	r3, [r7, #18]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	8a7b      	ldrh	r3, [r7, #18]
 8005cc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	8013      	strh	r3, [r2, #0]
 8005cd4:	e22e      	b.n	8006134 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005cea:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f280 80f7 	bge.w	8005ee2 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005d22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d26:	b292      	uxth	r2, r2
 8005d28:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005d2a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8005d2e:	4613      	mov	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	00db      	lsls	r3, r3, #3
 8005d36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	3304      	adds	r3, #4
 8005d40:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d44:	7b1b      	ldrb	r3, [r3, #12]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d123      	bne.n	8005d92 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	4413      	add	r3, r2
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6812      	ldr	r2, [r2, #0]
 8005d62:	4413      	add	r3, r2
 8005d64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d6e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8005d72:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 808e 	beq.w	8005e98 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6818      	ldr	r0, [r3, #0]
 8005d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d82:	6959      	ldr	r1, [r3, #20]
 8005d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d86:	88da      	ldrh	r2, [r3, #6]
 8005d88:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005d8c:	f005 fc28 	bl	800b5e0 <USB_ReadPMA>
 8005d90:	e082      	b.n	8005e98 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d94:	78db      	ldrb	r3, [r3, #3]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d10a      	bne.n	8005db0 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005d9a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005d9e:	461a      	mov	r2, r3
 8005da0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f9d4 	bl	8006150 <HAL_PCD_EP_DB_Receive>
 8005da8:	4603      	mov	r3, r0
 8005daa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005dae:	e073      	b.n	8005e98 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	461a      	mov	r2, r3
 8005db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	441a      	add	r2, r3
 8005ddc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d022      	beq.n	8005e54 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	461a      	mov	r2, r3
 8005e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	4413      	add	r3, r2
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6812      	ldr	r2, [r2, #0]
 8005e26:	4413      	add	r3, r2
 8005e28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e32:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005e36:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d02c      	beq.n	8005e98 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6818      	ldr	r0, [r3, #0]
 8005e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e44:	6959      	ldr	r1, [r3, #20]
 8005e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e48:	891a      	ldrh	r2, [r3, #8]
 8005e4a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e4e:	f005 fbc7 	bl	800b5e0 <USB_ReadPMA>
 8005e52:	e021      	b.n	8005e98 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	461a      	mov	r2, r3
 8005e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	4413      	add	r3, r2
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6812      	ldr	r2, [r2, #0]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e78:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005e7c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d009      	beq.n	8005e98 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6818      	ldr	r0, [r3, #0]
 8005e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e8a:	6959      	ldr	r1, [r3, #20]
 8005e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e8e:	895a      	ldrh	r2, [r3, #10]
 8005e90:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e94:	f005 fba4 	bl	800b5e0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e9a:	69da      	ldr	r2, [r3, #28]
 8005e9c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ea0:	441a      	add	r2, r3
 8005ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea8:	695a      	ldr	r2, [r3, #20]
 8005eaa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005eae:	441a      	add	r2, r3
 8005eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <PCD_EP_ISR_Handler+0x4f2>
 8005ebc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d206      	bcs.n	8005ed6 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f007 fa84 	bl	800d3dc <HAL_PCD_DataOutStageCallback>
 8005ed4:	e005      	b.n	8005ee2 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005edc:	4618      	mov	r0, r3
 8005ede:	f003 feac 	bl	8009c3a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005ee2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 8122 	beq.w	8006134 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8005ef0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	4413      	add	r3, r2
 8005f02:	3304      	adds	r3, #4
 8005f04:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	441a      	add	r2, r3
 8005f32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f44:	78db      	ldrb	r3, [r3, #3]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	f040 80a2 	bne.w	8006090 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8005f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f4e:	2200      	movs	r2, #0
 8005f50:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f54:	7b1b      	ldrb	r3, [r3, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 8093 	beq.w	8006082 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005f5c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d046      	beq.n	8005ff6 <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f6a:	785b      	ldrb	r3, [r3, #1]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d126      	bne.n	8005fbe <PCD_EP_ISR_Handler+0x5e8>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	461a      	mov	r2, r3
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	4413      	add	r3, r2
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
 8005f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	00da      	lsls	r2, r3, #3
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	4413      	add	r3, r2
 8005f92:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f96:	623b      	str	r3, [r7, #32]
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	801a      	strh	r2, [r3, #0]
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	801a      	strh	r2, [r3, #0]
 8005fbc:	e061      	b.n	8006082 <PCD_EP_ISR_Handler+0x6ac>
 8005fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc0:	785b      	ldrb	r3, [r3, #1]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d15d      	bne.n	8006082 <PCD_EP_ISR_Handler+0x6ac>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fda:	4413      	add	r3, r2
 8005fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	00da      	lsls	r2, r3, #3
 8005fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	801a      	strh	r2, [r3, #0]
 8005ff4:	e045      	b.n	8006082 <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ffe:	785b      	ldrb	r3, [r3, #1]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d126      	bne.n	8006052 <PCD_EP_ISR_Handler+0x67c>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	637b      	str	r3, [r7, #52]	; 0x34
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006012:	b29b      	uxth	r3, r3
 8006014:	461a      	mov	r2, r3
 8006016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006018:	4413      	add	r3, r2
 800601a:	637b      	str	r3, [r7, #52]	; 0x34
 800601c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	00da      	lsls	r2, r3, #3
 8006022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006024:	4413      	add	r3, r2
 8006026:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800602a:	633b      	str	r3, [r7, #48]	; 0x30
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	b29b      	uxth	r3, r3
 8006032:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006036:	b29a      	uxth	r2, r3
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	801a      	strh	r2, [r3, #0]
 800603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800604a:	b29a      	uxth	r2, r3
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	801a      	strh	r2, [r3, #0]
 8006050:	e017      	b.n	8006082 <PCD_EP_ISR_Handler+0x6ac>
 8006052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006054:	785b      	ldrb	r3, [r3, #1]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d113      	bne.n	8006082 <PCD_EP_ISR_Handler+0x6ac>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006062:	b29b      	uxth	r3, r3
 8006064:	461a      	mov	r2, r3
 8006066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006068:	4413      	add	r3, r2
 800606a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800606c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	00da      	lsls	r2, r3, #3
 8006072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006074:	4413      	add	r3, r2
 8006076:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800607a:	63bb      	str	r3, [r7, #56]	; 0x38
 800607c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607e:	2200      	movs	r2, #0
 8006080:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f007 f9c2 	bl	800d412 <HAL_PCD_DataInStageCallback>
 800608e:	e051      	b.n	8006134 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006090:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006098:	2b00      	cmp	r3, #0
 800609a:	d144      	bne.n	8006126 <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	461a      	mov	r2, r3
 80060a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	4413      	add	r3, r2
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	6812      	ldr	r2, [r2, #0]
 80060b4:	4413      	add	r3, r2
 80060b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060c0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80060c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060c6:	699a      	ldr	r2, [r3, #24]
 80060c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d907      	bls.n	80060e0 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 80060d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d2:	699a      	ldr	r2, [r3, #24]
 80060d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060d8:	1ad2      	subs	r2, r2, r3
 80060da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060dc:	619a      	str	r2, [r3, #24]
 80060de:	e002      	b.n	80060e6 <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 80060e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060e2:	2200      	movs	r2, #0
 80060e4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80060e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d106      	bne.n	80060fc <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80060ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	4619      	mov	r1, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f007 f98c 	bl	800d412 <HAL_PCD_DataInStageCallback>
 80060fa:	e01b      	b.n	8006134 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80060fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060fe:	695a      	ldr	r2, [r3, #20]
 8006100:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006104:	441a      	add	r2, r3
 8006106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006108:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800610a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800610c:	69da      	ldr	r2, [r3, #28]
 800610e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006112:	441a      	add	r2, r3
 8006114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006116:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800611e:	4618      	mov	r0, r3
 8006120:	f003 fd8b 	bl	8009c3a <USB_EPStartXfer>
 8006124:	e006      	b.n	8006134 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006126:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800612a:	461a      	mov	r2, r3
 800612c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f917 	bl	8006362 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800613c:	b29b      	uxth	r3, r3
 800613e:	b21b      	sxth	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	f6ff ac4d 	blt.w	80059e0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3758      	adds	r7, #88	; 0x58
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	4613      	mov	r3, r2
 800615c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800615e:	88fb      	ldrh	r3, [r7, #6]
 8006160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d07c      	beq.n	8006262 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006170:	b29b      	uxth	r3, r3
 8006172:	461a      	mov	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	4413      	add	r3, r2
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	4413      	add	r3, r2
 8006182:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800618c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	699a      	ldr	r2, [r3, #24]
 8006192:	8b7b      	ldrh	r3, [r7, #26]
 8006194:	429a      	cmp	r2, r3
 8006196:	d306      	bcc.n	80061a6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	699a      	ldr	r2, [r3, #24]
 800619c:	8b7b      	ldrh	r3, [r7, #26]
 800619e:	1ad2      	subs	r2, r2, r3
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	619a      	str	r2, [r3, #24]
 80061a4:	e002      	b.n	80061ac <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2200      	movs	r2, #0
 80061aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d123      	bne.n	80061fc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	461a      	mov	r2, r3
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ce:	833b      	strh	r3, [r7, #24]
 80061d0:	8b3b      	ldrh	r3, [r7, #24]
 80061d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061d6:	833b      	strh	r3, [r7, #24]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	441a      	add	r2, r3
 80061e6:	8b3b      	ldrh	r3, [r7, #24]
 80061e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80061fc:	88fb      	ldrh	r3, [r7, #6]
 80061fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006202:	2b00      	cmp	r3, #0
 8006204:	d01f      	beq.n	8006246 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	461a      	mov	r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	b29b      	uxth	r3, r3
 8006218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800621c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006220:	82fb      	strh	r3, [r7, #22]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	441a      	add	r2, r3
 8006230:	8afb      	ldrh	r3, [r7, #22]
 8006232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800623a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800623e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006242:	b29b      	uxth	r3, r3
 8006244:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006246:	8b7b      	ldrh	r3, [r7, #26]
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 8085 	beq.w	8006358 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	6959      	ldr	r1, [r3, #20]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	891a      	ldrh	r2, [r3, #8]
 800625a:	8b7b      	ldrh	r3, [r7, #26]
 800625c:	f005 f9c0 	bl	800b5e0 <USB_ReadPMA>
 8006260:	e07a      	b.n	8006358 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800626a:	b29b      	uxth	r3, r3
 800626c:	461a      	mov	r2, r3
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	4413      	add	r3, r2
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	6812      	ldr	r2, [r2, #0]
 800627a:	4413      	add	r3, r2
 800627c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006286:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	699a      	ldr	r2, [r3, #24]
 800628c:	8b7b      	ldrh	r3, [r7, #26]
 800628e:	429a      	cmp	r2, r3
 8006290:	d306      	bcc.n	80062a0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	699a      	ldr	r2, [r3, #24]
 8006296:	8b7b      	ldrh	r3, [r7, #26]
 8006298:	1ad2      	subs	r2, r2, r3
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	619a      	str	r2, [r3, #24]
 800629e:	e002      	b.n	80062a6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2200      	movs	r2, #0
 80062a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d123      	bne.n	80062f6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c8:	83fb      	strh	r3, [r7, #30]
 80062ca:	8bfb      	ldrh	r3, [r7, #30]
 80062cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062d0:	83fb      	strh	r3, [r7, #30]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	441a      	add	r2, r3
 80062e0:	8bfb      	ldrh	r3, [r7, #30]
 80062e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80062f6:	88fb      	ldrh	r3, [r7, #6]
 80062f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d11f      	bne.n	8006340 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	b29b      	uxth	r3, r3
 8006312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631a:	83bb      	strh	r3, [r7, #28]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	441a      	add	r2, r3
 800632a:	8bbb      	ldrh	r3, [r7, #28]
 800632c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006338:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800633c:	b29b      	uxth	r3, r3
 800633e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006340:	8b7b      	ldrh	r3, [r7, #26]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d008      	beq.n	8006358 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6818      	ldr	r0, [r3, #0]
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	6959      	ldr	r1, [r3, #20]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	895a      	ldrh	r2, [r3, #10]
 8006352:	8b7b      	ldrh	r3, [r7, #26]
 8006354:	f005 f944 	bl	800b5e0 <USB_ReadPMA>
    }
  }

  return count;
 8006358:	8b7b      	ldrh	r3, [r7, #26]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3720      	adds	r7, #32
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b0a2      	sub	sp, #136	; 0x88
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	4613      	mov	r3, r2
 800636e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006370:	88fb      	ldrh	r3, [r7, #6]
 8006372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 81c5 	beq.w	8006706 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006384:	b29b      	uxth	r3, r3
 8006386:	461a      	mov	r2, r3
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	00db      	lsls	r3, r3, #3
 800638e:	4413      	add	r3, r2
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	6812      	ldr	r2, [r2, #0]
 8006394:	4413      	add	r3, r2
 8006396:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	699a      	ldr	r2, [r3, #24]
 80063a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d907      	bls.n	80063c0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	699a      	ldr	r2, [r3, #24]
 80063b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80063b8:	1ad2      	subs	r2, r2, r3
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	619a      	str	r2, [r3, #24]
 80063be:	e002      	b.n	80063c6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2200      	movs	r2, #0
 80063c4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f040 80b9 	bne.w	8006542 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	785b      	ldrb	r3, [r3, #1]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d126      	bne.n	8006426 <HAL_PCD_EP_DB_Transmit+0xc4>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	461a      	mov	r2, r3
 80063ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ec:	4413      	add	r3, r2
 80063ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	00da      	lsls	r2, r3, #3
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	4413      	add	r3, r2
 80063fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	b29b      	uxth	r3, r3
 8006406:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800640a:	b29a      	uxth	r2, r3
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	801a      	strh	r2, [r3, #0]
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	b29b      	uxth	r3, r3
 8006416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800641a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800641e:	b29a      	uxth	r2, r3
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	801a      	strh	r2, [r3, #0]
 8006424:	e01a      	b.n	800645c <HAL_PCD_EP_DB_Transmit+0xfa>
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	785b      	ldrb	r3, [r3, #1]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d116      	bne.n	800645c <HAL_PCD_EP_DB_Transmit+0xfa>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	633b      	str	r3, [r7, #48]	; 0x30
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800643c:	b29b      	uxth	r3, r3
 800643e:	461a      	mov	r2, r3
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006442:	4413      	add	r3, r2
 8006444:	633b      	str	r3, [r7, #48]	; 0x30
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	00da      	lsls	r2, r3, #3
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	4413      	add	r3, r2
 8006450:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	2200      	movs	r2, #0
 800645a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	623b      	str	r3, [r7, #32]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	785b      	ldrb	r3, [r3, #1]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d126      	bne.n	80064b8 <HAL_PCD_EP_DB_Transmit+0x156>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	61bb      	str	r3, [r7, #24]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006478:	b29b      	uxth	r3, r3
 800647a:	461a      	mov	r2, r3
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	4413      	add	r3, r2
 8006480:	61bb      	str	r3, [r7, #24]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	00da      	lsls	r2, r3, #3
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	4413      	add	r3, r2
 800648c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	b29b      	uxth	r3, r3
 8006498:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800649c:	b29a      	uxth	r2, r3
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	801a      	strh	r2, [r3, #0]
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	801a      	strh	r2, [r3, #0]
 80064b6:	e017      	b.n	80064e8 <HAL_PCD_EP_DB_Transmit+0x186>
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	785b      	ldrb	r3, [r3, #1]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d113      	bne.n	80064e8 <HAL_PCD_EP_DB_Transmit+0x186>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	461a      	mov	r2, r3
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	4413      	add	r3, r2
 80064d0:	623b      	str	r3, [r7, #32]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	00da      	lsls	r2, r3, #3
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	4413      	add	r3, r2
 80064dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064e0:	61fb      	str	r3, [r7, #28]
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	2200      	movs	r2, #0
 80064e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	4619      	mov	r1, r3
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f006 ff8f 	bl	800d412 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80064f4:	88fb      	ldrh	r3, [r7, #6]
 80064f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 82d2 	beq.w	8006aa4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	461a      	mov	r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651a:	827b      	strh	r3, [r7, #18]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	461a      	mov	r2, r3
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	441a      	add	r2, r3
 800652a:	8a7b      	ldrh	r3, [r7, #18]
 800652c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800653c:	b29b      	uxth	r3, r3
 800653e:	8013      	strh	r3, [r2, #0]
 8006540:	e2b0      	b.n	8006aa4 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006542:	88fb      	ldrh	r3, [r7, #6]
 8006544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d021      	beq.n	8006590 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	461a      	mov	r2, r3
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b29b      	uxth	r3, r3
 800655e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006566:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	461a      	mov	r2, r3
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	441a      	add	r2, r3
 8006578:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800657c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800658c:	b29b      	uxth	r3, r3
 800658e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006596:	2b01      	cmp	r3, #1
 8006598:	f040 8284 	bne.w	8006aa4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	695a      	ldr	r2, [r3, #20]
 80065a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80065a4:	441a      	add	r2, r3
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	69da      	ldr	r2, [r3, #28]
 80065ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80065b2:	441a      	add	r2, r3
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	6a1a      	ldr	r2, [r3, #32]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d309      	bcc.n	80065d8 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6a1a      	ldr	r2, [r3, #32]
 80065ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d0:	1ad2      	subs	r2, r2, r3
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	621a      	str	r2, [r3, #32]
 80065d6:	e015      	b.n	8006604 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d107      	bne.n	80065f0 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80065e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80065e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80065ee:	e009      	b.n	8006604 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2200      	movs	r2, #0
 8006602:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	785b      	ldrb	r3, [r3, #1]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d155      	bne.n	80066b8 <HAL_PCD_EP_DB_Transmit+0x356>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	63bb      	str	r3, [r7, #56]	; 0x38
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800661a:	b29b      	uxth	r3, r3
 800661c:	461a      	mov	r2, r3
 800661e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006620:	4413      	add	r3, r2
 8006622:	63bb      	str	r3, [r7, #56]	; 0x38
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	00da      	lsls	r2, r3, #3
 800662a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662c:	4413      	add	r3, r2
 800662e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006632:	637b      	str	r3, [r7, #52]	; 0x34
 8006634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006636:	2b3e      	cmp	r3, #62	; 0x3e
 8006638:	d916      	bls.n	8006668 <HAL_PCD_EP_DB_Transmit+0x306>
 800663a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800663c:	095b      	lsrs	r3, r3, #5
 800663e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006642:	f003 031f 	and.w	r3, r3, #31
 8006646:	2b00      	cmp	r3, #0
 8006648:	d102      	bne.n	8006650 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800664a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800664c:	3b01      	subs	r3, #1
 800664e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006652:	b29b      	uxth	r3, r3
 8006654:	029b      	lsls	r3, r3, #10
 8006656:	b29b      	uxth	r3, r3
 8006658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800665c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006660:	b29a      	uxth	r2, r3
 8006662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006664:	801a      	strh	r2, [r3, #0]
 8006666:	e043      	b.n	80066f0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8006668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800666a:	2b00      	cmp	r3, #0
 800666c:	d112      	bne.n	8006694 <HAL_PCD_EP_DB_Transmit+0x332>
 800666e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006678:	b29a      	uxth	r2, r3
 800667a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667c:	801a      	strh	r2, [r3, #0]
 800667e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	b29b      	uxth	r3, r3
 8006684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800668c:	b29a      	uxth	r2, r3
 800668e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006690:	801a      	strh	r2, [r3, #0]
 8006692:	e02d      	b.n	80066f0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8006694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006696:	085b      	lsrs	r3, r3, #1
 8006698:	64bb      	str	r3, [r7, #72]	; 0x48
 800669a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <HAL_PCD_EP_DB_Transmit+0x348>
 80066a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a6:	3301      	adds	r3, #1
 80066a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80066aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	029b      	lsls	r3, r3, #10
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b4:	801a      	strh	r2, [r3, #0]
 80066b6:	e01b      	b.n	80066f0 <HAL_PCD_EP_DB_Transmit+0x38e>
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	785b      	ldrb	r3, [r3, #1]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d117      	bne.n	80066f0 <HAL_PCD_EP_DB_Transmit+0x38e>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	643b      	str	r3, [r7, #64]	; 0x40
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d4:	4413      	add	r3, r2
 80066d6:	643b      	str	r3, [r7, #64]	; 0x40
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	00da      	lsls	r2, r3, #3
 80066de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066e0:	4413      	add	r3, r2
 80066e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ee:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6818      	ldr	r0, [r3, #0]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	6959      	ldr	r1, [r3, #20]
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	891a      	ldrh	r2, [r3, #8]
 80066fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f004 ff2c 	bl	800b55c <USB_WritePMA>
 8006704:	e1ce      	b.n	8006aa4 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800670e:	b29b      	uxth	r3, r3
 8006710:	461a      	mov	r2, r3
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	00db      	lsls	r3, r3, #3
 8006718:	4413      	add	r3, r2
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	6812      	ldr	r2, [r2, #0]
 800671e:	4413      	add	r3, r2
 8006720:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800672a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	699a      	ldr	r2, [r3, #24]
 8006732:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006736:	429a      	cmp	r2, r3
 8006738:	d307      	bcc.n	800674a <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	699a      	ldr	r2, [r3, #24]
 800673e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006742:	1ad2      	subs	r2, r2, r3
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	619a      	str	r2, [r3, #24]
 8006748:	e002      	b.n	8006750 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2200      	movs	r2, #0
 800674e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	2b00      	cmp	r3, #0
 8006756:	f040 80c4 	bne.w	80068e2 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	785b      	ldrb	r3, [r3, #1]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d126      	bne.n	80067b0 <HAL_PCD_EP_DB_Transmit+0x44e>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	66bb      	str	r3, [r7, #104]	; 0x68
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006770:	b29b      	uxth	r3, r3
 8006772:	461a      	mov	r2, r3
 8006774:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006776:	4413      	add	r3, r2
 8006778:	66bb      	str	r3, [r7, #104]	; 0x68
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	00da      	lsls	r2, r3, #3
 8006780:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006782:	4413      	add	r3, r2
 8006784:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006788:	667b      	str	r3, [r7, #100]	; 0x64
 800678a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006794:	b29a      	uxth	r2, r3
 8006796:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006798:	801a      	strh	r2, [r3, #0]
 800679a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067ac:	801a      	strh	r2, [r3, #0]
 80067ae:	e01a      	b.n	80067e6 <HAL_PCD_EP_DB_Transmit+0x484>
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	785b      	ldrb	r3, [r3, #1]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d116      	bne.n	80067e6 <HAL_PCD_EP_DB_Transmit+0x484>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	673b      	str	r3, [r7, #112]	; 0x70
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	461a      	mov	r2, r3
 80067ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067cc:	4413      	add	r3, r2
 80067ce:	673b      	str	r3, [r7, #112]	; 0x70
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	00da      	lsls	r2, r3, #3
 80067d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067d8:	4413      	add	r3, r2
 80067da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e2:	2200      	movs	r2, #0
 80067e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	785b      	ldrb	r3, [r3, #1]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d12f      	bne.n	8006854 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006804:	b29b      	uxth	r3, r3
 8006806:	461a      	mov	r2, r3
 8006808:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800680c:	4413      	add	r3, r2
 800680e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	00da      	lsls	r2, r3, #3
 8006818:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800681c:	4413      	add	r3, r2
 800681e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006822:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006826:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	b29b      	uxth	r3, r3
 800682e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006832:	b29a      	uxth	r2, r3
 8006834:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006838:	801a      	strh	r2, [r3, #0]
 800683a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	b29b      	uxth	r3, r3
 8006842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800684a:	b29a      	uxth	r2, r3
 800684c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006850:	801a      	strh	r2, [r3, #0]
 8006852:	e017      	b.n	8006884 <HAL_PCD_EP_DB_Transmit+0x522>
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	785b      	ldrb	r3, [r3, #1]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d113      	bne.n	8006884 <HAL_PCD_EP_DB_Transmit+0x522>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006864:	b29b      	uxth	r3, r3
 8006866:	461a      	mov	r2, r3
 8006868:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800686a:	4413      	add	r3, r2
 800686c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	00da      	lsls	r2, r3, #3
 8006874:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006876:	4413      	add	r3, r2
 8006878:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800687c:	67bb      	str	r3, [r7, #120]	; 0x78
 800687e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006880:	2200      	movs	r2, #0
 8006882:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	4619      	mov	r1, r3
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f006 fdc1 	bl	800d412 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006890:	88fb      	ldrh	r3, [r7, #6]
 8006892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006896:	2b00      	cmp	r3, #0
 8006898:	f040 8104 	bne.w	8006aa4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	461a      	mov	r2, r3
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	441a      	add	r2, r3
 80068c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80068cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068dc:	b29b      	uxth	r3, r3
 80068de:	8013      	strh	r3, [r2, #0]
 80068e0:	e0e0      	b.n	8006aa4 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80068e2:	88fb      	ldrh	r3, [r7, #6]
 80068e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d121      	bne.n	8006930 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	461a      	mov	r2, r3
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006906:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	441a      	add	r2, r3
 8006918:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800691c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006924:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800692c:	b29b      	uxth	r3, r3
 800692e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006936:	2b01      	cmp	r3, #1
 8006938:	f040 80b4 	bne.w	8006aa4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	695a      	ldr	r2, [r3, #20]
 8006940:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006944:	441a      	add	r2, r3
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	69da      	ldr	r2, [r3, #28]
 800694e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006952:	441a      	add	r2, r3
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	6a1a      	ldr	r2, [r3, #32]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	429a      	cmp	r2, r3
 8006962:	d309      	bcc.n	8006978 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	6a1a      	ldr	r2, [r3, #32]
 800696e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006970:	1ad2      	subs	r2, r2, r3
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	621a      	str	r2, [r3, #32]
 8006976:	e015      	b.n	80069a4 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d107      	bne.n	8006990 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8006980:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006984:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800698e:	e009      	b.n	80069a4 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2200      	movs	r2, #0
 800699a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	663b      	str	r3, [r7, #96]	; 0x60
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	785b      	ldrb	r3, [r3, #1]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d155      	bne.n	8006a5e <HAL_PCD_EP_DB_Transmit+0x6fc>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	461a      	mov	r2, r3
 80069c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069c6:	4413      	add	r3, r2
 80069c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	00da      	lsls	r2, r3, #3
 80069d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069d2:	4413      	add	r3, r2
 80069d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069d8:	657b      	str	r3, [r7, #84]	; 0x54
 80069da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069dc:	2b3e      	cmp	r3, #62	; 0x3e
 80069de:	d916      	bls.n	8006a0e <HAL_PCD_EP_DB_Transmit+0x6ac>
 80069e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069e2:	095b      	lsrs	r3, r3, #5
 80069e4:	677b      	str	r3, [r7, #116]	; 0x74
 80069e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069e8:	f003 031f 	and.w	r3, r3, #31
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d102      	bne.n	80069f6 <HAL_PCD_EP_DB_Transmit+0x694>
 80069f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069f2:	3b01      	subs	r3, #1
 80069f4:	677b      	str	r3, [r7, #116]	; 0x74
 80069f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	029b      	lsls	r3, r3, #10
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a0a:	801a      	strh	r2, [r3, #0]
 8006a0c:	e040      	b.n	8006a90 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d112      	bne.n	8006a3a <HAL_PCD_EP_DB_Transmit+0x6d8>
 8006a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a22:	801a      	strh	r2, [r3, #0]
 8006a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a36:	801a      	strh	r2, [r3, #0]
 8006a38:	e02a      	b.n	8006a90 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a3c:	085b      	lsrs	r3, r3, #1
 8006a3e:	677b      	str	r3, [r7, #116]	; 0x74
 8006a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d002      	beq.n	8006a50 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8006a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	677b      	str	r3, [r7, #116]	; 0x74
 8006a50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	029b      	lsls	r3, r3, #10
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a5a:	801a      	strh	r2, [r3, #0]
 8006a5c:	e018      	b.n	8006a90 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	785b      	ldrb	r3, [r3, #1]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d114      	bne.n	8006a90 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	461a      	mov	r2, r3
 8006a72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a74:	4413      	add	r3, r2
 8006a76:	663b      	str	r3, [r7, #96]	; 0x60
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	00da      	lsls	r2, r3, #3
 8006a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a80:	4413      	add	r3, r2
 8006a82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a8e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6818      	ldr	r0, [r3, #0]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	6959      	ldr	r1, [r3, #20]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	895a      	ldrh	r2, [r3, #10]
 8006a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	f004 fd5c 	bl	800b55c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006abe:	823b      	strh	r3, [r7, #16]
 8006ac0:	8a3b      	ldrh	r3, [r7, #16]
 8006ac2:	f083 0310 	eor.w	r3, r3, #16
 8006ac6:	823b      	strh	r3, [r7, #16]
 8006ac8:	8a3b      	ldrh	r3, [r7, #16]
 8006aca:	f083 0320 	eor.w	r3, r3, #32
 8006ace:	823b      	strh	r3, [r7, #16]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	441a      	add	r2, r3
 8006ade:	8a3b      	ldrh	r3, [r7, #16]
 8006ae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3788      	adds	r7, #136	; 0x88
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b087      	sub	sp, #28
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	607b      	str	r3, [r7, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	817b      	strh	r3, [r7, #10]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006b10:	897b      	ldrh	r3, [r7, #10]
 8006b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00c      	beq.n	8006b36 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b1c:	897b      	ldrh	r3, [r7, #10]
 8006b1e:	f003 0307 	and.w	r3, r3, #7
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	4613      	mov	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	3304      	adds	r3, #4
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	e00a      	b.n	8006b4c <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006b36:	897a      	ldrh	r2, [r7, #10]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	00db      	lsls	r3, r3, #3
 8006b40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	4413      	add	r3, r2
 8006b48:	3304      	adds	r3, #4
 8006b4a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006b4c:	893b      	ldrh	r3, [r7, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d107      	bne.n	8006b62 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2200      	movs	r2, #0
 8006b56:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	80da      	strh	r2, [r3, #6]
 8006b60:	e00b      	b.n	8006b7a <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2201      	movs	r2, #1
 8006b66:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	0c1b      	lsrs	r3, r3, #16
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	371c      	adds	r7, #28
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	f043 0301 	orr.w	r3, r3, #1
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	f043 0302 	orr.w	r3, r3, #2
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006be0:	4b04      	ldr	r3, [pc, #16]	; (8006bf4 <HAL_PWREx_GetVoltageRange+0x18>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	40007000 	.word	0x40007000

08006bf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c06:	d130      	bne.n	8006c6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c08:	4b23      	ldr	r3, [pc, #140]	; (8006c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c14:	d038      	beq.n	8006c88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c16:	4b20      	ldr	r3, [pc, #128]	; (8006c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006c1e:	4a1e      	ldr	r2, [pc, #120]	; (8006c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c26:	4b1d      	ldr	r3, [pc, #116]	; (8006c9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2232      	movs	r2, #50	; 0x32
 8006c2c:	fb02 f303 	mul.w	r3, r2, r3
 8006c30:	4a1b      	ldr	r2, [pc, #108]	; (8006ca0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006c32:	fba2 2303 	umull	r2, r3, r2, r3
 8006c36:	0c9b      	lsrs	r3, r3, #18
 8006c38:	3301      	adds	r3, #1
 8006c3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c3c:	e002      	b.n	8006c44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c44:	4b14      	ldr	r3, [pc, #80]	; (8006c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c50:	d102      	bne.n	8006c58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1f2      	bne.n	8006c3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c58:	4b0f      	ldr	r3, [pc, #60]	; (8006c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c64:	d110      	bne.n	8006c88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e00f      	b.n	8006c8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c6a:	4b0b      	ldr	r3, [pc, #44]	; (8006c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c76:	d007      	beq.n	8006c88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006c78:	4b07      	ldr	r3, [pc, #28]	; (8006c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006c80:	4a05      	ldr	r2, [pc, #20]	; (8006c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	40007000 	.word	0x40007000
 8006c9c:	20000000 	.word	0x20000000
 8006ca0:	431bde83 	.word	0x431bde83

08006ca4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006ca8:	4b05      	ldr	r3, [pc, #20]	; (8006cc0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	4a04      	ldr	r2, [pc, #16]	; (8006cc0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cb2:	6053      	str	r3, [r2, #4]
}
 8006cb4:	bf00      	nop
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40007000 	.word	0x40007000

08006cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b088      	sub	sp, #32
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d102      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	f000 bc02 	b.w	80074dc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cd8:	4b96      	ldr	r3, [pc, #600]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 030c 	and.w	r3, r3, #12
 8006ce0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ce2:	4b94      	ldr	r3, [pc, #592]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	f003 0303 	and.w	r3, r3, #3
 8006cea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0310 	and.w	r3, r3, #16
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 80e4 	beq.w	8006ec2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d007      	beq.n	8006d10 <HAL_RCC_OscConfig+0x4c>
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	2b0c      	cmp	r3, #12
 8006d04:	f040 808b 	bne.w	8006e1e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	f040 8087 	bne.w	8006e1e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006d10:	4b88      	ldr	r3, [pc, #544]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d005      	beq.n	8006d28 <HAL_RCC_OscConfig+0x64>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e3d9      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a1a      	ldr	r2, [r3, #32]
 8006d2c:	4b81      	ldr	r3, [pc, #516]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0308 	and.w	r3, r3, #8
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d004      	beq.n	8006d42 <HAL_RCC_OscConfig+0x7e>
 8006d38:	4b7e      	ldr	r3, [pc, #504]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d40:	e005      	b.n	8006d4e <HAL_RCC_OscConfig+0x8a>
 8006d42:	4b7c      	ldr	r3, [pc, #496]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d48:	091b      	lsrs	r3, r3, #4
 8006d4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d223      	bcs.n	8006d9a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 fd60 	bl	800781c <RCC_SetFlashLatencyFromMSIRange>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e3ba      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d66:	4b73      	ldr	r3, [pc, #460]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a72      	ldr	r2, [pc, #456]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006d6c:	f043 0308 	orr.w	r3, r3, #8
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	4b70      	ldr	r3, [pc, #448]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	496d      	ldr	r1, [pc, #436]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d84:	4b6b      	ldr	r3, [pc, #428]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	021b      	lsls	r3, r3, #8
 8006d92:	4968      	ldr	r1, [pc, #416]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	604b      	str	r3, [r1, #4]
 8006d98:	e025      	b.n	8006de6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d9a:	4b66      	ldr	r3, [pc, #408]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a65      	ldr	r2, [pc, #404]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006da0:	f043 0308 	orr.w	r3, r3, #8
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	4b63      	ldr	r3, [pc, #396]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	4960      	ldr	r1, [pc, #384]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006db8:	4b5e      	ldr	r3, [pc, #376]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	021b      	lsls	r3, r3, #8
 8006dc6:	495b      	ldr	r1, [pc, #364]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d109      	bne.n	8006de6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 fd20 	bl	800781c <RCC_SetFlashLatencyFromMSIRange>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e37a      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006de6:	f000 fc81 	bl	80076ec <HAL_RCC_GetSysClockFreq>
 8006dea:	4602      	mov	r2, r0
 8006dec:	4b51      	ldr	r3, [pc, #324]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	091b      	lsrs	r3, r3, #4
 8006df2:	f003 030f 	and.w	r3, r3, #15
 8006df6:	4950      	ldr	r1, [pc, #320]	; (8006f38 <HAL_RCC_OscConfig+0x274>)
 8006df8:	5ccb      	ldrb	r3, [r1, r3]
 8006dfa:	f003 031f 	and.w	r3, r3, #31
 8006dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8006e02:	4a4e      	ldr	r2, [pc, #312]	; (8006f3c <HAL_RCC_OscConfig+0x278>)
 8006e04:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006e06:	4b4e      	ldr	r3, [pc, #312]	; (8006f40 <HAL_RCC_OscConfig+0x27c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fc fbc2 	bl	8003594 <HAL_InitTick>
 8006e10:	4603      	mov	r3, r0
 8006e12:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d052      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
 8006e1c:	e35e      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d032      	beq.n	8006e8c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006e26:	4b43      	ldr	r3, [pc, #268]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a42      	ldr	r2, [pc, #264]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006e2c:	f043 0301 	orr.w	r3, r3, #1
 8006e30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006e32:	f7fc fbff 	bl	8003634 <HAL_GetTick>
 8006e36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e38:	e008      	b.n	8006e4c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e3a:	f7fc fbfb 	bl	8003634 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e347      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e4c:	4b39      	ldr	r3, [pc, #228]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d0f0      	beq.n	8006e3a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e58:	4b36      	ldr	r3, [pc, #216]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a35      	ldr	r2, [pc, #212]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006e5e:	f043 0308 	orr.w	r3, r3, #8
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	4b33      	ldr	r3, [pc, #204]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	4930      	ldr	r1, [pc, #192]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e76:	4b2f      	ldr	r3, [pc, #188]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	021b      	lsls	r3, r3, #8
 8006e84:	492b      	ldr	r1, [pc, #172]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	604b      	str	r3, [r1, #4]
 8006e8a:	e01a      	b.n	8006ec2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006e8c:	4b29      	ldr	r3, [pc, #164]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a28      	ldr	r2, [pc, #160]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006e92:	f023 0301 	bic.w	r3, r3, #1
 8006e96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006e98:	f7fc fbcc 	bl	8003634 <HAL_GetTick>
 8006e9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ea0:	f7fc fbc8 	bl	8003634 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e314      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006eb2:	4b20      	ldr	r3, [pc, #128]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1f0      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x1dc>
 8006ebe:	e000      	b.n	8006ec2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006ec0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d073      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d005      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x21c>
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	2b0c      	cmp	r3, #12
 8006ed8:	d10e      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2b03      	cmp	r3, #3
 8006ede:	d10b      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ee0:	4b14      	ldr	r3, [pc, #80]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d063      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x2f0>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d15f      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e2f1      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f00:	d106      	bne.n	8006f10 <HAL_RCC_OscConfig+0x24c>
 8006f02:	4b0c      	ldr	r3, [pc, #48]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a0b      	ldr	r2, [pc, #44]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	e025      	b.n	8006f5c <HAL_RCC_OscConfig+0x298>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f18:	d114      	bne.n	8006f44 <HAL_RCC_OscConfig+0x280>
 8006f1a:	4b06      	ldr	r3, [pc, #24]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a05      	ldr	r2, [pc, #20]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	4b03      	ldr	r3, [pc, #12]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a02      	ldr	r2, [pc, #8]	; (8006f34 <HAL_RCC_OscConfig+0x270>)
 8006f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	e013      	b.n	8006f5c <HAL_RCC_OscConfig+0x298>
 8006f34:	40021000 	.word	0x40021000
 8006f38:	0800db44 	.word	0x0800db44
 8006f3c:	20000000 	.word	0x20000000
 8006f40:	20000004 	.word	0x20000004
 8006f44:	4ba0      	ldr	r3, [pc, #640]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a9f      	ldr	r2, [pc, #636]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 8006f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	4b9d      	ldr	r3, [pc, #628]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a9c      	ldr	r2, [pc, #624]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 8006f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d013      	beq.n	8006f8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f64:	f7fc fb66 	bl	8003634 <HAL_GetTick>
 8006f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f6a:	e008      	b.n	8006f7e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f6c:	f7fc fb62 	bl	8003634 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b64      	cmp	r3, #100	; 0x64
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e2ae      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f7e:	4b92      	ldr	r3, [pc, #584]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d0f0      	beq.n	8006f6c <HAL_RCC_OscConfig+0x2a8>
 8006f8a:	e014      	b.n	8006fb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f8c:	f7fc fb52 	bl	8003634 <HAL_GetTick>
 8006f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f92:	e008      	b.n	8006fa6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f94:	f7fc fb4e 	bl	8003634 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	2b64      	cmp	r3, #100	; 0x64
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e29a      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006fa6:	4b88      	ldr	r3, [pc, #544]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1f0      	bne.n	8006f94 <HAL_RCC_OscConfig+0x2d0>
 8006fb2:	e000      	b.n	8006fb6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d060      	beq.n	8007084 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	2b04      	cmp	r3, #4
 8006fc6:	d005      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x310>
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	2b0c      	cmp	r3, #12
 8006fcc:	d119      	bne.n	8007002 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d116      	bne.n	8007002 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fd4:	4b7c      	ldr	r3, [pc, #496]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d005      	beq.n	8006fec <HAL_RCC_OscConfig+0x328>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e277      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fec:	4b76      	ldr	r3, [pc, #472]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	061b      	lsls	r3, r3, #24
 8006ffa:	4973      	ldr	r1, [pc, #460]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007000:	e040      	b.n	8007084 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d023      	beq.n	8007052 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800700a:	4b6f      	ldr	r3, [pc, #444]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a6e      	ldr	r2, [pc, #440]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 8007010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007016:	f7fc fb0d 	bl	8003634 <HAL_GetTick>
 800701a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800701c:	e008      	b.n	8007030 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800701e:	f7fc fb09 	bl	8003634 <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	2b02      	cmp	r3, #2
 800702a:	d901      	bls.n	8007030 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e255      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007030:	4b65      	ldr	r3, [pc, #404]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007038:	2b00      	cmp	r3, #0
 800703a:	d0f0      	beq.n	800701e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800703c:	4b62      	ldr	r3, [pc, #392]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	061b      	lsls	r3, r3, #24
 800704a:	495f      	ldr	r1, [pc, #380]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 800704c:	4313      	orrs	r3, r2
 800704e:	604b      	str	r3, [r1, #4]
 8007050:	e018      	b.n	8007084 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007052:	4b5d      	ldr	r3, [pc, #372]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a5c      	ldr	r2, [pc, #368]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 8007058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800705c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800705e:	f7fc fae9 	bl	8003634 <HAL_GetTick>
 8007062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007064:	e008      	b.n	8007078 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007066:	f7fc fae5 	bl	8003634 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	2b02      	cmp	r3, #2
 8007072:	d901      	bls.n	8007078 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e231      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007078:	4b53      	ldr	r3, [pc, #332]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1f0      	bne.n	8007066 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0308 	and.w	r3, r3, #8
 800708c:	2b00      	cmp	r3, #0
 800708e:	d03c      	beq.n	800710a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d01c      	beq.n	80070d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007098:	4b4b      	ldr	r3, [pc, #300]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 800709a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800709e:	4a4a      	ldr	r2, [pc, #296]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 80070a0:	f043 0301 	orr.w	r3, r3, #1
 80070a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070a8:	f7fc fac4 	bl	8003634 <HAL_GetTick>
 80070ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070ae:	e008      	b.n	80070c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070b0:	f7fc fac0 	bl	8003634 <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e20c      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070c2:	4b41      	ldr	r3, [pc, #260]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 80070c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070c8:	f003 0302 	and.w	r3, r3, #2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0ef      	beq.n	80070b0 <HAL_RCC_OscConfig+0x3ec>
 80070d0:	e01b      	b.n	800710a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070d2:	4b3d      	ldr	r3, [pc, #244]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 80070d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070d8:	4a3b      	ldr	r2, [pc, #236]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 80070da:	f023 0301 	bic.w	r3, r3, #1
 80070de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070e2:	f7fc faa7 	bl	8003634 <HAL_GetTick>
 80070e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80070e8:	e008      	b.n	80070fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070ea:	f7fc faa3 	bl	8003634 <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d901      	bls.n	80070fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e1ef      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80070fc:	4b32      	ldr	r3, [pc, #200]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 80070fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1ef      	bne.n	80070ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0304 	and.w	r3, r3, #4
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 80a6 	beq.w	8007264 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007118:	2300      	movs	r3, #0
 800711a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800711c:	4b2a      	ldr	r3, [pc, #168]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 800711e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10d      	bne.n	8007144 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007128:	4b27      	ldr	r3, [pc, #156]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 800712a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712c:	4a26      	ldr	r2, [pc, #152]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 800712e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007132:	6593      	str	r3, [r2, #88]	; 0x58
 8007134:	4b24      	ldr	r3, [pc, #144]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 8007136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800713c:	60bb      	str	r3, [r7, #8]
 800713e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007140:	2301      	movs	r3, #1
 8007142:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007144:	4b21      	ldr	r3, [pc, #132]	; (80071cc <HAL_RCC_OscConfig+0x508>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800714c:	2b00      	cmp	r3, #0
 800714e:	d118      	bne.n	8007182 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007150:	4b1e      	ldr	r3, [pc, #120]	; (80071cc <HAL_RCC_OscConfig+0x508>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a1d      	ldr	r2, [pc, #116]	; (80071cc <HAL_RCC_OscConfig+0x508>)
 8007156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800715a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800715c:	f7fc fa6a 	bl	8003634 <HAL_GetTick>
 8007160:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007162:	e008      	b.n	8007176 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007164:	f7fc fa66 	bl	8003634 <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	2b02      	cmp	r3, #2
 8007170:	d901      	bls.n	8007176 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e1b2      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007176:	4b15      	ldr	r3, [pc, #84]	; (80071cc <HAL_RCC_OscConfig+0x508>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800717e:	2b00      	cmp	r3, #0
 8007180:	d0f0      	beq.n	8007164 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d108      	bne.n	800719c <HAL_RCC_OscConfig+0x4d8>
 800718a:	4b0f      	ldr	r3, [pc, #60]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 800718c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007190:	4a0d      	ldr	r2, [pc, #52]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 8007192:	f043 0301 	orr.w	r3, r3, #1
 8007196:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800719a:	e029      	b.n	80071f0 <HAL_RCC_OscConfig+0x52c>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	2b05      	cmp	r3, #5
 80071a2:	d115      	bne.n	80071d0 <HAL_RCC_OscConfig+0x50c>
 80071a4:	4b08      	ldr	r3, [pc, #32]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 80071a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071aa:	4a07      	ldr	r2, [pc, #28]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 80071ac:	f043 0304 	orr.w	r3, r3, #4
 80071b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071b4:	4b04      	ldr	r3, [pc, #16]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 80071b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ba:	4a03      	ldr	r2, [pc, #12]	; (80071c8 <HAL_RCC_OscConfig+0x504>)
 80071bc:	f043 0301 	orr.w	r3, r3, #1
 80071c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071c4:	e014      	b.n	80071f0 <HAL_RCC_OscConfig+0x52c>
 80071c6:	bf00      	nop
 80071c8:	40021000 	.word	0x40021000
 80071cc:	40007000 	.word	0x40007000
 80071d0:	4b9a      	ldr	r3, [pc, #616]	; (800743c <HAL_RCC_OscConfig+0x778>)
 80071d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d6:	4a99      	ldr	r2, [pc, #612]	; (800743c <HAL_RCC_OscConfig+0x778>)
 80071d8:	f023 0301 	bic.w	r3, r3, #1
 80071dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071e0:	4b96      	ldr	r3, [pc, #600]	; (800743c <HAL_RCC_OscConfig+0x778>)
 80071e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e6:	4a95      	ldr	r2, [pc, #596]	; (800743c <HAL_RCC_OscConfig+0x778>)
 80071e8:	f023 0304 	bic.w	r3, r3, #4
 80071ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d016      	beq.n	8007226 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071f8:	f7fc fa1c 	bl	8003634 <HAL_GetTick>
 80071fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071fe:	e00a      	b.n	8007216 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007200:	f7fc fa18 	bl	8003634 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	f241 3288 	movw	r2, #5000	; 0x1388
 800720e:	4293      	cmp	r3, r2
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e162      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007216:	4b89      	ldr	r3, [pc, #548]	; (800743c <HAL_RCC_OscConfig+0x778>)
 8007218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800721c:	f003 0302 	and.w	r3, r3, #2
 8007220:	2b00      	cmp	r3, #0
 8007222:	d0ed      	beq.n	8007200 <HAL_RCC_OscConfig+0x53c>
 8007224:	e015      	b.n	8007252 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007226:	f7fc fa05 	bl	8003634 <HAL_GetTick>
 800722a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800722c:	e00a      	b.n	8007244 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800722e:	f7fc fa01 	bl	8003634 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	f241 3288 	movw	r2, #5000	; 0x1388
 800723c:	4293      	cmp	r3, r2
 800723e:	d901      	bls.n	8007244 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e14b      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007244:	4b7d      	ldr	r3, [pc, #500]	; (800743c <HAL_RCC_OscConfig+0x778>)
 8007246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800724a:	f003 0302 	and.w	r3, r3, #2
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1ed      	bne.n	800722e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007252:	7ffb      	ldrb	r3, [r7, #31]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d105      	bne.n	8007264 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007258:	4b78      	ldr	r3, [pc, #480]	; (800743c <HAL_RCC_OscConfig+0x778>)
 800725a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800725c:	4a77      	ldr	r2, [pc, #476]	; (800743c <HAL_RCC_OscConfig+0x778>)
 800725e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007262:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0320 	and.w	r3, r3, #32
 800726c:	2b00      	cmp	r3, #0
 800726e:	d03c      	beq.n	80072ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	2b00      	cmp	r3, #0
 8007276:	d01c      	beq.n	80072b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007278:	4b70      	ldr	r3, [pc, #448]	; (800743c <HAL_RCC_OscConfig+0x778>)
 800727a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800727e:	4a6f      	ldr	r2, [pc, #444]	; (800743c <HAL_RCC_OscConfig+0x778>)
 8007280:	f043 0301 	orr.w	r3, r3, #1
 8007284:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007288:	f7fc f9d4 	bl	8003634 <HAL_GetTick>
 800728c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800728e:	e008      	b.n	80072a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007290:	f7fc f9d0 	bl	8003634 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	2b02      	cmp	r3, #2
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e11c      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80072a2:	4b66      	ldr	r3, [pc, #408]	; (800743c <HAL_RCC_OscConfig+0x778>)
 80072a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d0ef      	beq.n	8007290 <HAL_RCC_OscConfig+0x5cc>
 80072b0:	e01b      	b.n	80072ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80072b2:	4b62      	ldr	r3, [pc, #392]	; (800743c <HAL_RCC_OscConfig+0x778>)
 80072b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072b8:	4a60      	ldr	r2, [pc, #384]	; (800743c <HAL_RCC_OscConfig+0x778>)
 80072ba:	f023 0301 	bic.w	r3, r3, #1
 80072be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072c2:	f7fc f9b7 	bl	8003634 <HAL_GetTick>
 80072c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80072c8:	e008      	b.n	80072dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072ca:	f7fc f9b3 	bl	8003634 <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d901      	bls.n	80072dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e0ff      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80072dc:	4b57      	ldr	r3, [pc, #348]	; (800743c <HAL_RCC_OscConfig+0x778>)
 80072de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072e2:	f003 0302 	and.w	r3, r3, #2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1ef      	bne.n	80072ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f000 80f3 	beq.w	80074da <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	f040 80c9 	bne.w	8007490 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80072fe:	4b4f      	ldr	r3, [pc, #316]	; (800743c <HAL_RCC_OscConfig+0x778>)
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f003 0203 	and.w	r2, r3, #3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730e:	429a      	cmp	r2, r3
 8007310:	d12c      	bne.n	800736c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731c:	3b01      	subs	r3, #1
 800731e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007320:	429a      	cmp	r2, r3
 8007322:	d123      	bne.n	800736c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800732e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007330:	429a      	cmp	r2, r3
 8007332:	d11b      	bne.n	800736c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007340:	429a      	cmp	r2, r3
 8007342:	d113      	bne.n	800736c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734e:	085b      	lsrs	r3, r3, #1
 8007350:	3b01      	subs	r3, #1
 8007352:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007354:	429a      	cmp	r2, r3
 8007356:	d109      	bne.n	800736c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	085b      	lsrs	r3, r3, #1
 8007364:	3b01      	subs	r3, #1
 8007366:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007368:	429a      	cmp	r2, r3
 800736a:	d06b      	beq.n	8007444 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	2b0c      	cmp	r3, #12
 8007370:	d062      	beq.n	8007438 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007372:	4b32      	ldr	r3, [pc, #200]	; (800743c <HAL_RCC_OscConfig+0x778>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e0ac      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007382:	4b2e      	ldr	r3, [pc, #184]	; (800743c <HAL_RCC_OscConfig+0x778>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a2d      	ldr	r2, [pc, #180]	; (800743c <HAL_RCC_OscConfig+0x778>)
 8007388:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800738c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800738e:	f7fc f951 	bl	8003634 <HAL_GetTick>
 8007392:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007394:	e008      	b.n	80073a8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007396:	f7fc f94d 	bl	8003634 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d901      	bls.n	80073a8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e099      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073a8:	4b24      	ldr	r3, [pc, #144]	; (800743c <HAL_RCC_OscConfig+0x778>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1f0      	bne.n	8007396 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073b4:	4b21      	ldr	r3, [pc, #132]	; (800743c <HAL_RCC_OscConfig+0x778>)
 80073b6:	68da      	ldr	r2, [r3, #12]
 80073b8:	4b21      	ldr	r3, [pc, #132]	; (8007440 <HAL_RCC_OscConfig+0x77c>)
 80073ba:	4013      	ands	r3, r2
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80073c4:	3a01      	subs	r2, #1
 80073c6:	0112      	lsls	r2, r2, #4
 80073c8:	4311      	orrs	r1, r2
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80073ce:	0212      	lsls	r2, r2, #8
 80073d0:	4311      	orrs	r1, r2
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80073d6:	0852      	lsrs	r2, r2, #1
 80073d8:	3a01      	subs	r2, #1
 80073da:	0552      	lsls	r2, r2, #21
 80073dc:	4311      	orrs	r1, r2
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80073e2:	0852      	lsrs	r2, r2, #1
 80073e4:	3a01      	subs	r2, #1
 80073e6:	0652      	lsls	r2, r2, #25
 80073e8:	4311      	orrs	r1, r2
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073ee:	06d2      	lsls	r2, r2, #27
 80073f0:	430a      	orrs	r2, r1
 80073f2:	4912      	ldr	r1, [pc, #72]	; (800743c <HAL_RCC_OscConfig+0x778>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80073f8:	4b10      	ldr	r3, [pc, #64]	; (800743c <HAL_RCC_OscConfig+0x778>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a0f      	ldr	r2, [pc, #60]	; (800743c <HAL_RCC_OscConfig+0x778>)
 80073fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007402:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007404:	4b0d      	ldr	r3, [pc, #52]	; (800743c <HAL_RCC_OscConfig+0x778>)
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	4a0c      	ldr	r2, [pc, #48]	; (800743c <HAL_RCC_OscConfig+0x778>)
 800740a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800740e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007410:	f7fc f910 	bl	8003634 <HAL_GetTick>
 8007414:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007416:	e008      	b.n	800742a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007418:	f7fc f90c 	bl	8003634 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	2b02      	cmp	r3, #2
 8007424:	d901      	bls.n	800742a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e058      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800742a:	4b04      	ldr	r3, [pc, #16]	; (800743c <HAL_RCC_OscConfig+0x778>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d0f0      	beq.n	8007418 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007436:	e050      	b.n	80074da <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e04f      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
 800743c:	40021000 	.word	0x40021000
 8007440:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007444:	4b27      	ldr	r3, [pc, #156]	; (80074e4 <HAL_RCC_OscConfig+0x820>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d144      	bne.n	80074da <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007450:	4b24      	ldr	r3, [pc, #144]	; (80074e4 <HAL_RCC_OscConfig+0x820>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a23      	ldr	r2, [pc, #140]	; (80074e4 <HAL_RCC_OscConfig+0x820>)
 8007456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800745a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800745c:	4b21      	ldr	r3, [pc, #132]	; (80074e4 <HAL_RCC_OscConfig+0x820>)
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	4a20      	ldr	r2, [pc, #128]	; (80074e4 <HAL_RCC_OscConfig+0x820>)
 8007462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007466:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007468:	f7fc f8e4 	bl	8003634 <HAL_GetTick>
 800746c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800746e:	e008      	b.n	8007482 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007470:	f7fc f8e0 	bl	8003634 <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	2b02      	cmp	r3, #2
 800747c:	d901      	bls.n	8007482 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e02c      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007482:	4b18      	ldr	r3, [pc, #96]	; (80074e4 <HAL_RCC_OscConfig+0x820>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d0f0      	beq.n	8007470 <HAL_RCC_OscConfig+0x7ac>
 800748e:	e024      	b.n	80074da <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	2b0c      	cmp	r3, #12
 8007494:	d01f      	beq.n	80074d6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007496:	4b13      	ldr	r3, [pc, #76]	; (80074e4 <HAL_RCC_OscConfig+0x820>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a12      	ldr	r2, [pc, #72]	; (80074e4 <HAL_RCC_OscConfig+0x820>)
 800749c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a2:	f7fc f8c7 	bl	8003634 <HAL_GetTick>
 80074a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074a8:	e008      	b.n	80074bc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074aa:	f7fc f8c3 	bl	8003634 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d901      	bls.n	80074bc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e00f      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074bc:	4b09      	ldr	r3, [pc, #36]	; (80074e4 <HAL_RCC_OscConfig+0x820>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1f0      	bne.n	80074aa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80074c8:	4b06      	ldr	r3, [pc, #24]	; (80074e4 <HAL_RCC_OscConfig+0x820>)
 80074ca:	68da      	ldr	r2, [r3, #12]
 80074cc:	4905      	ldr	r1, [pc, #20]	; (80074e4 <HAL_RCC_OscConfig+0x820>)
 80074ce:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <HAL_RCC_OscConfig+0x824>)
 80074d0:	4013      	ands	r3, r2
 80074d2:	60cb      	str	r3, [r1, #12]
 80074d4:	e001      	b.n	80074da <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e000      	b.n	80074dc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3720      	adds	r7, #32
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	40021000 	.word	0x40021000
 80074e8:	feeefffc 	.word	0xfeeefffc

080074ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e0e7      	b.n	80076d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007500:	4b75      	ldr	r3, [pc, #468]	; (80076d8 <HAL_RCC_ClockConfig+0x1ec>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0307 	and.w	r3, r3, #7
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	429a      	cmp	r2, r3
 800750c:	d910      	bls.n	8007530 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800750e:	4b72      	ldr	r3, [pc, #456]	; (80076d8 <HAL_RCC_ClockConfig+0x1ec>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f023 0207 	bic.w	r2, r3, #7
 8007516:	4970      	ldr	r1, [pc, #448]	; (80076d8 <HAL_RCC_ClockConfig+0x1ec>)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	4313      	orrs	r3, r2
 800751c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800751e:	4b6e      	ldr	r3, [pc, #440]	; (80076d8 <HAL_RCC_ClockConfig+0x1ec>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0307 	and.w	r3, r3, #7
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	429a      	cmp	r2, r3
 800752a:	d001      	beq.n	8007530 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e0cf      	b.n	80076d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0302 	and.w	r3, r3, #2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d010      	beq.n	800755e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689a      	ldr	r2, [r3, #8]
 8007540:	4b66      	ldr	r3, [pc, #408]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007548:	429a      	cmp	r2, r3
 800754a:	d908      	bls.n	800755e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800754c:	4b63      	ldr	r3, [pc, #396]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	4960      	ldr	r1, [pc, #384]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 800755a:	4313      	orrs	r3, r2
 800755c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d04c      	beq.n	8007604 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	2b03      	cmp	r3, #3
 8007570:	d107      	bne.n	8007582 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007572:	4b5a      	ldr	r3, [pc, #360]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d121      	bne.n	80075c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e0a6      	b.n	80076d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	2b02      	cmp	r3, #2
 8007588:	d107      	bne.n	800759a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800758a:	4b54      	ldr	r3, [pc, #336]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d115      	bne.n	80075c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e09a      	b.n	80076d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d107      	bne.n	80075b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80075a2:	4b4e      	ldr	r3, [pc, #312]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d109      	bne.n	80075c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e08e      	b.n	80076d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075b2:	4b4a      	ldr	r3, [pc, #296]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e086      	b.n	80076d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80075c2:	4b46      	ldr	r3, [pc, #280]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f023 0203 	bic.w	r2, r3, #3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	4943      	ldr	r1, [pc, #268]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075d4:	f7fc f82e 	bl	8003634 <HAL_GetTick>
 80075d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075da:	e00a      	b.n	80075f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075dc:	f7fc f82a 	bl	8003634 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d901      	bls.n	80075f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e06e      	b.n	80076d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075f2:	4b3a      	ldr	r3, [pc, #232]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f003 020c 	and.w	r2, r3, #12
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	429a      	cmp	r2, r3
 8007602:	d1eb      	bne.n	80075dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0302 	and.w	r3, r3, #2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d010      	beq.n	8007632 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	4b31      	ldr	r3, [pc, #196]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800761c:	429a      	cmp	r2, r3
 800761e:	d208      	bcs.n	8007632 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007620:	4b2e      	ldr	r3, [pc, #184]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	492b      	ldr	r1, [pc, #172]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 800762e:	4313      	orrs	r3, r2
 8007630:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007632:	4b29      	ldr	r3, [pc, #164]	; (80076d8 <HAL_RCC_ClockConfig+0x1ec>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0307 	and.w	r3, r3, #7
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	429a      	cmp	r2, r3
 800763e:	d210      	bcs.n	8007662 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007640:	4b25      	ldr	r3, [pc, #148]	; (80076d8 <HAL_RCC_ClockConfig+0x1ec>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f023 0207 	bic.w	r2, r3, #7
 8007648:	4923      	ldr	r1, [pc, #140]	; (80076d8 <HAL_RCC_ClockConfig+0x1ec>)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	4313      	orrs	r3, r2
 800764e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007650:	4b21      	ldr	r3, [pc, #132]	; (80076d8 <HAL_RCC_ClockConfig+0x1ec>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0307 	and.w	r3, r3, #7
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	429a      	cmp	r2, r3
 800765c:	d001      	beq.n	8007662 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e036      	b.n	80076d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0304 	and.w	r3, r3, #4
 800766a:	2b00      	cmp	r3, #0
 800766c:	d008      	beq.n	8007680 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800766e:	4b1b      	ldr	r3, [pc, #108]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	4918      	ldr	r1, [pc, #96]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 800767c:	4313      	orrs	r3, r2
 800767e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0308 	and.w	r3, r3, #8
 8007688:	2b00      	cmp	r3, #0
 800768a:	d009      	beq.n	80076a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800768c:	4b13      	ldr	r3, [pc, #76]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	00db      	lsls	r3, r3, #3
 800769a:	4910      	ldr	r1, [pc, #64]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 800769c:	4313      	orrs	r3, r2
 800769e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80076a0:	f000 f824 	bl	80076ec <HAL_RCC_GetSysClockFreq>
 80076a4:	4602      	mov	r2, r0
 80076a6:	4b0d      	ldr	r3, [pc, #52]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	091b      	lsrs	r3, r3, #4
 80076ac:	f003 030f 	and.w	r3, r3, #15
 80076b0:	490b      	ldr	r1, [pc, #44]	; (80076e0 <HAL_RCC_ClockConfig+0x1f4>)
 80076b2:	5ccb      	ldrb	r3, [r1, r3]
 80076b4:	f003 031f 	and.w	r3, r3, #31
 80076b8:	fa22 f303 	lsr.w	r3, r2, r3
 80076bc:	4a09      	ldr	r2, [pc, #36]	; (80076e4 <HAL_RCC_ClockConfig+0x1f8>)
 80076be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80076c0:	4b09      	ldr	r3, [pc, #36]	; (80076e8 <HAL_RCC_ClockConfig+0x1fc>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7fb ff65 	bl	8003594 <HAL_InitTick>
 80076ca:	4603      	mov	r3, r0
 80076cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80076ce:	7afb      	ldrb	r3, [r7, #11]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	40022000 	.word	0x40022000
 80076dc:	40021000 	.word	0x40021000
 80076e0:	0800db44 	.word	0x0800db44
 80076e4:	20000000 	.word	0x20000000
 80076e8:	20000004 	.word	0x20000004

080076ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b089      	sub	sp, #36	; 0x24
 80076f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	61fb      	str	r3, [r7, #28]
 80076f6:	2300      	movs	r3, #0
 80076f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076fa:	4b3e      	ldr	r3, [pc, #248]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f003 030c 	and.w	r3, r3, #12
 8007702:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007704:	4b3b      	ldr	r3, [pc, #236]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f003 0303 	and.w	r3, r3, #3
 800770c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d005      	beq.n	8007720 <HAL_RCC_GetSysClockFreq+0x34>
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	2b0c      	cmp	r3, #12
 8007718:	d121      	bne.n	800775e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d11e      	bne.n	800775e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007720:	4b34      	ldr	r3, [pc, #208]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0308 	and.w	r3, r3, #8
 8007728:	2b00      	cmp	r3, #0
 800772a:	d107      	bne.n	800773c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800772c:	4b31      	ldr	r3, [pc, #196]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800772e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007732:	0a1b      	lsrs	r3, r3, #8
 8007734:	f003 030f 	and.w	r3, r3, #15
 8007738:	61fb      	str	r3, [r7, #28]
 800773a:	e005      	b.n	8007748 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800773c:	4b2d      	ldr	r3, [pc, #180]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	091b      	lsrs	r3, r3, #4
 8007742:	f003 030f 	and.w	r3, r3, #15
 8007746:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007748:	4a2b      	ldr	r2, [pc, #172]	; (80077f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007750:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10d      	bne.n	8007774 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800775c:	e00a      	b.n	8007774 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	2b04      	cmp	r3, #4
 8007762:	d102      	bne.n	800776a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007764:	4b25      	ldr	r3, [pc, #148]	; (80077fc <HAL_RCC_GetSysClockFreq+0x110>)
 8007766:	61bb      	str	r3, [r7, #24]
 8007768:	e004      	b.n	8007774 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	2b08      	cmp	r3, #8
 800776e:	d101      	bne.n	8007774 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007770:	4b23      	ldr	r3, [pc, #140]	; (8007800 <HAL_RCC_GetSysClockFreq+0x114>)
 8007772:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	2b0c      	cmp	r3, #12
 8007778:	d134      	bne.n	80077e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800777a:	4b1e      	ldr	r3, [pc, #120]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	f003 0303 	and.w	r3, r3, #3
 8007782:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b02      	cmp	r3, #2
 8007788:	d003      	beq.n	8007792 <HAL_RCC_GetSysClockFreq+0xa6>
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2b03      	cmp	r3, #3
 800778e:	d003      	beq.n	8007798 <HAL_RCC_GetSysClockFreq+0xac>
 8007790:	e005      	b.n	800779e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007792:	4b1a      	ldr	r3, [pc, #104]	; (80077fc <HAL_RCC_GetSysClockFreq+0x110>)
 8007794:	617b      	str	r3, [r7, #20]
      break;
 8007796:	e005      	b.n	80077a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007798:	4b19      	ldr	r3, [pc, #100]	; (8007800 <HAL_RCC_GetSysClockFreq+0x114>)
 800779a:	617b      	str	r3, [r7, #20]
      break;
 800779c:	e002      	b.n	80077a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	617b      	str	r3, [r7, #20]
      break;
 80077a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80077a4:	4b13      	ldr	r3, [pc, #76]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	091b      	lsrs	r3, r3, #4
 80077aa:	f003 0307 	and.w	r3, r3, #7
 80077ae:	3301      	adds	r3, #1
 80077b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80077b2:	4b10      	ldr	r3, [pc, #64]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	0a1b      	lsrs	r3, r3, #8
 80077b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	fb03 f202 	mul.w	r2, r3, r2
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80077ca:	4b0a      	ldr	r3, [pc, #40]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	0e5b      	lsrs	r3, r3, #25
 80077d0:	f003 0303 	and.w	r3, r3, #3
 80077d4:	3301      	adds	r3, #1
 80077d6:	005b      	lsls	r3, r3, #1
 80077d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80077e4:	69bb      	ldr	r3, [r7, #24]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3724      	adds	r7, #36	; 0x24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	40021000 	.word	0x40021000
 80077f8:	0800db54 	.word	0x0800db54
 80077fc:	00f42400 	.word	0x00f42400
 8007800:	007a1200 	.word	0x007a1200

08007804 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007804:	b480      	push	{r7}
 8007806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007808:	4b03      	ldr	r3, [pc, #12]	; (8007818 <HAL_RCC_GetHCLKFreq+0x14>)
 800780a:	681b      	ldr	r3, [r3, #0]
}
 800780c:	4618      	mov	r0, r3
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	20000000 	.word	0x20000000

0800781c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007824:	2300      	movs	r3, #0
 8007826:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007828:	4b2a      	ldr	r3, [pc, #168]	; (80078d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800782a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d003      	beq.n	800783c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007834:	f7ff f9d2 	bl	8006bdc <HAL_PWREx_GetVoltageRange>
 8007838:	6178      	str	r0, [r7, #20]
 800783a:	e014      	b.n	8007866 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800783c:	4b25      	ldr	r3, [pc, #148]	; (80078d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800783e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007840:	4a24      	ldr	r2, [pc, #144]	; (80078d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007846:	6593      	str	r3, [r2, #88]	; 0x58
 8007848:	4b22      	ldr	r3, [pc, #136]	; (80078d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800784a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007850:	60fb      	str	r3, [r7, #12]
 8007852:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007854:	f7ff f9c2 	bl	8006bdc <HAL_PWREx_GetVoltageRange>
 8007858:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800785a:	4b1e      	ldr	r3, [pc, #120]	; (80078d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800785c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785e:	4a1d      	ldr	r2, [pc, #116]	; (80078d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007864:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800786c:	d10b      	bne.n	8007886 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2b80      	cmp	r3, #128	; 0x80
 8007872:	d919      	bls.n	80078a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2ba0      	cmp	r3, #160	; 0xa0
 8007878:	d902      	bls.n	8007880 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800787a:	2302      	movs	r3, #2
 800787c:	613b      	str	r3, [r7, #16]
 800787e:	e013      	b.n	80078a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007880:	2301      	movs	r3, #1
 8007882:	613b      	str	r3, [r7, #16]
 8007884:	e010      	b.n	80078a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b80      	cmp	r3, #128	; 0x80
 800788a:	d902      	bls.n	8007892 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800788c:	2303      	movs	r3, #3
 800788e:	613b      	str	r3, [r7, #16]
 8007890:	e00a      	b.n	80078a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b80      	cmp	r3, #128	; 0x80
 8007896:	d102      	bne.n	800789e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007898:	2302      	movs	r3, #2
 800789a:	613b      	str	r3, [r7, #16]
 800789c:	e004      	b.n	80078a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2b70      	cmp	r3, #112	; 0x70
 80078a2:	d101      	bne.n	80078a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80078a4:	2301      	movs	r3, #1
 80078a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80078a8:	4b0b      	ldr	r3, [pc, #44]	; (80078d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f023 0207 	bic.w	r2, r3, #7
 80078b0:	4909      	ldr	r1, [pc, #36]	; (80078d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80078b8:	4b07      	ldr	r3, [pc, #28]	; (80078d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0307 	and.w	r3, r3, #7
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d001      	beq.n	80078ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e000      	b.n	80078cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	40021000 	.word	0x40021000
 80078d8:	40022000 	.word	0x40022000

080078dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80078e4:	2300      	movs	r3, #0
 80078e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80078e8:	2300      	movs	r3, #0
 80078ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d031      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007900:	d01a      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007902:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007906:	d814      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007908:	2b00      	cmp	r3, #0
 800790a:	d009      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800790c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007910:	d10f      	bne.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007912:	4b5d      	ldr	r3, [pc, #372]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	4a5c      	ldr	r2, [pc, #368]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800791c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800791e:	e00c      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	3304      	adds	r3, #4
 8007924:	2100      	movs	r1, #0
 8007926:	4618      	mov	r0, r3
 8007928:	f000 fa22 	bl	8007d70 <RCCEx_PLLSAI1_Config>
 800792c:	4603      	mov	r3, r0
 800792e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007930:	e003      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	74fb      	strb	r3, [r7, #19]
      break;
 8007936:	e000      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800793a:	7cfb      	ldrb	r3, [r7, #19]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10b      	bne.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007940:	4b51      	ldr	r3, [pc, #324]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007946:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800794e:	494e      	ldr	r1, [pc, #312]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007950:	4313      	orrs	r3, r2
 8007952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007956:	e001      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007958:	7cfb      	ldrb	r3, [r7, #19]
 800795a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 809e 	beq.w	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800796a:	2300      	movs	r3, #0
 800796c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800796e:	4b46      	ldr	r3, [pc, #280]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800797a:	2301      	movs	r3, #1
 800797c:	e000      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800797e:	2300      	movs	r3, #0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00d      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007984:	4b40      	ldr	r3, [pc, #256]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007988:	4a3f      	ldr	r2, [pc, #252]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800798a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800798e:	6593      	str	r3, [r2, #88]	; 0x58
 8007990:	4b3d      	ldr	r3, [pc, #244]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007998:	60bb      	str	r3, [r7, #8]
 800799a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800799c:	2301      	movs	r3, #1
 800799e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079a0:	4b3a      	ldr	r3, [pc, #232]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a39      	ldr	r2, [pc, #228]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80079a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079ac:	f7fb fe42 	bl	8003634 <HAL_GetTick>
 80079b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80079b2:	e009      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079b4:	f7fb fe3e 	bl	8003634 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d902      	bls.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	74fb      	strb	r3, [r7, #19]
        break;
 80079c6:	e005      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80079c8:	4b30      	ldr	r3, [pc, #192]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d0ef      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80079d4:	7cfb      	ldrb	r3, [r7, #19]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d15a      	bne.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80079da:	4b2b      	ldr	r3, [pc, #172]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80079dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d01e      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d019      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80079f6:	4b24      	ldr	r3, [pc, #144]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80079f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a00:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a02:	4b21      	ldr	r3, [pc, #132]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a08:	4a1f      	ldr	r2, [pc, #124]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a12:	4b1d      	ldr	r3, [pc, #116]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a18:	4a1b      	ldr	r2, [pc, #108]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a22:	4a19      	ldr	r2, [pc, #100]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d016      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a34:	f7fb fdfe 	bl	8003634 <HAL_GetTick>
 8007a38:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a3a:	e00b      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a3c:	f7fb fdfa 	bl	8003634 <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d902      	bls.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	74fb      	strb	r3, [r7, #19]
            break;
 8007a52:	e006      	b.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a54:	4b0c      	ldr	r3, [pc, #48]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0ec      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007a62:	7cfb      	ldrb	r3, [r7, #19]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10b      	bne.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a68:	4b07      	ldr	r3, [pc, #28]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a76:	4904      	ldr	r1, [pc, #16]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007a7e:	e009      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a80:	7cfb      	ldrb	r3, [r7, #19]
 8007a82:	74bb      	strb	r3, [r7, #18]
 8007a84:	e006      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007a86:	bf00      	nop
 8007a88:	40021000 	.word	0x40021000
 8007a8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a90:	7cfb      	ldrb	r3, [r7, #19]
 8007a92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a94:	7c7b      	ldrb	r3, [r7, #17]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d105      	bne.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a9a:	4b8d      	ldr	r3, [pc, #564]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a9e:	4a8c      	ldr	r2, [pc, #560]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aa4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00a      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ab2:	4b87      	ldr	r3, [pc, #540]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab8:	f023 0203 	bic.w	r2, r3, #3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a1b      	ldr	r3, [r3, #32]
 8007ac0:	4983      	ldr	r1, [pc, #524]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0302 	and.w	r3, r3, #2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00a      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ad4:	4b7e      	ldr	r3, [pc, #504]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ada:	f023 020c 	bic.w	r2, r3, #12
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae2:	497b      	ldr	r1, [pc, #492]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0304 	and.w	r3, r3, #4
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00a      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007af6:	4b76      	ldr	r3, [pc, #472]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007afc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b04:	4972      	ldr	r1, [pc, #456]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0320 	and.w	r3, r3, #32
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00a      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b18:	4b6d      	ldr	r3, [pc, #436]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b26:	496a      	ldr	r1, [pc, #424]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b3a:	4b65      	ldr	r3, [pc, #404]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b48:	4961      	ldr	r1, [pc, #388]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00a      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b5c:	4b5c      	ldr	r3, [pc, #368]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6a:	4959      	ldr	r1, [pc, #356]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b7e:	4b54      	ldr	r3, [pc, #336]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8c:	4950      	ldr	r1, [pc, #320]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00a      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ba0:	4b4b      	ldr	r3, [pc, #300]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bae:	4948      	ldr	r1, [pc, #288]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00a      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007bc2:	4b43      	ldr	r3, [pc, #268]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd0:	493f      	ldr	r1, [pc, #252]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d028      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007be4:	4b3a      	ldr	r3, [pc, #232]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bf2:	4937      	ldr	r1, [pc, #220]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c02:	d106      	bne.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c04:	4b32      	ldr	r3, [pc, #200]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	4a31      	ldr	r2, [pc, #196]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c0e:	60d3      	str	r3, [r2, #12]
 8007c10:	e011      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c1a:	d10c      	bne.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3304      	adds	r3, #4
 8007c20:	2101      	movs	r1, #1
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 f8a4 	bl	8007d70 <RCCEx_PLLSAI1_Config>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007c2c:	7cfb      	ldrb	r3, [r7, #19]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d001      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8007c32:	7cfb      	ldrb	r3, [r7, #19]
 8007c34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d028      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c42:	4b23      	ldr	r3, [pc, #140]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c50:	491f      	ldr	r1, [pc, #124]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c60:	d106      	bne.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c62:	4b1b      	ldr	r3, [pc, #108]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	4a1a      	ldr	r2, [pc, #104]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007c68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c6c:	60d3      	str	r3, [r2, #12]
 8007c6e:	e011      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c78:	d10c      	bne.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	2101      	movs	r1, #1
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 f875 	bl	8007d70 <RCCEx_PLLSAI1_Config>
 8007c86:	4603      	mov	r3, r0
 8007c88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007c8a:	7cfb      	ldrb	r3, [r7, #19]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d001      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007c90:	7cfb      	ldrb	r3, [r7, #19]
 8007c92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d02b      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ca0:	4b0b      	ldr	r3, [pc, #44]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cae:	4908      	ldr	r1, [pc, #32]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cbe:	d109      	bne.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cc0:	4b03      	ldr	r3, [pc, #12]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	4a02      	ldr	r2, [pc, #8]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cca:	60d3      	str	r3, [r2, #12]
 8007ccc:	e014      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007cce:	bf00      	nop
 8007cd0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cdc:	d10c      	bne.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 f843 	bl	8007d70 <RCCEx_PLLSAI1_Config>
 8007cea:	4603      	mov	r3, r0
 8007cec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007cee:	7cfb      	ldrb	r3, [r7, #19]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d001      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8007cf4:	7cfb      	ldrb	r3, [r7, #19]
 8007cf6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d01c      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d04:	4b19      	ldr	r3, [pc, #100]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d12:	4916      	ldr	r1, [pc, #88]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d22:	d10c      	bne.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	3304      	adds	r3, #4
 8007d28:	2102      	movs	r1, #2
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 f820 	bl	8007d70 <RCCEx_PLLSAI1_Config>
 8007d30:	4603      	mov	r3, r0
 8007d32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d34:	7cfb      	ldrb	r3, [r7, #19]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8007d3a:	7cfb      	ldrb	r3, [r7, #19]
 8007d3c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007d4a:	4b08      	ldr	r3, [pc, #32]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d50:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d58:	4904      	ldr	r1, [pc, #16]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007d60:	7cbb      	ldrb	r3, [r7, #18]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	40021000 	.word	0x40021000

08007d70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007d7e:	4b74      	ldr	r3, [pc, #464]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f003 0303 	and.w	r3, r3, #3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d018      	beq.n	8007dbc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007d8a:	4b71      	ldr	r3, [pc, #452]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	f003 0203 	and.w	r2, r3, #3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d10d      	bne.n	8007db6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
       ||
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d009      	beq.n	8007db6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007da2:	4b6b      	ldr	r3, [pc, #428]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	091b      	lsrs	r3, r3, #4
 8007da8:	f003 0307 	and.w	r3, r3, #7
 8007dac:	1c5a      	adds	r2, r3, #1
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685b      	ldr	r3, [r3, #4]
       ||
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d047      	beq.n	8007e46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	73fb      	strb	r3, [r7, #15]
 8007dba:	e044      	b.n	8007e46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d018      	beq.n	8007df6 <RCCEx_PLLSAI1_Config+0x86>
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	d825      	bhi.n	8007e14 <RCCEx_PLLSAI1_Config+0xa4>
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d002      	beq.n	8007dd2 <RCCEx_PLLSAI1_Config+0x62>
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d009      	beq.n	8007de4 <RCCEx_PLLSAI1_Config+0x74>
 8007dd0:	e020      	b.n	8007e14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007dd2:	4b5f      	ldr	r3, [pc, #380]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d11d      	bne.n	8007e1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007de2:	e01a      	b.n	8007e1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007de4:	4b5a      	ldr	r3, [pc, #360]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d116      	bne.n	8007e1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007df4:	e013      	b.n	8007e1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007df6:	4b56      	ldr	r3, [pc, #344]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10f      	bne.n	8007e22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007e02:	4b53      	ldr	r3, [pc, #332]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d109      	bne.n	8007e22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e12:	e006      	b.n	8007e22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	73fb      	strb	r3, [r7, #15]
      break;
 8007e18:	e004      	b.n	8007e24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007e1a:	bf00      	nop
 8007e1c:	e002      	b.n	8007e24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007e1e:	bf00      	nop
 8007e20:	e000      	b.n	8007e24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007e22:	bf00      	nop
    }

    if(status == HAL_OK)
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10d      	bne.n	8007e46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007e2a:	4b49      	ldr	r3, [pc, #292]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6819      	ldr	r1, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	011b      	lsls	r3, r3, #4
 8007e3e:	430b      	orrs	r3, r1
 8007e40:	4943      	ldr	r1, [pc, #268]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d17c      	bne.n	8007f46 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007e4c:	4b40      	ldr	r3, [pc, #256]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a3f      	ldr	r2, [pc, #252]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e58:	f7fb fbec 	bl	8003634 <HAL_GetTick>
 8007e5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007e5e:	e009      	b.n	8007e74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e60:	f7fb fbe8 	bl	8003634 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d902      	bls.n	8007e74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	73fb      	strb	r3, [r7, #15]
        break;
 8007e72:	e005      	b.n	8007e80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007e74:	4b36      	ldr	r3, [pc, #216]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1ef      	bne.n	8007e60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d15f      	bne.n	8007f46 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d110      	bne.n	8007eae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007e8c:	4b30      	ldr	r3, [pc, #192]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007e94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6892      	ldr	r2, [r2, #8]
 8007e9c:	0211      	lsls	r1, r2, #8
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	68d2      	ldr	r2, [r2, #12]
 8007ea2:	06d2      	lsls	r2, r2, #27
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	492a      	ldr	r1, [pc, #168]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	610b      	str	r3, [r1, #16]
 8007eac:	e027      	b.n	8007efe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d112      	bne.n	8007eda <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007eb4:	4b26      	ldr	r3, [pc, #152]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007ebc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	6892      	ldr	r2, [r2, #8]
 8007ec4:	0211      	lsls	r1, r2, #8
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	6912      	ldr	r2, [r2, #16]
 8007eca:	0852      	lsrs	r2, r2, #1
 8007ecc:	3a01      	subs	r2, #1
 8007ece:	0552      	lsls	r2, r2, #21
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	491f      	ldr	r1, [pc, #124]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	610b      	str	r3, [r1, #16]
 8007ed8:	e011      	b.n	8007efe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007eda:	4b1d      	ldr	r3, [pc, #116]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007ee2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	6892      	ldr	r2, [r2, #8]
 8007eea:	0211      	lsls	r1, r2, #8
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	6952      	ldr	r2, [r2, #20]
 8007ef0:	0852      	lsrs	r2, r2, #1
 8007ef2:	3a01      	subs	r2, #1
 8007ef4:	0652      	lsls	r2, r2, #25
 8007ef6:	430a      	orrs	r2, r1
 8007ef8:	4915      	ldr	r1, [pc, #84]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007efa:	4313      	orrs	r3, r2
 8007efc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007efe:	4b14      	ldr	r3, [pc, #80]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a13      	ldr	r2, [pc, #76]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f08:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f0a:	f7fb fb93 	bl	8003634 <HAL_GetTick>
 8007f0e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007f10:	e009      	b.n	8007f26 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f12:	f7fb fb8f 	bl	8003634 <HAL_GetTick>
 8007f16:	4602      	mov	r2, r0
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d902      	bls.n	8007f26 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	73fb      	strb	r3, [r7, #15]
          break;
 8007f24:	e005      	b.n	8007f32 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007f26:	4b0a      	ldr	r3, [pc, #40]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d0ef      	beq.n	8007f12 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d106      	bne.n	8007f46 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007f38:	4b05      	ldr	r3, [pc, #20]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f3a:	691a      	ldr	r2, [r3, #16]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	4903      	ldr	r1, [pc, #12]	; (8007f50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	40021000 	.word	0x40021000

08007f54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e095      	b.n	8008092 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d108      	bne.n	8007f80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f76:	d009      	beq.n	8007f8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	61da      	str	r2, [r3, #28]
 8007f7e:	e005      	b.n	8007f8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d106      	bne.n	8007fac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7fb f936 	bl	8003218 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fc2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fcc:	d902      	bls.n	8007fd4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60fb      	str	r3, [r7, #12]
 8007fd2:	e002      	b.n	8007fda <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fd8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007fe2:	d007      	beq.n	8007ff4 <HAL_SPI_Init+0xa0>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fec:	d002      	beq.n	8007ff4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008004:	431a      	orrs	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	f003 0302 	and.w	r3, r3, #2
 800800e:	431a      	orrs	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	695b      	ldr	r3, [r3, #20]
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	431a      	orrs	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	69db      	ldr	r3, [r3, #28]
 8008028:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800802c:	431a      	orrs	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008036:	ea42 0103 	orr.w	r1, r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	430a      	orrs	r2, r1
 8008048:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	0c1b      	lsrs	r3, r3, #16
 8008050:	f003 0204 	and.w	r2, r3, #4
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008058:	f003 0310 	and.w	r3, r3, #16
 800805c:	431a      	orrs	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008062:	f003 0308 	and.w	r3, r3, #8
 8008066:	431a      	orrs	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008070:	ea42 0103 	orr.w	r1, r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	430a      	orrs	r2, r1
 8008080:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b088      	sub	sp, #32
 800809e:	af00      	add	r7, sp, #0
 80080a0:	60f8      	str	r0, [r7, #12]
 80080a2:	60b9      	str	r1, [r7, #8]
 80080a4:	603b      	str	r3, [r7, #0]
 80080a6:	4613      	mov	r3, r2
 80080a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d101      	bne.n	80080bc <HAL_SPI_Transmit+0x22>
 80080b8:	2302      	movs	r3, #2
 80080ba:	e158      	b.n	800836e <HAL_SPI_Transmit+0x2d4>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080c4:	f7fb fab6 	bl	8003634 <HAL_GetTick>
 80080c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80080ca:	88fb      	ldrh	r3, [r7, #6]
 80080cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d002      	beq.n	80080e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80080da:	2302      	movs	r3, #2
 80080dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80080de:	e13d      	b.n	800835c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d002      	beq.n	80080ec <HAL_SPI_Transmit+0x52>
 80080e6:	88fb      	ldrh	r3, [r7, #6]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d102      	bne.n	80080f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80080f0:	e134      	b.n	800835c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2203      	movs	r2, #3
 80080f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	88fa      	ldrh	r2, [r7, #6]
 800810a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	88fa      	ldrh	r2, [r7, #6]
 8008110:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2200      	movs	r2, #0
 800812c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800813c:	d10f      	bne.n	800815e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800814c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800815c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008168:	2b40      	cmp	r3, #64	; 0x40
 800816a:	d007      	beq.n	800817c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800817a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008184:	d94b      	bls.n	800821e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d002      	beq.n	8008194 <HAL_SPI_Transmit+0xfa>
 800818e:	8afb      	ldrh	r3, [r7, #22]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d13e      	bne.n	8008212 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008198:	881a      	ldrh	r2, [r3, #0]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a4:	1c9a      	adds	r2, r3, #2
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	3b01      	subs	r3, #1
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80081b8:	e02b      	b.n	8008212 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f003 0302 	and.w	r3, r3, #2
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d112      	bne.n	80081ee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081cc:	881a      	ldrh	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d8:	1c9a      	adds	r2, r3, #2
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	3b01      	subs	r3, #1
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081ec:	e011      	b.n	8008212 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081ee:	f7fb fa21 	bl	8003634 <HAL_GetTick>
 80081f2:	4602      	mov	r2, r0
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d803      	bhi.n	8008206 <HAL_SPI_Transmit+0x16c>
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008204:	d102      	bne.n	800820c <HAL_SPI_Transmit+0x172>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d102      	bne.n	8008212 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008210:	e0a4      	b.n	800835c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008216:	b29b      	uxth	r3, r3
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1ce      	bne.n	80081ba <HAL_SPI_Transmit+0x120>
 800821c:	e07c      	b.n	8008318 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d002      	beq.n	800822c <HAL_SPI_Transmit+0x192>
 8008226:	8afb      	ldrh	r3, [r7, #22]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d170      	bne.n	800830e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008230:	b29b      	uxth	r3, r3
 8008232:	2b01      	cmp	r3, #1
 8008234:	d912      	bls.n	800825c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823a:	881a      	ldrh	r2, [r3, #0]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008246:	1c9a      	adds	r2, r3, #2
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008250:	b29b      	uxth	r3, r3
 8008252:	3b02      	subs	r3, #2
 8008254:	b29a      	uxth	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	87da      	strh	r2, [r3, #62]	; 0x3e
 800825a:	e058      	b.n	800830e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	330c      	adds	r3, #12
 8008266:	7812      	ldrb	r2, [r2, #0]
 8008268:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826e:	1c5a      	adds	r2, r3, #1
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008278:	b29b      	uxth	r3, r3
 800827a:	3b01      	subs	r3, #1
 800827c:	b29a      	uxth	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008282:	e044      	b.n	800830e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f003 0302 	and.w	r3, r3, #2
 800828e:	2b02      	cmp	r3, #2
 8008290:	d12b      	bne.n	80082ea <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008296:	b29b      	uxth	r3, r3
 8008298:	2b01      	cmp	r3, #1
 800829a:	d912      	bls.n	80082c2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a0:	881a      	ldrh	r2, [r3, #0]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ac:	1c9a      	adds	r2, r3, #2
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	3b02      	subs	r3, #2
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082c0:	e025      	b.n	800830e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	330c      	adds	r3, #12
 80082cc:	7812      	ldrb	r2, [r2, #0]
 80082ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d4:	1c5a      	adds	r2, r3, #1
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082de:	b29b      	uxth	r3, r3
 80082e0:	3b01      	subs	r3, #1
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082e8:	e011      	b.n	800830e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082ea:	f7fb f9a3 	bl	8003634 <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d803      	bhi.n	8008302 <HAL_SPI_Transmit+0x268>
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008300:	d102      	bne.n	8008308 <HAL_SPI_Transmit+0x26e>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d102      	bne.n	800830e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800830c:	e026      	b.n	800835c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008312:	b29b      	uxth	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1b5      	bne.n	8008284 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008318:	69ba      	ldr	r2, [r7, #24]
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f000 fb5b 	bl	80089d8 <SPI_EndRxTxTransaction>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2220      	movs	r2, #32
 800832c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10a      	bne.n	800834c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008336:	2300      	movs	r3, #0
 8008338:	613b      	str	r3, [r7, #16]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	613b      	str	r3, [r7, #16]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	613b      	str	r3, [r7, #16]
 800834a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008350:	2b00      	cmp	r3, #0
 8008352:	d002      	beq.n	800835a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	77fb      	strb	r3, [r7, #31]
 8008358:	e000      	b.n	800835c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800835a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800836c:	7ffb      	ldrb	r3, [r7, #31]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3720      	adds	r7, #32
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b08a      	sub	sp, #40	; 0x28
 800837a:	af00      	add	r7, sp, #0
 800837c:	60f8      	str	r0, [r7, #12]
 800837e:	60b9      	str	r1, [r7, #8]
 8008380:	607a      	str	r2, [r7, #4]
 8008382:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008384:	2301      	movs	r3, #1
 8008386:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008388:	2300      	movs	r3, #0
 800838a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008394:	2b01      	cmp	r3, #1
 8008396:	d101      	bne.n	800839c <HAL_SPI_TransmitReceive+0x26>
 8008398:	2302      	movs	r3, #2
 800839a:	e1fb      	b.n	8008794 <HAL_SPI_TransmitReceive+0x41e>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083a4:	f7fb f946 	bl	8003634 <HAL_GetTick>
 80083a8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80083b0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80083b8:	887b      	ldrh	r3, [r7, #2]
 80083ba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80083bc:	887b      	ldrh	r3, [r7, #2]
 80083be:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80083c0:	7efb      	ldrb	r3, [r7, #27]
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d00e      	beq.n	80083e4 <HAL_SPI_TransmitReceive+0x6e>
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083cc:	d106      	bne.n	80083dc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d102      	bne.n	80083dc <HAL_SPI_TransmitReceive+0x66>
 80083d6:	7efb      	ldrb	r3, [r7, #27]
 80083d8:	2b04      	cmp	r3, #4
 80083da:	d003      	beq.n	80083e4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80083dc:	2302      	movs	r3, #2
 80083de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80083e2:	e1cd      	b.n	8008780 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d005      	beq.n	80083f6 <HAL_SPI_TransmitReceive+0x80>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d002      	beq.n	80083f6 <HAL_SPI_TransmitReceive+0x80>
 80083f0:	887b      	ldrh	r3, [r7, #2]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d103      	bne.n	80083fe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80083fc:	e1c0      	b.n	8008780 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b04      	cmp	r3, #4
 8008408:	d003      	beq.n	8008412 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2205      	movs	r2, #5
 800840e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	887a      	ldrh	r2, [r7, #2]
 8008422:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	887a      	ldrh	r2, [r7, #2]
 800842a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	887a      	ldrh	r2, [r7, #2]
 8008438:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	887a      	ldrh	r2, [r7, #2]
 800843e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008454:	d802      	bhi.n	800845c <HAL_SPI_TransmitReceive+0xe6>
 8008456:	8a3b      	ldrh	r3, [r7, #16]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d908      	bls.n	800846e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800846a:	605a      	str	r2, [r3, #4]
 800846c:	e007      	b.n	800847e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	685a      	ldr	r2, [r3, #4]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800847c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008488:	2b40      	cmp	r3, #64	; 0x40
 800848a:	d007      	beq.n	800849c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800849a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084a4:	d97c      	bls.n	80085a0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d002      	beq.n	80084b4 <HAL_SPI_TransmitReceive+0x13e>
 80084ae:	8a7b      	ldrh	r3, [r7, #18]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d169      	bne.n	8008588 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b8:	881a      	ldrh	r2, [r3, #0]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c4:	1c9a      	adds	r2, r3, #2
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	3b01      	subs	r3, #1
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084d8:	e056      	b.n	8008588 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	f003 0302 	and.w	r3, r3, #2
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d11b      	bne.n	8008520 <HAL_SPI_TransmitReceive+0x1aa>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d016      	beq.n	8008520 <HAL_SPI_TransmitReceive+0x1aa>
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d113      	bne.n	8008520 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fc:	881a      	ldrh	r2, [r3, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008508:	1c9a      	adds	r2, r3, #2
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008512:	b29b      	uxth	r3, r3
 8008514:	3b01      	subs	r3, #1
 8008516:	b29a      	uxth	r2, r3
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800851c:	2300      	movs	r3, #0
 800851e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	2b01      	cmp	r3, #1
 800852c:	d11c      	bne.n	8008568 <HAL_SPI_TransmitReceive+0x1f2>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008534:	b29b      	uxth	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	d016      	beq.n	8008568 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68da      	ldr	r2, [r3, #12]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008544:	b292      	uxth	r2, r2
 8008546:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854c:	1c9a      	adds	r2, r3, #2
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008558:	b29b      	uxth	r3, r3
 800855a:	3b01      	subs	r3, #1
 800855c:	b29a      	uxth	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008564:	2301      	movs	r3, #1
 8008566:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008568:	f7fb f864 	bl	8003634 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008574:	429a      	cmp	r2, r3
 8008576:	d807      	bhi.n	8008588 <HAL_SPI_TransmitReceive+0x212>
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800857e:	d003      	beq.n	8008588 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008586:	e0fb      	b.n	8008780 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800858c:	b29b      	uxth	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1a3      	bne.n	80084da <HAL_SPI_TransmitReceive+0x164>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008598:	b29b      	uxth	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d19d      	bne.n	80084da <HAL_SPI_TransmitReceive+0x164>
 800859e:	e0df      	b.n	8008760 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d003      	beq.n	80085b0 <HAL_SPI_TransmitReceive+0x23a>
 80085a8:	8a7b      	ldrh	r3, [r7, #18]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	f040 80cb 	bne.w	8008746 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d912      	bls.n	80085e0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085be:	881a      	ldrh	r2, [r3, #0]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ca:	1c9a      	adds	r2, r3, #2
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	3b02      	subs	r3, #2
 80085d8:	b29a      	uxth	r2, r3
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80085de:	e0b2      	b.n	8008746 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	330c      	adds	r3, #12
 80085ea:	7812      	ldrb	r2, [r2, #0]
 80085ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f2:	1c5a      	adds	r2, r3, #1
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	3b01      	subs	r3, #1
 8008600:	b29a      	uxth	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008606:	e09e      	b.n	8008746 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	f003 0302 	and.w	r3, r3, #2
 8008612:	2b02      	cmp	r3, #2
 8008614:	d134      	bne.n	8008680 <HAL_SPI_TransmitReceive+0x30a>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800861a:	b29b      	uxth	r3, r3
 800861c:	2b00      	cmp	r3, #0
 800861e:	d02f      	beq.n	8008680 <HAL_SPI_TransmitReceive+0x30a>
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	2b01      	cmp	r3, #1
 8008624:	d12c      	bne.n	8008680 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800862a:	b29b      	uxth	r3, r3
 800862c:	2b01      	cmp	r3, #1
 800862e:	d912      	bls.n	8008656 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008634:	881a      	ldrh	r2, [r3, #0]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008640:	1c9a      	adds	r2, r3, #2
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800864a:	b29b      	uxth	r3, r3
 800864c:	3b02      	subs	r3, #2
 800864e:	b29a      	uxth	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008654:	e012      	b.n	800867c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	330c      	adds	r3, #12
 8008660:	7812      	ldrb	r2, [r2, #0]
 8008662:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008668:	1c5a      	adds	r2, r3, #1
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008672:	b29b      	uxth	r3, r3
 8008674:	3b01      	subs	r3, #1
 8008676:	b29a      	uxth	r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800867c:	2300      	movs	r3, #0
 800867e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	2b01      	cmp	r3, #1
 800868c:	d148      	bne.n	8008720 <HAL_SPI_TransmitReceive+0x3aa>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008694:	b29b      	uxth	r3, r3
 8008696:	2b00      	cmp	r3, #0
 8008698:	d042      	beq.n	8008720 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d923      	bls.n	80086ee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68da      	ldr	r2, [r3, #12]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b0:	b292      	uxth	r2, r2
 80086b2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b8:	1c9a      	adds	r2, r3, #2
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	3b02      	subs	r3, #2
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d81f      	bhi.n	800871c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086ea:	605a      	str	r2, [r3, #4]
 80086ec:	e016      	b.n	800871c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f103 020c 	add.w	r2, r3, #12
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fa:	7812      	ldrb	r2, [r2, #0]
 80086fc:	b2d2      	uxtb	r2, r2
 80086fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008704:	1c5a      	adds	r2, r3, #1
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008710:	b29b      	uxth	r3, r3
 8008712:	3b01      	subs	r3, #1
 8008714:	b29a      	uxth	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800871c:	2301      	movs	r3, #1
 800871e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008720:	f7fa ff88 	bl	8003634 <HAL_GetTick>
 8008724:	4602      	mov	r2, r0
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800872c:	429a      	cmp	r2, r3
 800872e:	d803      	bhi.n	8008738 <HAL_SPI_TransmitReceive+0x3c2>
 8008730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008736:	d102      	bne.n	800873e <HAL_SPI_TransmitReceive+0x3c8>
 8008738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873a:	2b00      	cmp	r3, #0
 800873c:	d103      	bne.n	8008746 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008744:	e01c      	b.n	8008780 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800874a:	b29b      	uxth	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	f47f af5b 	bne.w	8008608 <HAL_SPI_TransmitReceive+0x292>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008758:	b29b      	uxth	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	f47f af54 	bne.w	8008608 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008760:	69fa      	ldr	r2, [r7, #28]
 8008762:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 f937 	bl	80089d8 <SPI_EndRxTxTransaction>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d006      	beq.n	800877e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2220      	movs	r2, #32
 800877a:	661a      	str	r2, [r3, #96]	; 0x60
 800877c:	e000      	b.n	8008780 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800877e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008790:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008794:	4618      	mov	r0, r3
 8008796:	3728      	adds	r7, #40	; 0x28
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b088      	sub	sp, #32
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	603b      	str	r3, [r7, #0]
 80087a8:	4613      	mov	r3, r2
 80087aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80087ac:	f7fa ff42 	bl	8003634 <HAL_GetTick>
 80087b0:	4602      	mov	r2, r0
 80087b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b4:	1a9b      	subs	r3, r3, r2
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	4413      	add	r3, r2
 80087ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80087bc:	f7fa ff3a 	bl	8003634 <HAL_GetTick>
 80087c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80087c2:	4b39      	ldr	r3, [pc, #228]	; (80088a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	015b      	lsls	r3, r3, #5
 80087c8:	0d1b      	lsrs	r3, r3, #20
 80087ca:	69fa      	ldr	r2, [r7, #28]
 80087cc:	fb02 f303 	mul.w	r3, r2, r3
 80087d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087d2:	e054      	b.n	800887e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087da:	d050      	beq.n	800887e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80087dc:	f7fa ff2a 	bl	8003634 <HAL_GetTick>
 80087e0:	4602      	mov	r2, r0
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	69fa      	ldr	r2, [r7, #28]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d902      	bls.n	80087f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d13d      	bne.n	800886e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	685a      	ldr	r2, [r3, #4]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008800:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800880a:	d111      	bne.n	8008830 <SPI_WaitFlagStateUntilTimeout+0x94>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008814:	d004      	beq.n	8008820 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800881e:	d107      	bne.n	8008830 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800882e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008838:	d10f      	bne.n	800885a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008858:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2201      	movs	r2, #1
 800885e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e017      	b.n	800889e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008874:	2300      	movs	r3, #0
 8008876:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	3b01      	subs	r3, #1
 800887c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	4013      	ands	r3, r2
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	429a      	cmp	r2, r3
 800888c:	bf0c      	ite	eq
 800888e:	2301      	moveq	r3, #1
 8008890:	2300      	movne	r3, #0
 8008892:	b2db      	uxtb	r3, r3
 8008894:	461a      	mov	r2, r3
 8008896:	79fb      	ldrb	r3, [r7, #7]
 8008898:	429a      	cmp	r2, r3
 800889a:	d19b      	bne.n	80087d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3720      	adds	r7, #32
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	20000000 	.word	0x20000000

080088ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b08a      	sub	sp, #40	; 0x28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
 80088b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80088be:	f7fa feb9 	bl	8003634 <HAL_GetTick>
 80088c2:	4602      	mov	r2, r0
 80088c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c6:	1a9b      	subs	r3, r3, r2
 80088c8:	683a      	ldr	r2, [r7, #0]
 80088ca:	4413      	add	r3, r2
 80088cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80088ce:	f7fa feb1 	bl	8003634 <HAL_GetTick>
 80088d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	330c      	adds	r3, #12
 80088da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80088dc:	4b3d      	ldr	r3, [pc, #244]	; (80089d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	4613      	mov	r3, r2
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	4413      	add	r3, r2
 80088e6:	00da      	lsls	r2, r3, #3
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	0d1b      	lsrs	r3, r3, #20
 80088ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ee:	fb02 f303 	mul.w	r3, r2, r3
 80088f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80088f4:	e060      	b.n	80089b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80088fc:	d107      	bne.n	800890e <SPI_WaitFifoStateUntilTimeout+0x62>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d104      	bne.n	800890e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	b2db      	uxtb	r3, r3
 800890a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800890c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008914:	d050      	beq.n	80089b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008916:	f7fa fe8d 	bl	8003634 <HAL_GetTick>
 800891a:	4602      	mov	r2, r0
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008922:	429a      	cmp	r2, r3
 8008924:	d902      	bls.n	800892c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008928:	2b00      	cmp	r3, #0
 800892a:	d13d      	bne.n	80089a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	685a      	ldr	r2, [r3, #4]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800893a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008944:	d111      	bne.n	800896a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800894e:	d004      	beq.n	800895a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008958:	d107      	bne.n	800896a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008968:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008972:	d10f      	bne.n	8008994 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008992:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e010      	b.n	80089ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d101      	bne.n	80089b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80089ae:	2300      	movs	r3, #0
 80089b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	3b01      	subs	r3, #1
 80089b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	689a      	ldr	r2, [r3, #8]
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	4013      	ands	r3, r2
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d196      	bne.n	80088f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3728      	adds	r7, #40	; 0x28
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	20000000 	.word	0x20000000

080089d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af02      	add	r7, sp, #8
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f7ff ff5b 	bl	80088ac <SPI_WaitFifoStateUntilTimeout>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d007      	beq.n	8008a0c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a00:	f043 0220 	orr.w	r2, r3, #32
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e027      	b.n	8008a5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	2200      	movs	r2, #0
 8008a14:	2180      	movs	r1, #128	; 0x80
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f7ff fec0 	bl	800879c <SPI_WaitFlagStateUntilTimeout>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d007      	beq.n	8008a32 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a26:	f043 0220 	orr.w	r2, r3, #32
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e014      	b.n	8008a5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f7ff ff34 	bl	80088ac <SPI_WaitFifoStateUntilTimeout>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d007      	beq.n	8008a5a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a4e:	f043 0220 	orr.w	r2, r3, #32
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e000      	b.n	8008a5c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e049      	b.n	8008b0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d106      	bne.n	8008a90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7fa fd06 	bl	800349c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2202      	movs	r2, #2
 8008a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	f000 f9c8 	bl	8008e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
	...

08008b14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d001      	beq.n	8008b2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e03b      	b.n	8008ba4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2202      	movs	r2, #2
 8008b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68da      	ldr	r2, [r3, #12]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f042 0201 	orr.w	r2, r2, #1
 8008b42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a19      	ldr	r2, [pc, #100]	; (8008bb0 <HAL_TIM_Base_Start_IT+0x9c>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d009      	beq.n	8008b62 <HAL_TIM_Base_Start_IT+0x4e>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b56:	d004      	beq.n	8008b62 <HAL_TIM_Base_Start_IT+0x4e>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a15      	ldr	r2, [pc, #84]	; (8008bb4 <HAL_TIM_Base_Start_IT+0xa0>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d115      	bne.n	8008b8e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	689a      	ldr	r2, [r3, #8]
 8008b68:	4b13      	ldr	r3, [pc, #76]	; (8008bb8 <HAL_TIM_Base_Start_IT+0xa4>)
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2b06      	cmp	r3, #6
 8008b72:	d015      	beq.n	8008ba0 <HAL_TIM_Base_Start_IT+0x8c>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b7a:	d011      	beq.n	8008ba0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f042 0201 	orr.w	r2, r2, #1
 8008b8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b8c:	e008      	b.n	8008ba0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f042 0201 	orr.w	r2, r2, #1
 8008b9c:	601a      	str	r2, [r3, #0]
 8008b9e:	e000      	b.n	8008ba2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ba0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	40012c00 	.word	0x40012c00
 8008bb4:	40014000 	.word	0x40014000
 8008bb8:	00010007 	.word	0x00010007

08008bbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	f003 0302 	and.w	r3, r3, #2
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d122      	bne.n	8008c18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	f003 0302 	and.w	r3, r3, #2
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d11b      	bne.n	8008c18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f06f 0202 	mvn.w	r2, #2
 8008be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	f003 0303 	and.w	r3, r3, #3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d003      	beq.n	8008c06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f905 	bl	8008e0e <HAL_TIM_IC_CaptureCallback>
 8008c04:	e005      	b.n	8008c12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f8f7 	bl	8008dfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7fa fa87 	bl	8003120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	f003 0304 	and.w	r3, r3, #4
 8008c22:	2b04      	cmp	r3, #4
 8008c24:	d122      	bne.n	8008c6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b04      	cmp	r3, #4
 8008c32:	d11b      	bne.n	8008c6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f06f 0204 	mvn.w	r2, #4
 8008c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2202      	movs	r2, #2
 8008c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f8db 	bl	8008e0e <HAL_TIM_IC_CaptureCallback>
 8008c58:	e005      	b.n	8008c66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f8cd 	bl	8008dfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7fa fa5d 	bl	8003120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	f003 0308 	and.w	r3, r3, #8
 8008c76:	2b08      	cmp	r3, #8
 8008c78:	d122      	bne.n	8008cc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	f003 0308 	and.w	r3, r3, #8
 8008c84:	2b08      	cmp	r3, #8
 8008c86:	d11b      	bne.n	8008cc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f06f 0208 	mvn.w	r2, #8
 8008c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2204      	movs	r2, #4
 8008c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	69db      	ldr	r3, [r3, #28]
 8008c9e:	f003 0303 	and.w	r3, r3, #3
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d003      	beq.n	8008cae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f8b1 	bl	8008e0e <HAL_TIM_IC_CaptureCallback>
 8008cac:	e005      	b.n	8008cba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f8a3 	bl	8008dfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7fa fa33 	bl	8003120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	f003 0310 	and.w	r3, r3, #16
 8008cca:	2b10      	cmp	r3, #16
 8008ccc:	d122      	bne.n	8008d14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	f003 0310 	and.w	r3, r3, #16
 8008cd8:	2b10      	cmp	r3, #16
 8008cda:	d11b      	bne.n	8008d14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f06f 0210 	mvn.w	r2, #16
 8008ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2208      	movs	r2, #8
 8008cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	69db      	ldr	r3, [r3, #28]
 8008cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f887 	bl	8008e0e <HAL_TIM_IC_CaptureCallback>
 8008d00:	e005      	b.n	8008d0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f879 	bl	8008dfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7fa fa09 	bl	8003120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	f003 0301 	and.w	r3, r3, #1
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d10e      	bne.n	8008d40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	f003 0301 	and.w	r3, r3, #1
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d107      	bne.n	8008d40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f06f 0201 	mvn.w	r2, #1
 8008d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f7fa f9dc 	bl	80030f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d4a:	2b80      	cmp	r3, #128	; 0x80
 8008d4c:	d10e      	bne.n	8008d6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d58:	2b80      	cmp	r3, #128	; 0x80
 8008d5a:	d107      	bne.n	8008d6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f93a 	bl	8008fe0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d7a:	d10e      	bne.n	8008d9a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d86:	2b80      	cmp	r3, #128	; 0x80
 8008d88:	d107      	bne.n	8008d9a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f92d 	bl	8008ff4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da4:	2b40      	cmp	r3, #64	; 0x40
 8008da6:	d10e      	bne.n	8008dc6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008db2:	2b40      	cmp	r3, #64	; 0x40
 8008db4:	d107      	bne.n	8008dc6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f82e 	bl	8008e22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	f003 0320 	and.w	r3, r3, #32
 8008dd0:	2b20      	cmp	r3, #32
 8008dd2:	d10e      	bne.n	8008df2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	f003 0320 	and.w	r3, r3, #32
 8008dde:	2b20      	cmp	r3, #32
 8008de0:	d107      	bne.n	8008df2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f06f 0220 	mvn.w	r2, #32
 8008dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f8ed 	bl	8008fcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008df2:	bf00      	nop
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b083      	sub	sp, #12
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e02:	bf00      	nop
 8008e04:	370c      	adds	r7, #12
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b083      	sub	sp, #12
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e16:	bf00      	nop
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr

08008e22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e22:	b480      	push	{r7}
 8008e24:	b083      	sub	sp, #12
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e2a:	bf00      	nop
 8008e2c:	370c      	adds	r7, #12
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
	...

08008e38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a2a      	ldr	r2, [pc, #168]	; (8008ef4 <TIM_Base_SetConfig+0xbc>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d003      	beq.n	8008e58 <TIM_Base_SetConfig+0x20>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e56:	d108      	bne.n	8008e6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a21      	ldr	r2, [pc, #132]	; (8008ef4 <TIM_Base_SetConfig+0xbc>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d00b      	beq.n	8008e8a <TIM_Base_SetConfig+0x52>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e78:	d007      	beq.n	8008e8a <TIM_Base_SetConfig+0x52>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a1e      	ldr	r2, [pc, #120]	; (8008ef8 <TIM_Base_SetConfig+0xc0>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d003      	beq.n	8008e8a <TIM_Base_SetConfig+0x52>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a1d      	ldr	r2, [pc, #116]	; (8008efc <TIM_Base_SetConfig+0xc4>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d108      	bne.n	8008e9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	689a      	ldr	r2, [r3, #8]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a0c      	ldr	r2, [pc, #48]	; (8008ef4 <TIM_Base_SetConfig+0xbc>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d007      	beq.n	8008ed8 <TIM_Base_SetConfig+0xa0>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a0b      	ldr	r2, [pc, #44]	; (8008ef8 <TIM_Base_SetConfig+0xc0>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d003      	beq.n	8008ed8 <TIM_Base_SetConfig+0xa0>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a0a      	ldr	r2, [pc, #40]	; (8008efc <TIM_Base_SetConfig+0xc4>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d103      	bne.n	8008ee0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	691a      	ldr	r2, [r3, #16]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	615a      	str	r2, [r3, #20]
}
 8008ee6:	bf00      	nop
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	40012c00 	.word	0x40012c00
 8008ef8:	40014000 	.word	0x40014000
 8008efc:	40014400 	.word	0x40014400

08008f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d101      	bne.n	8008f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f14:	2302      	movs	r3, #2
 8008f16:	e04f      	b.n	8008fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2202      	movs	r2, #2
 8008f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a21      	ldr	r2, [pc, #132]	; (8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d108      	bne.n	8008f54 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008f48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a14      	ldr	r2, [pc, #80]	; (8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d009      	beq.n	8008f8c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f80:	d004      	beq.n	8008f8c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a10      	ldr	r2, [pc, #64]	; (8008fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d10c      	bne.n	8008fa6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	40012c00 	.word	0x40012c00
 8008fc8:	40014000 	.word	0x40014000

08008fcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009008:	b084      	sub	sp, #16
 800900a:	b480      	push	{r7}
 800900c:	b083      	sub	sp, #12
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	f107 0014 	add.w	r0, r7, #20
 8009016:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	b004      	add	sp, #16
 8009028:	4770      	bx	lr

0800902a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800902a:	b480      	push	{r7}
 800902c:	b085      	sub	sp, #20
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800903a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800903e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	b29a      	uxth	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3714      	adds	r7, #20
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009060:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009064:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800906c:	b29a      	uxth	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	b29b      	uxth	r3, r3
 8009072:	43db      	mvns	r3, r3
 8009074:	b29b      	uxth	r3, r3
 8009076:	4013      	ands	r3, r2
 8009078:	b29a      	uxth	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3714      	adds	r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800908e:	b480      	push	{r7}
 8009090:	b083      	sub	sp, #12
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
 8009096:	460b      	mov	r3, r1
 8009098:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80090a8:	b084      	sub	sp, #16
 80090aa:	b480      	push	{r7}
 80090ac:	b083      	sub	sp, #12
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	f107 0014 	add.w	r0, r7, #20
 80090b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	b004      	add	sp, #16
 80090e8:	4770      	bx	lr
	...

080090ec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b09d      	sub	sp, #116	; 0x74
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4413      	add	r3, r2
 8009106:	881b      	ldrh	r3, [r3, #0]
 8009108:	b29b      	uxth	r3, r3
 800910a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800910e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009112:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	78db      	ldrb	r3, [r3, #3]
 800911a:	2b03      	cmp	r3, #3
 800911c:	d81f      	bhi.n	800915e <USB_ActivateEndpoint+0x72>
 800911e:	a201      	add	r2, pc, #4	; (adr r2, 8009124 <USB_ActivateEndpoint+0x38>)
 8009120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009124:	08009135 	.word	0x08009135
 8009128:	08009151 	.word	0x08009151
 800912c:	08009167 	.word	0x08009167
 8009130:	08009143 	.word	0x08009143
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009134:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009138:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800913c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009140:	e012      	b.n	8009168 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009142:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009146:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800914a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800914e:	e00b      	b.n	8009168 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009150:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009154:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009158:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800915c:	e004      	b.n	8009168 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009164:	e000      	b.n	8009168 <USB_ActivateEndpoint+0x7c>
      break;
 8009166:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	441a      	add	r2, r3
 8009172:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800917a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800917e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009186:	b29b      	uxth	r3, r3
 8009188:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4413      	add	r3, r2
 8009194:	881b      	ldrh	r3, [r3, #0]
 8009196:	b29b      	uxth	r3, r3
 8009198:	b21b      	sxth	r3, r3
 800919a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800919e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091a2:	b21a      	sxth	r2, r3
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	b21b      	sxth	r3, r3
 80091aa:	4313      	orrs	r3, r2
 80091ac:	b21b      	sxth	r3, r3
 80091ae:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	441a      	add	r2, r3
 80091bc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80091c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	7b1b      	ldrb	r3, [r3, #12]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f040 816e 	bne.w	80094ba <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	785b      	ldrb	r3, [r3, #1]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 8084 	beq.w	80092f0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	61bb      	str	r3, [r7, #24]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	461a      	mov	r2, r3
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	4413      	add	r3, r2
 80091fa:	61bb      	str	r3, [r7, #24]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	00da      	lsls	r2, r3, #3
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	4413      	add	r3, r2
 8009206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800920a:	617b      	str	r3, [r7, #20]
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	88db      	ldrh	r3, [r3, #6]
 8009210:	085b      	lsrs	r3, r3, #1
 8009212:	b29b      	uxth	r3, r3
 8009214:	005b      	lsls	r3, r3, #1
 8009216:	b29a      	uxth	r2, r3
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	4413      	add	r3, r2
 8009226:	881b      	ldrh	r3, [r3, #0]
 8009228:	827b      	strh	r3, [r7, #18]
 800922a:	8a7b      	ldrh	r3, [r7, #18]
 800922c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009230:	2b00      	cmp	r3, #0
 8009232:	d01b      	beq.n	800926c <USB_ActivateEndpoint+0x180>
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4413      	add	r3, r2
 800923e:	881b      	ldrh	r3, [r3, #0]
 8009240:	b29b      	uxth	r3, r3
 8009242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800924a:	823b      	strh	r3, [r7, #16]
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	441a      	add	r2, r3
 8009256:	8a3b      	ldrh	r3, [r7, #16]
 8009258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800925c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009264:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009268:	b29b      	uxth	r3, r3
 800926a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	78db      	ldrb	r3, [r3, #3]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d020      	beq.n	80092b6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4413      	add	r3, r2
 800927e:	881b      	ldrh	r3, [r3, #0]
 8009280:	b29b      	uxth	r3, r3
 8009282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800928a:	81bb      	strh	r3, [r7, #12]
 800928c:	89bb      	ldrh	r3, [r7, #12]
 800928e:	f083 0320 	eor.w	r3, r3, #32
 8009292:	81bb      	strh	r3, [r7, #12]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	441a      	add	r2, r3
 800929e:	89bb      	ldrh	r3, [r7, #12]
 80092a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	8013      	strh	r3, [r2, #0]
 80092b4:	e2cb      	b.n	800984e <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	4413      	add	r3, r2
 80092c0:	881b      	ldrh	r3, [r3, #0]
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092cc:	81fb      	strh	r3, [r7, #14]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	441a      	add	r2, r3
 80092d8:	89fb      	ldrh	r3, [r7, #14]
 80092da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	8013      	strh	r3, [r2, #0]
 80092ee:	e2ae      	b.n	800984e <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	633b      	str	r3, [r7, #48]	; 0x30
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	461a      	mov	r2, r3
 80092fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009300:	4413      	add	r3, r2
 8009302:	633b      	str	r3, [r7, #48]	; 0x30
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	00da      	lsls	r2, r3, #3
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	4413      	add	r3, r2
 800930e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	88db      	ldrh	r3, [r3, #6]
 8009318:	085b      	lsrs	r3, r3, #1
 800931a:	b29b      	uxth	r3, r3
 800931c:	005b      	lsls	r3, r3, #1
 800931e:	b29a      	uxth	r2, r3
 8009320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009322:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	62bb      	str	r3, [r7, #40]	; 0x28
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800932e:	b29b      	uxth	r3, r3
 8009330:	461a      	mov	r2, r3
 8009332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009334:	4413      	add	r3, r2
 8009336:	62bb      	str	r3, [r7, #40]	; 0x28
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	00da      	lsls	r2, r3, #3
 800933e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009340:	4413      	add	r3, r2
 8009342:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009346:	627b      	str	r3, [r7, #36]	; 0x24
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	2b3e      	cmp	r3, #62	; 0x3e
 800934e:	d918      	bls.n	8009382 <USB_ActivateEndpoint+0x296>
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	095b      	lsrs	r3, r3, #5
 8009356:	66bb      	str	r3, [r7, #104]	; 0x68
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	f003 031f 	and.w	r3, r3, #31
 8009360:	2b00      	cmp	r3, #0
 8009362:	d102      	bne.n	800936a <USB_ActivateEndpoint+0x27e>
 8009364:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009366:	3b01      	subs	r3, #1
 8009368:	66bb      	str	r3, [r7, #104]	; 0x68
 800936a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800936c:	b29b      	uxth	r3, r3
 800936e:	029b      	lsls	r3, r3, #10
 8009370:	b29b      	uxth	r3, r3
 8009372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800937a:	b29a      	uxth	r2, r3
 800937c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937e:	801a      	strh	r2, [r3, #0]
 8009380:	e029      	b.n	80093d6 <USB_ActivateEndpoint+0x2ea>
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d112      	bne.n	80093b0 <USB_ActivateEndpoint+0x2c4>
 800938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938c:	881b      	ldrh	r3, [r3, #0]
 800938e:	b29b      	uxth	r3, r3
 8009390:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009394:	b29a      	uxth	r2, r3
 8009396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009398:	801a      	strh	r2, [r3, #0]
 800939a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939c:	881b      	ldrh	r3, [r3, #0]
 800939e:	b29b      	uxth	r3, r3
 80093a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	801a      	strh	r2, [r3, #0]
 80093ae:	e012      	b.n	80093d6 <USB_ActivateEndpoint+0x2ea>
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	085b      	lsrs	r3, r3, #1
 80093b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d002      	beq.n	80093ca <USB_ActivateEndpoint+0x2de>
 80093c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093c6:	3301      	adds	r3, #1
 80093c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80093ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	029b      	lsls	r3, r3, #10
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	4413      	add	r3, r2
 80093e0:	881b      	ldrh	r3, [r3, #0]
 80093e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80093e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80093e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d01b      	beq.n	8009426 <USB_ActivateEndpoint+0x33a>
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	881b      	ldrh	r3, [r3, #0]
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009404:	843b      	strh	r3, [r7, #32]
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	441a      	add	r2, r3
 8009410:	8c3b      	ldrh	r3, [r7, #32]
 8009412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800941a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800941e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009422:	b29b      	uxth	r3, r3
 8009424:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d124      	bne.n	8009478 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	881b      	ldrh	r3, [r3, #0]
 800943a:	b29b      	uxth	r3, r3
 800943c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009444:	83bb      	strh	r3, [r7, #28]
 8009446:	8bbb      	ldrh	r3, [r7, #28]
 8009448:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800944c:	83bb      	strh	r3, [r7, #28]
 800944e:	8bbb      	ldrh	r3, [r7, #28]
 8009450:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009454:	83bb      	strh	r3, [r7, #28]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	441a      	add	r2, r3
 8009460:	8bbb      	ldrh	r3, [r7, #28]
 8009462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800946a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800946e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009472:	b29b      	uxth	r3, r3
 8009474:	8013      	strh	r3, [r2, #0]
 8009476:	e1ea      	b.n	800984e <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4413      	add	r3, r2
 8009482:	881b      	ldrh	r3, [r3, #0]
 8009484:	b29b      	uxth	r3, r3
 8009486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800948a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800948e:	83fb      	strh	r3, [r7, #30]
 8009490:	8bfb      	ldrh	r3, [r7, #30]
 8009492:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009496:	83fb      	strh	r3, [r7, #30]
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	441a      	add	r2, r3
 80094a2:	8bfb      	ldrh	r3, [r7, #30]
 80094a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	8013      	strh	r3, [r2, #0]
 80094b8:	e1c9      	b.n	800984e <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	78db      	ldrb	r3, [r3, #3]
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d11e      	bne.n	8009500 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	881b      	ldrh	r3, [r3, #0]
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094d8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	441a      	add	r2, r3
 80094e6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80094ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094f2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80094f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	8013      	strh	r3, [r2, #0]
 80094fe:	e01d      	b.n	800953c <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4413      	add	r3, r2
 800950a:	881b      	ldrh	r3, [r3, #0]
 800950c:	b29b      	uxth	r3, r3
 800950e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009516:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	441a      	add	r2, r3
 8009524:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800952c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009538:	b29b      	uxth	r3, r3
 800953a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009546:	b29b      	uxth	r3, r3
 8009548:	461a      	mov	r2, r3
 800954a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800954c:	4413      	add	r3, r2
 800954e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	00da      	lsls	r2, r3, #3
 8009556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009558:	4413      	add	r3, r2
 800955a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800955e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	891b      	ldrh	r3, [r3, #8]
 8009564:	085b      	lsrs	r3, r3, #1
 8009566:	b29b      	uxth	r3, r3
 8009568:	005b      	lsls	r3, r3, #1
 800956a:	b29a      	uxth	r2, r3
 800956c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800956e:	801a      	strh	r2, [r3, #0]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	657b      	str	r3, [r7, #84]	; 0x54
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800957a:	b29b      	uxth	r3, r3
 800957c:	461a      	mov	r2, r3
 800957e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009580:	4413      	add	r3, r2
 8009582:	657b      	str	r3, [r7, #84]	; 0x54
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	00da      	lsls	r2, r3, #3
 800958a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800958c:	4413      	add	r3, r2
 800958e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009592:	653b      	str	r3, [r7, #80]	; 0x50
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	895b      	ldrh	r3, [r3, #10]
 8009598:	085b      	lsrs	r3, r3, #1
 800959a:	b29b      	uxth	r3, r3
 800959c:	005b      	lsls	r3, r3, #1
 800959e:	b29a      	uxth	r2, r3
 80095a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095a2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	785b      	ldrb	r3, [r3, #1]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f040 8093 	bne.w	80096d4 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	881b      	ldrh	r3, [r3, #0]
 80095ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80095be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80095c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d01b      	beq.n	8009602 <USB_ActivateEndpoint+0x516>
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4413      	add	r3, r2
 80095d4:	881b      	ldrh	r3, [r3, #0]
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	441a      	add	r2, r3
 80095ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80095ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095fe:	b29b      	uxth	r3, r3
 8009600:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	881b      	ldrh	r3, [r3, #0]
 800960e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009610:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009616:	2b00      	cmp	r3, #0
 8009618:	d01b      	beq.n	8009652 <USB_ActivateEndpoint+0x566>
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4413      	add	r3, r2
 8009624:	881b      	ldrh	r3, [r3, #0]
 8009626:	b29b      	uxth	r3, r3
 8009628:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800962c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009630:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	441a      	add	r2, r3
 800963c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800963e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800964a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800964e:	b29b      	uxth	r3, r3
 8009650:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4413      	add	r3, r2
 800965c:	881b      	ldrh	r3, [r3, #0]
 800965e:	b29b      	uxth	r3, r3
 8009660:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009668:	873b      	strh	r3, [r7, #56]	; 0x38
 800966a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800966c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009670:	873b      	strh	r3, [r7, #56]	; 0x38
 8009672:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009674:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009678:	873b      	strh	r3, [r7, #56]	; 0x38
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	441a      	add	r2, r3
 8009684:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800968a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800968e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009696:	b29b      	uxth	r3, r3
 8009698:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4413      	add	r3, r2
 80096a4:	881b      	ldrh	r3, [r3, #0]
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096b0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	441a      	add	r2, r3
 80096bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80096be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	8013      	strh	r3, [r2, #0]
 80096d2:	e0bc      	b.n	800984e <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	4413      	add	r3, r2
 80096de:	881b      	ldrh	r3, [r3, #0]
 80096e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80096e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80096e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d01d      	beq.n	800972c <USB_ActivateEndpoint+0x640>
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	4413      	add	r3, r2
 80096fa:	881b      	ldrh	r3, [r3, #0]
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009706:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	441a      	add	r2, r3
 8009714:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800971c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009728:	b29b      	uxth	r3, r3
 800972a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	4413      	add	r3, r2
 8009736:	881b      	ldrh	r3, [r3, #0]
 8009738:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800973c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009744:	2b00      	cmp	r3, #0
 8009746:	d01d      	beq.n	8009784 <USB_ActivateEndpoint+0x698>
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	881b      	ldrh	r3, [r3, #0]
 8009754:	b29b      	uxth	r3, r3
 8009756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800975a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800975e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	441a      	add	r2, r3
 800976c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800977c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009780:	b29b      	uxth	r3, r3
 8009782:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	78db      	ldrb	r3, [r3, #3]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d024      	beq.n	80097d6 <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4413      	add	r3, r2
 8009796:	881b      	ldrh	r3, [r3, #0]
 8009798:	b29b      	uxth	r3, r3
 800979a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800979e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80097a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80097aa:	f083 0320 	eor.w	r3, r3, #32
 80097ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	441a      	add	r2, r3
 80097bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80097c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	8013      	strh	r3, [r2, #0]
 80097d4:	e01d      	b.n	8009812 <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4413      	add	r3, r2
 80097e0:	881b      	ldrh	r3, [r3, #0]
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097ec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	441a      	add	r2, r3
 80097fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80097fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800980a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800980e:	b29b      	uxth	r3, r3
 8009810:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	881b      	ldrh	r3, [r3, #0]
 800981e:	b29b      	uxth	r3, r3
 8009820:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009828:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	441a      	add	r2, r3
 8009836:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800983a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800983e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800984a:	b29b      	uxth	r3, r3
 800984c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800984e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009852:	4618      	mov	r0, r3
 8009854:	3774      	adds	r7, #116	; 0x74
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop

08009860 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009860:	b480      	push	{r7}
 8009862:	b08d      	sub	sp, #52	; 0x34
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	7b1b      	ldrb	r3, [r3, #12]
 800986e:	2b00      	cmp	r3, #0
 8009870:	f040 808e 	bne.w	8009990 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	785b      	ldrb	r3, [r3, #1]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d044      	beq.n	8009906 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	4413      	add	r3, r2
 8009886:	881b      	ldrh	r3, [r3, #0]
 8009888:	81bb      	strh	r3, [r7, #12]
 800988a:	89bb      	ldrh	r3, [r7, #12]
 800988c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009890:	2b00      	cmp	r3, #0
 8009892:	d01b      	beq.n	80098cc <USB_DeactivateEndpoint+0x6c>
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4413      	add	r3, r2
 800989e:	881b      	ldrh	r3, [r3, #0]
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098aa:	817b      	strh	r3, [r7, #10]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	441a      	add	r2, r3
 80098b6:	897b      	ldrh	r3, [r7, #10]
 80098b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	881b      	ldrh	r3, [r3, #0]
 80098d8:	b29b      	uxth	r3, r3
 80098da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098e2:	813b      	strh	r3, [r7, #8]
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	441a      	add	r2, r3
 80098ee:	893b      	ldrh	r3, [r7, #8]
 80098f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009900:	b29b      	uxth	r3, r3
 8009902:	8013      	strh	r3, [r2, #0]
 8009904:	e192      	b.n	8009c2c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4413      	add	r3, r2
 8009910:	881b      	ldrh	r3, [r3, #0]
 8009912:	827b      	strh	r3, [r7, #18]
 8009914:	8a7b      	ldrh	r3, [r7, #18]
 8009916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800991a:	2b00      	cmp	r3, #0
 800991c:	d01b      	beq.n	8009956 <USB_DeactivateEndpoint+0xf6>
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	4413      	add	r3, r2
 8009928:	881b      	ldrh	r3, [r3, #0]
 800992a:	b29b      	uxth	r3, r3
 800992c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009934:	823b      	strh	r3, [r7, #16]
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	441a      	add	r2, r3
 8009940:	8a3b      	ldrh	r3, [r7, #16]
 8009942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800994a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800994e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009952:	b29b      	uxth	r3, r3
 8009954:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	881b      	ldrh	r3, [r3, #0]
 8009962:	b29b      	uxth	r3, r3
 8009964:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800996c:	81fb      	strh	r3, [r7, #14]
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	441a      	add	r2, r3
 8009978:	89fb      	ldrh	r3, [r7, #14]
 800997a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800997e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800998a:	b29b      	uxth	r3, r3
 800998c:	8013      	strh	r3, [r2, #0]
 800998e:	e14d      	b.n	8009c2c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	785b      	ldrb	r3, [r3, #1]
 8009994:	2b00      	cmp	r3, #0
 8009996:	f040 80a5 	bne.w	8009ae4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4413      	add	r3, r2
 80099a4:	881b      	ldrh	r3, [r3, #0]
 80099a6:	843b      	strh	r3, [r7, #32]
 80099a8:	8c3b      	ldrh	r3, [r7, #32]
 80099aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d01b      	beq.n	80099ea <USB_DeactivateEndpoint+0x18a>
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	881b      	ldrh	r3, [r3, #0]
 80099be:	b29b      	uxth	r3, r3
 80099c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099c8:	83fb      	strh	r3, [r7, #30]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	441a      	add	r2, r3
 80099d4:	8bfb      	ldrh	r3, [r7, #30]
 80099d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4413      	add	r3, r2
 80099f4:	881b      	ldrh	r3, [r3, #0]
 80099f6:	83bb      	strh	r3, [r7, #28]
 80099f8:	8bbb      	ldrh	r3, [r7, #28]
 80099fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d01b      	beq.n	8009a3a <USB_DeactivateEndpoint+0x1da>
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	881b      	ldrh	r3, [r3, #0]
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a18:	837b      	strh	r3, [r7, #26]
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	441a      	add	r2, r3
 8009a24:	8b7b      	ldrh	r3, [r7, #26]
 8009a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	4413      	add	r3, r2
 8009a44:	881b      	ldrh	r3, [r3, #0]
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a50:	833b      	strh	r3, [r7, #24]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	441a      	add	r2, r3
 8009a5c:	8b3b      	ldrh	r3, [r7, #24]
 8009a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a88:	82fb      	strh	r3, [r7, #22]
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	441a      	add	r2, r3
 8009a94:	8afb      	ldrh	r3, [r7, #22]
 8009a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	4413      	add	r3, r2
 8009ab4:	881b      	ldrh	r3, [r3, #0]
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ac0:	82bb      	strh	r3, [r7, #20]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	441a      	add	r2, r3
 8009acc:	8abb      	ldrh	r3, [r7, #20]
 8009ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	8013      	strh	r3, [r2, #0]
 8009ae2:	e0a3      	b.n	8009c2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	4413      	add	r3, r2
 8009aee:	881b      	ldrh	r3, [r3, #0]
 8009af0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009af2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d01b      	beq.n	8009b34 <USB_DeactivateEndpoint+0x2d4>
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	4413      	add	r3, r2
 8009b06:	881b      	ldrh	r3, [r3, #0]
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b12:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	441a      	add	r2, r3
 8009b1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4413      	add	r3, r2
 8009b3e:	881b      	ldrh	r3, [r3, #0]
 8009b40:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009b42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d01b      	beq.n	8009b84 <USB_DeactivateEndpoint+0x324>
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4413      	add	r3, r2
 8009b56:	881b      	ldrh	r3, [r3, #0]
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b62:	853b      	strh	r3, [r7, #40]	; 0x28
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	441a      	add	r2, r3
 8009b6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4413      	add	r3, r2
 8009b8e:	881b      	ldrh	r3, [r3, #0]
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b9a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	441a      	add	r2, r3
 8009ba6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	881b      	ldrh	r3, [r3, #0]
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bd2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	441a      	add	r2, r3
 8009bde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4413      	add	r3, r2
 8009bfe:	881b      	ldrh	r3, [r3, #0]
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c0a:	847b      	strh	r3, [r7, #34]	; 0x22
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	441a      	add	r2, r3
 8009c16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3734      	adds	r7, #52	; 0x34
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b0c2      	sub	sp, #264	; 0x108
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c48:	6018      	str	r0, [r3, #0]
 8009c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c52:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	785b      	ldrb	r3, [r3, #1]
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	f040 867b 	bne.w	800a95c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	699a      	ldr	r2, [r3, #24]
 8009c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d908      	bls.n	8009c94 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009c92:	e007      	b.n	8009ca4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	7b1b      	ldrb	r3, [r3, #12]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d13a      	bne.n	8009d2a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	6959      	ldr	r1, [r3, #20]
 8009cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	88da      	ldrh	r2, [r3, #6]
 8009ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009cd6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009cda:	6800      	ldr	r0, [r0, #0]
 8009cdc:	f001 fc3e 	bl	800b55c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ce4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	613b      	str	r3, [r7, #16]
 8009cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	4413      	add	r3, r2
 8009d02:	613b      	str	r3, [r7, #16]
 8009d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	00da      	lsls	r2, r3, #3
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	4413      	add	r3, r2
 8009d16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d1a:	60fb      	str	r3, [r7, #12]
 8009d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	801a      	strh	r2, [r3, #0]
 8009d26:	f000 bde3 	b.w	800a8f0 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	78db      	ldrb	r3, [r3, #3]
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	f040 843a 	bne.w	800a5b0 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	6a1a      	ldr	r2, [r3, #32]
 8009d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	f240 83b7 	bls.w	800a4c8 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	4413      	add	r3, r2
 8009d74:	881b      	ldrh	r3, [r3, #0]
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d80:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	441a      	add	r2, r3
 8009d9e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009daa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	6a1a      	ldr	r2, [r3, #32]
 8009dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dc6:	1ad2      	subs	r2, r2, r3
 8009dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	4413      	add	r3, r2
 8009dee:	881b      	ldrh	r3, [r3, #0]
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f000 81b3 	beq.w	800a162 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	633b      	str	r3, [r7, #48]	; 0x30
 8009e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	785b      	ldrb	r3, [r3, #1]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d16d      	bne.n	8009ef4 <USB_EPStartXfer+0x2ba>
 8009e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	461a      	mov	r2, r3
 8009e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e38:	4413      	add	r3, r2
 8009e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	00da      	lsls	r2, r3, #3
 8009e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4c:	4413      	add	r3, r2
 8009e4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e52:	627b      	str	r3, [r7, #36]	; 0x24
 8009e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e58:	2b3e      	cmp	r3, #62	; 0x3e
 8009e5a:	d91c      	bls.n	8009e96 <USB_EPStartXfer+0x25c>
 8009e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e60:	095b      	lsrs	r3, r3, #5
 8009e62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e6a:	f003 031f 	and.w	r3, r3, #31
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d104      	bne.n	8009e7c <USB_EPStartXfer+0x242>
 8009e72:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009e76:	3b01      	subs	r3, #1
 8009e78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009e7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	029b      	lsls	r3, r3, #10
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	801a      	strh	r2, [r3, #0]
 8009e94:	e053      	b.n	8009f3e <USB_EPStartXfer+0x304>
 8009e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d112      	bne.n	8009ec4 <USB_EPStartXfer+0x28a>
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	881b      	ldrh	r3, [r3, #0]
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eac:	801a      	strh	r2, [r3, #0]
 8009eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb0:	881b      	ldrh	r3, [r3, #0]
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec0:	801a      	strh	r2, [r3, #0]
 8009ec2:	e03c      	b.n	8009f3e <USB_EPStartXfer+0x304>
 8009ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ec8:	085b      	lsrs	r3, r3, #1
 8009eca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ed2:	f003 0301 	and.w	r3, r3, #1
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d004      	beq.n	8009ee4 <USB_EPStartXfer+0x2aa>
 8009eda:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009ede:	3301      	adds	r3, #1
 8009ee0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ee4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	029b      	lsls	r3, r3, #10
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef0:	801a      	strh	r2, [r3, #0]
 8009ef2:	e024      	b.n	8009f3e <USB_EPStartXfer+0x304>
 8009ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	785b      	ldrb	r3, [r3, #1]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d11c      	bne.n	8009f3e <USB_EPStartXfer+0x304>
 8009f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	461a      	mov	r2, r3
 8009f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f18:	4413      	add	r3, r2
 8009f1a:	633b      	str	r3, [r7, #48]	; 0x30
 8009f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	00da      	lsls	r2, r3, #3
 8009f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2c:	4413      	add	r3, r2
 8009f2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	895b      	ldrh	r3, [r3, #10]
 8009f4a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6959      	ldr	r1, [r3, #20]
 8009f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009f64:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009f68:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009f6c:	6800      	ldr	r0, [r0, #0]
 8009f6e:	f001 faf5 	bl	800b55c <USB_WritePMA>
            ep->xfer_buff += len;
 8009f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	695a      	ldr	r2, [r3, #20]
 8009f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f82:	441a      	add	r2, r3
 8009f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	6a1a      	ldr	r2, [r3, #32]
 8009f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d90f      	bls.n	8009fcc <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8009fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	6a1a      	ldr	r2, [r3, #32]
 8009fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fbc:	1ad2      	subs	r2, r2, r3
 8009fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	621a      	str	r2, [r3, #32]
 8009fca:	e00e      	b.n	8009fea <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8009fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	6a1b      	ldr	r3, [r3, #32]
 8009fd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	785b      	ldrb	r3, [r3, #1]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d16d      	bne.n	800a0d6 <USB_EPStartXfer+0x49c>
 8009ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ffe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	61bb      	str	r3, [r7, #24]
 800a006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a00a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a014:	b29b      	uxth	r3, r3
 800a016:	461a      	mov	r2, r3
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	4413      	add	r3, r2
 800a01c:	61bb      	str	r3, [r7, #24]
 800a01e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	00da      	lsls	r2, r3, #3
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	4413      	add	r3, r2
 800a030:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a034:	617b      	str	r3, [r7, #20]
 800a036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a03a:	2b3e      	cmp	r3, #62	; 0x3e
 800a03c:	d91c      	bls.n	800a078 <USB_EPStartXfer+0x43e>
 800a03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a042:	095b      	lsrs	r3, r3, #5
 800a044:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a04c:	f003 031f 	and.w	r3, r3, #31
 800a050:	2b00      	cmp	r3, #0
 800a052:	d104      	bne.n	800a05e <USB_EPStartXfer+0x424>
 800a054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a058:	3b01      	subs	r3, #1
 800a05a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a05e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a062:	b29b      	uxth	r3, r3
 800a064:	029b      	lsls	r3, r3, #10
 800a066:	b29b      	uxth	r3, r3
 800a068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a06c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a070:	b29a      	uxth	r2, r3
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	801a      	strh	r2, [r3, #0]
 800a076:	e059      	b.n	800a12c <USB_EPStartXfer+0x4f2>
 800a078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d112      	bne.n	800a0a6 <USB_EPStartXfer+0x46c>
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	881b      	ldrh	r3, [r3, #0]
 800a084:	b29b      	uxth	r3, r3
 800a086:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	801a      	strh	r2, [r3, #0]
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	881b      	ldrh	r3, [r3, #0]
 800a094:	b29b      	uxth	r3, r3
 800a096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a09a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a09e:	b29a      	uxth	r2, r3
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	801a      	strh	r2, [r3, #0]
 800a0a4:	e042      	b.n	800a12c <USB_EPStartXfer+0x4f2>
 800a0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0aa:	085b      	lsrs	r3, r3, #1
 800a0ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0b4:	f003 0301 	and.w	r3, r3, #1
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d004      	beq.n	800a0c6 <USB_EPStartXfer+0x48c>
 800a0bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a0c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	029b      	lsls	r3, r3, #10
 800a0ce:	b29a      	uxth	r2, r3
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	801a      	strh	r2, [r3, #0]
 800a0d4:	e02a      	b.n	800a12c <USB_EPStartXfer+0x4f2>
 800a0d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	785b      	ldrb	r3, [r3, #1]
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d122      	bne.n	800a12c <USB_EPStartXfer+0x4f2>
 800a0e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	623b      	str	r3, [r7, #32]
 800a0f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a100:	b29b      	uxth	r3, r3
 800a102:	461a      	mov	r2, r3
 800a104:	6a3b      	ldr	r3, [r7, #32]
 800a106:	4413      	add	r3, r2
 800a108:	623b      	str	r3, [r7, #32]
 800a10a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a10e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	00da      	lsls	r2, r3, #3
 800a118:	6a3b      	ldr	r3, [r7, #32]
 800a11a:	4413      	add	r3, r2
 800a11c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a120:	61fb      	str	r3, [r7, #28]
 800a122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a126:	b29a      	uxth	r2, r3
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a12c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	891b      	ldrh	r3, [r3, #8]
 800a138:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a13c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	6959      	ldr	r1, [r3, #20]
 800a148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a152:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a156:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a15a:	6800      	ldr	r0, [r0, #0]
 800a15c:	f001 f9fe 	bl	800b55c <USB_WritePMA>
 800a160:	e3c6      	b.n	800a8f0 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	785b      	ldrb	r3, [r3, #1]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d16d      	bne.n	800a24e <USB_EPStartXfer+0x614>
 800a172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a17e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	461a      	mov	r2, r3
 800a190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a192:	4413      	add	r3, r2
 800a194:	64bb      	str	r3, [r7, #72]	; 0x48
 800a196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a19a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	00da      	lsls	r2, r3, #3
 800a1a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1a6:	4413      	add	r3, r2
 800a1a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a1ac:	647b      	str	r3, [r7, #68]	; 0x44
 800a1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1b2:	2b3e      	cmp	r3, #62	; 0x3e
 800a1b4:	d91c      	bls.n	800a1f0 <USB_EPStartXfer+0x5b6>
 800a1b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ba:	095b      	lsrs	r3, r3, #5
 800a1bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a1c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1c4:	f003 031f 	and.w	r3, r3, #31
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d104      	bne.n	800a1d6 <USB_EPStartXfer+0x59c>
 800a1cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a1d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	029b      	lsls	r3, r3, #10
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1ec:	801a      	strh	r2, [r3, #0]
 800a1ee:	e059      	b.n	800a2a4 <USB_EPStartXfer+0x66a>
 800a1f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d112      	bne.n	800a21e <USB_EPStartXfer+0x5e4>
 800a1f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1fa:	881b      	ldrh	r3, [r3, #0]
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a202:	b29a      	uxth	r2, r3
 800a204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a206:	801a      	strh	r2, [r3, #0]
 800a208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a20a:	881b      	ldrh	r3, [r3, #0]
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a216:	b29a      	uxth	r2, r3
 800a218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a21a:	801a      	strh	r2, [r3, #0]
 800a21c:	e042      	b.n	800a2a4 <USB_EPStartXfer+0x66a>
 800a21e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a222:	085b      	lsrs	r3, r3, #1
 800a224:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a22c:	f003 0301 	and.w	r3, r3, #1
 800a230:	2b00      	cmp	r3, #0
 800a232:	d004      	beq.n	800a23e <USB_EPStartXfer+0x604>
 800a234:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a238:	3301      	adds	r3, #1
 800a23a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a23e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a242:	b29b      	uxth	r3, r3
 800a244:	029b      	lsls	r3, r3, #10
 800a246:	b29a      	uxth	r2, r3
 800a248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a24a:	801a      	strh	r2, [r3, #0]
 800a24c:	e02a      	b.n	800a2a4 <USB_EPStartXfer+0x66a>
 800a24e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	785b      	ldrb	r3, [r3, #1]
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d122      	bne.n	800a2a4 <USB_EPStartXfer+0x66a>
 800a25e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a262:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	653b      	str	r3, [r7, #80]	; 0x50
 800a26a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a26e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a278:	b29b      	uxth	r3, r3
 800a27a:	461a      	mov	r2, r3
 800a27c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a27e:	4413      	add	r3, r2
 800a280:	653b      	str	r3, [r7, #80]	; 0x50
 800a282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	00da      	lsls	r2, r3, #3
 800a290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a292:	4413      	add	r3, r2
 800a294:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a298:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a29a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a29e:	b29a      	uxth	r2, r3
 800a2a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a2a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	891b      	ldrh	r3, [r3, #8]
 800a2b0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a2b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	6959      	ldr	r1, [r3, #20]
 800a2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a2ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a2ce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a2d2:	6800      	ldr	r0, [r0, #0]
 800a2d4:	f001 f942 	bl	800b55c <USB_WritePMA>
            ep->xfer_buff += len;
 800a2d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	695a      	ldr	r2, [r3, #20]
 800a2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2e8:	441a      	add	r2, r3
 800a2ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a2f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6a1a      	ldr	r2, [r3, #32]
 800a302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d90f      	bls.n	800a332 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800a312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	6a1a      	ldr	r2, [r3, #32]
 800a31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a322:	1ad2      	subs	r2, r2, r3
 800a324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	621a      	str	r2, [r3, #32]
 800a330:	e00e      	b.n	800a350 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800a332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	6a1b      	ldr	r3, [r3, #32]
 800a33e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2200      	movs	r2, #0
 800a34e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a354:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	643b      	str	r3, [r7, #64]	; 0x40
 800a35c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	785b      	ldrb	r3, [r3, #1]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d16d      	bne.n	800a448 <USB_EPStartXfer+0x80e>
 800a36c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a370:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	63bb      	str	r3, [r7, #56]	; 0x38
 800a378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a37c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a386:	b29b      	uxth	r3, r3
 800a388:	461a      	mov	r2, r3
 800a38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38c:	4413      	add	r3, r2
 800a38e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	00da      	lsls	r2, r3, #3
 800a39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a3a6:	637b      	str	r3, [r7, #52]	; 0x34
 800a3a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ac:	2b3e      	cmp	r3, #62	; 0x3e
 800a3ae:	d91c      	bls.n	800a3ea <USB_EPStartXfer+0x7b0>
 800a3b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3b4:	095b      	lsrs	r3, r3, #5
 800a3b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a3ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3be:	f003 031f 	and.w	r3, r3, #31
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d104      	bne.n	800a3d0 <USB_EPStartXfer+0x796>
 800a3c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a3d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	029b      	lsls	r3, r3, #10
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3e6:	801a      	strh	r2, [r3, #0]
 800a3e8:	e053      	b.n	800a492 <USB_EPStartXfer+0x858>
 800a3ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d112      	bne.n	800a418 <USB_EPStartXfer+0x7de>
 800a3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f4:	881b      	ldrh	r3, [r3, #0]
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a400:	801a      	strh	r2, [r3, #0]
 800a402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a404:	881b      	ldrh	r3, [r3, #0]
 800a406:	b29b      	uxth	r3, r3
 800a408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a40c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a410:	b29a      	uxth	r2, r3
 800a412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a414:	801a      	strh	r2, [r3, #0]
 800a416:	e03c      	b.n	800a492 <USB_EPStartXfer+0x858>
 800a418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a41c:	085b      	lsrs	r3, r3, #1
 800a41e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a426:	f003 0301 	and.w	r3, r3, #1
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d004      	beq.n	800a438 <USB_EPStartXfer+0x7fe>
 800a42e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a432:	3301      	adds	r3, #1
 800a434:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	029b      	lsls	r3, r3, #10
 800a440:	b29a      	uxth	r2, r3
 800a442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a444:	801a      	strh	r2, [r3, #0]
 800a446:	e024      	b.n	800a492 <USB_EPStartXfer+0x858>
 800a448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a44c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	785b      	ldrb	r3, [r3, #1]
 800a454:	2b01      	cmp	r3, #1
 800a456:	d11c      	bne.n	800a492 <USB_EPStartXfer+0x858>
 800a458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a45c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a466:	b29b      	uxth	r3, r3
 800a468:	461a      	mov	r2, r3
 800a46a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a46c:	4413      	add	r3, r2
 800a46e:	643b      	str	r3, [r7, #64]	; 0x40
 800a470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	00da      	lsls	r2, r3, #3
 800a47e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a480:	4413      	add	r3, r2
 800a482:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a486:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a48c:	b29a      	uxth	r2, r3
 800a48e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a490:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	895b      	ldrh	r3, [r3, #10]
 800a49e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	6959      	ldr	r1, [r3, #20]
 800a4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a4b8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a4bc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a4c0:	6800      	ldr	r0, [r0, #0]
 800a4c2:	f001 f84b 	bl	800b55c <USB_WritePMA>
 800a4c6:	e213      	b.n	800a8f0 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a4c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	6a1b      	ldr	r3, [r3, #32]
 800a4d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a4d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	4413      	add	r3, r2
 800a4f2:	881b      	ldrh	r3, [r3, #0]
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a4fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4fe:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a506:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	441a      	add	r2, r3
 800a51c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a52c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a530:	b29b      	uxth	r3, r3
 800a532:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a538:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a544:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a54e:	b29b      	uxth	r3, r3
 800a550:	461a      	mov	r2, r3
 800a552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a554:	4413      	add	r3, r2
 800a556:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a55c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	00da      	lsls	r2, r3, #3
 800a566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a568:	4413      	add	r3, r2
 800a56a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a56e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a574:	b29a      	uxth	r2, r3
 800a576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a578:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a57a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a57e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	891b      	ldrh	r3, [r3, #8]
 800a586:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a58a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a58e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	6959      	ldr	r1, [r3, #20]
 800a596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a5a0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a5a4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a5a8:	6800      	ldr	r0, [r0, #0]
 800a5aa:	f000 ffd7 	bl	800b55c <USB_WritePMA>
 800a5ae:	e19f      	b.n	800a8f0 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a5b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	6a1a      	ldr	r2, [r3, #32]
 800a5bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5c0:	1ad2      	subs	r2, r2, r3
 800a5c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a5ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	4413      	add	r3, r2
 800a5e8:	881b      	ldrh	r3, [r3, #0]
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f000 80bc 	beq.w	800a76e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a5f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	673b      	str	r3, [r7, #112]	; 0x70
 800a602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	785b      	ldrb	r3, [r3, #1]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d16d      	bne.n	800a6ee <USB_EPStartXfer+0xab4>
 800a612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a616:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a61e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a622:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	461a      	mov	r2, r3
 800a630:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a632:	4413      	add	r3, r2
 800a634:	66bb      	str	r3, [r7, #104]	; 0x68
 800a636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a63a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	00da      	lsls	r2, r3, #3
 800a644:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a646:	4413      	add	r3, r2
 800a648:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a64c:	667b      	str	r3, [r7, #100]	; 0x64
 800a64e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a652:	2b3e      	cmp	r3, #62	; 0x3e
 800a654:	d91c      	bls.n	800a690 <USB_EPStartXfer+0xa56>
 800a656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a65a:	095b      	lsrs	r3, r3, #5
 800a65c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a664:	f003 031f 	and.w	r3, r3, #31
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d104      	bne.n	800a676 <USB_EPStartXfer+0xa3c>
 800a66c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a670:	3b01      	subs	r3, #1
 800a672:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a676:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	029b      	lsls	r3, r3, #10
 800a67e:	b29b      	uxth	r3, r3
 800a680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a688:	b29a      	uxth	r2, r3
 800a68a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a68c:	801a      	strh	r2, [r3, #0]
 800a68e:	e053      	b.n	800a738 <USB_EPStartXfer+0xafe>
 800a690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a694:	2b00      	cmp	r3, #0
 800a696:	d112      	bne.n	800a6be <USB_EPStartXfer+0xa84>
 800a698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a69a:	881b      	ldrh	r3, [r3, #0]
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6a6:	801a      	strh	r2, [r3, #0]
 800a6a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6aa:	881b      	ldrh	r3, [r3, #0]
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6ba:	801a      	strh	r2, [r3, #0]
 800a6bc:	e03c      	b.n	800a738 <USB_EPStartXfer+0xafe>
 800a6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6c2:	085b      	lsrs	r3, r3, #1
 800a6c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6cc:	f003 0301 	and.w	r3, r3, #1
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d004      	beq.n	800a6de <USB_EPStartXfer+0xaa4>
 800a6d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a6d8:	3301      	adds	r3, #1
 800a6da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a6de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	029b      	lsls	r3, r3, #10
 800a6e6:	b29a      	uxth	r2, r3
 800a6e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6ea:	801a      	strh	r2, [r3, #0]
 800a6ec:	e024      	b.n	800a738 <USB_EPStartXfer+0xafe>
 800a6ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	785b      	ldrb	r3, [r3, #1]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d11c      	bne.n	800a738 <USB_EPStartXfer+0xafe>
 800a6fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a702:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	461a      	mov	r2, r3
 800a710:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a712:	4413      	add	r3, r2
 800a714:	673b      	str	r3, [r7, #112]	; 0x70
 800a716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a71a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	00da      	lsls	r2, r3, #3
 800a724:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a726:	4413      	add	r3, r2
 800a728:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a72c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a72e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a732:	b29a      	uxth	r2, r3
 800a734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a736:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a73c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	895b      	ldrh	r3, [r3, #10]
 800a744:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a74c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	6959      	ldr	r1, [r3, #20]
 800a754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a758:	b29b      	uxth	r3, r3
 800a75a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a75e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a762:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a766:	6800      	ldr	r0, [r0, #0]
 800a768:	f000 fef8 	bl	800b55c <USB_WritePMA>
 800a76c:	e0c0      	b.n	800a8f0 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a76e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	785b      	ldrb	r3, [r3, #1]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d16d      	bne.n	800a85a <USB_EPStartXfer+0xc20>
 800a77e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a78a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a78e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a798:	b29b      	uxth	r3, r3
 800a79a:	461a      	mov	r2, r3
 800a79c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a79e:	4413      	add	r3, r2
 800a7a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a7a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	00da      	lsls	r2, r3, #3
 800a7b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a7b2:	4413      	add	r3, r2
 800a7b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7b8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a7ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7be:	2b3e      	cmp	r3, #62	; 0x3e
 800a7c0:	d91c      	bls.n	800a7fc <USB_EPStartXfer+0xbc2>
 800a7c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7c6:	095b      	lsrs	r3, r3, #5
 800a7c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a7cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7d0:	f003 031f 	and.w	r3, r3, #31
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d104      	bne.n	800a7e2 <USB_EPStartXfer+0xba8>
 800a7d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a7e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	029b      	lsls	r3, r3, #10
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7f8:	801a      	strh	r2, [r3, #0]
 800a7fa:	e05f      	b.n	800a8bc <USB_EPStartXfer+0xc82>
 800a7fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a800:	2b00      	cmp	r3, #0
 800a802:	d112      	bne.n	800a82a <USB_EPStartXfer+0xbf0>
 800a804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a806:	881b      	ldrh	r3, [r3, #0]
 800a808:	b29b      	uxth	r3, r3
 800a80a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a80e:	b29a      	uxth	r2, r3
 800a810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a812:	801a      	strh	r2, [r3, #0]
 800a814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a816:	881b      	ldrh	r3, [r3, #0]
 800a818:	b29b      	uxth	r3, r3
 800a81a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a81e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a822:	b29a      	uxth	r2, r3
 800a824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a826:	801a      	strh	r2, [r3, #0]
 800a828:	e048      	b.n	800a8bc <USB_EPStartXfer+0xc82>
 800a82a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a82e:	085b      	lsrs	r3, r3, #1
 800a830:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a838:	f003 0301 	and.w	r3, r3, #1
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d004      	beq.n	800a84a <USB_EPStartXfer+0xc10>
 800a840:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a844:	3301      	adds	r3, #1
 800a846:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a84a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a84e:	b29b      	uxth	r3, r3
 800a850:	029b      	lsls	r3, r3, #10
 800a852:	b29a      	uxth	r2, r3
 800a854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a856:	801a      	strh	r2, [r3, #0]
 800a858:	e030      	b.n	800a8bc <USB_EPStartXfer+0xc82>
 800a85a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a85e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	785b      	ldrb	r3, [r3, #1]
 800a866:	2b01      	cmp	r3, #1
 800a868:	d128      	bne.n	800a8bc <USB_EPStartXfer+0xc82>
 800a86a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a86e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a87c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a886:	b29b      	uxth	r3, r3
 800a888:	461a      	mov	r2, r3
 800a88a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a88e:	4413      	add	r3, r2
 800a890:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	00da      	lsls	r2, r3, #3
 800a8a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a8a6:	4413      	add	r3, r2
 800a8a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a8ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a8b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a8ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a8bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	891b      	ldrh	r3, [r3, #8]
 800a8c8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a8cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	6959      	ldr	r1, [r3, #20]
 800a8d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a8e2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a8e6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a8ea:	6800      	ldr	r0, [r0, #0]
 800a8ec:	f000 fe36 	bl	800b55c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a8f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	4413      	add	r3, r2
 800a90a:	881b      	ldrh	r3, [r3, #0]
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a916:	817b      	strh	r3, [r7, #10]
 800a918:	897b      	ldrh	r3, [r7, #10]
 800a91a:	f083 0310 	eor.w	r3, r3, #16
 800a91e:	817b      	strh	r3, [r7, #10]
 800a920:	897b      	ldrh	r3, [r7, #10]
 800a922:	f083 0320 	eor.w	r3, r3, #32
 800a926:	817b      	strh	r3, [r7, #10]
 800a928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a92c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	441a      	add	r2, r3
 800a942:	897b      	ldrh	r3, [r7, #10]
 800a944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a948:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a94c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a954:	b29b      	uxth	r3, r3
 800a956:	8013      	strh	r3, [r2, #0]
 800a958:	f000 bc9f 	b.w	800b29a <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a95c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	7b1b      	ldrb	r3, [r3, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f040 80ae 	bne.w	800aaca <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a96e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	699a      	ldr	r2, [r3, #24]
 800a97a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a97e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	691b      	ldr	r3, [r3, #16]
 800a986:	429a      	cmp	r2, r3
 800a988:	d917      	bls.n	800a9ba <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800a98a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a98e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a99a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a99e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	699a      	ldr	r2, [r3, #24]
 800a9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9aa:	1ad2      	subs	r2, r2, r3
 800a9ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	619a      	str	r2, [r3, #24]
 800a9b8:	e00e      	b.n	800a9d8 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800a9ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a9ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a9d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a9e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a9fc:	4413      	add	r3, r2
 800a9fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aa02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	00da      	lsls	r2, r3, #3
 800aa10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa14:	4413      	add	r3, r2
 800aa16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aa1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa22:	2b3e      	cmp	r3, #62	; 0x3e
 800aa24:	d91d      	bls.n	800aa62 <USB_EPStartXfer+0xe28>
 800aa26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa2a:	095b      	lsrs	r3, r3, #5
 800aa2c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aa30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa34:	f003 031f 	and.w	r3, r3, #31
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d104      	bne.n	800aa46 <USB_EPStartXfer+0xe0c>
 800aa3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa40:	3b01      	subs	r3, #1
 800aa42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aa46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	029b      	lsls	r3, r3, #10
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa5e:	801a      	strh	r2, [r3, #0]
 800aa60:	e3e1      	b.n	800b226 <USB_EPStartXfer+0x15ec>
 800aa62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d116      	bne.n	800aa98 <USB_EPStartXfer+0xe5e>
 800aa6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa6e:	881b      	ldrh	r3, [r3, #0]
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aa76:	b29a      	uxth	r2, r3
 800aa78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa7c:	801a      	strh	r2, [r3, #0]
 800aa7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa82:	881b      	ldrh	r3, [r3, #0]
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa94:	801a      	strh	r2, [r3, #0]
 800aa96:	e3c6      	b.n	800b226 <USB_EPStartXfer+0x15ec>
 800aa98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa9c:	085b      	lsrs	r3, r3, #1
 800aa9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aaa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa6:	f003 0301 	and.w	r3, r3, #1
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d004      	beq.n	800aab8 <USB_EPStartXfer+0xe7e>
 800aaae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aab2:	3301      	adds	r3, #1
 800aab4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aab8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	029b      	lsls	r3, r3, #10
 800aac0:	b29a      	uxth	r2, r3
 800aac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aac6:	801a      	strh	r2, [r3, #0]
 800aac8:	e3ad      	b.n	800b226 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800aaca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	78db      	ldrb	r3, [r3, #3]
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	f040 8200 	bne.w	800aedc <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800aadc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	785b      	ldrb	r3, [r3, #1]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f040 8091 	bne.w	800ac10 <USB_EPStartXfer+0xfd6>
 800aaee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aafc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab12:	4413      	add	r3, r2
 800ab14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	00da      	lsls	r2, r3, #3
 800ab26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab2a:	4413      	add	r3, r2
 800ab2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ab34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	2b3e      	cmp	r3, #62	; 0x3e
 800ab42:	d925      	bls.n	800ab90 <USB_EPStartXfer+0xf56>
 800ab44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	691b      	ldr	r3, [r3, #16]
 800ab50:	095b      	lsrs	r3, r3, #5
 800ab52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ab56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	f003 031f 	and.w	r3, r3, #31
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d104      	bne.n	800ab74 <USB_EPStartXfer+0xf3a>
 800ab6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab6e:	3b01      	subs	r3, #1
 800ab70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ab74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	029b      	lsls	r3, r3, #10
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab86:	b29a      	uxth	r2, r3
 800ab88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ab8c:	801a      	strh	r2, [r3, #0]
 800ab8e:	e074      	b.n	800ac7a <USB_EPStartXfer+0x1040>
 800ab90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d116      	bne.n	800abce <USB_EPStartXfer+0xf94>
 800aba0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aba4:	881b      	ldrh	r3, [r3, #0]
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800abac:	b29a      	uxth	r2, r3
 800abae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800abb2:	801a      	strh	r2, [r3, #0]
 800abb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800abb8:	881b      	ldrh	r3, [r3, #0]
 800abba:	b29b      	uxth	r3, r3
 800abbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abc4:	b29a      	uxth	r2, r3
 800abc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800abca:	801a      	strh	r2, [r3, #0]
 800abcc:	e055      	b.n	800ac7a <USB_EPStartXfer+0x1040>
 800abce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	085b      	lsrs	r3, r3, #1
 800abdc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800abe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	691b      	ldr	r3, [r3, #16]
 800abec:	f003 0301 	and.w	r3, r3, #1
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d004      	beq.n	800abfe <USB_EPStartXfer+0xfc4>
 800abf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abf8:	3301      	adds	r3, #1
 800abfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800abfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	029b      	lsls	r3, r3, #10
 800ac06:	b29a      	uxth	r2, r3
 800ac08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac0c:	801a      	strh	r2, [r3, #0]
 800ac0e:	e034      	b.n	800ac7a <USB_EPStartXfer+0x1040>
 800ac10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	785b      	ldrb	r3, [r3, #1]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d12c      	bne.n	800ac7a <USB_EPStartXfer+0x1040>
 800ac20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	461a      	mov	r2, r3
 800ac40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ac44:	4413      	add	r3, r2
 800ac46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	00da      	lsls	r2, r3, #3
 800ac58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ac5c:	4413      	add	r3, r2
 800ac5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ac62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ac66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	b29a      	uxth	r2, r3
 800ac74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ac78:	801a      	strh	r2, [r3, #0]
 800ac7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ac88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	785b      	ldrb	r3, [r3, #1]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f040 8091 	bne.w	800adbc <USB_EPStartXfer+0x1182>
 800ac9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	461a      	mov	r2, r3
 800acba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800acbe:	4413      	add	r3, r2
 800acc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800acc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	00da      	lsls	r2, r3, #3
 800acd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800acd6:	4413      	add	r3, r2
 800acd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800acdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ace0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ace4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	691b      	ldr	r3, [r3, #16]
 800acec:	2b3e      	cmp	r3, #62	; 0x3e
 800acee:	d925      	bls.n	800ad3c <USB_EPStartXfer+0x1102>
 800acf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	095b      	lsrs	r3, r3, #5
 800acfe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ad02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	691b      	ldr	r3, [r3, #16]
 800ad0e:	f003 031f 	and.w	r3, r3, #31
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d104      	bne.n	800ad20 <USB_EPStartXfer+0x10e6>
 800ad16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ad20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	029b      	lsls	r3, r3, #10
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad32:	b29a      	uxth	r2, r3
 800ad34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad38:	801a      	strh	r2, [r3, #0]
 800ad3a:	e06d      	b.n	800ae18 <USB_EPStartXfer+0x11de>
 800ad3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d116      	bne.n	800ad7a <USB_EPStartXfer+0x1140>
 800ad4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad50:	881b      	ldrh	r3, [r3, #0]
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad5e:	801a      	strh	r2, [r3, #0]
 800ad60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad64:	881b      	ldrh	r3, [r3, #0]
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad70:	b29a      	uxth	r2, r3
 800ad72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad76:	801a      	strh	r2, [r3, #0]
 800ad78:	e04e      	b.n	800ae18 <USB_EPStartXfer+0x11de>
 800ad7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	085b      	lsrs	r3, r3, #1
 800ad88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ad8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	691b      	ldr	r3, [r3, #16]
 800ad98:	f003 0301 	and.w	r3, r3, #1
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d004      	beq.n	800adaa <USB_EPStartXfer+0x1170>
 800ada0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ada4:	3301      	adds	r3, #1
 800ada6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800adaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adae:	b29b      	uxth	r3, r3
 800adb0:	029b      	lsls	r3, r3, #10
 800adb2:	b29a      	uxth	r2, r3
 800adb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800adb8:	801a      	strh	r2, [r3, #0]
 800adba:	e02d      	b.n	800ae18 <USB_EPStartXfer+0x11de>
 800adbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	785b      	ldrb	r3, [r3, #1]
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d125      	bne.n	800ae18 <USB_EPStartXfer+0x11de>
 800adcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800add0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adda:	b29b      	uxth	r3, r3
 800addc:	461a      	mov	r2, r3
 800adde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ade2:	4413      	add	r3, r2
 800ade4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ade8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	00da      	lsls	r2, r3, #3
 800adf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800adfa:	4413      	add	r3, r2
 800adfc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ae04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae16:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ae18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	69db      	ldr	r3, [r3, #28]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f000 81fe 	beq.w	800b226 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ae2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	881b      	ldrh	r3, [r3, #0]
 800ae46:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ae4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ae4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d005      	beq.n	800ae62 <USB_EPStartXfer+0x1228>
 800ae56:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ae5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10d      	bne.n	800ae7e <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ae62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ae66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f040 81db 	bne.w	800b226 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ae70:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ae74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f040 81d4 	bne.w	800b226 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ae7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	4413      	add	r3, r2
 800ae98:	881b      	ldrh	r3, [r3, #0]
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aea4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800aea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	441a      	add	r2, r3
 800aec2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800aec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aeca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aed2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	8013      	strh	r3, [r2, #0]
 800aeda:	e1a4      	b.n	800b226 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800aedc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	78db      	ldrb	r3, [r3, #3]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	f040 819a 	bne.w	800b222 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800aeee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	699a      	ldr	r2, [r3, #24]
 800aefa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aefe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	691b      	ldr	r3, [r3, #16]
 800af06:	429a      	cmp	r2, r3
 800af08:	d917      	bls.n	800af3a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800af0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800af1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	699a      	ldr	r2, [r3, #24]
 800af26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af2a:	1ad2      	subs	r2, r2, r3
 800af2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	619a      	str	r2, [r3, #24]
 800af38:	e00e      	b.n	800af58 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800af3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	699b      	ldr	r3, [r3, #24]
 800af46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800af4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2200      	movs	r2, #0
 800af56:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800af58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	785b      	ldrb	r3, [r3, #1]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d178      	bne.n	800b05a <USB_EPStartXfer+0x1420>
 800af68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800af76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af84:	b29b      	uxth	r3, r3
 800af86:	461a      	mov	r2, r3
 800af88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800af8c:	4413      	add	r3, r2
 800af8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800af92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	00da      	lsls	r2, r3, #3
 800afa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800afa4:	4413      	add	r3, r2
 800afa6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800afaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800afae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afb2:	2b3e      	cmp	r3, #62	; 0x3e
 800afb4:	d91d      	bls.n	800aff2 <USB_EPStartXfer+0x13b8>
 800afb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afba:	095b      	lsrs	r3, r3, #5
 800afbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800afc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afc4:	f003 031f 	and.w	r3, r3, #31
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d104      	bne.n	800afd6 <USB_EPStartXfer+0x139c>
 800afcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afd0:	3b01      	subs	r3, #1
 800afd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800afd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afda:	b29b      	uxth	r3, r3
 800afdc:	029b      	lsls	r3, r3, #10
 800afde:	b29b      	uxth	r3, r3
 800afe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afe8:	b29a      	uxth	r2, r3
 800afea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800afee:	801a      	strh	r2, [r3, #0]
 800aff0:	e064      	b.n	800b0bc <USB_EPStartXfer+0x1482>
 800aff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d116      	bne.n	800b028 <USB_EPStartXfer+0x13ee>
 800affa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800affe:	881b      	ldrh	r3, [r3, #0]
 800b000:	b29b      	uxth	r3, r3
 800b002:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b006:	b29a      	uxth	r2, r3
 800b008:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b00c:	801a      	strh	r2, [r3, #0]
 800b00e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b012:	881b      	ldrh	r3, [r3, #0]
 800b014:	b29b      	uxth	r3, r3
 800b016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b01a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b01e:	b29a      	uxth	r2, r3
 800b020:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b024:	801a      	strh	r2, [r3, #0]
 800b026:	e049      	b.n	800b0bc <USB_EPStartXfer+0x1482>
 800b028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b02c:	085b      	lsrs	r3, r3, #1
 800b02e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b036:	f003 0301 	and.w	r3, r3, #1
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d004      	beq.n	800b048 <USB_EPStartXfer+0x140e>
 800b03e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b042:	3301      	adds	r3, #1
 800b044:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	029b      	lsls	r3, r3, #10
 800b050:	b29a      	uxth	r2, r3
 800b052:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b056:	801a      	strh	r2, [r3, #0]
 800b058:	e030      	b.n	800b0bc <USB_EPStartXfer+0x1482>
 800b05a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b05e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	785b      	ldrb	r3, [r3, #1]
 800b066:	2b01      	cmp	r3, #1
 800b068:	d128      	bne.n	800b0bc <USB_EPStartXfer+0x1482>
 800b06a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b06e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b07c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b086:	b29b      	uxth	r3, r3
 800b088:	461a      	mov	r2, r3
 800b08a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b08e:	4413      	add	r3, r2
 800b090:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	00da      	lsls	r2, r3, #3
 800b0a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b0a6:	4413      	add	r3, r2
 800b0a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b0ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0b4:	b29a      	uxth	r2, r3
 800b0b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b0ba:	801a      	strh	r2, [r3, #0]
 800b0bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	785b      	ldrb	r3, [r3, #1]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d178      	bne.n	800b1cc <USB_EPStartXfer+0x1592>
 800b0da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b0e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b0fe:	4413      	add	r3, r2
 800b100:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	00da      	lsls	r2, r3, #3
 800b112:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b116:	4413      	add	r3, r2
 800b118:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b11c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b124:	2b3e      	cmp	r3, #62	; 0x3e
 800b126:	d91d      	bls.n	800b164 <USB_EPStartXfer+0x152a>
 800b128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b12c:	095b      	lsrs	r3, r3, #5
 800b12e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b136:	f003 031f 	and.w	r3, r3, #31
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d104      	bne.n	800b148 <USB_EPStartXfer+0x150e>
 800b13e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b142:	3b01      	subs	r3, #1
 800b144:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b148:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	029b      	lsls	r3, r3, #10
 800b150:	b29b      	uxth	r3, r3
 800b152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b15a:	b29a      	uxth	r2, r3
 800b15c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b160:	801a      	strh	r2, [r3, #0]
 800b162:	e060      	b.n	800b226 <USB_EPStartXfer+0x15ec>
 800b164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d116      	bne.n	800b19a <USB_EPStartXfer+0x1560>
 800b16c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b170:	881b      	ldrh	r3, [r3, #0]
 800b172:	b29b      	uxth	r3, r3
 800b174:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b178:	b29a      	uxth	r2, r3
 800b17a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b17e:	801a      	strh	r2, [r3, #0]
 800b180:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b184:	881b      	ldrh	r3, [r3, #0]
 800b186:	b29b      	uxth	r3, r3
 800b188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b18c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b190:	b29a      	uxth	r2, r3
 800b192:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b196:	801a      	strh	r2, [r3, #0]
 800b198:	e045      	b.n	800b226 <USB_EPStartXfer+0x15ec>
 800b19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b19e:	085b      	lsrs	r3, r3, #1
 800b1a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1a8:	f003 0301 	and.w	r3, r3, #1
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d004      	beq.n	800b1ba <USB_EPStartXfer+0x1580>
 800b1b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b1ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	029b      	lsls	r3, r3, #10
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b1c8:	801a      	strh	r2, [r3, #0]
 800b1ca:	e02c      	b.n	800b226 <USB_EPStartXfer+0x15ec>
 800b1cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	785b      	ldrb	r3, [r3, #1]
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d124      	bne.n	800b226 <USB_EPStartXfer+0x15ec>
 800b1dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b1f2:	4413      	add	r3, r2
 800b1f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b1f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	00da      	lsls	r2, r3, #3
 800b206:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b20a:	4413      	add	r3, r2
 800b20c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b210:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b218:	b29a      	uxth	r2, r3
 800b21a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b21e:	801a      	strh	r2, [r3, #0]
 800b220:	e001      	b.n	800b226 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800b222:	2301      	movs	r3, #1
 800b224:	e03a      	b.n	800b29c <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b22a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	4413      	add	r3, r2
 800b240:	881b      	ldrh	r3, [r3, #0]
 800b242:	b29b      	uxth	r3, r3
 800b244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b24c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b250:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b254:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b258:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b25c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b260:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b264:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b26c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	441a      	add	r2, r3
 800b282:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b28a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b28e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b296:	b29b      	uxth	r3, r3
 800b298:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b29a:	2300      	movs	r3, #0
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b2a6:	b480      	push	{r7}
 800b2a8:	b085      	sub	sp, #20
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
 800b2ae:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	785b      	ldrb	r3, [r3, #1]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d020      	beq.n	800b2fa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4413      	add	r3, r2
 800b2c2:	881b      	ldrh	r3, [r3, #0]
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2ce:	81bb      	strh	r3, [r7, #12]
 800b2d0:	89bb      	ldrh	r3, [r7, #12]
 800b2d2:	f083 0310 	eor.w	r3, r3, #16
 800b2d6:	81bb      	strh	r3, [r7, #12]
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	441a      	add	r2, r3
 800b2e2:	89bb      	ldrh	r3, [r7, #12]
 800b2e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	8013      	strh	r3, [r2, #0]
 800b2f8:	e01f      	b.n	800b33a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4413      	add	r3, r2
 800b304:	881b      	ldrh	r3, [r3, #0]
 800b306:	b29b      	uxth	r3, r3
 800b308:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b30c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b310:	81fb      	strh	r3, [r7, #14]
 800b312:	89fb      	ldrh	r3, [r7, #14]
 800b314:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b318:	81fb      	strh	r3, [r7, #14]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	441a      	add	r2, r3
 800b324:	89fb      	ldrh	r3, [r7, #14]
 800b326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b32a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b32e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b336:	b29b      	uxth	r3, r3
 800b338:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b33a:	2300      	movs	r3, #0
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3714      	adds	r7, #20
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b348:	b480      	push	{r7}
 800b34a:	b087      	sub	sp, #28
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	7b1b      	ldrb	r3, [r3, #12]
 800b356:	2b00      	cmp	r3, #0
 800b358:	f040 809d 	bne.w	800b496 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	785b      	ldrb	r3, [r3, #1]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d04c      	beq.n	800b3fe <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	4413      	add	r3, r2
 800b36e:	881b      	ldrh	r3, [r3, #0]
 800b370:	823b      	strh	r3, [r7, #16]
 800b372:	8a3b      	ldrh	r3, [r7, #16]
 800b374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d01b      	beq.n	800b3b4 <USB_EPClearStall+0x6c>
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4413      	add	r3, r2
 800b386:	881b      	ldrh	r3, [r3, #0]
 800b388:	b29b      	uxth	r3, r3
 800b38a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b38e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b392:	81fb      	strh	r3, [r7, #14]
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	441a      	add	r2, r3
 800b39e:	89fb      	ldrh	r3, [r7, #14]
 800b3a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	78db      	ldrb	r3, [r3, #3]
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d06c      	beq.n	800b496 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	4413      	add	r3, r2
 800b3c6:	881b      	ldrh	r3, [r3, #0]
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3d2:	81bb      	strh	r3, [r7, #12]
 800b3d4:	89bb      	ldrh	r3, [r7, #12]
 800b3d6:	f083 0320 	eor.w	r3, r3, #32
 800b3da:	81bb      	strh	r3, [r7, #12]
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	441a      	add	r2, r3
 800b3e6:	89bb      	ldrh	r3, [r7, #12]
 800b3e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	8013      	strh	r3, [r2, #0]
 800b3fc:	e04b      	b.n	800b496 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	4413      	add	r3, r2
 800b408:	881b      	ldrh	r3, [r3, #0]
 800b40a:	82fb      	strh	r3, [r7, #22]
 800b40c:	8afb      	ldrh	r3, [r7, #22]
 800b40e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b412:	2b00      	cmp	r3, #0
 800b414:	d01b      	beq.n	800b44e <USB_EPClearStall+0x106>
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	4413      	add	r3, r2
 800b420:	881b      	ldrh	r3, [r3, #0]
 800b422:	b29b      	uxth	r3, r3
 800b424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b42c:	82bb      	strh	r3, [r7, #20]
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	441a      	add	r2, r3
 800b438:	8abb      	ldrh	r3, [r7, #20]
 800b43a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b43e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b442:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	4413      	add	r3, r2
 800b458:	881b      	ldrh	r3, [r3, #0]
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b464:	827b      	strh	r3, [r7, #18]
 800b466:	8a7b      	ldrh	r3, [r7, #18]
 800b468:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b46c:	827b      	strh	r3, [r7, #18]
 800b46e:	8a7b      	ldrh	r3, [r7, #18]
 800b470:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b474:	827b      	strh	r3, [r7, #18]
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	009b      	lsls	r3, r3, #2
 800b47e:	441a      	add	r2, r3
 800b480:	8a7b      	ldrh	r3, [r7, #18]
 800b482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b48a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b48e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b492:	b29b      	uxth	r3, r3
 800b494:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b496:	2300      	movs	r3, #0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	371c      	adds	r7, #28
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b4b0:	78fb      	ldrb	r3, [r7, #3]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d103      	bne.n	800b4be <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2280      	movs	r2, #128	; 0x80
 800b4ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	370c      	adds	r7, #12
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr

0800b4fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b4fa:	b480      	push	{r7}
 800b4fc:	b083      	sub	sp, #12
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b508:	b29b      	uxth	r3, r3
 800b50a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800b50e:	b29a      	uxth	r2, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b516:	2300      	movs	r3, #0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b524:	b480      	push	{r7}
 800b526:	b085      	sub	sp, #20
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b532:	b29b      	uxth	r3, r3
 800b534:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b536:	68fb      	ldr	r3, [r7, #12]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3714      	adds	r7, #20
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b54e:	2300      	movs	r3, #0
}
 800b550:	4618      	mov	r0, r3
 800b552:	370c      	adds	r7, #12
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b08b      	sub	sp, #44	; 0x2c
 800b560:	af00      	add	r7, sp, #0
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	4611      	mov	r1, r2
 800b568:	461a      	mov	r2, r3
 800b56a:	460b      	mov	r3, r1
 800b56c:	80fb      	strh	r3, [r7, #6]
 800b56e:	4613      	mov	r3, r2
 800b570:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b572:	88bb      	ldrh	r3, [r7, #4]
 800b574:	3301      	adds	r3, #1
 800b576:	085b      	lsrs	r3, r3, #1
 800b578:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b582:	88fa      	ldrh	r2, [r7, #6]
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	4413      	add	r3, r2
 800b588:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b58c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b58e:	69bb      	ldr	r3, [r7, #24]
 800b590:	627b      	str	r3, [r7, #36]	; 0x24
 800b592:	e01b      	b.n	800b5cc <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b59a:	69fb      	ldr	r3, [r7, #28]
 800b59c:	3301      	adds	r3, #1
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	021b      	lsls	r3, r3, #8
 800b5a2:	b21a      	sxth	r2, r3
 800b5a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	b21b      	sxth	r3, r3
 800b5ac:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b5ae:	6a3b      	ldr	r3, [r7, #32]
 800b5b0:	8a7a      	ldrh	r2, [r7, #18]
 800b5b2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b5b4:	6a3b      	ldr	r3, [r7, #32]
 800b5b6:	3302      	adds	r3, #2
 800b5b8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b5ba:	69fb      	ldr	r3, [r7, #28]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	627b      	str	r3, [r7, #36]	; 0x24
 800b5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1e0      	bne.n	800b594 <USB_WritePMA+0x38>
  }
}
 800b5d2:	bf00      	nop
 800b5d4:	bf00      	nop
 800b5d6:	372c      	adds	r7, #44	; 0x2c
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b08b      	sub	sp, #44	; 0x2c
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	4611      	mov	r1, r2
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	80fb      	strh	r3, [r7, #6]
 800b5f2:	4613      	mov	r3, r2
 800b5f4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b5f6:	88bb      	ldrh	r3, [r7, #4]
 800b5f8:	085b      	lsrs	r3, r3, #1
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b606:	88fa      	ldrh	r2, [r7, #6]
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	4413      	add	r3, r2
 800b60c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b610:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b612:	69bb      	ldr	r3, [r7, #24]
 800b614:	627b      	str	r3, [r7, #36]	; 0x24
 800b616:	e018      	b.n	800b64a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b618:	6a3b      	ldr	r3, [r7, #32]
 800b61a:	881b      	ldrh	r3, [r3, #0]
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b620:	6a3b      	ldr	r3, [r7, #32]
 800b622:	3302      	adds	r3, #2
 800b624:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	b2da      	uxtb	r2, r3
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b62e:	69fb      	ldr	r3, [r7, #28]
 800b630:	3301      	adds	r3, #1
 800b632:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	0a1b      	lsrs	r3, r3, #8
 800b638:	b2da      	uxtb	r2, r3
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	3301      	adds	r3, #1
 800b642:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b646:	3b01      	subs	r3, #1
 800b648:	627b      	str	r3, [r7, #36]	; 0x24
 800b64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1e3      	bne.n	800b618 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b650:	88bb      	ldrh	r3, [r7, #4]
 800b652:	f003 0301 	and.w	r3, r3, #1
 800b656:	b29b      	uxth	r3, r3
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d007      	beq.n	800b66c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b65c:	6a3b      	ldr	r3, [r7, #32]
 800b65e:	881b      	ldrh	r3, [r3, #0]
 800b660:	b29b      	uxth	r3, r3
 800b662:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	b2da      	uxtb	r2, r3
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	701a      	strb	r2, [r3, #0]
  }
}
 800b66c:	bf00      	nop
 800b66e:	372c      	adds	r7, #44	; 0x2c
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	460b      	mov	r3, r1
 800b682:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b684:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b688:	f002 f9d2 	bl	800da30 <USBD_static_malloc>
 800b68c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d105      	bne.n	800b6a0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b69c:	2302      	movs	r3, #2
 800b69e:	e066      	b.n	800b76e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	7c1b      	ldrb	r3, [r3, #16]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d119      	bne.n	800b6e4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b6b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6b4:	2202      	movs	r2, #2
 800b6b6:	2181      	movs	r1, #129	; 0x81
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f001 ffbb 	bl	800d634 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b6c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6c8:	2202      	movs	r2, #2
 800b6ca:	2101      	movs	r1, #1
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f001 ffb1 	bl	800d634 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2210      	movs	r2, #16
 800b6de:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b6e2:	e016      	b.n	800b712 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b6e4:	2340      	movs	r3, #64	; 0x40
 800b6e6:	2202      	movs	r2, #2
 800b6e8:	2181      	movs	r1, #129	; 0x81
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f001 ffa2 	bl	800d634 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b6f6:	2340      	movs	r3, #64	; 0x40
 800b6f8:	2202      	movs	r2, #2
 800b6fa:	2101      	movs	r1, #1
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f001 ff99 	bl	800d634 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2201      	movs	r2, #1
 800b706:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2210      	movs	r2, #16
 800b70e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b712:	2308      	movs	r3, #8
 800b714:	2203      	movs	r2, #3
 800b716:	2182      	movs	r1, #130	; 0x82
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f001 ff8b 	bl	800d634 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2201      	movs	r2, #1
 800b722:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2200      	movs	r2, #0
 800b734:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	7c1b      	ldrb	r3, [r3, #16]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d109      	bne.n	800b75c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b74e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b752:	2101      	movs	r1, #1
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f002 f8e9 	bl	800d92c <USBD_LL_PrepareReceive>
 800b75a:	e007      	b.n	800b76c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b762:	2340      	movs	r3, #64	; 0x40
 800b764:	2101      	movs	r1, #1
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f002 f8e0 	bl	800d92c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b776:	b580      	push	{r7, lr}
 800b778:	b082      	sub	sp, #8
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
 800b77e:	460b      	mov	r3, r1
 800b780:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b782:	2181      	movs	r1, #129	; 0x81
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f001 ff93 	bl	800d6b0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b790:	2101      	movs	r1, #1
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f001 ff8c 	bl	800d6b0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b7a0:	2182      	movs	r1, #130	; 0x82
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f001 ff84 	bl	800d6b0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d00e      	beq.n	800b7e0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f002 f93a 	bl	800da4c <USBD_static_free>
    pdev->pClassData = NULL;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
	...

0800b7ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b7fe:	2300      	movs	r3, #0
 800b800:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b802:	2300      	movs	r3, #0
 800b804:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b806:	2300      	movs	r3, #0
 800b808:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d101      	bne.n	800b814 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b810:	2303      	movs	r3, #3
 800b812:	e0af      	b.n	800b974 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d03f      	beq.n	800b8a0 <USBD_CDC_Setup+0xb4>
 800b820:	2b20      	cmp	r3, #32
 800b822:	f040 809f 	bne.w	800b964 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	88db      	ldrh	r3, [r3, #6]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d02e      	beq.n	800b88c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	b25b      	sxtb	r3, r3
 800b834:	2b00      	cmp	r3, #0
 800b836:	da16      	bge.n	800b866 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	683a      	ldr	r2, [r7, #0]
 800b842:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b844:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	88d2      	ldrh	r2, [r2, #6]
 800b84a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	88db      	ldrh	r3, [r3, #6]
 800b850:	2b07      	cmp	r3, #7
 800b852:	bf28      	it	cs
 800b854:	2307      	movcs	r3, #7
 800b856:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	89fa      	ldrh	r2, [r7, #14]
 800b85c:	4619      	mov	r1, r3
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f001 facf 	bl	800ce02 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b864:	e085      	b.n	800b972 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	785a      	ldrb	r2, [r3, #1]
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	88db      	ldrh	r3, [r3, #6]
 800b874:	b2da      	uxtb	r2, r3
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b87c:	6939      	ldr	r1, [r7, #16]
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	88db      	ldrh	r3, [r3, #6]
 800b882:	461a      	mov	r2, r3
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f001 fae8 	bl	800ce5a <USBD_CtlPrepareRx>
      break;
 800b88a:	e072      	b.n	800b972 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	683a      	ldr	r2, [r7, #0]
 800b896:	7850      	ldrb	r0, [r2, #1]
 800b898:	2200      	movs	r2, #0
 800b89a:	6839      	ldr	r1, [r7, #0]
 800b89c:	4798      	blx	r3
      break;
 800b89e:	e068      	b.n	800b972 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	785b      	ldrb	r3, [r3, #1]
 800b8a4:	2b0b      	cmp	r3, #11
 800b8a6:	d852      	bhi.n	800b94e <USBD_CDC_Setup+0x162>
 800b8a8:	a201      	add	r2, pc, #4	; (adr r2, 800b8b0 <USBD_CDC_Setup+0xc4>)
 800b8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ae:	bf00      	nop
 800b8b0:	0800b8e1 	.word	0x0800b8e1
 800b8b4:	0800b95d 	.word	0x0800b95d
 800b8b8:	0800b94f 	.word	0x0800b94f
 800b8bc:	0800b94f 	.word	0x0800b94f
 800b8c0:	0800b94f 	.word	0x0800b94f
 800b8c4:	0800b94f 	.word	0x0800b94f
 800b8c8:	0800b94f 	.word	0x0800b94f
 800b8cc:	0800b94f 	.word	0x0800b94f
 800b8d0:	0800b94f 	.word	0x0800b94f
 800b8d4:	0800b94f 	.word	0x0800b94f
 800b8d8:	0800b90b 	.word	0x0800b90b
 800b8dc:	0800b935 	.word	0x0800b935
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	2b03      	cmp	r3, #3
 800b8ea:	d107      	bne.n	800b8fc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b8ec:	f107 030a 	add.w	r3, r7, #10
 800b8f0:	2202      	movs	r2, #2
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f001 fa84 	bl	800ce02 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b8fa:	e032      	b.n	800b962 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b8fc:	6839      	ldr	r1, [r7, #0]
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f001 fa0e 	bl	800cd20 <USBD_CtlError>
            ret = USBD_FAIL;
 800b904:	2303      	movs	r3, #3
 800b906:	75fb      	strb	r3, [r7, #23]
          break;
 800b908:	e02b      	b.n	800b962 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b910:	b2db      	uxtb	r3, r3
 800b912:	2b03      	cmp	r3, #3
 800b914:	d107      	bne.n	800b926 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b916:	f107 030d 	add.w	r3, r7, #13
 800b91a:	2201      	movs	r2, #1
 800b91c:	4619      	mov	r1, r3
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f001 fa6f 	bl	800ce02 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b924:	e01d      	b.n	800b962 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b926:	6839      	ldr	r1, [r7, #0]
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f001 f9f9 	bl	800cd20 <USBD_CtlError>
            ret = USBD_FAIL;
 800b92e:	2303      	movs	r3, #3
 800b930:	75fb      	strb	r3, [r7, #23]
          break;
 800b932:	e016      	b.n	800b962 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	2b03      	cmp	r3, #3
 800b93e:	d00f      	beq.n	800b960 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b940:	6839      	ldr	r1, [r7, #0]
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f001 f9ec 	bl	800cd20 <USBD_CtlError>
            ret = USBD_FAIL;
 800b948:	2303      	movs	r3, #3
 800b94a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b94c:	e008      	b.n	800b960 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b94e:	6839      	ldr	r1, [r7, #0]
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f001 f9e5 	bl	800cd20 <USBD_CtlError>
          ret = USBD_FAIL;
 800b956:	2303      	movs	r3, #3
 800b958:	75fb      	strb	r3, [r7, #23]
          break;
 800b95a:	e002      	b.n	800b962 <USBD_CDC_Setup+0x176>
          break;
 800b95c:	bf00      	nop
 800b95e:	e008      	b.n	800b972 <USBD_CDC_Setup+0x186>
          break;
 800b960:	bf00      	nop
      }
      break;
 800b962:	e006      	b.n	800b972 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b964:	6839      	ldr	r1, [r7, #0]
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f001 f9da 	bl	800cd20 <USBD_CtlError>
      ret = USBD_FAIL;
 800b96c:	2303      	movs	r3, #3
 800b96e:	75fb      	strb	r3, [r7, #23]
      break;
 800b970:	bf00      	nop
  }

  return (uint8_t)ret;
 800b972:	7dfb      	ldrb	r3, [r7, #23]
}
 800b974:	4618      	mov	r0, r3
 800b976:	3718      	adds	r7, #24
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	460b      	mov	r3, r1
 800b986:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b98e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b996:	2b00      	cmp	r3, #0
 800b998:	d101      	bne.n	800b99e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b99a:	2303      	movs	r3, #3
 800b99c:	e04f      	b.n	800ba3e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b9a6:	78fa      	ldrb	r2, [r7, #3]
 800b9a8:	6879      	ldr	r1, [r7, #4]
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	4413      	add	r3, r2
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	440b      	add	r3, r1
 800b9b4:	3318      	adds	r3, #24
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d029      	beq.n	800ba10 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b9bc:	78fa      	ldrb	r2, [r7, #3]
 800b9be:	6879      	ldr	r1, [r7, #4]
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	4413      	add	r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	440b      	add	r3, r1
 800b9ca:	3318      	adds	r3, #24
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	78f9      	ldrb	r1, [r7, #3]
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	440b      	add	r3, r1
 800b9d8:	00db      	lsls	r3, r3, #3
 800b9da:	4403      	add	r3, r0
 800b9dc:	333c      	adds	r3, #60	; 0x3c
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b9e4:	fb01 f303 	mul.w	r3, r1, r3
 800b9e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d110      	bne.n	800ba10 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b9ee:	78fa      	ldrb	r2, [r7, #3]
 800b9f0:	6879      	ldr	r1, [r7, #4]
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4413      	add	r3, r2
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	440b      	add	r3, r1
 800b9fc:	3318      	adds	r3, #24
 800b9fe:	2200      	movs	r2, #0
 800ba00:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ba02:	78f9      	ldrb	r1, [r7, #3]
 800ba04:	2300      	movs	r3, #0
 800ba06:	2200      	movs	r2, #0
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f001 ff57 	bl	800d8bc <USBD_LL_Transmit>
 800ba0e:	e015      	b.n	800ba3c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	2200      	movs	r2, #0
 800ba14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba1e:	691b      	ldr	r3, [r3, #16]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d00b      	beq.n	800ba3c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba2a:	691b      	ldr	r3, [r3, #16]
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ba32:	68ba      	ldr	r2, [r7, #8]
 800ba34:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ba38:	78fa      	ldrb	r2, [r7, #3]
 800ba3a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ba3c:	2300      	movs	r3, #0
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b084      	sub	sp, #16
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
 800ba4e:	460b      	mov	r3, r1
 800ba50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d101      	bne.n	800ba68 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ba64:	2303      	movs	r3, #3
 800ba66:	e015      	b.n	800ba94 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ba68:	78fb      	ldrb	r3, [r7, #3]
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f001 ff95 	bl	800d99c <USBD_LL_GetRxDataSize>
 800ba72:	4602      	mov	r2, r0
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	68fa      	ldr	r2, [r7, #12]
 800ba84:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ba88:	68fa      	ldr	r2, [r7, #12]
 800ba8a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ba8e:	4611      	mov	r1, r2
 800ba90:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ba92:	2300      	movs	r3, #0
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3710      	adds	r7, #16
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b084      	sub	sp, #16
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800baaa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d101      	bne.n	800bab6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800bab2:	2303      	movs	r3, #3
 800bab4:	e01b      	b.n	800baee <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d015      	beq.n	800baec <USBD_CDC_EP0_RxReady+0x50>
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bac6:	2bff      	cmp	r3, #255	; 0xff
 800bac8:	d010      	beq.n	800baec <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bad8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bae0:	b292      	uxth	r2, r2
 800bae2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	22ff      	movs	r2, #255	; 0xff
 800bae8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3710      	adds	r7, #16
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
	...

0800baf8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2243      	movs	r2, #67	; 0x43
 800bb04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bb06:	4b03      	ldr	r3, [pc, #12]	; (800bb14 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr
 800bb14:	20000094 	.word	0x20000094

0800bb18 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2243      	movs	r2, #67	; 0x43
 800bb24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bb26:	4b03      	ldr	r3, [pc, #12]	; (800bb34 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr
 800bb34:	20000050 	.word	0x20000050

0800bb38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b083      	sub	sp, #12
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2243      	movs	r2, #67	; 0x43
 800bb44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bb46:	4b03      	ldr	r3, [pc, #12]	; (800bb54 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr
 800bb54:	200000d8 	.word	0x200000d8

0800bb58 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	220a      	movs	r2, #10
 800bb64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bb66:	4b03      	ldr	r3, [pc, #12]	; (800bb74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	370c      	adds	r7, #12
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr
 800bb74:	2000000c 	.word	0x2000000c

0800bb78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b083      	sub	sp, #12
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d101      	bne.n	800bb8c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bb88:	2303      	movs	r3, #3
 800bb8a:	e004      	b.n	800bb96 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	683a      	ldr	r2, [r7, #0]
 800bb90:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	370c      	adds	r7, #12
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr

0800bba2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bba2:	b480      	push	{r7}
 800bba4:	b087      	sub	sp, #28
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	60f8      	str	r0, [r7, #12]
 800bbaa:	60b9      	str	r1, [r7, #8]
 800bbac:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbb4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d101      	bne.n	800bbc0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bbbc:	2303      	movs	r3, #3
 800bbbe:	e008      	b.n	800bbd2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	68ba      	ldr	r2, [r7, #8]
 800bbc4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	687a      	ldr	r2, [r7, #4]
 800bbcc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bbd0:	2300      	movs	r3, #0
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	371c      	adds	r7, #28
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr

0800bbde <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bbde:	b480      	push	{r7}
 800bbe0:	b085      	sub	sp, #20
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
 800bbe6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d101      	bne.n	800bbfa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800bbf6:	2303      	movs	r3, #3
 800bbf8:	e004      	b.n	800bc04 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	683a      	ldr	r2, [r7, #0]
 800bbfe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bc02:	2300      	movs	r3, #0
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3714      	adds	r7, #20
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc1e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bc20:	2301      	movs	r3, #1
 800bc22:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d101      	bne.n	800bc32 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bc2e:	2303      	movs	r3, #3
 800bc30:	e01a      	b.n	800bc68 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d114      	bne.n	800bc66 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bc5a:	2181      	movs	r1, #129	; 0x81
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f001 fe2d 	bl	800d8bc <USBD_LL_Transmit>

    ret = USBD_OK;
 800bc62:	2300      	movs	r3, #0
 800bc64:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bc66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3710      	adds	r7, #16
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d101      	bne.n	800bc8e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bc8a:	2303      	movs	r3, #3
 800bc8c:	e016      	b.n	800bcbc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	7c1b      	ldrb	r3, [r3, #16]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d109      	bne.n	800bcaa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bca0:	2101      	movs	r1, #1
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f001 fe42 	bl	800d92c <USBD_LL_PrepareReceive>
 800bca8:	e007      	b.n	800bcba <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bcb0:	2340      	movs	r3, #64	; 0x40
 800bcb2:	2101      	movs	r1, #1
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f001 fe39 	bl	800d92c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bcba:	2300      	movs	r3, #0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b086      	sub	sp, #24
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	4613      	mov	r3, r2
 800bcd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d101      	bne.n	800bcdc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bcd8:	2303      	movs	r3, #3
 800bcda:	e01f      	b.n	800bd1c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2200      	movs	r2, #0
 800bce8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d003      	beq.n	800bd02 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	68ba      	ldr	r2, [r7, #8]
 800bcfe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2201      	movs	r2, #1
 800bd06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	79fa      	ldrb	r2, [r7, #7]
 800bd0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	f001 fbfb 	bl	800d50c <USBD_LL_Init>
 800bd16:	4603      	mov	r3, r0
 800bd18:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bd1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3718      	adds	r7, #24
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d101      	bne.n	800bd3c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bd38:	2303      	movs	r3, #3
 800bd3a:	e016      	b.n	800bd6a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	683a      	ldr	r2, [r7, #0]
 800bd40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d00b      	beq.n	800bd68 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd58:	f107 020e 	add.w	r2, r7, #14
 800bd5c:	4610      	mov	r0, r2
 800bd5e:	4798      	blx	r3
 800bd60:	4602      	mov	r2, r0
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800bd68:	2300      	movs	r3, #0
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bd72:	b580      	push	{r7, lr}
 800bd74:	b082      	sub	sp, #8
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f001 fc28 	bl	800d5d0 <USBD_LL_Start>
 800bd80:	4603      	mov	r3, r0
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3708      	adds	r7, #8
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}

0800bd8a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bd8a:	b480      	push	{r7}
 800bd8c:	b083      	sub	sp, #12
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	460b      	mov	r3, r1
 800bdaa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bdac:	2303      	movs	r3, #3
 800bdae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d009      	beq.n	800bdce <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	78fa      	ldrb	r2, [r7, #3]
 800bdc4:	4611      	mov	r1, r2
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	4798      	blx	r3
 800bdca:	4603      	mov	r3, r0
 800bdcc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bdce:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3710      	adds	r7, #16
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	460b      	mov	r3, r1
 800bde2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d007      	beq.n	800bdfe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	78fa      	ldrb	r2, [r7, #3]
 800bdf8:	4611      	mov	r1, r2
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	4798      	blx	r3
  }

  return USBD_OK;
 800bdfe:	2300      	movs	r3, #0
}
 800be00:	4618      	mov	r0, r3
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be18:	6839      	ldr	r1, [r7, #0]
 800be1a:	4618      	mov	r0, r3
 800be1c:	f000 ff46 	bl	800ccac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2201      	movs	r2, #1
 800be24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800be2e:	461a      	mov	r2, r3
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800be3c:	f003 031f 	and.w	r3, r3, #31
 800be40:	2b02      	cmp	r3, #2
 800be42:	d01a      	beq.n	800be7a <USBD_LL_SetupStage+0x72>
 800be44:	2b02      	cmp	r3, #2
 800be46:	d822      	bhi.n	800be8e <USBD_LL_SetupStage+0x86>
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d002      	beq.n	800be52 <USBD_LL_SetupStage+0x4a>
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d00a      	beq.n	800be66 <USBD_LL_SetupStage+0x5e>
 800be50:	e01d      	b.n	800be8e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be58:	4619      	mov	r1, r3
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 f9ee 	bl	800c23c <USBD_StdDevReq>
 800be60:	4603      	mov	r3, r0
 800be62:	73fb      	strb	r3, [r7, #15]
      break;
 800be64:	e020      	b.n	800bea8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be6c:	4619      	mov	r1, r3
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 fa52 	bl	800c318 <USBD_StdItfReq>
 800be74:	4603      	mov	r3, r0
 800be76:	73fb      	strb	r3, [r7, #15]
      break;
 800be78:	e016      	b.n	800bea8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be80:	4619      	mov	r1, r3
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fa91 	bl	800c3aa <USBD_StdEPReq>
 800be88:	4603      	mov	r3, r0
 800be8a:	73fb      	strb	r3, [r7, #15]
      break;
 800be8c:	e00c      	b.n	800bea8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800be94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	4619      	mov	r1, r3
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f001 fc3d 	bl	800d71c <USBD_LL_StallEP>
 800bea2:	4603      	mov	r3, r0
 800bea4:	73fb      	strb	r3, [r7, #15]
      break;
 800bea6:	bf00      	nop
  }

  return ret;
 800bea8:	7bfb      	ldrb	r3, [r7, #15]
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3710      	adds	r7, #16
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b086      	sub	sp, #24
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	60f8      	str	r0, [r7, #12]
 800beba:	460b      	mov	r3, r1
 800bebc:	607a      	str	r2, [r7, #4]
 800bebe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bec0:	7afb      	ldrb	r3, [r7, #11]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d138      	bne.n	800bf38 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800becc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bed4:	2b03      	cmp	r3, #3
 800bed6:	d14a      	bne.n	800bf6e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	689a      	ldr	r2, [r3, #8]
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d913      	bls.n	800bf0c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	689a      	ldr	r2, [r3, #8]
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	1ad2      	subs	r2, r2, r3
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	68da      	ldr	r2, [r3, #12]
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	689b      	ldr	r3, [r3, #8]
 800befa:	4293      	cmp	r3, r2
 800befc:	bf28      	it	cs
 800befe:	4613      	movcs	r3, r2
 800bf00:	461a      	mov	r2, r3
 800bf02:	6879      	ldr	r1, [r7, #4]
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	f000 ffc5 	bl	800ce94 <USBD_CtlContinueRx>
 800bf0a:	e030      	b.n	800bf6e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	2b03      	cmp	r3, #3
 800bf16:	d10b      	bne.n	800bf30 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf1e:	691b      	ldr	r3, [r3, #16]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d005      	beq.n	800bf30 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	68f8      	ldr	r0, [r7, #12]
 800bf2e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f000 ffc0 	bl	800ceb6 <USBD_CtlSendStatus>
 800bf36:	e01a      	b.n	800bf6e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	2b03      	cmp	r3, #3
 800bf42:	d114      	bne.n	800bf6e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf4a:	699b      	ldr	r3, [r3, #24]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d00e      	beq.n	800bf6e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf56:	699b      	ldr	r3, [r3, #24]
 800bf58:	7afa      	ldrb	r2, [r7, #11]
 800bf5a:	4611      	mov	r1, r2
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	4798      	blx	r3
 800bf60:	4603      	mov	r3, r0
 800bf62:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bf64:	7dfb      	ldrb	r3, [r7, #23]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d001      	beq.n	800bf6e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800bf6a:	7dfb      	ldrb	r3, [r7, #23]
 800bf6c:	e000      	b.n	800bf70 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800bf6e:	2300      	movs	r3, #0
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3718      	adds	r7, #24
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b086      	sub	sp, #24
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	460b      	mov	r3, r1
 800bf82:	607a      	str	r2, [r7, #4]
 800bf84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bf86:	7afb      	ldrb	r3, [r7, #11]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d16b      	bne.n	800c064 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	3314      	adds	r3, #20
 800bf90:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bf98:	2b02      	cmp	r3, #2
 800bf9a:	d156      	bne.n	800c04a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	689a      	ldr	r2, [r3, #8]
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d914      	bls.n	800bfd2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	689a      	ldr	r2, [r3, #8]
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	68db      	ldr	r3, [r3, #12]
 800bfb0:	1ad2      	subs	r2, r2, r3
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	461a      	mov	r2, r3
 800bfbc:	6879      	ldr	r1, [r7, #4]
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	f000 ff3a 	bl	800ce38 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	2100      	movs	r1, #0
 800bfca:	68f8      	ldr	r0, [r7, #12]
 800bfcc:	f001 fcae 	bl	800d92c <USBD_LL_PrepareReceive>
 800bfd0:	e03b      	b.n	800c04a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	68da      	ldr	r2, [r3, #12]
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d11c      	bne.n	800c018 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	685a      	ldr	r2, [r3, #4]
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d316      	bcc.n	800c018 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	685a      	ldr	r2, [r3, #4]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d20f      	bcs.n	800c018 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bff8:	2200      	movs	r2, #0
 800bffa:	2100      	movs	r1, #0
 800bffc:	68f8      	ldr	r0, [r7, #12]
 800bffe:	f000 ff1b 	bl	800ce38 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2200      	movs	r2, #0
 800c006:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c00a:	2300      	movs	r3, #0
 800c00c:	2200      	movs	r2, #0
 800c00e:	2100      	movs	r1, #0
 800c010:	68f8      	ldr	r0, [r7, #12]
 800c012:	f001 fc8b 	bl	800d92c <USBD_LL_PrepareReceive>
 800c016:	e018      	b.n	800c04a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	2b03      	cmp	r3, #3
 800c022:	d10b      	bne.n	800c03c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d005      	beq.n	800c03c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	68f8      	ldr	r0, [r7, #12]
 800c03a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c03c:	2180      	movs	r1, #128	; 0x80
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	f001 fb6c 	bl	800d71c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f000 ff49 	bl	800cedc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c050:	2b01      	cmp	r3, #1
 800c052:	d122      	bne.n	800c09a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	f7ff fe98 	bl	800bd8a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2200      	movs	r2, #0
 800c05e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c062:	e01a      	b.n	800c09a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	2b03      	cmp	r3, #3
 800c06e:	d114      	bne.n	800c09a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c076:	695b      	ldr	r3, [r3, #20]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d00e      	beq.n	800c09a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c082:	695b      	ldr	r3, [r3, #20]
 800c084:	7afa      	ldrb	r2, [r7, #11]
 800c086:	4611      	mov	r1, r2
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	4798      	blx	r3
 800c08c:	4603      	mov	r3, r0
 800c08e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c090:	7dfb      	ldrb	r3, [r7, #23]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d001      	beq.n	800c09a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c096:	7dfb      	ldrb	r3, [r7, #23]
 800c098:	e000      	b.n	800c09c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3718      	adds	r7, #24
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d101      	bne.n	800c0d8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c0d4:	2303      	movs	r3, #3
 800c0d6:	e02f      	b.n	800c138 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d00f      	beq.n	800c102 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d009      	beq.n	800c102 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	6852      	ldr	r2, [r2, #4]
 800c0fa:	b2d2      	uxtb	r2, r2
 800c0fc:	4611      	mov	r1, r2
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c102:	2340      	movs	r3, #64	; 0x40
 800c104:	2200      	movs	r2, #0
 800c106:	2100      	movs	r1, #0
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f001 fa93 	bl	800d634 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2201      	movs	r2, #1
 800c112:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2240      	movs	r2, #64	; 0x40
 800c11a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c11e:	2340      	movs	r3, #64	; 0x40
 800c120:	2200      	movs	r2, #0
 800c122:	2180      	movs	r1, #128	; 0x80
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f001 fa85 	bl	800d634 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2201      	movs	r2, #1
 800c12e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2240      	movs	r2, #64	; 0x40
 800c134:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c136:	2300      	movs	r3, #0
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	460b      	mov	r3, r1
 800c14a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	78fa      	ldrb	r2, [r7, #3]
 800c150:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c152:	2300      	movs	r3, #0
}
 800c154:	4618      	mov	r0, r3
 800c156:	370c      	adds	r7, #12
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c160:	b480      	push	{r7}
 800c162:	b083      	sub	sp, #12
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c16e:	b2da      	uxtb	r2, r3
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2204      	movs	r2, #4
 800c17a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c17e:	2300      	movs	r3, #0
}
 800c180:	4618      	mov	r0, r3
 800c182:	370c      	adds	r7, #12
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr

0800c18c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	2b04      	cmp	r3, #4
 800c19e:	d106      	bne.n	800c1ae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c1a6:	b2da      	uxtb	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c1ae:	2300      	movs	r3, #0
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d101      	bne.n	800c1d2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c1ce:	2303      	movs	r3, #3
 800c1d0:	e012      	b.n	800c1f8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	2b03      	cmp	r3, #3
 800c1dc:	d10b      	bne.n	800c1f6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1e4:	69db      	ldr	r3, [r3, #28]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d005      	beq.n	800c1f6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1f0:	69db      	ldr	r3, [r3, #28]
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c1f6:	2300      	movs	r3, #0
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c200:	b480      	push	{r7}
 800c202:	b087      	sub	sp, #28
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	3301      	adds	r3, #1
 800c216:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c21e:	8a3b      	ldrh	r3, [r7, #16]
 800c220:	021b      	lsls	r3, r3, #8
 800c222:	b21a      	sxth	r2, r3
 800c224:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c228:	4313      	orrs	r3, r2
 800c22a:	b21b      	sxth	r3, r3
 800c22c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c22e:	89fb      	ldrh	r3, [r7, #14]
}
 800c230:	4618      	mov	r0, r3
 800c232:	371c      	adds	r7, #28
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr

0800c23c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c246:	2300      	movs	r3, #0
 800c248:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c252:	2b40      	cmp	r3, #64	; 0x40
 800c254:	d005      	beq.n	800c262 <USBD_StdDevReq+0x26>
 800c256:	2b40      	cmp	r3, #64	; 0x40
 800c258:	d853      	bhi.n	800c302 <USBD_StdDevReq+0xc6>
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d00b      	beq.n	800c276 <USBD_StdDevReq+0x3a>
 800c25e:	2b20      	cmp	r3, #32
 800c260:	d14f      	bne.n	800c302 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	6839      	ldr	r1, [r7, #0]
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	4798      	blx	r3
 800c270:	4603      	mov	r3, r0
 800c272:	73fb      	strb	r3, [r7, #15]
      break;
 800c274:	e04a      	b.n	800c30c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	785b      	ldrb	r3, [r3, #1]
 800c27a:	2b09      	cmp	r3, #9
 800c27c:	d83b      	bhi.n	800c2f6 <USBD_StdDevReq+0xba>
 800c27e:	a201      	add	r2, pc, #4	; (adr r2, 800c284 <USBD_StdDevReq+0x48>)
 800c280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c284:	0800c2d9 	.word	0x0800c2d9
 800c288:	0800c2ed 	.word	0x0800c2ed
 800c28c:	0800c2f7 	.word	0x0800c2f7
 800c290:	0800c2e3 	.word	0x0800c2e3
 800c294:	0800c2f7 	.word	0x0800c2f7
 800c298:	0800c2b7 	.word	0x0800c2b7
 800c29c:	0800c2ad 	.word	0x0800c2ad
 800c2a0:	0800c2f7 	.word	0x0800c2f7
 800c2a4:	0800c2cf 	.word	0x0800c2cf
 800c2a8:	0800c2c1 	.word	0x0800c2c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c2ac:	6839      	ldr	r1, [r7, #0]
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 f9de 	bl	800c670 <USBD_GetDescriptor>
          break;
 800c2b4:	e024      	b.n	800c300 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c2b6:	6839      	ldr	r1, [r7, #0]
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 fb6d 	bl	800c998 <USBD_SetAddress>
          break;
 800c2be:	e01f      	b.n	800c300 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fbac 	bl	800ca20 <USBD_SetConfig>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	73fb      	strb	r3, [r7, #15]
          break;
 800c2cc:	e018      	b.n	800c300 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 fc4b 	bl	800cb6c <USBD_GetConfig>
          break;
 800c2d6:	e013      	b.n	800c300 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c2d8:	6839      	ldr	r1, [r7, #0]
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 fc7c 	bl	800cbd8 <USBD_GetStatus>
          break;
 800c2e0:	e00e      	b.n	800c300 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c2e2:	6839      	ldr	r1, [r7, #0]
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 fcab 	bl	800cc40 <USBD_SetFeature>
          break;
 800c2ea:	e009      	b.n	800c300 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c2ec:	6839      	ldr	r1, [r7, #0]
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fcba 	bl	800cc68 <USBD_ClrFeature>
          break;
 800c2f4:	e004      	b.n	800c300 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c2f6:	6839      	ldr	r1, [r7, #0]
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 fd11 	bl	800cd20 <USBD_CtlError>
          break;
 800c2fe:	bf00      	nop
      }
      break;
 800c300:	e004      	b.n	800c30c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c302:	6839      	ldr	r1, [r7, #0]
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 fd0b 	bl	800cd20 <USBD_CtlError>
      break;
 800c30a:	bf00      	nop
  }

  return ret;
 800c30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3710      	adds	r7, #16
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop

0800c318 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c322:	2300      	movs	r3, #0
 800c324:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c32e:	2b40      	cmp	r3, #64	; 0x40
 800c330:	d005      	beq.n	800c33e <USBD_StdItfReq+0x26>
 800c332:	2b40      	cmp	r3, #64	; 0x40
 800c334:	d82f      	bhi.n	800c396 <USBD_StdItfReq+0x7e>
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <USBD_StdItfReq+0x26>
 800c33a:	2b20      	cmp	r3, #32
 800c33c:	d12b      	bne.n	800c396 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c344:	b2db      	uxtb	r3, r3
 800c346:	3b01      	subs	r3, #1
 800c348:	2b02      	cmp	r3, #2
 800c34a:	d81d      	bhi.n	800c388 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	889b      	ldrh	r3, [r3, #4]
 800c350:	b2db      	uxtb	r3, r3
 800c352:	2b01      	cmp	r3, #1
 800c354:	d813      	bhi.n	800c37e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c35c:	689b      	ldr	r3, [r3, #8]
 800c35e:	6839      	ldr	r1, [r7, #0]
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	4798      	blx	r3
 800c364:	4603      	mov	r3, r0
 800c366:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	88db      	ldrh	r3, [r3, #6]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d110      	bne.n	800c392 <USBD_StdItfReq+0x7a>
 800c370:	7bfb      	ldrb	r3, [r7, #15]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10d      	bne.n	800c392 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 fd9d 	bl	800ceb6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c37c:	e009      	b.n	800c392 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c37e:	6839      	ldr	r1, [r7, #0]
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 fccd 	bl	800cd20 <USBD_CtlError>
          break;
 800c386:	e004      	b.n	800c392 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c388:	6839      	ldr	r1, [r7, #0]
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 fcc8 	bl	800cd20 <USBD_CtlError>
          break;
 800c390:	e000      	b.n	800c394 <USBD_StdItfReq+0x7c>
          break;
 800c392:	bf00      	nop
      }
      break;
 800c394:	e004      	b.n	800c3a0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c396:	6839      	ldr	r1, [r7, #0]
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 fcc1 	bl	800cd20 <USBD_CtlError>
      break;
 800c39e:	bf00      	nop
  }

  return ret;
 800c3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3710      	adds	r7, #16
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b084      	sub	sp, #16
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
 800c3b2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	889b      	ldrh	r3, [r3, #4]
 800c3bc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c3c6:	2b40      	cmp	r3, #64	; 0x40
 800c3c8:	d007      	beq.n	800c3da <USBD_StdEPReq+0x30>
 800c3ca:	2b40      	cmp	r3, #64	; 0x40
 800c3cc:	f200 8145 	bhi.w	800c65a <USBD_StdEPReq+0x2b0>
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d00c      	beq.n	800c3ee <USBD_StdEPReq+0x44>
 800c3d4:	2b20      	cmp	r3, #32
 800c3d6:	f040 8140 	bne.w	800c65a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3e0:	689b      	ldr	r3, [r3, #8]
 800c3e2:	6839      	ldr	r1, [r7, #0]
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	4798      	blx	r3
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	73fb      	strb	r3, [r7, #15]
      break;
 800c3ec:	e13a      	b.n	800c664 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	785b      	ldrb	r3, [r3, #1]
 800c3f2:	2b03      	cmp	r3, #3
 800c3f4:	d007      	beq.n	800c406 <USBD_StdEPReq+0x5c>
 800c3f6:	2b03      	cmp	r3, #3
 800c3f8:	f300 8129 	bgt.w	800c64e <USBD_StdEPReq+0x2a4>
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d07f      	beq.n	800c500 <USBD_StdEPReq+0x156>
 800c400:	2b01      	cmp	r3, #1
 800c402:	d03c      	beq.n	800c47e <USBD_StdEPReq+0xd4>
 800c404:	e123      	b.n	800c64e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c40c:	b2db      	uxtb	r3, r3
 800c40e:	2b02      	cmp	r3, #2
 800c410:	d002      	beq.n	800c418 <USBD_StdEPReq+0x6e>
 800c412:	2b03      	cmp	r3, #3
 800c414:	d016      	beq.n	800c444 <USBD_StdEPReq+0x9a>
 800c416:	e02c      	b.n	800c472 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c418:	7bbb      	ldrb	r3, [r7, #14]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d00d      	beq.n	800c43a <USBD_StdEPReq+0x90>
 800c41e:	7bbb      	ldrb	r3, [r7, #14]
 800c420:	2b80      	cmp	r3, #128	; 0x80
 800c422:	d00a      	beq.n	800c43a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c424:	7bbb      	ldrb	r3, [r7, #14]
 800c426:	4619      	mov	r1, r3
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f001 f977 	bl	800d71c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c42e:	2180      	movs	r1, #128	; 0x80
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f001 f973 	bl	800d71c <USBD_LL_StallEP>
 800c436:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c438:	e020      	b.n	800c47c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c43a:	6839      	ldr	r1, [r7, #0]
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 fc6f 	bl	800cd20 <USBD_CtlError>
              break;
 800c442:	e01b      	b.n	800c47c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	885b      	ldrh	r3, [r3, #2]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d10e      	bne.n	800c46a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c44c:	7bbb      	ldrb	r3, [r7, #14]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d00b      	beq.n	800c46a <USBD_StdEPReq+0xc0>
 800c452:	7bbb      	ldrb	r3, [r7, #14]
 800c454:	2b80      	cmp	r3, #128	; 0x80
 800c456:	d008      	beq.n	800c46a <USBD_StdEPReq+0xc0>
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	88db      	ldrh	r3, [r3, #6]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d104      	bne.n	800c46a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c460:	7bbb      	ldrb	r3, [r7, #14]
 800c462:	4619      	mov	r1, r3
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f001 f959 	bl	800d71c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 fd23 	bl	800ceb6 <USBD_CtlSendStatus>

              break;
 800c470:	e004      	b.n	800c47c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c472:	6839      	ldr	r1, [r7, #0]
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f000 fc53 	bl	800cd20 <USBD_CtlError>
              break;
 800c47a:	bf00      	nop
          }
          break;
 800c47c:	e0ec      	b.n	800c658 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c484:	b2db      	uxtb	r3, r3
 800c486:	2b02      	cmp	r3, #2
 800c488:	d002      	beq.n	800c490 <USBD_StdEPReq+0xe6>
 800c48a:	2b03      	cmp	r3, #3
 800c48c:	d016      	beq.n	800c4bc <USBD_StdEPReq+0x112>
 800c48e:	e030      	b.n	800c4f2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c490:	7bbb      	ldrb	r3, [r7, #14]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d00d      	beq.n	800c4b2 <USBD_StdEPReq+0x108>
 800c496:	7bbb      	ldrb	r3, [r7, #14]
 800c498:	2b80      	cmp	r3, #128	; 0x80
 800c49a:	d00a      	beq.n	800c4b2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c49c:	7bbb      	ldrb	r3, [r7, #14]
 800c49e:	4619      	mov	r1, r3
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f001 f93b 	bl	800d71c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4a6:	2180      	movs	r1, #128	; 0x80
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f001 f937 	bl	800d71c <USBD_LL_StallEP>
 800c4ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c4b0:	e025      	b.n	800c4fe <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c4b2:	6839      	ldr	r1, [r7, #0]
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f000 fc33 	bl	800cd20 <USBD_CtlError>
              break;
 800c4ba:	e020      	b.n	800c4fe <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	885b      	ldrh	r3, [r3, #2]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d11b      	bne.n	800c4fc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c4c4:	7bbb      	ldrb	r3, [r7, #14]
 800c4c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d004      	beq.n	800c4d8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c4ce:	7bbb      	ldrb	r3, [r7, #14]
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f001 f958 	bl	800d788 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 fcec 	bl	800ceb6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4e4:	689b      	ldr	r3, [r3, #8]
 800c4e6:	6839      	ldr	r1, [r7, #0]
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	4798      	blx	r3
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c4f0:	e004      	b.n	800c4fc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c4f2:	6839      	ldr	r1, [r7, #0]
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 fc13 	bl	800cd20 <USBD_CtlError>
              break;
 800c4fa:	e000      	b.n	800c4fe <USBD_StdEPReq+0x154>
              break;
 800c4fc:	bf00      	nop
          }
          break;
 800c4fe:	e0ab      	b.n	800c658 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c506:	b2db      	uxtb	r3, r3
 800c508:	2b02      	cmp	r3, #2
 800c50a:	d002      	beq.n	800c512 <USBD_StdEPReq+0x168>
 800c50c:	2b03      	cmp	r3, #3
 800c50e:	d032      	beq.n	800c576 <USBD_StdEPReq+0x1cc>
 800c510:	e097      	b.n	800c642 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c512:	7bbb      	ldrb	r3, [r7, #14]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d007      	beq.n	800c528 <USBD_StdEPReq+0x17e>
 800c518:	7bbb      	ldrb	r3, [r7, #14]
 800c51a:	2b80      	cmp	r3, #128	; 0x80
 800c51c:	d004      	beq.n	800c528 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c51e:	6839      	ldr	r1, [r7, #0]
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 fbfd 	bl	800cd20 <USBD_CtlError>
                break;
 800c526:	e091      	b.n	800c64c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c528:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	da0b      	bge.n	800c548 <USBD_StdEPReq+0x19e>
 800c530:	7bbb      	ldrb	r3, [r7, #14]
 800c532:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c536:	4613      	mov	r3, r2
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	4413      	add	r3, r2
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	3310      	adds	r3, #16
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	4413      	add	r3, r2
 800c544:	3304      	adds	r3, #4
 800c546:	e00b      	b.n	800c560 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c548:	7bbb      	ldrb	r3, [r7, #14]
 800c54a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c54e:	4613      	mov	r3, r2
 800c550:	009b      	lsls	r3, r3, #2
 800c552:	4413      	add	r3, r2
 800c554:	009b      	lsls	r3, r3, #2
 800c556:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	4413      	add	r3, r2
 800c55e:	3304      	adds	r3, #4
 800c560:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	2200      	movs	r2, #0
 800c566:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	2202      	movs	r2, #2
 800c56c:	4619      	mov	r1, r3
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 fc47 	bl	800ce02 <USBD_CtlSendData>
              break;
 800c574:	e06a      	b.n	800c64c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c576:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	da11      	bge.n	800c5a2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c57e:	7bbb      	ldrb	r3, [r7, #14]
 800c580:	f003 020f 	and.w	r2, r3, #15
 800c584:	6879      	ldr	r1, [r7, #4]
 800c586:	4613      	mov	r3, r2
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	4413      	add	r3, r2
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	440b      	add	r3, r1
 800c590:	3324      	adds	r3, #36	; 0x24
 800c592:	881b      	ldrh	r3, [r3, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d117      	bne.n	800c5c8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c598:	6839      	ldr	r1, [r7, #0]
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f000 fbc0 	bl	800cd20 <USBD_CtlError>
                  break;
 800c5a0:	e054      	b.n	800c64c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c5a2:	7bbb      	ldrb	r3, [r7, #14]
 800c5a4:	f003 020f 	and.w	r2, r3, #15
 800c5a8:	6879      	ldr	r1, [r7, #4]
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	4413      	add	r3, r2
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	440b      	add	r3, r1
 800c5b4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c5b8:	881b      	ldrh	r3, [r3, #0]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d104      	bne.n	800c5c8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c5be:	6839      	ldr	r1, [r7, #0]
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 fbad 	bl	800cd20 <USBD_CtlError>
                  break;
 800c5c6:	e041      	b.n	800c64c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	da0b      	bge.n	800c5e8 <USBD_StdEPReq+0x23e>
 800c5d0:	7bbb      	ldrb	r3, [r7, #14]
 800c5d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c5d6:	4613      	mov	r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	4413      	add	r3, r2
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	3310      	adds	r3, #16
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	3304      	adds	r3, #4
 800c5e6:	e00b      	b.n	800c600 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c5e8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5ee:	4613      	mov	r3, r2
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	4413      	add	r3, r2
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	4413      	add	r3, r2
 800c5fe:	3304      	adds	r3, #4
 800c600:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c602:	7bbb      	ldrb	r3, [r7, #14]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d002      	beq.n	800c60e <USBD_StdEPReq+0x264>
 800c608:	7bbb      	ldrb	r3, [r7, #14]
 800c60a:	2b80      	cmp	r3, #128	; 0x80
 800c60c:	d103      	bne.n	800c616 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	2200      	movs	r2, #0
 800c612:	601a      	str	r2, [r3, #0]
 800c614:	e00e      	b.n	800c634 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c616:	7bbb      	ldrb	r3, [r7, #14]
 800c618:	4619      	mov	r1, r3
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f001 f8ea 	bl	800d7f4 <USBD_LL_IsStallEP>
 800c620:	4603      	mov	r3, r0
 800c622:	2b00      	cmp	r3, #0
 800c624:	d003      	beq.n	800c62e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	2201      	movs	r2, #1
 800c62a:	601a      	str	r2, [r3, #0]
 800c62c:	e002      	b.n	800c634 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	2200      	movs	r2, #0
 800c632:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	2202      	movs	r2, #2
 800c638:	4619      	mov	r1, r3
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 fbe1 	bl	800ce02 <USBD_CtlSendData>
              break;
 800c640:	e004      	b.n	800c64c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c642:	6839      	ldr	r1, [r7, #0]
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 fb6b 	bl	800cd20 <USBD_CtlError>
              break;
 800c64a:	bf00      	nop
          }
          break;
 800c64c:	e004      	b.n	800c658 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c64e:	6839      	ldr	r1, [r7, #0]
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 fb65 	bl	800cd20 <USBD_CtlError>
          break;
 800c656:	bf00      	nop
      }
      break;
 800c658:	e004      	b.n	800c664 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c65a:	6839      	ldr	r1, [r7, #0]
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 fb5f 	bl	800cd20 <USBD_CtlError>
      break;
 800c662:	bf00      	nop
  }

  return ret;
 800c664:	7bfb      	ldrb	r3, [r7, #15]
}
 800c666:	4618      	mov	r0, r3
 800c668:	3710      	adds	r7, #16
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
	...

0800c670 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c67a:	2300      	movs	r3, #0
 800c67c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c67e:	2300      	movs	r3, #0
 800c680:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c682:	2300      	movs	r3, #0
 800c684:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	885b      	ldrh	r3, [r3, #2]
 800c68a:	0a1b      	lsrs	r3, r3, #8
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	3b01      	subs	r3, #1
 800c690:	2b0e      	cmp	r3, #14
 800c692:	f200 8152 	bhi.w	800c93a <USBD_GetDescriptor+0x2ca>
 800c696:	a201      	add	r2, pc, #4	; (adr r2, 800c69c <USBD_GetDescriptor+0x2c>)
 800c698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c69c:	0800c70d 	.word	0x0800c70d
 800c6a0:	0800c725 	.word	0x0800c725
 800c6a4:	0800c765 	.word	0x0800c765
 800c6a8:	0800c93b 	.word	0x0800c93b
 800c6ac:	0800c93b 	.word	0x0800c93b
 800c6b0:	0800c8db 	.word	0x0800c8db
 800c6b4:	0800c907 	.word	0x0800c907
 800c6b8:	0800c93b 	.word	0x0800c93b
 800c6bc:	0800c93b 	.word	0x0800c93b
 800c6c0:	0800c93b 	.word	0x0800c93b
 800c6c4:	0800c93b 	.word	0x0800c93b
 800c6c8:	0800c93b 	.word	0x0800c93b
 800c6cc:	0800c93b 	.word	0x0800c93b
 800c6d0:	0800c93b 	.word	0x0800c93b
 800c6d4:	0800c6d9 	.word	0x0800c6d9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6de:	69db      	ldr	r3, [r3, #28]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d00b      	beq.n	800c6fc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6ea:	69db      	ldr	r3, [r3, #28]
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	7c12      	ldrb	r2, [r2, #16]
 800c6f0:	f107 0108 	add.w	r1, r7, #8
 800c6f4:	4610      	mov	r0, r2
 800c6f6:	4798      	blx	r3
 800c6f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c6fa:	e126      	b.n	800c94a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c6fc:	6839      	ldr	r1, [r7, #0]
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 fb0e 	bl	800cd20 <USBD_CtlError>
        err++;
 800c704:	7afb      	ldrb	r3, [r7, #11]
 800c706:	3301      	adds	r3, #1
 800c708:	72fb      	strb	r3, [r7, #11]
      break;
 800c70a:	e11e      	b.n	800c94a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	7c12      	ldrb	r2, [r2, #16]
 800c718:	f107 0108 	add.w	r1, r7, #8
 800c71c:	4610      	mov	r0, r2
 800c71e:	4798      	blx	r3
 800c720:	60f8      	str	r0, [r7, #12]
      break;
 800c722:	e112      	b.n	800c94a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	7c1b      	ldrb	r3, [r3, #16]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d10d      	bne.n	800c748 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c734:	f107 0208 	add.w	r2, r7, #8
 800c738:	4610      	mov	r0, r2
 800c73a:	4798      	blx	r3
 800c73c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	3301      	adds	r3, #1
 800c742:	2202      	movs	r2, #2
 800c744:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c746:	e100      	b.n	800c94a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c750:	f107 0208 	add.w	r2, r7, #8
 800c754:	4610      	mov	r0, r2
 800c756:	4798      	blx	r3
 800c758:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	3301      	adds	r3, #1
 800c75e:	2202      	movs	r2, #2
 800c760:	701a      	strb	r2, [r3, #0]
      break;
 800c762:	e0f2      	b.n	800c94a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	885b      	ldrh	r3, [r3, #2]
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	2b05      	cmp	r3, #5
 800c76c:	f200 80ac 	bhi.w	800c8c8 <USBD_GetDescriptor+0x258>
 800c770:	a201      	add	r2, pc, #4	; (adr r2, 800c778 <USBD_GetDescriptor+0x108>)
 800c772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c776:	bf00      	nop
 800c778:	0800c791 	.word	0x0800c791
 800c77c:	0800c7c5 	.word	0x0800c7c5
 800c780:	0800c7f9 	.word	0x0800c7f9
 800c784:	0800c82d 	.word	0x0800c82d
 800c788:	0800c861 	.word	0x0800c861
 800c78c:	0800c895 	.word	0x0800c895
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d00b      	beq.n	800c7b4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	7c12      	ldrb	r2, [r2, #16]
 800c7a8:	f107 0108 	add.w	r1, r7, #8
 800c7ac:	4610      	mov	r0, r2
 800c7ae:	4798      	blx	r3
 800c7b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7b2:	e091      	b.n	800c8d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c7b4:	6839      	ldr	r1, [r7, #0]
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 fab2 	bl	800cd20 <USBD_CtlError>
            err++;
 800c7bc:	7afb      	ldrb	r3, [r7, #11]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	72fb      	strb	r3, [r7, #11]
          break;
 800c7c2:	e089      	b.n	800c8d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00b      	beq.n	800c7e8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	7c12      	ldrb	r2, [r2, #16]
 800c7dc:	f107 0108 	add.w	r1, r7, #8
 800c7e0:	4610      	mov	r0, r2
 800c7e2:	4798      	blx	r3
 800c7e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7e6:	e077      	b.n	800c8d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c7e8:	6839      	ldr	r1, [r7, #0]
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 fa98 	bl	800cd20 <USBD_CtlError>
            err++;
 800c7f0:	7afb      	ldrb	r3, [r7, #11]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	72fb      	strb	r3, [r7, #11]
          break;
 800c7f6:	e06f      	b.n	800c8d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d00b      	beq.n	800c81c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	7c12      	ldrb	r2, [r2, #16]
 800c810:	f107 0108 	add.w	r1, r7, #8
 800c814:	4610      	mov	r0, r2
 800c816:	4798      	blx	r3
 800c818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c81a:	e05d      	b.n	800c8d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 fa7e 	bl	800cd20 <USBD_CtlError>
            err++;
 800c824:	7afb      	ldrb	r3, [r7, #11]
 800c826:	3301      	adds	r3, #1
 800c828:	72fb      	strb	r3, [r7, #11]
          break;
 800c82a:	e055      	b.n	800c8d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c832:	691b      	ldr	r3, [r3, #16]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00b      	beq.n	800c850 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c83e:	691b      	ldr	r3, [r3, #16]
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	7c12      	ldrb	r2, [r2, #16]
 800c844:	f107 0108 	add.w	r1, r7, #8
 800c848:	4610      	mov	r0, r2
 800c84a:	4798      	blx	r3
 800c84c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c84e:	e043      	b.n	800c8d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c850:	6839      	ldr	r1, [r7, #0]
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 fa64 	bl	800cd20 <USBD_CtlError>
            err++;
 800c858:	7afb      	ldrb	r3, [r7, #11]
 800c85a:	3301      	adds	r3, #1
 800c85c:	72fb      	strb	r3, [r7, #11]
          break;
 800c85e:	e03b      	b.n	800c8d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c866:	695b      	ldr	r3, [r3, #20]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00b      	beq.n	800c884 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c872:	695b      	ldr	r3, [r3, #20]
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	7c12      	ldrb	r2, [r2, #16]
 800c878:	f107 0108 	add.w	r1, r7, #8
 800c87c:	4610      	mov	r0, r2
 800c87e:	4798      	blx	r3
 800c880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c882:	e029      	b.n	800c8d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c884:	6839      	ldr	r1, [r7, #0]
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 fa4a 	bl	800cd20 <USBD_CtlError>
            err++;
 800c88c:	7afb      	ldrb	r3, [r7, #11]
 800c88e:	3301      	adds	r3, #1
 800c890:	72fb      	strb	r3, [r7, #11]
          break;
 800c892:	e021      	b.n	800c8d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c89a:	699b      	ldr	r3, [r3, #24]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d00b      	beq.n	800c8b8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8a6:	699b      	ldr	r3, [r3, #24]
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	7c12      	ldrb	r2, [r2, #16]
 800c8ac:	f107 0108 	add.w	r1, r7, #8
 800c8b0:	4610      	mov	r0, r2
 800c8b2:	4798      	blx	r3
 800c8b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8b6:	e00f      	b.n	800c8d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8b8:	6839      	ldr	r1, [r7, #0]
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 fa30 	bl	800cd20 <USBD_CtlError>
            err++;
 800c8c0:	7afb      	ldrb	r3, [r7, #11]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	72fb      	strb	r3, [r7, #11]
          break;
 800c8c6:	e007      	b.n	800c8d8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c8c8:	6839      	ldr	r1, [r7, #0]
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f000 fa28 	bl	800cd20 <USBD_CtlError>
          err++;
 800c8d0:	7afb      	ldrb	r3, [r7, #11]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c8d6:	bf00      	nop
      }
      break;
 800c8d8:	e037      	b.n	800c94a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	7c1b      	ldrb	r3, [r3, #16]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d109      	bne.n	800c8f6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8ea:	f107 0208 	add.w	r2, r7, #8
 800c8ee:	4610      	mov	r0, r2
 800c8f0:	4798      	blx	r3
 800c8f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c8f4:	e029      	b.n	800c94a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c8f6:	6839      	ldr	r1, [r7, #0]
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 fa11 	bl	800cd20 <USBD_CtlError>
        err++;
 800c8fe:	7afb      	ldrb	r3, [r7, #11]
 800c900:	3301      	adds	r3, #1
 800c902:	72fb      	strb	r3, [r7, #11]
      break;
 800c904:	e021      	b.n	800c94a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	7c1b      	ldrb	r3, [r3, #16]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d10d      	bne.n	800c92a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c916:	f107 0208 	add.w	r2, r7, #8
 800c91a:	4610      	mov	r0, r2
 800c91c:	4798      	blx	r3
 800c91e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	3301      	adds	r3, #1
 800c924:	2207      	movs	r2, #7
 800c926:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c928:	e00f      	b.n	800c94a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c92a:	6839      	ldr	r1, [r7, #0]
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f000 f9f7 	bl	800cd20 <USBD_CtlError>
        err++;
 800c932:	7afb      	ldrb	r3, [r7, #11]
 800c934:	3301      	adds	r3, #1
 800c936:	72fb      	strb	r3, [r7, #11]
      break;
 800c938:	e007      	b.n	800c94a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c93a:	6839      	ldr	r1, [r7, #0]
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 f9ef 	bl	800cd20 <USBD_CtlError>
      err++;
 800c942:	7afb      	ldrb	r3, [r7, #11]
 800c944:	3301      	adds	r3, #1
 800c946:	72fb      	strb	r3, [r7, #11]
      break;
 800c948:	bf00      	nop
  }

  if (err != 0U)
 800c94a:	7afb      	ldrb	r3, [r7, #11]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d11e      	bne.n	800c98e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	88db      	ldrh	r3, [r3, #6]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d016      	beq.n	800c986 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c958:	893b      	ldrh	r3, [r7, #8]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d00e      	beq.n	800c97c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	88da      	ldrh	r2, [r3, #6]
 800c962:	893b      	ldrh	r3, [r7, #8]
 800c964:	4293      	cmp	r3, r2
 800c966:	bf28      	it	cs
 800c968:	4613      	movcs	r3, r2
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c96e:	893b      	ldrh	r3, [r7, #8]
 800c970:	461a      	mov	r2, r3
 800c972:	68f9      	ldr	r1, [r7, #12]
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 fa44 	bl	800ce02 <USBD_CtlSendData>
 800c97a:	e009      	b.n	800c990 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c97c:	6839      	ldr	r1, [r7, #0]
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 f9ce 	bl	800cd20 <USBD_CtlError>
 800c984:	e004      	b.n	800c990 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 fa95 	bl	800ceb6 <USBD_CtlSendStatus>
 800c98c:	e000      	b.n	800c990 <USBD_GetDescriptor+0x320>
    return;
 800c98e:	bf00      	nop
  }
}
 800c990:	3710      	adds	r7, #16
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop

0800c998 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	889b      	ldrh	r3, [r3, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d131      	bne.n	800ca0e <USBD_SetAddress+0x76>
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	88db      	ldrh	r3, [r3, #6]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d12d      	bne.n	800ca0e <USBD_SetAddress+0x76>
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	885b      	ldrh	r3, [r3, #2]
 800c9b6:	2b7f      	cmp	r3, #127	; 0x7f
 800c9b8:	d829      	bhi.n	800ca0e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	885b      	ldrh	r3, [r3, #2]
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9cc:	b2db      	uxtb	r3, r3
 800c9ce:	2b03      	cmp	r3, #3
 800c9d0:	d104      	bne.n	800c9dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c9d2:	6839      	ldr	r1, [r7, #0]
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f000 f9a3 	bl	800cd20 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9da:	e01d      	b.n	800ca18 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	7bfa      	ldrb	r2, [r7, #15]
 800c9e0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c9e4:	7bfb      	ldrb	r3, [r7, #15]
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f000 ff31 	bl	800d850 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f000 fa61 	bl	800ceb6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c9f4:	7bfb      	ldrb	r3, [r7, #15]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d004      	beq.n	800ca04 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2202      	movs	r2, #2
 800c9fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca02:	e009      	b.n	800ca18 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2201      	movs	r2, #1
 800ca08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca0c:	e004      	b.n	800ca18 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ca0e:	6839      	ldr	r1, [r7, #0]
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 f985 	bl	800cd20 <USBD_CtlError>
  }
}
 800ca16:	bf00      	nop
 800ca18:	bf00      	nop
 800ca1a:	3710      	adds	r7, #16
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	885b      	ldrh	r3, [r3, #2]
 800ca32:	b2da      	uxtb	r2, r3
 800ca34:	4b4c      	ldr	r3, [pc, #304]	; (800cb68 <USBD_SetConfig+0x148>)
 800ca36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ca38:	4b4b      	ldr	r3, [pc, #300]	; (800cb68 <USBD_SetConfig+0x148>)
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d905      	bls.n	800ca4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ca40:	6839      	ldr	r1, [r7, #0]
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 f96c 	bl	800cd20 <USBD_CtlError>
    return USBD_FAIL;
 800ca48:	2303      	movs	r3, #3
 800ca4a:	e088      	b.n	800cb5e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	2b02      	cmp	r3, #2
 800ca56:	d002      	beq.n	800ca5e <USBD_SetConfig+0x3e>
 800ca58:	2b03      	cmp	r3, #3
 800ca5a:	d025      	beq.n	800caa8 <USBD_SetConfig+0x88>
 800ca5c:	e071      	b.n	800cb42 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ca5e:	4b42      	ldr	r3, [pc, #264]	; (800cb68 <USBD_SetConfig+0x148>)
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d01c      	beq.n	800caa0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ca66:	4b40      	ldr	r3, [pc, #256]	; (800cb68 <USBD_SetConfig+0x148>)
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ca70:	4b3d      	ldr	r3, [pc, #244]	; (800cb68 <USBD_SetConfig+0x148>)
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	4619      	mov	r1, r3
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f7ff f992 	bl	800bda0 <USBD_SetClassConfig>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ca80:	7bfb      	ldrb	r3, [r7, #15]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d004      	beq.n	800ca90 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ca86:	6839      	ldr	r1, [r7, #0]
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 f949 	bl	800cd20 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ca8e:	e065      	b.n	800cb5c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 fa10 	bl	800ceb6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2203      	movs	r2, #3
 800ca9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ca9e:	e05d      	b.n	800cb5c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 fa08 	bl	800ceb6 <USBD_CtlSendStatus>
      break;
 800caa6:	e059      	b.n	800cb5c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800caa8:	4b2f      	ldr	r3, [pc, #188]	; (800cb68 <USBD_SetConfig+0x148>)
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d112      	bne.n	800cad6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2202      	movs	r2, #2
 800cab4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cab8:	4b2b      	ldr	r3, [pc, #172]	; (800cb68 <USBD_SetConfig+0x148>)
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	461a      	mov	r2, r3
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cac2:	4b29      	ldr	r3, [pc, #164]	; (800cb68 <USBD_SetConfig+0x148>)
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	4619      	mov	r1, r3
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f7ff f985 	bl	800bdd8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 f9f1 	bl	800ceb6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cad4:	e042      	b.n	800cb5c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800cad6:	4b24      	ldr	r3, [pc, #144]	; (800cb68 <USBD_SetConfig+0x148>)
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	461a      	mov	r2, r3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d02a      	beq.n	800cb3a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	4619      	mov	r1, r3
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f7ff f973 	bl	800bdd8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800caf2:	4b1d      	ldr	r3, [pc, #116]	; (800cb68 <USBD_SetConfig+0x148>)
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	461a      	mov	r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cafc:	4b1a      	ldr	r3, [pc, #104]	; (800cb68 <USBD_SetConfig+0x148>)
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	4619      	mov	r1, r3
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f7ff f94c 	bl	800bda0 <USBD_SetClassConfig>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cb0c:	7bfb      	ldrb	r3, [r7, #15]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d00f      	beq.n	800cb32 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800cb12:	6839      	ldr	r1, [r7, #0]
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 f903 	bl	800cd20 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	4619      	mov	r1, r3
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f7ff f958 	bl	800bdd8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2202      	movs	r2, #2
 800cb2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cb30:	e014      	b.n	800cb5c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 f9bf 	bl	800ceb6 <USBD_CtlSendStatus>
      break;
 800cb38:	e010      	b.n	800cb5c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 f9bb 	bl	800ceb6 <USBD_CtlSendStatus>
      break;
 800cb40:	e00c      	b.n	800cb5c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800cb42:	6839      	ldr	r1, [r7, #0]
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f000 f8eb 	bl	800cd20 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb4a:	4b07      	ldr	r3, [pc, #28]	; (800cb68 <USBD_SetConfig+0x148>)
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	4619      	mov	r1, r3
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f7ff f941 	bl	800bdd8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cb56:	2303      	movs	r3, #3
 800cb58:	73fb      	strb	r3, [r7, #15]
      break;
 800cb5a:	bf00      	nop
  }

  return ret;
 800cb5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3710      	adds	r7, #16
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	2000054c 	.word	0x2000054c

0800cb6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	88db      	ldrh	r3, [r3, #6]
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	d004      	beq.n	800cb88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cb7e:	6839      	ldr	r1, [r7, #0]
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 f8cd 	bl	800cd20 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cb86:	e023      	b.n	800cbd0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	2b02      	cmp	r3, #2
 800cb92:	dc02      	bgt.n	800cb9a <USBD_GetConfig+0x2e>
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	dc03      	bgt.n	800cba0 <USBD_GetConfig+0x34>
 800cb98:	e015      	b.n	800cbc6 <USBD_GetConfig+0x5a>
 800cb9a:	2b03      	cmp	r3, #3
 800cb9c:	d00b      	beq.n	800cbb6 <USBD_GetConfig+0x4a>
 800cb9e:	e012      	b.n	800cbc6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2200      	movs	r2, #0
 800cba4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	3308      	adds	r3, #8
 800cbaa:	2201      	movs	r2, #1
 800cbac:	4619      	mov	r1, r3
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 f927 	bl	800ce02 <USBD_CtlSendData>
        break;
 800cbb4:	e00c      	b.n	800cbd0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	3304      	adds	r3, #4
 800cbba:	2201      	movs	r2, #1
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 f91f 	bl	800ce02 <USBD_CtlSendData>
        break;
 800cbc4:	e004      	b.n	800cbd0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cbc6:	6839      	ldr	r1, [r7, #0]
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 f8a9 	bl	800cd20 <USBD_CtlError>
        break;
 800cbce:	bf00      	nop
}
 800cbd0:	bf00      	nop
 800cbd2:	3708      	adds	r7, #8
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}

0800cbd8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	3b01      	subs	r3, #1
 800cbec:	2b02      	cmp	r3, #2
 800cbee:	d81e      	bhi.n	800cc2e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	88db      	ldrh	r3, [r3, #6]
 800cbf4:	2b02      	cmp	r3, #2
 800cbf6:	d004      	beq.n	800cc02 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cbf8:	6839      	ldr	r1, [r7, #0]
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 f890 	bl	800cd20 <USBD_CtlError>
        break;
 800cc00:	e01a      	b.n	800cc38 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2201      	movs	r2, #1
 800cc06:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d005      	beq.n	800cc1e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	f043 0202 	orr.w	r2, r3, #2
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	330c      	adds	r3, #12
 800cc22:	2202      	movs	r2, #2
 800cc24:	4619      	mov	r1, r3
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 f8eb 	bl	800ce02 <USBD_CtlSendData>
      break;
 800cc2c:	e004      	b.n	800cc38 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cc2e:	6839      	ldr	r1, [r7, #0]
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f000 f875 	bl	800cd20 <USBD_CtlError>
      break;
 800cc36:	bf00      	nop
  }
}
 800cc38:	bf00      	nop
 800cc3a:	3708      	adds	r7, #8
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	885b      	ldrh	r3, [r3, #2]
 800cc4e:	2b01      	cmp	r3, #1
 800cc50:	d106      	bne.n	800cc60 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2201      	movs	r2, #1
 800cc56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 f92b 	bl	800ceb6 <USBD_CtlSendStatus>
  }
}
 800cc60:	bf00      	nop
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc78:	b2db      	uxtb	r3, r3
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	2b02      	cmp	r3, #2
 800cc7e:	d80b      	bhi.n	800cc98 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	885b      	ldrh	r3, [r3, #2]
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d10c      	bne.n	800cca2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 f910 	bl	800ceb6 <USBD_CtlSendStatus>
      }
      break;
 800cc96:	e004      	b.n	800cca2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cc98:	6839      	ldr	r1, [r7, #0]
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 f840 	bl	800cd20 <USBD_CtlError>
      break;
 800cca0:	e000      	b.n	800cca4 <USBD_ClrFeature+0x3c>
      break;
 800cca2:	bf00      	nop
  }
}
 800cca4:	bf00      	nop
 800cca6:	3708      	adds	r7, #8
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	781a      	ldrb	r2, [r3, #0]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	781a      	ldrb	r2, [r3, #0]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ccd6:	68f8      	ldr	r0, [r7, #12]
 800ccd8:	f7ff fa92 	bl	800c200 <SWAPBYTE>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	461a      	mov	r2, r3
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	3301      	adds	r3, #1
 800cce8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	3301      	adds	r3, #1
 800ccee:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ccf0:	68f8      	ldr	r0, [r7, #12]
 800ccf2:	f7ff fa85 	bl	800c200 <SWAPBYTE>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	3301      	adds	r3, #1
 800cd02:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	3301      	adds	r3, #1
 800cd08:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cd0a:	68f8      	ldr	r0, [r7, #12]
 800cd0c:	f7ff fa78 	bl	800c200 <SWAPBYTE>
 800cd10:	4603      	mov	r3, r0
 800cd12:	461a      	mov	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	80da      	strh	r2, [r3, #6]
}
 800cd18:	bf00      	nop
 800cd1a:	3710      	adds	r7, #16
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd2a:	2180      	movs	r1, #128	; 0x80
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f000 fcf5 	bl	800d71c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cd32:	2100      	movs	r1, #0
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 fcf1 	bl	800d71c <USBD_LL_StallEP>
}
 800cd3a:	bf00      	nop
 800cd3c:	3708      	adds	r7, #8
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}

0800cd42 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cd42:	b580      	push	{r7, lr}
 800cd44:	b086      	sub	sp, #24
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	60f8      	str	r0, [r7, #12]
 800cd4a:	60b9      	str	r1, [r7, #8]
 800cd4c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d036      	beq.n	800cdc6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cd5c:	6938      	ldr	r0, [r7, #16]
 800cd5e:	f000 f836 	bl	800cdce <USBD_GetLen>
 800cd62:	4603      	mov	r3, r0
 800cd64:	3301      	adds	r3, #1
 800cd66:	b29b      	uxth	r3, r3
 800cd68:	005b      	lsls	r3, r3, #1
 800cd6a:	b29a      	uxth	r2, r3
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cd70:	7dfb      	ldrb	r3, [r7, #23]
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	4413      	add	r3, r2
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	7812      	ldrb	r2, [r2, #0]
 800cd7a:	701a      	strb	r2, [r3, #0]
  idx++;
 800cd7c:	7dfb      	ldrb	r3, [r7, #23]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cd82:	7dfb      	ldrb	r3, [r7, #23]
 800cd84:	68ba      	ldr	r2, [r7, #8]
 800cd86:	4413      	add	r3, r2
 800cd88:	2203      	movs	r2, #3
 800cd8a:	701a      	strb	r2, [r3, #0]
  idx++;
 800cd8c:	7dfb      	ldrb	r3, [r7, #23]
 800cd8e:	3301      	adds	r3, #1
 800cd90:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cd92:	e013      	b.n	800cdbc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cd94:	7dfb      	ldrb	r3, [r7, #23]
 800cd96:	68ba      	ldr	r2, [r7, #8]
 800cd98:	4413      	add	r3, r2
 800cd9a:	693a      	ldr	r2, [r7, #16]
 800cd9c:	7812      	ldrb	r2, [r2, #0]
 800cd9e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	3301      	adds	r3, #1
 800cda4:	613b      	str	r3, [r7, #16]
    idx++;
 800cda6:	7dfb      	ldrb	r3, [r7, #23]
 800cda8:	3301      	adds	r3, #1
 800cdaa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cdac:	7dfb      	ldrb	r3, [r7, #23]
 800cdae:	68ba      	ldr	r2, [r7, #8]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	701a      	strb	r2, [r3, #0]
    idx++;
 800cdb6:	7dfb      	ldrb	r3, [r7, #23]
 800cdb8:	3301      	adds	r3, #1
 800cdba:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d1e7      	bne.n	800cd94 <USBD_GetString+0x52>
 800cdc4:	e000      	b.n	800cdc8 <USBD_GetString+0x86>
    return;
 800cdc6:	bf00      	nop
  }
}
 800cdc8:	3718      	adds	r7, #24
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cdce:	b480      	push	{r7}
 800cdd0:	b085      	sub	sp, #20
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cdde:	e005      	b.n	800cdec <USBD_GetLen+0x1e>
  {
    len++;
 800cde0:	7bfb      	ldrb	r3, [r7, #15]
 800cde2:	3301      	adds	r3, #1
 800cde4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	3301      	adds	r3, #1
 800cdea:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d1f5      	bne.n	800cde0 <USBD_GetLen+0x12>
  }

  return len;
 800cdf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3714      	adds	r7, #20
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr

0800ce02 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b084      	sub	sp, #16
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	60f8      	str	r0, [r7, #12]
 800ce0a:	60b9      	str	r1, [r7, #8]
 800ce0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2202      	movs	r2, #2
 800ce12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	68ba      	ldr	r2, [r7, #8]
 800ce26:	2100      	movs	r1, #0
 800ce28:	68f8      	ldr	r0, [r7, #12]
 800ce2a:	f000 fd47 	bl	800d8bc <USBD_LL_Transmit>

  return USBD_OK;
 800ce2e:	2300      	movs	r3, #0
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	68ba      	ldr	r2, [r7, #8]
 800ce48:	2100      	movs	r1, #0
 800ce4a:	68f8      	ldr	r0, [r7, #12]
 800ce4c:	f000 fd36 	bl	800d8bc <USBD_LL_Transmit>

  return USBD_OK;
 800ce50:	2300      	movs	r3, #0
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3710      	adds	r7, #16
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}

0800ce5a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ce5a:	b580      	push	{r7, lr}
 800ce5c:	b084      	sub	sp, #16
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	60f8      	str	r0, [r7, #12]
 800ce62:	60b9      	str	r1, [r7, #8]
 800ce64:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2203      	movs	r2, #3
 800ce6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	687a      	ldr	r2, [r7, #4]
 800ce7a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	68ba      	ldr	r2, [r7, #8]
 800ce82:	2100      	movs	r1, #0
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f000 fd51 	bl	800d92c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce8a:	2300      	movs	r3, #0
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3710      	adds	r7, #16
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	68ba      	ldr	r2, [r7, #8]
 800cea4:	2100      	movs	r1, #0
 800cea6:	68f8      	ldr	r0, [r7, #12]
 800cea8:	f000 fd40 	bl	800d92c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ceac:	2300      	movs	r3, #0
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3710      	adds	r7, #16
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}

0800ceb6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ceb6:	b580      	push	{r7, lr}
 800ceb8:	b082      	sub	sp, #8
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2204      	movs	r2, #4
 800cec2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cec6:	2300      	movs	r3, #0
 800cec8:	2200      	movs	r2, #0
 800ceca:	2100      	movs	r1, #0
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f000 fcf5 	bl	800d8bc <USBD_LL_Transmit>

  return USBD_OK;
 800ced2:	2300      	movs	r3, #0
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3708      	adds	r7, #8
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2205      	movs	r2, #5
 800cee8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ceec:	2300      	movs	r3, #0
 800ceee:	2200      	movs	r2, #0
 800cef0:	2100      	movs	r1, #0
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 fd1a 	bl	800d92c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cef8:	2300      	movs	r3, #0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3708      	adds	r7, #8
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
	...

0800cf04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cf08:	2200      	movs	r2, #0
 800cf0a:	4912      	ldr	r1, [pc, #72]	; (800cf54 <MX_USB_DEVICE_Init+0x50>)
 800cf0c:	4812      	ldr	r0, [pc, #72]	; (800cf58 <MX_USB_DEVICE_Init+0x54>)
 800cf0e:	f7fe fed9 	bl	800bcc4 <USBD_Init>
 800cf12:	4603      	mov	r3, r0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d001      	beq.n	800cf1c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cf18:	f7f6 f91c 	bl	8003154 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cf1c:	490f      	ldr	r1, [pc, #60]	; (800cf5c <MX_USB_DEVICE_Init+0x58>)
 800cf1e:	480e      	ldr	r0, [pc, #56]	; (800cf58 <MX_USB_DEVICE_Init+0x54>)
 800cf20:	f7fe ff00 	bl	800bd24 <USBD_RegisterClass>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d001      	beq.n	800cf2e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cf2a:	f7f6 f913 	bl	8003154 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cf2e:	490c      	ldr	r1, [pc, #48]	; (800cf60 <MX_USB_DEVICE_Init+0x5c>)
 800cf30:	4809      	ldr	r0, [pc, #36]	; (800cf58 <MX_USB_DEVICE_Init+0x54>)
 800cf32:	f7fe fe21 	bl	800bb78 <USBD_CDC_RegisterInterface>
 800cf36:	4603      	mov	r3, r0
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d001      	beq.n	800cf40 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cf3c:	f7f6 f90a 	bl	8003154 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cf40:	4805      	ldr	r0, [pc, #20]	; (800cf58 <MX_USB_DEVICE_Init+0x54>)
 800cf42:	f7fe ff16 	bl	800bd72 <USBD_Start>
 800cf46:	4603      	mov	r3, r0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d001      	beq.n	800cf50 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cf4c:	f7f6 f902 	bl	8003154 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cf50:	bf00      	nop
 800cf52:	bd80      	pop	{r7, pc}
 800cf54:	20000130 	.word	0x20000130
 800cf58:	20000550 	.word	0x20000550
 800cf5c:	20000018 	.word	0x20000018
 800cf60:	2000011c 	.word	0x2000011c

0800cf64 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cf68:	2200      	movs	r2, #0
 800cf6a:	4905      	ldr	r1, [pc, #20]	; (800cf80 <CDC_Init_FS+0x1c>)
 800cf6c:	4805      	ldr	r0, [pc, #20]	; (800cf84 <CDC_Init_FS+0x20>)
 800cf6e:	f7fe fe18 	bl	800bba2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cf72:	4905      	ldr	r1, [pc, #20]	; (800cf88 <CDC_Init_FS+0x24>)
 800cf74:	4803      	ldr	r0, [pc, #12]	; (800cf84 <CDC_Init_FS+0x20>)
 800cf76:	f7fe fe32 	bl	800bbde <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cf7a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	2000091c 	.word	0x2000091c
 800cf84:	20000550 	.word	0x20000550
 800cf88:	20000820 	.word	0x20000820

0800cf8c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cf90:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	6039      	str	r1, [r7, #0]
 800cfa6:	71fb      	strb	r3, [r7, #7]
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cfac:	79fb      	ldrb	r3, [r7, #7]
 800cfae:	2b23      	cmp	r3, #35	; 0x23
 800cfb0:	d84a      	bhi.n	800d048 <CDC_Control_FS+0xac>
 800cfb2:	a201      	add	r2, pc, #4	; (adr r2, 800cfb8 <CDC_Control_FS+0x1c>)
 800cfb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfb8:	0800d049 	.word	0x0800d049
 800cfbc:	0800d049 	.word	0x0800d049
 800cfc0:	0800d049 	.word	0x0800d049
 800cfc4:	0800d049 	.word	0x0800d049
 800cfc8:	0800d049 	.word	0x0800d049
 800cfcc:	0800d049 	.word	0x0800d049
 800cfd0:	0800d049 	.word	0x0800d049
 800cfd4:	0800d049 	.word	0x0800d049
 800cfd8:	0800d049 	.word	0x0800d049
 800cfdc:	0800d049 	.word	0x0800d049
 800cfe0:	0800d049 	.word	0x0800d049
 800cfe4:	0800d049 	.word	0x0800d049
 800cfe8:	0800d049 	.word	0x0800d049
 800cfec:	0800d049 	.word	0x0800d049
 800cff0:	0800d049 	.word	0x0800d049
 800cff4:	0800d049 	.word	0x0800d049
 800cff8:	0800d049 	.word	0x0800d049
 800cffc:	0800d049 	.word	0x0800d049
 800d000:	0800d049 	.word	0x0800d049
 800d004:	0800d049 	.word	0x0800d049
 800d008:	0800d049 	.word	0x0800d049
 800d00c:	0800d049 	.word	0x0800d049
 800d010:	0800d049 	.word	0x0800d049
 800d014:	0800d049 	.word	0x0800d049
 800d018:	0800d049 	.word	0x0800d049
 800d01c:	0800d049 	.word	0x0800d049
 800d020:	0800d049 	.word	0x0800d049
 800d024:	0800d049 	.word	0x0800d049
 800d028:	0800d049 	.word	0x0800d049
 800d02c:	0800d049 	.word	0x0800d049
 800d030:	0800d049 	.word	0x0800d049
 800d034:	0800d049 	.word	0x0800d049
 800d038:	0800d049 	.word	0x0800d049
 800d03c:	0800d049 	.word	0x0800d049
 800d040:	0800d049 	.word	0x0800d049
 800d044:	0800d049 	.word	0x0800d049
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d048:	bf00      	nop
  }

  return (USBD_OK);
 800d04a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	370c      	adds	r7, #12
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr

0800d058 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d062:	6879      	ldr	r1, [r7, #4]
 800d064:	4808      	ldr	r0, [pc, #32]	; (800d088 <CDC_Receive_FS+0x30>)
 800d066:	f7fe fdba 	bl	800bbde <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d06a:	4807      	ldr	r0, [pc, #28]	; (800d088 <CDC_Receive_FS+0x30>)
 800d06c:	f7fe fe00 	bl	800bc70 <USBD_CDC_ReceivePacket>
  USB_CDC_RX_Interrupt(Buf, *Len);
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4619      	mov	r1, r3
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f7f6 f85c 	bl	8003134 <USB_CDC_RX_Interrupt>
  return (USBD_OK);
 800d07c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	20000550 	.word	0x20000550

0800d08c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b084      	sub	sp, #16
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	460b      	mov	r3, r1
 800d096:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d098:	2300      	movs	r3, #0
 800d09a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d09c:	4b0d      	ldr	r3, [pc, #52]	; (800d0d4 <CDC_Transmit_FS+0x48>)
 800d09e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d001      	beq.n	800d0b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	e00b      	b.n	800d0ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d0b2:	887b      	ldrh	r3, [r7, #2]
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	6879      	ldr	r1, [r7, #4]
 800d0b8:	4806      	ldr	r0, [pc, #24]	; (800d0d4 <CDC_Transmit_FS+0x48>)
 800d0ba:	f7fe fd72 	bl	800bba2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d0be:	4805      	ldr	r0, [pc, #20]	; (800d0d4 <CDC_Transmit_FS+0x48>)
 800d0c0:	f7fe fda6 	bl	800bc10 <USBD_CDC_TransmitPacket>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3710      	adds	r7, #16
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	20000550 	.word	0x20000550

0800d0d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b087      	sub	sp, #28
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	60b9      	str	r1, [r7, #8]
 800d0e2:	4613      	mov	r3, r2
 800d0e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d0ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	371c      	adds	r7, #28
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f8:	4770      	bx	lr
	...

0800d0fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
 800d102:	4603      	mov	r3, r0
 800d104:	6039      	str	r1, [r7, #0]
 800d106:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	2212      	movs	r2, #18
 800d10c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d10e:	4b03      	ldr	r3, [pc, #12]	; (800d11c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d110:	4618      	mov	r0, r3
 800d112:	370c      	adds	r7, #12
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr
 800d11c:	20000150 	.word	0x20000150

0800d120 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d120:	b480      	push	{r7}
 800d122:	b083      	sub	sp, #12
 800d124:	af00      	add	r7, sp, #0
 800d126:	4603      	mov	r3, r0
 800d128:	6039      	str	r1, [r7, #0]
 800d12a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	2204      	movs	r2, #4
 800d130:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d132:	4b03      	ldr	r3, [pc, #12]	; (800d140 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d134:	4618      	mov	r0, r3
 800d136:	370c      	adds	r7, #12
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr
 800d140:	20000170 	.word	0x20000170

0800d144 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b082      	sub	sp, #8
 800d148:	af00      	add	r7, sp, #0
 800d14a:	4603      	mov	r3, r0
 800d14c:	6039      	str	r1, [r7, #0]
 800d14e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d150:	79fb      	ldrb	r3, [r7, #7]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d105      	bne.n	800d162 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d156:	683a      	ldr	r2, [r7, #0]
 800d158:	4907      	ldr	r1, [pc, #28]	; (800d178 <USBD_FS_ProductStrDescriptor+0x34>)
 800d15a:	4808      	ldr	r0, [pc, #32]	; (800d17c <USBD_FS_ProductStrDescriptor+0x38>)
 800d15c:	f7ff fdf1 	bl	800cd42 <USBD_GetString>
 800d160:	e004      	b.n	800d16c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d162:	683a      	ldr	r2, [r7, #0]
 800d164:	4904      	ldr	r1, [pc, #16]	; (800d178 <USBD_FS_ProductStrDescriptor+0x34>)
 800d166:	4805      	ldr	r0, [pc, #20]	; (800d17c <USBD_FS_ProductStrDescriptor+0x38>)
 800d168:	f7ff fdeb 	bl	800cd42 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d16c:	4b02      	ldr	r3, [pc, #8]	; (800d178 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3708      	adds	r7, #8
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	20000a18 	.word	0x20000a18
 800d17c:	0800dae0 	.word	0x0800dae0

0800d180 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af00      	add	r7, sp, #0
 800d186:	4603      	mov	r3, r0
 800d188:	6039      	str	r1, [r7, #0]
 800d18a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d18c:	683a      	ldr	r2, [r7, #0]
 800d18e:	4904      	ldr	r1, [pc, #16]	; (800d1a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d190:	4804      	ldr	r0, [pc, #16]	; (800d1a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d192:	f7ff fdd6 	bl	800cd42 <USBD_GetString>
  return USBD_StrDesc;
 800d196:	4b02      	ldr	r3, [pc, #8]	; (800d1a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d198:	4618      	mov	r0, r3
 800d19a:	3708      	adds	r7, #8
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	20000a18 	.word	0x20000a18
 800d1a4:	0800daf8 	.word	0x0800daf8

0800d1a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	6039      	str	r1, [r7, #0]
 800d1b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	221a      	movs	r2, #26
 800d1b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d1ba:	f000 f855 	bl	800d268 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d1be:	4b02      	ldr	r3, [pc, #8]	; (800d1c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3708      	adds	r7, #8
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}
 800d1c8:	20000174 	.word	0x20000174

0800d1cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	6039      	str	r1, [r7, #0]
 800d1d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d1d8:	79fb      	ldrb	r3, [r7, #7]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d105      	bne.n	800d1ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d1de:	683a      	ldr	r2, [r7, #0]
 800d1e0:	4907      	ldr	r1, [pc, #28]	; (800d200 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d1e2:	4808      	ldr	r0, [pc, #32]	; (800d204 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d1e4:	f7ff fdad 	bl	800cd42 <USBD_GetString>
 800d1e8:	e004      	b.n	800d1f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d1ea:	683a      	ldr	r2, [r7, #0]
 800d1ec:	4904      	ldr	r1, [pc, #16]	; (800d200 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d1ee:	4805      	ldr	r0, [pc, #20]	; (800d204 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d1f0:	f7ff fda7 	bl	800cd42 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1f4:	4b02      	ldr	r3, [pc, #8]	; (800d200 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3708      	adds	r7, #8
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	20000a18 	.word	0x20000a18
 800d204:	0800db0c 	.word	0x0800db0c

0800d208 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	4603      	mov	r3, r0
 800d210:	6039      	str	r1, [r7, #0]
 800d212:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d214:	79fb      	ldrb	r3, [r7, #7]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d105      	bne.n	800d226 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d21a:	683a      	ldr	r2, [r7, #0]
 800d21c:	4907      	ldr	r1, [pc, #28]	; (800d23c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d21e:	4808      	ldr	r0, [pc, #32]	; (800d240 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d220:	f7ff fd8f 	bl	800cd42 <USBD_GetString>
 800d224:	e004      	b.n	800d230 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d226:	683a      	ldr	r2, [r7, #0]
 800d228:	4904      	ldr	r1, [pc, #16]	; (800d23c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d22a:	4805      	ldr	r0, [pc, #20]	; (800d240 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d22c:	f7ff fd89 	bl	800cd42 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d230:	4b02      	ldr	r3, [pc, #8]	; (800d23c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d232:	4618      	mov	r0, r3
 800d234:	3708      	adds	r7, #8
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	20000a18 	.word	0x20000a18
 800d240:	0800db18 	.word	0x0800db18

0800d244 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	4603      	mov	r3, r0
 800d24c:	6039      	str	r1, [r7, #0]
 800d24e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	220c      	movs	r2, #12
 800d254:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d256:	4b03      	ldr	r3, [pc, #12]	; (800d264 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d258:	4618      	mov	r0, r3
 800d25a:	370c      	adds	r7, #12
 800d25c:	46bd      	mov	sp, r7
 800d25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d262:	4770      	bx	lr
 800d264:	20000164 	.word	0x20000164

0800d268 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b084      	sub	sp, #16
 800d26c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d26e:	4b0f      	ldr	r3, [pc, #60]	; (800d2ac <Get_SerialNum+0x44>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d274:	4b0e      	ldr	r3, [pc, #56]	; (800d2b0 <Get_SerialNum+0x48>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d27a:	4b0e      	ldr	r3, [pc, #56]	; (800d2b4 <Get_SerialNum+0x4c>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d280:	68fa      	ldr	r2, [r7, #12]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	4413      	add	r3, r2
 800d286:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d009      	beq.n	800d2a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d28e:	2208      	movs	r2, #8
 800d290:	4909      	ldr	r1, [pc, #36]	; (800d2b8 <Get_SerialNum+0x50>)
 800d292:	68f8      	ldr	r0, [r7, #12]
 800d294:	f000 f814 	bl	800d2c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d298:	2204      	movs	r2, #4
 800d29a:	4908      	ldr	r1, [pc, #32]	; (800d2bc <Get_SerialNum+0x54>)
 800d29c:	68b8      	ldr	r0, [r7, #8]
 800d29e:	f000 f80f 	bl	800d2c0 <IntToUnicode>
  }
}
 800d2a2:	bf00      	nop
 800d2a4:	3710      	adds	r7, #16
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	1fff7590 	.word	0x1fff7590
 800d2b0:	1fff7594 	.word	0x1fff7594
 800d2b4:	1fff7598 	.word	0x1fff7598
 800d2b8:	20000176 	.word	0x20000176
 800d2bc:	20000186 	.word	0x20000186

0800d2c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b087      	sub	sp, #28
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	60b9      	str	r1, [r7, #8]
 800d2ca:	4613      	mov	r3, r2
 800d2cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	75fb      	strb	r3, [r7, #23]
 800d2d6:	e027      	b.n	800d328 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	0f1b      	lsrs	r3, r3, #28
 800d2dc:	2b09      	cmp	r3, #9
 800d2de:	d80b      	bhi.n	800d2f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	0f1b      	lsrs	r3, r3, #28
 800d2e4:	b2da      	uxtb	r2, r3
 800d2e6:	7dfb      	ldrb	r3, [r7, #23]
 800d2e8:	005b      	lsls	r3, r3, #1
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	440b      	add	r3, r1
 800d2f0:	3230      	adds	r2, #48	; 0x30
 800d2f2:	b2d2      	uxtb	r2, r2
 800d2f4:	701a      	strb	r2, [r3, #0]
 800d2f6:	e00a      	b.n	800d30e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	0f1b      	lsrs	r3, r3, #28
 800d2fc:	b2da      	uxtb	r2, r3
 800d2fe:	7dfb      	ldrb	r3, [r7, #23]
 800d300:	005b      	lsls	r3, r3, #1
 800d302:	4619      	mov	r1, r3
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	440b      	add	r3, r1
 800d308:	3237      	adds	r2, #55	; 0x37
 800d30a:	b2d2      	uxtb	r2, r2
 800d30c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	011b      	lsls	r3, r3, #4
 800d312:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d314:	7dfb      	ldrb	r3, [r7, #23]
 800d316:	005b      	lsls	r3, r3, #1
 800d318:	3301      	adds	r3, #1
 800d31a:	68ba      	ldr	r2, [r7, #8]
 800d31c:	4413      	add	r3, r2
 800d31e:	2200      	movs	r2, #0
 800d320:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d322:	7dfb      	ldrb	r3, [r7, #23]
 800d324:	3301      	adds	r3, #1
 800d326:	75fb      	strb	r3, [r7, #23]
 800d328:	7dfa      	ldrb	r2, [r7, #23]
 800d32a:	79fb      	ldrb	r3, [r7, #7]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d3d3      	bcc.n	800d2d8 <IntToUnicode+0x18>
  }
}
 800d330:	bf00      	nop
 800d332:	bf00      	nop
 800d334:	371c      	adds	r7, #28
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr
	...

0800d340 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b09c      	sub	sp, #112	; 0x70
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d348:	f107 0310 	add.w	r3, r7, #16
 800d34c:	2260      	movs	r2, #96	; 0x60
 800d34e:	2100      	movs	r1, #0
 800d350:	4618      	mov	r0, r3
 800d352:	f000 fbb1 	bl	800dab8 <memset>
  if(pcdHandle->Instance==USB)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4a15      	ldr	r2, [pc, #84]	; (800d3b0 <HAL_PCD_MspInit+0x70>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d122      	bne.n	800d3a6 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d364:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d366:	2300      	movs	r3, #0
 800d368:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d36a:	f107 0310 	add.w	r3, r7, #16
 800d36e:	4618      	mov	r0, r3
 800d370:	f7fa fab4 	bl	80078dc <HAL_RCCEx_PeriphCLKConfig>
 800d374:	4603      	mov	r3, r0
 800d376:	2b00      	cmp	r3, #0
 800d378:	d001      	beq.n	800d37e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800d37a:	f7f5 feeb 	bl	8003154 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d37e:	4b0d      	ldr	r3, [pc, #52]	; (800d3b4 <HAL_PCD_MspInit+0x74>)
 800d380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d382:	4a0c      	ldr	r2, [pc, #48]	; (800d3b4 <HAL_PCD_MspInit+0x74>)
 800d384:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d388:	6593      	str	r3, [r2, #88]	; 0x58
 800d38a:	4b0a      	ldr	r3, [pc, #40]	; (800d3b4 <HAL_PCD_MspInit+0x74>)
 800d38c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d38e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d392:	60fb      	str	r3, [r7, #12]
 800d394:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800d396:	2200      	movs	r2, #0
 800d398:	2100      	movs	r1, #0
 800d39a:	2043      	movs	r0, #67	; 0x43
 800d39c:	f7f7 f909 	bl	80045b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d3a0:	2043      	movs	r0, #67	; 0x43
 800d3a2:	f7f7 f922 	bl	80045ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d3a6:	bf00      	nop
 800d3a8:	3770      	adds	r7, #112	; 0x70
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	40006800 	.word	0x40006800
 800d3b4:	40021000 	.word	0x40021000

0800d3b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	4610      	mov	r0, r2
 800d3d0:	f7fe fd1a 	bl	800be08 <USBD_LL_SetupStage>
}
 800d3d4:	bf00      	nop
 800d3d6:	3708      	adds	r7, #8
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	460b      	mov	r3, r1
 800d3e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800d3ee:	78fa      	ldrb	r2, [r7, #3]
 800d3f0:	6879      	ldr	r1, [r7, #4]
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	4413      	add	r3, r2
 800d3f8:	00db      	lsls	r3, r3, #3
 800d3fa:	440b      	add	r3, r1
 800d3fc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800d400:	681a      	ldr	r2, [r3, #0]
 800d402:	78fb      	ldrb	r3, [r7, #3]
 800d404:	4619      	mov	r1, r3
 800d406:	f7fe fd54 	bl	800beb2 <USBD_LL_DataOutStage>
}
 800d40a:	bf00      	nop
 800d40c:	3708      	adds	r7, #8
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}

0800d412 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d412:	b580      	push	{r7, lr}
 800d414:	b082      	sub	sp, #8
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
 800d41a:	460b      	mov	r3, r1
 800d41c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800d424:	78fa      	ldrb	r2, [r7, #3]
 800d426:	6879      	ldr	r1, [r7, #4]
 800d428:	4613      	mov	r3, r2
 800d42a:	009b      	lsls	r3, r3, #2
 800d42c:	4413      	add	r3, r2
 800d42e:	00db      	lsls	r3, r3, #3
 800d430:	440b      	add	r3, r1
 800d432:	3340      	adds	r3, #64	; 0x40
 800d434:	681a      	ldr	r2, [r3, #0]
 800d436:	78fb      	ldrb	r3, [r7, #3]
 800d438:	4619      	mov	r1, r3
 800d43a:	f7fe fd9d 	bl	800bf78 <USBD_LL_DataInStage>
}
 800d43e:	bf00      	nop
 800d440:	3708      	adds	r7, #8
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}

0800d446 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d446:	b580      	push	{r7, lr}
 800d448:	b082      	sub	sp, #8
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d454:	4618      	mov	r0, r3
 800d456:	f7fe feb1 	bl	800c1bc <USBD_LL_SOF>
}
 800d45a:	bf00      	nop
 800d45c:	3708      	adds	r7, #8
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}

0800d462 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d462:	b580      	push	{r7, lr}
 800d464:	b084      	sub	sp, #16
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d46a:	2301      	movs	r3, #1
 800d46c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	689b      	ldr	r3, [r3, #8]
 800d472:	2b02      	cmp	r3, #2
 800d474:	d001      	beq.n	800d47a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d476:	f7f5 fe6d 	bl	8003154 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d480:	7bfa      	ldrb	r2, [r7, #15]
 800d482:	4611      	mov	r1, r2
 800d484:	4618      	mov	r0, r3
 800d486:	f7fe fe5b 	bl	800c140 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d490:	4618      	mov	r0, r3
 800d492:	f7fe fe07 	bl	800c0a4 <USBD_LL_Reset>
}
 800d496:	bf00      	nop
 800d498:	3710      	adds	r7, #16
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
	...

0800d4a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7fe fe56 	bl	800c160 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	699b      	ldr	r3, [r3, #24]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d005      	beq.n	800d4c8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d4bc:	4b04      	ldr	r3, [pc, #16]	; (800d4d0 <HAL_PCD_SuspendCallback+0x30>)
 800d4be:	691b      	ldr	r3, [r3, #16]
 800d4c0:	4a03      	ldr	r2, [pc, #12]	; (800d4d0 <HAL_PCD_SuspendCallback+0x30>)
 800d4c2:	f043 0306 	orr.w	r3, r3, #6
 800d4c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d4c8:	bf00      	nop
 800d4ca:	3708      	adds	r7, #8
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	e000ed00 	.word	0xe000ed00

0800d4d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	699b      	ldr	r3, [r3, #24]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d007      	beq.n	800d4f4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d4e4:	4b08      	ldr	r3, [pc, #32]	; (800d508 <HAL_PCD_ResumeCallback+0x34>)
 800d4e6:	691b      	ldr	r3, [r3, #16]
 800d4e8:	4a07      	ldr	r2, [pc, #28]	; (800d508 <HAL_PCD_ResumeCallback+0x34>)
 800d4ea:	f023 0306 	bic.w	r3, r3, #6
 800d4ee:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d4f0:	f000 fab6 	bl	800da60 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7fe fe46 	bl	800c18c <USBD_LL_Resume>
}
 800d500:	bf00      	nop
 800d502:	3708      	adds	r7, #8
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	e000ed00 	.word	0xe000ed00

0800d50c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800d514:	f7f9 fbc6 	bl	8006ca4 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d518:	4a2b      	ldr	r2, [pc, #172]	; (800d5c8 <USBD_LL_Init+0xbc>)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	4a29      	ldr	r2, [pc, #164]	; (800d5c8 <USBD_LL_Init+0xbc>)
 800d524:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d528:	4b27      	ldr	r3, [pc, #156]	; (800d5c8 <USBD_LL_Init+0xbc>)
 800d52a:	4a28      	ldr	r2, [pc, #160]	; (800d5cc <USBD_LL_Init+0xc0>)
 800d52c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d52e:	4b26      	ldr	r3, [pc, #152]	; (800d5c8 <USBD_LL_Init+0xbc>)
 800d530:	2208      	movs	r2, #8
 800d532:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d534:	4b24      	ldr	r3, [pc, #144]	; (800d5c8 <USBD_LL_Init+0xbc>)
 800d536:	2202      	movs	r2, #2
 800d538:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d53a:	4b23      	ldr	r3, [pc, #140]	; (800d5c8 <USBD_LL_Init+0xbc>)
 800d53c:	2202      	movs	r2, #2
 800d53e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d540:	4b21      	ldr	r3, [pc, #132]	; (800d5c8 <USBD_LL_Init+0xbc>)
 800d542:	2200      	movs	r2, #0
 800d544:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d546:	4b20      	ldr	r3, [pc, #128]	; (800d5c8 <USBD_LL_Init+0xbc>)
 800d548:	2200      	movs	r2, #0
 800d54a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d54c:	4b1e      	ldr	r3, [pc, #120]	; (800d5c8 <USBD_LL_Init+0xbc>)
 800d54e:	2200      	movs	r2, #0
 800d550:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d552:	4b1d      	ldr	r3, [pc, #116]	; (800d5c8 <USBD_LL_Init+0xbc>)
 800d554:	2200      	movs	r2, #0
 800d556:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d558:	481b      	ldr	r0, [pc, #108]	; (800d5c8 <USBD_LL_Init+0xbc>)
 800d55a:	f7f7 fdb3 	bl	80050c4 <HAL_PCD_Init>
 800d55e:	4603      	mov	r3, r0
 800d560:	2b00      	cmp	r3, #0
 800d562:	d001      	beq.n	800d568 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800d564:	f7f5 fdf6 	bl	8003154 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d56e:	2318      	movs	r3, #24
 800d570:	2200      	movs	r2, #0
 800d572:	2100      	movs	r1, #0
 800d574:	f7f9 fac3 	bl	8006afe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d57e:	2358      	movs	r3, #88	; 0x58
 800d580:	2200      	movs	r2, #0
 800d582:	2180      	movs	r1, #128	; 0x80
 800d584:	f7f9 fabb 	bl	8006afe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d58e:	23c0      	movs	r3, #192	; 0xc0
 800d590:	2200      	movs	r2, #0
 800d592:	2181      	movs	r1, #129	; 0x81
 800d594:	f7f9 fab3 	bl	8006afe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d59e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	2101      	movs	r1, #1
 800d5a6:	f7f9 faaa 	bl	8006afe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d5b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	2182      	movs	r1, #130	; 0x82
 800d5b8:	f7f9 faa1 	bl	8006afe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d5bc:	2300      	movs	r3, #0
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3708      	adds	r7, #8
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	20000c18 	.word	0x20000c18
 800d5cc:	40006800 	.word	0x40006800

0800d5d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7f7 fe83 	bl	80052f2 <HAL_PCD_Start>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d5f0:	7bbb      	ldrb	r3, [r7, #14]
 800d5f2:	2b03      	cmp	r3, #3
 800d5f4:	d816      	bhi.n	800d624 <USBD_LL_Start+0x54>
 800d5f6:	a201      	add	r2, pc, #4	; (adr r2, 800d5fc <USBD_LL_Start+0x2c>)
 800d5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5fc:	0800d60d 	.word	0x0800d60d
 800d600:	0800d613 	.word	0x0800d613
 800d604:	0800d619 	.word	0x0800d619
 800d608:	0800d61f 	.word	0x0800d61f
    case HAL_OK :
      usb_status = USBD_OK;
 800d60c:	2300      	movs	r3, #0
 800d60e:	73fb      	strb	r3, [r7, #15]
    break;
 800d610:	e00b      	b.n	800d62a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d612:	2303      	movs	r3, #3
 800d614:	73fb      	strb	r3, [r7, #15]
    break;
 800d616:	e008      	b.n	800d62a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d618:	2301      	movs	r3, #1
 800d61a:	73fb      	strb	r3, [r7, #15]
    break;
 800d61c:	e005      	b.n	800d62a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d61e:	2303      	movs	r3, #3
 800d620:	73fb      	strb	r3, [r7, #15]
    break;
 800d622:	e002      	b.n	800d62a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d624:	2303      	movs	r3, #3
 800d626:	73fb      	strb	r3, [r7, #15]
    break;
 800d628:	bf00      	nop
  }
  return usb_status;
 800d62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3710      	adds	r7, #16
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b084      	sub	sp, #16
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	4608      	mov	r0, r1
 800d63e:	4611      	mov	r1, r2
 800d640:	461a      	mov	r2, r3
 800d642:	4603      	mov	r3, r0
 800d644:	70fb      	strb	r3, [r7, #3]
 800d646:	460b      	mov	r3, r1
 800d648:	70bb      	strb	r3, [r7, #2]
 800d64a:	4613      	mov	r3, r2
 800d64c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d64e:	2300      	movs	r3, #0
 800d650:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d652:	2300      	movs	r3, #0
 800d654:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d65c:	78bb      	ldrb	r3, [r7, #2]
 800d65e:	883a      	ldrh	r2, [r7, #0]
 800d660:	78f9      	ldrb	r1, [r7, #3]
 800d662:	f7f7 ffb4 	bl	80055ce <HAL_PCD_EP_Open>
 800d666:	4603      	mov	r3, r0
 800d668:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d66a:	7bbb      	ldrb	r3, [r7, #14]
 800d66c:	2b03      	cmp	r3, #3
 800d66e:	d817      	bhi.n	800d6a0 <USBD_LL_OpenEP+0x6c>
 800d670:	a201      	add	r2, pc, #4	; (adr r2, 800d678 <USBD_LL_OpenEP+0x44>)
 800d672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d676:	bf00      	nop
 800d678:	0800d689 	.word	0x0800d689
 800d67c:	0800d68f 	.word	0x0800d68f
 800d680:	0800d695 	.word	0x0800d695
 800d684:	0800d69b 	.word	0x0800d69b
    case HAL_OK :
      usb_status = USBD_OK;
 800d688:	2300      	movs	r3, #0
 800d68a:	73fb      	strb	r3, [r7, #15]
    break;
 800d68c:	e00b      	b.n	800d6a6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d68e:	2303      	movs	r3, #3
 800d690:	73fb      	strb	r3, [r7, #15]
    break;
 800d692:	e008      	b.n	800d6a6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d694:	2301      	movs	r3, #1
 800d696:	73fb      	strb	r3, [r7, #15]
    break;
 800d698:	e005      	b.n	800d6a6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d69a:	2303      	movs	r3, #3
 800d69c:	73fb      	strb	r3, [r7, #15]
    break;
 800d69e:	e002      	b.n	800d6a6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d6a0:	2303      	movs	r3, #3
 800d6a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d6a4:	bf00      	nop
  }
  return usb_status;
 800d6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3710      	adds	r7, #16
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}

0800d6b0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	460b      	mov	r3, r1
 800d6ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d6ca:	78fa      	ldrb	r2, [r7, #3]
 800d6cc:	4611      	mov	r1, r2
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7f7 ffe5 	bl	800569e <HAL_PCD_EP_Close>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d6d8:	7bbb      	ldrb	r3, [r7, #14]
 800d6da:	2b03      	cmp	r3, #3
 800d6dc:	d816      	bhi.n	800d70c <USBD_LL_CloseEP+0x5c>
 800d6de:	a201      	add	r2, pc, #4	; (adr r2, 800d6e4 <USBD_LL_CloseEP+0x34>)
 800d6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e4:	0800d6f5 	.word	0x0800d6f5
 800d6e8:	0800d6fb 	.word	0x0800d6fb
 800d6ec:	0800d701 	.word	0x0800d701
 800d6f0:	0800d707 	.word	0x0800d707
    case HAL_OK :
      usb_status = USBD_OK;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	73fb      	strb	r3, [r7, #15]
    break;
 800d6f8:	e00b      	b.n	800d712 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6fa:	2303      	movs	r3, #3
 800d6fc:	73fb      	strb	r3, [r7, #15]
    break;
 800d6fe:	e008      	b.n	800d712 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d700:	2301      	movs	r3, #1
 800d702:	73fb      	strb	r3, [r7, #15]
    break;
 800d704:	e005      	b.n	800d712 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d706:	2303      	movs	r3, #3
 800d708:	73fb      	strb	r3, [r7, #15]
    break;
 800d70a:	e002      	b.n	800d712 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d70c:	2303      	movs	r3, #3
 800d70e:	73fb      	strb	r3, [r7, #15]
    break;
 800d710:	bf00      	nop
  }
  return usb_status;
 800d712:	7bfb      	ldrb	r3, [r7, #15]
}
 800d714:	4618      	mov	r0, r3
 800d716:	3710      	adds	r7, #16
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	460b      	mov	r3, r1
 800d726:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d728:	2300      	movs	r3, #0
 800d72a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d72c:	2300      	movs	r3, #0
 800d72e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d736:	78fa      	ldrb	r2, [r7, #3]
 800d738:	4611      	mov	r1, r2
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7f8 f893 	bl	8005866 <HAL_PCD_EP_SetStall>
 800d740:	4603      	mov	r3, r0
 800d742:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d744:	7bbb      	ldrb	r3, [r7, #14]
 800d746:	2b03      	cmp	r3, #3
 800d748:	d816      	bhi.n	800d778 <USBD_LL_StallEP+0x5c>
 800d74a:	a201      	add	r2, pc, #4	; (adr r2, 800d750 <USBD_LL_StallEP+0x34>)
 800d74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d750:	0800d761 	.word	0x0800d761
 800d754:	0800d767 	.word	0x0800d767
 800d758:	0800d76d 	.word	0x0800d76d
 800d75c:	0800d773 	.word	0x0800d773
    case HAL_OK :
      usb_status = USBD_OK;
 800d760:	2300      	movs	r3, #0
 800d762:	73fb      	strb	r3, [r7, #15]
    break;
 800d764:	e00b      	b.n	800d77e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d766:	2303      	movs	r3, #3
 800d768:	73fb      	strb	r3, [r7, #15]
    break;
 800d76a:	e008      	b.n	800d77e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d76c:	2301      	movs	r3, #1
 800d76e:	73fb      	strb	r3, [r7, #15]
    break;
 800d770:	e005      	b.n	800d77e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d772:	2303      	movs	r3, #3
 800d774:	73fb      	strb	r3, [r7, #15]
    break;
 800d776:	e002      	b.n	800d77e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d778:	2303      	movs	r3, #3
 800d77a:	73fb      	strb	r3, [r7, #15]
    break;
 800d77c:	bf00      	nop
  }
  return usb_status;
 800d77e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d780:	4618      	mov	r0, r3
 800d782:	3710      	adds	r7, #16
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	460b      	mov	r3, r1
 800d792:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d794:	2300      	movs	r3, #0
 800d796:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d798:	2300      	movs	r3, #0
 800d79a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d7a2:	78fa      	ldrb	r2, [r7, #3]
 800d7a4:	4611      	mov	r1, r2
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7f8 f8bf 	bl	800592a <HAL_PCD_EP_ClrStall>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d7b0:	7bbb      	ldrb	r3, [r7, #14]
 800d7b2:	2b03      	cmp	r3, #3
 800d7b4:	d816      	bhi.n	800d7e4 <USBD_LL_ClearStallEP+0x5c>
 800d7b6:	a201      	add	r2, pc, #4	; (adr r2, 800d7bc <USBD_LL_ClearStallEP+0x34>)
 800d7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7bc:	0800d7cd 	.word	0x0800d7cd
 800d7c0:	0800d7d3 	.word	0x0800d7d3
 800d7c4:	0800d7d9 	.word	0x0800d7d9
 800d7c8:	0800d7df 	.word	0x0800d7df
    case HAL_OK :
      usb_status = USBD_OK;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d7d0:	e00b      	b.n	800d7ea <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d7d2:	2303      	movs	r3, #3
 800d7d4:	73fb      	strb	r3, [r7, #15]
    break;
 800d7d6:	e008      	b.n	800d7ea <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d7d8:	2301      	movs	r3, #1
 800d7da:	73fb      	strb	r3, [r7, #15]
    break;
 800d7dc:	e005      	b.n	800d7ea <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d7de:	2303      	movs	r3, #3
 800d7e0:	73fb      	strb	r3, [r7, #15]
    break;
 800d7e2:	e002      	b.n	800d7ea <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d7e4:	2303      	movs	r3, #3
 800d7e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d7e8:	bf00      	nop
  }
  return usb_status;
 800d7ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3710      	adds	r7, #16
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b085      	sub	sp, #20
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d806:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	da0c      	bge.n	800d82a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d810:	78fb      	ldrb	r3, [r7, #3]
 800d812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d816:	68f9      	ldr	r1, [r7, #12]
 800d818:	1c5a      	adds	r2, r3, #1
 800d81a:	4613      	mov	r3, r2
 800d81c:	009b      	lsls	r3, r3, #2
 800d81e:	4413      	add	r3, r2
 800d820:	00db      	lsls	r3, r3, #3
 800d822:	440b      	add	r3, r1
 800d824:	3306      	adds	r3, #6
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	e00b      	b.n	800d842 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d82a:	78fb      	ldrb	r3, [r7, #3]
 800d82c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d830:	68f9      	ldr	r1, [r7, #12]
 800d832:	4613      	mov	r3, r2
 800d834:	009b      	lsls	r3, r3, #2
 800d836:	4413      	add	r3, r2
 800d838:	00db      	lsls	r3, r3, #3
 800d83a:	440b      	add	r3, r1
 800d83c:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800d840:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d842:	4618      	mov	r0, r3
 800d844:	3714      	adds	r7, #20
 800d846:	46bd      	mov	sp, r7
 800d848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84c:	4770      	bx	lr
	...

0800d850 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	460b      	mov	r3, r1
 800d85a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d85c:	2300      	movs	r3, #0
 800d85e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d860:	2300      	movs	r3, #0
 800d862:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d86a:	78fa      	ldrb	r2, [r7, #3]
 800d86c:	4611      	mov	r1, r2
 800d86e:	4618      	mov	r0, r3
 800d870:	f7f7 fe88 	bl	8005584 <HAL_PCD_SetAddress>
 800d874:	4603      	mov	r3, r0
 800d876:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d878:	7bbb      	ldrb	r3, [r7, #14]
 800d87a:	2b03      	cmp	r3, #3
 800d87c:	d816      	bhi.n	800d8ac <USBD_LL_SetUSBAddress+0x5c>
 800d87e:	a201      	add	r2, pc, #4	; (adr r2, 800d884 <USBD_LL_SetUSBAddress+0x34>)
 800d880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d884:	0800d895 	.word	0x0800d895
 800d888:	0800d89b 	.word	0x0800d89b
 800d88c:	0800d8a1 	.word	0x0800d8a1
 800d890:	0800d8a7 	.word	0x0800d8a7
    case HAL_OK :
      usb_status = USBD_OK;
 800d894:	2300      	movs	r3, #0
 800d896:	73fb      	strb	r3, [r7, #15]
    break;
 800d898:	e00b      	b.n	800d8b2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d89a:	2303      	movs	r3, #3
 800d89c:	73fb      	strb	r3, [r7, #15]
    break;
 800d89e:	e008      	b.n	800d8b2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d8a4:	e005      	b.n	800d8b2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d8a6:	2303      	movs	r3, #3
 800d8a8:	73fb      	strb	r3, [r7, #15]
    break;
 800d8aa:	e002      	b.n	800d8b2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d8ac:	2303      	movs	r3, #3
 800d8ae:	73fb      	strb	r3, [r7, #15]
    break;
 800d8b0:	bf00      	nop
  }
  return usb_status;
 800d8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3710      	adds	r7, #16
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b086      	sub	sp, #24
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	60f8      	str	r0, [r7, #12]
 800d8c4:	607a      	str	r2, [r7, #4]
 800d8c6:	603b      	str	r3, [r7, #0]
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d8da:	7af9      	ldrb	r1, [r7, #11]
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	687a      	ldr	r2, [r7, #4]
 800d8e0:	f7f7 ff7d 	bl	80057de <HAL_PCD_EP_Transmit>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d8e8:	7dbb      	ldrb	r3, [r7, #22]
 800d8ea:	2b03      	cmp	r3, #3
 800d8ec:	d816      	bhi.n	800d91c <USBD_LL_Transmit+0x60>
 800d8ee:	a201      	add	r2, pc, #4	; (adr r2, 800d8f4 <USBD_LL_Transmit+0x38>)
 800d8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f4:	0800d905 	.word	0x0800d905
 800d8f8:	0800d90b 	.word	0x0800d90b
 800d8fc:	0800d911 	.word	0x0800d911
 800d900:	0800d917 	.word	0x0800d917
    case HAL_OK :
      usb_status = USBD_OK;
 800d904:	2300      	movs	r3, #0
 800d906:	75fb      	strb	r3, [r7, #23]
    break;
 800d908:	e00b      	b.n	800d922 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d90a:	2303      	movs	r3, #3
 800d90c:	75fb      	strb	r3, [r7, #23]
    break;
 800d90e:	e008      	b.n	800d922 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d910:	2301      	movs	r3, #1
 800d912:	75fb      	strb	r3, [r7, #23]
    break;
 800d914:	e005      	b.n	800d922 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d916:	2303      	movs	r3, #3
 800d918:	75fb      	strb	r3, [r7, #23]
    break;
 800d91a:	e002      	b.n	800d922 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d91c:	2303      	movs	r3, #3
 800d91e:	75fb      	strb	r3, [r7, #23]
    break;
 800d920:	bf00      	nop
  }
  return usb_status;
 800d922:	7dfb      	ldrb	r3, [r7, #23]
}
 800d924:	4618      	mov	r0, r3
 800d926:	3718      	adds	r7, #24
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}

0800d92c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b086      	sub	sp, #24
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	607a      	str	r2, [r7, #4]
 800d936:	603b      	str	r3, [r7, #0]
 800d938:	460b      	mov	r3, r1
 800d93a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d93c:	2300      	movs	r3, #0
 800d93e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d940:	2300      	movs	r3, #0
 800d942:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d94a:	7af9      	ldrb	r1, [r7, #11]
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	f7f7 feef 	bl	8005732 <HAL_PCD_EP_Receive>
 800d954:	4603      	mov	r3, r0
 800d956:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d958:	7dbb      	ldrb	r3, [r7, #22]
 800d95a:	2b03      	cmp	r3, #3
 800d95c:	d816      	bhi.n	800d98c <USBD_LL_PrepareReceive+0x60>
 800d95e:	a201      	add	r2, pc, #4	; (adr r2, 800d964 <USBD_LL_PrepareReceive+0x38>)
 800d960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d964:	0800d975 	.word	0x0800d975
 800d968:	0800d97b 	.word	0x0800d97b
 800d96c:	0800d981 	.word	0x0800d981
 800d970:	0800d987 	.word	0x0800d987
    case HAL_OK :
      usb_status = USBD_OK;
 800d974:	2300      	movs	r3, #0
 800d976:	75fb      	strb	r3, [r7, #23]
    break;
 800d978:	e00b      	b.n	800d992 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d97a:	2303      	movs	r3, #3
 800d97c:	75fb      	strb	r3, [r7, #23]
    break;
 800d97e:	e008      	b.n	800d992 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d980:	2301      	movs	r3, #1
 800d982:	75fb      	strb	r3, [r7, #23]
    break;
 800d984:	e005      	b.n	800d992 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d986:	2303      	movs	r3, #3
 800d988:	75fb      	strb	r3, [r7, #23]
    break;
 800d98a:	e002      	b.n	800d992 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d98c:	2303      	movs	r3, #3
 800d98e:	75fb      	strb	r3, [r7, #23]
    break;
 800d990:	bf00      	nop
  }
  return usb_status;
 800d992:	7dfb      	ldrb	r3, [r7, #23]
}
 800d994:	4618      	mov	r0, r3
 800d996:	3718      	adds	r7, #24
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d9ae:	78fa      	ldrb	r2, [r7, #3]
 800d9b0:	4611      	mov	r1, r2
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7f7 fefb 	bl	80057ae <HAL_PCD_EP_GetRxCount>
 800d9b8:	4603      	mov	r3, r0
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3708      	adds	r7, #8
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
	...

0800d9c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	460b      	mov	r3, r1
 800d9ce:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d9d0:	78fb      	ldrb	r3, [r7, #3]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d002      	beq.n	800d9dc <HAL_PCDEx_LPM_Callback+0x18>
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	d013      	beq.n	800da02 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d9da:	e023      	b.n	800da24 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	699b      	ldr	r3, [r3, #24]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d007      	beq.n	800d9f4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d9e4:	f000 f83c 	bl	800da60 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9e8:	4b10      	ldr	r3, [pc, #64]	; (800da2c <HAL_PCDEx_LPM_Callback+0x68>)
 800d9ea:	691b      	ldr	r3, [r3, #16]
 800d9ec:	4a0f      	ldr	r2, [pc, #60]	; (800da2c <HAL_PCDEx_LPM_Callback+0x68>)
 800d9ee:	f023 0306 	bic.w	r3, r3, #6
 800d9f2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f7fe fbc6 	bl	800c18c <USBD_LL_Resume>
    break;
 800da00:	e010      	b.n	800da24 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800da08:	4618      	mov	r0, r3
 800da0a:	f7fe fba9 	bl	800c160 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	699b      	ldr	r3, [r3, #24]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d005      	beq.n	800da22 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800da16:	4b05      	ldr	r3, [pc, #20]	; (800da2c <HAL_PCDEx_LPM_Callback+0x68>)
 800da18:	691b      	ldr	r3, [r3, #16]
 800da1a:	4a04      	ldr	r2, [pc, #16]	; (800da2c <HAL_PCDEx_LPM_Callback+0x68>)
 800da1c:	f043 0306 	orr.w	r3, r3, #6
 800da20:	6113      	str	r3, [r2, #16]
    break;
 800da22:	bf00      	nop
}
 800da24:	bf00      	nop
 800da26:	3708      	adds	r7, #8
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}
 800da2c:	e000ed00 	.word	0xe000ed00

0800da30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800da30:	b480      	push	{r7}
 800da32:	b083      	sub	sp, #12
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800da38:	4b03      	ldr	r3, [pc, #12]	; (800da48 <USBD_static_malloc+0x18>)
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	370c      	adds	r7, #12
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr
 800da46:	bf00      	nop
 800da48:	20000f14 	.word	0x20000f14

0800da4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800da4c:	b480      	push	{r7}
 800da4e:	b083      	sub	sp, #12
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]

}
 800da54:	bf00      	nop
 800da56:	370c      	adds	r7, #12
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr

0800da60 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800da60:	b480      	push	{r7}
 800da62:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800da64:	bf00      	nop
 800da66:	46bd      	mov	sp, r7
 800da68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6c:	4770      	bx	lr
	...

0800da70 <__libc_init_array>:
 800da70:	b570      	push	{r4, r5, r6, lr}
 800da72:	4d0d      	ldr	r5, [pc, #52]	; (800daa8 <__libc_init_array+0x38>)
 800da74:	4c0d      	ldr	r4, [pc, #52]	; (800daac <__libc_init_array+0x3c>)
 800da76:	1b64      	subs	r4, r4, r5
 800da78:	10a4      	asrs	r4, r4, #2
 800da7a:	2600      	movs	r6, #0
 800da7c:	42a6      	cmp	r6, r4
 800da7e:	d109      	bne.n	800da94 <__libc_init_array+0x24>
 800da80:	4d0b      	ldr	r5, [pc, #44]	; (800dab0 <__libc_init_array+0x40>)
 800da82:	4c0c      	ldr	r4, [pc, #48]	; (800dab4 <__libc_init_array+0x44>)
 800da84:	f000 f820 	bl	800dac8 <_init>
 800da88:	1b64      	subs	r4, r4, r5
 800da8a:	10a4      	asrs	r4, r4, #2
 800da8c:	2600      	movs	r6, #0
 800da8e:	42a6      	cmp	r6, r4
 800da90:	d105      	bne.n	800da9e <__libc_init_array+0x2e>
 800da92:	bd70      	pop	{r4, r5, r6, pc}
 800da94:	f855 3b04 	ldr.w	r3, [r5], #4
 800da98:	4798      	blx	r3
 800da9a:	3601      	adds	r6, #1
 800da9c:	e7ee      	b.n	800da7c <__libc_init_array+0xc>
 800da9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800daa2:	4798      	blx	r3
 800daa4:	3601      	adds	r6, #1
 800daa6:	e7f2      	b.n	800da8e <__libc_init_array+0x1e>
 800daa8:	0800db8c 	.word	0x0800db8c
 800daac:	0800db8c 	.word	0x0800db8c
 800dab0:	0800db8c 	.word	0x0800db8c
 800dab4:	0800db94 	.word	0x0800db94

0800dab8 <memset>:
 800dab8:	4402      	add	r2, r0
 800daba:	4603      	mov	r3, r0
 800dabc:	4293      	cmp	r3, r2
 800dabe:	d100      	bne.n	800dac2 <memset+0xa>
 800dac0:	4770      	bx	lr
 800dac2:	f803 1b01 	strb.w	r1, [r3], #1
 800dac6:	e7f9      	b.n	800dabc <memset+0x4>

0800dac8 <_init>:
 800dac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daca:	bf00      	nop
 800dacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dace:	bc08      	pop	{r3}
 800dad0:	469e      	mov	lr, r3
 800dad2:	4770      	bx	lr

0800dad4 <_fini>:
 800dad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dad6:	bf00      	nop
 800dad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dada:	bc08      	pop	{r3}
 800dadc:	469e      	mov	lr, r3
 800dade:	4770      	bx	lr
