
Cobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7d8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800d964  0800d964  0001d964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da08  0800da08  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800da08  0800da08  0001da08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da10  0800da10  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800da10  0800da10  0001da10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da18  0800da18  0001da18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800da1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001570  20000190  0800dbac  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001700  0800dbac  00021700  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026a98  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000608e  00000000  00000000  00046c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e78  00000000  00000000  0004cce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b80  00000000  00000000  0004eb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db62  00000000  00000000  000506e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028623  00000000  00000000  0007e242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f167b  00000000  00000000  000a6865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00197ee0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c74  00000000  00000000  00197f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000190 	.word	0x20000190
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800d94c 	.word	0x0800d94c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000194 	.word	0x20000194
 80001c8:	0800d94c 	.word	0x0800d94c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <_ZN11TaskHandlerC1Ev>:


#include "stdint.h"


class TaskHandler{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2200      	movs	r2, #0
 80004dc:	701a      	strb	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2200      	movs	r2, #0
 80004e2:	705a      	strb	r2, [r3, #1]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2200      	movs	r2, #0
 80004e8:	709a      	strb	r2, [r3, #2]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2200      	movs	r2, #0
 80004ee:	70da      	strb	r2, [r3, #3]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2200      	movs	r2, #0
 80004f4:	711a      	strb	r2, [r3, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2201      	movs	r2, #1
 80004fa:	715a      	strb	r2, [r3, #5]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2201      	movs	r2, #1
 8000500:	719a      	strb	r2, [r3, #6]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2201      	movs	r2, #1
 8000506:	71da      	strb	r2, [r3, #7]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2201      	movs	r2, #1
 800050c:	721a      	strb	r2, [r3, #8]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2201      	movs	r2, #1
 8000512:	725a      	strb	r2, [r3, #9]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <_ZN13DriveSettingsC1Ev>:
#ifndef SRC_SETTINGS_DRIVESETTINGS_H_
#define SRC_SETTINGS_DRIVESETTINGS_H_

#include "stdint.h"

class DriveSettings{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	221f      	movs	r2, #31
 800052e:	701a      	strb	r2, [r3, #0]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2200      	movs	r2, #0
 8000534:	805a      	strh	r2, [r3, #2]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	809a      	strh	r2, [r3, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2200      	movs	r2, #0
 8000540:	80da      	strh	r2, [r3, #6]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	811a      	strh	r2, [r3, #8]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800054e:	815a      	strh	r2, [r3, #10]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2214      	movs	r2, #20
 8000554:	819a      	strh	r2, [r3, #12]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2264      	movs	r2, #100	; 0x64
 800055a:	81da      	strh	r2, [r3, #14]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8000562:	821a      	strh	r2, [r3, #16]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800056a:	825a      	strh	r2, [r3, #18]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2232      	movs	r2, #50	; 0x32
 8000570:	829a      	strh	r2, [r3, #20]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2264      	movs	r2, #100	; 0x64
 8000576:	82da      	strh	r2, [r3, #22]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800057e:	831a      	strh	r2, [r3, #24]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4618      	mov	r0, r3
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <_ZN7AppMainC1Ev>:
#include "AppMain.h"
#include "../Tools/Delay.h"

extern TIM_HandleTypeDef htim7;

AppMain::AppMain()
 800058e:	b590      	push	{r4, r7, lr}
 8000590:	b085      	sub	sp, #20
 8000592:	af02      	add	r7, sp, #8
 8000594:	6078      	str	r0, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4618      	mov	r0, r3
 800059a:	f001 f9dd 	bl	8001958 <_ZN10RFM95_LoRaC1Ev>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3320      	adds	r3, #32
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3320      	adds	r3, #32
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff8e 	bl	80004d0 <_ZN11TaskHandlerC1Ev>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80005ba:	2301      	movs	r3, #1
 80005bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005c0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005c4:	f000 fecc 	bl	8001360 <_ZN3LEDC1EP12GPIO_TypeDeftb>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80005ce:	2301      	movs	r3, #1
 80005d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005d4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005d8:	f000 fec2 	bl	8001360 <_ZN3LEDC1EP12GPIO_TypeDeftb>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	333c      	adds	r3, #60	; 0x3c
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
 80005ec:	615a      	str	r2, [r3, #20]
 80005ee:	831a      	strh	r2, [r3, #24]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	333c      	adds	r3, #60	; 0x3c
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff94 	bl	8000522 <_ZN13DriveSettingsC1Ev>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3356      	adds	r3, #86	; 0x56
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 feb7 	bl	8002372 <_ZN11DriveStatusC1Ev>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3356      	adds	r3, #86	; 0x56
 8000614:	461a      	mov	r2, r3
 8000616:	f000 f87f 	bl	8000718 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f503 7082 	add.w	r0, r3, #260	; 0x104
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f103 0156 	add.w	r1, r3, #86	; 0x56
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800062c:	687c      	ldr	r4, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3360      	adds	r3, #96	; 0x60
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	4623      	mov	r3, r4
 8000636:	f000 fedb 	bl	80013f0 <_ZN13CommunicationC1EP11DriveStatusP13DriveSettingsP10RFM95_LoRaP14Digitll_IN_OUT>
{

}
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4618      	mov	r0, r3
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	bd90      	pop	{r4, r7, pc}

08000644 <_ZN7AppMain7StartupEv>:

void AppMain::Startup()
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Start_IT(&htim7);
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <_ZN7AppMain7StartupEv+0x3c>)
 800064e:	f008 f9ff 	bl	8008a50 <HAL_TIM_Base_Start_IT>

	LED_Green.OFF();
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	332c      	adds	r3, #44	; 0x2c
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fe9d 	bl	8001396 <_ZN3LED3OFFEv>
	LED_Red.OFF();
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3334      	adds	r3, #52	; 0x34
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fe98 	bl	8001396 <_ZN3LED3OFFEv>

	if (rfm95.InitRFM())
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fd1b 	bl	80020a4 <_ZN10RFM95_LoRa7InitRFMEv>
	{

	}

	Delay::DWT_Init();
 800066e:	f002 f841 	bl	80026f4 <_ZN5Delay8DWT_InitEv>


	Main();
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f000 f806 	bl	8000684 <_ZN7AppMain4MainEv>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200004f0 	.word	0x200004f0

08000684 <_ZN7AppMain4MainEv>:

void AppMain::Main()
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

	while (1)
	{

		if (taskStatus.isErrorTask())
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	3320      	adds	r3, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f001 ffde 	bl	8002652 <_ZN11TaskHandler11isErrorTaskEv>
		{

		}

		if (taskStatus.isLEDUpdateTask())
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3320      	adds	r3, #32
 800069a:	4618      	mov	r0, r3
 800069c:	f002 f80f 	bl	80026be <_ZN11TaskHandler15isLEDUpdateTaskEv>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d004      	beq.n	80006b0 <_ZN7AppMain4MainEv+0x2c>
		{
			LED_Green.Toggle();
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	332c      	adds	r3, #44	; 0x2c
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fe90 	bl	80013d0 <_ZN3LED6ToggleEv>
		}

		if (taskStatus.isComTask())
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3320      	adds	r3, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 ffb1 	bl	800261c <_ZN11TaskHandler9isComTaskEv>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d00b      	beq.n	80006d8 <_ZN7AppMain4MainEv+0x54>
		{
			com.UpdateCom();
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 feb2 	bl	8001430 <_ZN13Communication9UpdateComEv>
			com.ReadData();
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 f8a1 	bl	800181a <_ZN13Communication8ReadDataEv>
		}

		if (taskStatus.isIoUpdateTask())
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3320      	adds	r3, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 ffd3 	bl	8002688 <_ZN11TaskHandler14isIoUpdateTaskEv>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d0d1      	beq.n	800068c <_ZN7AppMain4MainEv+0x8>
		{
			DigitalInOut.Read();
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	3360      	adds	r3, #96	; 0x60
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 f89f 	bl	8000830 <_ZN14Digitll_IN_OUT4ReadEv>
		if (taskStatus.isErrorTask())
 80006f2:	e7cb      	b.n	800068c <_ZN7AppMain4MainEv+0x8>

080006f4 <_ZN5QueueC1Ev>:

#include "stdint.h"

#define BUFFER_SIZE 10

class Queue{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2200      	movs	r2, #0
 8000706:	705a      	strb	r2, [r3, #1]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4618      	mov	r0, r3
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
	...

08000718 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus>:
 *      Author: marce
 */

#include "DI.h"

Digitll_IN_OUT::Digitll_IN_OUT(DriveSettings *driveSettings, DriveStatus *driveStatus)
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af02      	add	r7, sp, #8
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	68f8      	ldr	r0, [r7, #12]
 8000726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000734:	493c      	ldr	r1, [pc, #240]	; (8000828 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x110>)
 8000736:	f000 fdbc 	bl	80012b2 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	f103 0010 	add.w	r0, r3, #16
 8000740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	4b39      	ldr	r3, [pc, #228]	; (800082c <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x114>)
 8000748:	2204      	movs	r2, #4
 800074a:	4938      	ldr	r1, [pc, #224]	; (800082c <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x114>)
 800074c:	f000 fdb1 	bl	80012b2 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f103 0020 	add.w	r0, r3, #32
 8000756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	4b32      	ldr	r3, [pc, #200]	; (8000828 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x110>)
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	4931      	ldr	r1, [pc, #196]	; (8000828 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x110>)
 8000762:	f000 fda6 	bl	80012b2 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800076c:	2301      	movs	r3, #1
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	4b2e      	ldr	r3, [pc, #184]	; (800082c <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x114>)
 8000772:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000776:	492d      	ldr	r1, [pc, #180]	; (800082c <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x114>)
 8000778:	f000 fd9b 	bl	80012b2 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8000782:	2340      	movs	r3, #64	; 0x40
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	4b28      	ldr	r3, [pc, #160]	; (8000828 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x110>)
 8000788:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800078c:	4927      	ldr	r1, [pc, #156]	; (800082c <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x114>)
 800078e:	f000 fd90 	bl	80012b2 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8000798:	2302      	movs	r3, #2
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	4b23      	ldr	r3, [pc, #140]	; (800082c <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x114>)
 800079e:	2210      	movs	r2, #16
 80007a0:	4921      	ldr	r1, [pc, #132]	; (8000828 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x110>)
 80007a2:	f000 fd86 	bl	80012b2 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	f103 0060 	add.w	r0, r3, #96	; 0x60
 80007ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007b0:	9300      	str	r3, [sp, #0]
 80007b2:	4b1e      	ldr	r3, [pc, #120]	; (800082c <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x114>)
 80007b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007b8:	491c      	ldr	r1, [pc, #112]	; (800082c <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x114>)
 80007ba:	f000 fd7a 	bl	80012b2 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80007c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x110>)
 80007cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007d0:	4915      	ldr	r1, [pc, #84]	; (8000828 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatus+0x110>)
 80007d2:	f000 fd6e 	bl	80012b2 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	2200      	movs	r2, #0
 80007da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	338a      	adds	r3, #138	; 0x8a
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	338a      	adds	r3, #138	; 0x8a
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff78 	bl	80006f4 <_ZN5QueueC1Ev>
{
	this->driveSettings = driveSettings;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	this->driveStatus = driveStatus;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	timeoutCounter = 0;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2200      	movs	r2, #0
 8000818:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
}
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	48000800 	.word	0x48000800
 800082c:	48000400 	.word	0x48000400

08000830 <_ZN14Digitll_IN_OUT4ReadEv>:

void Digitll_IN_OUT::Read()
{
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

	configeWriteStatus = CONFIG_WRITE;
 8000838:	2102      	movs	r1, #2
 800083a:	485d      	ldr	r0, [pc, #372]	; (80009b0 <_ZN14Digitll_IN_OUT4ReadEv+0x180>)
 800083c:	f004 fb96 	bl	8004f6c <HAL_GPIO_ReadPin>
 8000840:	4603      	mov	r3, r0
 8000842:	2b01      	cmp	r3, #1
 8000844:	bf0c      	ite	eq
 8000846:	2301      	moveq	r3, #1
 8000848:	2300      	movne	r3, #0
 800084a:	b2da      	uxtb	r2, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	if (configeWriteStatus && !previousConfigeWriteStatus)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000858:	2b00      	cmp	r3, #0
 800085a:	f000 8084 	beq.w	8000966 <_ZN14Digitll_IN_OUT4ReadEv+0x136>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000864:	f083 0301 	eor.w	r3, r3, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d07b      	beq.n	8000966 <_ZN14Digitll_IN_OUT4ReadEv+0x136>
	{
		//read digial config
		uint8_t data = ((uint8_t) CONFIG_ADDR_7 << 7)
 800086e:	2104      	movs	r1, #4
 8000870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000874:	f004 fb7a 	bl	8004f6c <HAL_GPIO_ReadPin>
 8000878:	4603      	mov	r3, r0
 800087a:	2b80      	cmp	r3, #128	; 0x80
 800087c:	bf0c      	ite	eq
 800087e:	2301      	moveq	r3, #1
 8000880:	2300      	movne	r3, #0
 8000882:	b2db      	uxtb	r3, r3
 8000884:	461c      	mov	r4, r3
				+ (((uint8_t) CONFIG_ADDR_6) << 6)
 8000886:	2102      	movs	r1, #2
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f004 fb6e 	bl	8004f6c <HAL_GPIO_ReadPin>
 8000890:	4603      	mov	r3, r0
 8000892:	2b01      	cmp	r3, #1
 8000894:	d101      	bne.n	800089a <_ZN14Digitll_IN_OUT4ReadEv+0x6a>
 8000896:	2340      	movs	r3, #64	; 0x40
 8000898:	e000      	b.n	800089c <_ZN14Digitll_IN_OUT4ReadEv+0x6c>
 800089a:	2300      	movs	r3, #0
 800089c:	4423      	add	r3, r4
 800089e:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_5) << 5)
 80008a0:	2101      	movs	r1, #1
 80008a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a6:	f004 fb61 	bl	8004f6c <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d101      	bne.n	80008b4 <_ZN14Digitll_IN_OUT4ReadEv+0x84>
 80008b0:	2320      	movs	r3, #32
 80008b2:	e000      	b.n	80008b6 <_ZN14Digitll_IN_OUT4ReadEv+0x86>
 80008b4:	2300      	movs	r3, #0
 80008b6:	4423      	add	r3, r4
 80008b8:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_4) << 4)
 80008ba:	2108      	movs	r1, #8
 80008bc:	483d      	ldr	r0, [pc, #244]	; (80009b4 <_ZN14Digitll_IN_OUT4ReadEv+0x184>)
 80008be:	f004 fb55 	bl	8004f6c <HAL_GPIO_ReadPin>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d101      	bne.n	80008cc <_ZN14Digitll_IN_OUT4ReadEv+0x9c>
 80008c8:	2310      	movs	r3, #16
 80008ca:	e000      	b.n	80008ce <_ZN14Digitll_IN_OUT4ReadEv+0x9e>
 80008cc:	2300      	movs	r3, #0
 80008ce:	4423      	add	r3, r4
 80008d0:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_3) << 3)
 80008d2:	2104      	movs	r1, #4
 80008d4:	4837      	ldr	r0, [pc, #220]	; (80009b4 <_ZN14Digitll_IN_OUT4ReadEv+0x184>)
 80008d6:	f004 fb49 	bl	8004f6c <HAL_GPIO_ReadPin>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d101      	bne.n	80008e4 <_ZN14Digitll_IN_OUT4ReadEv+0xb4>
 80008e0:	2308      	movs	r3, #8
 80008e2:	e000      	b.n	80008e6 <_ZN14Digitll_IN_OUT4ReadEv+0xb6>
 80008e4:	2300      	movs	r3, #0
 80008e6:	4423      	add	r3, r4
 80008e8:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_2) << 2)
 80008ea:	2102      	movs	r1, #2
 80008ec:	4831      	ldr	r0, [pc, #196]	; (80009b4 <_ZN14Digitll_IN_OUT4ReadEv+0x184>)
 80008ee:	f004 fb3d 	bl	8004f6c <HAL_GPIO_ReadPin>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d101      	bne.n	80008fc <_ZN14Digitll_IN_OUT4ReadEv+0xcc>
 80008f8:	2304      	movs	r3, #4
 80008fa:	e000      	b.n	80008fe <_ZN14Digitll_IN_OUT4ReadEv+0xce>
 80008fc:	2300      	movs	r3, #0
 80008fe:	4423      	add	r3, r4
 8000900:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_1) << 1);
 8000902:	2101      	movs	r1, #1
 8000904:	482b      	ldr	r0, [pc, #172]	; (80009b4 <_ZN14Digitll_IN_OUT4ReadEv+0x184>)
 8000906:	f004 fb31 	bl	8004f6c <HAL_GPIO_ReadPin>
 800090a:	4603      	mov	r3, r0
 800090c:	2b01      	cmp	r3, #1
 800090e:	d101      	bne.n	8000914 <_ZN14Digitll_IN_OUT4ReadEv+0xe4>
 8000910:	2302      	movs	r3, #2
 8000912:	e000      	b.n	8000916 <_ZN14Digitll_IN_OUT4ReadEv+0xe6>
 8000914:	2300      	movs	r3, #0
 8000916:	4423      	add	r3, r4
 8000918:	73fb      	strb	r3, [r7, #15]

		//Data/Adress check
		if (isAddressReceived)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000920:	2b00      	cmp	r3, #0
 8000922:	d017      	beq.n	8000954 <_ZN14Digitll_IN_OUT4ReadEv+0x124>
		{
			queue.Enqueue(data);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	338a      	adds	r3, #138	; 0x8a
 8000928:	7bfa      	ldrb	r2, [r7, #15]
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f001 ff23 	bl	8002778 <_ZN5Queue7EnqueueEh>
			expectedDataSize--;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8000938:	3b01      	subs	r3, #1
 800093a:	b2da      	uxtb	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			if (expectedDataSize == 0)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8000948:	2b00      	cmp	r3, #0
 800094a:	d108      	bne.n	800095e <_ZN14Digitll_IN_OUT4ReadEv+0x12e>
			{
				CheckData();
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f000 f895 	bl	8000a7c <_ZN14Digitll_IN_OUT9CheckDataEv>
 8000952:	e004      	b.n	800095e <_ZN14Digitll_IN_OUT4ReadEv+0x12e>
			}
		}
		else
		{
			CheckAddress(data);
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	4619      	mov	r1, r3
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f000 f82d 	bl	80009b8 <_ZN14Digitll_IN_OUT12CheckAddressEh>
		}
		timeoutCounter = 0;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	}

	//Timeoutcounter handling
	if (timeoutCounter >= READ_TIMEOUT)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800096c:	2b63      	cmp	r3, #99	; 0x63
 800096e:	d90c      	bls.n	800098a <_ZN14Digitll_IN_OUT4ReadEv+0x15a>
	{
		timeoutCounter = 0;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		isAddressReceived = false;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		expectedDataSize = 0;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8000988:	e007      	b.n	800099a <_ZN14Digitll_IN_OUT4ReadEv+0x16a>
	}
	else
	{
		timeoutCounter++;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8000990:	3301      	adds	r3, #1
 8000992:	b2da      	uxtb	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	}

	previousConfigeWriteStatus = configeWriteStatus;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd90      	pop	{r4, r7, pc}
 80009ae:	bf00      	nop
 80009b0:	48001c00 	.word	0x48001c00
 80009b4:	48000800 	.word	0x48000800

080009b8 <_ZN14Digitll_IN_OUT12CheckAddressEh>:

bool Digitll_IN_OUT::CheckAddress(uint8_t data)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	receivedAddress = data;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	78fa      	ldrb	r2, [r7, #3]
 80009c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	switch (data)
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	2b19      	cmp	r3, #25
 80009d2:	d841      	bhi.n	8000a58 <_ZN14Digitll_IN_OUT12CheckAddressEh+0xa0>
 80009d4:	a201      	add	r2, pc, #4	; (adr r2, 80009dc <_ZN14Digitll_IN_OUT12CheckAddressEh+0x24>)
 80009d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009da:	bf00      	nop
 80009dc:	08000a45 	.word	0x08000a45
 80009e0:	08000a45 	.word	0x08000a45
 80009e4:	08000a45 	.word	0x08000a45
 80009e8:	08000a45 	.word	0x08000a45
 80009ec:	08000a45 	.word	0x08000a45
 80009f0:	08000a45 	.word	0x08000a45
 80009f4:	08000a45 	.word	0x08000a45
 80009f8:	08000a59 	.word	0x08000a59
 80009fc:	08000a59 	.word	0x08000a59
 8000a00:	08000a59 	.word	0x08000a59
 8000a04:	08000a59 	.word	0x08000a59
 8000a08:	08000a59 	.word	0x08000a59
 8000a0c:	08000a59 	.word	0x08000a59
 8000a10:	08000a59 	.word	0x08000a59
 8000a14:	08000a59 	.word	0x08000a59
 8000a18:	08000a45 	.word	0x08000a45
 8000a1c:	08000a45 	.word	0x08000a45
 8000a20:	08000a45 	.word	0x08000a45
 8000a24:	08000a45 	.word	0x08000a45
 8000a28:	08000a4f 	.word	0x08000a4f
 8000a2c:	08000a45 	.word	0x08000a45
 8000a30:	08000a45 	.word	0x08000a45
 8000a34:	08000a4f 	.word	0x08000a4f
 8000a38:	08000a4f 	.word	0x08000a4f
 8000a3c:	08000a45 	.word	0x08000a45
 8000a40:	08000a45 	.word	0x08000a45
		case CLAMPING_SPEED:
		case IN_POS_DIFF:
		case OPENING_DISTANCE:
		case OVER_CURRENT_WARNING:
		case OVER_CURRENT_ERROR:
			expectedDataSize = 1;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2201      	movs	r2, #1
 8000a48:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			break;
 8000a4c:	e00e      	b.n	8000a6c <_ZN14Digitll_IN_OUT12CheckAddressEh+0xb4>
		case SELF_SHUTDOWN_DELAY:
		case UNDERVOLTAGE_WARNING:
		case UNDERVOLTAGE_ERROR:
			expectedDataSize = 2;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2202      	movs	r2, #2
 8000a52:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			break;
 8000a56:	e009      	b.n	8000a6c <_ZN14Digitll_IN_OUT12CheckAddressEh+0xb4>
		default:
			receivedAddress = 0;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			expectedDataSize = 0;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			return false;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	e000      	b.n	8000a6e <_ZN14Digitll_IN_OUT12CheckAddressEh+0xb6>
			break;
	}
	return true;
 8000a6c:	2301      	movs	r3, #1
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <_ZN14Digitll_IN_OUT9CheckDataEv>:

void Digitll_IN_OUT::CheckData()
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	switch (receivedAddress)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	2b19      	cmp	r3, #25
 8000a8e:	f200 8339 	bhi.w	8001104 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
 8000a92:	a201      	add	r2, pc, #4	; (adr r2, 8000a98 <_ZN14Digitll_IN_OUT9CheckDataEv+0x1c>)
 8000a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a98:	08000b01 	.word	0x08000b01
 8000a9c:	08000b2f 	.word	0x08000b2f
 8000aa0:	08000b65 	.word	0x08000b65
 8000aa4:	08000b93 	.word	0x08000b93
 8000aa8:	08000bc1 	.word	0x08000bc1
 8000aac:	08000bef 	.word	0x08000bef
 8000ab0:	08000c1d 	.word	0x08000c1d
 8000ab4:	08001105 	.word	0x08001105
 8000ab8:	08001105 	.word	0x08001105
 8000abc:	08001105 	.word	0x08001105
 8000ac0:	08001105 	.word	0x08001105
 8000ac4:	08001105 	.word	0x08001105
 8000ac8:	08001105 	.word	0x08001105
 8000acc:	08001105 	.word	0x08001105
 8000ad0:	08001105 	.word	0x08001105
 8000ad4:	08000c4b 	.word	0x08000c4b
 8000ad8:	08000cb9 	.word	0x08000cb9
 8000adc:	08000d27 	.word	0x08000d27
 8000ae0:	08000d95 	.word	0x08000d95
 8000ae4:	08000fbb 	.word	0x08000fbb
 8000ae8:	08000e03 	.word	0x08000e03
 8000aec:	08000e71 	.word	0x08000e71
 8000af0:	08001029 	.word	0x08001029
 8000af4:	08001097 	.word	0x08001097
 8000af8:	08000edf 	.word	0x08000edf
 8000afc:	08000f4d 	.word	0x08000f4d
	{
		case CLOSE:
			driveStatus->setClose(queue.Dequeue() == 0x01);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	338a      	adds	r3, #138	; 0x8a
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f001 fe92 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	bf0c      	ite	eq
 8000b16:	2301      	moveq	r3, #1
 8000b18:	2300      	movne	r3, #0
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4620      	mov	r0, r4
 8000b20:	f001 fc43 	bl	80023aa <_ZN11DriveStatus8setCloseEb>
			statusChangedReg = true;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2201      	movs	r2, #1
 8000b28:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
			break;
 8000b2c:	e2ea      	b.n	8001104 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case OPEN:
			driveStatus->setOpen(queue.Dequeue() == 0x01);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	338a      	adds	r3, #138	; 0x8a
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 fe7b 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	bf0c      	ite	eq
 8000b44:	2301      	moveq	r3, #1
 8000b46:	2300      	movne	r3, #0
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4620      	mov	r0, r4
 8000b4e:	f001 fc4c 	bl	80023ea <_ZN11DriveStatus7setOpenEb>
			statusChangedReg = true;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2201      	movs	r2, #1
 8000b56:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
			statusChangedReg = true;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
			break;
 8000b62:	e2cf      	b.n	8001104 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case TEACH:
			driveStatus->setTeach(queue.Dequeue() == 0x01);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	338a      	adds	r3, #138	; 0x8a
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f001 fe60 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	bf0c      	ite	eq
 8000b7a:	2301      	moveq	r3, #1
 8000b7c:	2300      	movne	r3, #0
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	4619      	mov	r1, r3
 8000b82:	4620      	mov	r0, r4
 8000b84:	f001 fcd1 	bl	800252a <_ZN11DriveStatus8setTeachEb>
			statusChangedReg = true;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
			break;
 8000b90:	e2b8      	b.n	8001104 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case RESET:
			driveStatus->setReset(queue.Dequeue() == 0x01);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	338a      	adds	r3, #138	; 0x8a
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f001 fe49 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	bf0c      	ite	eq
 8000ba8:	2301      	moveq	r3, #1
 8000baa:	2300      	movne	r3, #0
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f001 fc7a 	bl	80024aa <_ZN11DriveStatus8setResetEb>
			statusChangedReg = true;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
			break;
 8000bbe:	e2a1      	b.n	8001104 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case ENABLE:
			driveStatus->setEnable(queue.Dequeue() == 0x01);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	338a      	adds	r3, #138	; 0x8a
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f001 fe32 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	bf0c      	ite	eq
 8000bd6:	2301      	moveq	r3, #1
 8000bd8:	2300      	movne	r3, #0
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4620      	mov	r0, r4
 8000be0:	f001 fc43 	bl	800246a <_ZN11DriveStatus9setEnableEb>
			statusChangedReg = true;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2201      	movs	r2, #1
 8000be8:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
			break;
 8000bec:	e28a      	b.n	8001104 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case DISABLE:
			driveStatus->setDisable(queue.Dequeue() == 0x01);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	338a      	adds	r3, #138	; 0x8a
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f001 fe1b 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	bf0c      	ite	eq
 8000c04:	2301      	moveq	r3, #1
 8000c06:	2300      	movne	r3, #0
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	f001 fc0c 	bl	800242a <_ZN11DriveStatus10setDisableEb>
			statusChangedReg = true;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2201      	movs	r2, #1
 8000c16:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
			break;
 8000c1a:	e273      	b.n	8001104 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case STOP:
			driveStatus->setStop(queue.Dequeue() == 0x01);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	338a      	adds	r3, #138	; 0x8a
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 fe04 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	bf0c      	ite	eq
 8000c32:	2301      	moveq	r3, #1
 8000c34:	2300      	movne	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f001 fc55 	bl	80024ea <_ZN11DriveStatus7setStopEb>
			statusChangedReg = true;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2201      	movs	r2, #1
 8000c44:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
			break;
 8000c48:	e25c      	b.n	8001104 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case TEACH_TORQUE:
			dataTemp[0] = queue.Dequeue();
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	338a      	adds	r3, #138	; 0x8a
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 fdf0 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	338a      	adds	r3, #138	; 0x8a
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 fde6 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000c78:	01db      	lsls	r3, r3, #7
 8000c7a:	b21a      	sxth	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000c82:	b21b      	sxth	r3, r3
 8000c84:	4313      	orrs	r3, r2
 8000c86:	b21b      	sxth	r3, r3
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setTeachTroque(value);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	f001 fafb 	bl	800229a <_ZN13DriveSettings14setTeachTroqueEt>
			settingsChangedReg |= TEACH_TORQUE_CHANGE;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 8000cb6:	e225      	b.n	8001104 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case TEACH_SPEED:
			dataTemp[0] = queue.Dequeue();
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	338a      	adds	r3, #138	; 0x8a
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 fdb9 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	338a      	adds	r3, #138	; 0x8a
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f001 fdaf 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	461a      	mov	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000ce6:	01db      	lsls	r3, r3, #7
 8000ce8:	b21a      	sxth	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000cf0:	b21b      	sxth	r3, r3
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b21b      	sxth	r3, r3
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setTeachSpeed(value);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	f001 faa9 	bl	8002264 <_ZN13DriveSettings13setTeachSpeedEt>
			settingsChangedReg |= TEACH_SPEED_CHANGE;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 8000d24:	e1ee      	b.n	8001104 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case CLAMPING_TORQUE:
			dataTemp[0] = queue.Dequeue();
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	338a      	adds	r3, #138	; 0x8a
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f001 fd82 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000d30:	4603      	mov	r3, r0
 8000d32:	461a      	mov	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	338a      	adds	r3, #138	; 0x8a
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 fd78 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000d44:	4603      	mov	r3, r0
 8000d46:	461a      	mov	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000d54:	01db      	lsls	r3, r3, #7
 8000d56:	b21a      	sxth	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000d5e:	b21b      	sxth	r3, r3
 8000d60:	4313      	orrs	r3, r2
 8000d62:	b21b      	sxth	r3, r3
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setClampingTorque(value);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4610      	mov	r0, r2
 8000d7c:	f001 f9eb 	bl	8002156 <_ZN13DriveSettings17setClampingTorqueEt>
			settingsChangedReg |= CLAMPING_TORQUE_CHANGE;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000d86:	f043 0304 	orr.w	r3, r3, #4
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 8000d92:	e1b7      	b.n	8001104 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case CLAMPING_SPEED:
			dataTemp[0] = queue.Dequeue();
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	338a      	adds	r3, #138	; 0x8a
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f001 fd4b 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	461a      	mov	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	338a      	adds	r3, #138	; 0x8a
 8000dac:	4618      	mov	r0, r3
 8000dae:	f001 fd41 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000db2:	4603      	mov	r3, r0
 8000db4:	461a      	mov	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000dc2:	01db      	lsls	r3, r3, #7
 8000dc4:	b21a      	sxth	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000dcc:	b21b      	sxth	r3, r3
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setClampingSpeed(value);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000de6:	4619      	mov	r1, r3
 8000de8:	4610      	mov	r0, r2
 8000dea:	f001 f999 	bl	8002120 <_ZN13DriveSettings16setClampingSpeedEt>
			settingsChangedReg |= CLAMPING_SPEED_CHANGE;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000df4:	f043 0308 	orr.w	r3, r3, #8
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 8000e00:	e180      	b.n	8001104 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case IN_POS_DIFF:
			dataTemp[0] = queue.Dequeue();
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	338a      	adds	r3, #138	; 0x8a
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 fd14 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	338a      	adds	r3, #138	; 0x8a
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f001 fd0a 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000e30:	01db      	lsls	r3, r3, #7
 8000e32:	b21a      	sxth	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setInPosDiff(value);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000e54:	4619      	mov	r1, r3
 8000e56:	4610      	mov	r0, r2
 8000e58:	f001 f998 	bl	800218c <_ZN13DriveSettings12setInPosDiffEt>
			settingsChangedReg |= IN_POS_DIFF_CHANGE;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000e62:	f043 0320 	orr.w	r3, r3, #32
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 8000e6e:	e149      	b.n	8001104 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case OPENING_DISTANCE:
			dataTemp[0] = queue.Dequeue();
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	338a      	adds	r3, #138	; 0x8a
 8000e74:	4618      	mov	r0, r3
 8000e76:	f001 fcdd 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	338a      	adds	r3, #138	; 0x8a
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 fcd3 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000e9e:	01db      	lsls	r3, r3, #7
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setOpeningDistance(value);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	f001 f97c 	bl	80021c2 <_ZN13DriveSettings18setOpeningDistanceEt>
			settingsChangedReg |= OPENING_DISTANCE_CHANGE;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 8000edc:	e112      	b.n	8001104 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case OVER_CURRENT_WARNING:
			dataTemp[0] = queue.Dequeue();
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	338a      	adds	r3, #138	; 0x8a
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 fca6 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	338a      	adds	r3, #138	; 0x8a
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 fc9c 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000f0c:	01db      	lsls	r3, r3, #7
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setOverCurrentWarning(value);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000f30:	4619      	mov	r1, r3
 8000f32:	4610      	mov	r0, r2
 8000f34:	f001 f960 	bl	80021f8 <_ZN13DriveSettings21setOverCurrentWarningEt>
			settingsChangedReg |= OVER_CURRENT_WARNING_CHANGE;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 8000f4a:	e0db      	b.n	8001104 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case OVER_CURRENT_ERROR:
			dataTemp[0] = queue.Dequeue();
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	338a      	adds	r3, #138	; 0x8a
 8000f50:	4618      	mov	r0, r3
 8000f52:	f001 fc6f 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000f56:	4603      	mov	r3, r0
 8000f58:	461a      	mov	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	338a      	adds	r3, #138	; 0x8a
 8000f64:	4618      	mov	r0, r3
 8000f66:	f001 fc65 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000f7a:	01db      	lsls	r3, r3, #7
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	4313      	orrs	r3, r2
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setOverCurrentError(value);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	f001 f9cb 	bl	800233c <_ZN13DriveSettings19setOverCurrentErrorEt>
			settingsChangedReg |= OVER_CURRENT_ERROR_CHANGE;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000fac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 8000fb8:	e0a4      	b.n	8001104 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case SELF_SHUTDOWN_DELAY:
			dataTemp[0] = queue.Dequeue();
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	338a      	adds	r3, #138	; 0x8a
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 fc38 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	338a      	adds	r3, #138	; 0x8a
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 fc2e 	bl	8002834 <_ZN5Queue7DequeueEv>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000fe8:	01db      	lsls	r3, r3, #7
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setSelfShutdownDelay(value);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800100c:	4619      	mov	r1, r3
 800100e:	4610      	mov	r0, r2
 8001010:	f001 f90d 	bl	800222e <_ZN13DriveSettings20setSelfShutdownDelayEt>
			settingsChangedReg |= SELF_SHUTDOWN_DELAY_CHANGE;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800101a:	f043 0310 	orr.w	r3, r3, #16
 800101e:	b29a      	uxth	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 8001026:	e06d      	b.n	8001104 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case UNDERVOLTAGE_WARNING:
			dataTemp[0] = queue.Dequeue();
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	338a      	adds	r3, #138	; 0x8a
 800102c:	4618      	mov	r0, r3
 800102e:	f001 fc01 	bl	8002834 <_ZN5Queue7DequeueEv>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	338a      	adds	r3, #138	; 0x8a
 8001040:	4618      	mov	r0, r3
 8001042:	f001 fbf7 	bl	8002834 <_ZN5Queue7DequeueEv>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8001056:	01db      	lsls	r3, r3, #7
 8001058:	b21a      	sxth	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21b      	sxth	r3, r3
 8001066:	b29a      	uxth	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setUnderVoltageWarning(value);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800107a:	4619      	mov	r1, r3
 800107c:	4610      	mov	r0, r2
 800107e:	f001 f942 	bl	8002306 <_ZN13DriveSettings22setUnderVoltageWarningEt>
			settingsChangedReg |= UNDERVOLTAGE_WARNING_CHANGE;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800108c:	b29a      	uxth	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 8001094:	e036      	b.n	8001104 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case UNDERVOLTAGE_ERROR:
			dataTemp[0] = queue.Dequeue();
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	338a      	adds	r3, #138	; 0x8a
 800109a:	4618      	mov	r0, r3
 800109c:	f001 fbca 	bl	8002834 <_ZN5Queue7DequeueEv>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	338a      	adds	r3, #138	; 0x8a
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 fbc0 	bl	8002834 <_ZN5Queue7DequeueEv>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80010c4:	01db      	lsls	r3, r3, #7
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setUnderVoltageError(value);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80010e8:	4619      	mov	r1, r3
 80010ea:	4610      	mov	r0, r2
 80010ec:	f001 f8f0 	bl	80022d0 <_ZN13DriveSettings20setUnderVoltageErrorEt>
			settingsChangedReg |= UNDERVOLTAGE_ERROR_CHANGE;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80010f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			break;
 8001102:	bf00      	nop
	}
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bd90      	pop	{r4, r7, pc}

0800110c <_ZN14Digitll_IN_OUT17isSettingsChangedEv>:


uint16_t Digitll_IN_OUT::isSettingsChanged(){
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	settingsChangedReg |= UNDERVOLTAGE_ERROR_CHANGE;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800111a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111e:	b29a      	uxth	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	settingsChangedReg |= UNDERVOLTAGE_WARNING_CHANGE;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800112c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001130:	b29a      	uxth	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	return settingsChangedReg;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>:

void Digitll_IN_OUT::ResetSettingsChanged(uint16_t bit){
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	460b      	mov	r3, r1
 8001154:	807b      	strh	r3, [r7, #2]
	settingsChangedReg &= ~bit;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800115c:	b21a      	sxth	r2, r3
 800115e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001162:	43db      	mvns	r3, r3
 8001164:	b21b      	sxth	r3, r3
 8001166:	4013      	ands	r3, r2
 8001168:	b21b      	sxth	r3, r3
 800116a:	b29a      	uxth	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <_ZN14Digitll_IN_OUT15isStatusChangedEv>:

bool Digitll_IN_OUT::isStatusChanged(){
 800117e:	b480      	push	{r7}
 8001180:	b085      	sub	sp, #20
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
	bool statusChangedRegTemp = statusChangedReg;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800118c:	73fb      	strb	r3, [r7, #15]
	statusChangedReg = false;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
	return statusChangedRegTemp;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_ZN14Digitll_IN_OUT11WriteOutputEh>:





void Digitll_IN_OUT::WriteOutput(uint8_t data){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	70fb      	strb	r3, [r7, #3]

	data & 0x01 ? Out1.Set() : Out1.Reset();
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d004      	beq.n	80011c4 <_ZN14Digitll_IN_OUT11WriteOutputEh+0x20>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 f893 	bl	80012e8 <_ZN10DigitalOut3SetEv>
 80011c2:	e003      	b.n	80011cc <_ZN14Digitll_IN_OUT11WriteOutputEh+0x28>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f8ac 	bl	8001324 <_ZN10DigitalOut5ResetEv>
	data & 0x02 ? Out2.Set() : Out2.Reset();
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d005      	beq.n	80011e2 <_ZN14Digitll_IN_OUT11WriteOutputEh+0x3e>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3310      	adds	r3, #16
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f884 	bl	80012e8 <_ZN10DigitalOut3SetEv>
 80011e0:	e004      	b.n	80011ec <_ZN14Digitll_IN_OUT11WriteOutputEh+0x48>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3310      	adds	r3, #16
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f89c 	bl	8001324 <_ZN10DigitalOut5ResetEv>
	data & 0x04 ? Out3.Set() : Out3.Reset();
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d005      	beq.n	8001202 <_ZN14Digitll_IN_OUT11WriteOutputEh+0x5e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3320      	adds	r3, #32
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f874 	bl	80012e8 <_ZN10DigitalOut3SetEv>
 8001200:	e004      	b.n	800120c <_ZN14Digitll_IN_OUT11WriteOutputEh+0x68>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3320      	adds	r3, #32
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f88c 	bl	8001324 <_ZN10DigitalOut5ResetEv>
	data & 0x08 ? Out4.Set() : Out4.Reset();
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	2b00      	cmp	r3, #0
 8001214:	d005      	beq.n	8001222 <_ZN14Digitll_IN_OUT11WriteOutputEh+0x7e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3330      	adds	r3, #48	; 0x30
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f864 	bl	80012e8 <_ZN10DigitalOut3SetEv>
 8001220:	e004      	b.n	800122c <_ZN14Digitll_IN_OUT11WriteOutputEh+0x88>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3330      	adds	r3, #48	; 0x30
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f87c 	bl	8001324 <_ZN10DigitalOut5ResetEv>
	data & 0x10 ? Out5.Set() : Out5.Reset();
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <_ZN14Digitll_IN_OUT11WriteOutputEh+0x9e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3340      	adds	r3, #64	; 0x40
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f854 	bl	80012e8 <_ZN10DigitalOut3SetEv>
 8001240:	e004      	b.n	800124c <_ZN14Digitll_IN_OUT11WriteOutputEh+0xa8>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3340      	adds	r3, #64	; 0x40
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f86c 	bl	8001324 <_ZN10DigitalOut5ResetEv>
	data & 0x20 ? Out6.Set() : Out6.Reset();
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	f003 0320 	and.w	r3, r3, #32
 8001252:	2b00      	cmp	r3, #0
 8001254:	d005      	beq.n	8001262 <_ZN14Digitll_IN_OUT11WriteOutputEh+0xbe>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3350      	adds	r3, #80	; 0x50
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f844 	bl	80012e8 <_ZN10DigitalOut3SetEv>
 8001260:	e004      	b.n	800126c <_ZN14Digitll_IN_OUT11WriteOutputEh+0xc8>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3350      	adds	r3, #80	; 0x50
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f85c 	bl	8001324 <_ZN10DigitalOut5ResetEv>
	data & 0x40 ? Out7.Set() : Out7.Reset();
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001272:	2b00      	cmp	r3, #0
 8001274:	d005      	beq.n	8001282 <_ZN14Digitll_IN_OUT11WriteOutputEh+0xde>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3360      	adds	r3, #96	; 0x60
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f834 	bl	80012e8 <_ZN10DigitalOut3SetEv>
 8001280:	e004      	b.n	800128c <_ZN14Digitll_IN_OUT11WriteOutputEh+0xe8>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3360      	adds	r3, #96	; 0x60
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f84c 	bl	8001324 <_ZN10DigitalOut5ResetEv>
	data & 0x80 ? Out8.Set() : Out7.Reset();
 800128c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001290:	2b00      	cmp	r3, #0
 8001292:	da05      	bge.n	80012a0 <_ZN14Digitll_IN_OUT11WriteOutputEh+0xfc>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3370      	adds	r3, #112	; 0x70
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f825 	bl	80012e8 <_ZN10DigitalOut3SetEv>
}
 800129e:	e004      	b.n	80012aa <_ZN14Digitll_IN_OUT11WriteOutputEh+0x106>
	data & 0x80 ? Out8.Set() : Out7.Reset();
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3360      	adds	r3, #96	; 0x60
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f83d 	bl	8001324 <_ZN10DigitalOut5ResetEv>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>:
 */

#include "DO.h"
#include "../Tools/Delay.h"

DigitalOut::DigitalOut(GPIO_TypeDef* GPIOx_N, uint16_t GPIO_Pin_N, GPIO_TypeDef* GPIOx_P, uint16_t GPIO_Pin_P){
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	4613      	mov	r3, r2
 80012c0:	80fb      	strh	r3, [r7, #6]
	this->GPIO_Pin_N = GPIO_Pin_N;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	88fa      	ldrh	r2, [r7, #6]
 80012c6:	809a      	strh	r2, [r3, #4]
	this->GPIOx_N = GPIOx_N;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	601a      	str	r2, [r3, #0]
	this->GPIO_Pin_N = GPIO_Pin_P;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	8b3a      	ldrh	r2, [r7, #24]
 80012d2:	809a      	strh	r2, [r3, #4]
	this->GPIOx_N = GPIOx_P;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	601a      	str	r2, [r3, #0]
}
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4618      	mov	r0, r3
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <_ZN10DigitalOut3SetEv>:


/*
 *
 */
void DigitalOut::Set() {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	//P set, N reset
	HAL_GPIO_WritePin(GPIOx_N, GPIO_Pin_N, GPIO_PIN_RESET);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	889b      	ldrh	r3, [r3, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	4619      	mov	r1, r3
 80012fc:	f003 fe4e 	bl	8004f9c <HAL_GPIO_WritePin>
	Delay::DWT_Delay_us(25);
 8001300:	2019      	movs	r0, #25
 8001302:	f001 fa11 	bl	8002728 <_ZN5Delay12DWT_Delay_usEm>
	HAL_GPIO_WritePin(GPIOx_P, GPIO_Pin_P, GPIO_PIN_SET);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6898      	ldr	r0, [r3, #8]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	899b      	ldrh	r3, [r3, #12]
 800130e:	2201      	movs	r2, #1
 8001310:	4619      	mov	r1, r3
 8001312:	f003 fe43 	bl	8004f9c <HAL_GPIO_WritePin>
	status = true;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	739a      	strb	r2, [r3, #14]
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <_ZN10DigitalOut5ResetEv>:


/*
 *
 */
void DigitalOut::Reset() {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOx_P, GPIO_Pin_P, GPIO_PIN_RESET);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6898      	ldr	r0, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	899b      	ldrh	r3, [r3, #12]
 8001334:	2200      	movs	r2, #0
 8001336:	4619      	mov	r1, r3
 8001338:	f003 fe30 	bl	8004f9c <HAL_GPIO_WritePin>
	Delay::DWT_Delay_us(25);
 800133c:	2019      	movs	r0, #25
 800133e:	f001 f9f3 	bl	8002728 <_ZN5Delay12DWT_Delay_usEm>
	HAL_GPIO_WritePin(GPIOx_N, GPIO_Pin_N, GPIO_PIN_SET);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	889b      	ldrh	r3, [r3, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	4619      	mov	r1, r3
 800134e:	f003 fe25 	bl	8004f9c <HAL_GPIO_WritePin>
	status = false;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	739a      	strb	r2, [r3, #14]
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <_ZN3LEDC1EP12GPIO_TypeDeftb>:


#include "LED.h"


LED::LED(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool outputInverted) {
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	4611      	mov	r1, r2
 800136c:	461a      	mov	r2, r3
 800136e:	460b      	mov	r3, r1
 8001370:	80fb      	strh	r3, [r7, #6]
 8001372:	4613      	mov	r3, r2
 8001374:	717b      	strb	r3, [r7, #5]

	this->GPIO_Pin = GPIO_Pin;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	88fa      	ldrh	r2, [r7, #6]
 800137a:	809a      	strh	r2, [r3, #4]
	this->GPIOx = GPIOx;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	601a      	str	r2, [r3, #0]
	this->outputInverted = outputInverted;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	797a      	ldrb	r2, [r7, #5]
 8001386:	719a      	strb	r2, [r3, #6]
}
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <_ZN3LED3OFFEv>:
}

/*
 * LED OFF method
 */
void LED::OFF() {
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
	//check if output is inverted
	if(outputInverted){
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	799b      	ldrb	r3, [r3, #6]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d008      	beq.n	80013b8 <_ZN3LED3OFFEv+0x22>
		//clear output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	889b      	ldrh	r3, [r3, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	4619      	mov	r1, r3
 80013b2:	f003 fdf3 	bl	8004f9c <HAL_GPIO_WritePin>
	}else{
		//write output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
	}
}
 80013b6:	e007      	b.n	80013c8 <_ZN3LED3OFFEv+0x32>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6818      	ldr	r0, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	889b      	ldrh	r3, [r3, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	4619      	mov	r1, r3
 80013c4:	f003 fdea 	bl	8004f9c <HAL_GPIO_WritePin>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <_ZN3LED6ToggleEv>:

/*
 * LED Toggle method
 */
void LED::Toggle() {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	889b      	ldrh	r3, [r3, #4]
 80013e0:	4619      	mov	r1, r3
 80013e2:	4610      	mov	r0, r2
 80013e4:	f003 fdf2 	bl	8004fcc <HAL_GPIO_TogglePin>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <_ZN13CommunicationC1EP11DriveStatusP13DriveSettingsP10RFM95_LoRaP14Digitll_IN_OUT>:
 *      Author: marce
 */

#include "Communication.h"

Communication::Communication(DriveStatus *driveStatus,
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	603b      	str	r3, [r7, #0]
		DriveSettings *driveSettings, RFM95_LoRa *rfm95, Digitll_IN_OUT *digitalInOut)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	3310      	adds	r3, #16
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	811a      	strh	r2, [r3, #8]
{
	this->driveSettings = driveSettings;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	605a      	str	r2, [r3, #4]
	this->driveStatus = driveStatus;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	601a      	str	r2, [r3, #0]
	this->rfm95 = rfm95;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	609a      	str	r2, [r3, #8]
	this->digitalInOut = digitalInOut;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	60da      	str	r2, [r3, #12]
}
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZN13Communication9UpdateComEv>:

bool Communication::UpdateCom()
{
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b08b      	sub	sp, #44	; 0x2c
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	uint8_t data2send[6] =
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	2300      	movs	r3, #0
 800143e:	81bb      	strh	r3, [r7, #12]
	{ 0 };

	if (digitalInOut->isStatusChanged())
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fe9a 	bl	800117e <_ZN14Digitll_IN_OUT15isStatusChangedEv>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d067      	beq.n	8001520 <_ZN13Communication9UpdateComEv+0xf0>
	{
		uint8_t data = ((uint8_t) driveStatus->isClose() << 8)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f000 ff97 	bl	8002388 <_ZN11DriveStatus7isCloseEv>
 800145a:	4603      	mov	r3, r0
 800145c:	021b      	lsls	r3, r3, #8
				| ((uint8_t) driveStatus->isDisable() << 8)
 800145e:	b25c      	sxtb	r4, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f000 ffcf 	bl	8002408 <_ZN11DriveStatus9isDisableEv>
 800146a:	4603      	mov	r3, r0
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	b25b      	sxtb	r3, r3
 8001470:	4323      	orrs	r3, r4
 8001472:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveStatus->isEnable() << 8)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f000 ffe5 	bl	8002448 <_ZN11DriveStatus8isEnableEv>
 800147e:	4603      	mov	r3, r0
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	b25b      	sxtb	r3, r3
 8001484:	4323      	orrs	r3, r4
 8001486:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveStatus->isOpen() << 8)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f000 ff9b 	bl	80023c8 <_ZN11DriveStatus6isOpenEv>
 8001492:	4603      	mov	r3, r0
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	b25b      	sxtb	r3, r3
 8001498:	4323      	orrs	r3, r4
 800149a:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveStatus->isReset() << 8)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fff1 	bl	8002488 <_ZN11DriveStatus7isResetEv>
 80014a6:	4603      	mov	r3, r0
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b25b      	sxtb	r3, r3
 80014ac:	4323      	orrs	r3, r4
 80014ae:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveStatus->isStop() << 8)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f001 f807 	bl	80024c8 <_ZN11DriveStatus6isStopEv>
 80014ba:	4603      	mov	r3, r0
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	b25b      	sxtb	r3, r3
 80014c0:	4323      	orrs	r3, r4
 80014c2:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveStatus->isTeach() << 8)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f001 f81d 	bl	8002508 <_ZN11DriveStatus7isTeachEv>
 80014ce:	4603      	mov	r3, r0
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	4323      	orrs	r3, r4
 80014d6:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveStatus->isWriteConfig() << 8);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f001 f833 	bl	8002548 <_ZN11DriveStatus13isWriteConfigEv>
 80014e2:	4603      	mov	r3, r0
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	4323      	orrs	r3, r4
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	73fb      	strb	r3, [r7, #15]

		data2send[0] = driveSettings->getDeviceAddress();
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 ff31 	bl	800235a <_ZNK13DriveSettings16getDeviceAddressEv>
 80014f8:	4603      	mov	r3, r0
 80014fa:	723b      	strb	r3, [r7, #8]
		data2send[1] = SEND_COMMAND;
 80014fc:	2302      	movs	r3, #2
 80014fe:	727b      	strb	r3, [r7, #9]
		data2send[2] = data;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	72bb      	strb	r3, [r7, #10]
		data2send[3] = 5;
 8001504:	2305      	movs	r3, #5
 8001506:	72fb      	strb	r3, [r7, #11]
		data2send[4] = CRC8(data2send, data2send[3] - 1);
 8001508:	7afb      	ldrb	r3, [r7, #11]
 800150a:	3b01      	subs	r3, #1
 800150c:	b2da      	uxtb	r2, r3
 800150e:	f107 0308 	add.w	r3, r7, #8
 8001512:	4619      	mov	r1, r3
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f9e6 	bl	80018e6 <_ZN13Communication4CRC8EPhh>
 800151a:	4603      	mov	r3, r0
 800151c:	733b      	strb	r3, [r7, #12]
 800151e:	e16c      	b.n	80017fa <_ZN13Communication9UpdateComEv+0x3ca>
	}
	else if (digitalInOut->isSettingsChanged() != 0)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fdf1 	bl	800110c <_ZN14Digitll_IN_OUT17isSettingsChangedEv>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf14      	ite	ne
 8001530:	2301      	movne	r3, #1
 8001532:	2300      	moveq	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 8149 	beq.w	80017ce <_ZN13Communication9UpdateComEv+0x39e>
	{
		uint16_t commands = digitalInOut->isSettingsChanged();
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fde3 	bl	800110c <_ZN14Digitll_IN_OUT17isSettingsChangedEv>
 8001546:	4603      	mov	r3, r0
 8001548:	84fb      	strh	r3, [r7, #38]	; 0x26
		data2send[0] = driveSettings->getDeviceAddress();
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	4618      	mov	r0, r3
 8001550:	f000 ff03 	bl	800235a <_ZNK13DriveSettings16getDeviceAddressEv>
 8001554:	4603      	mov	r3, r0
 8001556:	723b      	strb	r3, [r7, #8]
		data2send[1] = SEND_SETTINGS;
 8001558:	2301      	movs	r3, #1
 800155a:	727b      	strb	r3, [r7, #9]

		if (commands & TEACH_TORQUE_CHANGE)
 800155c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d015      	beq.n	8001592 <_ZN13Communication9UpdateComEv+0x162>
		{
			uint16_t value = driveSettings->getTeachTroque();
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	4618      	mov	r0, r3
 800156c:	f000 fe89 	bl	8002282 <_ZNK13DriveSettings14getTeachTroqueEv>
 8001570:	4603      	mov	r3, r0
 8001572:	823b      	strh	r3, [r7, #16]
			data2send[2] = value >> 8;
 8001574:	8a3b      	ldrh	r3, [r7, #16]
 8001576:	0a1b      	lsrs	r3, r3, #8
 8001578:	b29b      	uxth	r3, r3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value;
 800157e:	8a3b      	ldrh	r3, [r7, #16]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	72fb      	strb	r3, [r7, #11]
			digitalInOut->ResetSettingsChanged(TEACH_TORQUE_CHANGE);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2101      	movs	r1, #1
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fddd 	bl	800114a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8001590:	e10f      	b.n	80017b2 <_ZN13Communication9UpdateComEv+0x382>
		}
		else if (commands & TEACH_SPEED_CHANGE)
 8001592:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d015      	beq.n	80015c8 <_ZN13Communication9UpdateComEv+0x198>
		{
			uint16_t value = driveSettings->getTeachSpeed();
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 fe53 	bl	800224c <_ZNK13DriveSettings13getTeachSpeedEv>
 80015a6:	4603      	mov	r3, r0
 80015a8:	827b      	strh	r3, [r7, #18]
			data2send[2] = value >> 8;
 80015aa:	8a7b      	ldrh	r3, [r7, #18]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value;
 80015b4:	8a7b      	ldrh	r3, [r7, #18]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	72fb      	strb	r3, [r7, #11]
			digitalInOut->ResetSettingsChanged(TEACH_SPEED_CHANGE);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	2102      	movs	r1, #2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fdc2 	bl	800114a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 80015c6:	e0f4      	b.n	80017b2 <_ZN13Communication9UpdateComEv+0x382>
		}
		else if (commands & CLAMPING_TORQUE_CHANGE)
 80015c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d015      	beq.n	80015fe <_ZN13Communication9UpdateComEv+0x1ce>
		{
			uint16_t value = driveSettings->getClampingTorque();
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 fdb1 	bl	800213e <_ZNK13DriveSettings17getClampingTorqueEv>
 80015dc:	4603      	mov	r3, r0
 80015de:	82bb      	strh	r3, [r7, #20]
			data2send[2] = value >> 8;
 80015e0:	8abb      	ldrh	r3, [r7, #20]
 80015e2:	0a1b      	lsrs	r3, r3, #8
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value;
 80015ea:	8abb      	ldrh	r3, [r7, #20]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	72fb      	strb	r3, [r7, #11]
			digitalInOut->ResetSettingsChanged(CLAMPING_TORQUE_CHANGE);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2104      	movs	r1, #4
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fda7 	bl	800114a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 80015fc:	e0d9      	b.n	80017b2 <_ZN13Communication9UpdateComEv+0x382>
		}
		else if (commands & CLAMPING_SPEED_CHANGE)
 80015fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	2b00      	cmp	r3, #0
 8001606:	d015      	beq.n	8001634 <_ZN13Communication9UpdateComEv+0x204>
		{
			uint16_t value = driveSettings->getClampingSpeed();
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	4618      	mov	r0, r3
 800160e:	f000 fd7b 	bl	8002108 <_ZNK13DriveSettings16getClampingSpeedEv>
 8001612:	4603      	mov	r3, r0
 8001614:	82fb      	strh	r3, [r7, #22]
			data2send[2] = value >> 8;
 8001616:	8afb      	ldrh	r3, [r7, #22]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	b29b      	uxth	r3, r3
 800161c:	b2db      	uxtb	r3, r3
 800161e:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value;
 8001620:	8afb      	ldrh	r3, [r7, #22]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	72fb      	strb	r3, [r7, #11]
			digitalInOut->ResetSettingsChanged(CLAMPING_SPEED_CHANGE);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	2108      	movs	r1, #8
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fd8c 	bl	800114a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8001632:	e0be      	b.n	80017b2 <_ZN13Communication9UpdateComEv+0x382>
		}
		else if (commands & SELF_SHUTDOWN_DELAY_CHANGE)
 8001634:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001636:	f003 0310 	and.w	r3, r3, #16
 800163a:	2b00      	cmp	r3, #0
 800163c:	d015      	beq.n	800166a <_ZN13Communication9UpdateComEv+0x23a>
		{
			uint16_t value = driveSettings->getSelfShutdownDelay();
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fde7 	bl	8002216 <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8001648:	4603      	mov	r3, r0
 800164a:	833b      	strh	r3, [r7, #24]
			data2send[2] = value >> 8;
 800164c:	8b3b      	ldrh	r3, [r7, #24]
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	b29b      	uxth	r3, r3
 8001652:	b2db      	uxtb	r3, r3
 8001654:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value;
 8001656:	8b3b      	ldrh	r3, [r7, #24]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	72fb      	strb	r3, [r7, #11]
			digitalInOut->ResetSettingsChanged(SELF_SHUTDOWN_DELAY_CHANGE);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	2110      	movs	r1, #16
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fd71 	bl	800114a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8001668:	e0a3      	b.n	80017b2 <_ZN13Communication9UpdateComEv+0x382>
		}
		else if (commands & IN_POS_DIFF_CHANGE)
 800166a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	2b00      	cmp	r3, #0
 8001672:	d015      	beq.n	80016a0 <_ZN13Communication9UpdateComEv+0x270>
		{
			uint16_t value = driveSettings->getInPosDiff();
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	4618      	mov	r0, r3
 800167a:	f000 fd7b 	bl	8002174 <_ZNK13DriveSettings12getInPosDiffEv>
 800167e:	4603      	mov	r3, r0
 8001680:	837b      	strh	r3, [r7, #26]
			data2send[2] = value >> 8;
 8001682:	8b7b      	ldrh	r3, [r7, #26]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	b29b      	uxth	r3, r3
 8001688:	b2db      	uxtb	r3, r3
 800168a:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value;
 800168c:	8b7b      	ldrh	r3, [r7, #26]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	72fb      	strb	r3, [r7, #11]
			digitalInOut->ResetSettingsChanged(IN_POS_DIFF_CHANGE);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2120      	movs	r1, #32
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fd56 	bl	800114a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 800169e:	e088      	b.n	80017b2 <_ZN13Communication9UpdateComEv+0x382>
		}
		else if (commands & OPENING_DISTANCE_CHANGE)
 80016a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d015      	beq.n	80016d6 <_ZN13Communication9UpdateComEv+0x2a6>
		{
			uint16_t value = driveSettings->getOpeningDistance();
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 fd7b 	bl	80021aa <_ZNK13DriveSettings18getOpeningDistanceEv>
 80016b4:	4603      	mov	r3, r0
 80016b6:	83bb      	strh	r3, [r7, #28]
			data2send[2] = value >> 8;
 80016b8:	8bbb      	ldrh	r3, [r7, #28]
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	b29b      	uxth	r3, r3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value;
 80016c2:	8bbb      	ldrh	r3, [r7, #28]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	72fb      	strb	r3, [r7, #11]
			digitalInOut->ResetSettingsChanged(OPENING_DISTANCE_CHANGE);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2140      	movs	r1, #64	; 0x40
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fd3b 	bl	800114a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 80016d4:	e06d      	b.n	80017b2 <_ZN13Communication9UpdateComEv+0x382>
		}
		else if (commands & UNDERVOLTAGE_WARNING_CHANGE)
 80016d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d015      	beq.n	800170c <_ZN13Communication9UpdateComEv+0x2dc>
		{
			uint16_t value = driveSettings->getUnderVoltageWarning();
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 fe02 	bl	80022ee <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 80016ea:	4603      	mov	r3, r0
 80016ec:	83fb      	strh	r3, [r7, #30]
			data2send[2] = value >> 8;
 80016ee:	8bfb      	ldrh	r3, [r7, #30]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value;
 80016f8:	8bfb      	ldrh	r3, [r7, #30]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	72fb      	strb	r3, [r7, #11]
			digitalInOut->ResetSettingsChanged(UNDERVOLTAGE_WARNING_CHANGE);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fd20 	bl	800114a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 800170a:	e052      	b.n	80017b2 <_ZN13Communication9UpdateComEv+0x382>
		}
		else if (commands & UNDERVOLTAGE_ERROR_CHANGE)
 800170c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800170e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001712:	2b00      	cmp	r3, #0
 8001714:	d016      	beq.n	8001744 <_ZN13Communication9UpdateComEv+0x314>
		{
			uint16_t value = driveSettings->getUnderVoltageError();
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4618      	mov	r0, r3
 800171c:	f000 fdcc 	bl	80022b8 <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8001720:	4603      	mov	r3, r0
 8001722:	843b      	strh	r3, [r7, #32]
			data2send[2] = value >> 8;
 8001724:	8c3b      	ldrh	r3, [r7, #32]
 8001726:	0a1b      	lsrs	r3, r3, #8
 8001728:	b29b      	uxth	r3, r3
 800172a:	b2db      	uxtb	r3, r3
 800172c:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value;
 800172e:	8c3b      	ldrh	r3, [r7, #32]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	72fb      	strb	r3, [r7, #11]
			digitalInOut->ResetSettingsChanged(UNDERVOLTAGE_ERROR_CHANGE);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f44f 7180 	mov.w	r1, #256	; 0x100
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fd04 	bl	800114a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8001742:	e036      	b.n	80017b2 <_ZN13Communication9UpdateComEv+0x382>
		}
		else if (commands & OVER_CURRENT_WARNING_CHANGE)
 8001744:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800174a:	2b00      	cmp	r3, #0
 800174c:	d016      	beq.n	800177c <_ZN13Communication9UpdateComEv+0x34c>
		{
			uint16_t value = driveSettings->getOverCurrentWarning();
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4618      	mov	r0, r3
 8001754:	f000 fd44 	bl	80021e0 <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8001758:	4603      	mov	r3, r0
 800175a:	847b      	strh	r3, [r7, #34]	; 0x22
			data2send[2] = value >> 8;
 800175c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800175e:	0a1b      	lsrs	r3, r3, #8
 8001760:	b29b      	uxth	r3, r3
 8001762:	b2db      	uxtb	r3, r3
 8001764:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value;
 8001766:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001768:	b2db      	uxtb	r3, r3
 800176a:	72fb      	strb	r3, [r7, #11]
			digitalInOut->ResetSettingsChanged(OVER_CURRENT_WARNING_CHANGE);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fce8 	bl	800114a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 800177a:	e01a      	b.n	80017b2 <_ZN13Communication9UpdateComEv+0x382>
		}
		else if (commands & OVER_CURRENT_ERROR_CHANGE)
 800177c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800177e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001782:	2b00      	cmp	r3, #0
 8001784:	d015      	beq.n	80017b2 <_ZN13Communication9UpdateComEv+0x382>
		{
			uint16_t value = driveSettings->getOverCurrentError();
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fdca 	bl	8002324 <_ZNK13DriveSettings19getOverCurrentErrorEv>
 8001790:	4603      	mov	r3, r0
 8001792:	84bb      	strh	r3, [r7, #36]	; 0x24
			data2send[2] = value >> 8;
 8001794:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001796:	0a1b      	lsrs	r3, r3, #8
 8001798:	b29b      	uxth	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value;
 800179e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	72fb      	strb	r3, [r7, #11]
			digitalInOut->ResetSettingsChanged(OVER_CURRENT_ERROR_CHANGE);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fccc 	bl	800114a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
		}

		data2send[4] = 6;
 80017b2:	2306      	movs	r3, #6
 80017b4:	733b      	strb	r3, [r7, #12]
		data2send[5] = CRC8(data2send, data2send[4]-1);
 80017b6:	7b3b      	ldrb	r3, [r7, #12]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	4619      	mov	r1, r3
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f88f 	bl	80018e6 <_ZN13Communication4CRC8EPhh>
 80017c8:	4603      	mov	r3, r0
 80017ca:	737b      	strb	r3, [r7, #13]
 80017cc:	e015      	b.n	80017fa <_ZN13Communication9UpdateComEv+0x3ca>
	}
	else
	{
		data2send[0] = driveSettings->getDeviceAddress();
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 fdc1 	bl	800235a <_ZNK13DriveSettings16getDeviceAddressEv>
 80017d8:	4603      	mov	r3, r0
 80017da:	723b      	strb	r3, [r7, #8]
		data2send[1] = SEND_STATUS_REQ;
 80017dc:	2303      	movs	r3, #3
 80017de:	727b      	strb	r3, [r7, #9]
		data2send[2] = 4;
 80017e0:	2304      	movs	r3, #4
 80017e2:	72bb      	strb	r3, [r7, #10]
		data2send[3] = CRC8(data2send, data2send[2]-1);
 80017e4:	7abb      	ldrb	r3, [r7, #10]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	4619      	mov	r1, r3
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f878 	bl	80018e6 <_ZN13Communication4CRC8EPhh>
 80017f6:	4603      	mov	r3, r0
 80017f8:	72fb      	strb	r3, [r7, #11]
	}

	rfm95->write(data2send, 4);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6898      	ldr	r0, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3304      	adds	r3, #4
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f107 0108 	add.w	r1, r7, #8
 800180c:	2204      	movs	r2, #4
 800180e:	4798      	blx	r3
	return true;
 8001810:	2301      	movs	r3, #1
}
 8001812:	4618      	mov	r0, r3
 8001814:	372c      	adds	r7, #44	; 0x2c
 8001816:	46bd      	mov	sp, r7
 8001818:	bd90      	pop	{r4, r7, pc}

0800181a <_ZN13Communication8ReadDataEv>:


void Communication::ReadData(){
 800181a:	b580      	push	{r7, lr}
 800181c:	b084      	sub	sp, #16
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]

	uint8_t packetSize = rfm95->parsePacket();
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f000 f980 	bl	8001b2e <_ZN10RFM95_LoRa11parsePacketEi>
 800182e:	4603      	mov	r3, r0
 8001830:	73fb      	strb	r3, [r7, #15]
	if(packetSize != 0){
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d053      	beq.n	80018e0 <_ZN13Communication8ReadDataEv+0xc6>
		uint8_t counter = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	73bb      	strb	r3, [r7, #14]
		while(rfm95->available()){
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	3308      	adds	r3, #8
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4610      	mov	r0, r2
 800184c:	4798      	blx	r3
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf14      	ite	ne
 8001854:	2301      	movne	r3, #1
 8001856:	2300      	moveq	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d013      	beq.n	8001886 <_ZN13Communication8ReadDataEv+0x6c>
			rxData[counter] = rfm95->read();
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	330c      	adds	r3, #12
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4610      	mov	r0, r2
 800186e:	4798      	blx	r3
 8001870:	4602      	mov	r2, r0
 8001872:	7bbb      	ldrb	r3, [r7, #14]
 8001874:	b2d1      	uxtb	r1, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	460a      	mov	r2, r1
 800187c:	741a      	strb	r2, [r3, #16]
			if(counter > MAX_PACKET_2_RECEIVE){
 800187e:	7bbb      	ldrb	r3, [r7, #14]
 8001880:	2b0a      	cmp	r3, #10
 8001882:	d828      	bhi.n	80018d6 <_ZN13Communication8ReadDataEv+0xbc>
		while(rfm95->available()){
 8001884:	e7da      	b.n	800183c <_ZN13Communication8ReadDataEv+0x22>
				return;
			}
		}

		//uint8_t addr = rxData[0];
		uint8_t command = rxData[1];
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	7c5b      	ldrb	r3, [r3, #17]
 800188a:	737b      	strb	r3, [r7, #13]
		//data = rxData[2...(counter-1)]
		//uint8_t size = rxData[counter-1];
		uint8_t crc8 = rxData[counter];
 800188c:	7bbb      	ldrb	r3, [r7, #14]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	7c1b      	ldrb	r3, [r3, #16]
 8001894:	733b      	strb	r3, [r7, #12]

		if(CRC8(rxData, counter-1) != crc8){
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f103 0110 	add.w	r1, r3, #16
 800189c:	7bbb      	ldrb	r3, [r7, #14]
 800189e:	3b01      	subs	r3, #1
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	461a      	mov	r2, r3
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 f81e 	bl	80018e6 <_ZN13Communication4CRC8EPhh>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	7b3b      	ldrb	r3, [r7, #12]
 80018b0:	4293      	cmp	r3, r2
 80018b2:	bf14      	ite	ne
 80018b4:	2301      	movne	r3, #1
 80018b6:	2300      	moveq	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10d      	bne.n	80018da <_ZN13Communication8ReadDataEv+0xc0>
			//error crc error //ToDO
			return;
		}

		switch (command) {
 80018be:	7b7b      	ldrb	r3, [r7, #13]
 80018c0:	2b11      	cmp	r3, #17
 80018c2:	d10c      	bne.n	80018de <_ZN13Communication8ReadDataEv+0xc4>
			case REC_STATUS:
				digitalInOut->WriteOutput(rxData[2]);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7c9b      	ldrb	r3, [r3, #18]
 80018cc:	4619      	mov	r1, r3
 80018ce:	4610      	mov	r0, r2
 80018d0:	f7ff fc68 	bl	80011a4 <_ZN14Digitll_IN_OUT11WriteOutputEh>
				break;
 80018d4:	e004      	b.n	80018e0 <_ZN13Communication8ReadDataEv+0xc6>
				return;
 80018d6:	bf00      	nop
 80018d8:	e002      	b.n	80018e0 <_ZN13Communication8ReadDataEv+0xc6>
			return;
 80018da:	bf00      	nop
 80018dc:	e000      	b.n	80018e0 <_ZN13Communication8ReadDataEv+0xc6>
			default:
				//error no supported command //ToDO
				break;
 80018de:	bf00      	nop
		}
	}
}
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_ZN13Communication4CRC8EPhh>:


uint8_t Communication::CRC8(uint8_t *data, uint8_t length)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b089      	sub	sp, #36	; 0x24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	4613      	mov	r3, r2
 80018f2:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0xff;
 80018f4:	23ff      	movs	r3, #255	; 0xff
 80018f6:	77fb      	strb	r3, [r7, #31]
	size_t i, j;
	for (i = 0; i < length; i++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	61bb      	str	r3, [r7, #24]
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	429a      	cmp	r2, r3
 8001902:	d222      	bcs.n	800194a <_ZN13Communication4CRC8EPhh+0x64>
	{
		crc ^= data[i];
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4413      	add	r3, r2
 800190a:	781a      	ldrb	r2, [r3, #0]
 800190c:	7ffb      	ldrb	r3, [r7, #31]
 800190e:	4053      	eors	r3, r2
 8001910:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2b07      	cmp	r3, #7
 800191a:	d812      	bhi.n	8001942 <_ZN13Communication4CRC8EPhh+0x5c>
		{
			if ((crc & 0x80) != 0)
 800191c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001920:	2b00      	cmp	r3, #0
 8001922:	da07      	bge.n	8001934 <_ZN13Communication4CRC8EPhh+0x4e>
				crc = (uint8_t) ((crc << 1) ^ 0x31);
 8001924:	7ffb      	ldrb	r3, [r7, #31]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	b25b      	sxtb	r3, r3
 800192a:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800192e:	b25b      	sxtb	r3, r3
 8001930:	77fb      	strb	r3, [r7, #31]
 8001932:	e002      	b.n	800193a <_ZN13Communication4CRC8EPhh+0x54>
			else
				crc <<= 1;
 8001934:	7ffb      	ldrb	r3, [r7, #31]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3301      	adds	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	e7e9      	b.n	8001916 <_ZN13Communication4CRC8EPhh+0x30>
	for (i = 0; i < length; i++)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	3301      	adds	r3, #1
 8001946:	61bb      	str	r3, [r7, #24]
 8001948:	e7d8      	b.n	80018fc <_ZN13Communication4CRC8EPhh+0x16>
		}
	}
	return crc;
 800194a:	7ffb      	ldrb	r3, [r7, #31]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3724      	adds	r7, #36	; 0x24
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <_ZN10RFM95_LoRaC1Ev>:
 */

#include "RFM95.h"
#include "../AppMain/AppMain.h"

RFM95_LoRa::RFM95_LoRa() :
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(0)
 8001960:	4a0a      	ldr	r2, [pc, #40]	; (800198c <_ZN10RFM95_LoRaC1Ev+0x34>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
{

}
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	0800d9b4 	.word	0x0800d9b4

08001990 <_ZN10RFM95_LoRa9selectRFMEv>:
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::selectRFM(){
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	2108      	movs	r1, #8
 800199c:	4803      	ldr	r0, [pc, #12]	; (80019ac <_ZN10RFM95_LoRa9selectRFMEv+0x1c>)
 800199e:	f003 fafd 	bl	8004f9c <HAL_GPIO_WritePin>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	48000400 	.word	0x48000400

080019b0 <_ZN10RFM95_LoRa11deselectRFMEv>:
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::deselectRFM(){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_SET);
 80019b8:	2201      	movs	r2, #1
 80019ba:	2108      	movs	r1, #8
 80019bc:	4803      	ldr	r0, [pc, #12]	; (80019cc <_ZN10RFM95_LoRa11deselectRFMEv+0x1c>)
 80019be:	f003 faed 	bl	8004f9c <HAL_GPIO_WritePin>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	48000400 	.word	0x48000400

080019d0 <_ZN10RFM95_LoRa8resetRFMEv>:

void RFM95_LoRa::resetRFM(){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 80019d8:	2200      	movs	r2, #0
 80019da:	2110      	movs	r1, #16
 80019dc:	4808      	ldr	r0, [pc, #32]	; (8001a00 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 80019de:	f003 fadd 	bl	8004f9c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80019e2:	2001      	movs	r0, #1
 80019e4:	f001 fdd0 	bl	8003588 <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 80019e8:	2201      	movs	r2, #1
 80019ea:	2110      	movs	r1, #16
 80019ec:	4804      	ldr	r0, [pc, #16]	; (8001a00 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 80019ee:	f003 fad5 	bl	8004f9c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80019f2:	2005      	movs	r0, #5
 80019f4:	f001 fdc8 	bl	8003588 <HAL_Delay>
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	48000400 	.word	0x48000400

08001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>:

bool RFM95_LoRa::writeRegister(uint8_t addr, uint8_t data){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	70fb      	strb	r3, [r7, #3]
 8001a10:	4613      	mov	r3, r2
 8001a12:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	733b      	strb	r3, [r7, #12]
 8001a1e:	78bb      	ldrb	r3, [r7, #2]
 8001a20:	737b      	strb	r3, [r7, #13]
	selectRFM();
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ffb4 	bl	8001990 <_ZN10RFM95_LoRa9selectRFMEv>
	if(HAL_SPI_Transmit(&hspi3, (uint8_t*)buff, 2, 100) != HAL_OK){
 8001a28:	f107 010c 	add.w	r1, r7, #12
 8001a2c:	2364      	movs	r3, #100	; 0x64
 8001a2e:	2202      	movs	r2, #2
 8001a30:	480b      	ldr	r0, [pc, #44]	; (8001a60 <_ZN10RFM95_LoRa13writeRegisterEhh+0x5c>)
 8001a32:	f006 fad0 	bl	8007fd6 <HAL_SPI_Transmit>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf14      	ite	ne
 8001a3c:	2301      	movne	r3, #1
 8001a3e:	2300      	moveq	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d004      	beq.n	8001a50 <_ZN10RFM95_LoRa13writeRegisterEhh+0x4c>
		deselectRFM();
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ffb2 	bl	80019b0 <_ZN10RFM95_LoRa11deselectRFMEv>
		return false;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e003      	b.n	8001a58 <_ZN10RFM95_LoRa13writeRegisterEhh+0x54>
	}
	deselectRFM();
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ffad 	bl	80019b0 <_ZN10RFM95_LoRa11deselectRFMEv>
	return true;
 8001a56:	2301      	movs	r3, #1
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000440 	.word	0x20000440

08001a64 <_ZN10RFM95_LoRa12readRegisterEh>:

uint8_t RFM95_LoRa::readRegister(uint8_t addr){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 8001a70:	2300      	movs	r3, #0
 8001a72:	81bb      	strh	r3, [r7, #12]
	uint8_t txData[1] = {addr};
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	723b      	strb	r3, [r7, #8]

	selectRFM();
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ff89 	bl	8001990 <_ZN10RFM95_LoRa9selectRFMEv>
		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 8001a7e:	f107 020c 	add.w	r2, r7, #12
 8001a82:	f107 0108 	add.w	r1, r7, #8
 8001a86:	2364      	movs	r3, #100	; 0x64
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <_ZN10RFM95_LoRa12readRegisterEh+0x40>)
 8001a8e:	f006 fc10 	bl	80082b2 <HAL_SPI_TransmitReceive>
	deselectRFM();
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ff8c 	bl	80019b0 <_ZN10RFM95_LoRa11deselectRFMEv>
	return rxData[1];
 8001a98:	7b7b      	ldrb	r3, [r7, #13]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000440 	.word	0x20000440

08001aa8 <_ZN10RFM95_LoRa5beginEl>:


int RFM95_LoRa::begin(long frequency){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
 resetRFM();
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ff8c 	bl	80019d0 <_ZN10RFM95_LoRa8resetRFMEv>
  // check version
  uint8_t version = readRegister(REG_VERSION);
 8001ab8:	2142      	movs	r1, #66	; 0x42
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ffd2 	bl	8001a64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	2b12      	cmp	r3, #18
 8001ac8:	d001      	beq.n	8001ace <_ZN10RFM95_LoRa5beginEl+0x26>
    return 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e02b      	b.n	8001b26 <_ZN10RFM95_LoRa5beginEl+0x7e>
  }
  // put in sleep mode
  sleep();
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f952 	bl	8001d78 <_ZN10RFM95_LoRa5sleepEv>
  // set frequency
  setFrequency(frequency);
 8001ad4:	6839      	ldr	r1, [r7, #0]
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f998 	bl	8001e0c <_ZN10RFM95_LoRa12setFrequencyEl>
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	210e      	movs	r1, #14
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff8f 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	210f      	movs	r1, #15
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ff8a 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 8001af0:	210c      	movs	r1, #12
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffb6 	bl	8001a64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f043 0303 	orr.w	r3, r3, #3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	210c      	movs	r1, #12
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ff7d 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	2126      	movs	r1, #38	; 0x26
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ff78 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set output power to 17 dBm
  setTxPower(20);
 8001b14:	2201      	movs	r2, #1
 8001b16:	2114      	movs	r1, #20
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f93a 	bl	8001d92 <_ZN10RFM95_LoRa10setTxPowerEii>
  // put in standby mode
  idle();
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f91d 	bl	8001d5e <_ZN10RFM95_LoRa4idleEv>
  return 1;
 8001b24:	2301      	movs	r3, #1
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <_ZN10RFM95_LoRa11parsePacketEi>:



int RFM95_LoRa::parsePacket(int size)

{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b084      	sub	sp, #16
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 8001b3c:	2112      	movs	r1, #18
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ff90 	bl	8001a64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001b44:	4603      	mov	r3, r0
 8001b46:	60bb      	str	r3, [r7, #8]
  if (size > 0) {
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	dd0a      	ble.n	8001b64 <_ZN10RFM95_LoRa11parsePacketEi+0x36>
    implicitHeaderMode();
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 fa8f 	bl	8002072 <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	2122      	movs	r1, #34	; 0x22
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff51 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001b62:	e002      	b.n	8001b6a <_ZN10RFM95_LoRa11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 fa6c 	bl	8002042 <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	2112      	movs	r1, #18
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ff46 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d026      	beq.n	8001bd0 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	f003 0320 	and.w	r3, r3, #32
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d121      	bne.n	8001bd0 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
    // received a packet
    _packetIndex = 0;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	615a      	str	r2, [r3, #20]
    // read packet length
    if (_implicitHeaderMode) {
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d006      	beq.n	8001ba8 <_ZN10RFM95_LoRa11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 8001b9a:	2122      	movs	r1, #34	; 0x22
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff61 	bl	8001a64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	e005      	b.n	8001bb4 <_ZN10RFM95_LoRa11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 8001ba8:	2113      	movs	r1, #19
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ff5a 	bl	8001a64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60fb      	str	r3, [r7, #12]
    }
    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 8001bb4:	2110      	movs	r1, #16
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ff54 	bl	8001a64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	210d      	movs	r1, #13
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ff1e 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in standby mode
    idle();
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f8c8 	bl	8001d5e <_ZN10RFM95_LoRa4idleEv>
 8001bce:	e015      	b.n	8001bfc <_ZN10RFM95_LoRa11parsePacketEi+0xce>
  } else if (readRegister(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ff46 	bl	8001a64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b86      	cmp	r3, #134	; 0x86
 8001bdc:	bf14      	ite	ne
 8001bde:	2301      	movne	r3, #1
 8001be0:	2300      	moveq	r3, #0
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d009      	beq.n	8001bfc <_ZN10RFM95_LoRa11parsePacketEi+0xce>
    // not currently in RX mode
    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 8001be8:	2200      	movs	r2, #0
 8001bea:	210d      	movs	r1, #13
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff09 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in single RX mode
    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001bf2:	2286      	movs	r2, #134	; 0x86
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ff04 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  return packetLength;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_ZN10RFM95_LoRa5writeEh>:

float RFM95_LoRa::packetSnr(){
  return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
}

size_t RFM95_LoRa::write(uint8_t byte){
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3304      	adds	r3, #4
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	1cf9      	adds	r1, r7, #3
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	4798      	blx	r3
 8001c22:	4603      	mov	r3, r0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_ZN10RFM95_LoRa5writeEPKhj>:



size_t RFM95_LoRa::write(const uint8_t *buffer, size_t size){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 8001c38:	2122      	movs	r1, #34	; 0x22
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f7ff ff12 	bl	8001a64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001c40:	4603      	mov	r3, r0
 8001c42:	613b      	str	r3, [r7, #16]
  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	2bff      	cmp	r3, #255	; 0xff
 8001c4c:	d903      	bls.n	8001c56 <_ZN10RFM95_LoRa5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001c54:	607b      	str	r3, [r7, #4]
  }
  // write data
  for (size_t i = 0; i < size; i++) {
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d20c      	bcs.n	8001c7c <_ZN10RFM95_LoRa5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	4413      	add	r3, r2
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f7ff fec8 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	3301      	adds	r3, #1
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	e7ee      	b.n	8001c5a <_ZN10RFM95_LoRa5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	2122      	movs	r1, #34	; 0x22
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f7ff feb9 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return size;
 8001c92:	687b      	ldr	r3, [r7, #4]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <_ZN10RFM95_LoRa9availableEv>:


int RFM95_LoRa::available()
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8001ca4:	2113      	movs	r1, #19
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff fedc 	bl	8001a64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461a      	mov	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	1ad3      	subs	r3, r2, r3
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <_ZN10RFM95_LoRa4readEv>:



int RFM95_LoRa::read(){
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	3308      	adds	r3, #8
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	4798      	blx	r3
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	bf0c      	ite	eq
 8001cd8:	2301      	moveq	r3, #1
 8001cda:	2300      	movne	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <_ZN10RFM95_LoRa4readEv+0x2a>
    return -1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	e009      	b.n	8001cfc <_ZN10RFM95_LoRa4readEv+0x3e>
  }
  _packetIndex++;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	615a      	str	r2, [r3, #20]
  return readRegister(REG_FIFO);
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff feb5 	bl	8001a64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001cfa:	4603      	mov	r3, r0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <_ZN10RFM95_LoRa4peekEv>:



int RFM95_LoRa::peek(){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	3308      	adds	r3, #8
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	4798      	blx	r3
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	bf0c      	ite	eq
 8001d1e:	2301      	moveq	r3, #1
 8001d20:	2300      	movne	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d002      	beq.n	8001d2e <_ZN10RFM95_LoRa4peekEv+0x2a>
    return -1;
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2c:	e013      	b.n	8001d56 <_ZN10RFM95_LoRa4peekEv+0x52>
  }
  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 8001d2e:	210d      	movs	r1, #13
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fe97 	bl	8001a64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001d36:	4603      	mov	r3, r0
 8001d38:	60fb      	str	r3, [r7, #12]
  // read
  uint8_t b = readRegister(REG_FIFO);
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff fe91 	bl	8001a64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001d42:	4603      	mov	r3, r0
 8001d44:	72fb      	strb	r3, [r7, #11]
  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	210d      	movs	r1, #13
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff fe58 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return b;
 8001d54:	7afb      	ldrb	r3, [r7, #11]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <_ZN10RFM95_LoRa4idleEv>:
    explicitHeaderMode();
  }
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
}

void RFM95_LoRa::idle(){
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001d66:	2281      	movs	r2, #129	; 0x81
 8001d68:	2101      	movs	r1, #1
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff fe4a 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <_ZN10RFM95_LoRa5sleepEv>:

void RFM95_LoRa::sleep(){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8001d80:	2280      	movs	r2, #128	; 0x80
 8001d82:	2101      	movs	r1, #1
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff fe3d 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <_ZN10RFM95_LoRa10setTxPowerEii>:



void RFM95_LoRa::setTxPower(int level, int outputPin){
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d116      	bne.n	8001dd2 <_ZN10RFM95_LoRa10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	da02      	bge.n	8001db0 <_ZN10RFM95_LoRa10setTxPowerEii+0x1e>
      level = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	e004      	b.n	8001dba <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
    } else if (level > 14) {
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b0e      	cmp	r3, #14
 8001db4:	dd01      	ble.n	8001dba <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
      level = 14;
 8001db6:	230e      	movs	r3, #14
 8001db8:	60bb      	str	r3, [r7, #8]
    }
    writeRegister(REG_PA_CONFIG, 0x70 | level);
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	b25b      	sxtb	r3, r3
 8001dbe:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001dc2:	b25b      	sxtb	r3, r3
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	2109      	movs	r1, #9
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff fe1a 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
    } else if (level > 17) {
      level = 17;
    }
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 8001dd0:	e018      	b.n	8001e04 <_ZN10RFM95_LoRa10setTxPowerEii+0x72>
    if (level < 2) {
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	dc02      	bgt.n	8001dde <_ZN10RFM95_LoRa10setTxPowerEii+0x4c>
      level = 2;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	e004      	b.n	8001de8 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
    } else if (level > 17) {
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b11      	cmp	r3, #17
 8001de2:	dd01      	ble.n	8001de8 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
      level = 17;
 8001de4:	2311      	movs	r3, #17
 8001de6:	60bb      	str	r3, [r7, #8]
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	3b02      	subs	r3, #2
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	b25b      	sxtb	r3, r3
 8001df2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001df6:	b25b      	sxtb	r3, r3
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	2109      	movs	r1, #9
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f7ff fe00 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_ZN10RFM95_LoRa12setFrequencyEl>:



void RFM95_LoRa::setFrequency(long frequency){
 8001e0c:	b5b0      	push	{r4, r5, r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	6838      	ldr	r0, [r7, #0]
 8001e1a:	6108      	str	r0, [r1, #16]
  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8001e1c:	6839      	ldr	r1, [r7, #0]
 8001e1e:	17c8      	asrs	r0, r1, #31
 8001e20:	460a      	mov	r2, r1
 8001e22:	4603      	mov	r3, r0
 8001e24:	1355      	asrs	r5, r2, #13
 8001e26:	04d4      	lsls	r4, r2, #19
 8001e28:	4a1a      	ldr	r2, [pc, #104]	; (8001e94 <_ZN10RFM95_LoRa12setFrequencyEl+0x88>)
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	4620      	mov	r0, r4
 8001e30:	4629      	mov	r1, r5
 8001e32:	f7fe f9cb 	bl	80001cc <__aeabi_uldivmod>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8001e3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	0c02      	lsrs	r2, r0, #16
 8001e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001e50:	0c0b      	lsrs	r3, r1, #16
 8001e52:	b2d3      	uxtb	r3, r2
 8001e54:	461a      	mov	r2, r3
 8001e56:	2106      	movs	r1, #6
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff fdd3 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8001e5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	f04f 0300 	mov.w	r3, #0
 8001e6a:	0a02      	lsrs	r2, r0, #8
 8001e6c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001e70:	0a0b      	lsrs	r3, r1, #8
 8001e72:	b2d3      	uxtb	r3, r2
 8001e74:	461a      	mov	r2, r3
 8001e76:	2107      	movs	r1, #7
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff fdc3 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8001e7e:	7a3b      	ldrb	r3, [r7, #8]
 8001e80:	461a      	mov	r2, r3
 8001e82:	2108      	movs	r1, #8
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff fdbd 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bdb0      	pop	{r4, r5, r7, pc}
 8001e92:	bf00      	nop
 8001e94:	01e84800 	.word	0x01e84800

08001e98 <_ZN10RFM95_LoRa18setSpreadingFactorEi>:



void RFM95_LoRa::setSpreadingFactor(int sf){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2b05      	cmp	r3, #5
 8001ea6:	dc02      	bgt.n	8001eae <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x16>
    sf = 6;
 8001ea8:	2306      	movs	r3, #6
 8001eaa:	603b      	str	r3, [r7, #0]
 8001eac:	e004      	b.n	8001eb8 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b0c      	cmp	r3, #12
 8001eb2:	dd01      	ble.n	8001eb8 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
    sf = 12;
 8001eb4:	230c      	movs	r3, #12
 8001eb6:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d10a      	bne.n	8001ed4 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 8001ebe:	22c5      	movs	r2, #197	; 0xc5
 8001ec0:	2131      	movs	r1, #49	; 0x31
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff fd9e 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 8001ec8:	220c      	movs	r2, #12
 8001eca:	2137      	movs	r1, #55	; 0x37
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff fd99 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001ed2:	e009      	b.n	8001ee8 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 8001ed4:	22c3      	movs	r2, #195	; 0xc3
 8001ed6:	2131      	movs	r1, #49	; 0x31
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff fd93 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 8001ede:	220a      	movs	r2, #10
 8001ee0:	2137      	movs	r1, #55	; 0x37
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fd8e 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 8001ee8:	211e      	movs	r1, #30
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff fdba 	bl	8001a64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	b25b      	sxtb	r3, r3
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	b25a      	sxtb	r2, r3
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	b25b      	sxtb	r3, r3
 8001f00:	4313      	orrs	r3, r2
 8001f02:	b25b      	sxtb	r3, r3
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	211e      	movs	r1, #30
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff fd7a 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <_ZN10RFM95_LoRa18setSignalBandwidthEl>:


void RFM95_LoRa::setSignalBandwidth(long sbw){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  int bw;
  if (sbw <= 7.8E3) {
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	f641 6278 	movw	r2, #7800	; 0x1e78
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	dc02      	bgt.n	8001f32 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x1a>
    bw = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	e03f      	b.n	8001fb2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 10.4E3) {
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	dc02      	bgt.n	8001f42 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x2a>
    bw = 1;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	e037      	b.n	8001fb2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 15.6E3) {
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	dc02      	bgt.n	8001f52 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x3a>
    bw = 2;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	e02f      	b.n	8001fb2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 20.8E3) {
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	f245 1240 	movw	r2, #20800	; 0x5140
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	dc02      	bgt.n	8001f62 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x4a>
    bw = 3;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	e027      	b.n	8001fb2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 31.25E3) {
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	f647 2212 	movw	r2, #31250	; 0x7a12
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	dc02      	bgt.n	8001f72 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x5a>
    bw = 4;
 8001f6c:	2304      	movs	r3, #4
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	e01f      	b.n	8001fb2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 41.7E3) {
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	dc02      	bgt.n	8001f82 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x6a>
    bw = 5;
 8001f7c:	2305      	movs	r3, #5
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	e017      	b.n	8001fb2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 62.5E3) {
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	f24f 4224 	movw	r2, #62500	; 0xf424
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	dc02      	bgt.n	8001f92 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x7a>
    bw = 6;
 8001f8c:	2306      	movs	r3, #6
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	e00f      	b.n	8001fb2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 125E3) {
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	4a13      	ldr	r2, [pc, #76]	; (8001fe4 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xcc>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	dc02      	bgt.n	8001fa0 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x88>
    bw = 7;
 8001f9a:	2307      	movs	r3, #7
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	e008      	b.n	8001fb2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 250E3) {
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xd0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	dc02      	bgt.n	8001fae <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x96>
    bw = 8;
 8001fa8:	2308      	movs	r3, #8
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	e001      	b.n	8001fb2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 8001fae:	2309      	movs	r3, #9
 8001fb0:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 8001fb2:	211d      	movs	r1, #29
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff fd55 	bl	8001a64 <_ZN10RFM95_LoRa12readRegisterEh>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	b25b      	sxtb	r3, r3
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	b25a      	sxtb	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	b25b      	sxtb	r3, r3
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	b25b      	sxtb	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	211d      	movs	r1, #29
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff fd15 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	0001e848 	.word	0x0001e848
 8001fe8:	0003d090 	.word	0x0003d090

08001fec <_ZN10RFM95_LoRa14setCodingRate4Ei>:



void RFM95_LoRa::setCodingRate4(int denominator){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	dc02      	bgt.n	8002002 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x16>
    denominator = 5;
 8001ffc:	2305      	movs	r3, #5
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	e004      	b.n	800200c <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b08      	cmp	r3, #8
 8002006:	dd01      	ble.n	800200c <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
	  denominator = 8;
 8002008:	2308      	movs	r3, #8
 800200a:	603b      	str	r3, [r7, #0]
  }
  int cr = denominator - 4;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	3b04      	subs	r3, #4
 8002010:	60fb      	str	r3, [r7, #12]
  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 8002012:	211d      	movs	r1, #29
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff fd25 	bl	8001a64 <_ZN10RFM95_LoRa12readRegisterEh>
 800201a:	4603      	mov	r3, r0
 800201c:	b25b      	sxtb	r3, r3
 800201e:	f023 030e 	bic.w	r3, r3, #14
 8002022:	b25a      	sxtb	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	b25b      	sxtb	r3, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	b25b      	sxtb	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	211d      	movs	r1, #29
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff fce5 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <_ZN10RFM95_LoRa18explicitHeaderModeEv>:
uint8_t RFM95_LoRa::random(){
  return readRegister(REG_RSSI_WIDEBAND);
}


void RFM95_LoRa::explicitHeaderMode(){
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8002050:	211d      	movs	r1, #29
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff fd06 	bl	8001a64 <_ZN10RFM95_LoRa12readRegisterEh>
 8002058:	4603      	mov	r3, r0
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	b2db      	uxtb	r3, r3
 8002060:	461a      	mov	r2, r3
 8002062:	211d      	movs	r1, #29
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff fccd 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <_ZN10RFM95_LoRa18implicitHeaderModeEv>:


void RFM95_LoRa::implicitHeaderMode(){
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8002080:	211d      	movs	r1, #29
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff fcee 	bl	8001a64 <_ZN10RFM95_LoRa12readRegisterEh>
 8002088:	4603      	mov	r3, r0
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	b2db      	uxtb	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	211d      	movs	r1, #29
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff fcb5 	bl	8001a04 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <_ZN10RFM95_LoRa7InitRFMEv>:
    writeRegister(REG_FIFO_ADDR_PTR, 0);
  }
}


bool RFM95_LoRa::InitRFM(){
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]


	setFrequency(868000000);
 80020ac:	4914      	ldr	r1, [pc, #80]	; (8002100 <_ZN10RFM95_LoRa7InitRFMEv+0x5c>)
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff feac 	bl	8001e0c <_ZN10RFM95_LoRa12setFrequencyEl>
	setTxPower(17, PA_OUTPUT_PA_BOOST_PIN);
 80020b4:	2201      	movs	r2, #1
 80020b6:	2111      	movs	r1, #17
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff fe6a 	bl	8001d92 <_ZN10RFM95_LoRa10setTxPowerEii>
	setSignalBandwidth(31.25E3);
 80020be:	f647 2112 	movw	r1, #31250	; 0x7a12
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff ff28 	bl	8001f18 <_ZN10RFM95_LoRa18setSignalBandwidthEl>
	setSpreadingFactor(12);
 80020c8:	210c      	movs	r1, #12
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff fee4 	bl	8001e98 <_ZN10RFM95_LoRa18setSpreadingFactorEi>
	setCodingRate4(5);
 80020d0:	2105      	movs	r1, #5
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff ff8a 	bl	8001fec <_ZN10RFM95_LoRa14setCodingRate4Ei>
	if (!begin(866E6)) {
 80020d8:	490a      	ldr	r1, [pc, #40]	; (8002104 <_ZN10RFM95_LoRa7InitRFMEv+0x60>)
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff fce4 	bl	8001aa8 <_ZN10RFM95_LoRa5beginEl>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf0c      	ite	eq
 80020e6:	2301      	moveq	r3, #1
 80020e8:	2300      	movne	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <_ZN10RFM95_LoRa7InitRFMEv+0x50>
		return false;
 80020f0:	2300      	movs	r3, #0
 80020f2:	e000      	b.n	80020f6 <_ZN10RFM95_LoRa7InitRFMEv+0x52>
	}
	return true;
 80020f4:	2301      	movs	r3, #1
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	33bca100 	.word	0x33bca100
 8002104:	339e1c80 	.word	0x339e1c80

08002108 <_ZNK13DriveSettings16getClampingSpeedEv>:

/****************************************************************************************
 / * 	Clamping speed get/set
 ****************************************************************************************/
uint16_t DriveSettings::getClampingSpeed() const
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	return clampingSpeed;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	891b      	ldrh	r3, [r3, #8]
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_ZN13DriveSettings16setClampingSpeedEt>:

void DriveSettings::setClampingSpeed(uint16_t clampingSpeed)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]
	this->clampingSpeed = clampingSpeed;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	811a      	strh	r2, [r3, #8]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <_ZNK13DriveSettings17getClampingTorqueEv>:

/****************************************************************************************
 / * 	Clamping torque get/set
 ****************************************************************************************/
uint16_t DriveSettings::getClampingTorque() const
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
	return clampingTorque;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	889b      	ldrh	r3, [r3, #4]
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <_ZN13DriveSettings17setClampingTorqueEt>:

void DriveSettings::setClampingTorque(uint16_t clampingTorque)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	460b      	mov	r3, r1
 8002160:	807b      	strh	r3, [r7, #2]
	this->clampingTorque = clampingTorque;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	887a      	ldrh	r2, [r7, #2]
 8002166:	809a      	strh	r2, [r3, #4]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <_ZNK13DriveSettings12getInPosDiffEv>:

/****************************************************************************************
 / * 	clamping position difference get/set
 ****************************************************************************************/
uint16_t DriveSettings::getInPosDiff() const
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	return inPosDiff;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	899b      	ldrh	r3, [r3, #12]
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <_ZN13DriveSettings12setInPosDiffEt>:

void DriveSettings::setInPosDiff(uint16_t inPosDiff)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	807b      	strh	r3, [r7, #2]
	this->inPosDiff = inPosDiff;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	819a      	strh	r2, [r3, #12]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <_ZNK13DriveSettings18getOpeningDistanceEv>:

/****************************************************************************************
 / * 	opening distance get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOpeningDistance() const
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
	return openingDistance;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	89db      	ldrh	r3, [r3, #14]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <_ZN13DriveSettings18setOpeningDistanceEt>:

void DriveSettings::setOpeningDistance(uint16_t openingDistance)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	460b      	mov	r3, r1
 80021cc:	807b      	strh	r3, [r7, #2]
	this->openingDistance = openingDistance;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	887a      	ldrh	r2, [r7, #2]
 80021d2:	81da      	strh	r2, [r3, #14]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <_ZNK13DriveSettings21getOverCurrentWarningEv>:

/****************************************************************************************
 / * 	overcurrent warning get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentWarning() const
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	return overCurrentWarning;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	8a9b      	ldrh	r3, [r3, #20]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <_ZN13DriveSettings21setOverCurrentWarningEt>:

void DriveSettings::setOverCurrentWarning(uint16_t overCurrentWarning)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
	this->overCurrentWarning = overCurrentWarning;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	887a      	ldrh	r2, [r7, #2]
 8002208:	829a      	strh	r2, [r3, #20]
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <_ZNK13DriveSettings20getSelfShutdownDelayEv>:

/****************************************************************************************
 / * 	self shutdown delay get/set
 ****************************************************************************************/
uint16_t DriveSettings::getSelfShutdownDelay() const
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
	return selfShutdownDelay;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	895b      	ldrh	r3, [r3, #10]
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <_ZN13DriveSettings20setSelfShutdownDelayEt>:

void DriveSettings::setSelfShutdownDelay(uint16_t selfShutdownDelay)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	460b      	mov	r3, r1
 8002238:	807b      	strh	r3, [r7, #2]
	this->selfShutdownDelay = selfShutdownDelay;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	887a      	ldrh	r2, [r7, #2]
 800223e:	815a      	strh	r2, [r3, #10]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <_ZNK13DriveSettings13getTeachSpeedEv>:

/****************************************************************************************
 / * 	teach speed get/set
 ****************************************************************************************/
uint16_t DriveSettings::getTeachSpeed() const
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	return teachSpeed;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	88db      	ldrh	r3, [r3, #6]
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <_ZN13DriveSettings13setTeachSpeedEt>:

void DriveSettings::setTeachSpeed(uint16_t teachSpeed)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	807b      	strh	r3, [r7, #2]
	this->teachSpeed = teachSpeed;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	80da      	strh	r2, [r3, #6]
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <_ZNK13DriveSettings14getTeachTroqueEv>:

/****************************************************************************************
 / * 	teach torque get/set
 ****************************************************************************************/
uint16_t DriveSettings::getTeachTroque() const
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
	return teachTroque;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	885b      	ldrh	r3, [r3, #2]
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <_ZN13DriveSettings14setTeachTroqueEt>:

void DriveSettings::setTeachTroque(uint16_t teachTroque)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	807b      	strh	r3, [r7, #2]
	this->teachTroque = teachTroque;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	887a      	ldrh	r2, [r7, #2]
 80022aa:	805a      	strh	r2, [r3, #2]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <_ZNK13DriveSettings20getUnderVoltageErrorEv>:

/****************************************************************************************
 / * 	undervoltage error get/set
 ****************************************************************************************/
uint16_t DriveSettings::getUnderVoltageError() const
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	return underVoltageError;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	8a5b      	ldrh	r3, [r3, #18]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <_ZN13DriveSettings20setUnderVoltageErrorEt>:

void DriveSettings::setUnderVoltageError(uint16_t underVoltageError)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	807b      	strh	r3, [r7, #2]
	this->underVoltageError = underVoltageError;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	887a      	ldrh	r2, [r7, #2]
 80022e0:	825a      	strh	r2, [r3, #18]
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <_ZNK13DriveSettings22getUnderVoltageWarningEv>:

/****************************************************************************************
 / * 	undervoltage warning get/set
 ****************************************************************************************/
uint16_t DriveSettings::getUnderVoltageWarning() const
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
	return underVoltageWarning;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	8a1b      	ldrh	r3, [r3, #16]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <_ZN13DriveSettings22setUnderVoltageWarningEt>:

void DriveSettings::setUnderVoltageWarning(uint16_t underVoltageWarning)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	460b      	mov	r3, r1
 8002310:	807b      	strh	r3, [r7, #2]
	this->underVoltageWarning = underVoltageWarning;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	887a      	ldrh	r2, [r7, #2]
 8002316:	821a      	strh	r2, [r3, #16]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <_ZNK13DriveSettings19getOverCurrentErrorEv>:

/****************************************************************************************
 / * 	overcurrent error get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentError() const
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	return overCurrentError;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	8adb      	ldrh	r3, [r3, #22]
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_ZN13DriveSettings19setOverCurrentErrorEt>:

void DriveSettings::setOverCurrentError(uint16_t overCurrentError)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
	this->overCurrentError = overCurrentError;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	887a      	ldrh	r2, [r7, #2]
 800234c:	82da      	strh	r2, [r3, #22]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <_ZNK13DriveSettings16getDeviceAddressEv>:

/****************************************************************************************
 / * 	device address get/set
 ****************************************************************************************/
uint8_t DriveSettings::getDeviceAddress() const
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
	return deviceAddress;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	781b      	ldrb	r3, [r3, #0]
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <_ZN11DriveStatusC1Ev>:
 *      Author: marce
 */

#include "DriveStatus.h"

DriveStatus::DriveStatus()
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
{
}
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <_ZN11DriveStatus7isCloseEv>:

/****************************************************************************************
 / * 	close get/set (read reset)
 ****************************************************************************************/
bool DriveStatus::isClose()
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	bool closeTemp = close;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	73fb      	strb	r3, [r7, #15]
	close = false;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
	return closeTemp;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <_ZN11DriveStatus8setCloseEb>:

void DriveStatus::setClose(bool close)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	70fb      	strb	r3, [r7, #3]
	this->close = close;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	701a      	strb	r2, [r3, #0]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <_ZN11DriveStatus6isOpenEv>:

/****************************************************************************************
 / * 	open get/set (read reset)
 ****************************************************************************************/
bool DriveStatus::isOpen()
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	bool openTemp = open;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	785b      	ldrb	r3, [r3, #1]
 80023d4:	73fb      	strb	r3, [r7, #15]
	open = false;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	705a      	strb	r2, [r3, #1]
	return openTemp;
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <_ZN11DriveStatus7setOpenEb>:

void DriveStatus::setOpen(bool open)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	70fb      	strb	r3, [r7, #3]
	this->open = open;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	705a      	strb	r2, [r3, #1]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <_ZN11DriveStatus9isDisableEv>:

/****************************************************************************************
 / * 	disable get/set (read reset)
 ****************************************************************************************/
bool DriveStatus::isDisable()
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	bool disableTemp = disable;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	799b      	ldrb	r3, [r3, #6]
 8002414:	73fb      	strb	r3, [r7, #15]
	disable = false;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	719a      	strb	r2, [r3, #6]
	return disableTemp;
 800241c:	7bfb      	ldrb	r3, [r7, #15]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <_ZN11DriveStatus10setDisableEb>:

void DriveStatus::setDisable(bool disable)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	460b      	mov	r3, r1
 8002434:	70fb      	strb	r3, [r7, #3]
	this->disable = disable;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	78fa      	ldrb	r2, [r7, #3]
 800243a:	719a      	strb	r2, [r3, #6]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <_ZN11DriveStatus8isEnableEv>:

/****************************************************************************************
 / * 	enable get/set (read reset)
 ****************************************************************************************/
bool DriveStatus::isEnable()
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
	bool enableTemp = enable;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	791b      	ldrb	r3, [r3, #4]
 8002454:	73fb      	strb	r3, [r7, #15]
	enable = false;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	711a      	strb	r2, [r3, #4]
	return enableTemp;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <_ZN11DriveStatus9setEnableEb>:

void DriveStatus::setEnable(bool enable)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	70fb      	strb	r3, [r7, #3]
	this->enable = enable;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	711a      	strb	r2, [r3, #4]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <_ZN11DriveStatus7isResetEv>:

/****************************************************************************************
 / * 	reset get/set (read reset)
 ****************************************************************************************/
bool DriveStatus::isReset()
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	bool resetTemp = reset;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	78db      	ldrb	r3, [r3, #3]
 8002494:	73fb      	strb	r3, [r7, #15]
	reset = false;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	70da      	strb	r2, [r3, #3]
	return resetTemp;
 800249c:	7bfb      	ldrb	r3, [r7, #15]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <_ZN11DriveStatus8setResetEb>:

void DriveStatus::setReset(bool reset)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	460b      	mov	r3, r1
 80024b4:	70fb      	strb	r3, [r7, #3]
	this->reset = reset;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	70da      	strb	r2, [r3, #3]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <_ZN11DriveStatus6isStopEv>:

/****************************************************************************************
 / * 	stop get/set (read reset)
 /****************************************************************************************/
bool DriveStatus::isStop()
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	bool stopTemp = stop;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	795b      	ldrb	r3, [r3, #5]
 80024d4:	73fb      	strb	r3, [r7, #15]
	stop = false;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	715a      	strb	r2, [r3, #5]
	return stopTemp;
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <_ZN11DriveStatus7setStopEb>:

void DriveStatus::setStop(bool stop)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	460b      	mov	r3, r1
 80024f4:	70fb      	strb	r3, [r7, #3]
	this->stop = stop;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	715a      	strb	r2, [r3, #5]
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_ZN11DriveStatus7isTeachEv>:

/****************************************************************************************
 / * 	teach get/set (read reset)
 /****************************************************************************************/
bool DriveStatus::isTeach()
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	bool teachTemp = teach;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	789b      	ldrb	r3, [r3, #2]
 8002514:	73fb      	strb	r3, [r7, #15]
	teach = false;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	709a      	strb	r2, [r3, #2]
	return teachTemp;
 800251c:	7bfb      	ldrb	r3, [r7, #15]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <_ZN11DriveStatus8setTeachEb>:

void DriveStatus::setTeach(bool teach)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	460b      	mov	r3, r1
 8002534:	70fb      	strb	r3, [r7, #3]
	this->teach = teach;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	709a      	strb	r2, [r3, #2]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <_ZN11DriveStatus13isWriteConfigEv>:

/****************************************************************************************
 / * 	write config get/set (read reset)
 /****************************************************************************************/
bool DriveStatus::isWriteConfig()
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	return writeConfig;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	79db      	ldrb	r3, [r3, #7]
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <_ZN11TaskHandler11UpdateTasksEv>:

#include "TaskHandler.h"
#include "gpio.h"

//update tasks, should be called every 1ms
void TaskHandler::UpdateTasks() {
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

	//1ms

	//2ms
	if(counter % 2 == 0){
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	895b      	ldrh	r3, [r3, #10]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <_ZN11TaskHandler11UpdateTasksEv+0x1a>
		adcUpdateTask = true;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	70da      	strb	r2, [r3, #3]
	}


	//15ms
	if(counter % 15 == 0){
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	895a      	ldrh	r2, [r3, #10]
 800257e:	4b24      	ldr	r3, [pc, #144]	; (8002610 <_ZN11TaskHandler11UpdateTasksEv+0xb0>)
 8002580:	fba3 1302 	umull	r1, r3, r3, r2
 8002584:	08d9      	lsrs	r1, r3, #3
 8002586:	460b      	mov	r3, r1
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	1a5b      	subs	r3, r3, r1
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	b29b      	uxth	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <_ZN11TaskHandler11UpdateTasksEv+0x3a>
		ioUpdateTask = true;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	709a      	strb	r2, [r3, #2]
	}



	//100ms
	if(counter % 100 == 0){
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	895b      	ldrh	r3, [r3, #10]
 800259e:	4a1d      	ldr	r2, [pc, #116]	; (8002614 <_ZN11TaskHandler11UpdateTasksEv+0xb4>)
 80025a0:	fba2 1203 	umull	r1, r2, r2, r3
 80025a4:	0952      	lsrs	r2, r2, #5
 80025a6:	2164      	movs	r1, #100	; 0x64
 80025a8:	fb01 f202 	mul.w	r2, r1, r2
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <_ZN11TaskHandler11UpdateTasksEv+0x5a>
		errorTask = true;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
	}


	//500ms
	if(counter % 500 == 0){
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	895b      	ldrh	r3, [r3, #10]
 80025be:	4a16      	ldr	r2, [pc, #88]	; (8002618 <_ZN11TaskHandler11UpdateTasksEv+0xb8>)
 80025c0:	fba2 1203 	umull	r1, r2, r2, r3
 80025c4:	0952      	lsrs	r2, r2, #5
 80025c6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80025ca:	fb01 f202 	mul.w	r2, r1, r2
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d105      	bne.n	80025e2 <_ZN11TaskHandler11UpdateTasksEv+0x82>
		ledUpdateTask = true;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	711a      	strb	r2, [r3, #4]
		comTask = true;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	705a      	strb	r2, [r3, #1]
	}



	//increment counter
	if(counter > 2999){
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	895b      	ldrh	r3, [r3, #10]
 80025e6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d903      	bls.n	80025f6 <_ZN11TaskHandler11UpdateTasksEv+0x96>
		counter = 1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	815a      	strh	r2, [r3, #10]
	}else{
		counter++;
	}

}
 80025f4:	e005      	b.n	8002602 <_ZN11TaskHandler11UpdateTasksEv+0xa2>
		counter++;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	895b      	ldrh	r3, [r3, #10]
 80025fa:	3301      	adds	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	815a      	strh	r2, [r3, #10]
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	88888889 	.word	0x88888889
 8002614:	51eb851f 	.word	0x51eb851f
 8002618:	10624dd3 	.word	0x10624dd3

0800261c <_ZN11TaskHandler9isComTaskEv>:



bool TaskHandler::isComTask()  {
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
	bool comTaskTemp = (comTask & comTaskEnable);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	785b      	ldrb	r3, [r3, #1]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	799b      	ldrb	r3, [r3, #6]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	73fb      	strb	r3, [r7, #15]
	comTask = false;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	705a      	strb	r2, [r3, #1]
	return comTaskTemp;
 8002644:	7bfb      	ldrb	r3, [r7, #15]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <_ZN11TaskHandler11isErrorTaskEv>:


bool TaskHandler::isErrorTask()  {
 8002652:	b480      	push	{r7}
 8002654:	b085      	sub	sp, #20
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
	bool errorTaskTemp = (errorTask & errorTaskEnable);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	461a      	mov	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	795b      	ldrb	r3, [r3, #5]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	4013      	ands	r3, r2
 800266a:	2b00      	cmp	r3, #0
 800266c:	bf14      	ite	ne
 800266e:	2301      	movne	r3, #1
 8002670:	2300      	moveq	r3, #0
 8002672:	73fb      	strb	r3, [r7, #15]
	errorTask = false;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
	return errorTaskTemp;
 800267a:	7bfb      	ldrb	r3, [r7, #15]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <_ZN11TaskHandler14isIoUpdateTaskEv>:

bool TaskHandler::isIoUpdateTask()  {
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
	bool ioUpdateTaskTemp = (ioUpdateTask & ioUpdateTaskEnable);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	789b      	ldrb	r3, [r3, #2]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	79db      	ldrb	r3, [r3, #7]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	4013      	ands	r3, r2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bf14      	ite	ne
 80026a4:	2301      	movne	r3, #1
 80026a6:	2300      	moveq	r3, #0
 80026a8:	73fb      	strb	r3, [r7, #15]
	ioUpdateTask = false;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	709a      	strb	r2, [r3, #2]
	return ioUpdateTaskTemp;
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <_ZN11TaskHandler15isLEDUpdateTaskEv>:
	adcUpdateTask = false;
	return adcUpdateTaskTemp;
}


bool TaskHandler::isLEDUpdateTask(){
 80026be:	b480      	push	{r7}
 80026c0:	b085      	sub	sp, #20
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
	bool ledUpdateTaskTemp = (ledUpdateTask & ledUpdateTaskEnable);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	791b      	ldrb	r3, [r3, #4]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	7a5b      	ldrb	r3, [r3, #9]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bf14      	ite	ne
 80026da:	2301      	movne	r3, #1
 80026dc:	2300      	moveq	r3, #0
 80026de:	73fb      	strb	r3, [r7, #15]
	ledUpdateTask = false;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	711a      	strb	r2, [r3, #4]
	return ledUpdateTaskTemp;
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <_ZN5Delay8DWT_InitEv>:


/*
 * Mikrosenkunden delay Initialisieren
 */
void Delay::DWT_Init(void) {
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <_ZN5Delay8DWT_InitEv+0x2c>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4a08      	ldr	r2, [pc, #32]	; (8002720 <_ZN5Delay8DWT_InitEv+0x2c>)
 80026fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002702:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8002704:	4b07      	ldr	r3, [pc, #28]	; (8002724 <_ZN5Delay8DWT_InitEv+0x30>)
 8002706:	2200      	movs	r2, #0
 8002708:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <_ZN5Delay8DWT_InitEv+0x30>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a05      	ldr	r2, [pc, #20]	; (8002724 <_ZN5Delay8DWT_InitEv+0x30>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6013      	str	r3, [r2, #0]
}
 8002716:	bf00      	nop
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000edf0 	.word	0xe000edf0
 8002724:	e0001000 	.word	0xe0001000

08002728 <_ZN5Delay12DWT_Delay_usEm>:

/*
 * Mikrosenkunden delay für Push-Pull ansteuerung
 */
void Delay::DWT_Delay_us(volatile uint32_t microseconds) {
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8002730:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <_ZN5Delay12DWT_Delay_usEm+0x48>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	60fb      	str	r3, [r7, #12]
	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002736:	f005 f803 	bl	8007740 <HAL_RCC_GetHCLKFreq>
 800273a:	4603      	mov	r3, r0
 800273c:	4a0d      	ldr	r2, [pc, #52]	; (8002774 <_ZN5Delay12DWT_Delay_usEm+0x4c>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	0c9b      	lsrs	r3, r3, #18
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	fb02 f303 	mul.w	r3, r2, r3
 800274a:	607b      	str	r3, [r7, #4]
	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <_ZN5Delay12DWT_Delay_usEm+0x48>)
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	1ad2      	subs	r2, r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	429a      	cmp	r2, r3
 8002758:	bf34      	ite	cc
 800275a:	2301      	movcc	r3, #1
 800275c:	2300      	movcs	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d000      	beq.n	8002766 <_ZN5Delay12DWT_Delay_usEm+0x3e>
 8002764:	e7f2      	b.n	800274c <_ZN5Delay12DWT_Delay_usEm+0x24>
}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	e0001000 	.word	0xe0001000
 8002774:	431bde83 	.word	0x431bde83

08002778 <_ZN5Queue7EnqueueEh>:
 *
 * @param data to push in queue
 * @return none
 */
void Queue::Enqueue(uint8_t data)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	70fb      	strb	r3, [r7, #3]
	//push data to buffer
	buffer[enqueuePointer] = data;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	78fa      	ldrb	r2, [r7, #3]
 8002790:	709a      	strb	r2, [r3, #2]

	if (dequeuePointer == 0 && enqueuePointer == BUFFER_SIZE - 1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	785b      	ldrb	r3, [r3, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10d      	bne.n	80027b6 <_ZN5Queue7EnqueueEh+0x3e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b09      	cmp	r3, #9
 80027a0:	d109      	bne.n	80027b6 <_ZN5Queue7EnqueueEh+0x3e>
	{
		dequeuePointer++;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	785b      	ldrb	r3, [r3, #1]
 80027a6:	3301      	adds	r3, #1
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	705a      	strb	r2, [r3, #1]
		enqueuePointer = 0;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	e038      	b.n	8002828 <_ZN5Queue7EnqueueEh+0xb0>
	}
	else if (dequeuePointer == BUFFER_SIZE - 1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	785b      	ldrb	r3, [r3, #1]
 80027ba:	2b09      	cmp	r3, #9
 80027bc:	d111      	bne.n	80027e2 <_ZN5Queue7EnqueueEh+0x6a>
			&& enqueuePointer == dequeuePointer - 1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	785b      	ldrb	r3, [r3, #1]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d109      	bne.n	80027e2 <_ZN5Queue7EnqueueEh+0x6a>
	{
		dequeuePointer = 0;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	705a      	strb	r2, [r3, #1]
		enqueuePointer++;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	3301      	adds	r3, #1
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	e022      	b.n	8002828 <_ZN5Queue7EnqueueEh+0xb0>
	}
	else if (enqueuePointer + 1 == dequeuePointer)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	3301      	adds	r3, #1
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	7852      	ldrb	r2, [r2, #1]
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d10c      	bne.n	800280a <_ZN5Queue7EnqueueEh+0x92>
	{
		dequeuePointer++;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	785b      	ldrb	r3, [r3, #1]
 80027f4:	3301      	adds	r3, #1
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	705a      	strb	r2, [r3, #1]
		enqueuePointer++;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	3301      	adds	r3, #1
 8002802:	b2da      	uxtb	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		enqueuePointer++;
	}
}
 8002808:	e00e      	b.n	8002828 <_ZN5Queue7EnqueueEh+0xb0>
	else if (enqueuePointer == BUFFER_SIZE - 1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b09      	cmp	r3, #9
 8002810:	d103      	bne.n	800281a <_ZN5Queue7EnqueueEh+0xa2>
		enqueuePointer = 0;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
}
 8002818:	e006      	b.n	8002828 <_ZN5Queue7EnqueueEh+0xb0>
		enqueuePointer++;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	3301      	adds	r3, #1
 8002820:	b2da      	uxtb	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	701a      	strb	r2, [r3, #0]
}
 8002826:	e7ff      	b.n	8002828 <_ZN5Queue7EnqueueEh+0xb0>
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <_ZN5Queue7DequeueEv>:
 *
 * @param none
 * @return data at actual dequeue position
 */
uint8_t Queue::Dequeue()
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
	//return 0 if queue is empty
	if (IsEmpty())
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f81e 	bl	800287e <_ZN5Queue7IsEmptyEv>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <_ZN5Queue7DequeueEv+0x18>
	{
		return 0;
 8002848:	2300      	movs	r3, #0
 800284a:	e014      	b.n	8002876 <_ZN5Queue7DequeueEv+0x42>
	}
	//get acutal dequeue pointer
	uint8_t dequeuePointerTemp = dequeuePointer;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	785b      	ldrb	r3, [r3, #1]
 8002850:	73fb      	strb	r3, [r7, #15]

	//incfement dequeuePointer, set to 0 if queue overflow occures
	if (dequeuePointer == BUFFER_SIZE - 1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	785b      	ldrb	r3, [r3, #1]
 8002856:	2b09      	cmp	r3, #9
 8002858:	d103      	bne.n	8002862 <_ZN5Queue7DequeueEv+0x2e>
	{
		dequeuePointer = 0;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	705a      	strb	r2, [r3, #1]
 8002860:	e005      	b.n	800286e <_ZN5Queue7DequeueEv+0x3a>
	}
	else
	{
		dequeuePointer++;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	785b      	ldrb	r3, [r3, #1]
 8002866:	3301      	adds	r3, #1
 8002868:	b2da      	uxtb	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	705a      	strb	r2, [r3, #1]
	}
	//return queue data
	return buffer[dequeuePointerTemp];
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	4413      	add	r3, r2
 8002874:	789b      	ldrb	r3, [r3, #2]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <_ZN5Queue7IsEmptyEv>:
 *
 * @param none
 * @return true if queue is empty otherwise false
 */
bool Queue::IsEmpty()
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
	return (enqueuePointer == dequeuePointer);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	781a      	ldrb	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	785b      	ldrb	r3, [r3, #1]
 800288e:	429a      	cmp	r2, r3
 8002890:	bf0c      	ite	eq
 8002892:	2301      	moveq	r3, #1
 8002894:	2300      	movne	r3, #0
 8002896:	b2db      	uxtb	r3, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028aa:	463b      	mov	r3, r7
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	611a      	str	r2, [r3, #16]
 80028b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80028ba:	4b29      	ldr	r3, [pc, #164]	; (8002960 <MX_ADC1_Init+0xbc>)
 80028bc:	4a29      	ldr	r2, [pc, #164]	; (8002964 <MX_ADC1_Init+0xc0>)
 80028be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80028c0:	4b27      	ldr	r3, [pc, #156]	; (8002960 <MX_ADC1_Init+0xbc>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80028c6:	4b26      	ldr	r3, [pc, #152]	; (8002960 <MX_ADC1_Init+0xbc>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028cc:	4b24      	ldr	r3, [pc, #144]	; (8002960 <MX_ADC1_Init+0xbc>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80028d2:	4b23      	ldr	r3, [pc, #140]	; (8002960 <MX_ADC1_Init+0xbc>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028d8:	4b21      	ldr	r3, [pc, #132]	; (8002960 <MX_ADC1_Init+0xbc>)
 80028da:	2204      	movs	r2, #4
 80028dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80028de:	4b20      	ldr	r3, [pc, #128]	; (8002960 <MX_ADC1_Init+0xbc>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80028e4:	4b1e      	ldr	r3, [pc, #120]	; (8002960 <MX_ADC1_Init+0xbc>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80028ea:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <MX_ADC1_Init+0xbc>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028f0:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <MX_ADC1_Init+0xbc>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028f8:	4b19      	ldr	r3, [pc, #100]	; (8002960 <MX_ADC1_Init+0xbc>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028fe:	4b18      	ldr	r3, [pc, #96]	; (8002960 <MX_ADC1_Init+0xbc>)
 8002900:	2200      	movs	r2, #0
 8002902:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002904:	4b16      	ldr	r3, [pc, #88]	; (8002960 <MX_ADC1_Init+0xbc>)
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800290c:	4b14      	ldr	r3, [pc, #80]	; (8002960 <MX_ADC1_Init+0xbc>)
 800290e:	2200      	movs	r2, #0
 8002910:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <MX_ADC1_Init+0xbc>)
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800291a:	4811      	ldr	r0, [pc, #68]	; (8002960 <MX_ADC1_Init+0xbc>)
 800291c:	f000 ffe4 	bl	80038e8 <HAL_ADC_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002926:	f000 fbb3 	bl	8003090 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800292a:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <MX_ADC1_Init+0xc4>)
 800292c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800292e:	2306      	movs	r3, #6
 8002930:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002936:	237f      	movs	r3, #127	; 0x7f
 8002938:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800293a:	2304      	movs	r3, #4
 800293c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002942:	463b      	mov	r3, r7
 8002944:	4619      	mov	r1, r3
 8002946:	4806      	ldr	r0, [pc, #24]	; (8002960 <MX_ADC1_Init+0xbc>)
 8002948:	f001 f916 	bl	8003b78 <HAL_ADC_ConfigChannel>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002952:	f000 fb9d 	bl	8003090 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002956:	bf00      	nop
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	200001ac 	.word	0x200001ac
 8002964:	50040000 	.word	0x50040000
 8002968:	2e300800 	.word	0x2e300800

0800296c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b0a2      	sub	sp, #136	; 0x88
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002974:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	2260      	movs	r2, #96	; 0x60
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f00a ffd5 	bl	800d93c <memset>
  if(adcHandle->Instance==ADC1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a3b      	ldr	r2, [pc, #236]	; (8002a84 <HAL_ADC_MspInit+0x118>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d16e      	bne.n	8002a7a <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800299c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029a0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80029a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80029a6:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80029a8:	2301      	movs	r3, #1
 80029aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80029ac:	2301      	movs	r3, #1
 80029ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80029b0:	2310      	movs	r3, #16
 80029b2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80029b4:	2307      	movs	r3, #7
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80029b8:	2302      	movs	r3, #2
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80029bc:	2302      	movs	r3, #2
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80029c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029c4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029c6:	f107 0314 	add.w	r3, r7, #20
 80029ca:	4618      	mov	r0, r3
 80029cc:	f004 ff24 	bl	8007818 <HAL_RCCEx_PeriphCLKConfig>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80029d6:	f000 fb5b 	bl	8003090 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80029da:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <HAL_ADC_MspInit+0x11c>)
 80029dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029de:	4a2a      	ldr	r2, [pc, #168]	; (8002a88 <HAL_ADC_MspInit+0x11c>)
 80029e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029e6:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <HAL_ADC_MspInit+0x11c>)
 80029e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f2:	4b25      	ldr	r3, [pc, #148]	; (8002a88 <HAL_ADC_MspInit+0x11c>)
 80029f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f6:	4a24      	ldr	r2, [pc, #144]	; (8002a88 <HAL_ADC_MspInit+0x11c>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029fe:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <HAL_ADC_MspInit+0x11c>)
 8002a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a0a:	23c0      	movs	r3, #192	; 0xc0
 8002a0c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002a0e:	230b      	movs	r3, #11
 8002a10:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a16:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a20:	f002 f92a 	bl	8004c78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <HAL_ADC_MspInit+0x120>)
 8002a26:	4a1a      	ldr	r2, [pc, #104]	; (8002a90 <HAL_ADC_MspInit+0x124>)
 8002a28:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002a2a:	4b18      	ldr	r3, [pc, #96]	; (8002a8c <HAL_ADC_MspInit+0x120>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a30:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <HAL_ADC_MspInit+0x120>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <HAL_ADC_MspInit+0x120>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a3c:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <HAL_ADC_MspInit+0x120>)
 8002a3e:	2280      	movs	r2, #128	; 0x80
 8002a40:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a42:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <HAL_ADC_MspInit+0x120>)
 8002a44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a48:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_ADC_MspInit+0x120>)
 8002a4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002a52:	4b0e      	ldr	r3, [pc, #56]	; (8002a8c <HAL_ADC_MspInit+0x120>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a58:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <HAL_ADC_MspInit+0x120>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a5e:	480b      	ldr	r0, [pc, #44]	; (8002a8c <HAL_ADC_MspInit+0x120>)
 8002a60:	f001 ffa2 	bl	80049a8 <HAL_DMA_Init>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8002a6a:	f000 fb11 	bl	8003090 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a06      	ldr	r2, [pc, #24]	; (8002a8c <HAL_ADC_MspInit+0x120>)
 8002a72:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a74:	4a05      	ldr	r2, [pc, #20]	; (8002a8c <HAL_ADC_MspInit+0x120>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	3788      	adds	r7, #136	; 0x88
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	50040000 	.word	0x50040000
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	20000210 	.word	0x20000210
 8002a90:	40020008 	.word	0x40020008

08002a94 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002a98:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <MX_CRC_Init+0x3c>)
 8002a9a:	4a0e      	ldr	r2, [pc, #56]	; (8002ad4 <MX_CRC_Init+0x40>)
 8002a9c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002a9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <MX_CRC_Init+0x3c>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <MX_CRC_Init+0x3c>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <MX_CRC_Init+0x3c>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002ab0:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <MX_CRC_Init+0x3c>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <MX_CRC_Init+0x3c>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002abc:	4804      	ldr	r0, [pc, #16]	; (8002ad0 <MX_CRC_Init+0x3c>)
 8002abe:	f001 fd4d 	bl	800455c <HAL_CRC_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002ac8:	f000 fae2 	bl	8003090 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002acc:	bf00      	nop
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000258 	.word	0x20000258
 8002ad4:	40023000 	.word	0x40023000

08002ad8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <HAL_CRC_MspInit+0x38>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d10b      	bne.n	8002b02 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002aea:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <HAL_CRC_MspInit+0x3c>)
 8002aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aee:	4a09      	ldr	r2, [pc, #36]	; (8002b14 <HAL_CRC_MspInit+0x3c>)
 8002af0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002af4:	6493      	str	r3, [r2, #72]	; 0x48
 8002af6:	4b07      	ldr	r3, [pc, #28]	; (8002b14 <HAL_CRC_MspInit+0x3c>)
 8002af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40023000 	.word	0x40023000
 8002b14:	40021000 	.word	0x40021000

08002b18 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08a      	sub	sp, #40	; 0x28
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	2224      	movs	r2, #36	; 0x24
 8002b22:	2100      	movs	r1, #0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f00a ff09 	bl	800d93c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002b2a:	4b17      	ldr	r3, [pc, #92]	; (8002b88 <MX_DAC1_Init+0x70>)
 8002b2c:	4a17      	ldr	r2, [pc, #92]	; (8002b8c <MX_DAC1_Init+0x74>)
 8002b2e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002b30:	4815      	ldr	r0, [pc, #84]	; (8002b88 <MX_DAC1_Init+0x70>)
 8002b32:	f001 fdfd 	bl	8004730 <HAL_DAC_Init>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002b3c:	f000 faa8 	bl	8003090 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002b40:	2300      	movs	r3, #0
 8002b42:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	2200      	movs	r2, #0
 8002b58:	4619      	mov	r1, r3
 8002b5a:	480b      	ldr	r0, [pc, #44]	; (8002b88 <MX_DAC1_Init+0x70>)
 8002b5c:	f001 fe0a 	bl	8004774 <HAL_DAC_ConfigChannel>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8002b66:	f000 fa93 	bl	8003090 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4805      	ldr	r0, [pc, #20]	; (8002b88 <MX_DAC1_Init+0x70>)
 8002b72:	f001 fdff 	bl	8004774 <HAL_DAC_ConfigChannel>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8002b7c:	f000 fa88 	bl	8003090 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002b80:	bf00      	nop
 8002b82:	3728      	adds	r7, #40	; 0x28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	2000027c 	.word	0x2000027c
 8002b8c:	40007400 	.word	0x40007400

08002b90 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	; 0x28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a40      	ldr	r2, [pc, #256]	; (8002cb0 <HAL_DAC_MspInit+0x120>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d17a      	bne.n	8002ca8 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002bb2:	4b40      	ldr	r3, [pc, #256]	; (8002cb4 <HAL_DAC_MspInit+0x124>)
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb6:	4a3f      	ldr	r2, [pc, #252]	; (8002cb4 <HAL_DAC_MspInit+0x124>)
 8002bb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8002bbe:	4b3d      	ldr	r3, [pc, #244]	; (8002cb4 <HAL_DAC_MspInit+0x124>)
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bca:	4b3a      	ldr	r3, [pc, #232]	; (8002cb4 <HAL_DAC_MspInit+0x124>)
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bce:	4a39      	ldr	r2, [pc, #228]	; (8002cb4 <HAL_DAC_MspInit+0x124>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bd6:	4b37      	ldr	r3, [pc, #220]	; (8002cb4 <HAL_DAC_MspInit+0x124>)
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002be2:	2330      	movs	r3, #48	; 0x30
 8002be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002be6:	2303      	movs	r3, #3
 8002be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bee:	f107 0314 	add.w	r3, r7, #20
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf8:	f002 f83e 	bl	8004c78 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8002bfc:	4b2e      	ldr	r3, [pc, #184]	; (8002cb8 <HAL_DAC_MspInit+0x128>)
 8002bfe:	4a2f      	ldr	r2, [pc, #188]	; (8002cbc <HAL_DAC_MspInit+0x12c>)
 8002c00:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8002c02:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <HAL_DAC_MspInit+0x128>)
 8002c04:	2206      	movs	r2, #6
 8002c06:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c08:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <HAL_DAC_MspInit+0x128>)
 8002c0a:	2210      	movs	r2, #16
 8002c0c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c0e:	4b2a      	ldr	r3, [pc, #168]	; (8002cb8 <HAL_DAC_MspInit+0x128>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002c14:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <HAL_DAC_MspInit+0x128>)
 8002c16:	2280      	movs	r2, #128	; 0x80
 8002c18:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c1a:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <HAL_DAC_MspInit+0x128>)
 8002c1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c20:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c22:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <HAL_DAC_MspInit+0x128>)
 8002c24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c28:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8002c2a:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <HAL_DAC_MspInit+0x128>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002c30:	4b21      	ldr	r3, [pc, #132]	; (8002cb8 <HAL_DAC_MspInit+0x128>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002c36:	4820      	ldr	r0, [pc, #128]	; (8002cb8 <HAL_DAC_MspInit+0x128>)
 8002c38:	f001 feb6 	bl	80049a8 <HAL_DMA_Init>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8002c42:	f000 fa25 	bl	8003090 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a1b      	ldr	r2, [pc, #108]	; (8002cb8 <HAL_DAC_MspInit+0x128>)
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	4a1a      	ldr	r2, [pc, #104]	; (8002cb8 <HAL_DAC_MspInit+0x128>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8002c52:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <HAL_DAC_MspInit+0x130>)
 8002c54:	4a1b      	ldr	r2, [pc, #108]	; (8002cc4 <HAL_DAC_MspInit+0x134>)
 8002c56:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8002c58:	4b19      	ldr	r3, [pc, #100]	; (8002cc0 <HAL_DAC_MspInit+0x130>)
 8002c5a:	2205      	movs	r2, #5
 8002c5c:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c5e:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <HAL_DAC_MspInit+0x130>)
 8002c60:	2210      	movs	r2, #16
 8002c62:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c64:	4b16      	ldr	r3, [pc, #88]	; (8002cc0 <HAL_DAC_MspInit+0x130>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002c6a:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <HAL_DAC_MspInit+0x130>)
 8002c6c:	2280      	movs	r2, #128	; 0x80
 8002c6e:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c70:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <HAL_DAC_MspInit+0x130>)
 8002c72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c76:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c78:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <HAL_DAC_MspInit+0x130>)
 8002c7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c7e:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_NORMAL;
 8002c80:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <HAL_DAC_MspInit+0x130>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002c86:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <HAL_DAC_MspInit+0x130>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8002c8c:	480c      	ldr	r0, [pc, #48]	; (8002cc0 <HAL_DAC_MspInit+0x130>)
 8002c8e:	f001 fe8b 	bl	80049a8 <HAL_DMA_Init>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8002c98:	f000 f9fa 	bl	8003090 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a08      	ldr	r2, [pc, #32]	; (8002cc0 <HAL_DAC_MspInit+0x130>)
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	4a07      	ldr	r2, [pc, #28]	; (8002cc0 <HAL_DAC_MspInit+0x130>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8002ca8:	bf00      	nop
 8002caa:	3728      	adds	r7, #40	; 0x28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40007400 	.word	0x40007400
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	20000290 	.word	0x20000290
 8002cbc:	40020030 	.word	0x40020030
 8002cc0:	200002d8 	.word	0x200002d8
 8002cc4:	40020044 	.word	0x40020044

08002cc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cce:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <MX_DMA_Init+0x58>)
 8002cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd2:	4a13      	ldr	r2, [pc, #76]	; (8002d20 <MX_DMA_Init+0x58>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6493      	str	r3, [r2, #72]	; 0x48
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <MX_DMA_Init+0x58>)
 8002cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	607b      	str	r3, [r7, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2100      	movs	r1, #0
 8002cea:	200b      	movs	r0, #11
 8002cec:	f001 fbff 	bl	80044ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002cf0:	200b      	movs	r0, #11
 8002cf2:	f001 fc18 	bl	8004526 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	200d      	movs	r0, #13
 8002cfc:	f001 fbf7 	bl	80044ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002d00:	200d      	movs	r0, #13
 8002d02:	f001 fc10 	bl	8004526 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002d06:	2200      	movs	r2, #0
 8002d08:	2100      	movs	r1, #0
 8002d0a:	200e      	movs	r0, #14
 8002d0c:	f001 fbef 	bl	80044ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002d10:	200e      	movs	r0, #14
 8002d12:	f001 fc08 	bl	8004526 <HAL_NVIC_EnableIRQ>

}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40021000 	.word	0x40021000

08002d24 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08a      	sub	sp, #40	; 0x28
 8002d28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2a:	f107 0314 	add.w	r3, r7, #20
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	605a      	str	r2, [r3, #4]
 8002d34:	609a      	str	r2, [r3, #8]
 8002d36:	60da      	str	r2, [r3, #12]
 8002d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d3a:	4b67      	ldr	r3, [pc, #412]	; (8002ed8 <MX_GPIO_Init+0x1b4>)
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3e:	4a66      	ldr	r2, [pc, #408]	; (8002ed8 <MX_GPIO_Init+0x1b4>)
 8002d40:	f043 0304 	orr.w	r3, r3, #4
 8002d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d46:	4b64      	ldr	r3, [pc, #400]	; (8002ed8 <MX_GPIO_Init+0x1b4>)
 8002d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d52:	4b61      	ldr	r3, [pc, #388]	; (8002ed8 <MX_GPIO_Init+0x1b4>)
 8002d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d56:	4a60      	ldr	r2, [pc, #384]	; (8002ed8 <MX_GPIO_Init+0x1b4>)
 8002d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d5e:	4b5e      	ldr	r3, [pc, #376]	; (8002ed8 <MX_GPIO_Init+0x1b4>)
 8002d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6a:	4b5b      	ldr	r3, [pc, #364]	; (8002ed8 <MX_GPIO_Init+0x1b4>)
 8002d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6e:	4a5a      	ldr	r2, [pc, #360]	; (8002ed8 <MX_GPIO_Init+0x1b4>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d76:	4b58      	ldr	r3, [pc, #352]	; (8002ed8 <MX_GPIO_Init+0x1b4>)
 8002d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d82:	4b55      	ldr	r3, [pc, #340]	; (8002ed8 <MX_GPIO_Init+0x1b4>)
 8002d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d86:	4a54      	ldr	r2, [pc, #336]	; (8002ed8 <MX_GPIO_Init+0x1b4>)
 8002d88:	f043 0302 	orr.w	r3, r3, #2
 8002d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d8e:	4b52      	ldr	r3, [pc, #328]	; (8002ed8 <MX_GPIO_Init+0x1b4>)
 8002d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	607b      	str	r3, [r7, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f24c 31d0 	movw	r1, #50128	; 0xc3d0
 8002da0:	484e      	ldr	r0, [pc, #312]	; (8002edc <MX_GPIO_Init+0x1b8>)
 8002da2:	f002 f8fb 	bl	8004f9c <HAL_GPIO_WritePin>
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(GPIOB, DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 8002da6:	2200      	movs	r2, #0
 8002da8:	f64e 41ff 	movw	r1, #60671	; 0xecff
 8002dac:	484c      	ldr	r0, [pc, #304]	; (8002ee0 <MX_GPIO_Init+0x1bc>)
 8002dae:	f002 f8f5 	bl	8004f9c <HAL_GPIO_WritePin>
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DI_OUT_1_P_Pin|LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8002db2:	2200      	movs	r2, #0
 8002db4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dbc:	f002 f8ee 	bl	8004f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002dc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dce:	f107 0314 	add.w	r3, r7, #20
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4841      	ldr	r0, [pc, #260]	; (8002edc <MX_GPIO_Init+0x1b8>)
 8002dd6:	f001 ff4f 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 8002dda:	f24c 33d0 	movw	r3, #50128	; 0xc3d0
 8002dde:	617b      	str	r3, [r7, #20]
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002de0:	2301      	movs	r3, #1
 8002de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de8:	2300      	movs	r3, #0
 8002dea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	4619      	mov	r1, r3
 8002df2:	483a      	ldr	r0, [pc, #232]	; (8002edc <MX_GPIO_Init+0x1b8>)
 8002df4:	f001 ff40 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002df8:	2309      	movs	r3, #9
 8002dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4836      	ldr	r0, [pc, #216]	; (8002ee4 <MX_GPIO_Init+0x1c0>)
 8002e0c:	f001 ff34 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DI_1_Pin;
 8002e10:	2302      	movs	r3, #2
 8002e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DI_1_GPIO_Port, &GPIO_InitStruct);
 8002e1c:	f107 0314 	add.w	r3, r7, #20
 8002e20:	4619      	mov	r1, r3
 8002e22:	4830      	ldr	r0, [pc, #192]	; (8002ee4 <MX_GPIO_Init+0x1c0>)
 8002e24:	f001 ff28 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_2_Pin|DI_3_Pin|DI_4_Pin|DI_5_Pin;
 8002e28:	230f      	movs	r3, #15
 8002e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e34:	f107 0314 	add.w	r3, r7, #20
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4828      	ldr	r0, [pc, #160]	; (8002edc <MX_GPIO_Init+0x1b8>)
 8002e3c:	f001 ff1c 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DI_6_Pin|DI_7_Pin|DI_8_Pin;
 8002e40:	2307      	movs	r3, #7
 8002e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4c:	f107 0314 	add.w	r3, r7, #20
 8002e50:	4619      	mov	r1, r3
 8002e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e56:	f001 ff0f 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_15;
 8002e5a:	f248 0308 	movw	r3, #32776	; 0x8008
 8002e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e60:	2303      	movs	r3, #3
 8002e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e68:	f107 0314 	add.w	r3, r7, #20
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e72:	f001 ff01 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 8002e76:	f64e 43ff 	movw	r3, #60671	; 0xecff
 8002e7a:	617b      	str	r3, [r7, #20]
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e84:	2300      	movs	r3, #0
 8002e86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e88:	f107 0314 	add.w	r3, r7, #20
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4814      	ldr	r0, [pc, #80]	; (8002ee0 <MX_GPIO_Init+0x1bc>)
 8002e90:	f001 fef2 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 8002e94:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8002e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea2:	f107 0314 	add.w	r3, r7, #20
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	480d      	ldr	r0, [pc, #52]	; (8002ee0 <MX_GPIO_Init+0x1bc>)
 8002eaa:	f001 fee5 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DI_OUT_1_P_Pin|LED_R_Pin|LED_G_Pin;
 8002eae:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eca:	f001 fed5 	bl	8004c78 <HAL_GPIO_Init>

}
 8002ece:	bf00      	nop
 8002ed0:	3728      	adds	r7, #40	; 0x28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	48000800 	.word	0x48000800
 8002ee0:	48000400 	.word	0x48000400
 8002ee4:	48001c00 	.word	0x48001c00

08002ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002eec:	f000 fad7 	bl	800349e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ef0:	f000 f81a 	bl	8002f28 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002ef4:	f000 f87b 	bl	8002fee <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ef8:	f7ff ff14 	bl	8002d24 <MX_GPIO_Init>
  MX_DMA_Init();
 8002efc:	f7ff fee4 	bl	8002cc8 <MX_DMA_Init>
  MX_ADC1_Init();
 8002f00:	f7ff fcd0 	bl	80028a4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8002f04:	f7ff fe08 	bl	8002b18 <MX_DAC1_Init>
  MX_SPI3_Init();
 8002f08:	f000 f8e6 	bl	80030d8 <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 8002f0c:	f009 ff68 	bl	800cde0 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8002f10:	f7ff fdc0 	bl	8002a94 <MX_CRC_Init>
  MX_TIM6_Init();
 8002f14:	f000 f9f4 	bl	8003300 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002f18:	f000 fa28 	bl	800336c <MX_TIM7_Init>


  /* USER CODE BEGIN 2 */

  appMain.Startup();
 8002f1c:	4801      	ldr	r0, [pc, #4]	; (8002f24 <main+0x3c>)
 8002f1e:	f7fd fb91 	bl	8000644 <_ZN7AppMain7StartupEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f22:	e7fe      	b.n	8002f22 <main+0x3a>
 8002f24:	20000320 	.word	0x20000320

08002f28 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b096      	sub	sp, #88	; 0x58
 8002f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f2e:	f107 0314 	add.w	r3, r7, #20
 8002f32:	2244      	movs	r2, #68	; 0x44
 8002f34:	2100      	movs	r1, #0
 8002f36:	4618      	mov	r0, r3
 8002f38:	f00a fd00 	bl	800d93c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f3c:	463b      	mov	r3, r7
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	605a      	str	r2, [r3, #4]
 8002f44:	609a      	str	r2, [r3, #8]
 8002f46:	60da      	str	r2, [r3, #12]
 8002f48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002f4a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002f4e:	f003 fdf1 	bl	8006b34 <HAL_PWREx_ControlVoltageScaling>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	bf14      	ite	ne
 8002f58:	2301      	movne	r3, #1
 8002f5a:	2300      	moveq	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8002f62:	f000 f895 	bl	8003090 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8002f66:	2330      	movs	r3, #48	; 0x30
 8002f68:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002f76:	2360      	movs	r3, #96	; 0x60
 8002f78:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002f82:	2301      	movs	r3, #1
 8002f84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8002f86:	2324      	movs	r3, #36	; 0x24
 8002f88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002f8a:	2307      	movs	r3, #7
 8002f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f92:	2302      	movs	r3, #2
 8002f94:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f96:	f107 0314 	add.w	r3, r7, #20
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f003 fe30 	bl	8006c00 <HAL_RCC_OscConfig>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bf14      	ite	ne
 8002fa6:	2301      	movne	r3, #1
 8002fa8:	2300      	moveq	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8002fb0:	f000 f86e 	bl	8003090 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fb4:	230f      	movs	r3, #15
 8002fb6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002fc8:	463b      	mov	r3, r7
 8002fca:	2104      	movs	r1, #4
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f004 fa2b 	bl	8007428 <HAL_RCC_ClockConfig>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf14      	ite	ne
 8002fd8:	2301      	movne	r3, #1
 8002fda:	2300      	moveq	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 8002fe2:	f000 f855 	bl	8003090 <Error_Handler>
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	3758      	adds	r7, #88	; 0x58
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b098      	sub	sp, #96	; 0x60
 8002ff2:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ff4:	463b      	mov	r3, r7
 8002ff6:	2260      	movs	r2, #96	; 0x60
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f00a fc9e 	bl	800d93c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8003000:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003004:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003006:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800300a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800300c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003010:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003012:	2301      	movs	r3, #1
 8003014:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003016:	2301      	movs	r3, #1
 8003018:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800301a:	2318      	movs	r3, #24
 800301c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800301e:	2307      	movs	r3, #7
 8003020:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003022:	2302      	movs	r3, #2
 8003024:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003026:	2302      	movs	r3, #2
 8003028:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800302a:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800302e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003030:	463b      	mov	r3, r7
 8003032:	4618      	mov	r0, r3
 8003034:	f004 fbf0 	bl	8007818 <HAL_RCCEx_PeriphCLKConfig>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	bf14      	ite	ne
 800303e:	2301      	movne	r3, #1
 8003040:	2300      	moveq	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <_Z24PeriphCommonClock_Configv+0x5e>
  {
    Error_Handler();
 8003048:	f000 f822 	bl	8003090 <Error_Handler>
  }
}
 800304c:	bf00      	nop
 800304e:	3760      	adds	r7, #96	; 0x60
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM7){
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a04      	ldr	r2, [pc, #16]	; (8003074 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d102      	bne.n	800306c <HAL_TIM_PeriodElapsedCallback+0x18>
		appMain.taskStatus.UpdateTasks();
 8003066:	4804      	ldr	r0, [pc, #16]	; (8003078 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003068:	f7ff fa7a 	bl	8002560 <_ZN11TaskHandler11UpdateTasksEv>
	}



}
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40001400 	.word	0x40001400
 8003078:	20000340 	.word	0x20000340

0800307c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003094:	b672      	cpsid	i
}
 8003096:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003098:	e7fe      	b.n	8003098 <Error_Handler+0x8>
	...

0800309c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d107      	bne.n	80030bc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d102      	bne.n	80030bc <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 80030b6:	4803      	ldr	r0, [pc, #12]	; (80030c4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80030b8:	f7fd fa69 	bl	800058e <_ZN7AppMainC1Ev>
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000320 	.word	0x20000320

080030c8 <_GLOBAL__sub_I_appMain>:
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030d0:	2001      	movs	r0, #1
 80030d2:	f7ff ffe3 	bl	800309c <_Z41__static_initialization_and_destruction_0ii>
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80030dc:	4b1b      	ldr	r3, [pc, #108]	; (800314c <MX_SPI3_Init+0x74>)
 80030de:	4a1c      	ldr	r2, [pc, #112]	; (8003150 <MX_SPI3_Init+0x78>)
 80030e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80030e2:	4b1a      	ldr	r3, [pc, #104]	; (800314c <MX_SPI3_Init+0x74>)
 80030e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80030ea:	4b18      	ldr	r3, [pc, #96]	; (800314c <MX_SPI3_Init+0x74>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80030f0:	4b16      	ldr	r3, [pc, #88]	; (800314c <MX_SPI3_Init+0x74>)
 80030f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80030f6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030f8:	4b14      	ldr	r3, [pc, #80]	; (800314c <MX_SPI3_Init+0x74>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030fe:	4b13      	ldr	r3, [pc, #76]	; (800314c <MX_SPI3_Init+0x74>)
 8003100:	2200      	movs	r2, #0
 8003102:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003104:	4b11      	ldr	r3, [pc, #68]	; (800314c <MX_SPI3_Init+0x74>)
 8003106:	f44f 7200 	mov.w	r2, #512	; 0x200
 800310a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800310c:	4b0f      	ldr	r3, [pc, #60]	; (800314c <MX_SPI3_Init+0x74>)
 800310e:	2218      	movs	r2, #24
 8003110:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <MX_SPI3_Init+0x74>)
 8003114:	2200      	movs	r2, #0
 8003116:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003118:	4b0c      	ldr	r3, [pc, #48]	; (800314c <MX_SPI3_Init+0x74>)
 800311a:	2200      	movs	r2, #0
 800311c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800311e:	4b0b      	ldr	r3, [pc, #44]	; (800314c <MX_SPI3_Init+0x74>)
 8003120:	2200      	movs	r2, #0
 8003122:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003124:	4b09      	ldr	r3, [pc, #36]	; (800314c <MX_SPI3_Init+0x74>)
 8003126:	2207      	movs	r2, #7
 8003128:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800312a:	4b08      	ldr	r3, [pc, #32]	; (800314c <MX_SPI3_Init+0x74>)
 800312c:	2200      	movs	r2, #0
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003130:	4b06      	ldr	r3, [pc, #24]	; (800314c <MX_SPI3_Init+0x74>)
 8003132:	2208      	movs	r2, #8
 8003134:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003136:	4805      	ldr	r0, [pc, #20]	; (800314c <MX_SPI3_Init+0x74>)
 8003138:	f004 feaa 	bl	8007e90 <HAL_SPI_Init>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003142:	f7ff ffa5 	bl	8003090 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003146:	bf00      	nop
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20000440 	.word	0x20000440
 8003150:	40003c00 	.word	0x40003c00

08003154 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08a      	sub	sp, #40	; 0x28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800315c:	f107 0314 	add.w	r3, r7, #20
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a17      	ldr	r2, [pc, #92]	; (80031d0 <HAL_SPI_MspInit+0x7c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d128      	bne.n	80031c8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003176:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <HAL_SPI_MspInit+0x80>)
 8003178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317a:	4a16      	ldr	r2, [pc, #88]	; (80031d4 <HAL_SPI_MspInit+0x80>)
 800317c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003180:	6593      	str	r3, [r2, #88]	; 0x58
 8003182:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <HAL_SPI_MspInit+0x80>)
 8003184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800318e:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <HAL_SPI_MspInit+0x80>)
 8003190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003192:	4a10      	ldr	r2, [pc, #64]	; (80031d4 <HAL_SPI_MspInit+0x80>)
 8003194:	f043 0304 	orr.w	r3, r3, #4
 8003198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800319a:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <HAL_SPI_MspInit+0x80>)
 800319c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80031a6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80031aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ac:	2302      	movs	r3, #2
 80031ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b4:	2303      	movs	r3, #3
 80031b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031b8:	2306      	movs	r3, #6
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031bc:	f107 0314 	add.w	r3, r7, #20
 80031c0:	4619      	mov	r1, r3
 80031c2:	4805      	ldr	r0, [pc, #20]	; (80031d8 <HAL_SPI_MspInit+0x84>)
 80031c4:	f001 fd58 	bl	8004c78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80031c8:	bf00      	nop
 80031ca:	3728      	adds	r7, #40	; 0x28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40003c00 	.word	0x40003c00
 80031d4:	40021000 	.word	0x40021000
 80031d8:	48000800 	.word	0x48000800

080031dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e2:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <HAL_MspInit+0x44>)
 80031e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e6:	4a0e      	ldr	r2, [pc, #56]	; (8003220 <HAL_MspInit+0x44>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	6613      	str	r3, [r2, #96]	; 0x60
 80031ee:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <HAL_MspInit+0x44>)
 80031f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	607b      	str	r3, [r7, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_MspInit+0x44>)
 80031fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fe:	4a08      	ldr	r2, [pc, #32]	; (8003220 <HAL_MspInit+0x44>)
 8003200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003204:	6593      	str	r3, [r2, #88]	; 0x58
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_MspInit+0x44>)
 8003208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000

08003224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003228:	e7fe      	b.n	8003228 <NMI_Handler+0x4>

0800322a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800322a:	b480      	push	{r7}
 800322c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800322e:	e7fe      	b.n	800322e <HardFault_Handler+0x4>

08003230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003234:	e7fe      	b.n	8003234 <MemManage_Handler+0x4>

08003236 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003236:	b480      	push	{r7}
 8003238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800323a:	e7fe      	b.n	800323a <BusFault_Handler+0x4>

0800323c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003240:	e7fe      	b.n	8003240 <UsageFault_Handler+0x4>

08003242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003242:	b480      	push	{r7}
 8003244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003246:	bf00      	nop
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800325e:	b480      	push	{r7}
 8003260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003270:	f000 f96a 	bl	8003548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003274:	bf00      	nop
 8003276:	bd80      	pop	{r7, pc}

08003278 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800327c:	4802      	ldr	r0, [pc, #8]	; (8003288 <DMA1_Channel1_IRQHandler+0x10>)
 800327e:	f001 fc4b 	bl	8004b18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000210 	.word	0x20000210

0800328c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8003290:	4802      	ldr	r0, [pc, #8]	; (800329c <DMA1_Channel3_IRQHandler+0x10>)
 8003292:	f001 fc41 	bl	8004b18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003296:	bf00      	nop
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20000290 	.word	0x20000290

080032a0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80032a4:	4802      	ldr	r0, [pc, #8]	; (80032b0 <DMA1_Channel4_IRQHandler+0x10>)
 80032a6:	f001 fc37 	bl	8004b18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	200002d8 	.word	0x200002d8

080032b4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80032b8:	4802      	ldr	r0, [pc, #8]	; (80032c4 <TIM7_IRQHandler+0x10>)
 80032ba:	f005 fc1d 	bl	8008af8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	200004f0 	.word	0x200004f0

080032c8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80032cc:	4802      	ldr	r0, [pc, #8]	; (80032d8 <USB_IRQHandler+0x10>)
 80032ce:	f001 ffd0 	bl	8005272 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	200011e4 	.word	0x200011e4

080032dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80032e0:	4b06      	ldr	r3, [pc, #24]	; (80032fc <SystemInit+0x20>)
 80032e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e6:	4a05      	ldr	r2, [pc, #20]	; (80032fc <SystemInit+0x20>)
 80032e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80032f0:	bf00      	nop
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003306:	1d3b      	adds	r3, r7, #4
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003310:	4b14      	ldr	r3, [pc, #80]	; (8003364 <MX_TIM6_Init+0x64>)
 8003312:	4a15      	ldr	r2, [pc, #84]	; (8003368 <MX_TIM6_Init+0x68>)
 8003314:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8003316:	4b13      	ldr	r3, [pc, #76]	; (8003364 <MX_TIM6_Init+0x64>)
 8003318:	220a      	movs	r2, #10
 800331a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800331c:	4b11      	ldr	r3, [pc, #68]	; (8003364 <MX_TIM6_Init+0x64>)
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16000;
 8003322:	4b10      	ldr	r3, [pc, #64]	; (8003364 <MX_TIM6_Init+0x64>)
 8003324:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003328:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800332a:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <MX_TIM6_Init+0x64>)
 800332c:	2200      	movs	r2, #0
 800332e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003330:	480c      	ldr	r0, [pc, #48]	; (8003364 <MX_TIM6_Init+0x64>)
 8003332:	f005 fb35 	bl	80089a0 <HAL_TIM_Base_Init>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800333c:	f7ff fea8 	bl	8003090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003340:	2300      	movs	r3, #0
 8003342:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003348:	1d3b      	adds	r3, r7, #4
 800334a:	4619      	mov	r1, r3
 800334c:	4805      	ldr	r0, [pc, #20]	; (8003364 <MX_TIM6_Init+0x64>)
 800334e:	f005 fd75 	bl	8008e3c <HAL_TIMEx_MasterConfigSynchronization>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003358:	f7ff fe9a 	bl	8003090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800335c:	bf00      	nop
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	200004a4 	.word	0x200004a4
 8003368:	40001000 	.word	0x40001000

0800336c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003372:	1d3b      	adds	r3, r7, #4
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800337c:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <MX_TIM7_Init+0x64>)
 800337e:	4a15      	ldr	r2, [pc, #84]	; (80033d4 <MX_TIM7_Init+0x68>)
 8003380:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10;
 8003382:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <MX_TIM7_Init+0x64>)
 8003384:	220a      	movs	r2, #10
 8003386:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003388:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <MX_TIM7_Init+0x64>)
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7199;
 800338e:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <MX_TIM7_Init+0x64>)
 8003390:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003394:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003396:	4b0e      	ldr	r3, [pc, #56]	; (80033d0 <MX_TIM7_Init+0x64>)
 8003398:	2200      	movs	r2, #0
 800339a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800339c:	480c      	ldr	r0, [pc, #48]	; (80033d0 <MX_TIM7_Init+0x64>)
 800339e:	f005 faff 	bl	80089a0 <HAL_TIM_Base_Init>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80033a8:	f7ff fe72 	bl	8003090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80033ac:	2320      	movs	r3, #32
 80033ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80033b4:	1d3b      	adds	r3, r7, #4
 80033b6:	4619      	mov	r1, r3
 80033b8:	4805      	ldr	r0, [pc, #20]	; (80033d0 <MX_TIM7_Init+0x64>)
 80033ba:	f005 fd3f 	bl	8008e3c <HAL_TIMEx_MasterConfigSynchronization>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80033c4:	f7ff fe64 	bl	8003090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80033c8:	bf00      	nop
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	200004f0 	.word	0x200004f0
 80033d4:	40001400 	.word	0x40001400

080033d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a16      	ldr	r2, [pc, #88]	; (8003440 <HAL_TIM_Base_MspInit+0x68>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d10c      	bne.n	8003404 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80033ea:	4b16      	ldr	r3, [pc, #88]	; (8003444 <HAL_TIM_Base_MspInit+0x6c>)
 80033ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ee:	4a15      	ldr	r2, [pc, #84]	; (8003444 <HAL_TIM_Base_MspInit+0x6c>)
 80033f0:	f043 0310 	orr.w	r3, r3, #16
 80033f4:	6593      	str	r3, [r2, #88]	; 0x58
 80033f6:	4b13      	ldr	r3, [pc, #76]	; (8003444 <HAL_TIM_Base_MspInit+0x6c>)
 80033f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003402:	e018      	b.n	8003436 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a0f      	ldr	r2, [pc, #60]	; (8003448 <HAL_TIM_Base_MspInit+0x70>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d113      	bne.n	8003436 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800340e:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <HAL_TIM_Base_MspInit+0x6c>)
 8003410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003412:	4a0c      	ldr	r2, [pc, #48]	; (8003444 <HAL_TIM_Base_MspInit+0x6c>)
 8003414:	f043 0320 	orr.w	r3, r3, #32
 8003418:	6593      	str	r3, [r2, #88]	; 0x58
 800341a:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <HAL_TIM_Base_MspInit+0x6c>)
 800341c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003426:	2200      	movs	r2, #0
 8003428:	2100      	movs	r1, #0
 800342a:	2037      	movs	r0, #55	; 0x37
 800342c:	f001 f85f 	bl	80044ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003430:	2037      	movs	r0, #55	; 0x37
 8003432:	f001 f878 	bl	8004526 <HAL_NVIC_EnableIRQ>
}
 8003436:	bf00      	nop
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40001000 	.word	0x40001000
 8003444:	40021000 	.word	0x40021000
 8003448:	40001400 	.word	0x40001400

0800344c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800344c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003484 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003450:	f7ff ff44 	bl	80032dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003454:	480c      	ldr	r0, [pc, #48]	; (8003488 <LoopForever+0x6>)
  ldr r1, =_edata
 8003456:	490d      	ldr	r1, [pc, #52]	; (800348c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003458:	4a0d      	ldr	r2, [pc, #52]	; (8003490 <LoopForever+0xe>)
  movs r3, #0
 800345a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800345c:	e002      	b.n	8003464 <LoopCopyDataInit>

0800345e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800345e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003462:	3304      	adds	r3, #4

08003464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003468:	d3f9      	bcc.n	800345e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800346a:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <LoopForever+0x12>)
  ldr r4, =_ebss
 800346c:	4c0a      	ldr	r4, [pc, #40]	; (8003498 <LoopForever+0x16>)
  movs r3, #0
 800346e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003470:	e001      	b.n	8003476 <LoopFillZerobss>

08003472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003474:	3204      	adds	r2, #4

08003476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003478:	d3fb      	bcc.n	8003472 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800347a:	f00a fa3b 	bl	800d8f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800347e:	f7ff fd33 	bl	8002ee8 <main>

08003482 <LoopForever>:

LoopForever:
    b LoopForever
 8003482:	e7fe      	b.n	8003482 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003484:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800348c:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8003490:	0800da1c 	.word	0x0800da1c
  ldr r2, =_sbss
 8003494:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8003498:	20001700 	.word	0x20001700

0800349c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800349c:	e7fe      	b.n	800349c <ADC1_IRQHandler>

0800349e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034a8:	2003      	movs	r0, #3
 80034aa:	f001 f815 	bl	80044d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034ae:	200f      	movs	r0, #15
 80034b0:	f000 f80e 	bl	80034d0 <HAL_InitTick>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	71fb      	strb	r3, [r7, #7]
 80034be:	e001      	b.n	80034c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034c0:	f7ff fe8c 	bl	80031dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034c4:	79fb      	ldrb	r3, [r7, #7]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80034dc:	4b17      	ldr	r3, [pc, #92]	; (800353c <HAL_InitTick+0x6c>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d023      	beq.n	800352c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80034e4:	4b16      	ldr	r3, [pc, #88]	; (8003540 <HAL_InitTick+0x70>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	4b14      	ldr	r3, [pc, #80]	; (800353c <HAL_InitTick+0x6c>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	4619      	mov	r1, r3
 80034ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80034f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fa:	4618      	mov	r0, r3
 80034fc:	f001 f821 	bl	8004542 <HAL_SYSTICK_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10f      	bne.n	8003526 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b0f      	cmp	r3, #15
 800350a:	d809      	bhi.n	8003520 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800350c:	2200      	movs	r2, #0
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	f04f 30ff 	mov.w	r0, #4294967295
 8003514:	f000 ffeb 	bl	80044ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003518:	4a0a      	ldr	r2, [pc, #40]	; (8003544 <HAL_InitTick+0x74>)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	e007      	b.n	8003530 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
 8003524:	e004      	b.n	8003530 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
 800352a:	e001      	b.n	8003530 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003530:	7bfb      	ldrb	r3, [r7, #15]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000008 	.word	0x20000008
 8003540:	20000000 	.word	0x20000000
 8003544:	20000004 	.word	0x20000004

08003548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_IncTick+0x20>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_IncTick+0x24>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4413      	add	r3, r2
 8003558:	4a04      	ldr	r2, [pc, #16]	; (800356c <HAL_IncTick+0x24>)
 800355a:	6013      	str	r3, [r2, #0]
}
 800355c:	bf00      	nop
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	20000008 	.word	0x20000008
 800356c:	2000053c 	.word	0x2000053c

08003570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return uwTick;
 8003574:	4b03      	ldr	r3, [pc, #12]	; (8003584 <HAL_GetTick+0x14>)
 8003576:	681b      	ldr	r3, [r3, #0]
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	2000053c 	.word	0x2000053c

08003588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003590:	f7ff ffee 	bl	8003570 <HAL_GetTick>
 8003594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d005      	beq.n	80035ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80035a2:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <HAL_Delay+0x44>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4413      	add	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035ae:	bf00      	nop
 80035b0:	f7ff ffde 	bl	8003570 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d8f7      	bhi.n	80035b0 <HAL_Delay+0x28>
  {
  }
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000008 	.word	0x20000008

080035d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	609a      	str	r2, [r3, #8]
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	609a      	str	r2, [r3, #8]
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800362c:	4618      	mov	r0, r3
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	3360      	adds	r3, #96	; 0x60
 800364a:	461a      	mov	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4b08      	ldr	r3, [pc, #32]	; (800367c <LL_ADC_SetOffset+0x44>)
 800365a:	4013      	ands	r3, r2
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	4313      	orrs	r3, r2
 8003668:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003670:	bf00      	nop
 8003672:	371c      	adds	r7, #28
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	03fff000 	.word	0x03fff000

08003680 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3360      	adds	r3, #96	; 0x60
 800368e:	461a      	mov	r2, r3
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3360      	adds	r3, #96	; 0x60
 80036bc:	461a      	mov	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	431a      	orrs	r2, r3
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b087      	sub	sp, #28
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	3330      	adds	r3, #48	; 0x30
 80036f2:	461a      	mov	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	0a1b      	lsrs	r3, r3, #8
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	4413      	add	r3, r2
 8003700:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	211f      	movs	r1, #31
 800370e:	fa01 f303 	lsl.w	r3, r1, r3
 8003712:	43db      	mvns	r3, r3
 8003714:	401a      	ands	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	0e9b      	lsrs	r3, r3, #26
 800371a:	f003 011f 	and.w	r1, r3, #31
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	fa01 f303 	lsl.w	r3, r1, r3
 8003728:	431a      	orrs	r2, r3
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800373a:	b480      	push	{r7}
 800373c:	b087      	sub	sp, #28
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	3314      	adds	r3, #20
 800374a:	461a      	mov	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	0e5b      	lsrs	r3, r3, #25
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	4413      	add	r3, r2
 8003758:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	0d1b      	lsrs	r3, r3, #20
 8003762:	f003 031f 	and.w	r3, r3, #31
 8003766:	2107      	movs	r1, #7
 8003768:	fa01 f303 	lsl.w	r3, r1, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	401a      	ands	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	0d1b      	lsrs	r3, r3, #20
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	fa01 f303 	lsl.w	r3, r1, r3
 800377e:	431a      	orrs	r2, r3
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003784:	bf00      	nop
 8003786:	371c      	adds	r7, #28
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a8:	43db      	mvns	r3, r3
 80037aa:	401a      	ands	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f003 0318 	and.w	r3, r3, #24
 80037b2:	4908      	ldr	r1, [pc, #32]	; (80037d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80037b4:	40d9      	lsrs	r1, r3
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	400b      	ands	r3, r1
 80037ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037be:	431a      	orrs	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	0007ffff 	.word	0x0007ffff

080037d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80037e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6093      	str	r3, [r2, #8]
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800380c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003810:	d101      	bne.n	8003816 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003834:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003838:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003860:	d101      	bne.n	8003866 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <LL_ADC_IsEnabled+0x18>
 8003888:	2301      	movs	r3, #1
 800388a:	e000      	b.n	800388e <LL_ADC_IsEnabled+0x1a>
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d101      	bne.n	80038b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d101      	bne.n	80038d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e12c      	b.n	8003b5c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	2b00      	cmp	r3, #0
 800390e:	d109      	bne.n	8003924 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff f82b 	bl	800296c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff ff67 	bl	80037fc <LL_ADC_IsDeepPowerDownEnabled>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d004      	beq.n	800393e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff ff4d 	bl	80037d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff ff82 	bl	800384c <LL_ADC_IsInternalRegulatorEnabled>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d115      	bne.n	800397a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff ff66 	bl	8003824 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003958:	4b82      	ldr	r3, [pc, #520]	; (8003b64 <HAL_ADC_Init+0x27c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	099b      	lsrs	r3, r3, #6
 800395e:	4a82      	ldr	r2, [pc, #520]	; (8003b68 <HAL_ADC_Init+0x280>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	099b      	lsrs	r3, r3, #6
 8003966:	3301      	adds	r3, #1
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800396c:	e002      	b.n	8003974 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	3b01      	subs	r3, #1
 8003972:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f9      	bne.n	800396e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff ff64 	bl	800384c <LL_ADC_IsInternalRegulatorEnabled>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10d      	bne.n	80039a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398e:	f043 0210 	orr.w	r2, r3, #16
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399a:	f043 0201 	orr.w	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff ff75 	bl	800389a <LL_ADC_REG_IsConversionOngoing>
 80039b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b6:	f003 0310 	and.w	r3, r3, #16
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f040 80c5 	bne.w	8003b4a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f040 80c1 	bne.w	8003b4a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80039d0:	f043 0202 	orr.w	r2, r3, #2
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff ff49 	bl	8003874 <LL_ADC_IsEnabled>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10b      	bne.n	8003a00 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039e8:	4860      	ldr	r0, [pc, #384]	; (8003b6c <HAL_ADC_Init+0x284>)
 80039ea:	f7ff ff43 	bl	8003874 <LL_ADC_IsEnabled>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d105      	bne.n	8003a00 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	4619      	mov	r1, r3
 80039fa:	485d      	ldr	r0, [pc, #372]	; (8003b70 <HAL_ADC_Init+0x288>)
 80039fc:	f7ff fde8 	bl	80035d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	7e5b      	ldrb	r3, [r3, #25]
 8003a04:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a0a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003a10:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003a16:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a1e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a20:	4313      	orrs	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d106      	bne.n	8003a3c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	3b01      	subs	r3, #1
 8003a34:	045b      	lsls	r3, r3, #17
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d009      	beq.n	8003a58 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	4b45      	ldr	r3, [pc, #276]	; (8003b74 <HAL_ADC_Init+0x28c>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6812      	ldr	r2, [r2, #0]
 8003a66:	69b9      	ldr	r1, [r7, #24]
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff ff12 	bl	800389a <LL_ADC_REG_IsConversionOngoing>
 8003a76:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff ff1f 	bl	80038c0 <LL_ADC_INJ_IsConversionOngoing>
 8003a82:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d13d      	bne.n	8003b06 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d13a      	bne.n	8003b06 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a94:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a9c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aac:	f023 0302 	bic.w	r3, r3, #2
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	69b9      	ldr	r1, [r7, #24]
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d118      	bne.n	8003af6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003ace:	f023 0304 	bic.w	r3, r3, #4
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ada:	4311      	orrs	r1, r2
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003ae0:	4311      	orrs	r1, r2
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	611a      	str	r2, [r3, #16]
 8003af4:	e007      	b.n	8003b06 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0201 	bic.w	r2, r2, #1
 8003b04:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d10c      	bne.n	8003b28 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b14:	f023 010f 	bic.w	r1, r3, #15
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	1e5a      	subs	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30
 8003b26:	e007      	b.n	8003b38 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 020f 	bic.w	r2, r2, #15
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3c:	f023 0303 	bic.w	r3, r3, #3
 8003b40:	f043 0201 	orr.w	r2, r3, #1
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	655a      	str	r2, [r3, #84]	; 0x54
 8003b48:	e007      	b.n	8003b5a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4e:	f043 0210 	orr.w	r2, r3, #16
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20000000 	.word	0x20000000
 8003b68:	053e2d63 	.word	0x053e2d63
 8003b6c:	50040000 	.word	0x50040000
 8003b70:	50040300 	.word	0x50040300
 8003b74:	fff0c007 	.word	0xfff0c007

08003b78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b0b6      	sub	sp, #216	; 0xd8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_ADC_ConfigChannel+0x22>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e3b9      	b.n	800430e <HAL_ADC_ConfigChannel+0x796>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff fe77 	bl	800389a <LL_ADC_REG_IsConversionOngoing>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f040 839e 	bne.w	80042f0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b05      	cmp	r3, #5
 8003bba:	d824      	bhi.n	8003c06 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	3b02      	subs	r3, #2
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d81b      	bhi.n	8003bfe <HAL_ADC_ConfigChannel+0x86>
 8003bc6:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <HAL_ADC_ConfigChannel+0x54>)
 8003bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bcc:	08003bdd 	.word	0x08003bdd
 8003bd0:	08003be5 	.word	0x08003be5
 8003bd4:	08003bed 	.word	0x08003bed
 8003bd8:	08003bf5 	.word	0x08003bf5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	220c      	movs	r2, #12
 8003be0:	605a      	str	r2, [r3, #4]
          break;
 8003be2:	e011      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2212      	movs	r2, #18
 8003be8:	605a      	str	r2, [r3, #4]
          break;
 8003bea:	e00d      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2218      	movs	r2, #24
 8003bf0:	605a      	str	r2, [r3, #4]
          break;
 8003bf2:	e009      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bfa:	605a      	str	r2, [r3, #4]
          break;
 8003bfc:	e004      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2206      	movs	r2, #6
 8003c02:	605a      	str	r2, [r3, #4]
          break;
 8003c04:	e000      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003c06:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	6859      	ldr	r1, [r3, #4]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	f7ff fd64 	bl	80036e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff fe3b 	bl	800389a <LL_ADC_REG_IsConversionOngoing>
 8003c24:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff fe47 	bl	80038c0 <LL_ADC_INJ_IsConversionOngoing>
 8003c32:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f040 81a6 	bne.w	8003f8c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f040 81a1 	bne.w	8003f8c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	6819      	ldr	r1, [r3, #0]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	461a      	mov	r2, r3
 8003c58:	f7ff fd6f 	bl	800373a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	695a      	ldr	r2, [r3, #20]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	08db      	lsrs	r3, r3, #3
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d00a      	beq.n	8003c94 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	6919      	ldr	r1, [r3, #16]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c8e:	f7ff fcd3 	bl	8003638 <LL_ADC_SetOffset>
 8003c92:	e17b      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff fcf0 	bl	8003680 <LL_ADC_GetOffsetChannel>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10a      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x148>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2100      	movs	r1, #0
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fce5 	bl	8003680 <LL_ADC_GetOffsetChannel>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	0e9b      	lsrs	r3, r3, #26
 8003cba:	f003 021f 	and.w	r2, r3, #31
 8003cbe:	e01e      	b.n	8003cfe <HAL_ADC_ConfigChannel+0x186>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff fcda 	bl	8003680 <LL_ADC_GetOffsetChannel>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003cde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ce2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ce6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003cee:	2320      	movs	r3, #32
 8003cf0:	e004      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003cf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cf6:	fab3 f383 	clz	r3, r3
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d105      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x19e>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	0e9b      	lsrs	r3, r3, #26
 8003d10:	f003 031f 	and.w	r3, r3, #31
 8003d14:	e018      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x1d0>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d22:	fa93 f3a3 	rbit	r3, r3
 8003d26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003d2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003d32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003d3a:	2320      	movs	r3, #32
 8003d3c:	e004      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003d3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d42:	fab3 f383 	clz	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d106      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2200      	movs	r2, #0
 8003d52:	2100      	movs	r1, #0
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff fca9 	bl	80036ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2101      	movs	r1, #1
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fc8d 	bl	8003680 <LL_ADC_GetOffsetChannel>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10a      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x20e>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2101      	movs	r1, #1
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff fc82 	bl	8003680 <LL_ADC_GetOffsetChannel>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	0e9b      	lsrs	r3, r3, #26
 8003d80:	f003 021f 	and.w	r2, r3, #31
 8003d84:	e01e      	b.n	8003dc4 <HAL_ADC_ConfigChannel+0x24c>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fc77 	bl	8003680 <LL_ADC_GetOffsetChannel>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d9c:	fa93 f3a3 	rbit	r3, r3
 8003da0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003da4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003da8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003db4:	2320      	movs	r3, #32
 8003db6:	e004      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003db8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003dbc:	fab3 f383 	clz	r3, r3
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d105      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x264>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	0e9b      	lsrs	r3, r3, #26
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	e018      	b.n	8003e0e <HAL_ADC_ConfigChannel+0x296>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003de8:	fa93 f3a3 	rbit	r3, r3
 8003dec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003df0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003df4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003df8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003e00:	2320      	movs	r3, #32
 8003e02:	e004      	b.n	8003e0e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e08:	fab3 f383 	clz	r3, r3
 8003e0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d106      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2200      	movs	r2, #0
 8003e18:	2101      	movs	r1, #1
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff fc46 	bl	80036ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2102      	movs	r1, #2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff fc2a 	bl	8003680 <LL_ADC_GetOffsetChannel>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10a      	bne.n	8003e4c <HAL_ADC_ConfigChannel+0x2d4>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2102      	movs	r1, #2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff fc1f 	bl	8003680 <LL_ADC_GetOffsetChannel>
 8003e42:	4603      	mov	r3, r0
 8003e44:	0e9b      	lsrs	r3, r3, #26
 8003e46:	f003 021f 	and.w	r2, r3, #31
 8003e4a:	e01e      	b.n	8003e8a <HAL_ADC_ConfigChannel+0x312>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2102      	movs	r1, #2
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff fc14 	bl	8003680 <LL_ADC_GetOffsetChannel>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e62:	fa93 f3a3 	rbit	r3, r3
 8003e66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003e6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003e7a:	2320      	movs	r3, #32
 8003e7c:	e004      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003e7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e82:	fab3 f383 	clz	r3, r3
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d105      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x32a>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	0e9b      	lsrs	r3, r3, #26
 8003e9c:	f003 031f 	and.w	r3, r3, #31
 8003ea0:	e016      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x358>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003eae:	fa93 f3a3 	rbit	r3, r3
 8003eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003eb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003eb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003eba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003ec2:	2320      	movs	r3, #32
 8003ec4:	e004      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003ec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003eca:	fab3 f383 	clz	r3, r3
 8003ece:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d106      	bne.n	8003ee2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2102      	movs	r1, #2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff fbe5 	bl	80036ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2103      	movs	r1, #3
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff fbc9 	bl	8003680 <LL_ADC_GetOffsetChannel>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10a      	bne.n	8003f0e <HAL_ADC_ConfigChannel+0x396>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2103      	movs	r1, #3
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff fbbe 	bl	8003680 <LL_ADC_GetOffsetChannel>
 8003f04:	4603      	mov	r3, r0
 8003f06:	0e9b      	lsrs	r3, r3, #26
 8003f08:	f003 021f 	and.w	r2, r3, #31
 8003f0c:	e017      	b.n	8003f3e <HAL_ADC_ConfigChannel+0x3c6>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2103      	movs	r1, #3
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff fbb3 	bl	8003680 <LL_ADC_GetOffsetChannel>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f20:	fa93 f3a3 	rbit	r3, r3
 8003f24:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f28:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003f30:	2320      	movs	r3, #32
 8003f32:	e003      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f36:	fab3 f383 	clz	r3, r3
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d105      	bne.n	8003f56 <HAL_ADC_ConfigChannel+0x3de>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	0e9b      	lsrs	r3, r3, #26
 8003f50:	f003 031f 	and.w	r3, r3, #31
 8003f54:	e011      	b.n	8003f7a <HAL_ADC_ConfigChannel+0x402>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f5e:	fa93 f3a3 	rbit	r3, r3
 8003f62:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f66:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003f6e:	2320      	movs	r3, #32
 8003f70:	e003      	b.n	8003f7a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f74:	fab3 f383 	clz	r3, r3
 8003f78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d106      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2200      	movs	r2, #0
 8003f84:	2103      	movs	r1, #3
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff fb90 	bl	80036ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff fc6f 	bl	8003874 <LL_ADC_IsEnabled>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f040 813f 	bne.w	800421c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6819      	ldr	r1, [r3, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	461a      	mov	r2, r3
 8003fac:	f7ff fbf0 	bl	8003790 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4a8e      	ldr	r2, [pc, #568]	; (80041f0 <HAL_ADC_ConfigChannel+0x678>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	f040 8130 	bne.w	800421c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10b      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x46c>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	0e9b      	lsrs	r3, r3, #26
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	f003 031f 	and.w	r3, r3, #31
 8003fd8:	2b09      	cmp	r3, #9
 8003fda:	bf94      	ite	ls
 8003fdc:	2301      	movls	r3, #1
 8003fde:	2300      	movhi	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	e019      	b.n	8004018 <HAL_ADC_ConfigChannel+0x4a0>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fec:	fa93 f3a3 	rbit	r3, r3
 8003ff0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ff4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003ffc:	2320      	movs	r3, #32
 8003ffe:	e003      	b.n	8004008 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004000:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004002:	fab3 f383 	clz	r3, r3
 8004006:	b2db      	uxtb	r3, r3
 8004008:	3301      	adds	r3, #1
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	2b09      	cmp	r3, #9
 8004010:	bf94      	ite	ls
 8004012:	2301      	movls	r3, #1
 8004014:	2300      	movhi	r3, #0
 8004016:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004018:	2b00      	cmp	r3, #0
 800401a:	d079      	beq.n	8004110 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004024:	2b00      	cmp	r3, #0
 8004026:	d107      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x4c0>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	0e9b      	lsrs	r3, r3, #26
 800402e:	3301      	adds	r3, #1
 8004030:	069b      	lsls	r3, r3, #26
 8004032:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004036:	e015      	b.n	8004064 <HAL_ADC_ConfigChannel+0x4ec>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004040:	fa93 f3a3 	rbit	r3, r3
 8004044:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004048:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800404a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004050:	2320      	movs	r3, #32
 8004052:	e003      	b.n	800405c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004056:	fab3 f383 	clz	r3, r3
 800405a:	b2db      	uxtb	r3, r3
 800405c:	3301      	adds	r3, #1
 800405e:	069b      	lsls	r3, r3, #26
 8004060:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800406c:	2b00      	cmp	r3, #0
 800406e:	d109      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x50c>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	0e9b      	lsrs	r3, r3, #26
 8004076:	3301      	adds	r3, #1
 8004078:	f003 031f 	and.w	r3, r3, #31
 800407c:	2101      	movs	r1, #1
 800407e:	fa01 f303 	lsl.w	r3, r1, r3
 8004082:	e017      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x53c>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800408c:	fa93 f3a3 	rbit	r3, r3
 8004090:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004094:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800409c:	2320      	movs	r3, #32
 800409e:	e003      	b.n	80040a8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80040a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040a2:	fab3 f383 	clz	r3, r3
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	3301      	adds	r3, #1
 80040aa:	f003 031f 	and.w	r3, r3, #31
 80040ae:	2101      	movs	r1, #1
 80040b0:	fa01 f303 	lsl.w	r3, r1, r3
 80040b4:	ea42 0103 	orr.w	r1, r2, r3
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10a      	bne.n	80040da <HAL_ADC_ConfigChannel+0x562>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	0e9b      	lsrs	r3, r3, #26
 80040ca:	3301      	adds	r3, #1
 80040cc:	f003 021f 	and.w	r2, r3, #31
 80040d0:	4613      	mov	r3, r2
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	4413      	add	r3, r2
 80040d6:	051b      	lsls	r3, r3, #20
 80040d8:	e018      	b.n	800410c <HAL_ADC_ConfigChannel+0x594>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e2:	fa93 f3a3 	rbit	r3, r3
 80040e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80040e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80040ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80040f2:	2320      	movs	r3, #32
 80040f4:	e003      	b.n	80040fe <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80040f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f8:	fab3 f383 	clz	r3, r3
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	3301      	adds	r3, #1
 8004100:	f003 021f 	and.w	r2, r3, #31
 8004104:	4613      	mov	r3, r2
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	4413      	add	r3, r2
 800410a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800410c:	430b      	orrs	r3, r1
 800410e:	e080      	b.n	8004212 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004118:	2b00      	cmp	r3, #0
 800411a:	d107      	bne.n	800412c <HAL_ADC_ConfigChannel+0x5b4>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	0e9b      	lsrs	r3, r3, #26
 8004122:	3301      	adds	r3, #1
 8004124:	069b      	lsls	r3, r3, #26
 8004126:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800412a:	e015      	b.n	8004158 <HAL_ADC_ConfigChannel+0x5e0>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004134:	fa93 f3a3 	rbit	r3, r3
 8004138:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004144:	2320      	movs	r3, #32
 8004146:	e003      	b.n	8004150 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	fab3 f383 	clz	r3, r3
 800414e:	b2db      	uxtb	r3, r3
 8004150:	3301      	adds	r3, #1
 8004152:	069b      	lsls	r3, r3, #26
 8004154:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004160:	2b00      	cmp	r3, #0
 8004162:	d109      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x600>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	0e9b      	lsrs	r3, r3, #26
 800416a:	3301      	adds	r3, #1
 800416c:	f003 031f 	and.w	r3, r3, #31
 8004170:	2101      	movs	r1, #1
 8004172:	fa01 f303 	lsl.w	r3, r1, r3
 8004176:	e017      	b.n	80041a8 <HAL_ADC_ConfigChannel+0x630>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	fa93 f3a3 	rbit	r3, r3
 8004184:	61fb      	str	r3, [r7, #28]
  return result;
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004190:	2320      	movs	r3, #32
 8004192:	e003      	b.n	800419c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	fab3 f383 	clz	r3, r3
 800419a:	b2db      	uxtb	r3, r3
 800419c:	3301      	adds	r3, #1
 800419e:	f003 031f 	and.w	r3, r3, #31
 80041a2:	2101      	movs	r1, #1
 80041a4:	fa01 f303 	lsl.w	r3, r1, r3
 80041a8:	ea42 0103 	orr.w	r1, r2, r3
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10d      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x65c>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	0e9b      	lsrs	r3, r3, #26
 80041be:	3301      	adds	r3, #1
 80041c0:	f003 021f 	and.w	r2, r3, #31
 80041c4:	4613      	mov	r3, r2
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	4413      	add	r3, r2
 80041ca:	3b1e      	subs	r3, #30
 80041cc:	051b      	lsls	r3, r3, #20
 80041ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041d2:	e01d      	b.n	8004210 <HAL_ADC_ConfigChannel+0x698>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	fa93 f3a3 	rbit	r3, r3
 80041e0:	613b      	str	r3, [r7, #16]
  return result;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d103      	bne.n	80041f4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80041ec:	2320      	movs	r3, #32
 80041ee:	e005      	b.n	80041fc <HAL_ADC_ConfigChannel+0x684>
 80041f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	fab3 f383 	clz	r3, r3
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	3301      	adds	r3, #1
 80041fe:	f003 021f 	and.w	r2, r3, #31
 8004202:	4613      	mov	r3, r2
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	4413      	add	r3, r2
 8004208:	3b1e      	subs	r3, #30
 800420a:	051b      	lsls	r3, r3, #20
 800420c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004210:	430b      	orrs	r3, r1
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	6892      	ldr	r2, [r2, #8]
 8004216:	4619      	mov	r1, r3
 8004218:	f7ff fa8f 	bl	800373a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	4b3d      	ldr	r3, [pc, #244]	; (8004318 <HAL_ADC_ConfigChannel+0x7a0>)
 8004222:	4013      	ands	r3, r2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d06c      	beq.n	8004302 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004228:	483c      	ldr	r0, [pc, #240]	; (800431c <HAL_ADC_ConfigChannel+0x7a4>)
 800422a:	f7ff f9f7 	bl	800361c <LL_ADC_GetCommonPathInternalCh>
 800422e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a3a      	ldr	r2, [pc, #232]	; (8004320 <HAL_ADC_ConfigChannel+0x7a8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d127      	bne.n	800428c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800423c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004240:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d121      	bne.n	800428c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a35      	ldr	r2, [pc, #212]	; (8004324 <HAL_ADC_ConfigChannel+0x7ac>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d157      	bne.n	8004302 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004252:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004256:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800425a:	4619      	mov	r1, r3
 800425c:	482f      	ldr	r0, [pc, #188]	; (800431c <HAL_ADC_ConfigChannel+0x7a4>)
 800425e:	f7ff f9ca 	bl	80035f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004262:	4b31      	ldr	r3, [pc, #196]	; (8004328 <HAL_ADC_ConfigChannel+0x7b0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	099b      	lsrs	r3, r3, #6
 8004268:	4a30      	ldr	r2, [pc, #192]	; (800432c <HAL_ADC_ConfigChannel+0x7b4>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	099b      	lsrs	r3, r3, #6
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	4613      	mov	r3, r2
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	4413      	add	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800427c:	e002      	b.n	8004284 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3b01      	subs	r3, #1
 8004282:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f9      	bne.n	800427e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800428a:	e03a      	b.n	8004302 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a27      	ldr	r2, [pc, #156]	; (8004330 <HAL_ADC_ConfigChannel+0x7b8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d113      	bne.n	80042be <HAL_ADC_ConfigChannel+0x746>
 8004296:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800429a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10d      	bne.n	80042be <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a1f      	ldr	r2, [pc, #124]	; (8004324 <HAL_ADC_ConfigChannel+0x7ac>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d12a      	bne.n	8004302 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042b4:	4619      	mov	r1, r3
 80042b6:	4819      	ldr	r0, [pc, #100]	; (800431c <HAL_ADC_ConfigChannel+0x7a4>)
 80042b8:	f7ff f99d 	bl	80035f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042bc:	e021      	b.n	8004302 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1c      	ldr	r2, [pc, #112]	; (8004334 <HAL_ADC_ConfigChannel+0x7bc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d11c      	bne.n	8004302 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80042c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d116      	bne.n	8004302 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a12      	ldr	r2, [pc, #72]	; (8004324 <HAL_ADC_ConfigChannel+0x7ac>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d111      	bne.n	8004302 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042e6:	4619      	mov	r1, r3
 80042e8:	480c      	ldr	r0, [pc, #48]	; (800431c <HAL_ADC_ConfigChannel+0x7a4>)
 80042ea:	f7ff f984 	bl	80035f6 <LL_ADC_SetCommonPathInternalCh>
 80042ee:	e008      	b.n	8004302 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f4:	f043 0220 	orr.w	r2, r3, #32
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800430a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800430e:	4618      	mov	r0, r3
 8004310:	37d8      	adds	r7, #216	; 0xd8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	80080000 	.word	0x80080000
 800431c:	50040300 	.word	0x50040300
 8004320:	c7520000 	.word	0xc7520000
 8004324:	50040000 	.word	0x50040000
 8004328:	20000000 	.word	0x20000000
 800432c:	053e2d63 	.word	0x053e2d63
 8004330:	cb840000 	.word	0xcb840000
 8004334:	80000001 	.word	0x80000001

08004338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004348:	4b0c      	ldr	r3, [pc, #48]	; (800437c <__NVIC_SetPriorityGrouping+0x44>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004354:	4013      	ands	r3, r2
 8004356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800436a:	4a04      	ldr	r2, [pc, #16]	; (800437c <__NVIC_SetPriorityGrouping+0x44>)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	60d3      	str	r3, [r2, #12]
}
 8004370:	bf00      	nop
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	e000ed00 	.word	0xe000ed00

08004380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004384:	4b04      	ldr	r3, [pc, #16]	; (8004398 <__NVIC_GetPriorityGrouping+0x18>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	0a1b      	lsrs	r3, r3, #8
 800438a:	f003 0307 	and.w	r3, r3, #7
}
 800438e:	4618      	mov	r0, r3
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	e000ed00 	.word	0xe000ed00

0800439c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4603      	mov	r3, r0
 80043a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	db0b      	blt.n	80043c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	f003 021f 	and.w	r2, r3, #31
 80043b4:	4907      	ldr	r1, [pc, #28]	; (80043d4 <__NVIC_EnableIRQ+0x38>)
 80043b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	2001      	movs	r0, #1
 80043be:	fa00 f202 	lsl.w	r2, r0, r2
 80043c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	e000e100 	.word	0xe000e100

080043d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	6039      	str	r1, [r7, #0]
 80043e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	db0a      	blt.n	8004402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	490c      	ldr	r1, [pc, #48]	; (8004424 <__NVIC_SetPriority+0x4c>)
 80043f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f6:	0112      	lsls	r2, r2, #4
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	440b      	add	r3, r1
 80043fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004400:	e00a      	b.n	8004418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	b2da      	uxtb	r2, r3
 8004406:	4908      	ldr	r1, [pc, #32]	; (8004428 <__NVIC_SetPriority+0x50>)
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	3b04      	subs	r3, #4
 8004410:	0112      	lsls	r2, r2, #4
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	440b      	add	r3, r1
 8004416:	761a      	strb	r2, [r3, #24]
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	e000e100 	.word	0xe000e100
 8004428:	e000ed00 	.word	0xe000ed00

0800442c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800442c:	b480      	push	{r7}
 800442e:	b089      	sub	sp, #36	; 0x24
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	f1c3 0307 	rsb	r3, r3, #7
 8004446:	2b04      	cmp	r3, #4
 8004448:	bf28      	it	cs
 800444a:	2304      	movcs	r3, #4
 800444c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	3304      	adds	r3, #4
 8004452:	2b06      	cmp	r3, #6
 8004454:	d902      	bls.n	800445c <NVIC_EncodePriority+0x30>
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	3b03      	subs	r3, #3
 800445a:	e000      	b.n	800445e <NVIC_EncodePriority+0x32>
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004460:	f04f 32ff 	mov.w	r2, #4294967295
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	43da      	mvns	r2, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	401a      	ands	r2, r3
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004474:	f04f 31ff 	mov.w	r1, #4294967295
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	fa01 f303 	lsl.w	r3, r1, r3
 800447e:	43d9      	mvns	r1, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004484:	4313      	orrs	r3, r2
         );
}
 8004486:	4618      	mov	r0, r3
 8004488:	3724      	adds	r7, #36	; 0x24
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
	...

08004494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3b01      	subs	r3, #1
 80044a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044a4:	d301      	bcc.n	80044aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044a6:	2301      	movs	r3, #1
 80044a8:	e00f      	b.n	80044ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044aa:	4a0a      	ldr	r2, [pc, #40]	; (80044d4 <SysTick_Config+0x40>)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044b2:	210f      	movs	r1, #15
 80044b4:	f04f 30ff 	mov.w	r0, #4294967295
 80044b8:	f7ff ff8e 	bl	80043d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044bc:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <SysTick_Config+0x40>)
 80044be:	2200      	movs	r2, #0
 80044c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044c2:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <SysTick_Config+0x40>)
 80044c4:	2207      	movs	r2, #7
 80044c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	e000e010 	.word	0xe000e010

080044d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff ff29 	bl	8004338 <__NVIC_SetPriorityGrouping>
}
 80044e6:	bf00      	nop
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b086      	sub	sp, #24
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	4603      	mov	r3, r0
 80044f6:	60b9      	str	r1, [r7, #8]
 80044f8:	607a      	str	r2, [r7, #4]
 80044fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004500:	f7ff ff3e 	bl	8004380 <__NVIC_GetPriorityGrouping>
 8004504:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	6978      	ldr	r0, [r7, #20]
 800450c:	f7ff ff8e 	bl	800442c <NVIC_EncodePriority>
 8004510:	4602      	mov	r2, r0
 8004512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004516:	4611      	mov	r1, r2
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff ff5d 	bl	80043d8 <__NVIC_SetPriority>
}
 800451e:	bf00      	nop
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b082      	sub	sp, #8
 800452a:	af00      	add	r7, sp, #0
 800452c:	4603      	mov	r3, r0
 800452e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff ff31 	bl	800439c <__NVIC_EnableIRQ>
}
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff ffa2 	bl	8004494 <SysTick_Config>
 8004550:	4603      	mov	r3, r0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e054      	b.n	8004618 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	7f5b      	ldrb	r3, [r3, #29]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d105      	bne.n	8004584 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fe faaa 	bl	8002ad8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	791b      	ldrb	r3, [r3, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10c      	bne.n	80045ac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a22      	ldr	r2, [pc, #136]	; (8004620 <HAL_CRC_Init+0xc4>)
 8004598:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0218 	bic.w	r2, r2, #24
 80045a8:	609a      	str	r2, [r3, #8]
 80045aa:	e00c      	b.n	80045c6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6899      	ldr	r1, [r3, #8]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	461a      	mov	r2, r3
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f834 	bl	8004624 <HAL_CRCEx_Polynomial_Set>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e028      	b.n	8004618 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	795b      	ldrb	r3, [r3, #5]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d105      	bne.n	80045da <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f04f 32ff 	mov.w	r2, #4294967295
 80045d6:	611a      	str	r2, [r3, #16]
 80045d8:	e004      	b.n	80045e4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6912      	ldr	r2, [r2, #16]
 80045e2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699a      	ldr	r2, [r3, #24]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	04c11db7 	.word	0x04c11db7

08004624 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004634:	231f      	movs	r3, #31
 8004636:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004638:	bf00      	nop
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1e5a      	subs	r2, r3, #1
 800463e:	613a      	str	r2, [r7, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d009      	beq.n	8004658 <HAL_CRCEx_Polynomial_Set+0x34>
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f003 031f 	and.w	r3, r3, #31
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	fa22 f303 	lsr.w	r3, r2, r3
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0f0      	beq.n	800463a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b18      	cmp	r3, #24
 800465c:	d846      	bhi.n	80046ec <HAL_CRCEx_Polynomial_Set+0xc8>
 800465e:	a201      	add	r2, pc, #4	; (adr r2, 8004664 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004664:	080046f3 	.word	0x080046f3
 8004668:	080046ed 	.word	0x080046ed
 800466c:	080046ed 	.word	0x080046ed
 8004670:	080046ed 	.word	0x080046ed
 8004674:	080046ed 	.word	0x080046ed
 8004678:	080046ed 	.word	0x080046ed
 800467c:	080046ed 	.word	0x080046ed
 8004680:	080046ed 	.word	0x080046ed
 8004684:	080046e1 	.word	0x080046e1
 8004688:	080046ed 	.word	0x080046ed
 800468c:	080046ed 	.word	0x080046ed
 8004690:	080046ed 	.word	0x080046ed
 8004694:	080046ed 	.word	0x080046ed
 8004698:	080046ed 	.word	0x080046ed
 800469c:	080046ed 	.word	0x080046ed
 80046a0:	080046ed 	.word	0x080046ed
 80046a4:	080046d5 	.word	0x080046d5
 80046a8:	080046ed 	.word	0x080046ed
 80046ac:	080046ed 	.word	0x080046ed
 80046b0:	080046ed 	.word	0x080046ed
 80046b4:	080046ed 	.word	0x080046ed
 80046b8:	080046ed 	.word	0x080046ed
 80046bc:	080046ed 	.word	0x080046ed
 80046c0:	080046ed 	.word	0x080046ed
 80046c4:	080046c9 	.word	0x080046c9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b06      	cmp	r3, #6
 80046cc:	d913      	bls.n	80046f6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80046d2:	e010      	b.n	80046f6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	2b07      	cmp	r3, #7
 80046d8:	d90f      	bls.n	80046fa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80046de:	e00c      	b.n	80046fa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2b0f      	cmp	r3, #15
 80046e4:	d90b      	bls.n	80046fe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80046ea:	e008      	b.n	80046fe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	75fb      	strb	r3, [r7, #23]
      break;
 80046f0:	e006      	b.n	8004700 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80046f2:	bf00      	nop
 80046f4:	e004      	b.n	8004700 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80046f6:	bf00      	nop
 80046f8:	e002      	b.n	8004700 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80046fa:	bf00      	nop
 80046fc:	e000      	b.n	8004700 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80046fe:	bf00      	nop
  }
  if (status == HAL_OK)
 8004700:	7dfb      	ldrb	r3, [r7, #23]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10d      	bne.n	8004722 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f023 0118 	bic.w	r1, r3, #24
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	430a      	orrs	r2, r1
 8004720:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004722:	7dfb      	ldrb	r3, [r7, #23]
}
 8004724:	4618      	mov	r0, r3
 8004726:	371c      	adds	r7, #28
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e014      	b.n	800476c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	791b      	ldrb	r3, [r3, #4]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	d105      	bne.n	8004758 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fe fa1c 	bl	8002b90 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	795b      	ldrb	r3, [r3, #5]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_DAC_ConfigChannel+0x1c>
 800478c:	2302      	movs	r3, #2
 800478e:	e107      	b.n	80049a0 <HAL_DAC_ConfigChannel+0x22c>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2202      	movs	r2, #2
 800479a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d174      	bne.n	800488e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80047a4:	f7fe fee4 	bl	8003570 <HAL_GetTick>
 80047a8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d134      	bne.n	800481a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80047b0:	e011      	b.n	80047d6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80047b2:	f7fe fedd 	bl	8003570 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d90a      	bls.n	80047d6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f043 0208 	orr.w	r2, r3, #8
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2203      	movs	r2, #3
 80047d0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e0e4      	b.n	80049a0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e6      	bne.n	80047b2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80047e4:	2001      	movs	r0, #1
 80047e6:	f7fe fecf 	bl	8003588 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	6992      	ldr	r2, [r2, #24]
 80047f2:	641a      	str	r2, [r3, #64]	; 0x40
 80047f4:	e01e      	b.n	8004834 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80047f6:	f7fe febb 	bl	8003570 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	d90a      	bls.n	800481a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	f043 0208 	orr.w	r2, r3, #8
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2203      	movs	r2, #3
 8004814:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e0c2      	b.n	80049a0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004820:	2b00      	cmp	r3, #0
 8004822:	dbe8      	blt.n	80047f6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004824:	2001      	movs	r0, #1
 8004826:	f7fe feaf 	bl	8003588 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	6992      	ldr	r2, [r2, #24]
 8004832:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f003 0310 	and.w	r3, r3, #16
 8004840:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004844:	fa01 f303 	lsl.w	r3, r1, r3
 8004848:	43db      	mvns	r3, r3
 800484a:	ea02 0103 	and.w	r1, r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	69da      	ldr	r2, [r3, #28]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	409a      	lsls	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f003 0310 	and.w	r3, r3, #16
 800486e:	21ff      	movs	r1, #255	; 0xff
 8004870:	fa01 f303 	lsl.w	r3, r1, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	ea02 0103 	and.w	r1, r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	6a1a      	ldr	r2, [r3, #32]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f003 0310 	and.w	r3, r3, #16
 8004884:	409a      	lsls	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d11d      	bne.n	80048d2 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f003 0310 	and.w	r3, r3, #16
 80048a4:	221f      	movs	r2, #31
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	43db      	mvns	r3, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4013      	ands	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2207      	movs	r2, #7
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43db      	mvns	r3, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4013      	ands	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	4313      	orrs	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6819      	ldr	r1, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f003 0310 	and.w	r3, r3, #16
 8004926:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43da      	mvns	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	400a      	ands	r2, r1
 8004936:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	f640 72fc 	movw	r2, #4092	; 0xffc
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	43db      	mvns	r3, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4013      	ands	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6819      	ldr	r1, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f003 0310 	and.w	r3, r3, #16
 8004982:	22c0      	movs	r2, #192	; 0xc0
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	43da      	mvns	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	400a      	ands	r2, r1
 8004990:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2201      	movs	r2, #1
 8004996:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3720      	adds	r7, #32
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e098      	b.n	8004aec <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	4b4d      	ldr	r3, [pc, #308]	; (8004af8 <HAL_DMA_Init+0x150>)
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d80f      	bhi.n	80049e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	4b4b      	ldr	r3, [pc, #300]	; (8004afc <HAL_DMA_Init+0x154>)
 80049ce:	4413      	add	r3, r2
 80049d0:	4a4b      	ldr	r2, [pc, #300]	; (8004b00 <HAL_DMA_Init+0x158>)
 80049d2:	fba2 2303 	umull	r2, r3, r2, r3
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	009a      	lsls	r2, r3, #2
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a48      	ldr	r2, [pc, #288]	; (8004b04 <HAL_DMA_Init+0x15c>)
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40
 80049e4:	e00e      	b.n	8004a04 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	4b46      	ldr	r3, [pc, #280]	; (8004b08 <HAL_DMA_Init+0x160>)
 80049ee:	4413      	add	r3, r2
 80049f0:	4a43      	ldr	r2, [pc, #268]	; (8004b00 <HAL_DMA_Init+0x158>)
 80049f2:	fba2 2303 	umull	r2, r3, r2, r3
 80049f6:	091b      	lsrs	r3, r3, #4
 80049f8:	009a      	lsls	r2, r3, #2
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a42      	ldr	r2, [pc, #264]	; (8004b0c <HAL_DMA_Init+0x164>)
 8004a02:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a5e:	d039      	beq.n	8004ad4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	4a27      	ldr	r2, [pc, #156]	; (8004b04 <HAL_DMA_Init+0x15c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d11a      	bne.n	8004aa0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004a6a:	4b29      	ldr	r3, [pc, #164]	; (8004b10 <HAL_DMA_Init+0x168>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a72:	f003 031c 	and.w	r3, r3, #28
 8004a76:	210f      	movs	r1, #15
 8004a78:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	4924      	ldr	r1, [pc, #144]	; (8004b10 <HAL_DMA_Init+0x168>)
 8004a80:	4013      	ands	r3, r2
 8004a82:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004a84:	4b22      	ldr	r3, [pc, #136]	; (8004b10 <HAL_DMA_Init+0x168>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6859      	ldr	r1, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a90:	f003 031c 	and.w	r3, r3, #28
 8004a94:	fa01 f303 	lsl.w	r3, r1, r3
 8004a98:	491d      	ldr	r1, [pc, #116]	; (8004b10 <HAL_DMA_Init+0x168>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	600b      	str	r3, [r1, #0]
 8004a9e:	e019      	b.n	8004ad4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004aa0:	4b1c      	ldr	r3, [pc, #112]	; (8004b14 <HAL_DMA_Init+0x16c>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa8:	f003 031c 	and.w	r3, r3, #28
 8004aac:	210f      	movs	r1, #15
 8004aae:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	4917      	ldr	r1, [pc, #92]	; (8004b14 <HAL_DMA_Init+0x16c>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004aba:	4b16      	ldr	r3, [pc, #88]	; (8004b14 <HAL_DMA_Init+0x16c>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6859      	ldr	r1, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac6:	f003 031c 	and.w	r3, r3, #28
 8004aca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ace:	4911      	ldr	r1, [pc, #68]	; (8004b14 <HAL_DMA_Init+0x16c>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	40020407 	.word	0x40020407
 8004afc:	bffdfff8 	.word	0xbffdfff8
 8004b00:	cccccccd 	.word	0xcccccccd
 8004b04:	40020000 	.word	0x40020000
 8004b08:	bffdfbf8 	.word	0xbffdfbf8
 8004b0c:	40020400 	.word	0x40020400
 8004b10:	400200a8 	.word	0x400200a8
 8004b14:	400204a8 	.word	0x400204a8

08004b18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b34:	f003 031c 	and.w	r3, r3, #28
 8004b38:	2204      	movs	r2, #4
 8004b3a:	409a      	lsls	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d026      	beq.n	8004b92 <HAL_DMA_IRQHandler+0x7a>
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d021      	beq.n	8004b92 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d107      	bne.n	8004b6c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0204 	bic.w	r2, r2, #4
 8004b6a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b70:	f003 021c 	and.w	r2, r3, #28
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	2104      	movs	r1, #4
 8004b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b7e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d071      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004b90:	e06c      	b.n	8004c6c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b96:	f003 031c 	and.w	r3, r3, #28
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	409a      	lsls	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d02e      	beq.n	8004c04 <HAL_DMA_IRQHandler+0xec>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d029      	beq.n	8004c04 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10b      	bne.n	8004bd6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 020a 	bic.w	r2, r2, #10
 8004bcc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bda:	f003 021c 	and.w	r2, r3, #28
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	2102      	movs	r1, #2
 8004be4:	fa01 f202 	lsl.w	r2, r1, r2
 8004be8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d038      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004c02:	e033      	b.n	8004c6c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c08:	f003 031c 	and.w	r3, r3, #28
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d02a      	beq.n	8004c6e <HAL_DMA_IRQHandler+0x156>
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d025      	beq.n	8004c6e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 020e 	bic.w	r2, r2, #14
 8004c30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c36:	f003 021c 	and.w	r2, r3, #28
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	2101      	movs	r1, #1
 8004c40:	fa01 f202 	lsl.w	r2, r1, r2
 8004c44:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d004      	beq.n	8004c6e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004c6c:	bf00      	nop
 8004c6e:	bf00      	nop
}
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c82:	2300      	movs	r3, #0
 8004c84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c86:	e154      	b.n	8004f32 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	fa01 f303 	lsl.w	r3, r1, r3
 8004c94:	4013      	ands	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8146 	beq.w	8004f2c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d005      	beq.n	8004cb8 <HAL_GPIO_Init+0x40>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f003 0303 	and.w	r3, r3, #3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d130      	bne.n	8004d1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	2203      	movs	r2, #3
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cee:	2201      	movs	r2, #1
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	43db      	mvns	r3, r3
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	091b      	lsrs	r3, r3, #4
 8004d04:	f003 0201 	and.w	r2, r3, #1
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d017      	beq.n	8004d56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	2203      	movs	r2, #3
 8004d32:	fa02 f303 	lsl.w	r3, r2, r3
 8004d36:	43db      	mvns	r3, r3
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d123      	bne.n	8004daa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	08da      	lsrs	r2, r3, #3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	3208      	adds	r2, #8
 8004d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	220f      	movs	r2, #15
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4013      	ands	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	08da      	lsrs	r2, r3, #3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3208      	adds	r2, #8
 8004da4:	6939      	ldr	r1, [r7, #16]
 8004da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	2203      	movs	r2, #3
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f003 0203 	and.w	r2, r3, #3
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 80a0 	beq.w	8004f2c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dec:	4b58      	ldr	r3, [pc, #352]	; (8004f50 <HAL_GPIO_Init+0x2d8>)
 8004dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df0:	4a57      	ldr	r2, [pc, #348]	; (8004f50 <HAL_GPIO_Init+0x2d8>)
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	6613      	str	r3, [r2, #96]	; 0x60
 8004df8:	4b55      	ldr	r3, [pc, #340]	; (8004f50 <HAL_GPIO_Init+0x2d8>)
 8004dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	60bb      	str	r3, [r7, #8]
 8004e02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e04:	4a53      	ldr	r2, [pc, #332]	; (8004f54 <HAL_GPIO_Init+0x2dc>)
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	089b      	lsrs	r3, r3, #2
 8004e0a:	3302      	adds	r3, #2
 8004e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	220f      	movs	r2, #15
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4013      	ands	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e2e:	d019      	beq.n	8004e64 <HAL_GPIO_Init+0x1ec>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a49      	ldr	r2, [pc, #292]	; (8004f58 <HAL_GPIO_Init+0x2e0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d013      	beq.n	8004e60 <HAL_GPIO_Init+0x1e8>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a48      	ldr	r2, [pc, #288]	; (8004f5c <HAL_GPIO_Init+0x2e4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00d      	beq.n	8004e5c <HAL_GPIO_Init+0x1e4>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a47      	ldr	r2, [pc, #284]	; (8004f60 <HAL_GPIO_Init+0x2e8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d007      	beq.n	8004e58 <HAL_GPIO_Init+0x1e0>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a46      	ldr	r2, [pc, #280]	; (8004f64 <HAL_GPIO_Init+0x2ec>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d101      	bne.n	8004e54 <HAL_GPIO_Init+0x1dc>
 8004e50:	2304      	movs	r3, #4
 8004e52:	e008      	b.n	8004e66 <HAL_GPIO_Init+0x1ee>
 8004e54:	2307      	movs	r3, #7
 8004e56:	e006      	b.n	8004e66 <HAL_GPIO_Init+0x1ee>
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e004      	b.n	8004e66 <HAL_GPIO_Init+0x1ee>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e002      	b.n	8004e66 <HAL_GPIO_Init+0x1ee>
 8004e60:	2301      	movs	r3, #1
 8004e62:	e000      	b.n	8004e66 <HAL_GPIO_Init+0x1ee>
 8004e64:	2300      	movs	r3, #0
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	f002 0203 	and.w	r2, r2, #3
 8004e6c:	0092      	lsls	r2, r2, #2
 8004e6e:	4093      	lsls	r3, r2
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e76:	4937      	ldr	r1, [pc, #220]	; (8004f54 <HAL_GPIO_Init+0x2dc>)
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	089b      	lsrs	r3, r3, #2
 8004e7c:	3302      	adds	r3, #2
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e84:	4b38      	ldr	r3, [pc, #224]	; (8004f68 <HAL_GPIO_Init+0x2f0>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4013      	ands	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ea8:	4a2f      	ldr	r2, [pc, #188]	; (8004f68 <HAL_GPIO_Init+0x2f0>)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004eae:	4b2e      	ldr	r3, [pc, #184]	; (8004f68 <HAL_GPIO_Init+0x2f0>)
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ed2:	4a25      	ldr	r2, [pc, #148]	; (8004f68 <HAL_GPIO_Init+0x2f0>)
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004ed8:	4b23      	ldr	r3, [pc, #140]	; (8004f68 <HAL_GPIO_Init+0x2f0>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004efc:	4a1a      	ldr	r2, [pc, #104]	; (8004f68 <HAL_GPIO_Init+0x2f0>)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004f02:	4b19      	ldr	r3, [pc, #100]	; (8004f68 <HAL_GPIO_Init+0x2f0>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	43db      	mvns	r3, r3
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f26:	4a10      	ldr	r2, [pc, #64]	; (8004f68 <HAL_GPIO_Init+0x2f0>)
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f47f aea3 	bne.w	8004c88 <HAL_GPIO_Init+0x10>
  }
}
 8004f42:	bf00      	nop
 8004f44:	bf00      	nop
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	40021000 	.word	0x40021000
 8004f54:	40010000 	.word	0x40010000
 8004f58:	48000400 	.word	0x48000400
 8004f5c:	48000800 	.word	0x48000800
 8004f60:	48000c00 	.word	0x48000c00
 8004f64:	48001000 	.word	0x48001000
 8004f68:	40010400 	.word	0x40010400

08004f6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	887b      	ldrh	r3, [r7, #2]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f84:	2301      	movs	r3, #1
 8004f86:	73fb      	strb	r3, [r7, #15]
 8004f88:	e001      	b.n	8004f8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	807b      	strh	r3, [r7, #2]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fac:	787b      	ldrb	r3, [r7, #1]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004fb2:	887a      	ldrh	r2, [r7, #2]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004fb8:	e002      	b.n	8004fc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004fba:	887a      	ldrh	r2, [r7, #2]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004fde:	887a      	ldrh	r2, [r7, #2]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	041a      	lsls	r2, r3, #16
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	43d9      	mvns	r1, r3
 8004fea:	887b      	ldrh	r3, [r7, #2]
 8004fec:	400b      	ands	r3, r1
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	619a      	str	r2, [r3, #24]
}
 8004ff4:	bf00      	nop
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005002:	b08b      	sub	sp, #44	; 0x2c
 8005004:	af06      	add	r7, sp, #24
 8005006:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e109      	b.n	8005226 <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f008 f8cc 	bl	800d1c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2203      	movs	r2, #3
 8005030:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4618      	mov	r0, r3
 800503a:	f003 ffab 	bl	8008f94 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	687e      	ldr	r6, [r7, #4]
 8005046:	466d      	mov	r5, sp
 8005048:	f106 0410 	add.w	r4, r6, #16
 800504c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800504e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005050:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005054:	e885 0003 	stmia.w	r5, {r0, r1}
 8005058:	1d33      	adds	r3, r6, #4
 800505a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800505c:	6838      	ldr	r0, [r7, #0]
 800505e:	f003 ff71 	bl	8008f44 <USB_CoreInit>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e0d8      	b.n	8005226 <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2100      	movs	r1, #0
 800507a:	4618      	mov	r0, r3
 800507c:	f003 ffa5 	bl	8008fca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005080:	2300      	movs	r3, #0
 8005082:	73fb      	strb	r3, [r7, #15]
 8005084:	e04d      	b.n	8005122 <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005086:	7bfb      	ldrb	r3, [r7, #15]
 8005088:	6879      	ldr	r1, [r7, #4]
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	4613      	mov	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	440b      	add	r3, r1
 8005096:	3305      	adds	r3, #5
 8005098:	2201      	movs	r2, #1
 800509a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	440b      	add	r3, r1
 80050ac:	3304      	adds	r3, #4
 80050ae:	7bfa      	ldrb	r2, [r7, #15]
 80050b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050b2:	7bfa      	ldrb	r2, [r7, #15]
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	b298      	uxth	r0, r3
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	440b      	add	r3, r1
 80050c4:	333a      	adds	r3, #58	; 0x3a
 80050c6:	4602      	mov	r2, r0
 80050c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	440b      	add	r3, r1
 80050da:	3307      	adds	r3, #7
 80050dc:	2200      	movs	r2, #0
 80050de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050e0:	7bfa      	ldrb	r2, [r7, #15]
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	440b      	add	r3, r1
 80050ee:	333c      	adds	r3, #60	; 0x3c
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80050f4:	7bfa      	ldrb	r2, [r7, #15]
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	440b      	add	r3, r1
 8005102:	3340      	adds	r3, #64	; 0x40
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005108:	7bfa      	ldrb	r2, [r7, #15]
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	4613      	mov	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	440b      	add	r3, r1
 8005116:	3344      	adds	r3, #68	; 0x44
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	3301      	adds	r3, #1
 8005120:	73fb      	strb	r3, [r7, #15]
 8005122:	7bfa      	ldrb	r2, [r7, #15]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	429a      	cmp	r2, r3
 800512a:	d3ac      	bcc.n	8005086 <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800512c:	2300      	movs	r3, #0
 800512e:	73fb      	strb	r3, [r7, #15]
 8005130:	e044      	b.n	80051bc <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005132:	7bfa      	ldrb	r2, [r7, #15]
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	440b      	add	r3, r1
 8005140:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8005144:	2200      	movs	r2, #0
 8005146:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005148:	7bfa      	ldrb	r2, [r7, #15]
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	440b      	add	r3, r1
 8005156:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800515a:	7bfa      	ldrb	r2, [r7, #15]
 800515c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800515e:	7bfa      	ldrb	r2, [r7, #15]
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	4613      	mov	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	440b      	add	r3, r1
 800516c:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8005170:	2200      	movs	r2, #0
 8005172:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005174:	7bfa      	ldrb	r2, [r7, #15]
 8005176:	6879      	ldr	r1, [r7, #4]
 8005178:	4613      	mov	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	440b      	add	r3, r1
 8005182:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005186:	2200      	movs	r2, #0
 8005188:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800518a:	7bfa      	ldrb	r2, [r7, #15]
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	440b      	add	r3, r1
 8005198:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051a0:	7bfa      	ldrb	r2, [r7, #15]
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	440b      	add	r3, r1
 80051ae:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051b6:	7bfb      	ldrb	r3, [r7, #15]
 80051b8:	3301      	adds	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
 80051bc:	7bfa      	ldrb	r2, [r7, #15]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d3b5      	bcc.n	8005132 <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	603b      	str	r3, [r7, #0]
 80051cc:	687e      	ldr	r6, [r7, #4]
 80051ce:	466d      	mov	r5, sp
 80051d0:	f106 0410 	add.w	r4, r6, #16
 80051d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80051e0:	1d33      	adds	r3, r6, #4
 80051e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051e4:	6838      	ldr	r0, [r7, #0]
 80051e6:	f003 fefd 	bl	8008fe4 <USB_DevInit>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e014      	b.n	8005226 <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d102      	bne.n	800521a <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f001 fc55 	bl	8006ac4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4618      	mov	r0, r3
 8005220:	f006 f909 	bl	800b436 <USB_DevDisconnect>

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800522e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b082      	sub	sp, #8
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_PCD_Start+0x16>
 8005240:	2302      	movs	r3, #2
 8005242:	e012      	b.n	800526a <HAL_PCD_Start+0x3c>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4618      	mov	r0, r3
 8005252:	f003 fe88 	bl	8008f66 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f006 f8d4 	bl	800b408 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f006 f8ee 	bl	800b460 <USB_ReadInterrupts>
 8005284:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fb3e 	bl	8005912 <PCD_EP_ISR_Handler>

    return;
 8005296:	e110      	b.n	80054ba <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d013      	beq.n	80052ca <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b4:	b292      	uxth	r2, r2
 80052b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f008 f813 	bl	800d2e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80052c0:	2100      	movs	r1, #0
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f8fc 	bl	80054c0 <HAL_PCD_SetAddress>

    return;
 80052c8:	e0f7      	b.n	80054ba <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00c      	beq.n	80052ee <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052dc:	b29a      	uxth	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052e6:	b292      	uxth	r2, r2
 80052e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80052ec:	e0e5      	b.n	80054ba <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00c      	beq.n	8005312 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005300:	b29a      	uxth	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800530a:	b292      	uxth	r2, r2
 800530c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005310:	e0d3      	b.n	80054ba <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d034      	beq.n	8005386 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005324:	b29a      	uxth	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 0204 	bic.w	r2, r2, #4
 800532e:	b292      	uxth	r2, r2
 8005330:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800533c:	b29a      	uxth	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0208 	bic.w	r2, r2, #8
 8005346:	b292      	uxth	r2, r2
 8005348:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8005352:	2b01      	cmp	r3, #1
 8005354:	d107      	bne.n	8005366 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800535e:	2100      	movs	r1, #0
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f008 fa71 	bl	800d848 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f007 fff6 	bl	800d358 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005374:	b29a      	uxth	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800537e:	b292      	uxth	r2, r2
 8005380:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005384:	e099      	b.n	80054ba <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800538c:	2b00      	cmp	r3, #0
 800538e:	d027      	beq.n	80053e0 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005398:	b29a      	uxth	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0208 	orr.w	r2, r2, #8
 80053a2:	b292      	uxth	r2, r2
 80053a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ba:	b292      	uxth	r2, r2
 80053bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0204 	orr.w	r2, r2, #4
 80053d2:	b292      	uxth	r2, r2
 80053d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f007 ffa3 	bl	800d324 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80053de:	e06c      	b.n	80054ba <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d040      	beq.n	800546c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053fc:	b292      	uxth	r2, r2
 80053fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8005408:	2b00      	cmp	r3, #0
 800540a:	d12b      	bne.n	8005464 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005414:	b29a      	uxth	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0204 	orr.w	r2, r2, #4
 800541e:	b292      	uxth	r2, r2
 8005420:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800542c:	b29a      	uxth	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0208 	orr.w	r2, r2, #8
 8005436:	b292      	uxth	r2, r2
 8005438:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800544c:	b29b      	uxth	r3, r3
 800544e:	089b      	lsrs	r3, r3, #2
 8005450:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800545a:	2101      	movs	r1, #1
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f008 f9f3 	bl	800d848 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005462:	e02a      	b.n	80054ba <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f007 ff5d 	bl	800d324 <HAL_PCD_SuspendCallback>
    return;
 800546a:	e026      	b.n	80054ba <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00f      	beq.n	8005496 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800547e:	b29a      	uxth	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005488:	b292      	uxth	r2, r2
 800548a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f007 ff1b 	bl	800d2ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005494:	e011      	b.n	80054ba <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00c      	beq.n	80054ba <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054b2:	b292      	uxth	r2, r2
 80054b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80054b8:	bf00      	nop
  }
}
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	460b      	mov	r3, r1
 80054ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <HAL_PCD_SetAddress+0x1a>
 80054d6:	2302      	movs	r3, #2
 80054d8:	e013      	b.n	8005502 <HAL_PCD_SetAddress+0x42>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	78fa      	ldrb	r2, [r7, #3]
 80054e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	78fa      	ldrb	r2, [r7, #3]
 80054f0:	4611      	mov	r1, r2
 80054f2:	4618      	mov	r0, r3
 80054f4:	f005 ff74 	bl	800b3e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	4608      	mov	r0, r1
 8005514:	4611      	mov	r1, r2
 8005516:	461a      	mov	r2, r3
 8005518:	4603      	mov	r3, r0
 800551a:	70fb      	strb	r3, [r7, #3]
 800551c:	460b      	mov	r3, r1
 800551e:	803b      	strh	r3, [r7, #0]
 8005520:	4613      	mov	r3, r2
 8005522:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005524:	2300      	movs	r3, #0
 8005526:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005528:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800552c:	2b00      	cmp	r3, #0
 800552e:	da0f      	bge.n	8005550 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	4613      	mov	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	4413      	add	r3, r2
 8005544:	3304      	adds	r3, #4
 8005546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2201      	movs	r2, #1
 800554c:	705a      	strb	r2, [r3, #1]
 800554e:	e00f      	b.n	8005570 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	f003 0207 	and.w	r2, r3, #7
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	4413      	add	r3, r2
 8005566:	3304      	adds	r3, #4
 8005568:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005570:	78fb      	ldrb	r3, [r7, #3]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	b2da      	uxtb	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800557c:	883a      	ldrh	r2, [r7, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	78ba      	ldrb	r2, [r7, #2]
 8005586:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	785b      	ldrb	r3, [r3, #1]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d004      	beq.n	800559a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	b29a      	uxth	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800559a:	78bb      	ldrb	r3, [r7, #2]
 800559c:	2b02      	cmp	r3, #2
 800559e:	d102      	bne.n	80055a6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_PCD_EP_Open+0xaa>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e00e      	b.n	80055d2 <HAL_PCD_EP_Open+0xc8>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68f9      	ldr	r1, [r7, #12]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f003 fd30 	bl	8009028 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 80055d0:	7afb      	ldrb	r3, [r7, #11]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	460b      	mov	r3, r1
 80055e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	da0f      	bge.n	800560e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055ee:	78fb      	ldrb	r3, [r7, #3]
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	4613      	mov	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	4413      	add	r3, r2
 8005602:	3304      	adds	r3, #4
 8005604:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	705a      	strb	r2, [r3, #1]
 800560c:	e00f      	b.n	800562e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800560e:	78fb      	ldrb	r3, [r7, #3]
 8005610:	f003 0207 	and.w	r2, r3, #7
 8005614:	4613      	mov	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	4413      	add	r3, r2
 8005624:	3304      	adds	r3, #4
 8005626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800562e:	78fb      	ldrb	r3, [r7, #3]
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	b2da      	uxtb	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005640:	2b01      	cmp	r3, #1
 8005642:	d101      	bne.n	8005648 <HAL_PCD_EP_Close+0x6e>
 8005644:	2302      	movs	r3, #2
 8005646:	e00e      	b.n	8005666 <HAL_PCD_EP_Close+0x8c>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68f9      	ldr	r1, [r7, #12]
 8005656:	4618      	mov	r0, r3
 8005658:	f004 f8a0 	bl	800979c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b086      	sub	sp, #24
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
 800567a:	460b      	mov	r3, r1
 800567c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800567e:	7afb      	ldrb	r3, [r7, #11]
 8005680:	f003 0207 	and.w	r2, r3, #7
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4413      	add	r3, r2
 8005694:	3304      	adds	r3, #4
 8005696:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2200      	movs	r2, #0
 80056a8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2200      	movs	r2, #0
 80056ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056b0:	7afb      	ldrb	r3, [r7, #11]
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80056bc:	7afb      	ldrb	r3, [r7, #11]
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d106      	bne.n	80056d4 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6979      	ldr	r1, [r7, #20]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f004 fa52 	bl	8009b76 <USB_EPStartXfer>
 80056d2:	e005      	b.n	80056e0 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6979      	ldr	r1, [r7, #20]
 80056da:	4618      	mov	r0, r3
 80056dc:	f004 fa4b 	bl	8009b76 <USB_EPStartXfer>
  }

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	460b      	mov	r3, r1
 80056f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80056f6:	78fb      	ldrb	r3, [r7, #3]
 80056f8:	f003 0207 	and.w	r2, r3, #7
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	4613      	mov	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	440b      	add	r3, r1
 8005708:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800570c:	681b      	ldr	r3, [r3, #0]
}
 800570e:	4618      	mov	r0, r3
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b086      	sub	sp, #24
 800571e:	af00      	add	r7, sp, #0
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	603b      	str	r3, [r7, #0]
 8005726:	460b      	mov	r3, r1
 8005728:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800572a:	7afb      	ldrb	r3, [r7, #11]
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	4613      	mov	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4413      	add	r3, r2
 800573e:	3304      	adds	r3, #4
 8005740:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2200      	movs	r2, #0
 8005760:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2201      	movs	r2, #1
 8005766:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005768:	7afb      	ldrb	r3, [r7, #11]
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	b2da      	uxtb	r2, r3
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005774:	7afb      	ldrb	r3, [r7, #11]
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	2b00      	cmp	r3, #0
 800577c:	d106      	bne.n	800578c <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6979      	ldr	r1, [r7, #20]
 8005784:	4618      	mov	r0, r3
 8005786:	f004 f9f6 	bl	8009b76 <USB_EPStartXfer>
 800578a:	e005      	b.n	8005798 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6979      	ldr	r1, [r7, #20]
 8005792:	4618      	mov	r0, r3
 8005794:	f004 f9ef 	bl	8009b76 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	460b      	mov	r3, r1
 80057ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80057ae:	78fb      	ldrb	r3, [r7, #3]
 80057b0:	f003 0207 	and.w	r2, r3, #7
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d901      	bls.n	80057c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e04e      	b.n	800585e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80057c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	da0f      	bge.n	80057e8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057c8:	78fb      	ldrb	r3, [r7, #3]
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	4413      	add	r3, r2
 80057dc:	3304      	adds	r3, #4
 80057de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	705a      	strb	r2, [r3, #1]
 80057e6:	e00d      	b.n	8005804 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80057e8:	78fa      	ldrb	r2, [r7, #3]
 80057ea:	4613      	mov	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	4413      	add	r3, r2
 80057fa:	3304      	adds	r3, #4
 80057fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2201      	movs	r2, #1
 8005808:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800580a:	78fb      	ldrb	r3, [r7, #3]
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	b2da      	uxtb	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_PCD_EP_SetStall+0x82>
 8005820:	2302      	movs	r3, #2
 8005822:	e01c      	b.n	800585e <HAL_PCD_EP_SetStall+0xbc>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68f9      	ldr	r1, [r7, #12]
 8005832:	4618      	mov	r0, r3
 8005834:	f005 fcd5 	bl	800b1e2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	2b00      	cmp	r3, #0
 8005840:	d108      	bne.n	8005854 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800584c:	4619      	mov	r1, r3
 800584e:	4610      	mov	r0, r2
 8005850:	f005 fe16 	bl	800b480 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	460b      	mov	r3, r1
 8005870:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	f003 020f 	and.w	r2, r3, #15
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	429a      	cmp	r2, r3
 800587e:	d901      	bls.n	8005884 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e042      	b.n	800590a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005884:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005888:	2b00      	cmp	r3, #0
 800588a:	da0f      	bge.n	80058ac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800588c:	78fb      	ldrb	r3, [r7, #3]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	4413      	add	r3, r2
 80058a0:	3304      	adds	r3, #4
 80058a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2201      	movs	r2, #1
 80058a8:	705a      	strb	r2, [r3, #1]
 80058aa:	e00f      	b.n	80058cc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058ac:	78fb      	ldrb	r3, [r7, #3]
 80058ae:	f003 0207 	and.w	r2, r3, #7
 80058b2:	4613      	mov	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	4413      	add	r3, r2
 80058c2:	3304      	adds	r3, #4
 80058c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058d2:	78fb      	ldrb	r3, [r7, #3]
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_PCD_EP_ClrStall+0x86>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e00e      	b.n	800590a <HAL_PCD_EP_ClrStall+0xa4>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68f9      	ldr	r1, [r7, #12]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f005 fcc2 	bl	800b284 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b096      	sub	sp, #88	; 0x58
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800591a:	e3a9      	b.n	8006070 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005924:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005928:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800592c:	b2db      	uxtb	r3, r3
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8005936:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800593a:	2b00      	cmp	r3, #0
 800593c:	f040 8169 	bne.w	8005c12 <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005940:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005944:	f003 0310 	and.w	r3, r3, #16
 8005948:	2b00      	cmp	r3, #0
 800594a:	d150      	bne.n	80059ee <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	b29b      	uxth	r3, r3
 8005954:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595c:	81fb      	strh	r3, [r7, #14]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	89fb      	ldrh	r3, [r7, #14]
 8005964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596c:	b29b      	uxth	r3, r3
 800596e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	332c      	adds	r3, #44	; 0x2c
 8005974:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800597e:	b29b      	uxth	r3, r3
 8005980:	461a      	mov	r2, r3
 8005982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	4413      	add	r3, r2
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6812      	ldr	r2, [r2, #0]
 800598e:	4413      	add	r3, r2
 8005990:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800599a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800599c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800599e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a0:	695a      	ldr	r2, [r3, #20]
 80059a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	441a      	add	r2, r3
 80059a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059aa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80059ac:	2100      	movs	r1, #0
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f007 fc71 	bl	800d296 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 8357 	beq.w	8006070 <PCD_EP_ISR_Handler+0x75e>
 80059c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f040 8352 	bne.w	8006070 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	b292      	uxth	r2, r2
 80059e0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80059ec:	e340      	b.n	8006070 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80059f4:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005a00:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d032      	beq.n	8005a72 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	4413      	add	r3, r2
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6812      	ldr	r2, [r2, #0]
 8005a24:	4413      	add	r3, r2
 8005a26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a32:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6818      	ldr	r0, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8005a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a40:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a44:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f005 fd68 	bl	800b51c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005a58:	4013      	ands	r3, r2
 8005a5a:	823b      	strh	r3, [r7, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	8a3a      	ldrh	r2, [r7, #16]
 8005a62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a66:	b292      	uxth	r2, r2
 8005a68:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f007 fbe6 	bl	800d23c <HAL_PCD_SetupStageCallback>
 8005a70:	e2fe      	b.n	8006070 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005a72:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f280 82fa 	bge.w	8006070 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005a88:	4013      	ands	r3, r2
 8005a8a:	83fb      	strh	r3, [r7, #30]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	8bfa      	ldrh	r2, [r7, #30]
 8005a92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a96:	b292      	uxth	r2, r2
 8005a98:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	4413      	add	r3, r2
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6812      	ldr	r2, [r2, #0]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d019      	beq.n	8005afe <PCD_EP_ISR_Handler+0x1ec>
 8005aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d015      	beq.n	8005afe <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6818      	ldr	r0, [r3, #0]
 8005ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad8:	6959      	ldr	r1, [r3, #20]
 8005ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005adc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	f005 fd1a 	bl	800b51c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aea:	695a      	ldr	r2, [r3, #20]
 8005aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	441a      	add	r2, r3
 8005af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005af6:	2100      	movs	r1, #0
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f007 fbb1 	bl	800d260 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005b08:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f040 82ad 	bne.w	8006070 <PCD_EP_ISR_Handler+0x75e>
 8005b16:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005b1a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b22:	f000 82a5 	beq.w	8006070 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	61bb      	str	r3, [r7, #24]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	461a      	mov	r2, r3
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b44:	617b      	str	r3, [r7, #20]
 8005b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b4c:	d918      	bls.n	8005b80 <PCD_EP_ISR_Handler+0x26e>
 8005b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	095b      	lsrs	r3, r3, #5
 8005b54:	647b      	str	r3, [r7, #68]	; 0x44
 8005b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f003 031f 	and.w	r3, r3, #31
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d102      	bne.n	8005b68 <PCD_EP_ISR_Handler+0x256>
 8005b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b64:	3b01      	subs	r3, #1
 8005b66:	647b      	str	r3, [r7, #68]	; 0x44
 8005b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	029b      	lsls	r3, r3, #10
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	801a      	strh	r2, [r3, #0]
 8005b7e:	e029      	b.n	8005bd4 <PCD_EP_ISR_Handler+0x2c2>
 8005b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d112      	bne.n	8005bae <PCD_EP_ISR_Handler+0x29c>
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	801a      	strh	r2, [r3, #0]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	801a      	strh	r2, [r3, #0]
 8005bac:	e012      	b.n	8005bd4 <PCD_EP_ISR_Handler+0x2c2>
 8005bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	085b      	lsrs	r3, r3, #1
 8005bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <PCD_EP_ISR_Handler+0x2b6>
 8005bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8005bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	029b      	lsls	r3, r3, #10
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be4:	827b      	strh	r3, [r7, #18]
 8005be6:	8a7b      	ldrh	r3, [r7, #18]
 8005be8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005bec:	827b      	strh	r3, [r7, #18]
 8005bee:	8a7b      	ldrh	r3, [r7, #18]
 8005bf0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005bf4:	827b      	strh	r3, [r7, #18]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	8a7b      	ldrh	r3, [r7, #18]
 8005bfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	8013      	strh	r3, [r2, #0]
 8005c10:	e22e      	b.n	8006070 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005c26:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f280 80f7 	bge.w	8005e1e <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	461a      	mov	r2, r3
 8005c36:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005c46:	4013      	ands	r3, r2
 8005c48:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	461a      	mov	r2, r3
 8005c52:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005c5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c62:	b292      	uxth	r2, r2
 8005c64:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005c66:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	4413      	add	r3, r2
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c80:	7b1b      	ldrb	r3, [r3, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d123      	bne.n	8005cce <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	4413      	add	r3, r2
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6812      	ldr	r2, [r2, #0]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005caa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8005cae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 808e 	beq.w	8005dd4 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6818      	ldr	r0, [r3, #0]
 8005cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cbe:	6959      	ldr	r1, [r3, #20]
 8005cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc2:	88da      	ldrh	r2, [r3, #6]
 8005cc4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005cc8:	f005 fc28 	bl	800b51c <USB_ReadPMA>
 8005ccc:	e082      	b.n	8005dd4 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd0:	78db      	ldrb	r3, [r3, #3]
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d10a      	bne.n	8005cec <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005cd6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005cda:	461a      	mov	r2, r3
 8005cdc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f9d4 	bl	800608c <HAL_PCD_EP_DB_Receive>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005cea:	e073      	b.n	8005dd4 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d06:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	441a      	add	r2, r3
 8005d18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	461a      	mov	r2, r3
 8005d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d022      	beq.n	8005d90 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	4413      	add	r3, r2
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6812      	ldr	r2, [r2, #0]
 8005d62:	4413      	add	r3, r2
 8005d64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d6e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005d72:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d02c      	beq.n	8005dd4 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d80:	6959      	ldr	r1, [r3, #20]
 8005d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d84:	891a      	ldrh	r2, [r3, #8]
 8005d86:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005d8a:	f005 fbc7 	bl	800b51c <USB_ReadPMA>
 8005d8e:	e021      	b.n	8005dd4 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	4413      	add	r3, r2
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6812      	ldr	r2, [r2, #0]
 8005da8:	4413      	add	r3, r2
 8005daa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005db4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005db8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d009      	beq.n	8005dd4 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6818      	ldr	r0, [r3, #0]
 8005dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc6:	6959      	ldr	r1, [r3, #20]
 8005dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dca:	895a      	ldrh	r2, [r3, #10]
 8005dcc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005dd0:	f005 fba4 	bl	800b51c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dd6:	69da      	ldr	r2, [r3, #28]
 8005dd8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ddc:	441a      	add	r2, r3
 8005dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005de0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005de4:	695a      	ldr	r2, [r3, #20]
 8005de6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005dea:	441a      	add	r2, r3
 8005dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <PCD_EP_ISR_Handler+0x4f2>
 8005df8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d206      	bcs.n	8005e12 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	4619      	mov	r1, r3
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f007 fa28 	bl	800d260 <HAL_PCD_DataOutStageCallback>
 8005e10:	e005      	b.n	8005e1e <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f003 feac 	bl	8009b76 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005e1e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 8122 	beq.w	8006070 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8005e2c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	4613      	mov	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	3304      	adds	r3, #4
 8005e40:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	461a      	mov	r2, r3
 8005e48:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	461a      	mov	r2, r3
 8005e66:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	441a      	add	r2, r3
 8005e6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e80:	78db      	ldrb	r3, [r3, #3]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	f040 80a2 	bne.w	8005fcc <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8005e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e90:	7b1b      	ldrb	r3, [r3, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 8093 	beq.w	8005fbe <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005e98:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d046      	beq.n	8005f32 <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d126      	bne.n	8005efa <PCD_EP_ISR_Handler+0x5e8>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	4413      	add	r3, r2
 8005ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	00da      	lsls	r2, r3, #3
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	4413      	add	r3, r2
 8005ece:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ed2:	623b      	str	r3, [r7, #32]
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	801a      	strh	r2, [r3, #0]
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	801a      	strh	r2, [r3, #0]
 8005ef8:	e061      	b.n	8005fbe <PCD_EP_ISR_Handler+0x6ac>
 8005efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005efc:	785b      	ldrb	r3, [r3, #1]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d15d      	bne.n	8005fbe <PCD_EP_ISR_Handler+0x6ac>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	461a      	mov	r2, r3
 8005f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f16:	4413      	add	r3, r2
 8005f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	00da      	lsls	r2, r3, #3
 8005f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f22:	4413      	add	r3, r2
 8005f24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	801a      	strh	r2, [r3, #0]
 8005f30:	e045      	b.n	8005fbe <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f3a:	785b      	ldrb	r3, [r3, #1]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d126      	bne.n	8005f8e <PCD_EP_ISR_Handler+0x67c>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	637b      	str	r3, [r7, #52]	; 0x34
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f54:	4413      	add	r3, r2
 8005f56:	637b      	str	r3, [r7, #52]	; 0x34
 8005f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	00da      	lsls	r2, r3, #3
 8005f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f60:	4413      	add	r3, r2
 8005f62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f66:	633b      	str	r3, [r7, #48]	; 0x30
 8005f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	801a      	strh	r2, [r3, #0]
 8005f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8a:	801a      	strh	r2, [r3, #0]
 8005f8c:	e017      	b.n	8005fbe <PCD_EP_ISR_Handler+0x6ac>
 8005f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f90:	785b      	ldrb	r3, [r3, #1]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d113      	bne.n	8005fbe <PCD_EP_ISR_Handler+0x6ac>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa4:	4413      	add	r3, r2
 8005fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	00da      	lsls	r2, r3, #3
 8005fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fba:	2200      	movs	r2, #0
 8005fbc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f007 f966 	bl	800d296 <HAL_PCD_DataInStageCallback>
 8005fca:	e051      	b.n	8006070 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005fcc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d144      	bne.n	8006062 <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	4413      	add	r3, r2
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6812      	ldr	r2, [r2, #0]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ffc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006002:	699a      	ldr	r2, [r3, #24]
 8006004:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006008:	429a      	cmp	r2, r3
 800600a:	d907      	bls.n	800601c <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 800600c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800600e:	699a      	ldr	r2, [r3, #24]
 8006010:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006014:	1ad2      	subs	r2, r2, r3
 8006016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006018:	619a      	str	r2, [r3, #24]
 800601a:	e002      	b.n	8006022 <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 800601c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800601e:	2200      	movs	r2, #0
 8006020:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d106      	bne.n	8006038 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800602a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	4619      	mov	r1, r3
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f007 f930 	bl	800d296 <HAL_PCD_DataInStageCallback>
 8006036:	e01b      	b.n	8006070 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800603a:	695a      	ldr	r2, [r3, #20]
 800603c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006040:	441a      	add	r2, r3
 8006042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006044:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006048:	69da      	ldr	r2, [r3, #28]
 800604a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800604e:	441a      	add	r2, r3
 8006050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006052:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800605a:	4618      	mov	r0, r3
 800605c:	f003 fd8b 	bl	8009b76 <USB_EPStartXfer>
 8006060:	e006      	b.n	8006070 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006062:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006066:	461a      	mov	r2, r3
 8006068:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f917 	bl	800629e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006078:	b29b      	uxth	r3, r3
 800607a:	b21b      	sxth	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	f6ff ac4d 	blt.w	800591c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3758      	adds	r7, #88	; 0x58
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	4613      	mov	r3, r2
 8006098:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800609a:	88fb      	ldrh	r3, [r7, #6]
 800609c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d07c      	beq.n	800619e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	461a      	mov	r2, r3
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	4413      	add	r3, r2
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	6812      	ldr	r2, [r2, #0]
 80060bc:	4413      	add	r3, r2
 80060be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060c8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	699a      	ldr	r2, [r3, #24]
 80060ce:	8b7b      	ldrh	r3, [r7, #26]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d306      	bcc.n	80060e2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	699a      	ldr	r2, [r3, #24]
 80060d8:	8b7b      	ldrh	r3, [r7, #26]
 80060da:	1ad2      	subs	r2, r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	619a      	str	r2, [r3, #24]
 80060e0:	e002      	b.n	80060e8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	2200      	movs	r2, #0
 80060e6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d123      	bne.n	8006138 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	461a      	mov	r2, r3
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	b29b      	uxth	r3, r3
 8006102:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610a:	833b      	strh	r3, [r7, #24]
 800610c:	8b3b      	ldrh	r3, [r7, #24]
 800610e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006112:	833b      	strh	r3, [r7, #24]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	461a      	mov	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	441a      	add	r2, r3
 8006122:	8b3b      	ldrh	r3, [r7, #24]
 8006124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800612c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006134:	b29b      	uxth	r3, r3
 8006136:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006138:	88fb      	ldrh	r3, [r7, #6]
 800613a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613e:	2b00      	cmp	r3, #0
 8006140:	d01f      	beq.n	8006182 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	b29b      	uxth	r3, r3
 8006154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615c:	82fb      	strh	r3, [r7, #22]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	441a      	add	r2, r3
 800616c:	8afb      	ldrh	r3, [r7, #22]
 800616e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800617a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800617e:	b29b      	uxth	r3, r3
 8006180:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006182:	8b7b      	ldrh	r3, [r7, #26]
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 8085 	beq.w	8006294 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6818      	ldr	r0, [r3, #0]
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	6959      	ldr	r1, [r3, #20]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	891a      	ldrh	r2, [r3, #8]
 8006196:	8b7b      	ldrh	r3, [r7, #26]
 8006198:	f005 f9c0 	bl	800b51c <USB_ReadPMA>
 800619c:	e07a      	b.n	8006294 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	461a      	mov	r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	4413      	add	r3, r2
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	6812      	ldr	r2, [r2, #0]
 80061b6:	4413      	add	r3, r2
 80061b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061c2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	699a      	ldr	r2, [r3, #24]
 80061c8:	8b7b      	ldrh	r3, [r7, #26]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d306      	bcc.n	80061dc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	699a      	ldr	r2, [r3, #24]
 80061d2:	8b7b      	ldrh	r3, [r7, #26]
 80061d4:	1ad2      	subs	r2, r2, r3
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	619a      	str	r2, [r3, #24]
 80061da:	e002      	b.n	80061e2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	2200      	movs	r2, #0
 80061e0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d123      	bne.n	8006232 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006204:	83fb      	strh	r3, [r7, #30]
 8006206:	8bfb      	ldrh	r3, [r7, #30]
 8006208:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800620c:	83fb      	strh	r3, [r7, #30]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	441a      	add	r2, r3
 800621c:	8bfb      	ldrh	r3, [r7, #30]
 800621e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800622a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800622e:	b29b      	uxth	r3, r3
 8006230:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006232:	88fb      	ldrh	r3, [r7, #6]
 8006234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	d11f      	bne.n	800627c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	461a      	mov	r2, r3
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	b29b      	uxth	r3, r3
 800624e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006256:	83bb      	strh	r3, [r7, #28]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	461a      	mov	r2, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	441a      	add	r2, r3
 8006266:	8bbb      	ldrh	r3, [r7, #28]
 8006268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800626c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006274:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006278:	b29b      	uxth	r3, r3
 800627a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800627c:	8b7b      	ldrh	r3, [r7, #26]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d008      	beq.n	8006294 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	6959      	ldr	r1, [r3, #20]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	895a      	ldrh	r2, [r3, #10]
 800628e:	8b7b      	ldrh	r3, [r7, #26]
 8006290:	f005 f944 	bl	800b51c <USB_ReadPMA>
    }
  }

  return count;
 8006294:	8b7b      	ldrh	r3, [r7, #26]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3720      	adds	r7, #32
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b0a2      	sub	sp, #136	; 0x88
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	4613      	mov	r3, r2
 80062aa:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80062ac:	88fb      	ldrh	r3, [r7, #6]
 80062ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 81c5 	beq.w	8006642 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	461a      	mov	r2, r3
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	4413      	add	r3, r2
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	6812      	ldr	r2, [r2, #0]
 80062d0:	4413      	add	r3, r2
 80062d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	699a      	ldr	r2, [r3, #24]
 80062e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d907      	bls.n	80062fc <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	699a      	ldr	r2, [r3, #24]
 80062f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80062f4:	1ad2      	subs	r2, r2, r3
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	619a      	str	r2, [r3, #24]
 80062fa:	e002      	b.n	8006302 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2200      	movs	r2, #0
 8006300:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	2b00      	cmp	r3, #0
 8006308:	f040 80b9 	bne.w	800647e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	785b      	ldrb	r3, [r3, #1]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d126      	bne.n	8006362 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	62bb      	str	r3, [r7, #40]	; 0x28
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006322:	b29b      	uxth	r3, r3
 8006324:	461a      	mov	r2, r3
 8006326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006328:	4413      	add	r3, r2
 800632a:	62bb      	str	r3, [r7, #40]	; 0x28
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	00da      	lsls	r2, r3, #3
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006334:	4413      	add	r3, r2
 8006336:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800633a:	627b      	str	r3, [r7, #36]	; 0x24
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	b29b      	uxth	r3, r3
 8006342:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006346:	b29a      	uxth	r2, r3
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	801a      	strh	r2, [r3, #0]
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	b29b      	uxth	r3, r3
 8006352:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006356:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800635a:	b29a      	uxth	r2, r3
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	801a      	strh	r2, [r3, #0]
 8006360:	e01a      	b.n	8006398 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	785b      	ldrb	r3, [r3, #1]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d116      	bne.n	8006398 <HAL_PCD_EP_DB_Transmit+0xfa>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	633b      	str	r3, [r7, #48]	; 0x30
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006378:	b29b      	uxth	r3, r3
 800637a:	461a      	mov	r2, r3
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	4413      	add	r3, r2
 8006380:	633b      	str	r3, [r7, #48]	; 0x30
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	00da      	lsls	r2, r3, #3
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	4413      	add	r3, r2
 800638c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006394:	2200      	movs	r2, #0
 8006396:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	623b      	str	r3, [r7, #32]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	785b      	ldrb	r3, [r3, #1]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d126      	bne.n	80063f4 <HAL_PCD_EP_DB_Transmit+0x156>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	61bb      	str	r3, [r7, #24]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	461a      	mov	r2, r3
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	4413      	add	r3, r2
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	00da      	lsls	r2, r3, #3
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	4413      	add	r3, r2
 80063c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063cc:	617b      	str	r3, [r7, #20]
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063d8:	b29a      	uxth	r2, r3
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	801a      	strh	r2, [r3, #0]
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	801a      	strh	r2, [r3, #0]
 80063f2:	e017      	b.n	8006424 <HAL_PCD_EP_DB_Transmit+0x186>
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	785b      	ldrb	r3, [r3, #1]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d113      	bne.n	8006424 <HAL_PCD_EP_DB_Transmit+0x186>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006404:	b29b      	uxth	r3, r3
 8006406:	461a      	mov	r2, r3
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	4413      	add	r3, r2
 800640c:	623b      	str	r3, [r7, #32]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	00da      	lsls	r2, r3, #3
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	4413      	add	r3, r2
 8006418:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800641c:	61fb      	str	r3, [r7, #28]
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	2200      	movs	r2, #0
 8006422:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	4619      	mov	r1, r3
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f006 ff33 	bl	800d296 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006430:	88fb      	ldrh	r3, [r7, #6]
 8006432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 82d2 	beq.w	80069e0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	b29b      	uxth	r3, r3
 800644e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006456:	827b      	strh	r3, [r7, #18]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	461a      	mov	r2, r3
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	441a      	add	r2, r3
 8006466:	8a7b      	ldrh	r3, [r7, #18]
 8006468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800646c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006470:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006478:	b29b      	uxth	r3, r3
 800647a:	8013      	strh	r3, [r2, #0]
 800647c:	e2b0      	b.n	80069e0 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800647e:	88fb      	ldrh	r3, [r7, #6]
 8006480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d021      	beq.n	80064cc <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	b29b      	uxth	r3, r3
 800649a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800649e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	441a      	add	r2, r3
 80064b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80064b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	f040 8284 	bne.w	80069e0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	695a      	ldr	r2, [r3, #20]
 80064dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80064e0:	441a      	add	r2, r3
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	69da      	ldr	r2, [r3, #28]
 80064ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80064ee:	441a      	add	r2, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	6a1a      	ldr	r2, [r3, #32]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d309      	bcc.n	8006514 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	6a1a      	ldr	r2, [r3, #32]
 800650a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800650c:	1ad2      	subs	r2, r2, r3
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	621a      	str	r2, [r3, #32]
 8006512:	e015      	b.n	8006540 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d107      	bne.n	800652c <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800651c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006520:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800652a:	e009      	b.n	8006540 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2200      	movs	r2, #0
 800653e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	785b      	ldrb	r3, [r3, #1]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d155      	bne.n	80065f4 <HAL_PCD_EP_DB_Transmit+0x356>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	63bb      	str	r3, [r7, #56]	; 0x38
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006556:	b29b      	uxth	r3, r3
 8006558:	461a      	mov	r2, r3
 800655a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655c:	4413      	add	r3, r2
 800655e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	00da      	lsls	r2, r3, #3
 8006566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006568:	4413      	add	r3, r2
 800656a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800656e:	637b      	str	r3, [r7, #52]	; 0x34
 8006570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006572:	2b3e      	cmp	r3, #62	; 0x3e
 8006574:	d916      	bls.n	80065a4 <HAL_PCD_EP_DB_Transmit+0x306>
 8006576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006578:	095b      	lsrs	r3, r3, #5
 800657a:	64bb      	str	r3, [r7, #72]	; 0x48
 800657c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800657e:	f003 031f 	and.w	r3, r3, #31
 8006582:	2b00      	cmp	r3, #0
 8006584:	d102      	bne.n	800658c <HAL_PCD_EP_DB_Transmit+0x2ee>
 8006586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006588:	3b01      	subs	r3, #1
 800658a:	64bb      	str	r3, [r7, #72]	; 0x48
 800658c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800658e:	b29b      	uxth	r3, r3
 8006590:	029b      	lsls	r3, r3, #10
 8006592:	b29b      	uxth	r3, r3
 8006594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659c:	b29a      	uxth	r2, r3
 800659e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a0:	801a      	strh	r2, [r3, #0]
 80065a2:	e043      	b.n	800662c <HAL_PCD_EP_DB_Transmit+0x38e>
 80065a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d112      	bne.n	80065d0 <HAL_PCD_EP_DB_Transmit+0x332>
 80065aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b8:	801a      	strh	r2, [r3, #0]
 80065ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065cc:	801a      	strh	r2, [r3, #0]
 80065ce:	e02d      	b.n	800662c <HAL_PCD_EP_DB_Transmit+0x38e>
 80065d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d2:	085b      	lsrs	r3, r3, #1
 80065d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80065d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <HAL_PCD_EP_DB_Transmit+0x348>
 80065e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e2:	3301      	adds	r3, #1
 80065e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80065e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	029b      	lsls	r3, r3, #10
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f0:	801a      	strh	r2, [r3, #0]
 80065f2:	e01b      	b.n	800662c <HAL_PCD_EP_DB_Transmit+0x38e>
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	785b      	ldrb	r3, [r3, #1]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d117      	bne.n	800662c <HAL_PCD_EP_DB_Transmit+0x38e>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	643b      	str	r3, [r7, #64]	; 0x40
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800660a:	b29b      	uxth	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006610:	4413      	add	r3, r2
 8006612:	643b      	str	r3, [r7, #64]	; 0x40
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	00da      	lsls	r2, r3, #3
 800661a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800661c:	4413      	add	r3, r2
 800661e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006622:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006626:	b29a      	uxth	r2, r3
 8006628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6818      	ldr	r0, [r3, #0]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	6959      	ldr	r1, [r3, #20]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	891a      	ldrh	r2, [r3, #8]
 8006638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800663a:	b29b      	uxth	r3, r3
 800663c:	f004 ff2c 	bl	800b498 <USB_WritePMA>
 8006640:	e1ce      	b.n	80069e0 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800664a:	b29b      	uxth	r3, r3
 800664c:	461a      	mov	r2, r3
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	4413      	add	r3, r2
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	6812      	ldr	r2, [r2, #0]
 800665a:	4413      	add	r3, r2
 800665c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006666:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	699a      	ldr	r2, [r3, #24]
 800666e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006672:	429a      	cmp	r2, r3
 8006674:	d307      	bcc.n	8006686 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	699a      	ldr	r2, [r3, #24]
 800667a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800667e:	1ad2      	subs	r2, r2, r3
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	619a      	str	r2, [r3, #24]
 8006684:	e002      	b.n	800668c <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2200      	movs	r2, #0
 800668a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	2b00      	cmp	r3, #0
 8006692:	f040 80c4 	bne.w	800681e <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	785b      	ldrb	r3, [r3, #1]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d126      	bne.n	80066ec <HAL_PCD_EP_DB_Transmit+0x44e>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	461a      	mov	r2, r3
 80066b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066b2:	4413      	add	r3, r2
 80066b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	00da      	lsls	r2, r3, #3
 80066bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066be:	4413      	add	r3, r2
 80066c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066c4:	667b      	str	r3, [r7, #100]	; 0x64
 80066c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066d4:	801a      	strh	r2, [r3, #0]
 80066d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066e8:	801a      	strh	r2, [r3, #0]
 80066ea:	e01a      	b.n	8006722 <HAL_PCD_EP_DB_Transmit+0x484>
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	785b      	ldrb	r3, [r3, #1]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d116      	bne.n	8006722 <HAL_PCD_EP_DB_Transmit+0x484>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	673b      	str	r3, [r7, #112]	; 0x70
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006702:	b29b      	uxth	r3, r3
 8006704:	461a      	mov	r2, r3
 8006706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006708:	4413      	add	r3, r2
 800670a:	673b      	str	r3, [r7, #112]	; 0x70
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	00da      	lsls	r2, r3, #3
 8006712:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006714:	4413      	add	r3, r2
 8006716:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800671a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800671c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800671e:	2200      	movs	r2, #0
 8006720:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	785b      	ldrb	r3, [r3, #1]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d12f      	bne.n	8006790 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006740:	b29b      	uxth	r3, r3
 8006742:	461a      	mov	r2, r3
 8006744:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006748:	4413      	add	r3, r2
 800674a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	00da      	lsls	r2, r3, #3
 8006754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006758:	4413      	add	r3, r2
 800675a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800675e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006762:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006766:	881b      	ldrh	r3, [r3, #0]
 8006768:	b29b      	uxth	r3, r3
 800676a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800676e:	b29a      	uxth	r2, r3
 8006770:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006774:	801a      	strh	r2, [r3, #0]
 8006776:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	b29b      	uxth	r3, r3
 800677e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006786:	b29a      	uxth	r2, r3
 8006788:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800678c:	801a      	strh	r2, [r3, #0]
 800678e:	e017      	b.n	80067c0 <HAL_PCD_EP_DB_Transmit+0x522>
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	785b      	ldrb	r3, [r3, #1]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d113      	bne.n	80067c0 <HAL_PCD_EP_DB_Transmit+0x522>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067a6:	4413      	add	r3, r2
 80067a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	00da      	lsls	r2, r3, #3
 80067b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067b2:	4413      	add	r3, r2
 80067b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80067ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067bc:	2200      	movs	r2, #0
 80067be:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	4619      	mov	r1, r3
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f006 fd65 	bl	800d296 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80067cc:	88fb      	ldrh	r3, [r7, #6]
 80067ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f040 8104 	bne.w	80069e0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	461a      	mov	r2, r3
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	461a      	mov	r2, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	441a      	add	r2, r3
 8006804:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800680c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006818:	b29b      	uxth	r3, r3
 800681a:	8013      	strh	r3, [r2, #0]
 800681c:	e0e0      	b.n	80069e0 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800681e:	88fb      	ldrh	r3, [r7, #6]
 8006820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d121      	bne.n	800686c <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	b29b      	uxth	r3, r3
 800683a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800683e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006842:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	441a      	add	r2, r3
 8006854:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006858:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800685c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006860:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006868:	b29b      	uxth	r3, r3
 800686a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006872:	2b01      	cmp	r3, #1
 8006874:	f040 80b4 	bne.w	80069e0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	695a      	ldr	r2, [r3, #20]
 800687c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006880:	441a      	add	r2, r3
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	69da      	ldr	r2, [r3, #28]
 800688a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800688e:	441a      	add	r2, r3
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	6a1a      	ldr	r2, [r3, #32]
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	429a      	cmp	r2, r3
 800689e:	d309      	bcc.n	80068b4 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	6a1a      	ldr	r2, [r3, #32]
 80068aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068ac:	1ad2      	subs	r2, r2, r3
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	621a      	str	r2, [r3, #32]
 80068b2:	e015      	b.n	80068e0 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d107      	bne.n	80068cc <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80068bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80068c0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80068ca:	e009      	b.n	80068e0 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2200      	movs	r2, #0
 80068d6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	663b      	str	r3, [r7, #96]	; 0x60
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	785b      	ldrb	r3, [r3, #1]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d155      	bne.n	800699a <HAL_PCD_EP_DB_Transmit+0x6fc>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	461a      	mov	r2, r3
 8006900:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006902:	4413      	add	r3, r2
 8006904:	65bb      	str	r3, [r7, #88]	; 0x58
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	00da      	lsls	r2, r3, #3
 800690c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800690e:	4413      	add	r3, r2
 8006910:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006914:	657b      	str	r3, [r7, #84]	; 0x54
 8006916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006918:	2b3e      	cmp	r3, #62	; 0x3e
 800691a:	d916      	bls.n	800694a <HAL_PCD_EP_DB_Transmit+0x6ac>
 800691c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800691e:	095b      	lsrs	r3, r3, #5
 8006920:	677b      	str	r3, [r7, #116]	; 0x74
 8006922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006924:	f003 031f 	and.w	r3, r3, #31
 8006928:	2b00      	cmp	r3, #0
 800692a:	d102      	bne.n	8006932 <HAL_PCD_EP_DB_Transmit+0x694>
 800692c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800692e:	3b01      	subs	r3, #1
 8006930:	677b      	str	r3, [r7, #116]	; 0x74
 8006932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006934:	b29b      	uxth	r3, r3
 8006936:	029b      	lsls	r3, r3, #10
 8006938:	b29b      	uxth	r3, r3
 800693a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800693e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006942:	b29a      	uxth	r2, r3
 8006944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006946:	801a      	strh	r2, [r3, #0]
 8006948:	e040      	b.n	80069cc <HAL_PCD_EP_DB_Transmit+0x72e>
 800694a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800694c:	2b00      	cmp	r3, #0
 800694e:	d112      	bne.n	8006976 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8006950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	b29b      	uxth	r3, r3
 8006956:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800695a:	b29a      	uxth	r2, r3
 800695c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800695e:	801a      	strh	r2, [r3, #0]
 8006960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	b29b      	uxth	r3, r3
 8006966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800696a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800696e:	b29a      	uxth	r2, r3
 8006970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006972:	801a      	strh	r2, [r3, #0]
 8006974:	e02a      	b.n	80069cc <HAL_PCD_EP_DB_Transmit+0x72e>
 8006976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006978:	085b      	lsrs	r3, r3, #1
 800697a:	677b      	str	r3, [r7, #116]	; 0x74
 800697c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <HAL_PCD_EP_DB_Transmit+0x6ee>
 8006986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006988:	3301      	adds	r3, #1
 800698a:	677b      	str	r3, [r7, #116]	; 0x74
 800698c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800698e:	b29b      	uxth	r3, r3
 8006990:	029b      	lsls	r3, r3, #10
 8006992:	b29a      	uxth	r2, r3
 8006994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006996:	801a      	strh	r2, [r3, #0]
 8006998:	e018      	b.n	80069cc <HAL_PCD_EP_DB_Transmit+0x72e>
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	785b      	ldrb	r3, [r3, #1]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d114      	bne.n	80069cc <HAL_PCD_EP_DB_Transmit+0x72e>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	461a      	mov	r2, r3
 80069ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069b0:	4413      	add	r3, r2
 80069b2:	663b      	str	r3, [r7, #96]	; 0x60
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	00da      	lsls	r2, r3, #3
 80069ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069bc:	4413      	add	r3, r2
 80069be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069ca:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6818      	ldr	r0, [r3, #0]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	6959      	ldr	r1, [r3, #20]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	895a      	ldrh	r2, [r3, #10]
 80069d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069da:	b29b      	uxth	r3, r3
 80069dc:	f004 fd5c 	bl	800b498 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	461a      	mov	r2, r3
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069fa:	823b      	strh	r3, [r7, #16]
 80069fc:	8a3b      	ldrh	r3, [r7, #16]
 80069fe:	f083 0310 	eor.w	r3, r3, #16
 8006a02:	823b      	strh	r3, [r7, #16]
 8006a04:	8a3b      	ldrh	r3, [r7, #16]
 8006a06:	f083 0320 	eor.w	r3, r3, #32
 8006a0a:	823b      	strh	r3, [r7, #16]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	441a      	add	r2, r3
 8006a1a:	8a3b      	ldrh	r3, [r7, #16]
 8006a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3788      	adds	r7, #136	; 0x88
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b087      	sub	sp, #28
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	607b      	str	r3, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	817b      	strh	r3, [r7, #10]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006a4c:	897b      	ldrh	r3, [r7, #10]
 8006a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00c      	beq.n	8006a72 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a58:	897b      	ldrh	r3, [r7, #10]
 8006a5a:	f003 0307 	and.w	r3, r3, #7
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	4613      	mov	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	617b      	str	r3, [r7, #20]
 8006a70:	e00a      	b.n	8006a88 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006a72:	897a      	ldrh	r2, [r7, #10]
 8006a74:	4613      	mov	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	00db      	lsls	r3, r3, #3
 8006a7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	3304      	adds	r3, #4
 8006a86:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006a88:	893b      	ldrh	r3, [r7, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d107      	bne.n	8006a9e <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2200      	movs	r2, #0
 8006a92:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	80da      	strh	r2, [r3, #6]
 8006a9c:	e00b      	b.n	8006ab6 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	0c1b      	lsrs	r3, r3, #16
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	371c      	adds	r7, #28
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	f043 0301 	orr.w	r3, r3, #1
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f043 0302 	orr.w	r3, r3, #2
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3714      	adds	r7, #20
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006b1c:	4b04      	ldr	r3, [pc, #16]	; (8006b30 <HAL_PWREx_GetVoltageRange+0x18>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	40007000 	.word	0x40007000

08006b34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b42:	d130      	bne.n	8006ba6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b44:	4b23      	ldr	r3, [pc, #140]	; (8006bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b50:	d038      	beq.n	8006bc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b52:	4b20      	ldr	r3, [pc, #128]	; (8006bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006b5a:	4a1e      	ldr	r2, [pc, #120]	; (8006bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006b5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006b62:	4b1d      	ldr	r3, [pc, #116]	; (8006bd8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2232      	movs	r2, #50	; 0x32
 8006b68:	fb02 f303 	mul.w	r3, r2, r3
 8006b6c:	4a1b      	ldr	r2, [pc, #108]	; (8006bdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b72:	0c9b      	lsrs	r3, r3, #18
 8006b74:	3301      	adds	r3, #1
 8006b76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b78:	e002      	b.n	8006b80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b80:	4b14      	ldr	r3, [pc, #80]	; (8006bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b8c:	d102      	bne.n	8006b94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1f2      	bne.n	8006b7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006b94:	4b0f      	ldr	r3, [pc, #60]	; (8006bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba0:	d110      	bne.n	8006bc4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e00f      	b.n	8006bc6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ba6:	4b0b      	ldr	r3, [pc, #44]	; (8006bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bb2:	d007      	beq.n	8006bc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006bb4:	4b07      	ldr	r3, [pc, #28]	; (8006bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006bbc:	4a05      	ldr	r2, [pc, #20]	; (8006bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006bc2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	40007000 	.word	0x40007000
 8006bd8:	20000000 	.word	0x20000000
 8006bdc:	431bde83 	.word	0x431bde83

08006be0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006be0:	b480      	push	{r7}
 8006be2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006be4:	4b05      	ldr	r3, [pc, #20]	; (8006bfc <HAL_PWREx_EnableVddUSB+0x1c>)
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	4a04      	ldr	r2, [pc, #16]	; (8006bfc <HAL_PWREx_EnableVddUSB+0x1c>)
 8006bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006bee:	6053      	str	r3, [r2, #4]
}
 8006bf0:	bf00      	nop
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	40007000 	.word	0x40007000

08006c00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b088      	sub	sp, #32
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d102      	bne.n	8006c14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	f000 bc02 	b.w	8007418 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c14:	4b96      	ldr	r3, [pc, #600]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f003 030c 	and.w	r3, r3, #12
 8006c1c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c1e:	4b94      	ldr	r3, [pc, #592]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0310 	and.w	r3, r3, #16
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 80e4 	beq.w	8006dfe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d007      	beq.n	8006c4c <HAL_RCC_OscConfig+0x4c>
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	2b0c      	cmp	r3, #12
 8006c40:	f040 808b 	bne.w	8006d5a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	f040 8087 	bne.w	8006d5a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006c4c:	4b88      	ldr	r3, [pc, #544]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d005      	beq.n	8006c64 <HAL_RCC_OscConfig+0x64>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e3d9      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a1a      	ldr	r2, [r3, #32]
 8006c68:	4b81      	ldr	r3, [pc, #516]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0308 	and.w	r3, r3, #8
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <HAL_RCC_OscConfig+0x7e>
 8006c74:	4b7e      	ldr	r3, [pc, #504]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c7c:	e005      	b.n	8006c8a <HAL_RCC_OscConfig+0x8a>
 8006c7e:	4b7c      	ldr	r3, [pc, #496]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c84:	091b      	lsrs	r3, r3, #4
 8006c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d223      	bcs.n	8006cd6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 fd60 	bl	8007758 <RCC_SetFlashLatencyFromMSIRange>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e3ba      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ca2:	4b73      	ldr	r3, [pc, #460]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a72      	ldr	r2, [pc, #456]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006ca8:	f043 0308 	orr.w	r3, r3, #8
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	4b70      	ldr	r3, [pc, #448]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	496d      	ldr	r1, [pc, #436]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006cc0:	4b6b      	ldr	r3, [pc, #428]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	69db      	ldr	r3, [r3, #28]
 8006ccc:	021b      	lsls	r3, r3, #8
 8006cce:	4968      	ldr	r1, [pc, #416]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	604b      	str	r3, [r1, #4]
 8006cd4:	e025      	b.n	8006d22 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006cd6:	4b66      	ldr	r3, [pc, #408]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a65      	ldr	r2, [pc, #404]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006cdc:	f043 0308 	orr.w	r3, r3, #8
 8006ce0:	6013      	str	r3, [r2, #0]
 8006ce2:	4b63      	ldr	r3, [pc, #396]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	4960      	ldr	r1, [pc, #384]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006cf4:	4b5e      	ldr	r3, [pc, #376]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	69db      	ldr	r3, [r3, #28]
 8006d00:	021b      	lsls	r3, r3, #8
 8006d02:	495b      	ldr	r1, [pc, #364]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d109      	bne.n	8006d22 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 fd20 	bl	8007758 <RCC_SetFlashLatencyFromMSIRange>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e37a      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d22:	f000 fc81 	bl	8007628 <HAL_RCC_GetSysClockFreq>
 8006d26:	4602      	mov	r2, r0
 8006d28:	4b51      	ldr	r3, [pc, #324]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	091b      	lsrs	r3, r3, #4
 8006d2e:	f003 030f 	and.w	r3, r3, #15
 8006d32:	4950      	ldr	r1, [pc, #320]	; (8006e74 <HAL_RCC_OscConfig+0x274>)
 8006d34:	5ccb      	ldrb	r3, [r1, r3]
 8006d36:	f003 031f 	and.w	r3, r3, #31
 8006d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3e:	4a4e      	ldr	r2, [pc, #312]	; (8006e78 <HAL_RCC_OscConfig+0x278>)
 8006d40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006d42:	4b4e      	ldr	r3, [pc, #312]	; (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fc fbc2 	bl	80034d0 <HAL_InitTick>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d052      	beq.n	8006dfc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
 8006d58:	e35e      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d032      	beq.n	8006dc8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006d62:	4b43      	ldr	r3, [pc, #268]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a42      	ldr	r2, [pc, #264]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006d68:	f043 0301 	orr.w	r3, r3, #1
 8006d6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006d6e:	f7fc fbff 	bl	8003570 <HAL_GetTick>
 8006d72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d74:	e008      	b.n	8006d88 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006d76:	f7fc fbfb 	bl	8003570 <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d901      	bls.n	8006d88 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e347      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d88:	4b39      	ldr	r3, [pc, #228]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d0f0      	beq.n	8006d76 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d94:	4b36      	ldr	r3, [pc, #216]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a35      	ldr	r2, [pc, #212]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006d9a:	f043 0308 	orr.w	r3, r3, #8
 8006d9e:	6013      	str	r3, [r2, #0]
 8006da0:	4b33      	ldr	r3, [pc, #204]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	4930      	ldr	r1, [pc, #192]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006db2:	4b2f      	ldr	r3, [pc, #188]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	021b      	lsls	r3, r3, #8
 8006dc0:	492b      	ldr	r1, [pc, #172]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	604b      	str	r3, [r1, #4]
 8006dc6:	e01a      	b.n	8006dfe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006dc8:	4b29      	ldr	r3, [pc, #164]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a28      	ldr	r2, [pc, #160]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006dce:	f023 0301 	bic.w	r3, r3, #1
 8006dd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006dd4:	f7fc fbcc 	bl	8003570 <HAL_GetTick>
 8006dd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006dda:	e008      	b.n	8006dee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ddc:	f7fc fbc8 	bl	8003570 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d901      	bls.n	8006dee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e314      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006dee:	4b20      	ldr	r3, [pc, #128]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1f0      	bne.n	8006ddc <HAL_RCC_OscConfig+0x1dc>
 8006dfa:	e000      	b.n	8006dfe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006dfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d073      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	2b08      	cmp	r3, #8
 8006e0e:	d005      	beq.n	8006e1c <HAL_RCC_OscConfig+0x21c>
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	2b0c      	cmp	r3, #12
 8006e14:	d10e      	bne.n	8006e34 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	d10b      	bne.n	8006e34 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e1c:	4b14      	ldr	r3, [pc, #80]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d063      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x2f0>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d15f      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e2f1      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e3c:	d106      	bne.n	8006e4c <HAL_RCC_OscConfig+0x24c>
 8006e3e:	4b0c      	ldr	r3, [pc, #48]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a0b      	ldr	r2, [pc, #44]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e48:	6013      	str	r3, [r2, #0]
 8006e4a:	e025      	b.n	8006e98 <HAL_RCC_OscConfig+0x298>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e54:	d114      	bne.n	8006e80 <HAL_RCC_OscConfig+0x280>
 8006e56:	4b06      	ldr	r3, [pc, #24]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a05      	ldr	r2, [pc, #20]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e60:	6013      	str	r3, [r2, #0]
 8006e62:	4b03      	ldr	r3, [pc, #12]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a02      	ldr	r2, [pc, #8]	; (8006e70 <HAL_RCC_OscConfig+0x270>)
 8006e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e6c:	6013      	str	r3, [r2, #0]
 8006e6e:	e013      	b.n	8006e98 <HAL_RCC_OscConfig+0x298>
 8006e70:	40021000 	.word	0x40021000
 8006e74:	0800d9c8 	.word	0x0800d9c8
 8006e78:	20000000 	.word	0x20000000
 8006e7c:	20000004 	.word	0x20000004
 8006e80:	4ba0      	ldr	r3, [pc, #640]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a9f      	ldr	r2, [pc, #636]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8006e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	4b9d      	ldr	r3, [pc, #628]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a9c      	ldr	r2, [pc, #624]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8006e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d013      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea0:	f7fc fb66 	bl	8003570 <HAL_GetTick>
 8006ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ea6:	e008      	b.n	8006eba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ea8:	f7fc fb62 	bl	8003570 <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	2b64      	cmp	r3, #100	; 0x64
 8006eb4:	d901      	bls.n	8006eba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e2ae      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006eba:	4b92      	ldr	r3, [pc, #584]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d0f0      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x2a8>
 8006ec6:	e014      	b.n	8006ef2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec8:	f7fc fb52 	bl	8003570 <HAL_GetTick>
 8006ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ece:	e008      	b.n	8006ee2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ed0:	f7fc fb4e 	bl	8003570 <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b64      	cmp	r3, #100	; 0x64
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e29a      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ee2:	4b88      	ldr	r3, [pc, #544]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1f0      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x2d0>
 8006eee:	e000      	b.n	8006ef2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d060      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	2b04      	cmp	r3, #4
 8006f02:	d005      	beq.n	8006f10 <HAL_RCC_OscConfig+0x310>
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	2b0c      	cmp	r3, #12
 8006f08:	d119      	bne.n	8006f3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d116      	bne.n	8006f3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f10:	4b7c      	ldr	r3, [pc, #496]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d005      	beq.n	8006f28 <HAL_RCC_OscConfig+0x328>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e277      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f28:	4b76      	ldr	r3, [pc, #472]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	061b      	lsls	r3, r3, #24
 8006f36:	4973      	ldr	r1, [pc, #460]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f3c:	e040      	b.n	8006fc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d023      	beq.n	8006f8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f46:	4b6f      	ldr	r3, [pc, #444]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a6e      	ldr	r2, [pc, #440]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8006f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f52:	f7fc fb0d 	bl	8003570 <HAL_GetTick>
 8006f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f58:	e008      	b.n	8006f6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f5a:	f7fc fb09 	bl	8003570 <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d901      	bls.n	8006f6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e255      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f6c:	4b65      	ldr	r3, [pc, #404]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d0f0      	beq.n	8006f5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f78:	4b62      	ldr	r3, [pc, #392]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	061b      	lsls	r3, r3, #24
 8006f86:	495f      	ldr	r1, [pc, #380]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	604b      	str	r3, [r1, #4]
 8006f8c:	e018      	b.n	8006fc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f8e:	4b5d      	ldr	r3, [pc, #372]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a5c      	ldr	r2, [pc, #368]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8006f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f9a:	f7fc fae9 	bl	8003570 <HAL_GetTick>
 8006f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006fa0:	e008      	b.n	8006fb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fa2:	f7fc fae5 	bl	8003570 <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d901      	bls.n	8006fb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e231      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006fb4:	4b53      	ldr	r3, [pc, #332]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1f0      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0308 	and.w	r3, r3, #8
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d03c      	beq.n	8007046 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d01c      	beq.n	800700e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fd4:	4b4b      	ldr	r3, [pc, #300]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8006fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fda:	4a4a      	ldr	r2, [pc, #296]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8006fdc:	f043 0301 	orr.w	r3, r3, #1
 8006fe0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fe4:	f7fc fac4 	bl	8003570 <HAL_GetTick>
 8006fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fec:	f7fc fac0 	bl	8003570 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e20c      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ffe:	4b41      	ldr	r3, [pc, #260]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8007000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d0ef      	beq.n	8006fec <HAL_RCC_OscConfig+0x3ec>
 800700c:	e01b      	b.n	8007046 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800700e:	4b3d      	ldr	r3, [pc, #244]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8007010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007014:	4a3b      	ldr	r2, [pc, #236]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8007016:	f023 0301 	bic.w	r3, r3, #1
 800701a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800701e:	f7fc faa7 	bl	8003570 <HAL_GetTick>
 8007022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007024:	e008      	b.n	8007038 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007026:	f7fc faa3 	bl	8003570 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d901      	bls.n	8007038 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e1ef      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007038:	4b32      	ldr	r3, [pc, #200]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 800703a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1ef      	bne.n	8007026 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0304 	and.w	r3, r3, #4
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 80a6 	beq.w	80071a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007054:	2300      	movs	r3, #0
 8007056:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007058:	4b2a      	ldr	r3, [pc, #168]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 800705a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800705c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10d      	bne.n	8007080 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007064:	4b27      	ldr	r3, [pc, #156]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8007066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007068:	4a26      	ldr	r2, [pc, #152]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 800706a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800706e:	6593      	str	r3, [r2, #88]	; 0x58
 8007070:	4b24      	ldr	r3, [pc, #144]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 8007072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007078:	60bb      	str	r3, [r7, #8]
 800707a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800707c:	2301      	movs	r3, #1
 800707e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007080:	4b21      	ldr	r3, [pc, #132]	; (8007108 <HAL_RCC_OscConfig+0x508>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007088:	2b00      	cmp	r3, #0
 800708a:	d118      	bne.n	80070be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800708c:	4b1e      	ldr	r3, [pc, #120]	; (8007108 <HAL_RCC_OscConfig+0x508>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a1d      	ldr	r2, [pc, #116]	; (8007108 <HAL_RCC_OscConfig+0x508>)
 8007092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007096:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007098:	f7fc fa6a 	bl	8003570 <HAL_GetTick>
 800709c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800709e:	e008      	b.n	80070b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070a0:	f7fc fa66 	bl	8003570 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d901      	bls.n	80070b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e1b2      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070b2:	4b15      	ldr	r3, [pc, #84]	; (8007108 <HAL_RCC_OscConfig+0x508>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0f0      	beq.n	80070a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d108      	bne.n	80070d8 <HAL_RCC_OscConfig+0x4d8>
 80070c6:	4b0f      	ldr	r3, [pc, #60]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 80070c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070cc:	4a0d      	ldr	r2, [pc, #52]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 80070ce:	f043 0301 	orr.w	r3, r3, #1
 80070d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070d6:	e029      	b.n	800712c <HAL_RCC_OscConfig+0x52c>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	2b05      	cmp	r3, #5
 80070de:	d115      	bne.n	800710c <HAL_RCC_OscConfig+0x50c>
 80070e0:	4b08      	ldr	r3, [pc, #32]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 80070e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e6:	4a07      	ldr	r2, [pc, #28]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 80070e8:	f043 0304 	orr.w	r3, r3, #4
 80070ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070f0:	4b04      	ldr	r3, [pc, #16]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 80070f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f6:	4a03      	ldr	r2, [pc, #12]	; (8007104 <HAL_RCC_OscConfig+0x504>)
 80070f8:	f043 0301 	orr.w	r3, r3, #1
 80070fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007100:	e014      	b.n	800712c <HAL_RCC_OscConfig+0x52c>
 8007102:	bf00      	nop
 8007104:	40021000 	.word	0x40021000
 8007108:	40007000 	.word	0x40007000
 800710c:	4b9a      	ldr	r3, [pc, #616]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 800710e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007112:	4a99      	ldr	r2, [pc, #612]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 8007114:	f023 0301 	bic.w	r3, r3, #1
 8007118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800711c:	4b96      	ldr	r3, [pc, #600]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 800711e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007122:	4a95      	ldr	r2, [pc, #596]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 8007124:	f023 0304 	bic.w	r3, r3, #4
 8007128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d016      	beq.n	8007162 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007134:	f7fc fa1c 	bl	8003570 <HAL_GetTick>
 8007138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800713a:	e00a      	b.n	8007152 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800713c:	f7fc fa18 	bl	8003570 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	f241 3288 	movw	r2, #5000	; 0x1388
 800714a:	4293      	cmp	r3, r2
 800714c:	d901      	bls.n	8007152 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e162      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007152:	4b89      	ldr	r3, [pc, #548]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 8007154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0ed      	beq.n	800713c <HAL_RCC_OscConfig+0x53c>
 8007160:	e015      	b.n	800718e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007162:	f7fc fa05 	bl	8003570 <HAL_GetTick>
 8007166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007168:	e00a      	b.n	8007180 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800716a:	f7fc fa01 	bl	8003570 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	f241 3288 	movw	r2, #5000	; 0x1388
 8007178:	4293      	cmp	r3, r2
 800717a:	d901      	bls.n	8007180 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e14b      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007180:	4b7d      	ldr	r3, [pc, #500]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 8007182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1ed      	bne.n	800716a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800718e:	7ffb      	ldrb	r3, [r7, #31]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d105      	bne.n	80071a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007194:	4b78      	ldr	r3, [pc, #480]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 8007196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007198:	4a77      	ldr	r2, [pc, #476]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 800719a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800719e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0320 	and.w	r3, r3, #32
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d03c      	beq.n	8007226 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d01c      	beq.n	80071ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071b4:	4b70      	ldr	r3, [pc, #448]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 80071b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071ba:	4a6f      	ldr	r2, [pc, #444]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 80071bc:	f043 0301 	orr.w	r3, r3, #1
 80071c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071c4:	f7fc f9d4 	bl	8003570 <HAL_GetTick>
 80071c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80071ca:	e008      	b.n	80071de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071cc:	f7fc f9d0 	bl	8003570 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d901      	bls.n	80071de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e11c      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80071de:	4b66      	ldr	r3, [pc, #408]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 80071e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071e4:	f003 0302 	and.w	r3, r3, #2
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d0ef      	beq.n	80071cc <HAL_RCC_OscConfig+0x5cc>
 80071ec:	e01b      	b.n	8007226 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80071ee:	4b62      	ldr	r3, [pc, #392]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 80071f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071f4:	4a60      	ldr	r2, [pc, #384]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 80071f6:	f023 0301 	bic.w	r3, r3, #1
 80071fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071fe:	f7fc f9b7 	bl	8003570 <HAL_GetTick>
 8007202:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007204:	e008      	b.n	8007218 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007206:	f7fc f9b3 	bl	8003570 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	2b02      	cmp	r3, #2
 8007212:	d901      	bls.n	8007218 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e0ff      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007218:	4b57      	ldr	r3, [pc, #348]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 800721a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800721e:	f003 0302 	and.w	r3, r3, #2
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1ef      	bne.n	8007206 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 80f3 	beq.w	8007416 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007234:	2b02      	cmp	r3, #2
 8007236:	f040 80c9 	bne.w	80073cc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800723a:	4b4f      	ldr	r3, [pc, #316]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f003 0203 	and.w	r2, r3, #3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	429a      	cmp	r2, r3
 800724c:	d12c      	bne.n	80072a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007258:	3b01      	subs	r3, #1
 800725a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800725c:	429a      	cmp	r2, r3
 800725e:	d123      	bne.n	80072a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800726a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800726c:	429a      	cmp	r2, r3
 800726e:	d11b      	bne.n	80072a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800727c:	429a      	cmp	r2, r3
 800727e:	d113      	bne.n	80072a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728a:	085b      	lsrs	r3, r3, #1
 800728c:	3b01      	subs	r3, #1
 800728e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007290:	429a      	cmp	r2, r3
 8007292:	d109      	bne.n	80072a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729e:	085b      	lsrs	r3, r3, #1
 80072a0:	3b01      	subs	r3, #1
 80072a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d06b      	beq.n	8007380 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	2b0c      	cmp	r3, #12
 80072ac:	d062      	beq.n	8007374 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80072ae:	4b32      	ldr	r3, [pc, #200]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e0ac      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80072be:	4b2e      	ldr	r3, [pc, #184]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a2d      	ldr	r2, [pc, #180]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 80072c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80072ca:	f7fc f951 	bl	8003570 <HAL_GetTick>
 80072ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072d0:	e008      	b.n	80072e4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072d2:	f7fc f94d 	bl	8003570 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d901      	bls.n	80072e4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e099      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072e4:	4b24      	ldr	r3, [pc, #144]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1f0      	bne.n	80072d2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072f0:	4b21      	ldr	r3, [pc, #132]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 80072f2:	68da      	ldr	r2, [r3, #12]
 80072f4:	4b21      	ldr	r3, [pc, #132]	; (800737c <HAL_RCC_OscConfig+0x77c>)
 80072f6:	4013      	ands	r3, r2
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007300:	3a01      	subs	r2, #1
 8007302:	0112      	lsls	r2, r2, #4
 8007304:	4311      	orrs	r1, r2
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800730a:	0212      	lsls	r2, r2, #8
 800730c:	4311      	orrs	r1, r2
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007312:	0852      	lsrs	r2, r2, #1
 8007314:	3a01      	subs	r2, #1
 8007316:	0552      	lsls	r2, r2, #21
 8007318:	4311      	orrs	r1, r2
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800731e:	0852      	lsrs	r2, r2, #1
 8007320:	3a01      	subs	r2, #1
 8007322:	0652      	lsls	r2, r2, #25
 8007324:	4311      	orrs	r1, r2
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800732a:	06d2      	lsls	r2, r2, #27
 800732c:	430a      	orrs	r2, r1
 800732e:	4912      	ldr	r1, [pc, #72]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 8007330:	4313      	orrs	r3, r2
 8007332:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007334:	4b10      	ldr	r3, [pc, #64]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a0f      	ldr	r2, [pc, #60]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 800733a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800733e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007340:	4b0d      	ldr	r3, [pc, #52]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	4a0c      	ldr	r2, [pc, #48]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 8007346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800734a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800734c:	f7fc f910 	bl	8003570 <HAL_GetTick>
 8007350:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007352:	e008      	b.n	8007366 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007354:	f7fc f90c 	bl	8003570 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b02      	cmp	r3, #2
 8007360:	d901      	bls.n	8007366 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e058      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007366:	4b04      	ldr	r3, [pc, #16]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d0f0      	beq.n	8007354 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007372:	e050      	b.n	8007416 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e04f      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
 8007378:	40021000 	.word	0x40021000
 800737c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007380:	4b27      	ldr	r3, [pc, #156]	; (8007420 <HAL_RCC_OscConfig+0x820>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d144      	bne.n	8007416 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800738c:	4b24      	ldr	r3, [pc, #144]	; (8007420 <HAL_RCC_OscConfig+0x820>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a23      	ldr	r2, [pc, #140]	; (8007420 <HAL_RCC_OscConfig+0x820>)
 8007392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007396:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007398:	4b21      	ldr	r3, [pc, #132]	; (8007420 <HAL_RCC_OscConfig+0x820>)
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	4a20      	ldr	r2, [pc, #128]	; (8007420 <HAL_RCC_OscConfig+0x820>)
 800739e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80073a4:	f7fc f8e4 	bl	8003570 <HAL_GetTick>
 80073a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073aa:	e008      	b.n	80073be <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073ac:	f7fc f8e0 	bl	8003570 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d901      	bls.n	80073be <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e02c      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073be:	4b18      	ldr	r3, [pc, #96]	; (8007420 <HAL_RCC_OscConfig+0x820>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0f0      	beq.n	80073ac <HAL_RCC_OscConfig+0x7ac>
 80073ca:	e024      	b.n	8007416 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	2b0c      	cmp	r3, #12
 80073d0:	d01f      	beq.n	8007412 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073d2:	4b13      	ldr	r3, [pc, #76]	; (8007420 <HAL_RCC_OscConfig+0x820>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a12      	ldr	r2, [pc, #72]	; (8007420 <HAL_RCC_OscConfig+0x820>)
 80073d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073de:	f7fc f8c7 	bl	8003570 <HAL_GetTick>
 80073e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073e4:	e008      	b.n	80073f8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073e6:	f7fc f8c3 	bl	8003570 <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d901      	bls.n	80073f8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e00f      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073f8:	4b09      	ldr	r3, [pc, #36]	; (8007420 <HAL_RCC_OscConfig+0x820>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1f0      	bne.n	80073e6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007404:	4b06      	ldr	r3, [pc, #24]	; (8007420 <HAL_RCC_OscConfig+0x820>)
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	4905      	ldr	r1, [pc, #20]	; (8007420 <HAL_RCC_OscConfig+0x820>)
 800740a:	4b06      	ldr	r3, [pc, #24]	; (8007424 <HAL_RCC_OscConfig+0x824>)
 800740c:	4013      	ands	r3, r2
 800740e:	60cb      	str	r3, [r1, #12]
 8007410:	e001      	b.n	8007416 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e000      	b.n	8007418 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3720      	adds	r7, #32
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	40021000 	.word	0x40021000
 8007424:	feeefffc 	.word	0xfeeefffc

08007428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e0e7      	b.n	800760c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800743c:	4b75      	ldr	r3, [pc, #468]	; (8007614 <HAL_RCC_ClockConfig+0x1ec>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0307 	and.w	r3, r3, #7
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	429a      	cmp	r2, r3
 8007448:	d910      	bls.n	800746c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800744a:	4b72      	ldr	r3, [pc, #456]	; (8007614 <HAL_RCC_ClockConfig+0x1ec>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f023 0207 	bic.w	r2, r3, #7
 8007452:	4970      	ldr	r1, [pc, #448]	; (8007614 <HAL_RCC_ClockConfig+0x1ec>)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	4313      	orrs	r3, r2
 8007458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800745a:	4b6e      	ldr	r3, [pc, #440]	; (8007614 <HAL_RCC_ClockConfig+0x1ec>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0307 	and.w	r3, r3, #7
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	429a      	cmp	r2, r3
 8007466:	d001      	beq.n	800746c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e0cf      	b.n	800760c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0302 	and.w	r3, r3, #2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d010      	beq.n	800749a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689a      	ldr	r2, [r3, #8]
 800747c:	4b66      	ldr	r3, [pc, #408]	; (8007618 <HAL_RCC_ClockConfig+0x1f0>)
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007484:	429a      	cmp	r2, r3
 8007486:	d908      	bls.n	800749a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007488:	4b63      	ldr	r3, [pc, #396]	; (8007618 <HAL_RCC_ClockConfig+0x1f0>)
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	4960      	ldr	r1, [pc, #384]	; (8007618 <HAL_RCC_ClockConfig+0x1f0>)
 8007496:	4313      	orrs	r3, r2
 8007498:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d04c      	beq.n	8007540 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	2b03      	cmp	r3, #3
 80074ac:	d107      	bne.n	80074be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074ae:	4b5a      	ldr	r3, [pc, #360]	; (8007618 <HAL_RCC_ClockConfig+0x1f0>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d121      	bne.n	80074fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e0a6      	b.n	800760c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d107      	bne.n	80074d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074c6:	4b54      	ldr	r3, [pc, #336]	; (8007618 <HAL_RCC_ClockConfig+0x1f0>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d115      	bne.n	80074fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e09a      	b.n	800760c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d107      	bne.n	80074ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80074de:	4b4e      	ldr	r3, [pc, #312]	; (8007618 <HAL_RCC_ClockConfig+0x1f0>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d109      	bne.n	80074fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e08e      	b.n	800760c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074ee:	4b4a      	ldr	r3, [pc, #296]	; (8007618 <HAL_RCC_ClockConfig+0x1f0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d101      	bne.n	80074fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e086      	b.n	800760c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074fe:	4b46      	ldr	r3, [pc, #280]	; (8007618 <HAL_RCC_ClockConfig+0x1f0>)
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f023 0203 	bic.w	r2, r3, #3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	4943      	ldr	r1, [pc, #268]	; (8007618 <HAL_RCC_ClockConfig+0x1f0>)
 800750c:	4313      	orrs	r3, r2
 800750e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007510:	f7fc f82e 	bl	8003570 <HAL_GetTick>
 8007514:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007516:	e00a      	b.n	800752e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007518:	f7fc f82a 	bl	8003570 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	f241 3288 	movw	r2, #5000	; 0x1388
 8007526:	4293      	cmp	r3, r2
 8007528:	d901      	bls.n	800752e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e06e      	b.n	800760c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800752e:	4b3a      	ldr	r3, [pc, #232]	; (8007618 <HAL_RCC_ClockConfig+0x1f0>)
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f003 020c 	and.w	r2, r3, #12
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	429a      	cmp	r2, r3
 800753e:	d1eb      	bne.n	8007518 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d010      	beq.n	800756e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	4b31      	ldr	r3, [pc, #196]	; (8007618 <HAL_RCC_ClockConfig+0x1f0>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007558:	429a      	cmp	r2, r3
 800755a:	d208      	bcs.n	800756e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800755c:	4b2e      	ldr	r3, [pc, #184]	; (8007618 <HAL_RCC_ClockConfig+0x1f0>)
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	492b      	ldr	r1, [pc, #172]	; (8007618 <HAL_RCC_ClockConfig+0x1f0>)
 800756a:	4313      	orrs	r3, r2
 800756c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800756e:	4b29      	ldr	r3, [pc, #164]	; (8007614 <HAL_RCC_ClockConfig+0x1ec>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0307 	and.w	r3, r3, #7
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	429a      	cmp	r2, r3
 800757a:	d210      	bcs.n	800759e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800757c:	4b25      	ldr	r3, [pc, #148]	; (8007614 <HAL_RCC_ClockConfig+0x1ec>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f023 0207 	bic.w	r2, r3, #7
 8007584:	4923      	ldr	r1, [pc, #140]	; (8007614 <HAL_RCC_ClockConfig+0x1ec>)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	4313      	orrs	r3, r2
 800758a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800758c:	4b21      	ldr	r3, [pc, #132]	; (8007614 <HAL_RCC_ClockConfig+0x1ec>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0307 	and.w	r3, r3, #7
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	429a      	cmp	r2, r3
 8007598:	d001      	beq.n	800759e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e036      	b.n	800760c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0304 	and.w	r3, r3, #4
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d008      	beq.n	80075bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075aa:	4b1b      	ldr	r3, [pc, #108]	; (8007618 <HAL_RCC_ClockConfig+0x1f0>)
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	4918      	ldr	r1, [pc, #96]	; (8007618 <HAL_RCC_ClockConfig+0x1f0>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0308 	and.w	r3, r3, #8
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d009      	beq.n	80075dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075c8:	4b13      	ldr	r3, [pc, #76]	; (8007618 <HAL_RCC_ClockConfig+0x1f0>)
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	4910      	ldr	r1, [pc, #64]	; (8007618 <HAL_RCC_ClockConfig+0x1f0>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80075dc:	f000 f824 	bl	8007628 <HAL_RCC_GetSysClockFreq>
 80075e0:	4602      	mov	r2, r0
 80075e2:	4b0d      	ldr	r3, [pc, #52]	; (8007618 <HAL_RCC_ClockConfig+0x1f0>)
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	091b      	lsrs	r3, r3, #4
 80075e8:	f003 030f 	and.w	r3, r3, #15
 80075ec:	490b      	ldr	r1, [pc, #44]	; (800761c <HAL_RCC_ClockConfig+0x1f4>)
 80075ee:	5ccb      	ldrb	r3, [r1, r3]
 80075f0:	f003 031f 	and.w	r3, r3, #31
 80075f4:	fa22 f303 	lsr.w	r3, r2, r3
 80075f8:	4a09      	ldr	r2, [pc, #36]	; (8007620 <HAL_RCC_ClockConfig+0x1f8>)
 80075fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80075fc:	4b09      	ldr	r3, [pc, #36]	; (8007624 <HAL_RCC_ClockConfig+0x1fc>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4618      	mov	r0, r3
 8007602:	f7fb ff65 	bl	80034d0 <HAL_InitTick>
 8007606:	4603      	mov	r3, r0
 8007608:	72fb      	strb	r3, [r7, #11]

  return status;
 800760a:	7afb      	ldrb	r3, [r7, #11]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	40022000 	.word	0x40022000
 8007618:	40021000 	.word	0x40021000
 800761c:	0800d9c8 	.word	0x0800d9c8
 8007620:	20000000 	.word	0x20000000
 8007624:	20000004 	.word	0x20000004

08007628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007628:	b480      	push	{r7}
 800762a:	b089      	sub	sp, #36	; 0x24
 800762c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	61fb      	str	r3, [r7, #28]
 8007632:	2300      	movs	r3, #0
 8007634:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007636:	4b3e      	ldr	r3, [pc, #248]	; (8007730 <HAL_RCC_GetSysClockFreq+0x108>)
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f003 030c 	and.w	r3, r3, #12
 800763e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007640:	4b3b      	ldr	r3, [pc, #236]	; (8007730 <HAL_RCC_GetSysClockFreq+0x108>)
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	f003 0303 	and.w	r3, r3, #3
 8007648:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d005      	beq.n	800765c <HAL_RCC_GetSysClockFreq+0x34>
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	2b0c      	cmp	r3, #12
 8007654:	d121      	bne.n	800769a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2b01      	cmp	r3, #1
 800765a:	d11e      	bne.n	800769a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800765c:	4b34      	ldr	r3, [pc, #208]	; (8007730 <HAL_RCC_GetSysClockFreq+0x108>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0308 	and.w	r3, r3, #8
 8007664:	2b00      	cmp	r3, #0
 8007666:	d107      	bne.n	8007678 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007668:	4b31      	ldr	r3, [pc, #196]	; (8007730 <HAL_RCC_GetSysClockFreq+0x108>)
 800766a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800766e:	0a1b      	lsrs	r3, r3, #8
 8007670:	f003 030f 	and.w	r3, r3, #15
 8007674:	61fb      	str	r3, [r7, #28]
 8007676:	e005      	b.n	8007684 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007678:	4b2d      	ldr	r3, [pc, #180]	; (8007730 <HAL_RCC_GetSysClockFreq+0x108>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	091b      	lsrs	r3, r3, #4
 800767e:	f003 030f 	and.w	r3, r3, #15
 8007682:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007684:	4a2b      	ldr	r2, [pc, #172]	; (8007734 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800768c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10d      	bne.n	80076b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007698:	e00a      	b.n	80076b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	2b04      	cmp	r3, #4
 800769e:	d102      	bne.n	80076a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80076a0:	4b25      	ldr	r3, [pc, #148]	; (8007738 <HAL_RCC_GetSysClockFreq+0x110>)
 80076a2:	61bb      	str	r3, [r7, #24]
 80076a4:	e004      	b.n	80076b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	2b08      	cmp	r3, #8
 80076aa:	d101      	bne.n	80076b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80076ac:	4b23      	ldr	r3, [pc, #140]	; (800773c <HAL_RCC_GetSysClockFreq+0x114>)
 80076ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	2b0c      	cmp	r3, #12
 80076b4:	d134      	bne.n	8007720 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076b6:	4b1e      	ldr	r3, [pc, #120]	; (8007730 <HAL_RCC_GetSysClockFreq+0x108>)
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f003 0303 	and.w	r3, r3, #3
 80076be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d003      	beq.n	80076ce <HAL_RCC_GetSysClockFreq+0xa6>
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2b03      	cmp	r3, #3
 80076ca:	d003      	beq.n	80076d4 <HAL_RCC_GetSysClockFreq+0xac>
 80076cc:	e005      	b.n	80076da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80076ce:	4b1a      	ldr	r3, [pc, #104]	; (8007738 <HAL_RCC_GetSysClockFreq+0x110>)
 80076d0:	617b      	str	r3, [r7, #20]
      break;
 80076d2:	e005      	b.n	80076e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80076d4:	4b19      	ldr	r3, [pc, #100]	; (800773c <HAL_RCC_GetSysClockFreq+0x114>)
 80076d6:	617b      	str	r3, [r7, #20]
      break;
 80076d8:	e002      	b.n	80076e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	617b      	str	r3, [r7, #20]
      break;
 80076de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80076e0:	4b13      	ldr	r3, [pc, #76]	; (8007730 <HAL_RCC_GetSysClockFreq+0x108>)
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	091b      	lsrs	r3, r3, #4
 80076e6:	f003 0307 	and.w	r3, r3, #7
 80076ea:	3301      	adds	r3, #1
 80076ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80076ee:	4b10      	ldr	r3, [pc, #64]	; (8007730 <HAL_RCC_GetSysClockFreq+0x108>)
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	0a1b      	lsrs	r3, r3, #8
 80076f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076f8:	697a      	ldr	r2, [r7, #20]
 80076fa:	fb03 f202 	mul.w	r2, r3, r2
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	fbb2 f3f3 	udiv	r3, r2, r3
 8007704:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007706:	4b0a      	ldr	r3, [pc, #40]	; (8007730 <HAL_RCC_GetSysClockFreq+0x108>)
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	0e5b      	lsrs	r3, r3, #25
 800770c:	f003 0303 	and.w	r3, r3, #3
 8007710:	3301      	adds	r3, #1
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	fbb2 f3f3 	udiv	r3, r2, r3
 800771e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007720:	69bb      	ldr	r3, [r7, #24]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3724      	adds	r7, #36	; 0x24
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	40021000 	.word	0x40021000
 8007734:	0800d9d8 	.word	0x0800d9d8
 8007738:	00f42400 	.word	0x00f42400
 800773c:	007a1200 	.word	0x007a1200

08007740 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007740:	b480      	push	{r7}
 8007742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007744:	4b03      	ldr	r3, [pc, #12]	; (8007754 <HAL_RCC_GetHCLKFreq+0x14>)
 8007746:	681b      	ldr	r3, [r3, #0]
}
 8007748:	4618      	mov	r0, r3
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	20000000 	.word	0x20000000

08007758 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007760:	2300      	movs	r3, #0
 8007762:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007764:	4b2a      	ldr	r3, [pc, #168]	; (8007810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d003      	beq.n	8007778 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007770:	f7ff f9d2 	bl	8006b18 <HAL_PWREx_GetVoltageRange>
 8007774:	6178      	str	r0, [r7, #20]
 8007776:	e014      	b.n	80077a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007778:	4b25      	ldr	r3, [pc, #148]	; (8007810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800777a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800777c:	4a24      	ldr	r2, [pc, #144]	; (8007810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800777e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007782:	6593      	str	r3, [r2, #88]	; 0x58
 8007784:	4b22      	ldr	r3, [pc, #136]	; (8007810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007790:	f7ff f9c2 	bl	8006b18 <HAL_PWREx_GetVoltageRange>
 8007794:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007796:	4b1e      	ldr	r3, [pc, #120]	; (8007810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800779a:	4a1d      	ldr	r2, [pc, #116]	; (8007810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800779c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077a8:	d10b      	bne.n	80077c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b80      	cmp	r3, #128	; 0x80
 80077ae:	d919      	bls.n	80077e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2ba0      	cmp	r3, #160	; 0xa0
 80077b4:	d902      	bls.n	80077bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80077b6:	2302      	movs	r3, #2
 80077b8:	613b      	str	r3, [r7, #16]
 80077ba:	e013      	b.n	80077e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80077bc:	2301      	movs	r3, #1
 80077be:	613b      	str	r3, [r7, #16]
 80077c0:	e010      	b.n	80077e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b80      	cmp	r3, #128	; 0x80
 80077c6:	d902      	bls.n	80077ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80077c8:	2303      	movs	r3, #3
 80077ca:	613b      	str	r3, [r7, #16]
 80077cc:	e00a      	b.n	80077e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b80      	cmp	r3, #128	; 0x80
 80077d2:	d102      	bne.n	80077da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80077d4:	2302      	movs	r3, #2
 80077d6:	613b      	str	r3, [r7, #16]
 80077d8:	e004      	b.n	80077e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b70      	cmp	r3, #112	; 0x70
 80077de:	d101      	bne.n	80077e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80077e0:	2301      	movs	r3, #1
 80077e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80077e4:	4b0b      	ldr	r3, [pc, #44]	; (8007814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f023 0207 	bic.w	r2, r3, #7
 80077ec:	4909      	ldr	r1, [pc, #36]	; (8007814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80077f4:	4b07      	ldr	r3, [pc, #28]	; (8007814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0307 	and.w	r3, r3, #7
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d001      	beq.n	8007806 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e000      	b.n	8007808 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3718      	adds	r7, #24
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	40021000 	.word	0x40021000
 8007814:	40022000 	.word	0x40022000

08007818 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007820:	2300      	movs	r3, #0
 8007822:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007824:	2300      	movs	r3, #0
 8007826:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007830:	2b00      	cmp	r3, #0
 8007832:	d031      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007838:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800783c:	d01a      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800783e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007842:	d814      	bhi.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007844:	2b00      	cmp	r3, #0
 8007846:	d009      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007848:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800784c:	d10f      	bne.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800784e:	4b5d      	ldr	r3, [pc, #372]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	4a5c      	ldr	r2, [pc, #368]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007858:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800785a:	e00c      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	3304      	adds	r3, #4
 8007860:	2100      	movs	r1, #0
 8007862:	4618      	mov	r0, r3
 8007864:	f000 fa22 	bl	8007cac <RCCEx_PLLSAI1_Config>
 8007868:	4603      	mov	r3, r0
 800786a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800786c:	e003      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	74fb      	strb	r3, [r7, #19]
      break;
 8007872:	e000      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007874:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007876:	7cfb      	ldrb	r3, [r7, #19]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10b      	bne.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800787c:	4b51      	ldr	r3, [pc, #324]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800787e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007882:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800788a:	494e      	ldr	r1, [pc, #312]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800788c:	4313      	orrs	r3, r2
 800788e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007892:	e001      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007894:	7cfb      	ldrb	r3, [r7, #19]
 8007896:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 809e 	beq.w	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078a6:	2300      	movs	r3, #0
 80078a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80078aa:	4b46      	ldr	r3, [pc, #280]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80078ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80078b6:	2301      	movs	r3, #1
 80078b8:	e000      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80078ba:	2300      	movs	r3, #0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00d      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078c0:	4b40      	ldr	r3, [pc, #256]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80078c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078c4:	4a3f      	ldr	r2, [pc, #252]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80078c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078ca:	6593      	str	r3, [r2, #88]	; 0x58
 80078cc:	4b3d      	ldr	r3, [pc, #244]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80078ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078d4:	60bb      	str	r3, [r7, #8]
 80078d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078d8:	2301      	movs	r3, #1
 80078da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078dc:	4b3a      	ldr	r3, [pc, #232]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a39      	ldr	r2, [pc, #228]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80078e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078e8:	f7fb fe42 	bl	8003570 <HAL_GetTick>
 80078ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80078ee:	e009      	b.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078f0:	f7fb fe3e 	bl	8003570 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d902      	bls.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	74fb      	strb	r3, [r7, #19]
        break;
 8007902:	e005      	b.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007904:	4b30      	ldr	r3, [pc, #192]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800790c:	2b00      	cmp	r3, #0
 800790e:	d0ef      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007910:	7cfb      	ldrb	r3, [r7, #19]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d15a      	bne.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007916:	4b2b      	ldr	r3, [pc, #172]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800791c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007920:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d01e      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	429a      	cmp	r2, r3
 8007930:	d019      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007932:	4b24      	ldr	r3, [pc, #144]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800793c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800793e:	4b21      	ldr	r3, [pc, #132]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007944:	4a1f      	ldr	r2, [pc, #124]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800794a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800794e:	4b1d      	ldr	r3, [pc, #116]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007954:	4a1b      	ldr	r2, [pc, #108]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800795a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800795e:	4a19      	ldr	r2, [pc, #100]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f003 0301 	and.w	r3, r3, #1
 800796c:	2b00      	cmp	r3, #0
 800796e:	d016      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007970:	f7fb fdfe 	bl	8003570 <HAL_GetTick>
 8007974:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007976:	e00b      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007978:	f7fb fdfa 	bl	8003570 <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	f241 3288 	movw	r2, #5000	; 0x1388
 8007986:	4293      	cmp	r3, r2
 8007988:	d902      	bls.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	74fb      	strb	r3, [r7, #19]
            break;
 800798e:	e006      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007990:	4b0c      	ldr	r3, [pc, #48]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d0ec      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800799e:	7cfb      	ldrb	r3, [r7, #19]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10b      	bne.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079a4:	4b07      	ldr	r3, [pc, #28]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80079a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b2:	4904      	ldr	r1, [pc, #16]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80079ba:	e009      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80079bc:	7cfb      	ldrb	r3, [r7, #19]
 80079be:	74bb      	strb	r3, [r7, #18]
 80079c0:	e006      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80079c2:	bf00      	nop
 80079c4:	40021000 	.word	0x40021000
 80079c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079cc:	7cfb      	ldrb	r3, [r7, #19]
 80079ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079d0:	7c7b      	ldrb	r3, [r7, #17]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d105      	bne.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079d6:	4b8d      	ldr	r3, [pc, #564]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80079d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079da:	4a8c      	ldr	r2, [pc, #560]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80079dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80079ee:	4b87      	ldr	r3, [pc, #540]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80079f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079f4:	f023 0203 	bic.w	r2, r3, #3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	4983      	ldr	r1, [pc, #524]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0302 	and.w	r3, r3, #2
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00a      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a10:	4b7e      	ldr	r3, [pc, #504]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a16:	f023 020c 	bic.w	r2, r3, #12
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	497b      	ldr	r1, [pc, #492]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0304 	and.w	r3, r3, #4
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a32:	4b76      	ldr	r3, [pc, #472]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a40:	4972      	ldr	r1, [pc, #456]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0320 	and.w	r3, r3, #32
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00a      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a54:	4b6d      	ldr	r3, [pc, #436]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a62:	496a      	ldr	r1, [pc, #424]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007a64:	4313      	orrs	r3, r2
 8007a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00a      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a76:	4b65      	ldr	r3, [pc, #404]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a84:	4961      	ldr	r1, [pc, #388]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00a      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a98:	4b5c      	ldr	r3, [pc, #368]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	4959      	ldr	r1, [pc, #356]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00a      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007aba:	4b54      	ldr	r3, [pc, #336]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac8:	4950      	ldr	r1, [pc, #320]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00a      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007adc:	4b4b      	ldr	r3, [pc, #300]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aea:	4948      	ldr	r1, [pc, #288]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00a      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007afe:	4b43      	ldr	r3, [pc, #268]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0c:	493f      	ldr	r1, [pc, #252]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d028      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b20:	4b3a      	ldr	r3, [pc, #232]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b2e:	4937      	ldr	r1, [pc, #220]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007b30:	4313      	orrs	r3, r2
 8007b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b3e:	d106      	bne.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b40:	4b32      	ldr	r3, [pc, #200]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	4a31      	ldr	r2, [pc, #196]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b4a:	60d3      	str	r3, [r2, #12]
 8007b4c:	e011      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b56:	d10c      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 f8a4 	bl	8007cac <RCCEx_PLLSAI1_Config>
 8007b64:	4603      	mov	r3, r0
 8007b66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007b68:	7cfb      	ldrb	r3, [r7, #19]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8007b6e:	7cfb      	ldrb	r3, [r7, #19]
 8007b70:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d028      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007b7e:	4b23      	ldr	r3, [pc, #140]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b8c:	491f      	ldr	r1, [pc, #124]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b9c:	d106      	bne.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b9e:	4b1b      	ldr	r3, [pc, #108]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	4a1a      	ldr	r2, [pc, #104]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007ba4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ba8:	60d3      	str	r3, [r2, #12]
 8007baa:	e011      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bb4:	d10c      	bne.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3304      	adds	r3, #4
 8007bba:	2101      	movs	r1, #1
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 f875 	bl	8007cac <RCCEx_PLLSAI1_Config>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007bc6:	7cfb      	ldrb	r3, [r7, #19]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007bcc:	7cfb      	ldrb	r3, [r7, #19]
 8007bce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d02b      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007bdc:	4b0b      	ldr	r3, [pc, #44]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bea:	4908      	ldr	r1, [pc, #32]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bfa:	d109      	bne.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bfc:	4b03      	ldr	r3, [pc, #12]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	4a02      	ldr	r2, [pc, #8]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8007c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c06:	60d3      	str	r3, [r2, #12]
 8007c08:	e014      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007c0a:	bf00      	nop
 8007c0c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c18:	d10c      	bne.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	2101      	movs	r1, #1
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 f843 	bl	8007cac <RCCEx_PLLSAI1_Config>
 8007c26:	4603      	mov	r3, r0
 8007c28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007c2a:	7cfb      	ldrb	r3, [r7, #19]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d001      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8007c30:	7cfb      	ldrb	r3, [r7, #19]
 8007c32:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d01c      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c40:	4b19      	ldr	r3, [pc, #100]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c4e:	4916      	ldr	r1, [pc, #88]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c5e:	d10c      	bne.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	3304      	adds	r3, #4
 8007c64:	2102      	movs	r1, #2
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 f820 	bl	8007cac <RCCEx_PLLSAI1_Config>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007c70:	7cfb      	ldrb	r3, [r7, #19]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8007c76:	7cfb      	ldrb	r3, [r7, #19]
 8007c78:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c86:	4b08      	ldr	r3, [pc, #32]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c8c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c94:	4904      	ldr	r1, [pc, #16]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007c9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3718      	adds	r7, #24
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	40021000 	.word	0x40021000

08007cac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007cba:	4b74      	ldr	r3, [pc, #464]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	f003 0303 	and.w	r3, r3, #3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d018      	beq.n	8007cf8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007cc6:	4b71      	ldr	r3, [pc, #452]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	f003 0203 	and.w	r2, r3, #3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d10d      	bne.n	8007cf2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
       ||
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d009      	beq.n	8007cf2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007cde:	4b6b      	ldr	r3, [pc, #428]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	091b      	lsrs	r3, r3, #4
 8007ce4:	f003 0307 	and.w	r3, r3, #7
 8007ce8:	1c5a      	adds	r2, r3, #1
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685b      	ldr	r3, [r3, #4]
       ||
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d047      	beq.n	8007d82 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	73fb      	strb	r3, [r7, #15]
 8007cf6:	e044      	b.n	8007d82 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d018      	beq.n	8007d32 <RCCEx_PLLSAI1_Config+0x86>
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d825      	bhi.n	8007d50 <RCCEx_PLLSAI1_Config+0xa4>
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d002      	beq.n	8007d0e <RCCEx_PLLSAI1_Config+0x62>
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d009      	beq.n	8007d20 <RCCEx_PLLSAI1_Config+0x74>
 8007d0c:	e020      	b.n	8007d50 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007d0e:	4b5f      	ldr	r3, [pc, #380]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0302 	and.w	r3, r3, #2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d11d      	bne.n	8007d56 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d1e:	e01a      	b.n	8007d56 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007d20:	4b5a      	ldr	r3, [pc, #360]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d116      	bne.n	8007d5a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d30:	e013      	b.n	8007d5a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007d32:	4b56      	ldr	r3, [pc, #344]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10f      	bne.n	8007d5e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007d3e:	4b53      	ldr	r3, [pc, #332]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d109      	bne.n	8007d5e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d4e:	e006      	b.n	8007d5e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	73fb      	strb	r3, [r7, #15]
      break;
 8007d54:	e004      	b.n	8007d60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007d56:	bf00      	nop
 8007d58:	e002      	b.n	8007d60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007d5a:	bf00      	nop
 8007d5c:	e000      	b.n	8007d60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007d5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d10d      	bne.n	8007d82 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007d66:	4b49      	ldr	r3, [pc, #292]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6819      	ldr	r1, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	011b      	lsls	r3, r3, #4
 8007d7a:	430b      	orrs	r3, r1
 8007d7c:	4943      	ldr	r1, [pc, #268]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d17c      	bne.n	8007e82 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007d88:	4b40      	ldr	r3, [pc, #256]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a3f      	ldr	r2, [pc, #252]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d94:	f7fb fbec 	bl	8003570 <HAL_GetTick>
 8007d98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007d9a:	e009      	b.n	8007db0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007d9c:	f7fb fbe8 	bl	8003570 <HAL_GetTick>
 8007da0:	4602      	mov	r2, r0
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d902      	bls.n	8007db0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	73fb      	strb	r3, [r7, #15]
        break;
 8007dae:	e005      	b.n	8007dbc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007db0:	4b36      	ldr	r3, [pc, #216]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1ef      	bne.n	8007d9c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d15f      	bne.n	8007e82 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d110      	bne.n	8007dea <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007dc8:	4b30      	ldr	r3, [pc, #192]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007dd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	6892      	ldr	r2, [r2, #8]
 8007dd8:	0211      	lsls	r1, r2, #8
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	68d2      	ldr	r2, [r2, #12]
 8007dde:	06d2      	lsls	r2, r2, #27
 8007de0:	430a      	orrs	r2, r1
 8007de2:	492a      	ldr	r1, [pc, #168]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	610b      	str	r3, [r1, #16]
 8007de8:	e027      	b.n	8007e3a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d112      	bne.n	8007e16 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007df0:	4b26      	ldr	r3, [pc, #152]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007df8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	6892      	ldr	r2, [r2, #8]
 8007e00:	0211      	lsls	r1, r2, #8
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	6912      	ldr	r2, [r2, #16]
 8007e06:	0852      	lsrs	r2, r2, #1
 8007e08:	3a01      	subs	r2, #1
 8007e0a:	0552      	lsls	r2, r2, #21
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	491f      	ldr	r1, [pc, #124]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	610b      	str	r3, [r1, #16]
 8007e14:	e011      	b.n	8007e3a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007e16:	4b1d      	ldr	r3, [pc, #116]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007e1e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	6892      	ldr	r2, [r2, #8]
 8007e26:	0211      	lsls	r1, r2, #8
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	6952      	ldr	r2, [r2, #20]
 8007e2c:	0852      	lsrs	r2, r2, #1
 8007e2e:	3a01      	subs	r2, #1
 8007e30:	0652      	lsls	r2, r2, #25
 8007e32:	430a      	orrs	r2, r1
 8007e34:	4915      	ldr	r1, [pc, #84]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007e3a:	4b14      	ldr	r3, [pc, #80]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a13      	ldr	r2, [pc, #76]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e44:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e46:	f7fb fb93 	bl	8003570 <HAL_GetTick>
 8007e4a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007e4c:	e009      	b.n	8007e62 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e4e:	f7fb fb8f 	bl	8003570 <HAL_GetTick>
 8007e52:	4602      	mov	r2, r0
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d902      	bls.n	8007e62 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	73fb      	strb	r3, [r7, #15]
          break;
 8007e60:	e005      	b.n	8007e6e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007e62:	4b0a      	ldr	r3, [pc, #40]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d0ef      	beq.n	8007e4e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d106      	bne.n	8007e82 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007e74:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e76:	691a      	ldr	r2, [r3, #16]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	4903      	ldr	r1, [pc, #12]	; (8007e8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	40021000 	.word	0x40021000

08007e90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e095      	b.n	8007fce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d108      	bne.n	8007ebc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007eb2:	d009      	beq.n	8007ec8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	61da      	str	r2, [r3, #28]
 8007eba:	e005      	b.n	8007ec8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d106      	bne.n	8007ee8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7fb f936 	bl	8003154 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007efe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f08:	d902      	bls.n	8007f10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	60fb      	str	r3, [r7, #12]
 8007f0e:	e002      	b.n	8007f16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007f1e:	d007      	beq.n	8007f30 <HAL_SPI_Init+0xa0>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f28:	d002      	beq.n	8007f30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007f40:	431a      	orrs	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	f003 0302 	and.w	r3, r3, #2
 8007f4a:	431a      	orrs	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	431a      	orrs	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	69db      	ldr	r3, [r3, #28]
 8007f64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f68:	431a      	orrs	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f72:	ea42 0103 	orr.w	r1, r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	430a      	orrs	r2, r1
 8007f84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	0c1b      	lsrs	r3, r3, #16
 8007f8c:	f003 0204 	and.w	r2, r3, #4
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f94:	f003 0310 	and.w	r3, r3, #16
 8007f98:	431a      	orrs	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f9e:	f003 0308 	and.w	r3, r3, #8
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007fac:	ea42 0103 	orr.w	r1, r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b088      	sub	sp, #32
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	60f8      	str	r0, [r7, #12]
 8007fde:	60b9      	str	r1, [r7, #8]
 8007fe0:	603b      	str	r3, [r7, #0]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d101      	bne.n	8007ff8 <HAL_SPI_Transmit+0x22>
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	e158      	b.n	80082aa <HAL_SPI_Transmit+0x2d4>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008000:	f7fb fab6 	bl	8003570 <HAL_GetTick>
 8008004:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008006:	88fb      	ldrh	r3, [r7, #6]
 8008008:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008010:	b2db      	uxtb	r3, r3
 8008012:	2b01      	cmp	r3, #1
 8008014:	d002      	beq.n	800801c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008016:	2302      	movs	r3, #2
 8008018:	77fb      	strb	r3, [r7, #31]
    goto error;
 800801a:	e13d      	b.n	8008298 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <HAL_SPI_Transmit+0x52>
 8008022:	88fb      	ldrh	r3, [r7, #6]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d102      	bne.n	800802e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800802c:	e134      	b.n	8008298 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2203      	movs	r2, #3
 8008032:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	88fa      	ldrh	r2, [r7, #6]
 8008046:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	88fa      	ldrh	r2, [r7, #6]
 800804c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2200      	movs	r2, #0
 8008068:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008078:	d10f      	bne.n	800809a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008088:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008098:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a4:	2b40      	cmp	r3, #64	; 0x40
 80080a6:	d007      	beq.n	80080b8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80080c0:	d94b      	bls.n	800815a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <HAL_SPI_Transmit+0xfa>
 80080ca:	8afb      	ldrh	r3, [r7, #22]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d13e      	bne.n	800814e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d4:	881a      	ldrh	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e0:	1c9a      	adds	r2, r3, #2
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	3b01      	subs	r3, #1
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80080f4:	e02b      	b.n	800814e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f003 0302 	and.w	r3, r3, #2
 8008100:	2b02      	cmp	r3, #2
 8008102:	d112      	bne.n	800812a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008108:	881a      	ldrh	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008114:	1c9a      	adds	r2, r3, #2
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800811e:	b29b      	uxth	r3, r3
 8008120:	3b01      	subs	r3, #1
 8008122:	b29a      	uxth	r2, r3
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008128:	e011      	b.n	800814e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800812a:	f7fb fa21 	bl	8003570 <HAL_GetTick>
 800812e:	4602      	mov	r2, r0
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	429a      	cmp	r2, r3
 8008138:	d803      	bhi.n	8008142 <HAL_SPI_Transmit+0x16c>
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008140:	d102      	bne.n	8008148 <HAL_SPI_Transmit+0x172>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d102      	bne.n	800814e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800814c:	e0a4      	b.n	8008298 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008152:	b29b      	uxth	r3, r3
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1ce      	bne.n	80080f6 <HAL_SPI_Transmit+0x120>
 8008158:	e07c      	b.n	8008254 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <HAL_SPI_Transmit+0x192>
 8008162:	8afb      	ldrh	r3, [r7, #22]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d170      	bne.n	800824a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800816c:	b29b      	uxth	r3, r3
 800816e:	2b01      	cmp	r3, #1
 8008170:	d912      	bls.n	8008198 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008176:	881a      	ldrh	r2, [r3, #0]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008182:	1c9a      	adds	r2, r3, #2
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800818c:	b29b      	uxth	r3, r3
 800818e:	3b02      	subs	r3, #2
 8008190:	b29a      	uxth	r2, r3
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008196:	e058      	b.n	800824a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	330c      	adds	r3, #12
 80081a2:	7812      	ldrb	r2, [r2, #0]
 80081a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081aa:	1c5a      	adds	r2, r3, #1
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	3b01      	subs	r3, #1
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80081be:	e044      	b.n	800824a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	f003 0302 	and.w	r3, r3, #2
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d12b      	bne.n	8008226 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d912      	bls.n	80081fe <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081dc:	881a      	ldrh	r2, [r3, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e8:	1c9a      	adds	r2, r3, #2
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	3b02      	subs	r3, #2
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081fc:	e025      	b.n	800824a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	330c      	adds	r3, #12
 8008208:	7812      	ldrb	r2, [r2, #0]
 800820a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008210:	1c5a      	adds	r2, r3, #1
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800821a:	b29b      	uxth	r3, r3
 800821c:	3b01      	subs	r3, #1
 800821e:	b29a      	uxth	r2, r3
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008224:	e011      	b.n	800824a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008226:	f7fb f9a3 	bl	8003570 <HAL_GetTick>
 800822a:	4602      	mov	r2, r0
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	1ad3      	subs	r3, r2, r3
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	429a      	cmp	r2, r3
 8008234:	d803      	bhi.n	800823e <HAL_SPI_Transmit+0x268>
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800823c:	d102      	bne.n	8008244 <HAL_SPI_Transmit+0x26e>
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d102      	bne.n	800824a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008248:	e026      	b.n	8008298 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800824e:	b29b      	uxth	r3, r3
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1b5      	bne.n	80081c0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f000 fb5b 	bl	8008914 <SPI_EndRxTxTransaction>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d002      	beq.n	800826a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2220      	movs	r2, #32
 8008268:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10a      	bne.n	8008288 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008272:	2300      	movs	r3, #0
 8008274:	613b      	str	r3, [r7, #16]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	613b      	str	r3, [r7, #16]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	613b      	str	r3, [r7, #16]
 8008286:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800828c:	2b00      	cmp	r3, #0
 800828e:	d002      	beq.n	8008296 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	77fb      	strb	r3, [r7, #31]
 8008294:	e000      	b.n	8008298 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008296:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80082a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3720      	adds	r7, #32
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b08a      	sub	sp, #40	; 0x28
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	60f8      	str	r0, [r7, #12]
 80082ba:	60b9      	str	r1, [r7, #8]
 80082bc:	607a      	str	r2, [r7, #4]
 80082be:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80082c0:	2301      	movs	r3, #1
 80082c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d101      	bne.n	80082d8 <HAL_SPI_TransmitReceive+0x26>
 80082d4:	2302      	movs	r3, #2
 80082d6:	e1fb      	b.n	80086d0 <HAL_SPI_TransmitReceive+0x41e>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082e0:	f7fb f946 	bl	8003570 <HAL_GetTick>
 80082e4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80082ec:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80082f4:	887b      	ldrh	r3, [r7, #2]
 80082f6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80082f8:	887b      	ldrh	r3, [r7, #2]
 80082fa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80082fc:	7efb      	ldrb	r3, [r7, #27]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d00e      	beq.n	8008320 <HAL_SPI_TransmitReceive+0x6e>
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008308:	d106      	bne.n	8008318 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d102      	bne.n	8008318 <HAL_SPI_TransmitReceive+0x66>
 8008312:	7efb      	ldrb	r3, [r7, #27]
 8008314:	2b04      	cmp	r3, #4
 8008316:	d003      	beq.n	8008320 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008318:	2302      	movs	r3, #2
 800831a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800831e:	e1cd      	b.n	80086bc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d005      	beq.n	8008332 <HAL_SPI_TransmitReceive+0x80>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d002      	beq.n	8008332 <HAL_SPI_TransmitReceive+0x80>
 800832c:	887b      	ldrh	r3, [r7, #2]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d103      	bne.n	800833a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008338:	e1c0      	b.n	80086bc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b04      	cmp	r3, #4
 8008344:	d003      	beq.n	800834e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2205      	movs	r2, #5
 800834a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	887a      	ldrh	r2, [r7, #2]
 800835e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	887a      	ldrh	r2, [r7, #2]
 8008366:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	887a      	ldrh	r2, [r7, #2]
 8008374:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	887a      	ldrh	r2, [r7, #2]
 800837a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008390:	d802      	bhi.n	8008398 <HAL_SPI_TransmitReceive+0xe6>
 8008392:	8a3b      	ldrh	r3, [r7, #16]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d908      	bls.n	80083aa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80083a6:	605a      	str	r2, [r3, #4]
 80083a8:	e007      	b.n	80083ba <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	685a      	ldr	r2, [r3, #4]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083b8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c4:	2b40      	cmp	r3, #64	; 0x40
 80083c6:	d007      	beq.n	80083d8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083e0:	d97c      	bls.n	80084dc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d002      	beq.n	80083f0 <HAL_SPI_TransmitReceive+0x13e>
 80083ea:	8a7b      	ldrh	r3, [r7, #18]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d169      	bne.n	80084c4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f4:	881a      	ldrh	r2, [r3, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008400:	1c9a      	adds	r2, r3, #2
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800840a:	b29b      	uxth	r3, r3
 800840c:	3b01      	subs	r3, #1
 800840e:	b29a      	uxth	r2, r3
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008414:	e056      	b.n	80084c4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	f003 0302 	and.w	r3, r3, #2
 8008420:	2b02      	cmp	r3, #2
 8008422:	d11b      	bne.n	800845c <HAL_SPI_TransmitReceive+0x1aa>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008428:	b29b      	uxth	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d016      	beq.n	800845c <HAL_SPI_TransmitReceive+0x1aa>
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	2b01      	cmp	r3, #1
 8008432:	d113      	bne.n	800845c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008438:	881a      	ldrh	r2, [r3, #0]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008444:	1c9a      	adds	r2, r3, #2
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800844e:	b29b      	uxth	r3, r3
 8008450:	3b01      	subs	r3, #1
 8008452:	b29a      	uxth	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008458:	2300      	movs	r3, #0
 800845a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	2b01      	cmp	r3, #1
 8008468:	d11c      	bne.n	80084a4 <HAL_SPI_TransmitReceive+0x1f2>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008470:	b29b      	uxth	r3, r3
 8008472:	2b00      	cmp	r3, #0
 8008474:	d016      	beq.n	80084a4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68da      	ldr	r2, [r3, #12]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008480:	b292      	uxth	r2, r2
 8008482:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008488:	1c9a      	adds	r2, r3, #2
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008494:	b29b      	uxth	r3, r3
 8008496:	3b01      	subs	r3, #1
 8008498:	b29a      	uxth	r2, r3
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084a0:	2301      	movs	r3, #1
 80084a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80084a4:	f7fb f864 	bl	8003570 <HAL_GetTick>
 80084a8:	4602      	mov	r2, r0
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d807      	bhi.n	80084c4 <HAL_SPI_TransmitReceive+0x212>
 80084b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ba:	d003      	beq.n	80084c4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80084bc:	2303      	movs	r3, #3
 80084be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80084c2:	e0fb      	b.n	80086bc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1a3      	bne.n	8008416 <HAL_SPI_TransmitReceive+0x164>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d19d      	bne.n	8008416 <HAL_SPI_TransmitReceive+0x164>
 80084da:	e0df      	b.n	800869c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <HAL_SPI_TransmitReceive+0x23a>
 80084e4:	8a7b      	ldrh	r3, [r7, #18]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	f040 80cb 	bne.w	8008682 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d912      	bls.n	800851c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fa:	881a      	ldrh	r2, [r3, #0]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008506:	1c9a      	adds	r2, r3, #2
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008510:	b29b      	uxth	r3, r3
 8008512:	3b02      	subs	r3, #2
 8008514:	b29a      	uxth	r2, r3
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	87da      	strh	r2, [r3, #62]	; 0x3e
 800851a:	e0b2      	b.n	8008682 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	330c      	adds	r3, #12
 8008526:	7812      	ldrb	r2, [r2, #0]
 8008528:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852e:	1c5a      	adds	r2, r3, #1
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008538:	b29b      	uxth	r3, r3
 800853a:	3b01      	subs	r3, #1
 800853c:	b29a      	uxth	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008542:	e09e      	b.n	8008682 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f003 0302 	and.w	r3, r3, #2
 800854e:	2b02      	cmp	r3, #2
 8008550:	d134      	bne.n	80085bc <HAL_SPI_TransmitReceive+0x30a>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008556:	b29b      	uxth	r3, r3
 8008558:	2b00      	cmp	r3, #0
 800855a:	d02f      	beq.n	80085bc <HAL_SPI_TransmitReceive+0x30a>
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	2b01      	cmp	r3, #1
 8008560:	d12c      	bne.n	80085bc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008566:	b29b      	uxth	r3, r3
 8008568:	2b01      	cmp	r3, #1
 800856a:	d912      	bls.n	8008592 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008570:	881a      	ldrh	r2, [r3, #0]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857c:	1c9a      	adds	r2, r3, #2
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008586:	b29b      	uxth	r3, r3
 8008588:	3b02      	subs	r3, #2
 800858a:	b29a      	uxth	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008590:	e012      	b.n	80085b8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	330c      	adds	r3, #12
 800859c:	7812      	ldrb	r2, [r2, #0]
 800859e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a4:	1c5a      	adds	r2, r3, #1
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	3b01      	subs	r3, #1
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d148      	bne.n	800865c <HAL_SPI_TransmitReceive+0x3aa>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d042      	beq.n	800865c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085dc:	b29b      	uxth	r3, r3
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d923      	bls.n	800862a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68da      	ldr	r2, [r3, #12]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ec:	b292      	uxth	r2, r2
 80085ee:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f4:	1c9a      	adds	r2, r3, #2
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008600:	b29b      	uxth	r3, r3
 8008602:	3b02      	subs	r3, #2
 8008604:	b29a      	uxth	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008612:	b29b      	uxth	r3, r3
 8008614:	2b01      	cmp	r3, #1
 8008616:	d81f      	bhi.n	8008658 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008626:	605a      	str	r2, [r3, #4]
 8008628:	e016      	b.n	8008658 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f103 020c 	add.w	r2, r3, #12
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008636:	7812      	ldrb	r2, [r2, #0]
 8008638:	b2d2      	uxtb	r2, r2
 800863a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008640:	1c5a      	adds	r2, r3, #1
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800864c:	b29b      	uxth	r3, r3
 800864e:	3b01      	subs	r3, #1
 8008650:	b29a      	uxth	r2, r3
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008658:	2301      	movs	r3, #1
 800865a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800865c:	f7fa ff88 	bl	8003570 <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008668:	429a      	cmp	r2, r3
 800866a:	d803      	bhi.n	8008674 <HAL_SPI_TransmitReceive+0x3c2>
 800866c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008672:	d102      	bne.n	800867a <HAL_SPI_TransmitReceive+0x3c8>
 8008674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008676:	2b00      	cmp	r3, #0
 8008678:	d103      	bne.n	8008682 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008680:	e01c      	b.n	80086bc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008686:	b29b      	uxth	r3, r3
 8008688:	2b00      	cmp	r3, #0
 800868a:	f47f af5b 	bne.w	8008544 <HAL_SPI_TransmitReceive+0x292>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008694:	b29b      	uxth	r3, r3
 8008696:	2b00      	cmp	r3, #0
 8008698:	f47f af54 	bne.w	8008544 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800869c:	69fa      	ldr	r2, [r7, #28]
 800869e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 f937 	bl	8008914 <SPI_EndRxTxTransaction>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d006      	beq.n	80086ba <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2220      	movs	r2, #32
 80086b6:	661a      	str	r2, [r3, #96]	; 0x60
 80086b8:	e000      	b.n	80086bc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80086ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80086cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3728      	adds	r7, #40	; 0x28
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b088      	sub	sp, #32
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	603b      	str	r3, [r7, #0]
 80086e4:	4613      	mov	r3, r2
 80086e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086e8:	f7fa ff42 	bl	8003570 <HAL_GetTick>
 80086ec:	4602      	mov	r2, r0
 80086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f0:	1a9b      	subs	r3, r3, r2
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	4413      	add	r3, r2
 80086f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086f8:	f7fa ff3a 	bl	8003570 <HAL_GetTick>
 80086fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086fe:	4b39      	ldr	r3, [pc, #228]	; (80087e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	015b      	lsls	r3, r3, #5
 8008704:	0d1b      	lsrs	r3, r3, #20
 8008706:	69fa      	ldr	r2, [r7, #28]
 8008708:	fb02 f303 	mul.w	r3, r2, r3
 800870c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800870e:	e054      	b.n	80087ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008716:	d050      	beq.n	80087ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008718:	f7fa ff2a 	bl	8003570 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	69fa      	ldr	r2, [r7, #28]
 8008724:	429a      	cmp	r2, r3
 8008726:	d902      	bls.n	800872e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d13d      	bne.n	80087aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	685a      	ldr	r2, [r3, #4]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800873c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008746:	d111      	bne.n	800876c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008750:	d004      	beq.n	800875c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800875a:	d107      	bne.n	800876c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800876a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008774:	d10f      	bne.n	8008796 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008784:	601a      	str	r2, [r3, #0]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008794:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e017      	b.n	80087da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80087b0:	2300      	movs	r3, #0
 80087b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	3b01      	subs	r3, #1
 80087b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	689a      	ldr	r2, [r3, #8]
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	4013      	ands	r3, r2
 80087c4:	68ba      	ldr	r2, [r7, #8]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	bf0c      	ite	eq
 80087ca:	2301      	moveq	r3, #1
 80087cc:	2300      	movne	r3, #0
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	461a      	mov	r2, r3
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d19b      	bne.n	8008710 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3720      	adds	r7, #32
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20000000 	.word	0x20000000

080087e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b08a      	sub	sp, #40	; 0x28
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
 80087f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80087f6:	2300      	movs	r3, #0
 80087f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80087fa:	f7fa feb9 	bl	8003570 <HAL_GetTick>
 80087fe:	4602      	mov	r2, r0
 8008800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008802:	1a9b      	subs	r3, r3, r2
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	4413      	add	r3, r2
 8008808:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800880a:	f7fa feb1 	bl	8003570 <HAL_GetTick>
 800880e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	330c      	adds	r3, #12
 8008816:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008818:	4b3d      	ldr	r3, [pc, #244]	; (8008910 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	4613      	mov	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	00da      	lsls	r2, r3, #3
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	0d1b      	lsrs	r3, r3, #20
 8008828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800882a:	fb02 f303 	mul.w	r3, r2, r3
 800882e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008830:	e060      	b.n	80088f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008838:	d107      	bne.n	800884a <SPI_WaitFifoStateUntilTimeout+0x62>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d104      	bne.n	800884a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	b2db      	uxtb	r3, r3
 8008846:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008848:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008850:	d050      	beq.n	80088f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008852:	f7fa fe8d 	bl	8003570 <HAL_GetTick>
 8008856:	4602      	mov	r2, r0
 8008858:	6a3b      	ldr	r3, [r7, #32]
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800885e:	429a      	cmp	r2, r3
 8008860:	d902      	bls.n	8008868 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	2b00      	cmp	r3, #0
 8008866:	d13d      	bne.n	80088e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	685a      	ldr	r2, [r3, #4]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008876:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008880:	d111      	bne.n	80088a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800888a:	d004      	beq.n	8008896 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008894:	d107      	bne.n	80088a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088ae:	d10f      	bne.n	80088d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80088be:	601a      	str	r2, [r3, #0]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80088ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e010      	b.n	8008906 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d101      	bne.n	80088ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689a      	ldr	r2, [r3, #8]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	4013      	ands	r3, r2
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	429a      	cmp	r2, r3
 8008902:	d196      	bne.n	8008832 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3728      	adds	r7, #40	; 0x28
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	20000000 	.word	0x20000000

08008914 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af02      	add	r7, sp, #8
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	2200      	movs	r2, #0
 8008928:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f7ff ff5b 	bl	80087e8 <SPI_WaitFifoStateUntilTimeout>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d007      	beq.n	8008948 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800893c:	f043 0220 	orr.w	r2, r3, #32
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e027      	b.n	8008998 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2200      	movs	r2, #0
 8008950:	2180      	movs	r1, #128	; 0x80
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f7ff fec0 	bl	80086d8 <SPI_WaitFlagStateUntilTimeout>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d007      	beq.n	800896e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008962:	f043 0220 	orr.w	r2, r3, #32
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e014      	b.n	8008998 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	2200      	movs	r2, #0
 8008976:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f7ff ff34 	bl	80087e8 <SPI_WaitFifoStateUntilTimeout>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d007      	beq.n	8008996 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800898a:	f043 0220 	orr.w	r2, r3, #32
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e000      	b.n	8008998 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d101      	bne.n	80089b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e049      	b.n	8008a46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d106      	bne.n	80089cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7fa fd06 	bl	80033d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2202      	movs	r2, #2
 80089d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	3304      	adds	r3, #4
 80089dc:	4619      	mov	r1, r3
 80089de:	4610      	mov	r0, r2
 80089e0:	f000 f9c8 	bl	8008d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
	...

08008a50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d001      	beq.n	8008a68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e03b      	b.n	8008ae0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68da      	ldr	r2, [r3, #12]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f042 0201 	orr.w	r2, r2, #1
 8008a7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a19      	ldr	r2, [pc, #100]	; (8008aec <HAL_TIM_Base_Start_IT+0x9c>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d009      	beq.n	8008a9e <HAL_TIM_Base_Start_IT+0x4e>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a92:	d004      	beq.n	8008a9e <HAL_TIM_Base_Start_IT+0x4e>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a15      	ldr	r2, [pc, #84]	; (8008af0 <HAL_TIM_Base_Start_IT+0xa0>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d115      	bne.n	8008aca <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	689a      	ldr	r2, [r3, #8]
 8008aa4:	4b13      	ldr	r3, [pc, #76]	; (8008af4 <HAL_TIM_Base_Start_IT+0xa4>)
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2b06      	cmp	r3, #6
 8008aae:	d015      	beq.n	8008adc <HAL_TIM_Base_Start_IT+0x8c>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ab6:	d011      	beq.n	8008adc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f042 0201 	orr.w	r2, r2, #1
 8008ac6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ac8:	e008      	b.n	8008adc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f042 0201 	orr.w	r2, r2, #1
 8008ad8:	601a      	str	r2, [r3, #0]
 8008ada:	e000      	b.n	8008ade <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008adc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr
 8008aec:	40012c00 	.word	0x40012c00
 8008af0:	40014000 	.word	0x40014000
 8008af4:	00010007 	.word	0x00010007

08008af8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	f003 0302 	and.w	r3, r3, #2
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d122      	bne.n	8008b54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	f003 0302 	and.w	r3, r3, #2
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d11b      	bne.n	8008b54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f06f 0202 	mvn.w	r2, #2
 8008b24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	f003 0303 	and.w	r3, r3, #3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d003      	beq.n	8008b42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f905 	bl	8008d4a <HAL_TIM_IC_CaptureCallback>
 8008b40:	e005      	b.n	8008b4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f8f7 	bl	8008d36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7fa fa97 	bl	800307c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	f003 0304 	and.w	r3, r3, #4
 8008b5e:	2b04      	cmp	r3, #4
 8008b60:	d122      	bne.n	8008ba8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	f003 0304 	and.w	r3, r3, #4
 8008b6c:	2b04      	cmp	r3, #4
 8008b6e:	d11b      	bne.n	8008ba8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f06f 0204 	mvn.w	r2, #4
 8008b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d003      	beq.n	8008b96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 f8db 	bl	8008d4a <HAL_TIM_IC_CaptureCallback>
 8008b94:	e005      	b.n	8008ba2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f8cd 	bl	8008d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f7fa fa6d 	bl	800307c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	f003 0308 	and.w	r3, r3, #8
 8008bb2:	2b08      	cmp	r3, #8
 8008bb4:	d122      	bne.n	8008bfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	f003 0308 	and.w	r3, r3, #8
 8008bc0:	2b08      	cmp	r3, #8
 8008bc2:	d11b      	bne.n	8008bfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f06f 0208 	mvn.w	r2, #8
 8008bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2204      	movs	r2, #4
 8008bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	f003 0303 	and.w	r3, r3, #3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d003      	beq.n	8008bea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f8b1 	bl	8008d4a <HAL_TIM_IC_CaptureCallback>
 8008be8:	e005      	b.n	8008bf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f8a3 	bl	8008d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f7fa fa43 	bl	800307c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	f003 0310 	and.w	r3, r3, #16
 8008c06:	2b10      	cmp	r3, #16
 8008c08:	d122      	bne.n	8008c50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	f003 0310 	and.w	r3, r3, #16
 8008c14:	2b10      	cmp	r3, #16
 8008c16:	d11b      	bne.n	8008c50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f06f 0210 	mvn.w	r2, #16
 8008c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2208      	movs	r2, #8
 8008c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	69db      	ldr	r3, [r3, #28]
 8008c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d003      	beq.n	8008c3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f887 	bl	8008d4a <HAL_TIM_IC_CaptureCallback>
 8008c3c:	e005      	b.n	8008c4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f879 	bl	8008d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f7fa fa19 	bl	800307c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d10e      	bne.n	8008c7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f003 0301 	and.w	r3, r3, #1
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d107      	bne.n	8008c7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f06f 0201 	mvn.w	r2, #1
 8008c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f7fa f9ec 	bl	8003054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c86:	2b80      	cmp	r3, #128	; 0x80
 8008c88:	d10e      	bne.n	8008ca8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c94:	2b80      	cmp	r3, #128	; 0x80
 8008c96:	d107      	bne.n	8008ca8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f93a 	bl	8008f1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cb6:	d10e      	bne.n	8008cd6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cc2:	2b80      	cmp	r3, #128	; 0x80
 8008cc4:	d107      	bne.n	8008cd6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f92d 	bl	8008f30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce0:	2b40      	cmp	r3, #64	; 0x40
 8008ce2:	d10e      	bne.n	8008d02 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cee:	2b40      	cmp	r3, #64	; 0x40
 8008cf0:	d107      	bne.n	8008d02 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f82e 	bl	8008d5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	f003 0320 	and.w	r3, r3, #32
 8008d0c:	2b20      	cmp	r3, #32
 8008d0e:	d10e      	bne.n	8008d2e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	f003 0320 	and.w	r3, r3, #32
 8008d1a:	2b20      	cmp	r3, #32
 8008d1c:	d107      	bne.n	8008d2e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f06f 0220 	mvn.w	r2, #32
 8008d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 f8ed 	bl	8008f08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d2e:	bf00      	nop
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b083      	sub	sp, #12
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d3e:	bf00      	nop
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b083      	sub	sp, #12
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d52:	bf00      	nop
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b083      	sub	sp, #12
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d66:	bf00      	nop
 8008d68:	370c      	adds	r7, #12
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
	...

08008d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a2a      	ldr	r2, [pc, #168]	; (8008e30 <TIM_Base_SetConfig+0xbc>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d003      	beq.n	8008d94 <TIM_Base_SetConfig+0x20>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d92:	d108      	bne.n	8008da6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a21      	ldr	r2, [pc, #132]	; (8008e30 <TIM_Base_SetConfig+0xbc>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d00b      	beq.n	8008dc6 <TIM_Base_SetConfig+0x52>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008db4:	d007      	beq.n	8008dc6 <TIM_Base_SetConfig+0x52>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a1e      	ldr	r2, [pc, #120]	; (8008e34 <TIM_Base_SetConfig+0xc0>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d003      	beq.n	8008dc6 <TIM_Base_SetConfig+0x52>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a1d      	ldr	r2, [pc, #116]	; (8008e38 <TIM_Base_SetConfig+0xc4>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d108      	bne.n	8008dd8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	689a      	ldr	r2, [r3, #8]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a0c      	ldr	r2, [pc, #48]	; (8008e30 <TIM_Base_SetConfig+0xbc>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d007      	beq.n	8008e14 <TIM_Base_SetConfig+0xa0>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a0b      	ldr	r2, [pc, #44]	; (8008e34 <TIM_Base_SetConfig+0xc0>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d003      	beq.n	8008e14 <TIM_Base_SetConfig+0xa0>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a0a      	ldr	r2, [pc, #40]	; (8008e38 <TIM_Base_SetConfig+0xc4>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d103      	bne.n	8008e1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	691a      	ldr	r2, [r3, #16]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	615a      	str	r2, [r3, #20]
}
 8008e22:	bf00      	nop
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	40012c00 	.word	0x40012c00
 8008e34:	40014000 	.word	0x40014000
 8008e38:	40014400 	.word	0x40014400

08008e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d101      	bne.n	8008e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e50:	2302      	movs	r3, #2
 8008e52:	e04f      	b.n	8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a21      	ldr	r2, [pc, #132]	; (8008f00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d108      	bne.n	8008e90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a14      	ldr	r2, [pc, #80]	; (8008f00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d009      	beq.n	8008ec8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ebc:	d004      	beq.n	8008ec8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a10      	ldr	r2, [pc, #64]	; (8008f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d10c      	bne.n	8008ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ece:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	68ba      	ldr	r2, [r7, #8]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr
 8008f00:	40012c00 	.word	0x40012c00
 8008f04:	40014000 	.word	0x40014000

08008f08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f24:	bf00      	nop
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f38:	bf00      	nop
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008f44:	b084      	sub	sp, #16
 8008f46:	b480      	push	{r7}
 8008f48:	b083      	sub	sp, #12
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	f107 0014 	add.w	r0, r7, #20
 8008f52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	b004      	add	sp, #16
 8008f64:	4770      	bx	lr

08008f66 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008f66:	b480      	push	{r7}
 8008f68:	b085      	sub	sp, #20
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f76:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008f7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f9c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008fa0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	43db      	mvns	r3, r3
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008fca:	b480      	push	{r7}
 8008fcc:	b083      	sub	sp, #12
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008fe4:	b084      	sub	sp, #16
 8008fe6:	b480      	push	{r7}
 8008fe8:	b083      	sub	sp, #12
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	f107 0014 	add.w	r0, r7, #20
 8008ff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	b004      	add	sp, #16
 8009024:	4770      	bx	lr
	...

08009028 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009028:	b480      	push	{r7}
 800902a:	b09d      	sub	sp, #116	; 0x74
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	4413      	add	r3, r2
 8009042:	881b      	ldrh	r3, [r3, #0]
 8009044:	b29b      	uxth	r3, r3
 8009046:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800904a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800904e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	78db      	ldrb	r3, [r3, #3]
 8009056:	2b03      	cmp	r3, #3
 8009058:	d81f      	bhi.n	800909a <USB_ActivateEndpoint+0x72>
 800905a:	a201      	add	r2, pc, #4	; (adr r2, 8009060 <USB_ActivateEndpoint+0x38>)
 800905c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009060:	08009071 	.word	0x08009071
 8009064:	0800908d 	.word	0x0800908d
 8009068:	080090a3 	.word	0x080090a3
 800906c:	0800907f 	.word	0x0800907f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009070:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009074:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009078:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800907c:	e012      	b.n	80090a4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800907e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009082:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009086:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800908a:	e00b      	b.n	80090a4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800908c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009090:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009094:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009098:	e004      	b.n	80090a4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80090a0:	e000      	b.n	80090a4 <USB_ActivateEndpoint+0x7c>
      break;
 80090a2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	441a      	add	r2, r3
 80090ae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80090b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	4413      	add	r3, r2
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	b21b      	sxth	r3, r3
 80090d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090de:	b21a      	sxth	r2, r3
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	b21b      	sxth	r3, r3
 80090e6:	4313      	orrs	r3, r2
 80090e8:	b21b      	sxth	r3, r3
 80090ea:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	441a      	add	r2, r3
 80090f8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80090fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800910c:	b29b      	uxth	r3, r3
 800910e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	7b1b      	ldrb	r3, [r3, #12]
 8009114:	2b00      	cmp	r3, #0
 8009116:	f040 816e 	bne.w	80093f6 <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	785b      	ldrb	r3, [r3, #1]
 800911e:	2b00      	cmp	r3, #0
 8009120:	f000 8084 	beq.w	800922c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	61bb      	str	r3, [r7, #24]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800912e:	b29b      	uxth	r3, r3
 8009130:	461a      	mov	r2, r3
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	4413      	add	r3, r2
 8009136:	61bb      	str	r3, [r7, #24]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	00da      	lsls	r2, r3, #3
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	4413      	add	r3, r2
 8009142:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009146:	617b      	str	r3, [r7, #20]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	88db      	ldrh	r3, [r3, #6]
 800914c:	085b      	lsrs	r3, r3, #1
 800914e:	b29b      	uxth	r3, r3
 8009150:	005b      	lsls	r3, r3, #1
 8009152:	b29a      	uxth	r2, r3
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	827b      	strh	r3, [r7, #18]
 8009166:	8a7b      	ldrh	r3, [r7, #18]
 8009168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800916c:	2b00      	cmp	r3, #0
 800916e:	d01b      	beq.n	80091a8 <USB_ActivateEndpoint+0x180>
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	881b      	ldrh	r3, [r3, #0]
 800917c:	b29b      	uxth	r3, r3
 800917e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009186:	823b      	strh	r3, [r7, #16]
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	441a      	add	r2, r3
 8009192:	8a3b      	ldrh	r3, [r7, #16]
 8009194:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009198:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800919c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	78db      	ldrb	r3, [r3, #3]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d020      	beq.n	80091f2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4413      	add	r3, r2
 80091ba:	881b      	ldrh	r3, [r3, #0]
 80091bc:	b29b      	uxth	r3, r3
 80091be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091c6:	81bb      	strh	r3, [r7, #12]
 80091c8:	89bb      	ldrh	r3, [r7, #12]
 80091ca:	f083 0320 	eor.w	r3, r3, #32
 80091ce:	81bb      	strh	r3, [r7, #12]
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	441a      	add	r2, r3
 80091da:	89bb      	ldrh	r3, [r7, #12]
 80091dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	8013      	strh	r3, [r2, #0]
 80091f0:	e2cb      	b.n	800978a <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4413      	add	r3, r2
 80091fc:	881b      	ldrh	r3, [r3, #0]
 80091fe:	b29b      	uxth	r3, r3
 8009200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009208:	81fb      	strh	r3, [r7, #14]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	441a      	add	r2, r3
 8009214:	89fb      	ldrh	r3, [r7, #14]
 8009216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800921a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800921e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009226:	b29b      	uxth	r3, r3
 8009228:	8013      	strh	r3, [r2, #0]
 800922a:	e2ae      	b.n	800978a <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	633b      	str	r3, [r7, #48]	; 0x30
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009236:	b29b      	uxth	r3, r3
 8009238:	461a      	mov	r2, r3
 800923a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923c:	4413      	add	r3, r2
 800923e:	633b      	str	r3, [r7, #48]	; 0x30
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	00da      	lsls	r2, r3, #3
 8009246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009248:	4413      	add	r3, r2
 800924a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800924e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	88db      	ldrh	r3, [r3, #6]
 8009254:	085b      	lsrs	r3, r3, #1
 8009256:	b29b      	uxth	r3, r3
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	b29a      	uxth	r2, r3
 800925c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	62bb      	str	r3, [r7, #40]	; 0x28
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800926a:	b29b      	uxth	r3, r3
 800926c:	461a      	mov	r2, r3
 800926e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009270:	4413      	add	r3, r2
 8009272:	62bb      	str	r3, [r7, #40]	; 0x28
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	00da      	lsls	r2, r3, #3
 800927a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927c:	4413      	add	r3, r2
 800927e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009282:	627b      	str	r3, [r7, #36]	; 0x24
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	2b3e      	cmp	r3, #62	; 0x3e
 800928a:	d918      	bls.n	80092be <USB_ActivateEndpoint+0x296>
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	095b      	lsrs	r3, r3, #5
 8009292:	66bb      	str	r3, [r7, #104]	; 0x68
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	f003 031f 	and.w	r3, r3, #31
 800929c:	2b00      	cmp	r3, #0
 800929e:	d102      	bne.n	80092a6 <USB_ActivateEndpoint+0x27e>
 80092a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092a2:	3b01      	subs	r3, #1
 80092a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80092a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	029b      	lsls	r3, r3, #10
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ba:	801a      	strh	r2, [r3, #0]
 80092bc:	e029      	b.n	8009312 <USB_ActivateEndpoint+0x2ea>
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d112      	bne.n	80092ec <USB_ActivateEndpoint+0x2c4>
 80092c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c8:	881b      	ldrh	r3, [r3, #0]
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d4:	801a      	strh	r2, [r3, #0]
 80092d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d8:	881b      	ldrh	r3, [r3, #0]
 80092da:	b29b      	uxth	r3, r3
 80092dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e8:	801a      	strh	r2, [r3, #0]
 80092ea:	e012      	b.n	8009312 <USB_ActivateEndpoint+0x2ea>
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	085b      	lsrs	r3, r3, #1
 80092f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	f003 0301 	and.w	r3, r3, #1
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <USB_ActivateEndpoint+0x2de>
 8009300:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009302:	3301      	adds	r3, #1
 8009304:	66bb      	str	r3, [r7, #104]	; 0x68
 8009306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009308:	b29b      	uxth	r3, r3
 800930a:	029b      	lsls	r3, r3, #10
 800930c:	b29a      	uxth	r2, r3
 800930e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009310:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	881b      	ldrh	r3, [r3, #0]
 800931e:	847b      	strh	r3, [r7, #34]	; 0x22
 8009320:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009326:	2b00      	cmp	r3, #0
 8009328:	d01b      	beq.n	8009362 <USB_ActivateEndpoint+0x33a>
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4413      	add	r3, r2
 8009334:	881b      	ldrh	r3, [r3, #0]
 8009336:	b29b      	uxth	r3, r3
 8009338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800933c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009340:	843b      	strh	r3, [r7, #32]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	441a      	add	r2, r3
 800934c:	8c3b      	ldrh	r3, [r7, #32]
 800934e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009356:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800935a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800935e:	b29b      	uxth	r3, r3
 8009360:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d124      	bne.n	80093b4 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	881b      	ldrh	r3, [r3, #0]
 8009376:	b29b      	uxth	r3, r3
 8009378:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800937c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009380:	83bb      	strh	r3, [r7, #28]
 8009382:	8bbb      	ldrh	r3, [r7, #28]
 8009384:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009388:	83bb      	strh	r3, [r7, #28]
 800938a:	8bbb      	ldrh	r3, [r7, #28]
 800938c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009390:	83bb      	strh	r3, [r7, #28]
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	441a      	add	r2, r3
 800939c:	8bbb      	ldrh	r3, [r7, #28]
 800939e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	8013      	strh	r3, [r2, #0]
 80093b2:	e1ea      	b.n	800978a <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	4413      	add	r3, r2
 80093be:	881b      	ldrh	r3, [r3, #0]
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093ca:	83fb      	strh	r3, [r7, #30]
 80093cc:	8bfb      	ldrh	r3, [r7, #30]
 80093ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80093d2:	83fb      	strh	r3, [r7, #30]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	441a      	add	r2, r3
 80093de:	8bfb      	ldrh	r3, [r7, #30]
 80093e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	8013      	strh	r3, [r2, #0]
 80093f4:	e1c9      	b.n	800978a <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	78db      	ldrb	r3, [r3, #3]
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d11e      	bne.n	800943c <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	881b      	ldrh	r3, [r3, #0]
 800940a:	b29b      	uxth	r3, r3
 800940c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009414:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	441a      	add	r2, r3
 8009422:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800942a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800942e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009436:	b29b      	uxth	r3, r3
 8009438:	8013      	strh	r3, [r2, #0]
 800943a:	e01d      	b.n	8009478 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	4413      	add	r3, r2
 8009446:	881b      	ldrh	r3, [r3, #0]
 8009448:	b29b      	uxth	r3, r3
 800944a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800944e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009452:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	441a      	add	r2, r3
 8009460:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800946c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009474:	b29b      	uxth	r3, r3
 8009476:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009482:	b29b      	uxth	r3, r3
 8009484:	461a      	mov	r2, r3
 8009486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009488:	4413      	add	r3, r2
 800948a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	00da      	lsls	r2, r3, #3
 8009492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009494:	4413      	add	r3, r2
 8009496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800949a:	65bb      	str	r3, [r7, #88]	; 0x58
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	891b      	ldrh	r3, [r3, #8]
 80094a0:	085b      	lsrs	r3, r3, #1
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	005b      	lsls	r3, r3, #1
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094aa:	801a      	strh	r2, [r3, #0]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	657b      	str	r3, [r7, #84]	; 0x54
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	461a      	mov	r2, r3
 80094ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094bc:	4413      	add	r3, r2
 80094be:	657b      	str	r3, [r7, #84]	; 0x54
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	00da      	lsls	r2, r3, #3
 80094c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094c8:	4413      	add	r3, r2
 80094ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80094ce:	653b      	str	r3, [r7, #80]	; 0x50
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	895b      	ldrh	r3, [r3, #10]
 80094d4:	085b      	lsrs	r3, r3, #1
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	005b      	lsls	r3, r3, #1
 80094da:	b29a      	uxth	r2, r3
 80094dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094de:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	785b      	ldrb	r3, [r3, #1]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f040 8093 	bne.w	8009610 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4413      	add	r3, r2
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80094fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80094fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009502:	2b00      	cmp	r3, #0
 8009504:	d01b      	beq.n	800953e <USB_ActivateEndpoint+0x516>
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4413      	add	r3, r2
 8009510:	881b      	ldrh	r3, [r3, #0]
 8009512:	b29b      	uxth	r3, r3
 8009514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800951c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	441a      	add	r2, r3
 8009528:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800952a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800952e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009532:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800953a:	b29b      	uxth	r3, r3
 800953c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800954c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800954e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009552:	2b00      	cmp	r3, #0
 8009554:	d01b      	beq.n	800958e <USB_ActivateEndpoint+0x566>
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
 8009560:	881b      	ldrh	r3, [r3, #0]
 8009562:	b29b      	uxth	r3, r3
 8009564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800956c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	441a      	add	r2, r3
 8009578:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800957a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800957e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009586:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800958a:	b29b      	uxth	r3, r3
 800958c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	881b      	ldrh	r3, [r3, #0]
 800959a:	b29b      	uxth	r3, r3
 800959c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095a4:	873b      	strh	r3, [r7, #56]	; 0x38
 80095a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80095a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80095ac:	873b      	strh	r3, [r7, #56]	; 0x38
 80095ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80095b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80095b4:	873b      	strh	r3, [r7, #56]	; 0x38
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	441a      	add	r2, r3
 80095c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80095c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	4413      	add	r3, r2
 80095e0:	881b      	ldrh	r3, [r3, #0]
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	441a      	add	r2, r3
 80095f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80095fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800960a:	b29b      	uxth	r3, r3
 800960c:	8013      	strh	r3, [r2, #0]
 800960e:	e0bc      	b.n	800978a <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	4413      	add	r3, r2
 800961a:	881b      	ldrh	r3, [r3, #0]
 800961c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009620:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d01d      	beq.n	8009668 <USB_ActivateEndpoint+0x640>
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	4413      	add	r3, r2
 8009636:	881b      	ldrh	r3, [r3, #0]
 8009638:	b29b      	uxth	r3, r3
 800963a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800963e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009642:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	441a      	add	r2, r3
 8009650:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800965c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009664:	b29b      	uxth	r3, r3
 8009666:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4413      	add	r3, r2
 8009672:	881b      	ldrh	r3, [r3, #0]
 8009674:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009678:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800967c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009680:	2b00      	cmp	r3, #0
 8009682:	d01d      	beq.n	80096c0 <USB_ActivateEndpoint+0x698>
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4413      	add	r3, r2
 800968e:	881b      	ldrh	r3, [r3, #0]
 8009690:	b29b      	uxth	r3, r3
 8009692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800969a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	441a      	add	r2, r3
 80096a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80096ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80096bc:	b29b      	uxth	r3, r3
 80096be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	78db      	ldrb	r3, [r3, #3]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d024      	beq.n	8009712 <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	4413      	add	r3, r2
 80096d2:	881b      	ldrh	r3, [r3, #0]
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80096e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80096e6:	f083 0320 	eor.w	r3, r3, #32
 80096ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	441a      	add	r2, r3
 80096f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80096fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800970c:	b29b      	uxth	r3, r3
 800970e:	8013      	strh	r3, [r2, #0]
 8009710:	e01d      	b.n	800974e <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	881b      	ldrh	r3, [r3, #0]
 800971e:	b29b      	uxth	r3, r3
 8009720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009728:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	441a      	add	r2, r3
 8009736:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800973a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800973e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800974a:	b29b      	uxth	r3, r3
 800974c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	4413      	add	r3, r2
 8009758:	881b      	ldrh	r3, [r3, #0]
 800975a:	b29b      	uxth	r3, r3
 800975c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009764:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	441a      	add	r2, r3
 8009772:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800977a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800977e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009786:	b29b      	uxth	r3, r3
 8009788:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800978a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800978e:	4618      	mov	r0, r3
 8009790:	3774      	adds	r7, #116	; 0x74
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop

0800979c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800979c:	b480      	push	{r7}
 800979e:	b08d      	sub	sp, #52	; 0x34
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	7b1b      	ldrb	r3, [r3, #12]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f040 808e 	bne.w	80098cc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	785b      	ldrb	r3, [r3, #1]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d044      	beq.n	8009842 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4413      	add	r3, r2
 80097c2:	881b      	ldrh	r3, [r3, #0]
 80097c4:	81bb      	strh	r3, [r7, #12]
 80097c6:	89bb      	ldrh	r3, [r7, #12]
 80097c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d01b      	beq.n	8009808 <USB_DeactivateEndpoint+0x6c>
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	4413      	add	r3, r2
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	b29b      	uxth	r3, r3
 80097de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097e6:	817b      	strh	r3, [r7, #10]
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	441a      	add	r2, r3
 80097f2:	897b      	ldrh	r3, [r7, #10]
 80097f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009800:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009804:	b29b      	uxth	r3, r3
 8009806:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	4413      	add	r3, r2
 8009812:	881b      	ldrh	r3, [r3, #0]
 8009814:	b29b      	uxth	r3, r3
 8009816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800981a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800981e:	813b      	strh	r3, [r7, #8]
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	441a      	add	r2, r3
 800982a:	893b      	ldrh	r3, [r7, #8]
 800982c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800983c:	b29b      	uxth	r3, r3
 800983e:	8013      	strh	r3, [r2, #0]
 8009840:	e192      	b.n	8009b68 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	4413      	add	r3, r2
 800984c:	881b      	ldrh	r3, [r3, #0]
 800984e:	827b      	strh	r3, [r7, #18]
 8009850:	8a7b      	ldrh	r3, [r7, #18]
 8009852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d01b      	beq.n	8009892 <USB_DeactivateEndpoint+0xf6>
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4413      	add	r3, r2
 8009864:	881b      	ldrh	r3, [r3, #0]
 8009866:	b29b      	uxth	r3, r3
 8009868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800986c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009870:	823b      	strh	r3, [r7, #16]
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	441a      	add	r2, r3
 800987c:	8a3b      	ldrh	r3, [r7, #16]
 800987e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009886:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800988a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800988e:	b29b      	uxth	r3, r3
 8009890:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	4413      	add	r3, r2
 800989c:	881b      	ldrh	r3, [r3, #0]
 800989e:	b29b      	uxth	r3, r3
 80098a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098a8:	81fb      	strh	r3, [r7, #14]
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	441a      	add	r2, r3
 80098b4:	89fb      	ldrh	r3, [r7, #14]
 80098b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	8013      	strh	r3, [r2, #0]
 80098ca:	e14d      	b.n	8009b68 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	785b      	ldrb	r3, [r3, #1]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f040 80a5 	bne.w	8009a20 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4413      	add	r3, r2
 80098e0:	881b      	ldrh	r3, [r3, #0]
 80098e2:	843b      	strh	r3, [r7, #32]
 80098e4:	8c3b      	ldrh	r3, [r7, #32]
 80098e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d01b      	beq.n	8009926 <USB_DeactivateEndpoint+0x18a>
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4413      	add	r3, r2
 80098f8:	881b      	ldrh	r3, [r3, #0]
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009904:	83fb      	strh	r3, [r7, #30]
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	441a      	add	r2, r3
 8009910:	8bfb      	ldrh	r3, [r7, #30]
 8009912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800991a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800991e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009922:	b29b      	uxth	r3, r3
 8009924:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	4413      	add	r3, r2
 8009930:	881b      	ldrh	r3, [r3, #0]
 8009932:	83bb      	strh	r3, [r7, #28]
 8009934:	8bbb      	ldrh	r3, [r7, #28]
 8009936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800993a:	2b00      	cmp	r3, #0
 800993c:	d01b      	beq.n	8009976 <USB_DeactivateEndpoint+0x1da>
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4413      	add	r3, r2
 8009948:	881b      	ldrh	r3, [r3, #0]
 800994a:	b29b      	uxth	r3, r3
 800994c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009954:	837b      	strh	r3, [r7, #26]
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	441a      	add	r2, r3
 8009960:	8b7b      	ldrh	r3, [r7, #26]
 8009962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800996a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800996e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009972:	b29b      	uxth	r3, r3
 8009974:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4413      	add	r3, r2
 8009980:	881b      	ldrh	r3, [r3, #0]
 8009982:	b29b      	uxth	r3, r3
 8009984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800998c:	833b      	strh	r3, [r7, #24]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	441a      	add	r2, r3
 8009998:	8b3b      	ldrh	r3, [r7, #24]
 800999a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800999e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4413      	add	r3, r2
 80099b8:	881b      	ldrh	r3, [r3, #0]
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099c4:	82fb      	strh	r3, [r7, #22]
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	441a      	add	r2, r3
 80099d0:	8afb      	ldrh	r3, [r7, #22]
 80099d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4413      	add	r3, r2
 80099f0:	881b      	ldrh	r3, [r3, #0]
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099fc:	82bb      	strh	r3, [r7, #20]
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	441a      	add	r2, r3
 8009a08:	8abb      	ldrh	r3, [r7, #20]
 8009a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	8013      	strh	r3, [r2, #0]
 8009a1e:	e0a3      	b.n	8009b68 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4413      	add	r3, r2
 8009a2a:	881b      	ldrh	r3, [r3, #0]
 8009a2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009a2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d01b      	beq.n	8009a70 <USB_DeactivateEndpoint+0x2d4>
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4413      	add	r3, r2
 8009a42:	881b      	ldrh	r3, [r3, #0]
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a4e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	441a      	add	r2, r3
 8009a5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	881b      	ldrh	r3, [r3, #0]
 8009a7c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009a7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d01b      	beq.n	8009ac0 <USB_DeactivateEndpoint+0x324>
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4413      	add	r3, r2
 8009a92:	881b      	ldrh	r3, [r3, #0]
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a9e:	853b      	strh	r3, [r7, #40]	; 0x28
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	441a      	add	r2, r3
 8009aaa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ab8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4413      	add	r3, r2
 8009aca:	881b      	ldrh	r3, [r3, #0]
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ad6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	441a      	add	r2, r3
 8009ae2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009aec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	4413      	add	r3, r2
 8009b02:	881b      	ldrh	r3, [r3, #0]
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b0e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	441a      	add	r2, r3
 8009b1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	4413      	add	r3, r2
 8009b3a:	881b      	ldrh	r3, [r3, #0]
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b46:	847b      	strh	r3, [r7, #34]	; 0x22
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	441a      	add	r2, r3
 8009b52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3734      	adds	r7, #52	; 0x34
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b0c2      	sub	sp, #264	; 0x108
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b84:	6018      	str	r0, [r3, #0]
 8009b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b8e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	785b      	ldrb	r3, [r3, #1]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	f040 867b 	bne.w	800a898 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	699a      	ldr	r2, [r3, #24]
 8009bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d908      	bls.n	8009bd0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009bce:	e007      	b.n	8009be0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	7b1b      	ldrb	r3, [r3, #12]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d13a      	bne.n	8009c66 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	6959      	ldr	r1, [r3, #20]
 8009bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	88da      	ldrh	r2, [r3, #6]
 8009c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009c12:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009c16:	6800      	ldr	r0, [r0, #0]
 8009c18:	f001 fc3e 	bl	800b498 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	613b      	str	r3, [r7, #16]
 8009c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	461a      	mov	r2, r3
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	613b      	str	r3, [r7, #16]
 8009c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	00da      	lsls	r2, r3, #3
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	4413      	add	r3, r2
 8009c52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c56:	60fb      	str	r3, [r7, #12]
 8009c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	801a      	strh	r2, [r3, #0]
 8009c62:	f000 bde3 	b.w	800a82c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	78db      	ldrb	r3, [r3, #3]
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	f040 843a 	bne.w	800a4ec <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	6a1a      	ldr	r2, [r3, #32]
 8009c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	691b      	ldr	r3, [r3, #16]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	f240 83b7 	bls.w	800a404 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4413      	add	r3, r2
 8009cb0:	881b      	ldrh	r3, [r3, #0]
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cbc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	441a      	add	r2, r3
 8009cda:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ce6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	6a1a      	ldr	r2, [r3, #32]
 8009cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d02:	1ad2      	subs	r2, r2, r3
 8009d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4413      	add	r3, r2
 8009d2a:	881b      	ldrh	r3, [r3, #0]
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f000 81b3 	beq.w	800a09e <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	633b      	str	r3, [r7, #48]	; 0x30
 8009d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	785b      	ldrb	r3, [r3, #1]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d16d      	bne.n	8009e30 <USB_EPStartXfer+0x2ba>
 8009d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	461a      	mov	r2, r3
 8009d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d74:	4413      	add	r3, r2
 8009d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	00da      	lsls	r2, r3, #3
 8009d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d88:	4413      	add	r3, r2
 8009d8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8009d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d94:	2b3e      	cmp	r3, #62	; 0x3e
 8009d96:	d91c      	bls.n	8009dd2 <USB_EPStartXfer+0x25c>
 8009d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d9c:	095b      	lsrs	r3, r3, #5
 8009d9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009da6:	f003 031f 	and.w	r3, r3, #31
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d104      	bne.n	8009db8 <USB_EPStartXfer+0x242>
 8009dae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009db2:	3b01      	subs	r3, #1
 8009db4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009db8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	029b      	lsls	r3, r3, #10
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dce:	801a      	strh	r2, [r3, #0]
 8009dd0:	e053      	b.n	8009e7a <USB_EPStartXfer+0x304>
 8009dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d112      	bne.n	8009e00 <USB_EPStartXfer+0x28a>
 8009dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ddc:	881b      	ldrh	r3, [r3, #0]
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de8:	801a      	strh	r2, [r3, #0]
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	881b      	ldrh	r3, [r3, #0]
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfc:	801a      	strh	r2, [r3, #0]
 8009dfe:	e03c      	b.n	8009e7a <USB_EPStartXfer+0x304>
 8009e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e04:	085b      	lsrs	r3, r3, #1
 8009e06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e0e:	f003 0301 	and.w	r3, r3, #1
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d004      	beq.n	8009e20 <USB_EPStartXfer+0x2aa>
 8009e16:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009e20:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	029b      	lsls	r3, r3, #10
 8009e28:	b29a      	uxth	r2, r3
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	801a      	strh	r2, [r3, #0]
 8009e2e:	e024      	b.n	8009e7a <USB_EPStartXfer+0x304>
 8009e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	785b      	ldrb	r3, [r3, #1]
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d11c      	bne.n	8009e7a <USB_EPStartXfer+0x304>
 8009e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	461a      	mov	r2, r3
 8009e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e54:	4413      	add	r3, r2
 8009e56:	633b      	str	r3, [r7, #48]	; 0x30
 8009e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	00da      	lsls	r2, r3, #3
 8009e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e68:	4413      	add	r3, r2
 8009e6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	895b      	ldrh	r3, [r3, #10]
 8009e86:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	6959      	ldr	r1, [r3, #20]
 8009e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009ea0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009ea4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009ea8:	6800      	ldr	r0, [r0, #0]
 8009eaa:	f001 faf5 	bl	800b498 <USB_WritePMA>
            ep->xfer_buff += len;
 8009eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	695a      	ldr	r2, [r3, #20]
 8009eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ebe:	441a      	add	r2, r3
 8009ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	6a1a      	ldr	r2, [r3, #32]
 8009ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d90f      	bls.n	8009f08 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8009ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	6a1a      	ldr	r2, [r3, #32]
 8009ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ef8:	1ad2      	subs	r2, r2, r3
 8009efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	621a      	str	r2, [r3, #32]
 8009f06:	e00e      	b.n	8009f26 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8009f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6a1b      	ldr	r3, [r3, #32]
 8009f14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2200      	movs	r2, #0
 8009f24:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	785b      	ldrb	r3, [r3, #1]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d16d      	bne.n	800a012 <USB_EPStartXfer+0x49c>
 8009f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	61bb      	str	r3, [r7, #24]
 8009f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	461a      	mov	r2, r3
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	4413      	add	r3, r2
 8009f58:	61bb      	str	r3, [r7, #24]
 8009f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	00da      	lsls	r2, r3, #3
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f70:	617b      	str	r3, [r7, #20]
 8009f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f76:	2b3e      	cmp	r3, #62	; 0x3e
 8009f78:	d91c      	bls.n	8009fb4 <USB_EPStartXfer+0x43e>
 8009f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f7e:	095b      	lsrs	r3, r3, #5
 8009f80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f88:	f003 031f 	and.w	r3, r3, #31
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d104      	bne.n	8009f9a <USB_EPStartXfer+0x424>
 8009f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f94:	3b01      	subs	r3, #1
 8009f96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	029b      	lsls	r3, r3, #10
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	801a      	strh	r2, [r3, #0]
 8009fb2:	e059      	b.n	800a068 <USB_EPStartXfer+0x4f2>
 8009fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d112      	bne.n	8009fe2 <USB_EPStartXfer+0x46c>
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	881b      	ldrh	r3, [r3, #0]
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009fc6:	b29a      	uxth	r2, r3
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	801a      	strh	r2, [r3, #0]
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	881b      	ldrh	r3, [r3, #0]
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	801a      	strh	r2, [r3, #0]
 8009fe0:	e042      	b.n	800a068 <USB_EPStartXfer+0x4f2>
 8009fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fe6:	085b      	lsrs	r3, r3, #1
 8009fe8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ff0:	f003 0301 	and.w	r3, r3, #1
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d004      	beq.n	800a002 <USB_EPStartXfer+0x48c>
 8009ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a006:	b29b      	uxth	r3, r3
 800a008:	029b      	lsls	r3, r3, #10
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	801a      	strh	r2, [r3, #0]
 800a010:	e02a      	b.n	800a068 <USB_EPStartXfer+0x4f2>
 800a012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	785b      	ldrb	r3, [r3, #1]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d122      	bne.n	800a068 <USB_EPStartXfer+0x4f2>
 800a022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a026:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	623b      	str	r3, [r7, #32]
 800a02e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a032:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	461a      	mov	r2, r3
 800a040:	6a3b      	ldr	r3, [r7, #32]
 800a042:	4413      	add	r3, r2
 800a044:	623b      	str	r3, [r7, #32]
 800a046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a04a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	00da      	lsls	r2, r3, #3
 800a054:	6a3b      	ldr	r3, [r7, #32]
 800a056:	4413      	add	r3, r2
 800a058:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a05c:	61fb      	str	r3, [r7, #28]
 800a05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a062:	b29a      	uxth	r2, r3
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a06c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	891b      	ldrh	r3, [r3, #8]
 800a074:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a07c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	6959      	ldr	r1, [r3, #20]
 800a084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a088:	b29b      	uxth	r3, r3
 800a08a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a08e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a092:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a096:	6800      	ldr	r0, [r0, #0]
 800a098:	f001 f9fe 	bl	800b498 <USB_WritePMA>
 800a09c:	e3c6      	b.n	800a82c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a09e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	785b      	ldrb	r3, [r3, #1]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d16d      	bne.n	800a18a <USB_EPStartXfer+0x614>
 800a0ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0ce:	4413      	add	r3, r2
 800a0d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	00da      	lsls	r2, r3, #3
 800a0e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0e2:	4413      	add	r3, r2
 800a0e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a0e8:	647b      	str	r3, [r7, #68]	; 0x44
 800a0ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0ee:	2b3e      	cmp	r3, #62	; 0x3e
 800a0f0:	d91c      	bls.n	800a12c <USB_EPStartXfer+0x5b6>
 800a0f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0f6:	095b      	lsrs	r3, r3, #5
 800a0f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a0fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a100:	f003 031f 	and.w	r3, r3, #31
 800a104:	2b00      	cmp	r3, #0
 800a106:	d104      	bne.n	800a112 <USB_EPStartXfer+0x59c>
 800a108:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a10c:	3b01      	subs	r3, #1
 800a10e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a112:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a116:	b29b      	uxth	r3, r3
 800a118:	029b      	lsls	r3, r3, #10
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a124:	b29a      	uxth	r2, r3
 800a126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a128:	801a      	strh	r2, [r3, #0]
 800a12a:	e059      	b.n	800a1e0 <USB_EPStartXfer+0x66a>
 800a12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a130:	2b00      	cmp	r3, #0
 800a132:	d112      	bne.n	800a15a <USB_EPStartXfer+0x5e4>
 800a134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a136:	881b      	ldrh	r3, [r3, #0]
 800a138:	b29b      	uxth	r3, r3
 800a13a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a13e:	b29a      	uxth	r2, r3
 800a140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a142:	801a      	strh	r2, [r3, #0]
 800a144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a146:	881b      	ldrh	r3, [r3, #0]
 800a148:	b29b      	uxth	r3, r3
 800a14a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a14e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a152:	b29a      	uxth	r2, r3
 800a154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a156:	801a      	strh	r2, [r3, #0]
 800a158:	e042      	b.n	800a1e0 <USB_EPStartXfer+0x66a>
 800a15a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a15e:	085b      	lsrs	r3, r3, #1
 800a160:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a168:	f003 0301 	and.w	r3, r3, #1
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d004      	beq.n	800a17a <USB_EPStartXfer+0x604>
 800a170:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a174:	3301      	adds	r3, #1
 800a176:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a17a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a17e:	b29b      	uxth	r3, r3
 800a180:	029b      	lsls	r3, r3, #10
 800a182:	b29a      	uxth	r2, r3
 800a184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a186:	801a      	strh	r2, [r3, #0]
 800a188:	e02a      	b.n	800a1e0 <USB_EPStartXfer+0x66a>
 800a18a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a18e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	785b      	ldrb	r3, [r3, #1]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d122      	bne.n	800a1e0 <USB_EPStartXfer+0x66a>
 800a19a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a19e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	653b      	str	r3, [r7, #80]	; 0x50
 800a1a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1ba:	4413      	add	r3, r2
 800a1bc:	653b      	str	r3, [r7, #80]	; 0x50
 800a1be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	00da      	lsls	r2, r3, #3
 800a1cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a1d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a1e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	891b      	ldrh	r3, [r3, #8]
 800a1ec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a1f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	6959      	ldr	r1, [r3, #20]
 800a1fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a200:	b29b      	uxth	r3, r3
 800a202:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a206:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a20a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a20e:	6800      	ldr	r0, [r0, #0]
 800a210:	f001 f942 	bl	800b498 <USB_WritePMA>
            ep->xfer_buff += len;
 800a214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	695a      	ldr	r2, [r3, #20]
 800a220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a224:	441a      	add	r2, r3
 800a226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a22a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	6a1a      	ldr	r2, [r3, #32]
 800a23e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	691b      	ldr	r3, [r3, #16]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d90f      	bls.n	800a26e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800a24e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	6a1a      	ldr	r2, [r3, #32]
 800a25a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a25e:	1ad2      	subs	r2, r2, r3
 800a260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	621a      	str	r2, [r3, #32]
 800a26c:	e00e      	b.n	800a28c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800a26e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a27e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2200      	movs	r2, #0
 800a28a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a28c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a290:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	643b      	str	r3, [r7, #64]	; 0x40
 800a298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a29c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	785b      	ldrb	r3, [r3, #1]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d16d      	bne.n	800a384 <USB_EPStartXfer+0x80e>
 800a2a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c8:	4413      	add	r3, r2
 800a2ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	00da      	lsls	r2, r3, #3
 800a2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2dc:	4413      	add	r3, r2
 800a2de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a2e2:	637b      	str	r3, [r7, #52]	; 0x34
 800a2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2e8:	2b3e      	cmp	r3, #62	; 0x3e
 800a2ea:	d91c      	bls.n	800a326 <USB_EPStartXfer+0x7b0>
 800a2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2f0:	095b      	lsrs	r3, r3, #5
 800a2f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a2f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2fa:	f003 031f 	and.w	r3, r3, #31
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d104      	bne.n	800a30c <USB_EPStartXfer+0x796>
 800a302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a306:	3b01      	subs	r3, #1
 800a308:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a30c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a310:	b29b      	uxth	r3, r3
 800a312:	029b      	lsls	r3, r3, #10
 800a314:	b29b      	uxth	r3, r3
 800a316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a31a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a31e:	b29a      	uxth	r2, r3
 800a320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a322:	801a      	strh	r2, [r3, #0]
 800a324:	e053      	b.n	800a3ce <USB_EPStartXfer+0x858>
 800a326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d112      	bne.n	800a354 <USB_EPStartXfer+0x7de>
 800a32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a330:	881b      	ldrh	r3, [r3, #0]
 800a332:	b29b      	uxth	r3, r3
 800a334:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a338:	b29a      	uxth	r2, r3
 800a33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a33c:	801a      	strh	r2, [r3, #0]
 800a33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a340:	881b      	ldrh	r3, [r3, #0]
 800a342:	b29b      	uxth	r3, r3
 800a344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a34c:	b29a      	uxth	r2, r3
 800a34e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a350:	801a      	strh	r2, [r3, #0]
 800a352:	e03c      	b.n	800a3ce <USB_EPStartXfer+0x858>
 800a354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a358:	085b      	lsrs	r3, r3, #1
 800a35a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a362:	f003 0301 	and.w	r3, r3, #1
 800a366:	2b00      	cmp	r3, #0
 800a368:	d004      	beq.n	800a374 <USB_EPStartXfer+0x7fe>
 800a36a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a36e:	3301      	adds	r3, #1
 800a370:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a378:	b29b      	uxth	r3, r3
 800a37a:	029b      	lsls	r3, r3, #10
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a380:	801a      	strh	r2, [r3, #0]
 800a382:	e024      	b.n	800a3ce <USB_EPStartXfer+0x858>
 800a384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	785b      	ldrb	r3, [r3, #1]
 800a390:	2b01      	cmp	r3, #1
 800a392:	d11c      	bne.n	800a3ce <USB_EPStartXfer+0x858>
 800a394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a398:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3a8:	4413      	add	r3, r2
 800a3aa:	643b      	str	r3, [r7, #64]	; 0x40
 800a3ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	00da      	lsls	r2, r3, #3
 800a3ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3bc:	4413      	add	r3, r2
 800a3be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a3ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	895b      	ldrh	r3, [r3, #10]
 800a3da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	6959      	ldr	r1, [r3, #20]
 800a3ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a3f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a3f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a3fc:	6800      	ldr	r0, [r0, #0]
 800a3fe:	f001 f84b 	bl	800b498 <USB_WritePMA>
 800a402:	e213      	b.n	800a82c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	6a1b      	ldr	r3, [r3, #32]
 800a410:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a418:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4413      	add	r3, r2
 800a42e:	881b      	ldrh	r3, [r3, #0]
 800a430:	b29b      	uxth	r3, r3
 800a432:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a43a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a43e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a44c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	441a      	add	r2, r3
 800a458:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a45c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a474:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a47c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a480:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	461a      	mov	r2, r3
 800a48e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a490:	4413      	add	r3, r2
 800a492:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	00da      	lsls	r2, r3, #3
 800a4a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a4aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800a4ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a4b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a4b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	891b      	ldrh	r3, [r3, #8]
 800a4c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	6959      	ldr	r1, [r3, #20]
 800a4d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a4dc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a4e0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a4e4:	6800      	ldr	r0, [r0, #0]
 800a4e6:	f000 ffd7 	bl	800b498 <USB_WritePMA>
 800a4ea:	e19f      	b.n	800a82c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a4ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	6a1a      	ldr	r2, [r3, #32]
 800a4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4fc:	1ad2      	subs	r2, r2, r3
 800a4fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a50a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a50e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	4413      	add	r3, r2
 800a524:	881b      	ldrh	r3, [r3, #0]
 800a526:	b29b      	uxth	r3, r3
 800a528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f000 80bc 	beq.w	800a6aa <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	673b      	str	r3, [r7, #112]	; 0x70
 800a53e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	785b      	ldrb	r3, [r3, #1]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d16d      	bne.n	800a62a <USB_EPStartXfer+0xab4>
 800a54e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a552:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	66bb      	str	r3, [r7, #104]	; 0x68
 800a55a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a55e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a568:	b29b      	uxth	r3, r3
 800a56a:	461a      	mov	r2, r3
 800a56c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a56e:	4413      	add	r3, r2
 800a570:	66bb      	str	r3, [r7, #104]	; 0x68
 800a572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	00da      	lsls	r2, r3, #3
 800a580:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a582:	4413      	add	r3, r2
 800a584:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a588:	667b      	str	r3, [r7, #100]	; 0x64
 800a58a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a58e:	2b3e      	cmp	r3, #62	; 0x3e
 800a590:	d91c      	bls.n	800a5cc <USB_EPStartXfer+0xa56>
 800a592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a596:	095b      	lsrs	r3, r3, #5
 800a598:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a59c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5a0:	f003 031f 	and.w	r3, r3, #31
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d104      	bne.n	800a5b2 <USB_EPStartXfer+0xa3c>
 800a5a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a5b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	029b      	lsls	r3, r3, #10
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5c4:	b29a      	uxth	r2, r3
 800a5c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5c8:	801a      	strh	r2, [r3, #0]
 800a5ca:	e053      	b.n	800a674 <USB_EPStartXfer+0xafe>
 800a5cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d112      	bne.n	800a5fa <USB_EPStartXfer+0xa84>
 800a5d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5d6:	881b      	ldrh	r3, [r3, #0]
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5e2:	801a      	strh	r2, [r3, #0]
 800a5e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5e6:	881b      	ldrh	r3, [r3, #0]
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5f6:	801a      	strh	r2, [r3, #0]
 800a5f8:	e03c      	b.n	800a674 <USB_EPStartXfer+0xafe>
 800a5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5fe:	085b      	lsrs	r3, r3, #1
 800a600:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a608:	f003 0301 	and.w	r3, r3, #1
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d004      	beq.n	800a61a <USB_EPStartXfer+0xaa4>
 800a610:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a614:	3301      	adds	r3, #1
 800a616:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a61a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a61e:	b29b      	uxth	r3, r3
 800a620:	029b      	lsls	r3, r3, #10
 800a622:	b29a      	uxth	r2, r3
 800a624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a626:	801a      	strh	r2, [r3, #0]
 800a628:	e024      	b.n	800a674 <USB_EPStartXfer+0xafe>
 800a62a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a62e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	785b      	ldrb	r3, [r3, #1]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d11c      	bne.n	800a674 <USB_EPStartXfer+0xafe>
 800a63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a63e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a648:	b29b      	uxth	r3, r3
 800a64a:	461a      	mov	r2, r3
 800a64c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a64e:	4413      	add	r3, r2
 800a650:	673b      	str	r3, [r7, #112]	; 0x70
 800a652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	00da      	lsls	r2, r3, #3
 800a660:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a662:	4413      	add	r3, r2
 800a664:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a668:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a66a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a66e:	b29a      	uxth	r2, r3
 800a670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a672:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	895b      	ldrh	r3, [r3, #10]
 800a680:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	6959      	ldr	r1, [r3, #20]
 800a690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a694:	b29b      	uxth	r3, r3
 800a696:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a69a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a69e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a6a2:	6800      	ldr	r0, [r0, #0]
 800a6a4:	f000 fef8 	bl	800b498 <USB_WritePMA>
 800a6a8:	e0c0      	b.n	800a82c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a6aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	785b      	ldrb	r3, [r3, #1]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d16d      	bne.n	800a796 <USB_EPStartXfer+0xc20>
 800a6ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a6c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a6da:	4413      	add	r3, r2
 800a6dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a6de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	00da      	lsls	r2, r3, #3
 800a6ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6f4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6fa:	2b3e      	cmp	r3, #62	; 0x3e
 800a6fc:	d91c      	bls.n	800a738 <USB_EPStartXfer+0xbc2>
 800a6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a702:	095b      	lsrs	r3, r3, #5
 800a704:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a70c:	f003 031f 	and.w	r3, r3, #31
 800a710:	2b00      	cmp	r3, #0
 800a712:	d104      	bne.n	800a71e <USB_EPStartXfer+0xba8>
 800a714:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a718:	3b01      	subs	r3, #1
 800a71a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a71e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a722:	b29b      	uxth	r3, r3
 800a724:	029b      	lsls	r3, r3, #10
 800a726:	b29b      	uxth	r3, r3
 800a728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a72c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a730:	b29a      	uxth	r2, r3
 800a732:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a734:	801a      	strh	r2, [r3, #0]
 800a736:	e05f      	b.n	800a7f8 <USB_EPStartXfer+0xc82>
 800a738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d112      	bne.n	800a766 <USB_EPStartXfer+0xbf0>
 800a740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a742:	881b      	ldrh	r3, [r3, #0]
 800a744:	b29b      	uxth	r3, r3
 800a746:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a74e:	801a      	strh	r2, [r3, #0]
 800a750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a752:	881b      	ldrh	r3, [r3, #0]
 800a754:	b29b      	uxth	r3, r3
 800a756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a75a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a75e:	b29a      	uxth	r2, r3
 800a760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a762:	801a      	strh	r2, [r3, #0]
 800a764:	e048      	b.n	800a7f8 <USB_EPStartXfer+0xc82>
 800a766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a76a:	085b      	lsrs	r3, r3, #1
 800a76c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a774:	f003 0301 	and.w	r3, r3, #1
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d004      	beq.n	800a786 <USB_EPStartXfer+0xc10>
 800a77c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a780:	3301      	adds	r3, #1
 800a782:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a786:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	029b      	lsls	r3, r3, #10
 800a78e:	b29a      	uxth	r2, r3
 800a790:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a792:	801a      	strh	r2, [r3, #0]
 800a794:	e030      	b.n	800a7f8 <USB_EPStartXfer+0xc82>
 800a796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a79a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	785b      	ldrb	r3, [r3, #1]
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d128      	bne.n	800a7f8 <USB_EPStartXfer+0xc82>
 800a7a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a7b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a7d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	00da      	lsls	r2, r3, #3
 800a7de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a7e2:	4413      	add	r3, r2
 800a7e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a7ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a7f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a7f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	891b      	ldrh	r3, [r3, #8]
 800a804:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a80c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	6959      	ldr	r1, [r3, #20]
 800a814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a818:	b29b      	uxth	r3, r3
 800a81a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a81e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a822:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a826:	6800      	ldr	r0, [r0, #0]
 800a828:	f000 fe36 	bl	800b498 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a82c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a830:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a83a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	4413      	add	r3, r2
 800a846:	881b      	ldrh	r3, [r3, #0]
 800a848:	b29b      	uxth	r3, r3
 800a84a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a84e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a852:	817b      	strh	r3, [r7, #10]
 800a854:	897b      	ldrh	r3, [r7, #10]
 800a856:	f083 0310 	eor.w	r3, r3, #16
 800a85a:	817b      	strh	r3, [r7, #10]
 800a85c:	897b      	ldrh	r3, [r7, #10]
 800a85e:	f083 0320 	eor.w	r3, r3, #32
 800a862:	817b      	strh	r3, [r7, #10]
 800a864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a868:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	441a      	add	r2, r3
 800a87e:	897b      	ldrh	r3, [r7, #10]
 800a880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a88c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a890:	b29b      	uxth	r3, r3
 800a892:	8013      	strh	r3, [r2, #0]
 800a894:	f000 bc9f 	b.w	800b1d6 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a89c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	7b1b      	ldrb	r3, [r3, #12]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f040 80ae 	bne.w	800aa06 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a8aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	699a      	ldr	r2, [r3, #24]
 800a8b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d917      	bls.n	800a8f6 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800a8c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a8d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	699a      	ldr	r2, [r3, #24]
 800a8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e6:	1ad2      	subs	r2, r2, r3
 800a8e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	619a      	str	r2, [r3, #24]
 800a8f4:	e00e      	b.n	800a914 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800a8f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	699b      	ldr	r3, [r3, #24]
 800a902:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a90a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2200      	movs	r2, #0
 800a912:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a918:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a930:	b29b      	uxth	r3, r3
 800a932:	461a      	mov	r2, r3
 800a934:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a938:	4413      	add	r3, r2
 800a93a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a93e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	00da      	lsls	r2, r3, #3
 800a94c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a950:	4413      	add	r3, r2
 800a952:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a956:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a95e:	2b3e      	cmp	r3, #62	; 0x3e
 800a960:	d91d      	bls.n	800a99e <USB_EPStartXfer+0xe28>
 800a962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a966:	095b      	lsrs	r3, r3, #5
 800a968:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a970:	f003 031f 	and.w	r3, r3, #31
 800a974:	2b00      	cmp	r3, #0
 800a976:	d104      	bne.n	800a982 <USB_EPStartXfer+0xe0c>
 800a978:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a97c:	3b01      	subs	r3, #1
 800a97e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a982:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a986:	b29b      	uxth	r3, r3
 800a988:	029b      	lsls	r3, r3, #10
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a994:	b29a      	uxth	r2, r3
 800a996:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a99a:	801a      	strh	r2, [r3, #0]
 800a99c:	e3e1      	b.n	800b162 <USB_EPStartXfer+0x15ec>
 800a99e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d116      	bne.n	800a9d4 <USB_EPStartXfer+0xe5e>
 800a9a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9aa:	881b      	ldrh	r3, [r3, #0]
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9b8:	801a      	strh	r2, [r3, #0]
 800a9ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9be:	881b      	ldrh	r3, [r3, #0]
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9d0:	801a      	strh	r2, [r3, #0]
 800a9d2:	e3c6      	b.n	800b162 <USB_EPStartXfer+0x15ec>
 800a9d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d8:	085b      	lsrs	r3, r3, #1
 800a9da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a9de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e2:	f003 0301 	and.w	r3, r3, #1
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d004      	beq.n	800a9f4 <USB_EPStartXfer+0xe7e>
 800a9ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a9f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	029b      	lsls	r3, r3, #10
 800a9fc:	b29a      	uxth	r2, r3
 800a9fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa02:	801a      	strh	r2, [r3, #0]
 800aa04:	e3ad      	b.n	800b162 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800aa06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	78db      	ldrb	r3, [r3, #3]
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	f040 8200 	bne.w	800ae18 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800aa18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	785b      	ldrb	r3, [r3, #1]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f040 8091 	bne.w	800ab4c <USB_EPStartXfer+0xfd6>
 800aa2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aa38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	461a      	mov	r2, r3
 800aa4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa4e:	4413      	add	r3, r2
 800aa50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aa54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	00da      	lsls	r2, r3, #3
 800aa62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa66:	4413      	add	r3, r2
 800aa68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aa70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	2b3e      	cmp	r3, #62	; 0x3e
 800aa7e:	d925      	bls.n	800aacc <USB_EPStartXfer+0xf56>
 800aa80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	691b      	ldr	r3, [r3, #16]
 800aa8c:	095b      	lsrs	r3, r3, #5
 800aa8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aa92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	f003 031f 	and.w	r3, r3, #31
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d104      	bne.n	800aab0 <USB_EPStartXfer+0xf3a>
 800aaa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	029b      	lsls	r3, r3, #10
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aabe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aac8:	801a      	strh	r2, [r3, #0]
 800aaca:	e074      	b.n	800abb6 <USB_EPStartXfer+0x1040>
 800aacc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	691b      	ldr	r3, [r3, #16]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d116      	bne.n	800ab0a <USB_EPStartXfer+0xf94>
 800aadc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aae0:	881b      	ldrh	r3, [r3, #0]
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aae8:	b29a      	uxth	r2, r3
 800aaea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aaee:	801a      	strh	r2, [r3, #0]
 800aaf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aaf4:	881b      	ldrh	r3, [r3, #0]
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aafc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab00:	b29a      	uxth	r2, r3
 800ab02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ab06:	801a      	strh	r2, [r3, #0]
 800ab08:	e055      	b.n	800abb6 <USB_EPStartXfer+0x1040>
 800ab0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	085b      	lsrs	r3, r3, #1
 800ab18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ab1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	f003 0301 	and.w	r3, r3, #1
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d004      	beq.n	800ab3a <USB_EPStartXfer+0xfc4>
 800ab30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab34:	3301      	adds	r3, #1
 800ab36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ab3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	029b      	lsls	r3, r3, #10
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ab48:	801a      	strh	r2, [r3, #0]
 800ab4a:	e034      	b.n	800abb6 <USB_EPStartXfer+0x1040>
 800ab4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	785b      	ldrb	r3, [r3, #1]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d12c      	bne.n	800abb6 <USB_EPStartXfer+0x1040>
 800ab5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ab6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ab80:	4413      	add	r3, r2
 800ab82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ab86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	00da      	lsls	r2, r3, #3
 800ab94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ab98:	4413      	add	r3, r2
 800ab9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	b29a      	uxth	r2, r3
 800abb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800abb4:	801a      	strh	r2, [r3, #0]
 800abb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800abc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	785b      	ldrb	r3, [r3, #1]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	f040 8091 	bne.w	800acf8 <USB_EPStartXfer+0x1182>
 800abd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800abe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	461a      	mov	r2, r3
 800abf6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800abfa:	4413      	add	r3, r2
 800abfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ac00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	00da      	lsls	r2, r3, #3
 800ac0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ac12:	4413      	add	r3, r2
 800ac14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ac1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	2b3e      	cmp	r3, #62	; 0x3e
 800ac2a:	d925      	bls.n	800ac78 <USB_EPStartXfer+0x1102>
 800ac2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	691b      	ldr	r3, [r3, #16]
 800ac38:	095b      	lsrs	r3, r3, #5
 800ac3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ac3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	691b      	ldr	r3, [r3, #16]
 800ac4a:	f003 031f 	and.w	r3, r3, #31
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d104      	bne.n	800ac5c <USB_EPStartXfer+0x10e6>
 800ac52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac56:	3b01      	subs	r3, #1
 800ac58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ac5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	029b      	lsls	r3, r3, #10
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ac74:	801a      	strh	r2, [r3, #0]
 800ac76:	e06d      	b.n	800ad54 <USB_EPStartXfer+0x11de>
 800ac78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	691b      	ldr	r3, [r3, #16]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d116      	bne.n	800acb6 <USB_EPStartXfer+0x1140>
 800ac88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ac8c:	881b      	ldrh	r3, [r3, #0]
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ac9a:	801a      	strh	r2, [r3, #0]
 800ac9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aca0:	881b      	ldrh	r3, [r3, #0]
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acac:	b29a      	uxth	r2, r3
 800acae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800acb2:	801a      	strh	r2, [r3, #0]
 800acb4:	e04e      	b.n	800ad54 <USB_EPStartXfer+0x11de>
 800acb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	691b      	ldr	r3, [r3, #16]
 800acc2:	085b      	lsrs	r3, r3, #1
 800acc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800acc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800accc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	f003 0301 	and.w	r3, r3, #1
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d004      	beq.n	800ace6 <USB_EPStartXfer+0x1170>
 800acdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ace0:	3301      	adds	r3, #1
 800ace2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ace6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acea:	b29b      	uxth	r3, r3
 800acec:	029b      	lsls	r3, r3, #10
 800acee:	b29a      	uxth	r2, r3
 800acf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800acf4:	801a      	strh	r2, [r3, #0]
 800acf6:	e02d      	b.n	800ad54 <USB_EPStartXfer+0x11de>
 800acf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	785b      	ldrb	r3, [r3, #1]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d125      	bne.n	800ad54 <USB_EPStartXfer+0x11de>
 800ad08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	461a      	mov	r2, r3
 800ad1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ad1e:	4413      	add	r3, r2
 800ad20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ad24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	00da      	lsls	r2, r3, #3
 800ad32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ad36:	4413      	add	r3, r2
 800ad38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ad40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad52:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ad54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	69db      	ldr	r3, [r3, #28]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f000 81fe 	beq.w	800b162 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ad66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	4413      	add	r3, r2
 800ad80:	881b      	ldrh	r3, [r3, #0]
 800ad82:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ad86:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ad8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d005      	beq.n	800ad9e <USB_EPStartXfer+0x1228>
 800ad92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ad96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d10d      	bne.n	800adba <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ad9e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ada2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f040 81db 	bne.w	800b162 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800adac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800adb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f040 81d4 	bne.w	800b162 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800adba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4413      	add	r3, r2
 800add4:	881b      	ldrh	r3, [r3, #0]
 800add6:	b29b      	uxth	r3, r3
 800add8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800addc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ade0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800ade4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ade8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	441a      	add	r2, r3
 800adfe:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800ae02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	8013      	strh	r3, [r2, #0]
 800ae16:	e1a4      	b.n	800b162 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ae18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	78db      	ldrb	r3, [r3, #3]
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	f040 819a 	bne.w	800b15e <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ae2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	699a      	ldr	r2, [r3, #24]
 800ae36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d917      	bls.n	800ae76 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800ae46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	691b      	ldr	r3, [r3, #16]
 800ae52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800ae56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	699a      	ldr	r2, [r3, #24]
 800ae62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae66:	1ad2      	subs	r2, r2, r3
 800ae68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	619a      	str	r2, [r3, #24]
 800ae74:	e00e      	b.n	800ae94 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800ae76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	699b      	ldr	r3, [r3, #24]
 800ae82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800ae86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2200      	movs	r2, #0
 800ae92:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ae94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	785b      	ldrb	r3, [r3, #1]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d178      	bne.n	800af96 <USB_EPStartXfer+0x1420>
 800aea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aea8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aeb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	461a      	mov	r2, r3
 800aec4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aec8:	4413      	add	r3, r2
 800aeca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	00da      	lsls	r2, r3, #3
 800aedc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aee0:	4413      	add	r3, r2
 800aee2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aee6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aeea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeee:	2b3e      	cmp	r3, #62	; 0x3e
 800aef0:	d91d      	bls.n	800af2e <USB_EPStartXfer+0x13b8>
 800aef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef6:	095b      	lsrs	r3, r3, #5
 800aef8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800aefc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af00:	f003 031f 	and.w	r3, r3, #31
 800af04:	2b00      	cmp	r3, #0
 800af06:	d104      	bne.n	800af12 <USB_EPStartXfer+0x139c>
 800af08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af0c:	3b01      	subs	r3, #1
 800af0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800af12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af16:	b29b      	uxth	r3, r3
 800af18:	029b      	lsls	r3, r3, #10
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af24:	b29a      	uxth	r2, r3
 800af26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af2a:	801a      	strh	r2, [r3, #0]
 800af2c:	e064      	b.n	800aff8 <USB_EPStartXfer+0x1482>
 800af2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af32:	2b00      	cmp	r3, #0
 800af34:	d116      	bne.n	800af64 <USB_EPStartXfer+0x13ee>
 800af36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af3a:	881b      	ldrh	r3, [r3, #0]
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800af42:	b29a      	uxth	r2, r3
 800af44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af48:	801a      	strh	r2, [r3, #0]
 800af4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af4e:	881b      	ldrh	r3, [r3, #0]
 800af50:	b29b      	uxth	r3, r3
 800af52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af5a:	b29a      	uxth	r2, r3
 800af5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af60:	801a      	strh	r2, [r3, #0]
 800af62:	e049      	b.n	800aff8 <USB_EPStartXfer+0x1482>
 800af64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af68:	085b      	lsrs	r3, r3, #1
 800af6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800af6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af72:	f003 0301 	and.w	r3, r3, #1
 800af76:	2b00      	cmp	r3, #0
 800af78:	d004      	beq.n	800af84 <USB_EPStartXfer+0x140e>
 800af7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af7e:	3301      	adds	r3, #1
 800af80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800af84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af88:	b29b      	uxth	r3, r3
 800af8a:	029b      	lsls	r3, r3, #10
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af92:	801a      	strh	r2, [r3, #0]
 800af94:	e030      	b.n	800aff8 <USB_EPStartXfer+0x1482>
 800af96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	785b      	ldrb	r3, [r3, #1]
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d128      	bne.n	800aff8 <USB_EPStartXfer+0x1482>
 800afa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800afb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	461a      	mov	r2, r3
 800afc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800afca:	4413      	add	r3, r2
 800afcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800afd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	00da      	lsls	r2, r3, #3
 800afde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800afe2:	4413      	add	r3, r2
 800afe4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800afe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800afec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff0:	b29a      	uxth	r2, r3
 800aff2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800aff6:	801a      	strh	r2, [r3, #0]
 800aff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800affc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b00a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	785b      	ldrb	r3, [r3, #1]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d178      	bne.n	800b108 <USB_EPStartXfer+0x1592>
 800b016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b01a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b032:	b29b      	uxth	r3, r3
 800b034:	461a      	mov	r2, r3
 800b036:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b03a:	4413      	add	r3, r2
 800b03c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	00da      	lsls	r2, r3, #3
 800b04e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b052:	4413      	add	r3, r2
 800b054:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b058:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b05c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b060:	2b3e      	cmp	r3, #62	; 0x3e
 800b062:	d91d      	bls.n	800b0a0 <USB_EPStartXfer+0x152a>
 800b064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b068:	095b      	lsrs	r3, r3, #5
 800b06a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b06e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b072:	f003 031f 	and.w	r3, r3, #31
 800b076:	2b00      	cmp	r3, #0
 800b078:	d104      	bne.n	800b084 <USB_EPStartXfer+0x150e>
 800b07a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b07e:	3b01      	subs	r3, #1
 800b080:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b084:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b088:	b29b      	uxth	r3, r3
 800b08a:	029b      	lsls	r3, r3, #10
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b096:	b29a      	uxth	r2, r3
 800b098:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b09c:	801a      	strh	r2, [r3, #0]
 800b09e:	e060      	b.n	800b162 <USB_EPStartXfer+0x15ec>
 800b0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d116      	bne.n	800b0d6 <USB_EPStartXfer+0x1560>
 800b0a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b0ac:	881b      	ldrh	r3, [r3, #0]
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b0b4:	b29a      	uxth	r2, r3
 800b0b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b0ba:	801a      	strh	r2, [r3, #0]
 800b0bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b0c0:	881b      	ldrh	r3, [r3, #0]
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b0d2:	801a      	strh	r2, [r3, #0]
 800b0d4:	e045      	b.n	800b162 <USB_EPStartXfer+0x15ec>
 800b0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0da:	085b      	lsrs	r3, r3, #1
 800b0dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b0e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0e4:	f003 0301 	and.w	r3, r3, #1
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d004      	beq.n	800b0f6 <USB_EPStartXfer+0x1580>
 800b0ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b0f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	029b      	lsls	r3, r3, #10
 800b0fe:	b29a      	uxth	r2, r3
 800b100:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b104:	801a      	strh	r2, [r3, #0]
 800b106:	e02c      	b.n	800b162 <USB_EPStartXfer+0x15ec>
 800b108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b10c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	785b      	ldrb	r3, [r3, #1]
 800b114:	2b01      	cmp	r3, #1
 800b116:	d124      	bne.n	800b162 <USB_EPStartXfer+0x15ec>
 800b118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b11c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b126:	b29b      	uxth	r3, r3
 800b128:	461a      	mov	r2, r3
 800b12a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b12e:	4413      	add	r3, r2
 800b130:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	00da      	lsls	r2, r3, #3
 800b142:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b146:	4413      	add	r3, r2
 800b148:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b14c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b154:	b29a      	uxth	r2, r3
 800b156:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b15a:	801a      	strh	r2, [r3, #0]
 800b15c:	e001      	b.n	800b162 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800b15e:	2301      	movs	r3, #1
 800b160:	e03a      	b.n	800b1d8 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b166:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4413      	add	r3, r2
 800b17c:	881b      	ldrh	r3, [r3, #0]
 800b17e:	b29b      	uxth	r3, r3
 800b180:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b188:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b18c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b190:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b194:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b198:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b19c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b1a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b1a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	441a      	add	r2, r3
 800b1be:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b1c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b1d6:	2300      	movs	r3, #0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b1e2:	b480      	push	{r7}
 800b1e4:	b085      	sub	sp, #20
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
 800b1ea:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	785b      	ldrb	r3, [r3, #1]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d020      	beq.n	800b236 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	4413      	add	r3, r2
 800b1fe:	881b      	ldrh	r3, [r3, #0]
 800b200:	b29b      	uxth	r3, r3
 800b202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b20a:	81bb      	strh	r3, [r7, #12]
 800b20c:	89bb      	ldrh	r3, [r7, #12]
 800b20e:	f083 0310 	eor.w	r3, r3, #16
 800b212:	81bb      	strh	r3, [r7, #12]
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	441a      	add	r2, r3
 800b21e:	89bb      	ldrh	r3, [r7, #12]
 800b220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b22c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b230:	b29b      	uxth	r3, r3
 800b232:	8013      	strh	r3, [r2, #0]
 800b234:	e01f      	b.n	800b276 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	4413      	add	r3, r2
 800b240:	881b      	ldrh	r3, [r3, #0]
 800b242:	b29b      	uxth	r3, r3
 800b244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b24c:	81fb      	strh	r3, [r7, #14]
 800b24e:	89fb      	ldrh	r3, [r7, #14]
 800b250:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b254:	81fb      	strh	r3, [r7, #14]
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	441a      	add	r2, r3
 800b260:	89fb      	ldrh	r3, [r7, #14]
 800b262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b26a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b26e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b272:	b29b      	uxth	r3, r3
 800b274:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3714      	adds	r7, #20
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b284:	b480      	push	{r7}
 800b286:	b087      	sub	sp, #28
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	7b1b      	ldrb	r3, [r3, #12]
 800b292:	2b00      	cmp	r3, #0
 800b294:	f040 809d 	bne.w	800b3d2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	785b      	ldrb	r3, [r3, #1]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d04c      	beq.n	800b33a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	4413      	add	r3, r2
 800b2aa:	881b      	ldrh	r3, [r3, #0]
 800b2ac:	823b      	strh	r3, [r7, #16]
 800b2ae:	8a3b      	ldrh	r3, [r7, #16]
 800b2b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d01b      	beq.n	800b2f0 <USB_EPClearStall+0x6c>
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4413      	add	r3, r2
 800b2c2:	881b      	ldrh	r3, [r3, #0]
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2ce:	81fb      	strh	r3, [r7, #14]
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	009b      	lsls	r3, r3, #2
 800b2d8:	441a      	add	r2, r3
 800b2da:	89fb      	ldrh	r3, [r7, #14]
 800b2dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	78db      	ldrb	r3, [r3, #3]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d06c      	beq.n	800b3d2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4413      	add	r3, r2
 800b302:	881b      	ldrh	r3, [r3, #0]
 800b304:	b29b      	uxth	r3, r3
 800b306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b30a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b30e:	81bb      	strh	r3, [r7, #12]
 800b310:	89bb      	ldrh	r3, [r7, #12]
 800b312:	f083 0320 	eor.w	r3, r3, #32
 800b316:	81bb      	strh	r3, [r7, #12]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	441a      	add	r2, r3
 800b322:	89bb      	ldrh	r3, [r7, #12]
 800b324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b32c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b334:	b29b      	uxth	r3, r3
 800b336:	8013      	strh	r3, [r2, #0]
 800b338:	e04b      	b.n	800b3d2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	4413      	add	r3, r2
 800b344:	881b      	ldrh	r3, [r3, #0]
 800b346:	82fb      	strh	r3, [r7, #22]
 800b348:	8afb      	ldrh	r3, [r7, #22]
 800b34a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d01b      	beq.n	800b38a <USB_EPClearStall+0x106>
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	4413      	add	r3, r2
 800b35c:	881b      	ldrh	r3, [r3, #0]
 800b35e:	b29b      	uxth	r3, r3
 800b360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b368:	82bb      	strh	r3, [r7, #20]
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	441a      	add	r2, r3
 800b374:	8abb      	ldrh	r3, [r7, #20]
 800b376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b37a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b37e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b386:	b29b      	uxth	r3, r3
 800b388:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4413      	add	r3, r2
 800b394:	881b      	ldrh	r3, [r3, #0]
 800b396:	b29b      	uxth	r3, r3
 800b398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b39c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3a0:	827b      	strh	r3, [r7, #18]
 800b3a2:	8a7b      	ldrh	r3, [r7, #18]
 800b3a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b3a8:	827b      	strh	r3, [r7, #18]
 800b3aa:	8a7b      	ldrh	r3, [r7, #18]
 800b3ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b3b0:	827b      	strh	r3, [r7, #18]
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	441a      	add	r2, r3
 800b3bc:	8a7b      	ldrh	r3, [r7, #18]
 800b3be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	371c      	adds	r7, #28
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b3ec:	78fb      	ldrb	r3, [r7, #3]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d103      	bne.n	800b3fa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2280      	movs	r2, #128	; 0x80
 800b3f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b416:	b29b      	uxth	r3, r3
 800b418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b41c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b420:	b29a      	uxth	r2, r3
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	370c      	adds	r7, #12
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr

0800b436 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b436:	b480      	push	{r7}
 800b438:	b083      	sub	sp, #12
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b444:	b29b      	uxth	r3, r3
 800b446:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b452:	2300      	movs	r3, #0
}
 800b454:	4618      	mov	r0, r3
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b460:	b480      	push	{r7}
 800b462:	b085      	sub	sp, #20
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b46e:	b29b      	uxth	r3, r3
 800b470:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b472:	68fb      	ldr	r3, [r7, #12]
}
 800b474:	4618      	mov	r0, r3
 800b476:	3714      	adds	r7, #20
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b48a:	2300      	movs	r3, #0
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	370c      	adds	r7, #12
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b498:	b480      	push	{r7}
 800b49a:	b08b      	sub	sp, #44	; 0x2c
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	4611      	mov	r1, r2
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	80fb      	strh	r3, [r7, #6]
 800b4aa:	4613      	mov	r3, r2
 800b4ac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b4ae:	88bb      	ldrh	r3, [r7, #4]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	085b      	lsrs	r3, r3, #1
 800b4b4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b4be:	88fa      	ldrh	r2, [r7, #6]
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b4c8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b4ca:	69bb      	ldr	r3, [r7, #24]
 800b4cc:	627b      	str	r3, [r7, #36]	; 0x24
 800b4ce:	e01b      	b.n	800b508 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800b4d0:	69fb      	ldr	r3, [r7, #28]
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	021b      	lsls	r3, r3, #8
 800b4de:	b21a      	sxth	r2, r3
 800b4e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	b21b      	sxth	r3, r3
 800b4e8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b4ea:	6a3b      	ldr	r3, [r7, #32]
 800b4ec:	8a7a      	ldrh	r2, [r7, #18]
 800b4ee:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b4f0:	6a3b      	ldr	r3, [r7, #32]
 800b4f2:	3302      	adds	r3, #2
 800b4f4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b4fc:	69fb      	ldr	r3, [r7, #28]
 800b4fe:	3301      	adds	r3, #1
 800b500:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b504:	3b01      	subs	r3, #1
 800b506:	627b      	str	r3, [r7, #36]	; 0x24
 800b508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1e0      	bne.n	800b4d0 <USB_WritePMA+0x38>
  }
}
 800b50e:	bf00      	nop
 800b510:	bf00      	nop
 800b512:	372c      	adds	r7, #44	; 0x2c
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b08b      	sub	sp, #44	; 0x2c
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	4611      	mov	r1, r2
 800b528:	461a      	mov	r2, r3
 800b52a:	460b      	mov	r3, r1
 800b52c:	80fb      	strh	r3, [r7, #6]
 800b52e:	4613      	mov	r3, r2
 800b530:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b532:	88bb      	ldrh	r3, [r7, #4]
 800b534:	085b      	lsrs	r3, r3, #1
 800b536:	b29b      	uxth	r3, r3
 800b538:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b542:	88fa      	ldrh	r2, [r7, #6]
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	4413      	add	r3, r2
 800b548:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b54c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	627b      	str	r3, [r7, #36]	; 0x24
 800b552:	e018      	b.n	800b586 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b554:	6a3b      	ldr	r3, [r7, #32]
 800b556:	881b      	ldrh	r3, [r3, #0]
 800b558:	b29b      	uxth	r3, r3
 800b55a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b55c:	6a3b      	ldr	r3, [r7, #32]
 800b55e:	3302      	adds	r3, #2
 800b560:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	b2da      	uxtb	r2, r3
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	3301      	adds	r3, #1
 800b56e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	0a1b      	lsrs	r3, r3, #8
 800b574:	b2da      	uxtb	r2, r3
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	3301      	adds	r3, #1
 800b57e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b582:	3b01      	subs	r3, #1
 800b584:	627b      	str	r3, [r7, #36]	; 0x24
 800b586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d1e3      	bne.n	800b554 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b58c:	88bb      	ldrh	r3, [r7, #4]
 800b58e:	f003 0301 	and.w	r3, r3, #1
 800b592:	b29b      	uxth	r3, r3
 800b594:	2b00      	cmp	r3, #0
 800b596:	d007      	beq.n	800b5a8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b598:	6a3b      	ldr	r3, [r7, #32]
 800b59a:	881b      	ldrh	r3, [r3, #0]
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	b2da      	uxtb	r2, r3
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	701a      	strb	r2, [r3, #0]
  }
}
 800b5a8:	bf00      	nop
 800b5aa:	372c      	adds	r7, #44	; 0x2c
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	460b      	mov	r3, r1
 800b5be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b5c0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b5c4:	f002 f976 	bl	800d8b4 <USBD_static_malloc>
 800b5c8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d105      	bne.n	800b5dc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b5d8:	2302      	movs	r3, #2
 800b5da:	e066      	b.n	800b6aa <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	68fa      	ldr	r2, [r7, #12]
 800b5e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	7c1b      	ldrb	r3, [r3, #16]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d119      	bne.n	800b620 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b5ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5f0:	2202      	movs	r2, #2
 800b5f2:	2181      	movs	r1, #129	; 0x81
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f001 ff5f 	bl	800d4b8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b600:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b604:	2202      	movs	r2, #2
 800b606:	2101      	movs	r1, #1
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f001 ff55 	bl	800d4b8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2201      	movs	r2, #1
 800b612:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2210      	movs	r2, #16
 800b61a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b61e:	e016      	b.n	800b64e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b620:	2340      	movs	r3, #64	; 0x40
 800b622:	2202      	movs	r2, #2
 800b624:	2181      	movs	r1, #129	; 0x81
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f001 ff46 	bl	800d4b8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2201      	movs	r2, #1
 800b630:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b632:	2340      	movs	r3, #64	; 0x40
 800b634:	2202      	movs	r2, #2
 800b636:	2101      	movs	r1, #1
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f001 ff3d 	bl	800d4b8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2201      	movs	r2, #1
 800b642:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2210      	movs	r2, #16
 800b64a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b64e:	2308      	movs	r3, #8
 800b650:	2203      	movs	r2, #3
 800b652:	2182      	movs	r1, #130	; 0x82
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f001 ff2f 	bl	800d4b8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2200      	movs	r2, #0
 800b670:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2200      	movs	r2, #0
 800b678:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	7c1b      	ldrb	r3, [r3, #16]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d109      	bne.n	800b698 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b68a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b68e:	2101      	movs	r1, #1
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f002 f88d 	bl	800d7b0 <USBD_LL_PrepareReceive>
 800b696:	e007      	b.n	800b6a8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b69e:	2340      	movs	r3, #64	; 0x40
 800b6a0:	2101      	movs	r1, #1
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f002 f884 	bl	800d7b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b082      	sub	sp, #8
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b6be:	2181      	movs	r1, #129	; 0x81
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f001 ff37 	bl	800d534 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b6cc:	2101      	movs	r1, #1
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f001 ff30 	bl	800d534 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b6dc:	2182      	movs	r1, #130	; 0x82
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f001 ff28 	bl	800d534 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00e      	beq.n	800b71c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b70e:	4618      	mov	r0, r3
 800b710:	f002 f8de 	bl	800d8d0 <USBD_static_free>
    pdev->pClassData = NULL;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b71c:	2300      	movs	r3, #0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
	...

0800b728 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b086      	sub	sp, #24
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b738:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b73a:	2300      	movs	r3, #0
 800b73c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b73e:	2300      	movs	r3, #0
 800b740:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b742:	2300      	movs	r3, #0
 800b744:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d101      	bne.n	800b750 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b74c:	2303      	movs	r3, #3
 800b74e:	e0af      	b.n	800b8b0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d03f      	beq.n	800b7dc <USBD_CDC_Setup+0xb4>
 800b75c:	2b20      	cmp	r3, #32
 800b75e:	f040 809f 	bne.w	800b8a0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	88db      	ldrh	r3, [r3, #6]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d02e      	beq.n	800b7c8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	b25b      	sxtb	r3, r3
 800b770:	2b00      	cmp	r3, #0
 800b772:	da16      	bge.n	800b7a2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b77a:	689b      	ldr	r3, [r3, #8]
 800b77c:	683a      	ldr	r2, [r7, #0]
 800b77e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b780:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	88d2      	ldrh	r2, [r2, #6]
 800b786:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	88db      	ldrh	r3, [r3, #6]
 800b78c:	2b07      	cmp	r3, #7
 800b78e:	bf28      	it	cs
 800b790:	2307      	movcs	r3, #7
 800b792:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	89fa      	ldrh	r2, [r7, #14]
 800b798:	4619      	mov	r1, r3
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f001 fa9f 	bl	800ccde <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b7a0:	e085      	b.n	800b8ae <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	785a      	ldrb	r2, [r3, #1]
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	88db      	ldrh	r3, [r3, #6]
 800b7b0:	b2da      	uxtb	r2, r3
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b7b8:	6939      	ldr	r1, [r7, #16]
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	88db      	ldrh	r3, [r3, #6]
 800b7be:	461a      	mov	r2, r3
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f001 fab8 	bl	800cd36 <USBD_CtlPrepareRx>
      break;
 800b7c6:	e072      	b.n	800b8ae <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	683a      	ldr	r2, [r7, #0]
 800b7d2:	7850      	ldrb	r0, [r2, #1]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	6839      	ldr	r1, [r7, #0]
 800b7d8:	4798      	blx	r3
      break;
 800b7da:	e068      	b.n	800b8ae <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	785b      	ldrb	r3, [r3, #1]
 800b7e0:	2b0b      	cmp	r3, #11
 800b7e2:	d852      	bhi.n	800b88a <USBD_CDC_Setup+0x162>
 800b7e4:	a201      	add	r2, pc, #4	; (adr r2, 800b7ec <USBD_CDC_Setup+0xc4>)
 800b7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ea:	bf00      	nop
 800b7ec:	0800b81d 	.word	0x0800b81d
 800b7f0:	0800b899 	.word	0x0800b899
 800b7f4:	0800b88b 	.word	0x0800b88b
 800b7f8:	0800b88b 	.word	0x0800b88b
 800b7fc:	0800b88b 	.word	0x0800b88b
 800b800:	0800b88b 	.word	0x0800b88b
 800b804:	0800b88b 	.word	0x0800b88b
 800b808:	0800b88b 	.word	0x0800b88b
 800b80c:	0800b88b 	.word	0x0800b88b
 800b810:	0800b88b 	.word	0x0800b88b
 800b814:	0800b847 	.word	0x0800b847
 800b818:	0800b871 	.word	0x0800b871
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b822:	b2db      	uxtb	r3, r3
 800b824:	2b03      	cmp	r3, #3
 800b826:	d107      	bne.n	800b838 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b828:	f107 030a 	add.w	r3, r7, #10
 800b82c:	2202      	movs	r2, #2
 800b82e:	4619      	mov	r1, r3
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f001 fa54 	bl	800ccde <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b836:	e032      	b.n	800b89e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b838:	6839      	ldr	r1, [r7, #0]
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f001 f9de 	bl	800cbfc <USBD_CtlError>
            ret = USBD_FAIL;
 800b840:	2303      	movs	r3, #3
 800b842:	75fb      	strb	r3, [r7, #23]
          break;
 800b844:	e02b      	b.n	800b89e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	2b03      	cmp	r3, #3
 800b850:	d107      	bne.n	800b862 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b852:	f107 030d 	add.w	r3, r7, #13
 800b856:	2201      	movs	r2, #1
 800b858:	4619      	mov	r1, r3
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f001 fa3f 	bl	800ccde <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b860:	e01d      	b.n	800b89e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b862:	6839      	ldr	r1, [r7, #0]
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f001 f9c9 	bl	800cbfc <USBD_CtlError>
            ret = USBD_FAIL;
 800b86a:	2303      	movs	r3, #3
 800b86c:	75fb      	strb	r3, [r7, #23]
          break;
 800b86e:	e016      	b.n	800b89e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b876:	b2db      	uxtb	r3, r3
 800b878:	2b03      	cmp	r3, #3
 800b87a:	d00f      	beq.n	800b89c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b87c:	6839      	ldr	r1, [r7, #0]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f001 f9bc 	bl	800cbfc <USBD_CtlError>
            ret = USBD_FAIL;
 800b884:	2303      	movs	r3, #3
 800b886:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b888:	e008      	b.n	800b89c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b88a:	6839      	ldr	r1, [r7, #0]
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f001 f9b5 	bl	800cbfc <USBD_CtlError>
          ret = USBD_FAIL;
 800b892:	2303      	movs	r3, #3
 800b894:	75fb      	strb	r3, [r7, #23]
          break;
 800b896:	e002      	b.n	800b89e <USBD_CDC_Setup+0x176>
          break;
 800b898:	bf00      	nop
 800b89a:	e008      	b.n	800b8ae <USBD_CDC_Setup+0x186>
          break;
 800b89c:	bf00      	nop
      }
      break;
 800b89e:	e006      	b.n	800b8ae <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b8a0:	6839      	ldr	r1, [r7, #0]
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f001 f9aa 	bl	800cbfc <USBD_CtlError>
      ret = USBD_FAIL;
 800b8a8:	2303      	movs	r3, #3
 800b8aa:	75fb      	strb	r3, [r7, #23]
      break;
 800b8ac:	bf00      	nop
  }

  return (uint8_t)ret;
 800b8ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3718      	adds	r7, #24
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b8ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d101      	bne.n	800b8da <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b8d6:	2303      	movs	r3, #3
 800b8d8:	e04f      	b.n	800b97a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b8e2:	78fa      	ldrb	r2, [r7, #3]
 800b8e4:	6879      	ldr	r1, [r7, #4]
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	4413      	add	r3, r2
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	440b      	add	r3, r1
 800b8f0:	3318      	adds	r3, #24
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d029      	beq.n	800b94c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b8f8:	78fa      	ldrb	r2, [r7, #3]
 800b8fa:	6879      	ldr	r1, [r7, #4]
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	4413      	add	r3, r2
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	440b      	add	r3, r1
 800b906:	3318      	adds	r3, #24
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	78f9      	ldrb	r1, [r7, #3]
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	460b      	mov	r3, r1
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	440b      	add	r3, r1
 800b914:	00db      	lsls	r3, r3, #3
 800b916:	4403      	add	r3, r0
 800b918:	333c      	adds	r3, #60	; 0x3c
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b920:	fb01 f303 	mul.w	r3, r1, r3
 800b924:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b926:	2b00      	cmp	r3, #0
 800b928:	d110      	bne.n	800b94c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b92a:	78fa      	ldrb	r2, [r7, #3]
 800b92c:	6879      	ldr	r1, [r7, #4]
 800b92e:	4613      	mov	r3, r2
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	4413      	add	r3, r2
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	440b      	add	r3, r1
 800b938:	3318      	adds	r3, #24
 800b93a:	2200      	movs	r2, #0
 800b93c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b93e:	78f9      	ldrb	r1, [r7, #3]
 800b940:	2300      	movs	r3, #0
 800b942:	2200      	movs	r2, #0
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f001 fefb 	bl	800d740 <USBD_LL_Transmit>
 800b94a:	e015      	b.n	800b978 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	2200      	movs	r2, #0
 800b950:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d00b      	beq.n	800b978 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b966:	691b      	ldr	r3, [r3, #16]
 800b968:	68ba      	ldr	r2, [r7, #8]
 800b96a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b96e:	68ba      	ldr	r2, [r7, #8]
 800b970:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b974:	78fa      	ldrb	r2, [r7, #3]
 800b976:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b978:	2300      	movs	r3, #0
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3710      	adds	r7, #16
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b084      	sub	sp, #16
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	460b      	mov	r3, r1
 800b98c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b994:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d101      	bne.n	800b9a4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	e015      	b.n	800b9d0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b9a4:	78fb      	ldrb	r3, [r7, #3]
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f001 ff39 	bl	800d820 <USBD_LL_GetRxDataSize>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	68fa      	ldr	r2, [r7, #12]
 800b9c0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b9c4:	68fa      	ldr	r2, [r7, #12]
 800b9c6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b9ca:	4611      	mov	r1, r2
 800b9cc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3710      	adds	r7, #16
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d101      	bne.n	800b9f2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b9ee:	2303      	movs	r3, #3
 800b9f0:	e01b      	b.n	800ba2a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d015      	beq.n	800ba28 <USBD_CDC_EP0_RxReady+0x50>
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ba02:	2bff      	cmp	r3, #255	; 0xff
 800ba04:	d010      	beq.n	800ba28 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	68fa      	ldr	r2, [r7, #12]
 800ba10:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ba14:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ba1c:	b292      	uxth	r2, r2
 800ba1e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	22ff      	movs	r2, #255	; 0xff
 800ba24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
	...

0800ba34 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b083      	sub	sp, #12
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2243      	movs	r2, #67	; 0x43
 800ba40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ba42:	4b03      	ldr	r3, [pc, #12]	; (800ba50 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	370c      	adds	r7, #12
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr
 800ba50:	20000094 	.word	0x20000094

0800ba54 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b083      	sub	sp, #12
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2243      	movs	r2, #67	; 0x43
 800ba60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ba62:	4b03      	ldr	r3, [pc, #12]	; (800ba70 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr
 800ba70:	20000050 	.word	0x20000050

0800ba74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b083      	sub	sp, #12
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2243      	movs	r2, #67	; 0x43
 800ba80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ba82:	4b03      	ldr	r3, [pc, #12]	; (800ba90 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	370c      	adds	r7, #12
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr
 800ba90:	200000d8 	.word	0x200000d8

0800ba94 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	220a      	movs	r2, #10
 800baa0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800baa2:	4b03      	ldr	r3, [pc, #12]	; (800bab0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	370c      	adds	r7, #12
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr
 800bab0:	2000000c 	.word	0x2000000c

0800bab4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b083      	sub	sp, #12
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d101      	bne.n	800bac8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bac4:	2303      	movs	r3, #3
 800bac6:	e004      	b.n	800bad2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	683a      	ldr	r2, [r7, #0]
 800bacc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	370c      	adds	r7, #12
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr

0800bade <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bade:	b480      	push	{r7}
 800bae0:	b087      	sub	sp, #28
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	60f8      	str	r0, [r7, #12]
 800bae6:	60b9      	str	r1, [r7, #8]
 800bae8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800baf0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d101      	bne.n	800bafc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800baf8:	2303      	movs	r3, #3
 800bafa:	e008      	b.n	800bb0e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	68ba      	ldr	r2, [r7, #8]
 800bb00:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bb0c:	2300      	movs	r3, #0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	371c      	adds	r7, #28
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr

0800bb1a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bb1a:	b480      	push	{r7}
 800bb1c:	b085      	sub	sp, #20
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
 800bb22:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb2a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d101      	bne.n	800bb36 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800bb32:	2303      	movs	r3, #3
 800bb34:	e004      	b.n	800bb40 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	683a      	ldr	r2, [r7, #0]
 800bb3a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bb3e:	2300      	movs	r3, #0
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3714      	adds	r7, #20
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d101      	bne.n	800bb6a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bb66:	2303      	movs	r3, #3
 800bb68:	e016      	b.n	800bb98 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	7c1b      	ldrb	r3, [r3, #16]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d109      	bne.n	800bb86 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bb78:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb7c:	2101      	movs	r1, #1
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f001 fe16 	bl	800d7b0 <USBD_LL_PrepareReceive>
 800bb84:	e007      	b.n	800bb96 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bb8c:	2340      	movs	r3, #64	; 0x40
 800bb8e:	2101      	movs	r1, #1
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f001 fe0d 	bl	800d7b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bb96:	2300      	movs	r3, #0
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b086      	sub	sp, #24
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	4613      	mov	r3, r2
 800bbac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d101      	bne.n	800bbb8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	e01f      	b.n	800bbf8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d003      	beq.n	800bbde <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	68ba      	ldr	r2, [r7, #8]
 800bbda:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	79fa      	ldrb	r2, [r7, #7]
 800bbea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	f001 fbcf 	bl	800d390 <USBD_LL_Init>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bbf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3718      	adds	r7, #24
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d101      	bne.n	800bc18 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bc14:	2303      	movs	r3, #3
 800bc16:	e016      	b.n	800bc46 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	683a      	ldr	r2, [r7, #0]
 800bc1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d00b      	beq.n	800bc44 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc34:	f107 020e 	add.w	r2, r7, #14
 800bc38:	4610      	mov	r0, r2
 800bc3a:	4798      	blx	r3
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3710      	adds	r7, #16
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b082      	sub	sp, #8
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f001 fbfc 	bl	800d454 <USBD_LL_Start>
 800bc5c:	4603      	mov	r3, r0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3708      	adds	r7, #8
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}

0800bc66 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bc66:	b480      	push	{r7}
 800bc68:	b083      	sub	sp, #12
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc6e:	2300      	movs	r3, #0
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	460b      	mov	r3, r1
 800bc86:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bc88:	2303      	movs	r3, #3
 800bc8a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d009      	beq.n	800bcaa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	78fa      	ldrb	r2, [r7, #3]
 800bca0:	4611      	mov	r1, r2
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	4798      	blx	r3
 800bca6:	4603      	mov	r3, r0
 800bca8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bcaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3710      	adds	r7, #16
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d007      	beq.n	800bcda <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	78fa      	ldrb	r2, [r7, #3]
 800bcd4:	4611      	mov	r1, r2
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	4798      	blx	r3
  }

  return USBD_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3708      	adds	r7, #8
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bcf4:	6839      	ldr	r1, [r7, #0]
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f000 ff46 	bl	800cb88 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bd18:	f003 031f 	and.w	r3, r3, #31
 800bd1c:	2b02      	cmp	r3, #2
 800bd1e:	d01a      	beq.n	800bd56 <USBD_LL_SetupStage+0x72>
 800bd20:	2b02      	cmp	r3, #2
 800bd22:	d822      	bhi.n	800bd6a <USBD_LL_SetupStage+0x86>
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d002      	beq.n	800bd2e <USBD_LL_SetupStage+0x4a>
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d00a      	beq.n	800bd42 <USBD_LL_SetupStage+0x5e>
 800bd2c:	e01d      	b.n	800bd6a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bd34:	4619      	mov	r1, r3
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 f9ee 	bl	800c118 <USBD_StdDevReq>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	73fb      	strb	r3, [r7, #15]
      break;
 800bd40:	e020      	b.n	800bd84 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bd48:	4619      	mov	r1, r3
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 fa52 	bl	800c1f4 <USBD_StdItfReq>
 800bd50:	4603      	mov	r3, r0
 800bd52:	73fb      	strb	r3, [r7, #15]
      break;
 800bd54:	e016      	b.n	800bd84 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 fa91 	bl	800c286 <USBD_StdEPReq>
 800bd64:	4603      	mov	r3, r0
 800bd66:	73fb      	strb	r3, [r7, #15]
      break;
 800bd68:	e00c      	b.n	800bd84 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bd70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	4619      	mov	r1, r3
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f001 fc11 	bl	800d5a0 <USBD_LL_StallEP>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	73fb      	strb	r3, [r7, #15]
      break;
 800bd82:	bf00      	nop
  }

  return ret;
 800bd84:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3710      	adds	r7, #16
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}

0800bd8e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bd8e:	b580      	push	{r7, lr}
 800bd90:	b086      	sub	sp, #24
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	60f8      	str	r0, [r7, #12]
 800bd96:	460b      	mov	r3, r1
 800bd98:	607a      	str	r2, [r7, #4]
 800bd9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bd9c:	7afb      	ldrb	r3, [r7, #11]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d138      	bne.n	800be14 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bda8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bdb0:	2b03      	cmp	r3, #3
 800bdb2:	d14a      	bne.n	800be4a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	689a      	ldr	r2, [r3, #8]
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d913      	bls.n	800bde8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	689a      	ldr	r2, [r3, #8]
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	1ad2      	subs	r2, r2, r3
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	68da      	ldr	r2, [r3, #12]
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	bf28      	it	cs
 800bdda:	4613      	movcs	r3, r2
 800bddc:	461a      	mov	r2, r3
 800bdde:	6879      	ldr	r1, [r7, #4]
 800bde0:	68f8      	ldr	r0, [r7, #12]
 800bde2:	f000 ffc5 	bl	800cd70 <USBD_CtlContinueRx>
 800bde6:	e030      	b.n	800be4a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	2b03      	cmp	r3, #3
 800bdf2:	d10b      	bne.n	800be0c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdfa:	691b      	ldr	r3, [r3, #16]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d005      	beq.n	800be0c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be06:	691b      	ldr	r3, [r3, #16]
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	f000 ffc0 	bl	800cd92 <USBD_CtlSendStatus>
 800be12:	e01a      	b.n	800be4a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	2b03      	cmp	r3, #3
 800be1e:	d114      	bne.n	800be4a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be26:	699b      	ldr	r3, [r3, #24]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d00e      	beq.n	800be4a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be32:	699b      	ldr	r3, [r3, #24]
 800be34:	7afa      	ldrb	r2, [r7, #11]
 800be36:	4611      	mov	r1, r2
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	4798      	blx	r3
 800be3c:	4603      	mov	r3, r0
 800be3e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800be40:	7dfb      	ldrb	r3, [r7, #23]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d001      	beq.n	800be4a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800be46:	7dfb      	ldrb	r3, [r7, #23]
 800be48:	e000      	b.n	800be4c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3718      	adds	r7, #24
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b086      	sub	sp, #24
 800be58:	af00      	add	r7, sp, #0
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	460b      	mov	r3, r1
 800be5e:	607a      	str	r2, [r7, #4]
 800be60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800be62:	7afb      	ldrb	r3, [r7, #11]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d16b      	bne.n	800bf40 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	3314      	adds	r3, #20
 800be6c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800be74:	2b02      	cmp	r3, #2
 800be76:	d156      	bne.n	800bf26 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	689a      	ldr	r2, [r3, #8]
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	429a      	cmp	r2, r3
 800be82:	d914      	bls.n	800beae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	689a      	ldr	r2, [r3, #8]
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	1ad2      	subs	r2, r2, r3
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	461a      	mov	r2, r3
 800be98:	6879      	ldr	r1, [r7, #4]
 800be9a:	68f8      	ldr	r0, [r7, #12]
 800be9c:	f000 ff3a 	bl	800cd14 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bea0:	2300      	movs	r3, #0
 800bea2:	2200      	movs	r2, #0
 800bea4:	2100      	movs	r1, #0
 800bea6:	68f8      	ldr	r0, [r7, #12]
 800bea8:	f001 fc82 	bl	800d7b0 <USBD_LL_PrepareReceive>
 800beac:	e03b      	b.n	800bf26 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	68da      	ldr	r2, [r3, #12]
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	689b      	ldr	r3, [r3, #8]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d11c      	bne.n	800bef4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	685a      	ldr	r2, [r3, #4]
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d316      	bcc.n	800bef4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	685a      	ldr	r2, [r3, #4]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d20f      	bcs.n	800bef4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bed4:	2200      	movs	r2, #0
 800bed6:	2100      	movs	r1, #0
 800bed8:	68f8      	ldr	r0, [r7, #12]
 800beda:	f000 ff1b 	bl	800cd14 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2200      	movs	r2, #0
 800bee2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bee6:	2300      	movs	r3, #0
 800bee8:	2200      	movs	r2, #0
 800beea:	2100      	movs	r1, #0
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f001 fc5f 	bl	800d7b0 <USBD_LL_PrepareReceive>
 800bef2:	e018      	b.n	800bf26 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800befa:	b2db      	uxtb	r3, r3
 800befc:	2b03      	cmp	r3, #3
 800befe:	d10b      	bne.n	800bf18 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf06:	68db      	ldr	r3, [r3, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d005      	beq.n	800bf18 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf18:	2180      	movs	r1, #128	; 0x80
 800bf1a:	68f8      	ldr	r0, [r7, #12]
 800bf1c:	f001 fb40 	bl	800d5a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	f000 ff49 	bl	800cdb8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d122      	bne.n	800bf76 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f7ff fe98 	bl	800bc66 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bf3e:	e01a      	b.n	800bf76 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	2b03      	cmp	r3, #3
 800bf4a:	d114      	bne.n	800bf76 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf52:	695b      	ldr	r3, [r3, #20]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d00e      	beq.n	800bf76 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf5e:	695b      	ldr	r3, [r3, #20]
 800bf60:	7afa      	ldrb	r2, [r7, #11]
 800bf62:	4611      	mov	r1, r2
 800bf64:	68f8      	ldr	r0, [r7, #12]
 800bf66:	4798      	blx	r3
 800bf68:	4603      	mov	r3, r0
 800bf6a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bf6c:	7dfb      	ldrb	r3, [r7, #23]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d001      	beq.n	800bf76 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bf72:	7dfb      	ldrb	r3, [r7, #23]
 800bf74:	e000      	b.n	800bf78 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3718      	adds	r7, #24
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d101      	bne.n	800bfb4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800bfb0:	2303      	movs	r3, #3
 800bfb2:	e02f      	b.n	800c014 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d00f      	beq.n	800bfde <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d009      	beq.n	800bfde <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	6852      	ldr	r2, [r2, #4]
 800bfd6:	b2d2      	uxtb	r2, r2
 800bfd8:	4611      	mov	r1, r2
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bfde:	2340      	movs	r3, #64	; 0x40
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	2100      	movs	r1, #0
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f001 fa67 	bl	800d4b8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2201      	movs	r2, #1
 800bfee:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2240      	movs	r2, #64	; 0x40
 800bff6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bffa:	2340      	movs	r3, #64	; 0x40
 800bffc:	2200      	movs	r2, #0
 800bffe:	2180      	movs	r1, #128	; 0x80
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f001 fa59 	bl	800d4b8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2201      	movs	r2, #1
 800c00a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2240      	movs	r2, #64	; 0x40
 800c010:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	3708      	adds	r7, #8
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	460b      	mov	r3, r1
 800c026:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	78fa      	ldrb	r2, [r7, #3]
 800c02c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c02e:	2300      	movs	r3, #0
}
 800c030:	4618      	mov	r0, r3
 800c032:	370c      	adds	r7, #12
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c04a:	b2da      	uxtb	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2204      	movs	r2, #4
 800c056:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	370c      	adds	r7, #12
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c068:	b480      	push	{r7}
 800c06a:	b083      	sub	sp, #12
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c076:	b2db      	uxtb	r3, r3
 800c078:	2b04      	cmp	r3, #4
 800c07a:	d106      	bne.n	800c08a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c082:	b2da      	uxtb	r2, r3
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c08a:	2300      	movs	r3, #0
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d101      	bne.n	800c0ae <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c0aa:	2303      	movs	r3, #3
 800c0ac:	e012      	b.n	800c0d4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	2b03      	cmp	r3, #3
 800c0b8:	d10b      	bne.n	800c0d2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0c0:	69db      	ldr	r3, [r3, #28]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d005      	beq.n	800c0d2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0cc:	69db      	ldr	r3, [r3, #28]
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3708      	adds	r7, #8
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b087      	sub	sp, #28
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c0fa:	8a3b      	ldrh	r3, [r7, #16]
 800c0fc:	021b      	lsls	r3, r3, #8
 800c0fe:	b21a      	sxth	r2, r3
 800c100:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c104:	4313      	orrs	r3, r2
 800c106:	b21b      	sxth	r3, r3
 800c108:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c10a:	89fb      	ldrh	r3, [r7, #14]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	371c      	adds	r7, #28
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c122:	2300      	movs	r3, #0
 800c124:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c12e:	2b40      	cmp	r3, #64	; 0x40
 800c130:	d005      	beq.n	800c13e <USBD_StdDevReq+0x26>
 800c132:	2b40      	cmp	r3, #64	; 0x40
 800c134:	d853      	bhi.n	800c1de <USBD_StdDevReq+0xc6>
 800c136:	2b00      	cmp	r3, #0
 800c138:	d00b      	beq.n	800c152 <USBD_StdDevReq+0x3a>
 800c13a:	2b20      	cmp	r3, #32
 800c13c:	d14f      	bne.n	800c1de <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c144:	689b      	ldr	r3, [r3, #8]
 800c146:	6839      	ldr	r1, [r7, #0]
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	4798      	blx	r3
 800c14c:	4603      	mov	r3, r0
 800c14e:	73fb      	strb	r3, [r7, #15]
      break;
 800c150:	e04a      	b.n	800c1e8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	785b      	ldrb	r3, [r3, #1]
 800c156:	2b09      	cmp	r3, #9
 800c158:	d83b      	bhi.n	800c1d2 <USBD_StdDevReq+0xba>
 800c15a:	a201      	add	r2, pc, #4	; (adr r2, 800c160 <USBD_StdDevReq+0x48>)
 800c15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c160:	0800c1b5 	.word	0x0800c1b5
 800c164:	0800c1c9 	.word	0x0800c1c9
 800c168:	0800c1d3 	.word	0x0800c1d3
 800c16c:	0800c1bf 	.word	0x0800c1bf
 800c170:	0800c1d3 	.word	0x0800c1d3
 800c174:	0800c193 	.word	0x0800c193
 800c178:	0800c189 	.word	0x0800c189
 800c17c:	0800c1d3 	.word	0x0800c1d3
 800c180:	0800c1ab 	.word	0x0800c1ab
 800c184:	0800c19d 	.word	0x0800c19d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c188:	6839      	ldr	r1, [r7, #0]
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 f9de 	bl	800c54c <USBD_GetDescriptor>
          break;
 800c190:	e024      	b.n	800c1dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c192:	6839      	ldr	r1, [r7, #0]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 fb6d 	bl	800c874 <USBD_SetAddress>
          break;
 800c19a:	e01f      	b.n	800c1dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c19c:	6839      	ldr	r1, [r7, #0]
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 fbac 	bl	800c8fc <USBD_SetConfig>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	73fb      	strb	r3, [r7, #15]
          break;
 800c1a8:	e018      	b.n	800c1dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c1aa:	6839      	ldr	r1, [r7, #0]
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 fc4b 	bl	800ca48 <USBD_GetConfig>
          break;
 800c1b2:	e013      	b.n	800c1dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c1b4:	6839      	ldr	r1, [r7, #0]
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f000 fc7c 	bl	800cab4 <USBD_GetStatus>
          break;
 800c1bc:	e00e      	b.n	800c1dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c1be:	6839      	ldr	r1, [r7, #0]
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 fcab 	bl	800cb1c <USBD_SetFeature>
          break;
 800c1c6:	e009      	b.n	800c1dc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c1c8:	6839      	ldr	r1, [r7, #0]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 fcba 	bl	800cb44 <USBD_ClrFeature>
          break;
 800c1d0:	e004      	b.n	800c1dc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c1d2:	6839      	ldr	r1, [r7, #0]
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 fd11 	bl	800cbfc <USBD_CtlError>
          break;
 800c1da:	bf00      	nop
      }
      break;
 800c1dc:	e004      	b.n	800c1e8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c1de:	6839      	ldr	r1, [r7, #0]
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f000 fd0b 	bl	800cbfc <USBD_CtlError>
      break;
 800c1e6:	bf00      	nop
  }

  return ret;
 800c1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3710      	adds	r7, #16
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop

0800c1f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1fe:	2300      	movs	r3, #0
 800c200:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c20a:	2b40      	cmp	r3, #64	; 0x40
 800c20c:	d005      	beq.n	800c21a <USBD_StdItfReq+0x26>
 800c20e:	2b40      	cmp	r3, #64	; 0x40
 800c210:	d82f      	bhi.n	800c272 <USBD_StdItfReq+0x7e>
 800c212:	2b00      	cmp	r3, #0
 800c214:	d001      	beq.n	800c21a <USBD_StdItfReq+0x26>
 800c216:	2b20      	cmp	r3, #32
 800c218:	d12b      	bne.n	800c272 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c220:	b2db      	uxtb	r3, r3
 800c222:	3b01      	subs	r3, #1
 800c224:	2b02      	cmp	r3, #2
 800c226:	d81d      	bhi.n	800c264 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	889b      	ldrh	r3, [r3, #4]
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	2b01      	cmp	r3, #1
 800c230:	d813      	bhi.n	800c25a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	6839      	ldr	r1, [r7, #0]
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	4798      	blx	r3
 800c240:	4603      	mov	r3, r0
 800c242:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	88db      	ldrh	r3, [r3, #6]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d110      	bne.n	800c26e <USBD_StdItfReq+0x7a>
 800c24c:	7bfb      	ldrb	r3, [r7, #15]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d10d      	bne.n	800c26e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 fd9d 	bl	800cd92 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c258:	e009      	b.n	800c26e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c25a:	6839      	ldr	r1, [r7, #0]
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 fccd 	bl	800cbfc <USBD_CtlError>
          break;
 800c262:	e004      	b.n	800c26e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 fcc8 	bl	800cbfc <USBD_CtlError>
          break;
 800c26c:	e000      	b.n	800c270 <USBD_StdItfReq+0x7c>
          break;
 800c26e:	bf00      	nop
      }
      break;
 800c270:	e004      	b.n	800c27c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c272:	6839      	ldr	r1, [r7, #0]
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 fcc1 	bl	800cbfc <USBD_CtlError>
      break;
 800c27a:	bf00      	nop
  }

  return ret;
 800c27c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3710      	adds	r7, #16
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b084      	sub	sp, #16
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
 800c28e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c290:	2300      	movs	r3, #0
 800c292:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	889b      	ldrh	r3, [r3, #4]
 800c298:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c2a2:	2b40      	cmp	r3, #64	; 0x40
 800c2a4:	d007      	beq.n	800c2b6 <USBD_StdEPReq+0x30>
 800c2a6:	2b40      	cmp	r3, #64	; 0x40
 800c2a8:	f200 8145 	bhi.w	800c536 <USBD_StdEPReq+0x2b0>
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d00c      	beq.n	800c2ca <USBD_StdEPReq+0x44>
 800c2b0:	2b20      	cmp	r3, #32
 800c2b2:	f040 8140 	bne.w	800c536 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2bc:	689b      	ldr	r3, [r3, #8]
 800c2be:	6839      	ldr	r1, [r7, #0]
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	4798      	blx	r3
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	73fb      	strb	r3, [r7, #15]
      break;
 800c2c8:	e13a      	b.n	800c540 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	785b      	ldrb	r3, [r3, #1]
 800c2ce:	2b03      	cmp	r3, #3
 800c2d0:	d007      	beq.n	800c2e2 <USBD_StdEPReq+0x5c>
 800c2d2:	2b03      	cmp	r3, #3
 800c2d4:	f300 8129 	bgt.w	800c52a <USBD_StdEPReq+0x2a4>
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d07f      	beq.n	800c3dc <USBD_StdEPReq+0x156>
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d03c      	beq.n	800c35a <USBD_StdEPReq+0xd4>
 800c2e0:	e123      	b.n	800c52a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	2b02      	cmp	r3, #2
 800c2ec:	d002      	beq.n	800c2f4 <USBD_StdEPReq+0x6e>
 800c2ee:	2b03      	cmp	r3, #3
 800c2f0:	d016      	beq.n	800c320 <USBD_StdEPReq+0x9a>
 800c2f2:	e02c      	b.n	800c34e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2f4:	7bbb      	ldrb	r3, [r7, #14]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d00d      	beq.n	800c316 <USBD_StdEPReq+0x90>
 800c2fa:	7bbb      	ldrb	r3, [r7, #14]
 800c2fc:	2b80      	cmp	r3, #128	; 0x80
 800c2fe:	d00a      	beq.n	800c316 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c300:	7bbb      	ldrb	r3, [r7, #14]
 800c302:	4619      	mov	r1, r3
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f001 f94b 	bl	800d5a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c30a:	2180      	movs	r1, #128	; 0x80
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f001 f947 	bl	800d5a0 <USBD_LL_StallEP>
 800c312:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c314:	e020      	b.n	800c358 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c316:	6839      	ldr	r1, [r7, #0]
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 fc6f 	bl	800cbfc <USBD_CtlError>
              break;
 800c31e:	e01b      	b.n	800c358 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	885b      	ldrh	r3, [r3, #2]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d10e      	bne.n	800c346 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c328:	7bbb      	ldrb	r3, [r7, #14]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d00b      	beq.n	800c346 <USBD_StdEPReq+0xc0>
 800c32e:	7bbb      	ldrb	r3, [r7, #14]
 800c330:	2b80      	cmp	r3, #128	; 0x80
 800c332:	d008      	beq.n	800c346 <USBD_StdEPReq+0xc0>
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	88db      	ldrh	r3, [r3, #6]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d104      	bne.n	800c346 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c33c:	7bbb      	ldrb	r3, [r7, #14]
 800c33e:	4619      	mov	r1, r3
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f001 f92d 	bl	800d5a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 fd23 	bl	800cd92 <USBD_CtlSendStatus>

              break;
 800c34c:	e004      	b.n	800c358 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c34e:	6839      	ldr	r1, [r7, #0]
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 fc53 	bl	800cbfc <USBD_CtlError>
              break;
 800c356:	bf00      	nop
          }
          break;
 800c358:	e0ec      	b.n	800c534 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c360:	b2db      	uxtb	r3, r3
 800c362:	2b02      	cmp	r3, #2
 800c364:	d002      	beq.n	800c36c <USBD_StdEPReq+0xe6>
 800c366:	2b03      	cmp	r3, #3
 800c368:	d016      	beq.n	800c398 <USBD_StdEPReq+0x112>
 800c36a:	e030      	b.n	800c3ce <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c36c:	7bbb      	ldrb	r3, [r7, #14]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d00d      	beq.n	800c38e <USBD_StdEPReq+0x108>
 800c372:	7bbb      	ldrb	r3, [r7, #14]
 800c374:	2b80      	cmp	r3, #128	; 0x80
 800c376:	d00a      	beq.n	800c38e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c378:	7bbb      	ldrb	r3, [r7, #14]
 800c37a:	4619      	mov	r1, r3
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f001 f90f 	bl	800d5a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c382:	2180      	movs	r1, #128	; 0x80
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f001 f90b 	bl	800d5a0 <USBD_LL_StallEP>
 800c38a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c38c:	e025      	b.n	800c3da <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c38e:	6839      	ldr	r1, [r7, #0]
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 fc33 	bl	800cbfc <USBD_CtlError>
              break;
 800c396:	e020      	b.n	800c3da <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	885b      	ldrh	r3, [r3, #2]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d11b      	bne.n	800c3d8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c3a0:	7bbb      	ldrb	r3, [r7, #14]
 800c3a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d004      	beq.n	800c3b4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c3aa:	7bbb      	ldrb	r3, [r7, #14]
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f001 f92c 	bl	800d60c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 fcec 	bl	800cd92 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	6839      	ldr	r1, [r7, #0]
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	4798      	blx	r3
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c3cc:	e004      	b.n	800c3d8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c3ce:	6839      	ldr	r1, [r7, #0]
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 fc13 	bl	800cbfc <USBD_CtlError>
              break;
 800c3d6:	e000      	b.n	800c3da <USBD_StdEPReq+0x154>
              break;
 800c3d8:	bf00      	nop
          }
          break;
 800c3da:	e0ab      	b.n	800c534 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	2b02      	cmp	r3, #2
 800c3e6:	d002      	beq.n	800c3ee <USBD_StdEPReq+0x168>
 800c3e8:	2b03      	cmp	r3, #3
 800c3ea:	d032      	beq.n	800c452 <USBD_StdEPReq+0x1cc>
 800c3ec:	e097      	b.n	800c51e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3ee:	7bbb      	ldrb	r3, [r7, #14]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d007      	beq.n	800c404 <USBD_StdEPReq+0x17e>
 800c3f4:	7bbb      	ldrb	r3, [r7, #14]
 800c3f6:	2b80      	cmp	r3, #128	; 0x80
 800c3f8:	d004      	beq.n	800c404 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c3fa:	6839      	ldr	r1, [r7, #0]
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 fbfd 	bl	800cbfc <USBD_CtlError>
                break;
 800c402:	e091      	b.n	800c528 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c404:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	da0b      	bge.n	800c424 <USBD_StdEPReq+0x19e>
 800c40c:	7bbb      	ldrb	r3, [r7, #14]
 800c40e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c412:	4613      	mov	r3, r2
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	4413      	add	r3, r2
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	3310      	adds	r3, #16
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	4413      	add	r3, r2
 800c420:	3304      	adds	r3, #4
 800c422:	e00b      	b.n	800c43c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c424:	7bbb      	ldrb	r3, [r7, #14]
 800c426:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c42a:	4613      	mov	r3, r2
 800c42c:	009b      	lsls	r3, r3, #2
 800c42e:	4413      	add	r3, r2
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	4413      	add	r3, r2
 800c43a:	3304      	adds	r3, #4
 800c43c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	2200      	movs	r2, #0
 800c442:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	2202      	movs	r2, #2
 800c448:	4619      	mov	r1, r3
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 fc47 	bl	800ccde <USBD_CtlSendData>
              break;
 800c450:	e06a      	b.n	800c528 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c452:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c456:	2b00      	cmp	r3, #0
 800c458:	da11      	bge.n	800c47e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c45a:	7bbb      	ldrb	r3, [r7, #14]
 800c45c:	f003 020f 	and.w	r2, r3, #15
 800c460:	6879      	ldr	r1, [r7, #4]
 800c462:	4613      	mov	r3, r2
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	4413      	add	r3, r2
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	440b      	add	r3, r1
 800c46c:	3324      	adds	r3, #36	; 0x24
 800c46e:	881b      	ldrh	r3, [r3, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d117      	bne.n	800c4a4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c474:	6839      	ldr	r1, [r7, #0]
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 fbc0 	bl	800cbfc <USBD_CtlError>
                  break;
 800c47c:	e054      	b.n	800c528 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c47e:	7bbb      	ldrb	r3, [r7, #14]
 800c480:	f003 020f 	and.w	r2, r3, #15
 800c484:	6879      	ldr	r1, [r7, #4]
 800c486:	4613      	mov	r3, r2
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	4413      	add	r3, r2
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	440b      	add	r3, r1
 800c490:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c494:	881b      	ldrh	r3, [r3, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d104      	bne.n	800c4a4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c49a:	6839      	ldr	r1, [r7, #0]
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 fbad 	bl	800cbfc <USBD_CtlError>
                  break;
 800c4a2:	e041      	b.n	800c528 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	da0b      	bge.n	800c4c4 <USBD_StdEPReq+0x23e>
 800c4ac:	7bbb      	ldrb	r3, [r7, #14]
 800c4ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	009b      	lsls	r3, r3, #2
 800c4b6:	4413      	add	r3, r2
 800c4b8:	009b      	lsls	r3, r3, #2
 800c4ba:	3310      	adds	r3, #16
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	4413      	add	r3, r2
 800c4c0:	3304      	adds	r3, #4
 800c4c2:	e00b      	b.n	800c4dc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c4c4:	7bbb      	ldrb	r3, [r7, #14]
 800c4c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4ca:	4613      	mov	r3, r2
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	4413      	add	r3, r2
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	4413      	add	r3, r2
 800c4da:	3304      	adds	r3, #4
 800c4dc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c4de:	7bbb      	ldrb	r3, [r7, #14]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d002      	beq.n	800c4ea <USBD_StdEPReq+0x264>
 800c4e4:	7bbb      	ldrb	r3, [r7, #14]
 800c4e6:	2b80      	cmp	r3, #128	; 0x80
 800c4e8:	d103      	bne.n	800c4f2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	601a      	str	r2, [r3, #0]
 800c4f0:	e00e      	b.n	800c510 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c4f2:	7bbb      	ldrb	r3, [r7, #14]
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f001 f8be 	bl	800d678 <USBD_LL_IsStallEP>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d003      	beq.n	800c50a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	2201      	movs	r2, #1
 800c506:	601a      	str	r2, [r3, #0]
 800c508:	e002      	b.n	800c510 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	2200      	movs	r2, #0
 800c50e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	2202      	movs	r2, #2
 800c514:	4619      	mov	r1, r3
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 fbe1 	bl	800ccde <USBD_CtlSendData>
              break;
 800c51c:	e004      	b.n	800c528 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c51e:	6839      	ldr	r1, [r7, #0]
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 fb6b 	bl	800cbfc <USBD_CtlError>
              break;
 800c526:	bf00      	nop
          }
          break;
 800c528:	e004      	b.n	800c534 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c52a:	6839      	ldr	r1, [r7, #0]
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 fb65 	bl	800cbfc <USBD_CtlError>
          break;
 800c532:	bf00      	nop
      }
      break;
 800c534:	e004      	b.n	800c540 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c536:	6839      	ldr	r1, [r7, #0]
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f000 fb5f 	bl	800cbfc <USBD_CtlError>
      break;
 800c53e:	bf00      	nop
  }

  return ret;
 800c540:	7bfb      	ldrb	r3, [r7, #15]
}
 800c542:	4618      	mov	r0, r3
 800c544:	3710      	adds	r7, #16
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
	...

0800c54c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c556:	2300      	movs	r3, #0
 800c558:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c55a:	2300      	movs	r3, #0
 800c55c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c55e:	2300      	movs	r3, #0
 800c560:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	885b      	ldrh	r3, [r3, #2]
 800c566:	0a1b      	lsrs	r3, r3, #8
 800c568:	b29b      	uxth	r3, r3
 800c56a:	3b01      	subs	r3, #1
 800c56c:	2b0e      	cmp	r3, #14
 800c56e:	f200 8152 	bhi.w	800c816 <USBD_GetDescriptor+0x2ca>
 800c572:	a201      	add	r2, pc, #4	; (adr r2, 800c578 <USBD_GetDescriptor+0x2c>)
 800c574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c578:	0800c5e9 	.word	0x0800c5e9
 800c57c:	0800c601 	.word	0x0800c601
 800c580:	0800c641 	.word	0x0800c641
 800c584:	0800c817 	.word	0x0800c817
 800c588:	0800c817 	.word	0x0800c817
 800c58c:	0800c7b7 	.word	0x0800c7b7
 800c590:	0800c7e3 	.word	0x0800c7e3
 800c594:	0800c817 	.word	0x0800c817
 800c598:	0800c817 	.word	0x0800c817
 800c59c:	0800c817 	.word	0x0800c817
 800c5a0:	0800c817 	.word	0x0800c817
 800c5a4:	0800c817 	.word	0x0800c817
 800c5a8:	0800c817 	.word	0x0800c817
 800c5ac:	0800c817 	.word	0x0800c817
 800c5b0:	0800c5b5 	.word	0x0800c5b5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5ba:	69db      	ldr	r3, [r3, #28]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d00b      	beq.n	800c5d8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5c6:	69db      	ldr	r3, [r3, #28]
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	7c12      	ldrb	r2, [r2, #16]
 800c5cc:	f107 0108 	add.w	r1, r7, #8
 800c5d0:	4610      	mov	r0, r2
 800c5d2:	4798      	blx	r3
 800c5d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5d6:	e126      	b.n	800c826 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c5d8:	6839      	ldr	r1, [r7, #0]
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 fb0e 	bl	800cbfc <USBD_CtlError>
        err++;
 800c5e0:	7afb      	ldrb	r3, [r7, #11]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	72fb      	strb	r3, [r7, #11]
      break;
 800c5e6:	e11e      	b.n	800c826 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	687a      	ldr	r2, [r7, #4]
 800c5f2:	7c12      	ldrb	r2, [r2, #16]
 800c5f4:	f107 0108 	add.w	r1, r7, #8
 800c5f8:	4610      	mov	r0, r2
 800c5fa:	4798      	blx	r3
 800c5fc:	60f8      	str	r0, [r7, #12]
      break;
 800c5fe:	e112      	b.n	800c826 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	7c1b      	ldrb	r3, [r3, #16]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d10d      	bne.n	800c624 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c610:	f107 0208 	add.w	r2, r7, #8
 800c614:	4610      	mov	r0, r2
 800c616:	4798      	blx	r3
 800c618:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	3301      	adds	r3, #1
 800c61e:	2202      	movs	r2, #2
 800c620:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c622:	e100      	b.n	800c826 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c62c:	f107 0208 	add.w	r2, r7, #8
 800c630:	4610      	mov	r0, r2
 800c632:	4798      	blx	r3
 800c634:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	3301      	adds	r3, #1
 800c63a:	2202      	movs	r2, #2
 800c63c:	701a      	strb	r2, [r3, #0]
      break;
 800c63e:	e0f2      	b.n	800c826 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	885b      	ldrh	r3, [r3, #2]
 800c644:	b2db      	uxtb	r3, r3
 800c646:	2b05      	cmp	r3, #5
 800c648:	f200 80ac 	bhi.w	800c7a4 <USBD_GetDescriptor+0x258>
 800c64c:	a201      	add	r2, pc, #4	; (adr r2, 800c654 <USBD_GetDescriptor+0x108>)
 800c64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c652:	bf00      	nop
 800c654:	0800c66d 	.word	0x0800c66d
 800c658:	0800c6a1 	.word	0x0800c6a1
 800c65c:	0800c6d5 	.word	0x0800c6d5
 800c660:	0800c709 	.word	0x0800c709
 800c664:	0800c73d 	.word	0x0800c73d
 800c668:	0800c771 	.word	0x0800c771
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d00b      	beq.n	800c690 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	7c12      	ldrb	r2, [r2, #16]
 800c684:	f107 0108 	add.w	r1, r7, #8
 800c688:	4610      	mov	r0, r2
 800c68a:	4798      	blx	r3
 800c68c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c68e:	e091      	b.n	800c7b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c690:	6839      	ldr	r1, [r7, #0]
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 fab2 	bl	800cbfc <USBD_CtlError>
            err++;
 800c698:	7afb      	ldrb	r3, [r7, #11]
 800c69a:	3301      	adds	r3, #1
 800c69c:	72fb      	strb	r3, [r7, #11]
          break;
 800c69e:	e089      	b.n	800c7b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d00b      	beq.n	800c6c4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	7c12      	ldrb	r2, [r2, #16]
 800c6b8:	f107 0108 	add.w	r1, r7, #8
 800c6bc:	4610      	mov	r0, r2
 800c6be:	4798      	blx	r3
 800c6c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6c2:	e077      	b.n	800c7b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c6c4:	6839      	ldr	r1, [r7, #0]
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 fa98 	bl	800cbfc <USBD_CtlError>
            err++;
 800c6cc:	7afb      	ldrb	r3, [r7, #11]
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	72fb      	strb	r3, [r7, #11]
          break;
 800c6d2:	e06f      	b.n	800c7b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00b      	beq.n	800c6f8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	7c12      	ldrb	r2, [r2, #16]
 800c6ec:	f107 0108 	add.w	r1, r7, #8
 800c6f0:	4610      	mov	r0, r2
 800c6f2:	4798      	blx	r3
 800c6f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6f6:	e05d      	b.n	800c7b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c6f8:	6839      	ldr	r1, [r7, #0]
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 fa7e 	bl	800cbfc <USBD_CtlError>
            err++;
 800c700:	7afb      	ldrb	r3, [r7, #11]
 800c702:	3301      	adds	r3, #1
 800c704:	72fb      	strb	r3, [r7, #11]
          break;
 800c706:	e055      	b.n	800c7b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d00b      	beq.n	800c72c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c71a:	691b      	ldr	r3, [r3, #16]
 800c71c:	687a      	ldr	r2, [r7, #4]
 800c71e:	7c12      	ldrb	r2, [r2, #16]
 800c720:	f107 0108 	add.w	r1, r7, #8
 800c724:	4610      	mov	r0, r2
 800c726:	4798      	blx	r3
 800c728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c72a:	e043      	b.n	800c7b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c72c:	6839      	ldr	r1, [r7, #0]
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 fa64 	bl	800cbfc <USBD_CtlError>
            err++;
 800c734:	7afb      	ldrb	r3, [r7, #11]
 800c736:	3301      	adds	r3, #1
 800c738:	72fb      	strb	r3, [r7, #11]
          break;
 800c73a:	e03b      	b.n	800c7b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c742:	695b      	ldr	r3, [r3, #20]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d00b      	beq.n	800c760 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c74e:	695b      	ldr	r3, [r3, #20]
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	7c12      	ldrb	r2, [r2, #16]
 800c754:	f107 0108 	add.w	r1, r7, #8
 800c758:	4610      	mov	r0, r2
 800c75a:	4798      	blx	r3
 800c75c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c75e:	e029      	b.n	800c7b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c760:	6839      	ldr	r1, [r7, #0]
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 fa4a 	bl	800cbfc <USBD_CtlError>
            err++;
 800c768:	7afb      	ldrb	r3, [r7, #11]
 800c76a:	3301      	adds	r3, #1
 800c76c:	72fb      	strb	r3, [r7, #11]
          break;
 800c76e:	e021      	b.n	800c7b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c776:	699b      	ldr	r3, [r3, #24]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d00b      	beq.n	800c794 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c782:	699b      	ldr	r3, [r3, #24]
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	7c12      	ldrb	r2, [r2, #16]
 800c788:	f107 0108 	add.w	r1, r7, #8
 800c78c:	4610      	mov	r0, r2
 800c78e:	4798      	blx	r3
 800c790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c792:	e00f      	b.n	800c7b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c794:	6839      	ldr	r1, [r7, #0]
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 fa30 	bl	800cbfc <USBD_CtlError>
            err++;
 800c79c:	7afb      	ldrb	r3, [r7, #11]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	72fb      	strb	r3, [r7, #11]
          break;
 800c7a2:	e007      	b.n	800c7b4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c7a4:	6839      	ldr	r1, [r7, #0]
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 fa28 	bl	800cbfc <USBD_CtlError>
          err++;
 800c7ac:	7afb      	ldrb	r3, [r7, #11]
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c7b2:	bf00      	nop
      }
      break;
 800c7b4:	e037      	b.n	800c826 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	7c1b      	ldrb	r3, [r3, #16]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d109      	bne.n	800c7d2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7c6:	f107 0208 	add.w	r2, r7, #8
 800c7ca:	4610      	mov	r0, r2
 800c7cc:	4798      	blx	r3
 800c7ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7d0:	e029      	b.n	800c826 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c7d2:	6839      	ldr	r1, [r7, #0]
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 fa11 	bl	800cbfc <USBD_CtlError>
        err++;
 800c7da:	7afb      	ldrb	r3, [r7, #11]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	72fb      	strb	r3, [r7, #11]
      break;
 800c7e0:	e021      	b.n	800c826 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	7c1b      	ldrb	r3, [r3, #16]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d10d      	bne.n	800c806 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7f2:	f107 0208 	add.w	r2, r7, #8
 800c7f6:	4610      	mov	r0, r2
 800c7f8:	4798      	blx	r3
 800c7fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	3301      	adds	r3, #1
 800c800:	2207      	movs	r2, #7
 800c802:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c804:	e00f      	b.n	800c826 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c806:	6839      	ldr	r1, [r7, #0]
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 f9f7 	bl	800cbfc <USBD_CtlError>
        err++;
 800c80e:	7afb      	ldrb	r3, [r7, #11]
 800c810:	3301      	adds	r3, #1
 800c812:	72fb      	strb	r3, [r7, #11]
      break;
 800c814:	e007      	b.n	800c826 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c816:	6839      	ldr	r1, [r7, #0]
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 f9ef 	bl	800cbfc <USBD_CtlError>
      err++;
 800c81e:	7afb      	ldrb	r3, [r7, #11]
 800c820:	3301      	adds	r3, #1
 800c822:	72fb      	strb	r3, [r7, #11]
      break;
 800c824:	bf00      	nop
  }

  if (err != 0U)
 800c826:	7afb      	ldrb	r3, [r7, #11]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d11e      	bne.n	800c86a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	88db      	ldrh	r3, [r3, #6]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d016      	beq.n	800c862 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c834:	893b      	ldrh	r3, [r7, #8]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d00e      	beq.n	800c858 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	88da      	ldrh	r2, [r3, #6]
 800c83e:	893b      	ldrh	r3, [r7, #8]
 800c840:	4293      	cmp	r3, r2
 800c842:	bf28      	it	cs
 800c844:	4613      	movcs	r3, r2
 800c846:	b29b      	uxth	r3, r3
 800c848:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c84a:	893b      	ldrh	r3, [r7, #8]
 800c84c:	461a      	mov	r2, r3
 800c84e:	68f9      	ldr	r1, [r7, #12]
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 fa44 	bl	800ccde <USBD_CtlSendData>
 800c856:	e009      	b.n	800c86c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c858:	6839      	ldr	r1, [r7, #0]
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 f9ce 	bl	800cbfc <USBD_CtlError>
 800c860:	e004      	b.n	800c86c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 fa95 	bl	800cd92 <USBD_CtlSendStatus>
 800c868:	e000      	b.n	800c86c <USBD_GetDescriptor+0x320>
    return;
 800c86a:	bf00      	nop
  }
}
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop

0800c874 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	889b      	ldrh	r3, [r3, #4]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d131      	bne.n	800c8ea <USBD_SetAddress+0x76>
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	88db      	ldrh	r3, [r3, #6]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d12d      	bne.n	800c8ea <USBD_SetAddress+0x76>
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	885b      	ldrh	r3, [r3, #2]
 800c892:	2b7f      	cmp	r3, #127	; 0x7f
 800c894:	d829      	bhi.n	800c8ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	885b      	ldrh	r3, [r3, #2]
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	2b03      	cmp	r3, #3
 800c8ac:	d104      	bne.n	800c8b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c8ae:	6839      	ldr	r1, [r7, #0]
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f000 f9a3 	bl	800cbfc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8b6:	e01d      	b.n	800c8f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	7bfa      	ldrb	r2, [r7, #15]
 800c8bc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c8c0:	7bfb      	ldrb	r3, [r7, #15]
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 ff05 	bl	800d6d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f000 fa61 	bl	800cd92 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c8d0:	7bfb      	ldrb	r3, [r7, #15]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d004      	beq.n	800c8e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2202      	movs	r2, #2
 800c8da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8de:	e009      	b.n	800c8f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8e8:	e004      	b.n	800c8f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c8ea:	6839      	ldr	r1, [r7, #0]
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 f985 	bl	800cbfc <USBD_CtlError>
  }
}
 800c8f2:	bf00      	nop
 800c8f4:	bf00      	nop
 800c8f6:	3710      	adds	r7, #16
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c906:	2300      	movs	r3, #0
 800c908:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	885b      	ldrh	r3, [r3, #2]
 800c90e:	b2da      	uxtb	r2, r3
 800c910:	4b4c      	ldr	r3, [pc, #304]	; (800ca44 <USBD_SetConfig+0x148>)
 800c912:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c914:	4b4b      	ldr	r3, [pc, #300]	; (800ca44 <USBD_SetConfig+0x148>)
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d905      	bls.n	800c928 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c91c:	6839      	ldr	r1, [r7, #0]
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 f96c 	bl	800cbfc <USBD_CtlError>
    return USBD_FAIL;
 800c924:	2303      	movs	r3, #3
 800c926:	e088      	b.n	800ca3a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c92e:	b2db      	uxtb	r3, r3
 800c930:	2b02      	cmp	r3, #2
 800c932:	d002      	beq.n	800c93a <USBD_SetConfig+0x3e>
 800c934:	2b03      	cmp	r3, #3
 800c936:	d025      	beq.n	800c984 <USBD_SetConfig+0x88>
 800c938:	e071      	b.n	800ca1e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c93a:	4b42      	ldr	r3, [pc, #264]	; (800ca44 <USBD_SetConfig+0x148>)
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d01c      	beq.n	800c97c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c942:	4b40      	ldr	r3, [pc, #256]	; (800ca44 <USBD_SetConfig+0x148>)
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	461a      	mov	r2, r3
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c94c:	4b3d      	ldr	r3, [pc, #244]	; (800ca44 <USBD_SetConfig+0x148>)
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	4619      	mov	r1, r3
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f7ff f992 	bl	800bc7c <USBD_SetClassConfig>
 800c958:	4603      	mov	r3, r0
 800c95a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c95c:	7bfb      	ldrb	r3, [r7, #15]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d004      	beq.n	800c96c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c962:	6839      	ldr	r1, [r7, #0]
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 f949 	bl	800cbfc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c96a:	e065      	b.n	800ca38 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 fa10 	bl	800cd92 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2203      	movs	r2, #3
 800c976:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c97a:	e05d      	b.n	800ca38 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 fa08 	bl	800cd92 <USBD_CtlSendStatus>
      break;
 800c982:	e059      	b.n	800ca38 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c984:	4b2f      	ldr	r3, [pc, #188]	; (800ca44 <USBD_SetConfig+0x148>)
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d112      	bne.n	800c9b2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2202      	movs	r2, #2
 800c990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c994:	4b2b      	ldr	r3, [pc, #172]	; (800ca44 <USBD_SetConfig+0x148>)
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	461a      	mov	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c99e:	4b29      	ldr	r3, [pc, #164]	; (800ca44 <USBD_SetConfig+0x148>)
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f7ff f985 	bl	800bcb4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 f9f1 	bl	800cd92 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c9b0:	e042      	b.n	800ca38 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c9b2:	4b24      	ldr	r3, [pc, #144]	; (800ca44 <USBD_SetConfig+0x148>)
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d02a      	beq.n	800ca16 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f7ff f973 	bl	800bcb4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c9ce:	4b1d      	ldr	r3, [pc, #116]	; (800ca44 <USBD_SetConfig+0x148>)
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c9d8:	4b1a      	ldr	r3, [pc, #104]	; (800ca44 <USBD_SetConfig+0x148>)
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	4619      	mov	r1, r3
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f7ff f94c 	bl	800bc7c <USBD_SetClassConfig>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c9e8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d00f      	beq.n	800ca0e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c9ee:	6839      	ldr	r1, [r7, #0]
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 f903 	bl	800cbfc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f7ff f958 	bl	800bcb4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2202      	movs	r2, #2
 800ca08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ca0c:	e014      	b.n	800ca38 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 f9bf 	bl	800cd92 <USBD_CtlSendStatus>
      break;
 800ca14:	e010      	b.n	800ca38 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 f9bb 	bl	800cd92 <USBD_CtlSendStatus>
      break;
 800ca1c:	e00c      	b.n	800ca38 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ca1e:	6839      	ldr	r1, [r7, #0]
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f000 f8eb 	bl	800cbfc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ca26:	4b07      	ldr	r3, [pc, #28]	; (800ca44 <USBD_SetConfig+0x148>)
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f7ff f941 	bl	800bcb4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ca32:	2303      	movs	r3, #3
 800ca34:	73fb      	strb	r3, [r7, #15]
      break;
 800ca36:	bf00      	nop
  }

  return ret;
 800ca38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3710      	adds	r7, #16
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	20000540 	.word	0x20000540

0800ca48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	88db      	ldrh	r3, [r3, #6]
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d004      	beq.n	800ca64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ca5a:	6839      	ldr	r1, [r7, #0]
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f000 f8cd 	bl	800cbfc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ca62:	e023      	b.n	800caac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	2b02      	cmp	r3, #2
 800ca6e:	dc02      	bgt.n	800ca76 <USBD_GetConfig+0x2e>
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	dc03      	bgt.n	800ca7c <USBD_GetConfig+0x34>
 800ca74:	e015      	b.n	800caa2 <USBD_GetConfig+0x5a>
 800ca76:	2b03      	cmp	r3, #3
 800ca78:	d00b      	beq.n	800ca92 <USBD_GetConfig+0x4a>
 800ca7a:	e012      	b.n	800caa2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	3308      	adds	r3, #8
 800ca86:	2201      	movs	r2, #1
 800ca88:	4619      	mov	r1, r3
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 f927 	bl	800ccde <USBD_CtlSendData>
        break;
 800ca90:	e00c      	b.n	800caac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	3304      	adds	r3, #4
 800ca96:	2201      	movs	r2, #1
 800ca98:	4619      	mov	r1, r3
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 f91f 	bl	800ccde <USBD_CtlSendData>
        break;
 800caa0:	e004      	b.n	800caac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800caa2:	6839      	ldr	r1, [r7, #0]
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 f8a9 	bl	800cbfc <USBD_CtlError>
        break;
 800caaa:	bf00      	nop
}
 800caac:	bf00      	nop
 800caae:	3708      	adds	r7, #8
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	3b01      	subs	r3, #1
 800cac8:	2b02      	cmp	r3, #2
 800caca:	d81e      	bhi.n	800cb0a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	88db      	ldrh	r3, [r3, #6]
 800cad0:	2b02      	cmp	r3, #2
 800cad2:	d004      	beq.n	800cade <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cad4:	6839      	ldr	r1, [r7, #0]
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 f890 	bl	800cbfc <USBD_CtlError>
        break;
 800cadc:	e01a      	b.n	800cb14 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2201      	movs	r2, #1
 800cae2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800caea:	2b00      	cmp	r3, #0
 800caec:	d005      	beq.n	800cafa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	f043 0202 	orr.w	r2, r3, #2
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	330c      	adds	r3, #12
 800cafe:	2202      	movs	r2, #2
 800cb00:	4619      	mov	r1, r3
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 f8eb 	bl	800ccde <USBD_CtlSendData>
      break;
 800cb08:	e004      	b.n	800cb14 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cb0a:	6839      	ldr	r1, [r7, #0]
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 f875 	bl	800cbfc <USBD_CtlError>
      break;
 800cb12:	bf00      	nop
  }
}
 800cb14:	bf00      	nop
 800cb16:	3708      	adds	r7, #8
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	885b      	ldrh	r3, [r3, #2]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d106      	bne.n	800cb3c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2201      	movs	r2, #1
 800cb32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f000 f92b 	bl	800cd92 <USBD_CtlSendStatus>
  }
}
 800cb3c:	bf00      	nop
 800cb3e:	3708      	adds	r7, #8
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	3b01      	subs	r3, #1
 800cb58:	2b02      	cmp	r3, #2
 800cb5a:	d80b      	bhi.n	800cb74 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	885b      	ldrh	r3, [r3, #2]
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d10c      	bne.n	800cb7e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2200      	movs	r2, #0
 800cb68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 f910 	bl	800cd92 <USBD_CtlSendStatus>
      }
      break;
 800cb72:	e004      	b.n	800cb7e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cb74:	6839      	ldr	r1, [r7, #0]
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 f840 	bl	800cbfc <USBD_CtlError>
      break;
 800cb7c:	e000      	b.n	800cb80 <USBD_ClrFeature+0x3c>
      break;
 800cb7e:	bf00      	nop
  }
}
 800cb80:	bf00      	nop
 800cb82:	3708      	adds	r7, #8
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	781a      	ldrb	r2, [r3, #0]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	3301      	adds	r3, #1
 800cba2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	781a      	ldrb	r2, [r3, #0]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	3301      	adds	r3, #1
 800cbb0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cbb2:	68f8      	ldr	r0, [r7, #12]
 800cbb4:	f7ff fa92 	bl	800c0dc <SWAPBYTE>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	461a      	mov	r2, r3
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	3301      	adds	r3, #1
 800cbca:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cbcc:	68f8      	ldr	r0, [r7, #12]
 800cbce:	f7ff fa85 	bl	800c0dc <SWAPBYTE>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	3301      	adds	r3, #1
 800cbde:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cbe6:	68f8      	ldr	r0, [r7, #12]
 800cbe8:	f7ff fa78 	bl	800c0dc <SWAPBYTE>
 800cbec:	4603      	mov	r3, r0
 800cbee:	461a      	mov	r2, r3
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	80da      	strh	r2, [r3, #6]
}
 800cbf4:	bf00      	nop
 800cbf6:	3710      	adds	r7, #16
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc06:	2180      	movs	r1, #128	; 0x80
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 fcc9 	bl	800d5a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cc0e:	2100      	movs	r1, #0
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 fcc5 	bl	800d5a0 <USBD_LL_StallEP>
}
 800cc16:	bf00      	nop
 800cc18:	3708      	adds	r7, #8
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b086      	sub	sp, #24
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	60f8      	str	r0, [r7, #12]
 800cc26:	60b9      	str	r1, [r7, #8]
 800cc28:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d036      	beq.n	800cca2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cc38:	6938      	ldr	r0, [r7, #16]
 800cc3a:	f000 f836 	bl	800ccaa <USBD_GetLen>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	3301      	adds	r3, #1
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	005b      	lsls	r3, r3, #1
 800cc46:	b29a      	uxth	r2, r3
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cc4c:	7dfb      	ldrb	r3, [r7, #23]
 800cc4e:	68ba      	ldr	r2, [r7, #8]
 800cc50:	4413      	add	r3, r2
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	7812      	ldrb	r2, [r2, #0]
 800cc56:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc58:	7dfb      	ldrb	r3, [r7, #23]
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cc5e:	7dfb      	ldrb	r3, [r7, #23]
 800cc60:	68ba      	ldr	r2, [r7, #8]
 800cc62:	4413      	add	r3, r2
 800cc64:	2203      	movs	r2, #3
 800cc66:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc68:	7dfb      	ldrb	r3, [r7, #23]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cc6e:	e013      	b.n	800cc98 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cc70:	7dfb      	ldrb	r3, [r7, #23]
 800cc72:	68ba      	ldr	r2, [r7, #8]
 800cc74:	4413      	add	r3, r2
 800cc76:	693a      	ldr	r2, [r7, #16]
 800cc78:	7812      	ldrb	r2, [r2, #0]
 800cc7a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	613b      	str	r3, [r7, #16]
    idx++;
 800cc82:	7dfb      	ldrb	r3, [r7, #23]
 800cc84:	3301      	adds	r3, #1
 800cc86:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cc88:	7dfb      	ldrb	r3, [r7, #23]
 800cc8a:	68ba      	ldr	r2, [r7, #8]
 800cc8c:	4413      	add	r3, r2
 800cc8e:	2200      	movs	r2, #0
 800cc90:	701a      	strb	r2, [r3, #0]
    idx++;
 800cc92:	7dfb      	ldrb	r3, [r7, #23]
 800cc94:	3301      	adds	r3, #1
 800cc96:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d1e7      	bne.n	800cc70 <USBD_GetString+0x52>
 800cca0:	e000      	b.n	800cca4 <USBD_GetString+0x86>
    return;
 800cca2:	bf00      	nop
  }
}
 800cca4:	3718      	adds	r7, #24
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}

0800ccaa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ccaa:	b480      	push	{r7}
 800ccac:	b085      	sub	sp, #20
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ccba:	e005      	b.n	800ccc8 <USBD_GetLen+0x1e>
  {
    len++;
 800ccbc:	7bfb      	ldrb	r3, [r7, #15]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d1f5      	bne.n	800ccbc <USBD_GetLen+0x12>
  }

  return len;
 800ccd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3714      	adds	r7, #20
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr

0800ccde <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b084      	sub	sp, #16
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	60f8      	str	r0, [r7, #12]
 800cce6:	60b9      	str	r1, [r7, #8]
 800cce8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2202      	movs	r2, #2
 800ccee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	687a      	ldr	r2, [r7, #4]
 800ccfc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	68ba      	ldr	r2, [r7, #8]
 800cd02:	2100      	movs	r1, #0
 800cd04:	68f8      	ldr	r0, [r7, #12]
 800cd06:	f000 fd1b 	bl	800d740 <USBD_LL_Transmit>

  return USBD_OK;
 800cd0a:	2300      	movs	r3, #0
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3710      	adds	r7, #16
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	60f8      	str	r0, [r7, #12]
 800cd1c:	60b9      	str	r1, [r7, #8]
 800cd1e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	68ba      	ldr	r2, [r7, #8]
 800cd24:	2100      	movs	r1, #0
 800cd26:	68f8      	ldr	r0, [r7, #12]
 800cd28:	f000 fd0a 	bl	800d740 <USBD_LL_Transmit>

  return USBD_OK;
 800cd2c:	2300      	movs	r3, #0
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3710      	adds	r7, #16
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}

0800cd36 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cd36:	b580      	push	{r7, lr}
 800cd38:	b084      	sub	sp, #16
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	60f8      	str	r0, [r7, #12]
 800cd3e:	60b9      	str	r1, [r7, #8]
 800cd40:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2203      	movs	r2, #3
 800cd46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	68ba      	ldr	r2, [r7, #8]
 800cd5e:	2100      	movs	r1, #0
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f000 fd25 	bl	800d7b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd66:	2300      	movs	r3, #0
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	68ba      	ldr	r2, [r7, #8]
 800cd80:	2100      	movs	r1, #0
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f000 fd14 	bl	800d7b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd88:	2300      	movs	r3, #0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3710      	adds	r7, #16
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}

0800cd92 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cd92:	b580      	push	{r7, lr}
 800cd94:	b082      	sub	sp, #8
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2204      	movs	r2, #4
 800cd9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cda2:	2300      	movs	r3, #0
 800cda4:	2200      	movs	r2, #0
 800cda6:	2100      	movs	r1, #0
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 fcc9 	bl	800d740 <USBD_LL_Transmit>

  return USBD_OK;
 800cdae:	2300      	movs	r3, #0
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3708      	adds	r7, #8
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}

0800cdb8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2205      	movs	r2, #5
 800cdc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cdc8:	2300      	movs	r3, #0
 800cdca:	2200      	movs	r2, #0
 800cdcc:	2100      	movs	r1, #0
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 fcee 	bl	800d7b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdd4:	2300      	movs	r3, #0
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3708      	adds	r7, #8
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
	...

0800cde0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cde4:	2200      	movs	r2, #0
 800cde6:	4912      	ldr	r1, [pc, #72]	; (800ce30 <MX_USB_DEVICE_Init+0x50>)
 800cde8:	4812      	ldr	r0, [pc, #72]	; (800ce34 <MX_USB_DEVICE_Init+0x54>)
 800cdea:	f7fe fed9 	bl	800bba0 <USBD_Init>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d001      	beq.n	800cdf8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cdf4:	f7f6 f94c 	bl	8003090 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cdf8:	490f      	ldr	r1, [pc, #60]	; (800ce38 <MX_USB_DEVICE_Init+0x58>)
 800cdfa:	480e      	ldr	r0, [pc, #56]	; (800ce34 <MX_USB_DEVICE_Init+0x54>)
 800cdfc:	f7fe ff00 	bl	800bc00 <USBD_RegisterClass>
 800ce00:	4603      	mov	r3, r0
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d001      	beq.n	800ce0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ce06:	f7f6 f943 	bl	8003090 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ce0a:	490c      	ldr	r1, [pc, #48]	; (800ce3c <MX_USB_DEVICE_Init+0x5c>)
 800ce0c:	4809      	ldr	r0, [pc, #36]	; (800ce34 <MX_USB_DEVICE_Init+0x54>)
 800ce0e:	f7fe fe51 	bl	800bab4 <USBD_CDC_RegisterInterface>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d001      	beq.n	800ce1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ce18:	f7f6 f93a 	bl	8003090 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ce1c:	4805      	ldr	r0, [pc, #20]	; (800ce34 <MX_USB_DEVICE_Init+0x54>)
 800ce1e:	f7fe ff16 	bl	800bc4e <USBD_Start>
 800ce22:	4603      	mov	r3, r0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d001      	beq.n	800ce2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ce28:	f7f6 f932 	bl	8003090 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ce2c:	bf00      	nop
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	20000130 	.word	0x20000130
 800ce34:	20000544 	.word	0x20000544
 800ce38:	20000018 	.word	0x20000018
 800ce3c:	2000011c 	.word	0x2000011c

0800ce40 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ce44:	2200      	movs	r2, #0
 800ce46:	4905      	ldr	r1, [pc, #20]	; (800ce5c <CDC_Init_FS+0x1c>)
 800ce48:	4805      	ldr	r0, [pc, #20]	; (800ce60 <CDC_Init_FS+0x20>)
 800ce4a:	f7fe fe48 	bl	800bade <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ce4e:	4905      	ldr	r1, [pc, #20]	; (800ce64 <CDC_Init_FS+0x24>)
 800ce50:	4803      	ldr	r0, [pc, #12]	; (800ce60 <CDC_Init_FS+0x20>)
 800ce52:	f7fe fe62 	bl	800bb1a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ce56:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	20000bfc 	.word	0x20000bfc
 800ce60:	20000544 	.word	0x20000544
 800ce64:	20000814 	.word	0x20000814

0800ce68 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ce6c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b083      	sub	sp, #12
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	4603      	mov	r3, r0
 800ce80:	6039      	str	r1, [r7, #0]
 800ce82:	71fb      	strb	r3, [r7, #7]
 800ce84:	4613      	mov	r3, r2
 800ce86:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ce88:	79fb      	ldrb	r3, [r7, #7]
 800ce8a:	2b23      	cmp	r3, #35	; 0x23
 800ce8c:	d84a      	bhi.n	800cf24 <CDC_Control_FS+0xac>
 800ce8e:	a201      	add	r2, pc, #4	; (adr r2, 800ce94 <CDC_Control_FS+0x1c>)
 800ce90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce94:	0800cf25 	.word	0x0800cf25
 800ce98:	0800cf25 	.word	0x0800cf25
 800ce9c:	0800cf25 	.word	0x0800cf25
 800cea0:	0800cf25 	.word	0x0800cf25
 800cea4:	0800cf25 	.word	0x0800cf25
 800cea8:	0800cf25 	.word	0x0800cf25
 800ceac:	0800cf25 	.word	0x0800cf25
 800ceb0:	0800cf25 	.word	0x0800cf25
 800ceb4:	0800cf25 	.word	0x0800cf25
 800ceb8:	0800cf25 	.word	0x0800cf25
 800cebc:	0800cf25 	.word	0x0800cf25
 800cec0:	0800cf25 	.word	0x0800cf25
 800cec4:	0800cf25 	.word	0x0800cf25
 800cec8:	0800cf25 	.word	0x0800cf25
 800cecc:	0800cf25 	.word	0x0800cf25
 800ced0:	0800cf25 	.word	0x0800cf25
 800ced4:	0800cf25 	.word	0x0800cf25
 800ced8:	0800cf25 	.word	0x0800cf25
 800cedc:	0800cf25 	.word	0x0800cf25
 800cee0:	0800cf25 	.word	0x0800cf25
 800cee4:	0800cf25 	.word	0x0800cf25
 800cee8:	0800cf25 	.word	0x0800cf25
 800ceec:	0800cf25 	.word	0x0800cf25
 800cef0:	0800cf25 	.word	0x0800cf25
 800cef4:	0800cf25 	.word	0x0800cf25
 800cef8:	0800cf25 	.word	0x0800cf25
 800cefc:	0800cf25 	.word	0x0800cf25
 800cf00:	0800cf25 	.word	0x0800cf25
 800cf04:	0800cf25 	.word	0x0800cf25
 800cf08:	0800cf25 	.word	0x0800cf25
 800cf0c:	0800cf25 	.word	0x0800cf25
 800cf10:	0800cf25 	.word	0x0800cf25
 800cf14:	0800cf25 	.word	0x0800cf25
 800cf18:	0800cf25 	.word	0x0800cf25
 800cf1c:	0800cf25 	.word	0x0800cf25
 800cf20:	0800cf25 	.word	0x0800cf25
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cf24:	bf00      	nop
  }

  return (USBD_OK);
 800cf26:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	370c      	adds	r7, #12
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr

0800cf34 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cf3e:	6879      	ldr	r1, [r7, #4]
 800cf40:	4805      	ldr	r0, [pc, #20]	; (800cf58 <CDC_Receive_FS+0x24>)
 800cf42:	f7fe fdea 	bl	800bb1a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cf46:	4804      	ldr	r0, [pc, #16]	; (800cf58 <CDC_Receive_FS+0x24>)
 800cf48:	f7fe fe00 	bl	800bb4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cf4c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3708      	adds	r7, #8
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	20000544 	.word	0x20000544

0800cf5c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b087      	sub	sp, #28
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	4613      	mov	r3, r2
 800cf68:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cf6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	371c      	adds	r7, #28
 800cf76:	46bd      	mov	sp, r7
 800cf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7c:	4770      	bx	lr
	...

0800cf80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	4603      	mov	r3, r0
 800cf88:	6039      	str	r1, [r7, #0]
 800cf8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	2212      	movs	r2, #18
 800cf90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cf92:	4b03      	ldr	r3, [pc, #12]	; (800cfa0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	370c      	adds	r7, #12
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr
 800cfa0:	20000150 	.word	0x20000150

0800cfa4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	4603      	mov	r3, r0
 800cfac:	6039      	str	r1, [r7, #0]
 800cfae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	2204      	movs	r2, #4
 800cfb4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cfb6:	4b03      	ldr	r3, [pc, #12]	; (800cfc4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	370c      	adds	r7, #12
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr
 800cfc4:	20000170 	.word	0x20000170

0800cfc8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	4603      	mov	r3, r0
 800cfd0:	6039      	str	r1, [r7, #0]
 800cfd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cfd4:	79fb      	ldrb	r3, [r7, #7]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d105      	bne.n	800cfe6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cfda:	683a      	ldr	r2, [r7, #0]
 800cfdc:	4907      	ldr	r1, [pc, #28]	; (800cffc <USBD_FS_ProductStrDescriptor+0x34>)
 800cfde:	4808      	ldr	r0, [pc, #32]	; (800d000 <USBD_FS_ProductStrDescriptor+0x38>)
 800cfe0:	f7ff fe1d 	bl	800cc1e <USBD_GetString>
 800cfe4:	e004      	b.n	800cff0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cfe6:	683a      	ldr	r2, [r7, #0]
 800cfe8:	4904      	ldr	r1, [pc, #16]	; (800cffc <USBD_FS_ProductStrDescriptor+0x34>)
 800cfea:	4805      	ldr	r0, [pc, #20]	; (800d000 <USBD_FS_ProductStrDescriptor+0x38>)
 800cfec:	f7ff fe17 	bl	800cc1e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cff0:	4b02      	ldr	r3, [pc, #8]	; (800cffc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3708      	adds	r7, #8
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	20000fe4 	.word	0x20000fe4
 800d000:	0800d964 	.word	0x0800d964

0800d004 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b082      	sub	sp, #8
 800d008:	af00      	add	r7, sp, #0
 800d00a:	4603      	mov	r3, r0
 800d00c:	6039      	str	r1, [r7, #0]
 800d00e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d010:	683a      	ldr	r2, [r7, #0]
 800d012:	4904      	ldr	r1, [pc, #16]	; (800d024 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d014:	4804      	ldr	r0, [pc, #16]	; (800d028 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d016:	f7ff fe02 	bl	800cc1e <USBD_GetString>
  return USBD_StrDesc;
 800d01a:	4b02      	ldr	r3, [pc, #8]	; (800d024 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3708      	adds	r7, #8
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	20000fe4 	.word	0x20000fe4
 800d028:	0800d97c 	.word	0x0800d97c

0800d02c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	4603      	mov	r3, r0
 800d034:	6039      	str	r1, [r7, #0]
 800d036:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	221a      	movs	r2, #26
 800d03c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d03e:	f000 f855 	bl	800d0ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d042:	4b02      	ldr	r3, [pc, #8]	; (800d04c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d044:	4618      	mov	r0, r3
 800d046:	3708      	adds	r7, #8
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	20000174 	.word	0x20000174

0800d050 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	4603      	mov	r3, r0
 800d058:	6039      	str	r1, [r7, #0]
 800d05a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d05c:	79fb      	ldrb	r3, [r7, #7]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d105      	bne.n	800d06e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d062:	683a      	ldr	r2, [r7, #0]
 800d064:	4907      	ldr	r1, [pc, #28]	; (800d084 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d066:	4808      	ldr	r0, [pc, #32]	; (800d088 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d068:	f7ff fdd9 	bl	800cc1e <USBD_GetString>
 800d06c:	e004      	b.n	800d078 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d06e:	683a      	ldr	r2, [r7, #0]
 800d070:	4904      	ldr	r1, [pc, #16]	; (800d084 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d072:	4805      	ldr	r0, [pc, #20]	; (800d088 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d074:	f7ff fdd3 	bl	800cc1e <USBD_GetString>
  }
  return USBD_StrDesc;
 800d078:	4b02      	ldr	r3, [pc, #8]	; (800d084 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3708      	adds	r7, #8
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	20000fe4 	.word	0x20000fe4
 800d088:	0800d990 	.word	0x0800d990

0800d08c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
 800d092:	4603      	mov	r3, r0
 800d094:	6039      	str	r1, [r7, #0]
 800d096:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d098:	79fb      	ldrb	r3, [r7, #7]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d105      	bne.n	800d0aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d09e:	683a      	ldr	r2, [r7, #0]
 800d0a0:	4907      	ldr	r1, [pc, #28]	; (800d0c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d0a2:	4808      	ldr	r0, [pc, #32]	; (800d0c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d0a4:	f7ff fdbb 	bl	800cc1e <USBD_GetString>
 800d0a8:	e004      	b.n	800d0b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d0aa:	683a      	ldr	r2, [r7, #0]
 800d0ac:	4904      	ldr	r1, [pc, #16]	; (800d0c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d0ae:	4805      	ldr	r0, [pc, #20]	; (800d0c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d0b0:	f7ff fdb5 	bl	800cc1e <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0b4:	4b02      	ldr	r3, [pc, #8]	; (800d0c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3708      	adds	r7, #8
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	20000fe4 	.word	0x20000fe4
 800d0c4:	0800d99c 	.word	0x0800d99c

0800d0c8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b083      	sub	sp, #12
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	6039      	str	r1, [r7, #0]
 800d0d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	220c      	movs	r2, #12
 800d0d8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d0da:	4b03      	ldr	r3, [pc, #12]	; (800d0e8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	370c      	adds	r7, #12
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr
 800d0e8:	20000164 	.word	0x20000164

0800d0ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d0f2:	4b0f      	ldr	r3, [pc, #60]	; (800d130 <Get_SerialNum+0x44>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d0f8:	4b0e      	ldr	r3, [pc, #56]	; (800d134 <Get_SerialNum+0x48>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d0fe:	4b0e      	ldr	r3, [pc, #56]	; (800d138 <Get_SerialNum+0x4c>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d104:	68fa      	ldr	r2, [r7, #12]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	4413      	add	r3, r2
 800d10a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d009      	beq.n	800d126 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d112:	2208      	movs	r2, #8
 800d114:	4909      	ldr	r1, [pc, #36]	; (800d13c <Get_SerialNum+0x50>)
 800d116:	68f8      	ldr	r0, [r7, #12]
 800d118:	f000 f814 	bl	800d144 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d11c:	2204      	movs	r2, #4
 800d11e:	4908      	ldr	r1, [pc, #32]	; (800d140 <Get_SerialNum+0x54>)
 800d120:	68b8      	ldr	r0, [r7, #8]
 800d122:	f000 f80f 	bl	800d144 <IntToUnicode>
  }
}
 800d126:	bf00      	nop
 800d128:	3710      	adds	r7, #16
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	1fff7590 	.word	0x1fff7590
 800d134:	1fff7594 	.word	0x1fff7594
 800d138:	1fff7598 	.word	0x1fff7598
 800d13c:	20000176 	.word	0x20000176
 800d140:	20000186 	.word	0x20000186

0800d144 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d144:	b480      	push	{r7}
 800d146:	b087      	sub	sp, #28
 800d148:	af00      	add	r7, sp, #0
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	60b9      	str	r1, [r7, #8]
 800d14e:	4613      	mov	r3, r2
 800d150:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d152:	2300      	movs	r3, #0
 800d154:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d156:	2300      	movs	r3, #0
 800d158:	75fb      	strb	r3, [r7, #23]
 800d15a:	e027      	b.n	800d1ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	0f1b      	lsrs	r3, r3, #28
 800d160:	2b09      	cmp	r3, #9
 800d162:	d80b      	bhi.n	800d17c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	0f1b      	lsrs	r3, r3, #28
 800d168:	b2da      	uxtb	r2, r3
 800d16a:	7dfb      	ldrb	r3, [r7, #23]
 800d16c:	005b      	lsls	r3, r3, #1
 800d16e:	4619      	mov	r1, r3
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	440b      	add	r3, r1
 800d174:	3230      	adds	r2, #48	; 0x30
 800d176:	b2d2      	uxtb	r2, r2
 800d178:	701a      	strb	r2, [r3, #0]
 800d17a:	e00a      	b.n	800d192 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	0f1b      	lsrs	r3, r3, #28
 800d180:	b2da      	uxtb	r2, r3
 800d182:	7dfb      	ldrb	r3, [r7, #23]
 800d184:	005b      	lsls	r3, r3, #1
 800d186:	4619      	mov	r1, r3
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	440b      	add	r3, r1
 800d18c:	3237      	adds	r2, #55	; 0x37
 800d18e:	b2d2      	uxtb	r2, r2
 800d190:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	011b      	lsls	r3, r3, #4
 800d196:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d198:	7dfb      	ldrb	r3, [r7, #23]
 800d19a:	005b      	lsls	r3, r3, #1
 800d19c:	3301      	adds	r3, #1
 800d19e:	68ba      	ldr	r2, [r7, #8]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d1a6:	7dfb      	ldrb	r3, [r7, #23]
 800d1a8:	3301      	adds	r3, #1
 800d1aa:	75fb      	strb	r3, [r7, #23]
 800d1ac:	7dfa      	ldrb	r2, [r7, #23]
 800d1ae:	79fb      	ldrb	r3, [r7, #7]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d3d3      	bcc.n	800d15c <IntToUnicode+0x18>
  }
}
 800d1b4:	bf00      	nop
 800d1b6:	bf00      	nop
 800d1b8:	371c      	adds	r7, #28
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr
	...

0800d1c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b09c      	sub	sp, #112	; 0x70
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d1cc:	f107 0310 	add.w	r3, r7, #16
 800d1d0:	2260      	movs	r2, #96	; 0x60
 800d1d2:	2100      	movs	r1, #0
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f000 fbb1 	bl	800d93c <memset>
  if(pcdHandle->Instance==USB)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4a15      	ldr	r2, [pc, #84]	; (800d234 <HAL_PCD_MspInit+0x70>)
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d122      	bne.n	800d22a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d1e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d1e8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d1ee:	f107 0310 	add.w	r3, r7, #16
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7fa fb10 	bl	8007818 <HAL_RCCEx_PeriphCLKConfig>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d001      	beq.n	800d202 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800d1fe:	f7f5 ff47 	bl	8003090 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d202:	4b0d      	ldr	r3, [pc, #52]	; (800d238 <HAL_PCD_MspInit+0x74>)
 800d204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d206:	4a0c      	ldr	r2, [pc, #48]	; (800d238 <HAL_PCD_MspInit+0x74>)
 800d208:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d20c:	6593      	str	r3, [r2, #88]	; 0x58
 800d20e:	4b0a      	ldr	r3, [pc, #40]	; (800d238 <HAL_PCD_MspInit+0x74>)
 800d210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d212:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d216:	60fb      	str	r3, [r7, #12]
 800d218:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800d21a:	2200      	movs	r2, #0
 800d21c:	2100      	movs	r1, #0
 800d21e:	2043      	movs	r0, #67	; 0x43
 800d220:	f7f7 f965 	bl	80044ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d224:	2043      	movs	r0, #67	; 0x43
 800d226:	f7f7 f97e 	bl	8004526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d22a:	bf00      	nop
 800d22c:	3770      	adds	r7, #112	; 0x70
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	40006800 	.word	0x40006800
 800d238:	40021000 	.word	0x40021000

0800d23c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800d250:	4619      	mov	r1, r3
 800d252:	4610      	mov	r0, r2
 800d254:	f7fe fd46 	bl	800bce4 <USBD_LL_SetupStage>
}
 800d258:	bf00      	nop
 800d25a:	3708      	adds	r7, #8
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	460b      	mov	r3, r1
 800d26a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800d272:	78fa      	ldrb	r2, [r7, #3]
 800d274:	6879      	ldr	r1, [r7, #4]
 800d276:	4613      	mov	r3, r2
 800d278:	009b      	lsls	r3, r3, #2
 800d27a:	4413      	add	r3, r2
 800d27c:	00db      	lsls	r3, r3, #3
 800d27e:	440b      	add	r3, r1
 800d280:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	78fb      	ldrb	r3, [r7, #3]
 800d288:	4619      	mov	r1, r3
 800d28a:	f7fe fd80 	bl	800bd8e <USBD_LL_DataOutStage>
}
 800d28e:	bf00      	nop
 800d290:	3708      	adds	r7, #8
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}

0800d296 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d296:	b580      	push	{r7, lr}
 800d298:	b082      	sub	sp, #8
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
 800d29e:	460b      	mov	r3, r1
 800d2a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800d2a8:	78fa      	ldrb	r2, [r7, #3]
 800d2aa:	6879      	ldr	r1, [r7, #4]
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	4413      	add	r3, r2
 800d2b2:	00db      	lsls	r3, r3, #3
 800d2b4:	440b      	add	r3, r1
 800d2b6:	3340      	adds	r3, #64	; 0x40
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	78fb      	ldrb	r3, [r7, #3]
 800d2bc:	4619      	mov	r1, r3
 800d2be:	f7fe fdc9 	bl	800be54 <USBD_LL_DataInStage>
}
 800d2c2:	bf00      	nop
 800d2c4:	3708      	adds	r7, #8
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}

0800d2ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b082      	sub	sp, #8
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f7fe fedd 	bl	800c098 <USBD_LL_SOF>
}
 800d2de:	bf00      	nop
 800d2e0:	3708      	adds	r7, #8
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}

0800d2e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2e6:	b580      	push	{r7, lr}
 800d2e8:	b084      	sub	sp, #16
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	689b      	ldr	r3, [r3, #8]
 800d2f6:	2b02      	cmp	r3, #2
 800d2f8:	d001      	beq.n	800d2fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d2fa:	f7f5 fec9 	bl	8003090 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d304:	7bfa      	ldrb	r2, [r7, #15]
 800d306:	4611      	mov	r1, r2
 800d308:	4618      	mov	r0, r3
 800d30a:	f7fe fe87 	bl	800c01c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d314:	4618      	mov	r0, r3
 800d316:	f7fe fe33 	bl	800bf80 <USBD_LL_Reset>
}
 800d31a:	bf00      	nop
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
	...

0800d324 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d332:	4618      	mov	r0, r3
 800d334:	f7fe fe82 	bl	800c03c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	699b      	ldr	r3, [r3, #24]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d005      	beq.n	800d34c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d340:	4b04      	ldr	r3, [pc, #16]	; (800d354 <HAL_PCD_SuspendCallback+0x30>)
 800d342:	691b      	ldr	r3, [r3, #16]
 800d344:	4a03      	ldr	r2, [pc, #12]	; (800d354 <HAL_PCD_SuspendCallback+0x30>)
 800d346:	f043 0306 	orr.w	r3, r3, #6
 800d34a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d34c:	bf00      	nop
 800d34e:	3708      	adds	r7, #8
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}
 800d354:	e000ed00 	.word	0xe000ed00

0800d358 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	699b      	ldr	r3, [r3, #24]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d007      	beq.n	800d378 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d368:	4b08      	ldr	r3, [pc, #32]	; (800d38c <HAL_PCD_ResumeCallback+0x34>)
 800d36a:	691b      	ldr	r3, [r3, #16]
 800d36c:	4a07      	ldr	r2, [pc, #28]	; (800d38c <HAL_PCD_ResumeCallback+0x34>)
 800d36e:	f023 0306 	bic.w	r3, r3, #6
 800d372:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d374:	f000 fab6 	bl	800d8e4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d37e:	4618      	mov	r0, r3
 800d380:	f7fe fe72 	bl	800c068 <USBD_LL_Resume>
}
 800d384:	bf00      	nop
 800d386:	3708      	adds	r7, #8
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	e000ed00 	.word	0xe000ed00

0800d390 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b082      	sub	sp, #8
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800d398:	f7f9 fc22 	bl	8006be0 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d39c:	4a2b      	ldr	r2, [pc, #172]	; (800d44c <USBD_LL_Init+0xbc>)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	4a29      	ldr	r2, [pc, #164]	; (800d44c <USBD_LL_Init+0xbc>)
 800d3a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d3ac:	4b27      	ldr	r3, [pc, #156]	; (800d44c <USBD_LL_Init+0xbc>)
 800d3ae:	4a28      	ldr	r2, [pc, #160]	; (800d450 <USBD_LL_Init+0xc0>)
 800d3b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d3b2:	4b26      	ldr	r3, [pc, #152]	; (800d44c <USBD_LL_Init+0xbc>)
 800d3b4:	2208      	movs	r2, #8
 800d3b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d3b8:	4b24      	ldr	r3, [pc, #144]	; (800d44c <USBD_LL_Init+0xbc>)
 800d3ba:	2202      	movs	r2, #2
 800d3bc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d3be:	4b23      	ldr	r3, [pc, #140]	; (800d44c <USBD_LL_Init+0xbc>)
 800d3c0:	2202      	movs	r2, #2
 800d3c2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d3c4:	4b21      	ldr	r3, [pc, #132]	; (800d44c <USBD_LL_Init+0xbc>)
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d3ca:	4b20      	ldr	r3, [pc, #128]	; (800d44c <USBD_LL_Init+0xbc>)
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d3d0:	4b1e      	ldr	r3, [pc, #120]	; (800d44c <USBD_LL_Init+0xbc>)
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d3d6:	4b1d      	ldr	r3, [pc, #116]	; (800d44c <USBD_LL_Init+0xbc>)
 800d3d8:	2200      	movs	r2, #0
 800d3da:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d3dc:	481b      	ldr	r0, [pc, #108]	; (800d44c <USBD_LL_Init+0xbc>)
 800d3de:	f7f7 fe0f 	bl	8005000 <HAL_PCD_Init>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d001      	beq.n	800d3ec <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800d3e8:	f7f5 fe52 	bl	8003090 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d3f2:	2318      	movs	r3, #24
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	f7f9 fb1f 	bl	8006a3a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d402:	2358      	movs	r3, #88	; 0x58
 800d404:	2200      	movs	r2, #0
 800d406:	2180      	movs	r1, #128	; 0x80
 800d408:	f7f9 fb17 	bl	8006a3a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d412:	23c0      	movs	r3, #192	; 0xc0
 800d414:	2200      	movs	r2, #0
 800d416:	2181      	movs	r1, #129	; 0x81
 800d418:	f7f9 fb0f 	bl	8006a3a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d422:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d426:	2200      	movs	r2, #0
 800d428:	2101      	movs	r1, #1
 800d42a:	f7f9 fb06 	bl	8006a3a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d434:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d438:	2200      	movs	r2, #0
 800d43a:	2182      	movs	r1, #130	; 0x82
 800d43c:	f7f9 fafd 	bl	8006a3a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d440:	2300      	movs	r3, #0
}
 800d442:	4618      	mov	r0, r3
 800d444:	3708      	adds	r7, #8
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
 800d44a:	bf00      	nop
 800d44c:	200011e4 	.word	0x200011e4
 800d450:	40006800 	.word	0x40006800

0800d454 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d45c:	2300      	movs	r3, #0
 800d45e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d460:	2300      	movs	r3, #0
 800d462:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7f7 fedf 	bl	800522e <HAL_PCD_Start>
 800d470:	4603      	mov	r3, r0
 800d472:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d474:	7bbb      	ldrb	r3, [r7, #14]
 800d476:	2b03      	cmp	r3, #3
 800d478:	d816      	bhi.n	800d4a8 <USBD_LL_Start+0x54>
 800d47a:	a201      	add	r2, pc, #4	; (adr r2, 800d480 <USBD_LL_Start+0x2c>)
 800d47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d480:	0800d491 	.word	0x0800d491
 800d484:	0800d497 	.word	0x0800d497
 800d488:	0800d49d 	.word	0x0800d49d
 800d48c:	0800d4a3 	.word	0x0800d4a3
    case HAL_OK :
      usb_status = USBD_OK;
 800d490:	2300      	movs	r3, #0
 800d492:	73fb      	strb	r3, [r7, #15]
    break;
 800d494:	e00b      	b.n	800d4ae <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d496:	2303      	movs	r3, #3
 800d498:	73fb      	strb	r3, [r7, #15]
    break;
 800d49a:	e008      	b.n	800d4ae <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d49c:	2301      	movs	r3, #1
 800d49e:	73fb      	strb	r3, [r7, #15]
    break;
 800d4a0:	e005      	b.n	800d4ae <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d4a2:	2303      	movs	r3, #3
 800d4a4:	73fb      	strb	r3, [r7, #15]
    break;
 800d4a6:	e002      	b.n	800d4ae <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d4a8:	2303      	movs	r3, #3
 800d4aa:	73fb      	strb	r3, [r7, #15]
    break;
 800d4ac:	bf00      	nop
  }
  return usb_status;
 800d4ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3710      	adds	r7, #16
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b084      	sub	sp, #16
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	4608      	mov	r0, r1
 800d4c2:	4611      	mov	r1, r2
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	70fb      	strb	r3, [r7, #3]
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	70bb      	strb	r3, [r7, #2]
 800d4ce:	4613      	mov	r3, r2
 800d4d0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d4e0:	78bb      	ldrb	r3, [r7, #2]
 800d4e2:	883a      	ldrh	r2, [r7, #0]
 800d4e4:	78f9      	ldrb	r1, [r7, #3]
 800d4e6:	f7f8 f810 	bl	800550a <HAL_PCD_EP_Open>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d4ee:	7bbb      	ldrb	r3, [r7, #14]
 800d4f0:	2b03      	cmp	r3, #3
 800d4f2:	d817      	bhi.n	800d524 <USBD_LL_OpenEP+0x6c>
 800d4f4:	a201      	add	r2, pc, #4	; (adr r2, 800d4fc <USBD_LL_OpenEP+0x44>)
 800d4f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4fa:	bf00      	nop
 800d4fc:	0800d50d 	.word	0x0800d50d
 800d500:	0800d513 	.word	0x0800d513
 800d504:	0800d519 	.word	0x0800d519
 800d508:	0800d51f 	.word	0x0800d51f
    case HAL_OK :
      usb_status = USBD_OK;
 800d50c:	2300      	movs	r3, #0
 800d50e:	73fb      	strb	r3, [r7, #15]
    break;
 800d510:	e00b      	b.n	800d52a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d512:	2303      	movs	r3, #3
 800d514:	73fb      	strb	r3, [r7, #15]
    break;
 800d516:	e008      	b.n	800d52a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d518:	2301      	movs	r3, #1
 800d51a:	73fb      	strb	r3, [r7, #15]
    break;
 800d51c:	e005      	b.n	800d52a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d51e:	2303      	movs	r3, #3
 800d520:	73fb      	strb	r3, [r7, #15]
    break;
 800d522:	e002      	b.n	800d52a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d524:	2303      	movs	r3, #3
 800d526:	73fb      	strb	r3, [r7, #15]
    break;
 800d528:	bf00      	nop
  }
  return usb_status;
 800d52a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3710      	adds	r7, #16
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b084      	sub	sp, #16
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	460b      	mov	r3, r1
 800d53e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d540:	2300      	movs	r3, #0
 800d542:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d544:	2300      	movs	r3, #0
 800d546:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d54e:	78fa      	ldrb	r2, [r7, #3]
 800d550:	4611      	mov	r1, r2
 800d552:	4618      	mov	r0, r3
 800d554:	f7f8 f841 	bl	80055da <HAL_PCD_EP_Close>
 800d558:	4603      	mov	r3, r0
 800d55a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d55c:	7bbb      	ldrb	r3, [r7, #14]
 800d55e:	2b03      	cmp	r3, #3
 800d560:	d816      	bhi.n	800d590 <USBD_LL_CloseEP+0x5c>
 800d562:	a201      	add	r2, pc, #4	; (adr r2, 800d568 <USBD_LL_CloseEP+0x34>)
 800d564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d568:	0800d579 	.word	0x0800d579
 800d56c:	0800d57f 	.word	0x0800d57f
 800d570:	0800d585 	.word	0x0800d585
 800d574:	0800d58b 	.word	0x0800d58b
    case HAL_OK :
      usb_status = USBD_OK;
 800d578:	2300      	movs	r3, #0
 800d57a:	73fb      	strb	r3, [r7, #15]
    break;
 800d57c:	e00b      	b.n	800d596 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d57e:	2303      	movs	r3, #3
 800d580:	73fb      	strb	r3, [r7, #15]
    break;
 800d582:	e008      	b.n	800d596 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d584:	2301      	movs	r3, #1
 800d586:	73fb      	strb	r3, [r7, #15]
    break;
 800d588:	e005      	b.n	800d596 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d58a:	2303      	movs	r3, #3
 800d58c:	73fb      	strb	r3, [r7, #15]
    break;
 800d58e:	e002      	b.n	800d596 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d590:	2303      	movs	r3, #3
 800d592:	73fb      	strb	r3, [r7, #15]
    break;
 800d594:	bf00      	nop
  }
  return usb_status;
 800d596:	7bfb      	ldrb	r3, [r7, #15]
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3710      	adds	r7, #16
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b084      	sub	sp, #16
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	460b      	mov	r3, r1
 800d5aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d5ba:	78fa      	ldrb	r2, [r7, #3]
 800d5bc:	4611      	mov	r1, r2
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7f8 f8ef 	bl	80057a2 <HAL_PCD_EP_SetStall>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d5c8:	7bbb      	ldrb	r3, [r7, #14]
 800d5ca:	2b03      	cmp	r3, #3
 800d5cc:	d816      	bhi.n	800d5fc <USBD_LL_StallEP+0x5c>
 800d5ce:	a201      	add	r2, pc, #4	; (adr r2, 800d5d4 <USBD_LL_StallEP+0x34>)
 800d5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d4:	0800d5e5 	.word	0x0800d5e5
 800d5d8:	0800d5eb 	.word	0x0800d5eb
 800d5dc:	0800d5f1 	.word	0x0800d5f1
 800d5e0:	0800d5f7 	.word	0x0800d5f7
    case HAL_OK :
      usb_status = USBD_OK;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d5e8:	e00b      	b.n	800d602 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5ea:	2303      	movs	r3, #3
 800d5ec:	73fb      	strb	r3, [r7, #15]
    break;
 800d5ee:	e008      	b.n	800d602 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d5f4:	e005      	b.n	800d602 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d5f6:	2303      	movs	r3, #3
 800d5f8:	73fb      	strb	r3, [r7, #15]
    break;
 800d5fa:	e002      	b.n	800d602 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d5fc:	2303      	movs	r3, #3
 800d5fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d600:	bf00      	nop
  }
  return usb_status;
 800d602:	7bfb      	ldrb	r3, [r7, #15]
}
 800d604:	4618      	mov	r0, r3
 800d606:	3710      	adds	r7, #16
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	460b      	mov	r3, r1
 800d616:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d618:	2300      	movs	r3, #0
 800d61a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d61c:	2300      	movs	r3, #0
 800d61e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d626:	78fa      	ldrb	r2, [r7, #3]
 800d628:	4611      	mov	r1, r2
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7f8 f91b 	bl	8005866 <HAL_PCD_EP_ClrStall>
 800d630:	4603      	mov	r3, r0
 800d632:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d634:	7bbb      	ldrb	r3, [r7, #14]
 800d636:	2b03      	cmp	r3, #3
 800d638:	d816      	bhi.n	800d668 <USBD_LL_ClearStallEP+0x5c>
 800d63a:	a201      	add	r2, pc, #4	; (adr r2, 800d640 <USBD_LL_ClearStallEP+0x34>)
 800d63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d640:	0800d651 	.word	0x0800d651
 800d644:	0800d657 	.word	0x0800d657
 800d648:	0800d65d 	.word	0x0800d65d
 800d64c:	0800d663 	.word	0x0800d663
    case HAL_OK :
      usb_status = USBD_OK;
 800d650:	2300      	movs	r3, #0
 800d652:	73fb      	strb	r3, [r7, #15]
    break;
 800d654:	e00b      	b.n	800d66e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d656:	2303      	movs	r3, #3
 800d658:	73fb      	strb	r3, [r7, #15]
    break;
 800d65a:	e008      	b.n	800d66e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d65c:	2301      	movs	r3, #1
 800d65e:	73fb      	strb	r3, [r7, #15]
    break;
 800d660:	e005      	b.n	800d66e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d662:	2303      	movs	r3, #3
 800d664:	73fb      	strb	r3, [r7, #15]
    break;
 800d666:	e002      	b.n	800d66e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d668:	2303      	movs	r3, #3
 800d66a:	73fb      	strb	r3, [r7, #15]
    break;
 800d66c:	bf00      	nop
  }
  return usb_status;
 800d66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d670:	4618      	mov	r0, r3
 800d672:	3710      	adds	r7, #16
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d678:	b480      	push	{r7}
 800d67a:	b085      	sub	sp, #20
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	460b      	mov	r3, r1
 800d682:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d68a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d68c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d690:	2b00      	cmp	r3, #0
 800d692:	da0c      	bge.n	800d6ae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d694:	78fb      	ldrb	r3, [r7, #3]
 800d696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d69a:	68f9      	ldr	r1, [r7, #12]
 800d69c:	1c5a      	adds	r2, r3, #1
 800d69e:	4613      	mov	r3, r2
 800d6a0:	009b      	lsls	r3, r3, #2
 800d6a2:	4413      	add	r3, r2
 800d6a4:	00db      	lsls	r3, r3, #3
 800d6a6:	440b      	add	r3, r1
 800d6a8:	3306      	adds	r3, #6
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	e00b      	b.n	800d6c6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d6ae:	78fb      	ldrb	r3, [r7, #3]
 800d6b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6b4:	68f9      	ldr	r1, [r7, #12]
 800d6b6:	4613      	mov	r3, r2
 800d6b8:	009b      	lsls	r3, r3, #2
 800d6ba:	4413      	add	r3, r2
 800d6bc:	00db      	lsls	r3, r3, #3
 800d6be:	440b      	add	r3, r1
 800d6c0:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800d6c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3714      	adds	r7, #20
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d0:	4770      	bx	lr
	...

0800d6d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b084      	sub	sp, #16
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	460b      	mov	r3, r1
 800d6de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d6ee:	78fa      	ldrb	r2, [r7, #3]
 800d6f0:	4611      	mov	r1, r2
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7f7 fee4 	bl	80054c0 <HAL_PCD_SetAddress>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d6fc:	7bbb      	ldrb	r3, [r7, #14]
 800d6fe:	2b03      	cmp	r3, #3
 800d700:	d816      	bhi.n	800d730 <USBD_LL_SetUSBAddress+0x5c>
 800d702:	a201      	add	r2, pc, #4	; (adr r2, 800d708 <USBD_LL_SetUSBAddress+0x34>)
 800d704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d708:	0800d719 	.word	0x0800d719
 800d70c:	0800d71f 	.word	0x0800d71f
 800d710:	0800d725 	.word	0x0800d725
 800d714:	0800d72b 	.word	0x0800d72b
    case HAL_OK :
      usb_status = USBD_OK;
 800d718:	2300      	movs	r3, #0
 800d71a:	73fb      	strb	r3, [r7, #15]
    break;
 800d71c:	e00b      	b.n	800d736 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d71e:	2303      	movs	r3, #3
 800d720:	73fb      	strb	r3, [r7, #15]
    break;
 800d722:	e008      	b.n	800d736 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d724:	2301      	movs	r3, #1
 800d726:	73fb      	strb	r3, [r7, #15]
    break;
 800d728:	e005      	b.n	800d736 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d72a:	2303      	movs	r3, #3
 800d72c:	73fb      	strb	r3, [r7, #15]
    break;
 800d72e:	e002      	b.n	800d736 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d730:	2303      	movs	r3, #3
 800d732:	73fb      	strb	r3, [r7, #15]
    break;
 800d734:	bf00      	nop
  }
  return usb_status;
 800d736:	7bfb      	ldrb	r3, [r7, #15]
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3710      	adds	r7, #16
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b086      	sub	sp, #24
 800d744:	af00      	add	r7, sp, #0
 800d746:	60f8      	str	r0, [r7, #12]
 800d748:	607a      	str	r2, [r7, #4]
 800d74a:	603b      	str	r3, [r7, #0]
 800d74c:	460b      	mov	r3, r1
 800d74e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d750:	2300      	movs	r3, #0
 800d752:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d754:	2300      	movs	r3, #0
 800d756:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d75e:	7af9      	ldrb	r1, [r7, #11]
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	687a      	ldr	r2, [r7, #4]
 800d764:	f7f7 ffd9 	bl	800571a <HAL_PCD_EP_Transmit>
 800d768:	4603      	mov	r3, r0
 800d76a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d76c:	7dbb      	ldrb	r3, [r7, #22]
 800d76e:	2b03      	cmp	r3, #3
 800d770:	d816      	bhi.n	800d7a0 <USBD_LL_Transmit+0x60>
 800d772:	a201      	add	r2, pc, #4	; (adr r2, 800d778 <USBD_LL_Transmit+0x38>)
 800d774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d778:	0800d789 	.word	0x0800d789
 800d77c:	0800d78f 	.word	0x0800d78f
 800d780:	0800d795 	.word	0x0800d795
 800d784:	0800d79b 	.word	0x0800d79b
    case HAL_OK :
      usb_status = USBD_OK;
 800d788:	2300      	movs	r3, #0
 800d78a:	75fb      	strb	r3, [r7, #23]
    break;
 800d78c:	e00b      	b.n	800d7a6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d78e:	2303      	movs	r3, #3
 800d790:	75fb      	strb	r3, [r7, #23]
    break;
 800d792:	e008      	b.n	800d7a6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d794:	2301      	movs	r3, #1
 800d796:	75fb      	strb	r3, [r7, #23]
    break;
 800d798:	e005      	b.n	800d7a6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d79a:	2303      	movs	r3, #3
 800d79c:	75fb      	strb	r3, [r7, #23]
    break;
 800d79e:	e002      	b.n	800d7a6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d7a0:	2303      	movs	r3, #3
 800d7a2:	75fb      	strb	r3, [r7, #23]
    break;
 800d7a4:	bf00      	nop
  }
  return usb_status;
 800d7a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3718      	adds	r7, #24
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b086      	sub	sp, #24
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	607a      	str	r2, [r7, #4]
 800d7ba:	603b      	str	r3, [r7, #0]
 800d7bc:	460b      	mov	r3, r1
 800d7be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d7ce:	7af9      	ldrb	r1, [r7, #11]
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	f7f7 ff4b 	bl	800566e <HAL_PCD_EP_Receive>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d7dc:	7dbb      	ldrb	r3, [r7, #22]
 800d7de:	2b03      	cmp	r3, #3
 800d7e0:	d816      	bhi.n	800d810 <USBD_LL_PrepareReceive+0x60>
 800d7e2:	a201      	add	r2, pc, #4	; (adr r2, 800d7e8 <USBD_LL_PrepareReceive+0x38>)
 800d7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e8:	0800d7f9 	.word	0x0800d7f9
 800d7ec:	0800d7ff 	.word	0x0800d7ff
 800d7f0:	0800d805 	.word	0x0800d805
 800d7f4:	0800d80b 	.word	0x0800d80b
    case HAL_OK :
      usb_status = USBD_OK;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	75fb      	strb	r3, [r7, #23]
    break;
 800d7fc:	e00b      	b.n	800d816 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d7fe:	2303      	movs	r3, #3
 800d800:	75fb      	strb	r3, [r7, #23]
    break;
 800d802:	e008      	b.n	800d816 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d804:	2301      	movs	r3, #1
 800d806:	75fb      	strb	r3, [r7, #23]
    break;
 800d808:	e005      	b.n	800d816 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d80a:	2303      	movs	r3, #3
 800d80c:	75fb      	strb	r3, [r7, #23]
    break;
 800d80e:	e002      	b.n	800d816 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d810:	2303      	movs	r3, #3
 800d812:	75fb      	strb	r3, [r7, #23]
    break;
 800d814:	bf00      	nop
  }
  return usb_status;
 800d816:	7dfb      	ldrb	r3, [r7, #23]
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3718      	adds	r7, #24
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	460b      	mov	r3, r1
 800d82a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d832:	78fa      	ldrb	r2, [r7, #3]
 800d834:	4611      	mov	r1, r2
 800d836:	4618      	mov	r0, r3
 800d838:	f7f7 ff57 	bl	80056ea <HAL_PCD_EP_GetRxCount>
 800d83c:	4603      	mov	r3, r0
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3708      	adds	r7, #8
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
	...

0800d848 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b082      	sub	sp, #8
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	460b      	mov	r3, r1
 800d852:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d854:	78fb      	ldrb	r3, [r7, #3]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d002      	beq.n	800d860 <HAL_PCDEx_LPM_Callback+0x18>
 800d85a:	2b01      	cmp	r3, #1
 800d85c:	d013      	beq.n	800d886 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d85e:	e023      	b.n	800d8a8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	699b      	ldr	r3, [r3, #24]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d007      	beq.n	800d878 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d868:	f000 f83c 	bl	800d8e4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d86c:	4b10      	ldr	r3, [pc, #64]	; (800d8b0 <HAL_PCDEx_LPM_Callback+0x68>)
 800d86e:	691b      	ldr	r3, [r3, #16]
 800d870:	4a0f      	ldr	r2, [pc, #60]	; (800d8b0 <HAL_PCDEx_LPM_Callback+0x68>)
 800d872:	f023 0306 	bic.w	r3, r3, #6
 800d876:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d87e:	4618      	mov	r0, r3
 800d880:	f7fe fbf2 	bl	800c068 <USBD_LL_Resume>
    break;
 800d884:	e010      	b.n	800d8a8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7fe fbd5 	bl	800c03c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	699b      	ldr	r3, [r3, #24]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d005      	beq.n	800d8a6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d89a:	4b05      	ldr	r3, [pc, #20]	; (800d8b0 <HAL_PCDEx_LPM_Callback+0x68>)
 800d89c:	691b      	ldr	r3, [r3, #16]
 800d89e:	4a04      	ldr	r2, [pc, #16]	; (800d8b0 <HAL_PCDEx_LPM_Callback+0x68>)
 800d8a0:	f043 0306 	orr.w	r3, r3, #6
 800d8a4:	6113      	str	r3, [r2, #16]
    break;
 800d8a6:	bf00      	nop
}
 800d8a8:	bf00      	nop
 800d8aa:	3708      	adds	r7, #8
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	e000ed00 	.word	0xe000ed00

0800d8b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d8bc:	4b03      	ldr	r3, [pc, #12]	; (800d8cc <USBD_static_malloc+0x18>)
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	370c      	adds	r7, #12
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr
 800d8ca:	bf00      	nop
 800d8cc:	200014e0 	.word	0x200014e0

0800d8d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]

}
 800d8d8:	bf00      	nop
 800d8da:	370c      	adds	r7, #12
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr

0800d8e4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800d8e8:	bf00      	nop
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr
	...

0800d8f4 <__libc_init_array>:
 800d8f4:	b570      	push	{r4, r5, r6, lr}
 800d8f6:	4d0d      	ldr	r5, [pc, #52]	; (800d92c <__libc_init_array+0x38>)
 800d8f8:	4c0d      	ldr	r4, [pc, #52]	; (800d930 <__libc_init_array+0x3c>)
 800d8fa:	1b64      	subs	r4, r4, r5
 800d8fc:	10a4      	asrs	r4, r4, #2
 800d8fe:	2600      	movs	r6, #0
 800d900:	42a6      	cmp	r6, r4
 800d902:	d109      	bne.n	800d918 <__libc_init_array+0x24>
 800d904:	4d0b      	ldr	r5, [pc, #44]	; (800d934 <__libc_init_array+0x40>)
 800d906:	4c0c      	ldr	r4, [pc, #48]	; (800d938 <__libc_init_array+0x44>)
 800d908:	f000 f820 	bl	800d94c <_init>
 800d90c:	1b64      	subs	r4, r4, r5
 800d90e:	10a4      	asrs	r4, r4, #2
 800d910:	2600      	movs	r6, #0
 800d912:	42a6      	cmp	r6, r4
 800d914:	d105      	bne.n	800d922 <__libc_init_array+0x2e>
 800d916:	bd70      	pop	{r4, r5, r6, pc}
 800d918:	f855 3b04 	ldr.w	r3, [r5], #4
 800d91c:	4798      	blx	r3
 800d91e:	3601      	adds	r6, #1
 800d920:	e7ee      	b.n	800d900 <__libc_init_array+0xc>
 800d922:	f855 3b04 	ldr.w	r3, [r5], #4
 800d926:	4798      	blx	r3
 800d928:	3601      	adds	r6, #1
 800d92a:	e7f2      	b.n	800d912 <__libc_init_array+0x1e>
 800d92c:	0800da10 	.word	0x0800da10
 800d930:	0800da10 	.word	0x0800da10
 800d934:	0800da10 	.word	0x0800da10
 800d938:	0800da18 	.word	0x0800da18

0800d93c <memset>:
 800d93c:	4402      	add	r2, r0
 800d93e:	4603      	mov	r3, r0
 800d940:	4293      	cmp	r3, r2
 800d942:	d100      	bne.n	800d946 <memset+0xa>
 800d944:	4770      	bx	lr
 800d946:	f803 1b01 	strb.w	r1, [r3], #1
 800d94a:	e7f9      	b.n	800d940 <memset+0x4>

0800d94c <_init>:
 800d94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d94e:	bf00      	nop
 800d950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d952:	bc08      	pop	{r3}
 800d954:	469e      	mov	lr, r3
 800d956:	4770      	bx	lr

0800d958 <_fini>:
 800d958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d95a:	bf00      	nop
 800d95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d95e:	bc08      	pop	{r3}
 800d960:	469e      	mov	lr, r3
 800d962:	4770      	bx	lr
