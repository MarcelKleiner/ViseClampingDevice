
Cobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb04  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800ec90  0800ec90  0001ec90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed7c  0800ed7c  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed7c  0800ed7c  0001ed7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed84  0800ed84  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ed84  0800ed84  0001ed84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed8c  0800ed8c  0001ed8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800ed90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fb8  20000208  0800ef98  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200011c0  0800ef98  000211c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d04a  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000071ce  00000000  00000000  0004d282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002218  00000000  00000000  00054450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ea0  00000000  00000000  00056668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000300ed  00000000  00000000  00058508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e23d  00000000  00000000  000885f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f401a  00000000  00000000  000b6832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001aa84c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f38  00000000  00000000  001aa89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000208 	.word	0x20000208
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800ec78 	.word	0x0800ec78

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000020c 	.word	0x2000020c
 80001c8:	0800ec78 	.word	0x0800ec78

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <_ZN4IComC1Ev>:
 */

#ifndef SRC_COM_ICOM_H_
#define SRC_COM_ICOM_H_

class ICom{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <_ZN4IComC1Ev+0x1c>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	0800ece8 	.word	0x0800ece8

080004f0 <_ZN6USBComC1EP11DriveStatusP13DriveSettingsP12DriveCommand>:
class USBCom :  public ICom, public BaseCOM
{

	public:

		USBCom(DriveStatus *driveStatus, DriveSettings *driveSettings,
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]
				DriveCommand *driveCommand) :
				BaseCOM(driveStatus, driveSettings, driveCommand)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff ffe5 	bl	80004d0 <_ZN4IComC1Ev>
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	1d18      	adds	r0, r3, #4
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	68b9      	ldr	r1, [r7, #8]
 8000510:	f000 fa38 	bl	8000984 <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <_ZN6USBComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x34>)
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	601a      	str	r2, [r3, #0]
		{
		}
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	4618      	mov	r0, r3
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	0800ed18 	.word	0x0800ed18

08000528 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa>:


class RFM95Com :  public ICom, public BaseCOM
{
	public:
		RFM95Com(DriveStatus *driveStatus, DriveSettings *driveSettings,
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
 8000534:	603b      	str	r3, [r7, #0]
				DriveCommand *driveCommand, RFM95_LoRa *rfm95) :
				BaseCOM(driveStatus, driveSettings, driveCommand)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ffc9 	bl	80004d0 <_ZN4IComC1Ev>
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	1d18      	adds	r0, r3, #4
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	68b9      	ldr	r1, [r7, #8]
 8000548:	f000 fa1c 	bl	8000984 <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 800054c:	4a0c      	ldr	r2, [pc, #48]	; (8000580 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa+0x58>)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	3328      	adds	r3, #40	; 0x28
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	f8c3 2003 	str.w	r2, [r3, #3]
		{
			this->rfm95 = rfm95;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	69ba      	ldr	r2, [r7, #24]
 8000562:	619a      	str	r2, [r3, #24]
			this->driveCommand = driveCommand;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	683a      	ldr	r2, [r7, #0]
 8000568:	625a      	str	r2, [r3, #36]	; 0x24
			this->driveStatus = driveStatus;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	68ba      	ldr	r2, [r7, #8]
 800056e:	621a      	str	r2, [r3, #32]
			this->driveSettings = driveSettings;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	61da      	str	r2, [r3, #28]
		}
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	4618      	mov	r0, r3
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	0800ed08 	.word	0x0800ed08

08000584 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand>:
#include "../IO/DO.h"

class IOCom: public ICom, public BaseCOM
{
	public:
		IOCom(DriveStatus *driveStatus, DriveSettings *driveSettings,
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af02      	add	r7, sp, #8
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	603b      	str	r3, [r7, #0]
				DriveCommand *driveCommand) :
				BaseCOM(driveStatus, driveSettings, driveCommand)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff ff9b 	bl	80004d0 <_ZN4IComC1Ev>
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	1d18      	adds	r0, r3, #4
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	68b9      	ldr	r1, [r7, #8]
 80005a4:	f000 f9ee 	bl	8000984 <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 80005a8:	4a39      	ldr	r2, [pc, #228]	; (8000690 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x10c>)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f103 0018 	add.w	r0, r3, #24
 80005b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005c2:	4934      	ldr	r1, [pc, #208]	; (8000694 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x110>)
 80005c4:	f001 fcd4 	bl	8001f70 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80005ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	4b30      	ldr	r3, [pc, #192]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	492f      	ldr	r1, [pc, #188]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 80005da:	f001 fcc9 	bl	8001f70 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80005e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x110>)
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	4929      	ldr	r1, [pc, #164]	; (8000694 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x110>)
 80005f0:	f001 fcbe 	bl	8001f70 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f103 0048 	add.w	r0, r3, #72	; 0x48
 80005fa:	2301      	movs	r3, #1
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	4b26      	ldr	r3, [pc, #152]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 8000600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000604:	4924      	ldr	r1, [pc, #144]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 8000606:	f001 fcb3 	bl	8001f70 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8000610:	2340      	movs	r3, #64	; 0x40
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x110>)
 8000616:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800061a:	491f      	ldr	r1, [pc, #124]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 800061c:	f001 fca8 	bl	8001f70 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8000626:	2302      	movs	r3, #2
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 800062c:	2210      	movs	r2, #16
 800062e:	4919      	ldr	r1, [pc, #100]	; (8000694 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x110>)
 8000630:	f001 fc9e 	bl	8001f70 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800063a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 8000642:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000646:	4914      	ldr	r1, [pc, #80]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 8000648:	f001 fc92 	bl	8001f70 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8000652:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x110>)
 800065a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800065e:	490d      	ldr	r1, [pc, #52]	; (8000694 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x110>)
 8000660:	f001 fc86 	bl	8001f70 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	2200      	movs	r2, #0
 8000670:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2200      	movs	r2, #0
 8000678:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
		{
			this->driveStatus = driveStatus;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		}
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4618      	mov	r0, r3
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	0800ecf8 	.word	0x0800ecf8
 8000694:	48000800 	.word	0x48000800
 8000698:	48000400 	.word	0x48000400

0800069c <_ZN11TaskHandlerC1Ev>:


#include "stdint.h"


class TaskHandler{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2200      	movs	r2, #0
 80006ae:	705a      	strb	r2, [r3, #1]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	709a      	strb	r2, [r3, #2]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2200      	movs	r2, #0
 80006ba:	70da      	strb	r2, [r3, #3]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2200      	movs	r2, #0
 80006c0:	711a      	strb	r2, [r3, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2200      	movs	r2, #0
 80006c6:	715a      	strb	r2, [r3, #5]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2201      	movs	r2, #1
 80006cc:	719a      	strb	r2, [r3, #6]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2201      	movs	r2, #1
 80006d2:	71da      	strb	r2, [r3, #7]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2201      	movs	r2, #1
 80006d8:	721a      	strb	r2, [r3, #8]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2201      	movs	r2, #1
 80006de:	725a      	strb	r2, [r3, #9]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2201      	movs	r2, #1
 80006e4:	729a      	strb	r2, [r3, #10]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2201      	movs	r2, #1
 80006ea:	72da      	strb	r2, [r3, #11]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <_ZN13DriveSettingsC1Ev>:
#define SRC_SETTINGS_DRIVESETTINGS_H_

#include "stdint.h"
#include "main.h"

class DriveSettings{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	221f      	movs	r2, #31
 8000706:	701a      	strb	r2, [r3, #0]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2200      	movs	r2, #0
 800070c:	805a      	strh	r2, [r3, #2]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	809a      	strh	r2, [r3, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	80da      	strh	r2, [r3, #6]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	811a      	strh	r2, [r3, #8]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000726:	815a      	strh	r2, [r3, #10]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2214      	movs	r2, #20
 800072c:	819a      	strh	r2, [r3, #12]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2264      	movs	r2, #100	; 0x64
 8000732:	81da      	strh	r2, [r3, #14]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f243 62b0 	movw	r2, #14000	; 0x36b0
 800073a:	821a      	strh	r2, [r3, #16]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000742:	825a      	strh	r2, [r3, #18]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2232      	movs	r2, #50	; 0x32
 8000748:	829a      	strh	r2, [r3, #20]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2264      	movs	r2, #100	; 0x64
 800074e:	82da      	strh	r2, [r3, #22]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000756:	831a      	strh	r2, [r3, #24]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2200      	movs	r2, #0
 800075c:	769a      	strb	r2, [r3, #26]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2200      	movs	r2, #0
 8000762:	839a      	strh	r2, [r3, #28]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4618      	mov	r0, r3
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <_ZN7AppMainC1Ev>:
#include "AppMain.h"
#include "../Tools/Delay.h"

extern TIM_HandleTypeDef htim7;

AppMain::AppMain()
 8000772:	b590      	push	{r4, r7, lr}
 8000774:	b085      	sub	sp, #20
 8000776:	af02      	add	r7, sp, #8
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4618      	mov	r0, r3
 800077e:	f001 fc5b 	bl	8002038 <_ZN10RFM95_LoRaC1Ev>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	3320      	adds	r3, #32
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	819a      	strh	r2, [r3, #12]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3320      	adds	r3, #32
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff81 	bl	800069c <_ZN11TaskHandlerC1Ev>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80007a0:	2301      	movs	r3, #1
 80007a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007a6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80007aa:	f001 fbfc 	bl	8001fa6 <_ZN3LEDC1EP12GPIO_TypeDeftb>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80007b4:	2301      	movs	r3, #1
 80007b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ba:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80007be:	f001 fbf2 	bl	8001fa6 <_ZN3LEDC1EP12GPIO_TypeDeftb>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3340      	adds	r3, #64	; 0x40
 80007c6:	221e      	movs	r2, #30
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f00e f956 	bl	800ea7c <memset>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3340      	adds	r3, #64	; 0x40
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff90 	bl	80006fa <_ZN13DriveSettingsC1Ev>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	335e      	adds	r3, #94	; 0x5e
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fbbc 	bl	8002f5c <_ZN11DriveStatusC1Ev>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3367      	adds	r3, #103	; 0x67
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 fa74 	bl	8002cd6 <_ZN12DriveCommandC1Ev>
 80007ee:	2030      	movs	r0, #48	; 0x30
 80007f0:	f00e f8db 	bl	800e9aa <_Znwj>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461c      	mov	r4, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f103 0067 	add.w	r0, r3, #103	; 0x67
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	4603      	mov	r3, r0
 8000810:	4620      	mov	r0, r4
 8000812:	f7ff fe89 	bl	8000528 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	675c      	str	r4, [r3, #116]	; 0x74
 800081a:	2018      	movs	r0, #24
 800081c:	f00e f8c5 	bl	800e9aa <_Znwj>
 8000820:	4603      	mov	r3, r0
 8000822:	461c      	mov	r4, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3367      	adds	r3, #103	; 0x67
 8000834:	4620      	mov	r0, r4
 8000836:	f7ff fe5b 	bl	80004f0 <_ZN6USBComC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	679c      	str	r4, [r3, #120]	; 0x78
 800083e:	20a4      	movs	r0, #164	; 0xa4
 8000840:	f00e f8b3 	bl	800e9aa <_Znwj>
 8000844:	4603      	mov	r3, r0
 8000846:	461c      	mov	r4, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3367      	adds	r3, #103	; 0x67
 8000858:	4620      	mov	r0, r4
 800085a:	f7ff fe93 	bl	8000584 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	67dc      	str	r4, [r3, #124]	; 0x7c
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	335e      	adds	r3, #94	; 0x5e
 8000872:	461a      	mov	r2, r3
 8000874:	f001 f992 	bl	8001b9c <_ZN5FlashC1EP13DriveSettingsP11DriveStatus>
{

}
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bd90      	pop	{r4, r7, pc}
	...

08000884 <_ZN7AppMain7StartupEv>:

void AppMain::Startup()
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	Storage.ReadFlash();
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3380      	adds	r3, #128	; 0x80
 8000890:	4618      	mov	r0, r3
 8000892:	f001 f996 	bl	8001bc2 <_ZN5Flash9ReadFlashEv>

	HAL_TIM_Base_Start_IT(&htim7);
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <_ZN7AppMain7StartupEv+0x48>)
 8000898:	f009 f94c 	bl	8009b34 <HAL_TIM_Base_Start_IT>

	LED_Green.OFF();
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3330      	adds	r3, #48	; 0x30
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 fb9b 	bl	8001fdc <_ZN3LED3OFFEv>
	LED_Red.OFF();
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3338      	adds	r3, #56	; 0x38
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 fb96 	bl	8001fdc <_ZN3LED3OFFEv>

	if (rfm95.InitRFM())
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 ffaa 	bl	800280c <_ZN10RFM95_LoRa7InitRFMEv>
	{

	}

	Delay::DWT_Init();
 80008b8:	f002 fd7c 	bl	80033b4 <_ZN5Delay8DWT_InitEv>

	Main();
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f000 f807 	bl	80008d0 <_ZN7AppMain4MainEv>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000574 	.word	0x20000574

080008d0 <_ZN7AppMain4MainEv>:

void AppMain::Main()
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]

	while (1)
	{

		if (taskStatus.isErrorTask())
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3320      	adds	r3, #32
 80008dc:	4618      	mov	r0, r3
 80008de:	f002 fd17 	bl	8003310 <_ZN11TaskHandler11isErrorTaskEv>
		{

		}

		if (taskStatus.isLEDUpdateTask())
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3320      	adds	r3, #32
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 fd48 	bl	800337c <_ZN11TaskHandler15isLEDUpdateTaskEv>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d004      	beq.n	80008fc <_ZN7AppMain4MainEv+0x2c>
		{
			LED_Green.Toggle();
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3330      	adds	r3, #48	; 0x30
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 fb8d 	bl	8002016 <_ZN3LED6ToggleEv>
		}

		if (taskStatus.isComTask())
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3320      	adds	r3, #32
 8000900:	4618      	mov	r0, r3
 8000902:	f002 fccf 	bl	80032a4 <_ZN11TaskHandler9isComTaskEv>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d012      	beq.n	8000932 <_ZN7AppMain4MainEv+0x62>
		{
			rfm95COM->Transmitt();
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	4798      	blx	r3
			rfm95COM->Receive();
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	3304      	adds	r3, #4
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2200      	movs	r2, #0
 800092e:	2100      	movs	r1, #0
 8000930:	4798      	blx	r3
		}

		if (taskStatus.isIoUpdateTask())
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3320      	adds	r3, #32
 8000936:	4618      	mov	r0, r3
 8000938:	f002 fd05 	bl	8003346 <_ZN11TaskHandler14isIoUpdateTaskEv>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d012      	beq.n	8000968 <_ZN7AppMain4MainEv+0x98>
		{
			ioCOM->Receive();
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3304      	adds	r3, #4
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	4798      	blx	r3
			ioCOM->Transmitt();
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	4798      	blx	r3
		}

		if (taskStatus.isSaveTask())
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3320      	adds	r3, #32
 800096c:	4618      	mov	r0, r3
 800096e:	f002 fcb4 	bl	80032da <_ZN11TaskHandler10isSaveTaskEv>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d0af      	beq.n	80008d8 <_ZN7AppMain4MainEv+0x8>
		{
			Storage.SaveFlash();
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3380      	adds	r3, #128	; 0x80
 800097c:	4618      	mov	r0, r3
 800097e:	f001 f9b5 	bl	8001cec <_ZN5Flash9SaveFlashEv>
		if (taskStatus.isErrorTask())
 8000982:	e7a9      	b.n	80008d8 <_ZN7AppMain4MainEv+0x8>

08000984 <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>:
#include "BaseCOM.h"
#include "../AppMain/Defines.h"
#include "../Tools/CRC8.h"
#include "../Tools/TypeConverter.h"

BaseCOM::BaseCOM(DriveStatus *driveStatus, DriveSettings *driveSettings,
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
		DriveCommand *driveCommand)
{
	this->driveSettings = driveSettings;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	605a      	str	r2, [r3, #4]
	this->driveCommand = driveCommand;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	609a      	str	r2, [r3, #8]
}
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4618      	mov	r0, r3
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <_ZN7BaseCOM11GetSettingsEh>:


uint8_t* BaseCOM::GetSettings(uint8_t addr)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	460b      	mov	r3, r1
 80009be:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	221f      	movs	r2, #31
 80009c4:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 f924 	bl	8002c18 <_ZNK13DriveSettings16getDeviceAddressEv>
 80009d0:	4603      	mov	r3, r0
 80009d2:	461a      	mov	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_COMMAND;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2212      	movs	r2, #18
 80009dc:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	78fa      	ldrb	r2, [r7, #3]
 80009e2:	73da      	strb	r2, [r3, #15]

	switch (addr)
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	3b10      	subs	r3, #16
 80009e8:	2b10      	cmp	r3, #16
 80009ea:	f200 80d3 	bhi.w	8000b94 <_ZN7BaseCOM11GetSettingsEh+0x1e0>
 80009ee:	a201      	add	r2, pc, #4	; (adr r2, 80009f4 <_ZN7BaseCOM11GetSettingsEh+0x40>)
 80009f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f4:	08000a39 	.word	0x08000a39
 80009f8:	08000a57 	.word	0x08000a57
 80009fc:	08000a75 	.word	0x08000a75
 8000a00:	08000a93 	.word	0x08000a93
 8000a04:	08000ab1 	.word	0x08000ab1
 8000a08:	08000acf 	.word	0x08000acf
 8000a0c:	08000aeb 	.word	0x08000aeb
 8000a10:	08000b09 	.word	0x08000b09
 8000a14:	08000b27 	.word	0x08000b27
 8000a18:	08000b45 	.word	0x08000b45
 8000a1c:	08000b63 	.word	0x08000b63
 8000a20:	08000b95 	.word	0x08000b95
 8000a24:	08000b95 	.word	0x08000b95
 8000a28:	08000b95 	.word	0x08000b95
 8000a2c:	08000b95 	.word	0x08000b95
 8000a30:	08000b95 	.word	0x08000b95
 8000a34:	08000b81 	.word	0x08000b81
	{
		case TEACH_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachTroque(), 4);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 f84c 	bl	8002ae0 <_ZNK13DriveSettings14getTeachTroqueEv>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2204      	movs	r2, #4
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4620      	mov	r0, r4
 8000a50:	f002 fcca 	bl	80033e8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000a54:	e0a2      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case TEACH_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachSpeed(), 4);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a60:	4618      	mov	r0, r3
 8000a62:	f002 f816 	bl	8002a92 <_ZNK13DriveSettings13getTeachSpeedEv>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2204      	movs	r2, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	f002 fcbb 	bl	80033e8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000a72:	e093      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case CLAMPING_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingTorque(), 4);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 ff1d 	bl	80028be <_ZNK13DriveSettings17getClampingTorqueEv>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2204      	movs	r2, #4
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	f002 fcac 	bl	80033e8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000a90:	e084      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case CLAMPING_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingSpeed(), 4);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 fee7 	bl	8002870 <_ZNK13DriveSettings16getClampingSpeedEv>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4620      	mov	r0, r4
 8000aaa:	f002 fc9d 	bl	80033e8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000aae:	e075      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case SELF_SHUTDOWN_DELAY_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getSelfShutdownDelay(), 4);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 ffc2 	bl	8002a44 <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2204      	movs	r2, #4
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4620      	mov	r0, r4
 8000ac8:	f002 fc8e 	bl	80033e8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000acc:	e066      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case IN_POS_DIFF_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getInPosDiff(), 4);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 ff17 	bl	800290c <_ZNK13DriveSettings12getInPosDiffEv>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	f002 fc7f 	bl	80033e8 <_ZN13TypeConverter12uint16ToByteEPhth>
		case OPENING_DISTANCE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOpeningDistance(), 4);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000af4:	4618      	mov	r0, r3
 8000af6:	f001 ff30 	bl	800295a <_ZNK13DriveSettings18getOpeningDistanceEv>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2204      	movs	r2, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4620      	mov	r0, r4
 8000b02:	f002 fc71 	bl	80033e8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b06:	e049      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case UNDERVOLTAGE_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageWarning(),4);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 f832 	bl	8002b7c <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4620      	mov	r0, r4
 8000b20:	f002 fc62 	bl	80033e8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b24:	e03a      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case UNDERVOLTAGE_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageError(), 4);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b30:	4618      	mov	r0, r3
 8000b32:	f001 fffc 	bl	8002b2e <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2204      	movs	r2, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	f002 fc53 	bl	80033e8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b42:	e02b      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case OVER_CURRENT_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentWarning(), 4);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 ff51 	bl	80029f6 <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2204      	movs	r2, #4
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	f002 fc44 	bl	80033e8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b60:	e01c      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case OVER_CURRENT_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentError(), 4);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 f82c 	bl	8002bca <_ZNK13DriveSettings19getOverCurrentErrorEv>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2204      	movs	r2, #4
 8000b76:	4619      	mov	r1, r3
 8000b78:	4620      	mov	r0, r4
 8000b7a:	f002 fc35 	bl	80033e8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b7e:	e00d      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case DEVICE_ADDRESS_ADDR:
			data2send[4] = driveSettings->getDeviceAddress();
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f002 f847 	bl	8002c18 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	741a      	strb	r2, [r3, #16]
			break;
 8000b92:	e003      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		default:
			data2send[1] = 0x1D;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	221d      	movs	r2, #29
 8000b98:	735a      	strb	r2, [r3, #13]
			break;
 8000b9a:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	330c      	adds	r3, #12
 8000ba0:	2206      	movs	r2, #6
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 fbcd 	bl	8001344 <_ZN7BaseCOM4CRC8EPhh>
 8000baa:	4603      	mov	r3, r0
 8000bac:	461a      	mov	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	749a      	strb	r2, [r3, #18]
	return data2send;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	330c      	adds	r3, #12
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd90      	pop	{r4, r7, pc}
 8000bbe:	bf00      	nop

08000bc0 <_ZN7BaseCOM9GetStatusEh>:


uint8_t* BaseCOM::GetStatus(uint8_t addr)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	221f      	movs	r2, #31
 8000bd0:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 f81e 	bl	8002c18 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461a      	mov	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_STATUS;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2213      	movs	r2, #19
 8000be8:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	78fa      	ldrb	r2, [r7, #3]
 8000bee:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000bf0:	78fb      	ldrb	r3, [r7, #3]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	2b07      	cmp	r3, #7
 8000bf6:	d863      	bhi.n	8000cc0 <_ZN7BaseCOM9GetStatusEh+0x100>
 8000bf8:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <_ZN7BaseCOM9GetStatusEh+0x40>)
 8000bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfe:	bf00      	nop
 8000c00:	08000c21 	.word	0x08000c21
 8000c04:	08000c35 	.word	0x08000c35
 8000c08:	08000c49 	.word	0x08000c49
 8000c0c:	08000c5d 	.word	0x08000c5d
 8000c10:	08000c71 	.word	0x08000c71
 8000c14:	08000c85 	.word	0x08000c85
 8000c18:	08000c99 	.word	0x08000c99
 8000c1c:	08000cad 	.word	0x08000cad
	{
		case CLOSE_ADDR:
			data2send[4] = driveStatus->isClose();
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f002 f9a7 	bl	8002f78 <_ZN11DriveStatus7isCloseEv>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	741a      	strb	r2, [r3, #16]
			break;
 8000c32:	e049      	b.n	8000cc8 <_ZN7BaseCOM9GetStatusEh+0x108>
		case OPEN_ADDR:
			data2send[4] = driveStatus->isOpen();
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f002 f9c0 	bl	8002fbe <_ZN11DriveStatus6isOpenEv>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	461a      	mov	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	741a      	strb	r2, [r3, #16]
			break;
 8000c46:	e03f      	b.n	8000cc8 <_ZN7BaseCOM9GetStatusEh+0x108>
		case TEACH_ADDR:
			data2send[4] = driveStatus->isTeach();
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f002 fa6f 	bl	8003130 <_ZN11DriveStatus7isTeachEv>
 8000c52:	4603      	mov	r3, r0
 8000c54:	461a      	mov	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	741a      	strb	r2, [r3, #16]
			break;
 8000c5a:	e035      	b.n	8000cc8 <_ZN7BaseCOM9GetStatusEh+0x108>
		case RESET_ADDR:
			data2send[4] = driveStatus->isReset();
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f002 fa1b 	bl	800309c <_ZN11DriveStatus7isResetEv>
 8000c66:	4603      	mov	r3, r0
 8000c68:	461a      	mov	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	741a      	strb	r2, [r3, #16]
			break;
 8000c6e:	e02b      	b.n	8000cc8 <_ZN7BaseCOM9GetStatusEh+0x108>
		case ENABLE_ADDR:
			data2send[4] = driveStatus->isEnable();
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f002 f9ec 	bl	8003052 <_ZN11DriveStatus8isEnableEv>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	741a      	strb	r2, [r3, #16]
			break;
 8000c82:	e021      	b.n	8000cc8 <_ZN7BaseCOM9GetStatusEh+0x108>
		case DISABLE_ADDR:
			data2send[4] = driveStatus->isDisable();
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 f9bd 	bl	8003008 <_ZN11DriveStatus9isDisableEv>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	461a      	mov	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	741a      	strb	r2, [r3, #16]
			break;
 8000c96:	e017      	b.n	8000cc8 <_ZN7BaseCOM9GetStatusEh+0x108>
		case STOP_ADDR:
			data2send[4] = driveStatus->isStop();
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f002 fa22 	bl	80030e6 <_ZN11DriveStatus6isStopEv>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	741a      	strb	r2, [r3, #16]
			break;
 8000caa:	e00d      	b.n	8000cc8 <_ZN7BaseCOM9GetStatusEh+0x108>
		case ERROR_ADDR:
			data2send[4] = driveStatus->getError();
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f002 fa62 	bl	800317a <_ZN11DriveStatus8getErrorEv>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	461a      	mov	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	741a      	strb	r2, [r3, #16]
			break;
 8000cbe:	e003      	b.n	8000cc8 <_ZN7BaseCOM9GetStatusEh+0x108>
		default:
			data2send[0] = 0x1D;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	221d      	movs	r2, #29
 8000cc4:	731a      	strb	r2, [r3, #12]
			break;
 8000cc6:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	330c      	adds	r3, #12
 8000ccc:	2206      	movs	r2, #6
 8000cce:	4619      	mov	r1, r3
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f000 fb37 	bl	8001344 <_ZN7BaseCOM4CRC8EPhh>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	461a      	mov	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	749a      	strb	r2, [r3, #18]

	return data2send;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	330c      	adds	r3, #12
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop

08000cec <_ZN7BaseCOM10GetCommandEh>:


uint8_t* BaseCOM::GetCommand(uint8_t addr)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	70fb      	strb	r3, [r7, #3]
	data2send[0] = 0x1F;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	221f      	movs	r2, #31
 8000cfc:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 ff88 	bl	8002c18 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_COMMAND;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2212      	movs	r2, #18
 8000d14:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	78fa      	ldrb	r2, [r7, #3]
 8000d1a:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	2b06      	cmp	r3, #6
 8000d22:	d857      	bhi.n	8000dd4 <_ZN7BaseCOM10GetCommandEh+0xe8>
 8000d24:	a201      	add	r2, pc, #4	; (adr r2, 8000d2c <_ZN7BaseCOM10GetCommandEh+0x40>)
 8000d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2a:	bf00      	nop
 8000d2c:	08000d49 	.word	0x08000d49
 8000d30:	08000d5d 	.word	0x08000d5d
 8000d34:	08000d71 	.word	0x08000d71
 8000d38:	08000d85 	.word	0x08000d85
 8000d3c:	08000d99 	.word	0x08000d99
 8000d40:	08000dad 	.word	0x08000dad
 8000d44:	08000dc1 	.word	0x08000dc1
	{
		case CLOSE_ADDR:
			data2send[4] = driveCommand->isClose();
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f001 ffeb 	bl	8002d28 <_ZN12DriveCommand7isCloseEv>
 8000d52:	4603      	mov	r3, r0
 8000d54:	461a      	mov	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	741a      	strb	r2, [r3, #16]
			break;
 8000d5a:	e03f      	b.n	8000ddc <_ZN7BaseCOM10GetCommandEh+0xf0>
		case OPEN_ADDR:
			data2send[4] = driveCommand->isOpen();
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f002 f801 	bl	8002d68 <_ZN12DriveCommand6isOpenEv>
 8000d66:	4603      	mov	r3, r0
 8000d68:	461a      	mov	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	741a      	strb	r2, [r3, #16]
			break;
 8000d6e:	e035      	b.n	8000ddc <_ZN7BaseCOM10GetCommandEh+0xf0>
		case TEACH_ADDR:
			data2send[4] = driveCommand->isTeach();
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f002 f897 	bl	8002ea8 <_ZN12DriveCommand7isTeachEv>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	741a      	strb	r2, [r3, #16]
			break;
 8000d82:	e02b      	b.n	8000ddc <_ZN7BaseCOM10GetCommandEh+0xf0>
		case RESET_ADDR:
			data2send[4] = driveCommand->isReset();
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f002 f84d 	bl	8002e28 <_ZN12DriveCommand7isResetEv>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	741a      	strb	r2, [r3, #16]
			break;
 8000d96:	e021      	b.n	8000ddc <_ZN7BaseCOM10GetCommandEh+0xf0>
		case ENABLE_ADDR:
			data2send[4] = driveCommand->isEnable();
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 f823 	bl	8002de8 <_ZN12DriveCommand8isEnableEv>
 8000da2:	4603      	mov	r3, r0
 8000da4:	461a      	mov	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	741a      	strb	r2, [r3, #16]
			break;
 8000daa:	e017      	b.n	8000ddc <_ZN7BaseCOM10GetCommandEh+0xf0>
		case DISABLE_ADDR:
			data2send[4] = driveCommand->isDisable();
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f001 fff9 	bl	8002da8 <_ZN12DriveCommand9isDisableEv>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	741a      	strb	r2, [r3, #16]
			break;
 8000dbe:	e00d      	b.n	8000ddc <_ZN7BaseCOM10GetCommandEh+0xf0>
		case STOP_ADDR:
			data2send[4] = driveCommand->isStop();
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f002 f84f 	bl	8002e68 <_ZN12DriveCommand6isStopEv>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	741a      	strb	r2, [r3, #16]
			break;
 8000dd2:	e003      	b.n	8000ddc <_ZN7BaseCOM10GetCommandEh+0xf0>
		default:
			data2send[0] = 0x1D;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	221d      	movs	r2, #29
 8000dd8:	731a      	strb	r2, [r3, #12]
			break;
 8000dda:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	330c      	adds	r3, #12
 8000de0:	2206      	movs	r2, #6
 8000de2:	4619      	mov	r1, r3
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f000 faad 	bl	8001344 <_ZN7BaseCOM4CRC8EPhh>
 8000dea:	4603      	mov	r3, r0
 8000dec:	461a      	mov	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	749a      	strb	r2, [r3, #18]

	return data2send;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	330c      	adds	r3, #12
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop

08000e00 <_ZN7BaseCOM11SetSettingsEPh>:



void BaseCOM::SetSettings(uint8_t *data)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	uint16_t value = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	81fb      	strh	r3, [r7, #14]
	switch (data[3])
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	3303      	adds	r3, #3
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	3b10      	subs	r3, #16
 8000e16:	2b45      	cmp	r3, #69	; 0x45
 8000e18:	f200 817b 	bhi.w	8001112 <_ZN7BaseCOM11SetSettingsEPh+0x312>
 8000e1c:	a201      	add	r2, pc, #4	; (adr r2, 8000e24 <_ZN7BaseCOM11SetSettingsEPh+0x24>)
 8000e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e22:	bf00      	nop
 8000e24:	08000f3d 	.word	0x08000f3d
 8000e28:	08000f65 	.word	0x08000f65
 8000e2c:	08000f8d 	.word	0x08000f8d
 8000e30:	08000fb5 	.word	0x08000fb5
 8000e34:	0800107d 	.word	0x0800107d
 8000e38:	08000fdd 	.word	0x08000fdd
 8000e3c:	08001005 	.word	0x08001005
 8000e40:	080010a5 	.word	0x080010a5
 8000e44:	080010cd 	.word	0x080010cd
 8000e48:	0800102d 	.word	0x0800102d
 8000e4c:	08001055 	.word	0x08001055
 8000e50:	08001113 	.word	0x08001113
 8000e54:	08001113 	.word	0x08001113
 8000e58:	08001113 	.word	0x08001113
 8000e5c:	08001113 	.word	0x08001113
 8000e60:	08001113 	.word	0x08001113
 8000e64:	08001113 	.word	0x08001113
 8000e68:	08001113 	.word	0x08001113
 8000e6c:	08001113 	.word	0x08001113
 8000e70:	08001113 	.word	0x08001113
 8000e74:	08001113 	.word	0x08001113
 8000e78:	08001113 	.word	0x08001113
 8000e7c:	08001113 	.word	0x08001113
 8000e80:	08001113 	.word	0x08001113
 8000e84:	08001113 	.word	0x08001113
 8000e88:	08001113 	.word	0x08001113
 8000e8c:	08001113 	.word	0x08001113
 8000e90:	08001113 	.word	0x08001113
 8000e94:	08001113 	.word	0x08001113
 8000e98:	08001113 	.word	0x08001113
 8000e9c:	08001113 	.word	0x08001113
 8000ea0:	08001113 	.word	0x08001113
 8000ea4:	08001113 	.word	0x08001113
 8000ea8:	08001113 	.word	0x08001113
 8000eac:	08001113 	.word	0x08001113
 8000eb0:	08001113 	.word	0x08001113
 8000eb4:	08001113 	.word	0x08001113
 8000eb8:	08001113 	.word	0x08001113
 8000ebc:	08001113 	.word	0x08001113
 8000ec0:	08001113 	.word	0x08001113
 8000ec4:	08001113 	.word	0x08001113
 8000ec8:	08001113 	.word	0x08001113
 8000ecc:	08001113 	.word	0x08001113
 8000ed0:	08001113 	.word	0x08001113
 8000ed4:	08001113 	.word	0x08001113
 8000ed8:	08001113 	.word	0x08001113
 8000edc:	08001113 	.word	0x08001113
 8000ee0:	08001113 	.word	0x08001113
 8000ee4:	08001113 	.word	0x08001113
 8000ee8:	08001113 	.word	0x08001113
 8000eec:	08001113 	.word	0x08001113
 8000ef0:	08001113 	.word	0x08001113
 8000ef4:	08001113 	.word	0x08001113
 8000ef8:	08001113 	.word	0x08001113
 8000efc:	08001113 	.word	0x08001113
 8000f00:	08001113 	.word	0x08001113
 8000f04:	08001113 	.word	0x08001113
 8000f08:	08001113 	.word	0x08001113
 8000f0c:	08001113 	.word	0x08001113
 8000f10:	08001113 	.word	0x08001113
 8000f14:	08001113 	.word	0x08001113
 8000f18:	08001113 	.word	0x08001113
 8000f1c:	08001113 	.word	0x08001113
 8000f20:	08001113 	.word	0x08001113
 8000f24:	08001113 	.word	0x08001113
 8000f28:	08001113 	.word	0x08001113
 8000f2c:	08001113 	.word	0x08001113
 8000f30:	08001113 	.word	0x08001113
 8000f34:	08001113 	.word	0x08001113
 8000f38:	080010f5 	.word	0x080010f5
	{
		case TEACH_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	3305      	adds	r3, #5
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	01db      	lsls	r3, r3, #7
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachTroque(value);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	89fa      	ldrh	r2, [r7, #14]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f001 fdcb 	bl	8002af8 <_ZN13DriveSettings14setTeachTroqueEt>
			break;
 8000f62:	e0d7      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case TEACH_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	3305      	adds	r3, #5
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	01db      	lsls	r3, r3, #7
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	3304      	adds	r3, #4
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b21b      	sxth	r3, r3
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachSpeed(value);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	89fa      	ldrh	r2, [r7, #14]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 fd90 	bl	8002aaa <_ZN13DriveSettings13setTeachSpeedEt>
			break;
 8000f8a:	e0c3      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case CLAMPING_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	3305      	adds	r3, #5
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	01db      	lsls	r3, r3, #7
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingTorque(value);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	89fa      	ldrh	r2, [r7, #14]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f001 fc92 	bl	80028d6 <_ZN13DriveSettings17setClampingTorqueEt>
			break;
 8000fb2:	e0af      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case CLAMPING_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	3305      	adds	r3, #5
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	01db      	lsls	r3, r3, #7
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingSpeed(value);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	89fa      	ldrh	r2, [r7, #14]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fc57 	bl	8002888 <_ZN13DriveSettings16setClampingSpeedEt>
			break;
 8000fda:	e09b      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case IN_POS_DIFF_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	3305      	adds	r3, #5
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	01db      	lsls	r3, r3, #7
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	81fb      	strh	r3, [r7, #14]
			driveSettings->setInPosDiff(value);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	89fa      	ldrh	r2, [r7, #14]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 fc91 	bl	8002924 <_ZN13DriveSettings12setInPosDiffEt>
			break;
 8001002:	e087      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case OPENING_DISTANCE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	3305      	adds	r3, #5
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	01db      	lsls	r3, r3, #7
 800100c:	b21a      	sxth	r2, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	3304      	adds	r3, #4
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b21b      	sxth	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b21b      	sxth	r3, r3
 800101a:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOpeningDistance(value);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	89fa      	ldrh	r2, [r7, #14]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f001 fca4 	bl	8002972 <_ZN13DriveSettings18setOpeningDistanceEt>
			break;
 800102a:	e073      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case OVER_CURRENT_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	3305      	adds	r3, #5
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	01db      	lsls	r3, r3, #7
 8001034:	b21a      	sxth	r2, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	3304      	adds	r3, #4
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21b      	sxth	r3, r3
 8001042:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentWarning(value);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	89fa      	ldrh	r2, [r7, #14]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f001 fcde 	bl	8002a0e <_ZN13DriveSettings21setOverCurrentWarningEt>
			break;
 8001052:	e05f      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case OVER_CURRENT_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	3305      	adds	r3, #5
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	01db      	lsls	r3, r3, #7
 800105c:	b21a      	sxth	r2, r3
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	3304      	adds	r3, #4
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21b      	sxth	r3, r3
 800106a:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentError(value);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	89fa      	ldrh	r2, [r7, #14]
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f001 fdb4 	bl	8002be2 <_ZN13DriveSettings19setOverCurrentErrorEt>
			break;
 800107a:	e04b      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case SELF_SHUTDOWN_DELAY_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	3305      	adds	r3, #5
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	01db      	lsls	r3, r3, #7
 8001084:	b21a      	sxth	r2, r3
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	3304      	adds	r3, #4
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21b      	sxth	r3, r3
 8001092:	81fb      	strh	r3, [r7, #14]
			driveSettings->setSelfShutdownDelay(value);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	89fa      	ldrh	r2, [r7, #14]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f001 fcdd 	bl	8002a5c <_ZN13DriveSettings20setSelfShutdownDelayEt>
			break;
 80010a2:	e037      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case UNDERVOLTAGE_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	3305      	adds	r3, #5
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	01db      	lsls	r3, r3, #7
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	3304      	adds	r3, #4
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageWarning(value);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	89fa      	ldrh	r2, [r7, #14]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 fd65 	bl	8002b94 <_ZN13DriveSettings22setUnderVoltageWarningEt>
			break;
 80010ca:	e023      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case UNDERVOLTAGE_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	3305      	adds	r3, #5
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	01db      	lsls	r3, r3, #7
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	3304      	adds	r3, #4
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageError(value);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	89fa      	ldrh	r2, [r7, #14]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fd2a 	bl	8002b46 <_ZN13DriveSettings20setUnderVoltageErrorEt>
			break;
 80010f2:	e00f      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case SAVE_SETTINGS_ADDR:
			driveSettings->setSaveSettings(data[4] != 0);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	3304      	adds	r3, #4
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	bf14      	ite	ne
 8001102:	2301      	movne	r3, #1
 8001104:	2300      	moveq	r3, #0
 8001106:	b2db      	uxtb	r3, r3
 8001108:	4619      	mov	r1, r3
 800110a:	4610      	mov	r0, r2
 800110c:	f001 fd9f 	bl	8002c4e <_ZN13DriveSettings15setSaveSettingsEb>
			break;
 8001110:	e000      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		default:
			break;
 8001112:	bf00      	nop
	}
}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <_ZN7BaseCOM9SetStatusEPh>:

void BaseCOM::SetStatus(uint8_t *data)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	switch (data[3])
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	3303      	adds	r3, #3
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	3b01      	subs	r3, #1
 800112e:	2b06      	cmp	r3, #6
 8001130:	d879      	bhi.n	8001226 <_ZN7BaseCOM9SetStatusEPh+0x10a>
 8001132:	a201      	add	r2, pc, #4	; (adr r2, 8001138 <_ZN7BaseCOM9SetStatusEPh+0x1c>)
 8001134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001138:	08001155 	.word	0x08001155
 800113c:	08001173 	.word	0x08001173
 8001140:	08001191 	.word	0x08001191
 8001144:	080011af 	.word	0x080011af
 8001148:	080011cd 	.word	0x080011cd
 800114c:	080011eb 	.word	0x080011eb
 8001150:	08001209 	.word	0x08001209
	{
		case CLOSE_ADDR:
			driveStatus->setClose(data[4] == 0x01);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	3304      	adds	r3, #4
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b01      	cmp	r3, #1
 8001160:	bf0c      	ite	eq
 8001162:	2301      	moveq	r3, #1
 8001164:	2300      	movne	r3, #0
 8001166:	b2db      	uxtb	r3, r3
 8001168:	4619      	mov	r1, r3
 800116a:	4610      	mov	r0, r2
 800116c:	f001 ff10 	bl	8002f90 <_ZN11DriveStatus8setCloseEb>
			break;
 8001170:	e05a      	b.n	8001228 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case OPEN_ADDR:
			driveStatus->setOpen(data[4] == 0x01);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	3304      	adds	r3, #4
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	bf0c      	ite	eq
 8001180:	2301      	moveq	r3, #1
 8001182:	2300      	movne	r3, #0
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4619      	mov	r1, r3
 8001188:	4610      	mov	r0, r2
 800118a:	f001 ff24 	bl	8002fd6 <_ZN11DriveStatus7setOpenEb>
			break;
 800118e:	e04b      	b.n	8001228 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case TEACH_ADDR:
			driveStatus->setTeach(data[4] == 0x01);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	3304      	adds	r3, #4
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b01      	cmp	r3, #1
 800119c:	bf0c      	ite	eq
 800119e:	2301      	moveq	r3, #1
 80011a0:	2300      	movne	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4619      	mov	r1, r3
 80011a6:	4610      	mov	r0, r2
 80011a8:	f001 ffce 	bl	8003148 <_ZN11DriveStatus8setTeachEb>
			break;
 80011ac:	e03c      	b.n	8001228 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case RESET_ADDR:
			driveStatus->setReset(data[4] == 0x01);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	3304      	adds	r3, #4
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	bf0c      	ite	eq
 80011bc:	2301      	moveq	r3, #1
 80011be:	2300      	movne	r3, #0
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	4619      	mov	r1, r3
 80011c4:	4610      	mov	r0, r2
 80011c6:	f001 ff75 	bl	80030b4 <_ZN11DriveStatus8setResetEb>
			break;
 80011ca:	e02d      	b.n	8001228 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case ENABLE_ADDR:
			driveStatus->setEnable(data[4] == 0x01);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	3304      	adds	r3, #4
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	bf0c      	ite	eq
 80011da:	2301      	moveq	r3, #1
 80011dc:	2300      	movne	r3, #0
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	4619      	mov	r1, r3
 80011e2:	4610      	mov	r0, r2
 80011e4:	f001 ff41 	bl	800306a <_ZN11DriveStatus9setEnableEb>
			break;
 80011e8:	e01e      	b.n	8001228 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case DISABLE_ADDR:
			driveStatus->setDisable(data[4] == 0x01);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	3304      	adds	r3, #4
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	bf0c      	ite	eq
 80011f8:	2301      	moveq	r3, #1
 80011fa:	2300      	movne	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	4619      	mov	r1, r3
 8001200:	4610      	mov	r0, r2
 8001202:	f001 ff0d 	bl	8003020 <_ZN11DriveStatus10setDisableEb>
			break;
 8001206:	e00f      	b.n	8001228 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case STOP_ADDR:
			driveStatus->setStop(data[4] == 0x01);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	3304      	adds	r3, #4
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b01      	cmp	r3, #1
 8001214:	bf0c      	ite	eq
 8001216:	2301      	moveq	r3, #1
 8001218:	2300      	movne	r3, #0
 800121a:	b2db      	uxtb	r3, r3
 800121c:	4619      	mov	r1, r3
 800121e:	4610      	mov	r0, r2
 8001220:	f001 ff6d 	bl	80030fe <_ZN11DriveStatus7setStopEb>
			break;
 8001224:	e000      	b.n	8001228 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		default:
			break;
 8001226:	bf00      	nop
	}
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <_ZN7BaseCOM10SetCommandEPh>:

void BaseCOM::SetCommand(uint8_t *data)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	switch (data[3])
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	3303      	adds	r3, #3
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	3b01      	subs	r3, #1
 8001242:	2b06      	cmp	r3, #6
 8001244:	d879      	bhi.n	800133a <_ZN7BaseCOM10SetCommandEPh+0x10a>
 8001246:	a201      	add	r2, pc, #4	; (adr r2, 800124c <_ZN7BaseCOM10SetCommandEPh+0x1c>)
 8001248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124c:	08001269 	.word	0x08001269
 8001250:	08001287 	.word	0x08001287
 8001254:	080012a5 	.word	0x080012a5
 8001258:	080012c3 	.word	0x080012c3
 800125c:	080012e1 	.word	0x080012e1
 8001260:	080012ff 	.word	0x080012ff
 8001264:	0800131d 	.word	0x0800131d
	{
		case CLOSE_ADDR:
			driveCommand->setClose(data[4] == 0x01);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	3304      	adds	r3, #4
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b01      	cmp	r3, #1
 8001274:	bf0c      	ite	eq
 8001276:	2301      	moveq	r3, #1
 8001278:	2300      	movne	r3, #0
 800127a:	b2db      	uxtb	r3, r3
 800127c:	4619      	mov	r1, r3
 800127e:	4610      	mov	r0, r2
 8001280:	f001 fd63 	bl	8002d4a <_ZN12DriveCommand8setCloseEb>
			break;
 8001284:	e05a      	b.n	800133c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case OPEN_ADDR:
			driveCommand->setOpen(data[4] == 0x01);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	3304      	adds	r3, #4
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b01      	cmp	r3, #1
 8001292:	bf0c      	ite	eq
 8001294:	2301      	moveq	r3, #1
 8001296:	2300      	movne	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4619      	mov	r1, r3
 800129c:	4610      	mov	r0, r2
 800129e:	f001 fd74 	bl	8002d8a <_ZN12DriveCommand7setOpenEb>
			break;
 80012a2:	e04b      	b.n	800133c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case TEACH_ADDR:
			driveCommand->setTeach(data[4] == 0x01);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	3304      	adds	r3, #4
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	bf0c      	ite	eq
 80012b2:	2301      	moveq	r3, #1
 80012b4:	2300      	movne	r3, #0
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	4619      	mov	r1, r3
 80012ba:	4610      	mov	r0, r2
 80012bc:	f001 fe05 	bl	8002eca <_ZN12DriveCommand8setTeachEb>
			break;
 80012c0:	e03c      	b.n	800133c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case RESET_ADDR:
			driveCommand->setReset(data[4] == 0x01);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	3304      	adds	r3, #4
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	bf0c      	ite	eq
 80012d0:	2301      	moveq	r3, #1
 80012d2:	2300      	movne	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4619      	mov	r1, r3
 80012d8:	4610      	mov	r0, r2
 80012da:	f001 fdb6 	bl	8002e4a <_ZN12DriveCommand8setResetEb>
			break;
 80012de:	e02d      	b.n	800133c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case ENABLE_ADDR:
			driveCommand->setEnable(data[4] == 0x01);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	3304      	adds	r3, #4
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	bf0c      	ite	eq
 80012ee:	2301      	moveq	r3, #1
 80012f0:	2300      	movne	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4619      	mov	r1, r3
 80012f6:	4610      	mov	r0, r2
 80012f8:	f001 fd87 	bl	8002e0a <_ZN12DriveCommand9setEnableEb>
			break;
 80012fc:	e01e      	b.n	800133c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case DISABLE_ADDR:
			driveCommand->setDisable(data[4] == 0x01);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	3304      	adds	r3, #4
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b01      	cmp	r3, #1
 800130a:	bf0c      	ite	eq
 800130c:	2301      	moveq	r3, #1
 800130e:	2300      	movne	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4619      	mov	r1, r3
 8001314:	4610      	mov	r0, r2
 8001316:	f001 fd58 	bl	8002dca <_ZN12DriveCommand10setDisableEb>
			break;
 800131a:	e00f      	b.n	800133c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case STOP_ADDR:
			driveCommand->setStop(data[4] == 0x01);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	3304      	adds	r3, #4
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	bf0c      	ite	eq
 800132a:	2301      	moveq	r3, #1
 800132c:	2300      	movne	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	4619      	mov	r1, r3
 8001332:	4610      	mov	r0, r2
 8001334:	f001 fda9 	bl	8002e8a <_ZN12DriveCommand7setStopEb>
			break;
 8001338:	e000      	b.n	800133c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		default:
			break;
 800133a:	bf00      	nop
	}
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <_ZN7BaseCOM4CRC8EPhh>:




uint8_t BaseCOM::CRC8(uint8_t *data, uint8_t length)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	4613      	mov	r3, r2
 8001350:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0xff;
 8001352:	23ff      	movs	r3, #255	; 0xff
 8001354:	77fb      	strb	r3, [r7, #31]
	size_t i, j;
	for (i = 0; i < length; i++)
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	429a      	cmp	r2, r3
 8001360:	d222      	bcs.n	80013a8 <_ZN7BaseCOM4CRC8EPhh+0x64>
	{
		crc ^= data[i];
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	4413      	add	r3, r2
 8001368:	781a      	ldrb	r2, [r3, #0]
 800136a:	7ffb      	ldrb	r3, [r7, #31]
 800136c:	4053      	eors	r3, r2
 800136e:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	2b07      	cmp	r3, #7
 8001378:	d812      	bhi.n	80013a0 <_ZN7BaseCOM4CRC8EPhh+0x5c>
		{
			if ((crc & 0x80) != 0)
 800137a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800137e:	2b00      	cmp	r3, #0
 8001380:	da07      	bge.n	8001392 <_ZN7BaseCOM4CRC8EPhh+0x4e>
				crc = (uint8_t) ((crc << 1) ^ 0x31);
 8001382:	7ffb      	ldrb	r3, [r7, #31]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	b25b      	sxtb	r3, r3
 8001388:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800138c:	b25b      	sxtb	r3, r3
 800138e:	77fb      	strb	r3, [r7, #31]
 8001390:	e002      	b.n	8001398 <_ZN7BaseCOM4CRC8EPhh+0x54>
			else
				crc <<= 1;
 8001392:	7ffb      	ldrb	r3, [r7, #31]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	3301      	adds	r3, #1
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	e7e9      	b.n	8001374 <_ZN7BaseCOM4CRC8EPhh+0x30>
	for (i = 0; i < length; i++)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	3301      	adds	r3, #1
 80013a4:	61bb      	str	r3, [r7, #24]
 80013a6:	e7d8      	b.n	800135a <_ZN7BaseCOM4CRC8EPhh+0x16>
		}
	}
	return crc;
 80013a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <_ZN5IOCom9TransmittEPhh>:

#include "IOCom.h"
#include "../AppMain/Defines.h"

bool IOCom::Transmitt(uint8_t *data, uint8_t length)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	4613      	mov	r3, r2
 80013c2:	71fb      	strb	r3, [r7, #7]
	//	this->driveStatus->isOpen() == true ? Out2.Set() : Out2.Reset();
	//	this->driveStatus->isClose() == true ? Out3.Set() : Out3.Reset();
	//this->driveStatus->isStop() == true ? Out4.Set() : Out4.Reset();
	//this->driveStatus->isTeach() == true ? Out5.Set() : Out5.Reset();

	return true;
 80013c4:	2301      	movs	r3, #1
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <_ZN5IOCom7ReceiveEPhh>:

bool IOCom::Receive(uint8_t *data, uint8_t length)
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	4613      	mov	r3, r2
 80013e0:	71fb      	strb	r3, [r7, #7]
	configeWriteStatus = CONFIG_WRITE;
 80013e2:	2102      	movs	r1, #2
 80013e4:	4854      	ldr	r0, [pc, #336]	; (8001538 <_ZN5IOCom7ReceiveEPhh+0x164>)
 80013e6:	f004 fe33 	bl	8006050 <HAL_GPIO_ReadPin>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	bf0c      	ite	eq
 80013f0:	2301      	moveq	r3, #1
 80013f2:	2300      	movne	r3, #0
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

	if (configeWriteStatus && !previousConfigeWriteStatus)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 8092 	beq.w	800152c <_ZN5IOCom7ReceiveEPhh+0x158>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800140e:	f083 0301 	eor.w	r3, r3, #1
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 8089 	beq.w	800152c <_ZN5IOCom7ReceiveEPhh+0x158>
	{
		//read digial config
		uint8_t data = ((uint8_t) CONFIG_ADDR_7 << 7)
 800141a:	2104      	movs	r1, #4
 800141c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001420:	f004 fe16 	bl	8006050 <HAL_GPIO_ReadPin>
 8001424:	4603      	mov	r3, r0
 8001426:	2b80      	cmp	r3, #128	; 0x80
 8001428:	bf0c      	ite	eq
 800142a:	2301      	moveq	r3, #1
 800142c:	2300      	movne	r3, #0
 800142e:	b2db      	uxtb	r3, r3
 8001430:	461c      	mov	r4, r3
				+ (((uint8_t) CONFIG_ADDR_6) << 6)
 8001432:	2102      	movs	r1, #2
 8001434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001438:	f004 fe0a 	bl	8006050 <HAL_GPIO_ReadPin>
 800143c:	4603      	mov	r3, r0
 800143e:	2b01      	cmp	r3, #1
 8001440:	d101      	bne.n	8001446 <_ZN5IOCom7ReceiveEPhh+0x72>
 8001442:	2340      	movs	r3, #64	; 0x40
 8001444:	e000      	b.n	8001448 <_ZN5IOCom7ReceiveEPhh+0x74>
 8001446:	2300      	movs	r3, #0
 8001448:	4423      	add	r3, r4
 800144a:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_5) << 5)
 800144c:	2101      	movs	r1, #1
 800144e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001452:	f004 fdfd 	bl	8006050 <HAL_GPIO_ReadPin>
 8001456:	4603      	mov	r3, r0
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <_ZN5IOCom7ReceiveEPhh+0x8c>
 800145c:	2320      	movs	r3, #32
 800145e:	e000      	b.n	8001462 <_ZN5IOCom7ReceiveEPhh+0x8e>
 8001460:	2300      	movs	r3, #0
 8001462:	4423      	add	r3, r4
 8001464:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_4) << 4)
 8001466:	2108      	movs	r1, #8
 8001468:	4834      	ldr	r0, [pc, #208]	; (800153c <_ZN5IOCom7ReceiveEPhh+0x168>)
 800146a:	f004 fdf1 	bl	8006050 <HAL_GPIO_ReadPin>
 800146e:	4603      	mov	r3, r0
 8001470:	2b01      	cmp	r3, #1
 8001472:	d101      	bne.n	8001478 <_ZN5IOCom7ReceiveEPhh+0xa4>
 8001474:	2310      	movs	r3, #16
 8001476:	e000      	b.n	800147a <_ZN5IOCom7ReceiveEPhh+0xa6>
 8001478:	2300      	movs	r3, #0
 800147a:	4423      	add	r3, r4
 800147c:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_3) << 3)
 800147e:	2104      	movs	r1, #4
 8001480:	482e      	ldr	r0, [pc, #184]	; (800153c <_ZN5IOCom7ReceiveEPhh+0x168>)
 8001482:	f004 fde5 	bl	8006050 <HAL_GPIO_ReadPin>
 8001486:	4603      	mov	r3, r0
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <_ZN5IOCom7ReceiveEPhh+0xbc>
 800148c:	2308      	movs	r3, #8
 800148e:	e000      	b.n	8001492 <_ZN5IOCom7ReceiveEPhh+0xbe>
 8001490:	2300      	movs	r3, #0
 8001492:	4423      	add	r3, r4
 8001494:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_2) << 2)
 8001496:	2102      	movs	r1, #2
 8001498:	4828      	ldr	r0, [pc, #160]	; (800153c <_ZN5IOCom7ReceiveEPhh+0x168>)
 800149a:	f004 fdd9 	bl	8006050 <HAL_GPIO_ReadPin>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <_ZN5IOCom7ReceiveEPhh+0xd4>
 80014a4:	2304      	movs	r3, #4
 80014a6:	e000      	b.n	80014aa <_ZN5IOCom7ReceiveEPhh+0xd6>
 80014a8:	2300      	movs	r3, #0
 80014aa:	4423      	add	r3, r4
 80014ac:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_1) << 1);
 80014ae:	2101      	movs	r1, #1
 80014b0:	4822      	ldr	r0, [pc, #136]	; (800153c <_ZN5IOCom7ReceiveEPhh+0x168>)
 80014b2:	f004 fdcd 	bl	8006050 <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <_ZN5IOCom7ReceiveEPhh+0xec>
 80014bc:	2302      	movs	r3, #2
 80014be:	e000      	b.n	80014c2 <_ZN5IOCom7ReceiveEPhh+0xee>
 80014c0:	2300      	movs	r3, #0
 80014c2:	4423      	add	r3, r4
 80014c4:	75fb      	strb	r3, [r7, #23]

		switch (counter)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d827      	bhi.n	8001520 <_ZN5IOCom7ReceiveEPhh+0x14c>
 80014d0:	a201      	add	r2, pc, #4	; (adr r2, 80014d8 <_ZN5IOCom7ReceiveEPhh+0x104>)
 80014d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d6:	bf00      	nop
 80014d8:	080014e9 	.word	0x080014e9
 80014dc:	0800152b 	.word	0x0800152b
 80014e0:	0800152b 	.word	0x0800152b
 80014e4:	08001503 	.word	0x08001503
		{
			case 0:
				reg = data;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	7dfa      	ldrb	r2, [r7, #23]
 80014ec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
				counter++;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80014f6:	3301      	adds	r3, #1
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
			case 1:
				break;
 8001500:	e013      	b.n	800152a <_ZN5IOCom7ReceiveEPhh+0x156>
				break;
				payload |= ((uint16_t) data) << 7;
				counter++;
				break;
			case 3:
				payload |= data;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8001508:	7dfb      	ldrb	r3, [r7, #23]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	b29a      	uxth	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
				counter = 0;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
				break;
 800151e:	e005      	b.n	800152c <_ZN5IOCom7ReceiveEPhh+0x158>
			default:
				counter = 0;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
				break;
 8001528:	e000      	b.n	800152c <_ZN5IOCom7ReceiveEPhh+0x158>
				break;
 800152a:	bf00      	nop
		}
	}
	return false;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	371c      	adds	r7, #28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}
 8001536:	bf00      	nop
 8001538:	48001c00 	.word	0x48001c00
 800153c:	48000800 	.word	0x48000800

08001540 <_ZN8RFM95Com9TransmittEPhh>:

#include "RFM95Com.h"
#include "../AppMain/Defines.h"

bool RFM95Com::Transmitt(uint8_t *data, uint8_t length)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	4613      	mov	r3, r2
 800154c:	71fb      	strb	r3, [r7, #7]
	uint8_t *txData;

	if (this->driveCommand->isCommandChanged() != 0)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	4618      	mov	r0, r3
 8001554:	f001 fccd 	bl	8002ef2 <_ZNK12DriveCommand16isCommandChangedEv>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	bf14      	ite	ne
 800155e:	2301      	movne	r3, #1
 8001560:	2300      	moveq	r3, #0
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 808d 	beq.w	8001684 <_ZN8RFM95Com9TransmittEPhh+0x144>
	{
		uint8_t command = driveCommand->getCommandChangedReg();
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	4618      	mov	r0, r3
 8001570:	f001 fcd0 	bl	8002f14 <_ZNK12DriveCommand20getCommandChangedRegEv>
 8001574:	4603      	mov	r3, r0
 8001576:	767b      	strb	r3, [r7, #25]

		if (command & CLOSE_CHANGE)
 8001578:	7e7b      	ldrb	r3, [r7, #25]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00d      	beq.n	800159e <_ZN8RFM95Com9TransmittEPhh+0x5e>
		{
			txData = this->GetCommand(CLOSE_ADDR);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3304      	adds	r3, #4
 8001586:	2101      	movs	r1, #1
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fbaf 	bl	8000cec <_ZN7BaseCOM10GetCommandEh>
 800158e:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(CLOSE_CHANGE);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	2101      	movs	r1, #1
 8001596:	4618      	mov	r0, r3
 8001598:	f001 fcc8 	bl	8002f2c <_ZN12DriveCommand19ResetCommandChangedEh>
 800159c:	e179      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & OPEN_CHANGE)
 800159e:	7e7b      	ldrb	r3, [r7, #25]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00d      	beq.n	80015c4 <_ZN8RFM95Com9TransmittEPhh+0x84>
		{
			txData = this->GetCommand(OPEN_ADDR);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3304      	adds	r3, #4
 80015ac:	2102      	movs	r1, #2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fb9c 	bl	8000cec <_ZN7BaseCOM10GetCommandEh>
 80015b4:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(OPEN_CHANGE);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	2102      	movs	r1, #2
 80015bc:	4618      	mov	r0, r3
 80015be:	f001 fcb5 	bl	8002f2c <_ZN12DriveCommand19ResetCommandChangedEh>
 80015c2:	e166      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & TEACH_CHANGE)
 80015c4:	7e7b      	ldrb	r3, [r7, #25]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00d      	beq.n	80015ea <_ZN8RFM95Com9TransmittEPhh+0xaa>
		{
			txData = this->GetCommand(TEACH_ADDR);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	3304      	adds	r3, #4
 80015d2:	2103      	movs	r1, #3
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fb89 	bl	8000cec <_ZN7BaseCOM10GetCommandEh>
 80015da:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(TEACH_CHANGE);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	2104      	movs	r1, #4
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 fca2 	bl	8002f2c <_ZN12DriveCommand19ResetCommandChangedEh>
 80015e8:	e153      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & RESET_CHANGE)
 80015ea:	7e7b      	ldrb	r3, [r7, #25]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00d      	beq.n	8001610 <_ZN8RFM95Com9TransmittEPhh+0xd0>
		{
			txData = this->GetCommand(RESET_ADDR);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3304      	adds	r3, #4
 80015f8:	2104      	movs	r1, #4
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fb76 	bl	8000cec <_ZN7BaseCOM10GetCommandEh>
 8001600:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(RESET_CHANGE);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	2108      	movs	r1, #8
 8001608:	4618      	mov	r0, r3
 800160a:	f001 fc8f 	bl	8002f2c <_ZN12DriveCommand19ResetCommandChangedEh>
 800160e:	e140      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & ENABLE_CHANGE)
 8001610:	7e7b      	ldrb	r3, [r7, #25]
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00d      	beq.n	8001636 <_ZN8RFM95Com9TransmittEPhh+0xf6>
		{
			txData = this->GetCommand(ENABLE_ADDR);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	3304      	adds	r3, #4
 800161e:	2105      	movs	r1, #5
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fb63 	bl	8000cec <_ZN7BaseCOM10GetCommandEh>
 8001626:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(ENABLE_CHANGE);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	2110      	movs	r1, #16
 800162e:	4618      	mov	r0, r3
 8001630:	f001 fc7c 	bl	8002f2c <_ZN12DriveCommand19ResetCommandChangedEh>
 8001634:	e12d      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & DISABLE_CHANGE)
 8001636:	7e7b      	ldrb	r3, [r7, #25]
 8001638:	f003 0320 	and.w	r3, r3, #32
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00d      	beq.n	800165c <_ZN8RFM95Com9TransmittEPhh+0x11c>
		{
			txData = this->GetCommand(DISABLE_ADDR);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3304      	adds	r3, #4
 8001644:	2106      	movs	r1, #6
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fb50 	bl	8000cec <_ZN7BaseCOM10GetCommandEh>
 800164c:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(DISABLE_CHANGE);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	2120      	movs	r1, #32
 8001654:	4618      	mov	r0, r3
 8001656:	f001 fc69 	bl	8002f2c <_ZN12DriveCommand19ResetCommandChangedEh>
 800165a:	e11a      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & STOP_CHANGE)
 800165c:	7e7b      	ldrb	r3, [r7, #25]
 800165e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 8115 	beq.w	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		{
			txData = this->GetCommand(STOP_ADDR);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	3304      	adds	r3, #4
 800166c:	2107      	movs	r1, #7
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fb3c 	bl	8000cec <_ZN7BaseCOM10GetCommandEh>
 8001674:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(STOP_CHANGE);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	2140      	movs	r1, #64	; 0x40
 800167c:	4618      	mov	r0, r3
 800167e:	f001 fc55 	bl	8002f2c <_ZN12DriveCommand19ResetCommandChangedEh>
 8001682:	e106      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
	}
	else if (driveSettings->isSettingsChanged() != 0)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	4618      	mov	r0, r3
 800168a:	f001 faef 	bl	8002c6c <_ZN13DriveSettings17isSettingsChangedEv>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	bf14      	ite	ne
 8001694:	2301      	movne	r3, #1
 8001696:	2300      	moveq	r3, #0
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 80db 	beq.w	8001856 <_ZN8RFM95Com9TransmittEPhh+0x316>
	{
		uint16_t commands = driveSettings->getSettingsChangedReg();
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f001 faf2 	bl	8002c8e <_ZNK13DriveSettings21getSettingsChangedRegEv>
 80016aa:	4603      	mov	r3, r0
 80016ac:	837b      	strh	r3, [r7, #26]

		if (commands & TEACH_TORQUE_CHANGE)
 80016ae:	8b7b      	ldrh	r3, [r7, #26]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00d      	beq.n	80016d4 <_ZN8RFM95Com9TransmittEPhh+0x194>
		{
			txData = this->GetSettings(TEACH_TORQUE_ADDR);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3304      	adds	r3, #4
 80016bc:	2110      	movs	r1, #16
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff f978 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 80016c4:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(TEACH_TORQUE_CHANGE);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	2101      	movs	r1, #1
 80016cc:	4618      	mov	r0, r3
 80016ce:	f001 faea 	bl	8002ca6 <_ZN13DriveSettings20ResetSettingsChangedEt>
 80016d2:	e0de      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & TEACH_SPEED_CHANGE)
 80016d4:	8b7b      	ldrh	r3, [r7, #26]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00d      	beq.n	80016fa <_ZN8RFM95Com9TransmittEPhh+0x1ba>
		{
			txData = this->GetSettings(TEACH_SPEED_ADDR);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2111      	movs	r1, #17
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff f965 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 80016ea:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(TEACH_SPEED_CHANGE);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	2102      	movs	r1, #2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f001 fad7 	bl	8002ca6 <_ZN13DriveSettings20ResetSettingsChangedEt>
 80016f8:	e0cb      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & CLAMPING_TORQUE_CHANGE)
 80016fa:	8b7b      	ldrh	r3, [r7, #26]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00d      	beq.n	8001720 <_ZN8RFM95Com9TransmittEPhh+0x1e0>
		{
			txData = this->GetSettings(CLAMPING_TORQUE_ADDR);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	3304      	adds	r3, #4
 8001708:	2112      	movs	r1, #18
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff f952 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 8001710:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(CLAMPING_TORQUE_CHANGE);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	2104      	movs	r1, #4
 8001718:	4618      	mov	r0, r3
 800171a:	f001 fac4 	bl	8002ca6 <_ZN13DriveSettings20ResetSettingsChangedEt>
 800171e:	e0b8      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & CLAMPING_SPEED_CHANGE)
 8001720:	8b7b      	ldrh	r3, [r7, #26]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00d      	beq.n	8001746 <_ZN8RFM95Com9TransmittEPhh+0x206>
		{
			txData = this->GetSettings(CLAMPING_SPEED_ADDR);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	3304      	adds	r3, #4
 800172e:	2113      	movs	r1, #19
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff f93f 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 8001736:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(CLAMPING_SPEED_CHANGE);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	2108      	movs	r1, #8
 800173e:	4618      	mov	r0, r3
 8001740:	f001 fab1 	bl	8002ca6 <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001744:	e0a5      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & SELF_SHUTDOWN_DELAY_CHANGE)
 8001746:	8b7b      	ldrh	r3, [r7, #26]
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00d      	beq.n	800176c <_ZN8RFM95Com9TransmittEPhh+0x22c>
		{
			txData = this->GetSettings(SELF_SHUTDOWN_DELAY_ADDR);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3304      	adds	r3, #4
 8001754:	2114      	movs	r1, #20
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff f92c 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 800175c:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(SELF_SHUTDOWN_DELAY_CHANGE);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	2110      	movs	r1, #16
 8001764:	4618      	mov	r0, r3
 8001766:	f001 fa9e 	bl	8002ca6 <_ZN13DriveSettings20ResetSettingsChangedEt>
 800176a:	e092      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & IN_POS_DIFF_CHANGE)
 800176c:	8b7b      	ldrh	r3, [r7, #26]
 800176e:	f003 0320 	and.w	r3, r3, #32
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00d      	beq.n	8001792 <_ZN8RFM95Com9TransmittEPhh+0x252>
		{
			txData = this->GetSettings(IN_POS_DIFF_ADDR);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	3304      	adds	r3, #4
 800177a:	2115      	movs	r1, #21
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff f919 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 8001782:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(IN_POS_DIFF_CHANGE);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	2120      	movs	r1, #32
 800178a:	4618      	mov	r0, r3
 800178c:	f001 fa8b 	bl	8002ca6 <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001790:	e07f      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & OPENING_DISTANCE_CHANGE)
 8001792:	8b7b      	ldrh	r3, [r7, #26]
 8001794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00d      	beq.n	80017b8 <_ZN8RFM95Com9TransmittEPhh+0x278>
		{
			txData = this->GetSettings(OPENING_DISTANCE_ADDR);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	3304      	adds	r3, #4
 80017a0:	2116      	movs	r1, #22
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff f906 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 80017a8:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(OPENING_DISTANCE_CHANGE);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	2140      	movs	r1, #64	; 0x40
 80017b0:	4618      	mov	r0, r3
 80017b2:	f001 fa78 	bl	8002ca6 <_ZN13DriveSettings20ResetSettingsChangedEt>
 80017b6:	e06c      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & UNDERVOLTAGE_WARNING_CHANGE)
 80017b8:	8b7b      	ldrh	r3, [r7, #26]
 80017ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00d      	beq.n	80017de <_ZN8RFM95Com9TransmittEPhh+0x29e>
		{
			txData = this->GetSettings(UNDERVOLTAGE_WARNING_ADDR);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2117      	movs	r1, #23
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff f8f3 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 80017ce:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(UNDERVOLTAGE_WARNING_CHANGE);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	2180      	movs	r1, #128	; 0x80
 80017d6:	4618      	mov	r0, r3
 80017d8:	f001 fa65 	bl	8002ca6 <_ZN13DriveSettings20ResetSettingsChangedEt>
 80017dc:	e059      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & UNDERVOLTAGE_ERROR_CHANGE)
 80017de:	8b7b      	ldrh	r3, [r7, #26]
 80017e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00e      	beq.n	8001806 <_ZN8RFM95Com9TransmittEPhh+0x2c6>
		{
			txData = this->GetSettings(UNDERVOLTAGE_ERROR_ADDR);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3304      	adds	r3, #4
 80017ec:	2118      	movs	r1, #24
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff f8e0 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 80017f4:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(UNDERVOLTAGE_ERROR_CHANGE);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017fe:	4618      	mov	r0, r3
 8001800:	f001 fa51 	bl	8002ca6 <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001804:	e045      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & OVER_CURRENT_WARNING_CHANGE)
 8001806:	8b7b      	ldrh	r3, [r7, #26]
 8001808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00e      	beq.n	800182e <_ZN8RFM95Com9TransmittEPhh+0x2ee>
		{
			txData = this->GetSettings(OVER_CURRENT_WARNING_ADDR);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3304      	adds	r3, #4
 8001814:	2119      	movs	r1, #25
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff f8cc 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 800181c:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(OVER_CURRENT_WARNING_CHANGE);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001826:	4618      	mov	r0, r3
 8001828:	f001 fa3d 	bl	8002ca6 <_ZN13DriveSettings20ResetSettingsChangedEt>
 800182c:	e031      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & OVER_CURRENT_ERROR_CHANGE)
 800182e:	8b7b      	ldrh	r3, [r7, #26]
 8001830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001834:	2b00      	cmp	r3, #0
 8001836:	d02c      	beq.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		{
			txData = this->GetSettings(OVER_CURRENT_ERROR_ADDR);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3304      	adds	r3, #4
 800183c:	211a      	movs	r1, #26
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff f8b8 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 8001844:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(OVER_CURRENT_ERROR_CHANGE);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800184e:	4618      	mov	r0, r3
 8001850:	f001 fa29 	bl	8002ca6 <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001854:	e01d      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
	}
	else
	{
		uint8_t dataTemp[] =
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	f8c3 2003 	str.w	r2, [r3, #3]
 8001862:	231f      	movs	r3, #31
 8001864:	743b      	strb	r3, [r7, #16]
 8001866:	2313      	movs	r3, #19
 8001868:	74bb      	strb	r3, [r7, #18]
		{ 0x1F, driveSettings->getDeviceAddress(), GET_STATUS, 0x00, 0x00, 0x00,
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	4618      	mov	r0, r3
 8001870:	f001 f9d2 	bl	8002c18 <_ZNK13DriveSettings16getDeviceAddressEv>
 8001874:	4603      	mov	r3, r0
				0x00 };
 8001876:	747b      	strb	r3, [r7, #17]
		dataTemp[6] = CRC8(dataTemp, 6);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3304      	adds	r3, #4
 800187c:	f107 0110 	add.w	r1, r7, #16
 8001880:	2206      	movs	r2, #6
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fd5e 	bl	8001344 <_ZN7BaseCOM4CRC8EPhh>
 8001888:	4603      	mov	r3, r0
 800188a:	75bb      	strb	r3, [r7, #22]
		txData = dataTemp;
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	61fb      	str	r3, [r7, #28]
	}

	rfm95->beginPacket();
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f000 fcb8 	bl	800220e <_ZN10RFM95_LoRa11beginPacketEi>
	rfm95->write(txData, 7);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6998      	ldr	r0, [r3, #24]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	3304      	adds	r3, #4
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2207      	movs	r2, #7
 80018ae:	69f9      	ldr	r1, [r7, #28]
 80018b0:	4798      	blx	r3
	rfm95->endPacket();
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 fcca 	bl	8002250 <_ZN10RFM95_LoRa9endPacketEv>
	return true;
 80018bc:	2301      	movs	r3, #1
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3720      	adds	r7, #32
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <_ZN8RFM95Com7ReceiveEPhh>:

bool RFM95Com::Receive(uint8_t *data, uint8_t length)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b086      	sub	sp, #24
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	60f8      	str	r0, [r7, #12]
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	4613      	mov	r3, r2
 80018d2:	71fb      	strb	r3, [r7, #7]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[5] = crc

	uint8_t packetSize = rfm95->parsePacket();
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 fcda 	bl	8002294 <_ZN10RFM95_LoRa11parsePacketEi>
 80018e0:	4603      	mov	r3, r0
 80018e2:	75fb      	strb	r3, [r7, #23]
	if (packetSize != 0)
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d061      	beq.n	80019ae <_ZN8RFM95Com7ReceiveEPhh+0xe8>
	{
		uint8_t counter = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	75bb      	strb	r3, [r7, #22]
		while (rfm95->available())
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	699a      	ldr	r2, [r3, #24]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3308      	adds	r3, #8
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4610      	mov	r0, r2
 80018fe:	4798      	blx	r3
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	bf14      	ite	ne
 8001906:	2301      	movne	r3, #1
 8001908:	2300      	moveq	r3, #0
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d013      	beq.n	8001938 <_ZN8RFM95Com7ReceiveEPhh+0x72>
		{
			data[counter] = rfm95->read();
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	699a      	ldr	r2, [r3, #24]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	330c      	adds	r3, #12
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4610      	mov	r0, r2
 8001920:	4798      	blx	r3
 8001922:	4601      	mov	r1, r0
 8001924:	7dbb      	ldrb	r3, [r7, #22]
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	4413      	add	r3, r2
 800192a:	b2ca      	uxtb	r2, r1
 800192c:	701a      	strb	r2, [r3, #0]
			if (counter > MAX_PACKET_2_RECEIVE)
 800192e:	7dbb      	ldrb	r3, [r7, #22]
 8001930:	2b07      	cmp	r3, #7
 8001932:	d9dc      	bls.n	80018ee <_ZN8RFM95Com7ReceiveEPhh+0x28>
			{
				return false;
 8001934:	2300      	movs	r3, #0
 8001936:	e03b      	b.n	80019b0 <_ZN8RFM95Com7ReceiveEPhh+0xea>
			}
		}

		//check CRC
		if (CRC8(data, 6) != data[6])
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3304      	adds	r3, #4
 800193c:	2206      	movs	r2, #6
 800193e:	68b9      	ldr	r1, [r7, #8]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fcff 	bl	8001344 <_ZN7BaseCOM4CRC8EPhh>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	3306      	adds	r3, #6
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	bf14      	ite	ne
 8001954:	2301      	movne	r3, #1
 8001956:	2300      	moveq	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <_ZN8RFM95Com7ReceiveEPhh+0x9c>
		{
			//error crc error //ToDO
			return false;
 800195e:	2300      	movs	r3, #0
 8001960:	e026      	b.n	80019b0 <_ZN8RFM95Com7ReceiveEPhh+0xea>
		}

		switch (data[2])
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	3302      	adds	r3, #2
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d014      	beq.n	8001996 <_ZN8RFM95Com7ReceiveEPhh+0xd0>
 800196c:	2b03      	cmp	r3, #3
 800196e:	dc19      	bgt.n	80019a4 <_ZN8RFM95Com7ReceiveEPhh+0xde>
 8001970:	2b01      	cmp	r3, #1
 8001972:	d002      	beq.n	800197a <_ZN8RFM95Com7ReceiveEPhh+0xb4>
 8001974:	2b02      	cmp	r3, #2
 8001976:	d007      	beq.n	8001988 <_ZN8RFM95Com7ReceiveEPhh+0xc2>
 8001978:	e014      	b.n	80019a4 <_ZN8RFM95Com7ReceiveEPhh+0xde>
		{
			case SEND_SETTINGS:
				this->SetSettings(data);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	3304      	adds	r3, #4
 800197e:	68b9      	ldr	r1, [r7, #8]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fa3d 	bl	8000e00 <_ZN7BaseCOM11SetSettingsEPh>
				break;
 8001986:	e012      	b.n	80019ae <_ZN8RFM95Com7ReceiveEPhh+0xe8>
			case SEND_COMMAND:
				this->SetCommand(data);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	3304      	adds	r3, #4
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fc4e 	bl	8001230 <_ZN7BaseCOM10SetCommandEPh>
				break;
 8001994:	e00b      	b.n	80019ae <_ZN8RFM95Com7ReceiveEPhh+0xe8>
			case SEND_STATUS:
				this->SetStatus(data);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3304      	adds	r3, #4
 800199a:	68b9      	ldr	r1, [r7, #8]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fbbd 	bl	800111c <_ZN7BaseCOM9SetStatusEPh>
				break;
 80019a2:	e004      	b.n	80019ae <_ZN8RFM95Com7ReceiveEPhh+0xe8>
			default:
				//not sported command
				data[2] = 0;
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	3302      	adds	r3, #2
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
				break;
 80019ac:	bf00      	nop
		}
	}
	return true;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <_ZN6USBCom9TransmittEPhh>:
#include "../AppMain/Defines.h"
#include "usb_device.h"
#include "usbd_cdc_if.h"

bool USBCom::Transmitt(uint8_t *data, uint8_t length)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	4613      	mov	r3, r2
 80019c4:	71fb      	strb	r3, [r7, #7]
	if (data == NULL)
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <_ZN6USBCom9TransmittEPhh+0x18>
	{
		return false;
 80019cc:	2300      	movs	r3, #0
 80019ce:	e019      	b.n	8001a04 <_ZN6USBCom9TransmittEPhh+0x4c>
	}

	uint16_t counter = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	82fb      	strh	r3, [r7, #22]
	while (CDC_Transmit_FS((uint8_t*) data, length) != USBD_OK)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	4619      	mov	r1, r3
 80019da:	68b8      	ldr	r0, [r7, #8]
 80019dc:	f00c fb3c 	bl	800e058 <CDC_Transmit_FS>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	bf14      	ite	ne
 80019e6:	2301      	movne	r3, #1
 80019e8:	2300      	moveq	r3, #0
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d008      	beq.n	8001a02 <_ZN6USBCom9TransmittEPhh+0x4a>
	{
		counter++;
 80019f0:	8afb      	ldrh	r3, [r7, #22]
 80019f2:	3301      	adds	r3, #1
 80019f4:	82fb      	strh	r3, [r7, #22]
		if (counter >= 1000)
 80019f6:	8afb      	ldrh	r3, [r7, #22]
 80019f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019fc:	d3ea      	bcc.n	80019d4 <_ZN6USBCom9TransmittEPhh+0x1c>
		{
			//ToDo USB Error
			return false;	//Transmit failed
 80019fe:	2300      	movs	r3, #0
 8001a00:	e000      	b.n	8001a04 <_ZN6USBCom9TransmittEPhh+0x4c>
		}
	}
	return true;	//Transmit successful
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_ZN6USBCom7ReceiveEPhh>:

bool USBCom::Receive(uint8_t *data, uint8_t length)
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	4613      	mov	r3, r2
 8001a18:	71fb      	strb	r3, [r7, #7]
	uint8_t data2send[] =
 8001a1a:	4a5f      	ldr	r2, [pc, #380]	; (8001b98 <_ZN6USBCom7ReceiveEPhh+0x18c>)
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a24:	6018      	str	r0, [r3, #0]
 8001a26:	3304      	adds	r3, #4
 8001a28:	8019      	strh	r1, [r3, #0]
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	0c0a      	lsrs	r2, r1, #16
 8001a2e:	701a      	strb	r2, [r3, #0]
	{ 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t crc = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	75fb      	strb	r3, [r7, #23]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	if (length >= 5)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	f240 80a9 	bls.w	8001b8e <_ZN6USBCom7ReceiveEPhh+0x182>
	{
		//calculate CRC from received data
		crc = this->CRC8(data, 6);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	3304      	adds	r3, #4
 8001a40:	2206      	movs	r2, #6
 8001a42:	68b9      	ldr	r1, [r7, #8]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fc7d 	bl	8001344 <_ZN7BaseCOM4CRC8EPhh>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	75fb      	strb	r3, [r7, #23]
		if (crc != data[6])
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	3306      	adds	r3, #6
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	7dfa      	ldrb	r2, [r7, #23]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d003      	beq.n	8001a62 <_ZN6USBCom7ReceiveEPhh+0x56>
		{
			data[2] = 0;
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
		}

		switch (data[2])
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	3302      	adds	r3, #2
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	2b12      	cmp	r3, #18
 8001a6c:	d876      	bhi.n	8001b5c <_ZN6USBCom7ReceiveEPhh+0x150>
 8001a6e:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <_ZN6USBCom7ReceiveEPhh+0x68>)
 8001a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a74:	08001ac1 	.word	0x08001ac1
 8001a78:	08001acf 	.word	0x08001acf
 8001a7c:	08001add 	.word	0x08001add
 8001a80:	08001b5d 	.word	0x08001b5d
 8001a84:	08001b5d 	.word	0x08001b5d
 8001a88:	08001b5d 	.word	0x08001b5d
 8001a8c:	08001b5d 	.word	0x08001b5d
 8001a90:	08001b5d 	.word	0x08001b5d
 8001a94:	08001b5d 	.word	0x08001b5d
 8001a98:	08001b5d 	.word	0x08001b5d
 8001a9c:	08001b5d 	.word	0x08001b5d
 8001aa0:	08001b5d 	.word	0x08001b5d
 8001aa4:	08001b5d 	.word	0x08001b5d
 8001aa8:	08001b5d 	.word	0x08001b5d
 8001aac:	08001b5d 	.word	0x08001b5d
 8001ab0:	08001b5d 	.word	0x08001b5d
 8001ab4:	08001aeb 	.word	0x08001aeb
 8001ab8:	08001b11 	.word	0x08001b11
 8001abc:	08001b37 	.word	0x08001b37
		{
			case SEND_SETTINGS:
				this->SetSettings(data);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f99a 	bl	8000e00 <_ZN7BaseCOM11SetSettingsEPh>
				break;
 8001acc:	e04b      	b.n	8001b66 <_ZN6USBCom7ReceiveEPhh+0x15a>
			case SEND_COMMAND:
				this->SetCommand(data);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	68b9      	ldr	r1, [r7, #8]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fbab 	bl	8001230 <_ZN7BaseCOM10SetCommandEPh>
				break;
 8001ada:	e044      	b.n	8001b66 <_ZN6USBCom7ReceiveEPhh+0x15a>
			case SEND_STATUS:
				this->SetStatus(data);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3304      	adds	r3, #4
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fb1a 	bl	800111c <_ZN7BaseCOM9SetStatusEPh>
				break;
 8001ae8:	e03d      	b.n	8001b66 <_ZN6USBCom7ReceiveEPhh+0x15a>
			case GET_SETTINGS:
				return Transmitt(this->GetSettings(data[3]), 7);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681c      	ldr	r4, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	1d1a      	adds	r2, r3, #4
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	3303      	adds	r3, #3
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	4619      	mov	r1, r3
 8001afc:	4610      	mov	r0, r2
 8001afe:	f7fe ff59 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2207      	movs	r2, #7
 8001b06:	4619      	mov	r1, r3
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	47a0      	blx	r4
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	e03f      	b.n	8001b90 <_ZN6USBCom7ReceiveEPhh+0x184>
			case GET_COMMAND:
				return Transmitt(this->GetCommand(data[3]), 7);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681c      	ldr	r4, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1d1a      	adds	r2, r3, #4
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	3303      	adds	r3, #3
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	4610      	mov	r0, r2
 8001b24:	f7ff f8e2 	bl	8000cec <_ZN7BaseCOM10GetCommandEh>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2207      	movs	r2, #7
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	47a0      	blx	r4
 8001b32:	4603      	mov	r3, r0
 8001b34:	e02c      	b.n	8001b90 <_ZN6USBCom7ReceiveEPhh+0x184>
			case GET_STATUS:
				return Transmitt(this->GetStatus(data[3]), 7);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681c      	ldr	r4, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1d1a      	adds	r2, r3, #4
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	3303      	adds	r3, #3
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	4619      	mov	r1, r3
 8001b48:	4610      	mov	r0, r2
 8001b4a:	f7ff f839 	bl	8000bc0 <_ZN7BaseCOM9GetStatusEh>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2207      	movs	r2, #7
 8001b52:	4619      	mov	r1, r3
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	47a0      	blx	r4
 8001b58:	4603      	mov	r3, r0
 8001b5a:	e019      	b.n	8001b90 <_ZN6USBCom7ReceiveEPhh+0x184>
			default:
				//not suported command
				data[2] = 0;
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	3302      	adds	r3, #2
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
				break;
 8001b64:	bf00      	nop
		}

		data2send[6] = CRC8(data2send, 6);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	f107 0110 	add.w	r1, r7, #16
 8001b6e:	2206      	movs	r2, #6
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fbe7 	bl	8001344 <_ZN7BaseCOM4CRC8EPhh>
 8001b76:	4603      	mov	r3, r0
 8001b78:	75bb      	strb	r3, [r7, #22]
		return Transmitt(data2send, 6);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f107 0110 	add.w	r1, r7, #16
 8001b84:	2206      	movs	r2, #6
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	4798      	blx	r3
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	e000      	b.n	8001b90 <_ZN6USBCom7ReceiveEPhh+0x184>
	}

	return false;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	371c      	adds	r7, #28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd90      	pop	{r4, r7, pc}
 8001b98:	0800ec90 	.word	0x0800ec90

08001b9c <_ZN5FlashC1EP13DriveSettingsP11DriveStatus>:
 */

#include "Flash.h"
#include "stm32l4xx_hal.h"

Flash::Flash(DriveSettings *driveSettings, DriveStatus *driveStatus)
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
{
	this->driveSettings = driveSettings;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	605a      	str	r2, [r3, #4]
}
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <_ZN5Flash9ReadFlashEv>:
 *
 * @param None
 * @return None
 */
void Flash::ReadFlash()
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < UFLASH_SIZE; i++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2b13      	cmp	r3, #19
 8001bd2:	dc12      	bgt.n	8001bfa <_ZN5Flash9ReadFlashEv+0x38>
	{
		tmpFlashArray[i] = *(uint64_t*) (FLASH_STAR_PAGE_ADDR + 64 * i);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8001bda:	f503 637e 	add.w	r3, r3, #4064	; 0xfe0
 8001bde:	019b      	lsls	r3, r3, #6
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	68f9      	ldr	r1, [r7, #12]
 8001be8:	3101      	adds	r1, #1
 8001bea:	00c9      	lsls	r1, r1, #3
 8001bec:	4401      	add	r1, r0
 8001bee:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < UFLASH_SIZE; i++)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	e7e9      	b.n	8001bce <_ZN5Flash9ReadFlashEv+0xc>
	}

	driveSettings->setClampingSpeed(tmpFlashArray[0]);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c04:	b293      	uxth	r3, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	f000 fe3e 	bl	8002888 <_ZN13DriveSettings16setClampingSpeedEt>
	driveSettings->setClampingTorque(tmpFlashArray[1]);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c16:	b293      	uxth	r3, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f000 fe5c 	bl	80028d6 <_ZN13DriveSettings17setClampingTorqueEt>
	driveSettings->setTeachSpeed(tmpFlashArray[2]);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001c28:	b293      	uxth	r3, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f000 ff3d 	bl	8002aaa <_ZN13DriveSettings13setTeachSpeedEt>
	driveSettings->setTeachTroque(tmpFlashArray[3]);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001c3a:	b293      	uxth	r3, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f000 ff5b 	bl	8002af8 <_ZN13DriveSettings14setTeachTroqueEt>

	driveSettings->setOverCurrentError(tmpFlashArray[4]);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001c4c:	b293      	uxth	r3, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f000 ffc7 	bl	8002be2 <_ZN13DriveSettings19setOverCurrentErrorEt>
	driveSettings->setOverCurrentWarning(tmpFlashArray[5]);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001c5e:	b293      	uxth	r3, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	f000 fed4 	bl	8002a0e <_ZN13DriveSettings21setOverCurrentWarningEt>
	driveSettings->setUnderVoltageError(tmpFlashArray[6]);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6818      	ldr	r0, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001c70:	b293      	uxth	r3, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f000 ff67 	bl	8002b46 <_ZN13DriveSettings20setUnderVoltageErrorEt>
	driveSettings->setUnderVoltageWarning(tmpFlashArray[7]);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001c82:	b293      	uxth	r3, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	f000 ff85 	bl	8002b94 <_ZN13DriveSettings22setUnderVoltageWarningEt>

	driveSettings->setSelfShutdownDelay(tmpFlashArray[8]);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001c94:	b293      	uxth	r3, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	f000 fee0 	bl	8002a5c <_ZN13DriveSettings20setSelfShutdownDelayEt>
	driveSettings->setInPosDiff(tmpFlashArray[9]);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001ca6:	b293      	uxth	r3, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f000 fe3b 	bl	8002924 <_ZN13DriveSettings12setInPosDiffEt>
	driveSettings->setOpeningDistance(tmpFlashArray[10]);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001cb8:	b293      	uxth	r3, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f000 fe59 	bl	8002972 <_ZN13DriveSettings18setOpeningDistanceEt>

	driveSettings->setOverCurrentTimeThreshold(tmpFlashArray[11]);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6818      	ldr	r0, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001cca:	b293      	uxth	r3, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f000 fe77 	bl	80029c0 <_ZN13DriveSettings27setOverCurrentTimeThresholdEt>
	driveSettings->setDeviceAddress(tmpFlashArray[12]);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001cdc:	b2d3      	uxtb	r3, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f000 ffa6 	bl	8002c30 <_ZN13DriveSettings16setDeviceAddressEh>
}
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <_ZN5Flash9SaveFlashEv>:



void Flash::SaveFlash(){
 8001cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cf0:	b096      	sub	sp, #88	; 0x58
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6578      	str	r0, [r7, #84]	; 0x54
	if (this->driveSettings->isSettingsChanged())
 8001cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 ffb6 	bl	8002c6c <_ZN13DriveSettings17isSettingsChangedEv>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 80c0 	beq.w	8001e88 <_ZN5Flash9SaveFlashEv+0x19c>
	{
		tmpFlashArray[0] = driveSettings->getClampingSpeed();
 8001d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f000 fdaf 	bl	8002870 <_ZNK13DriveSettings16getClampingSpeedEv>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	2200      	movs	r2, #0
 8001d18:	461c      	mov	r4, r3
 8001d1a:	4615      	mov	r5, r2
 8001d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d1e:	e9c3 4502 	strd	r4, r5, [r3, #8]
		tmpFlashArray[1] = driveSettings->getClampingTorque();
 8001d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 fdc9 	bl	80028be <_ZNK13DriveSettings17getClampingTorqueEv>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	2200      	movs	r2, #0
 8001d32:	4698      	mov	r8, r3
 8001d34:	4691      	mov	r9, r2
 8001d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d38:	e9c3 8904 	strd	r8, r9, [r3, #16]
		tmpFlashArray[2] = driveSettings->getTeachSpeed();
 8001d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 fea6 	bl	8002a92 <_ZNK13DriveSettings13getTeachSpeedEv>
 8001d46:	4603      	mov	r3, r0
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	469a      	mov	sl, r3
 8001d4e:	4693      	mov	fp, r2
 8001d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d52:	e9c3 ab06 	strd	sl, fp, [r3, #24]
		tmpFlashArray[3] = driveSettings->getTeachTroque();
 8001d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 fec0 	bl	8002ae0 <_ZNK13DriveSettings14getTeachTroqueEv>
 8001d60:	4603      	mov	r3, r0
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	2200      	movs	r2, #0
 8001d66:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d68:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8001d70:	e9c3 1208 	strd	r1, r2, [r3, #32]

		tmpFlashArray[4] = driveSettings->getOverCurrentError();
 8001d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 ff26 	bl	8002bca <_ZNK13DriveSettings19getOverCurrentErrorEv>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	2200      	movs	r2, #0
 8001d84:	643b      	str	r3, [r7, #64]	; 0x40
 8001d86:	647a      	str	r2, [r7, #68]	; 0x44
 8001d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001d8e:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
		tmpFlashArray[5] = driveSettings->getOverCurrentWarning();
 8001d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fe2d 	bl	80029f6 <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	2200      	movs	r2, #0
 8001da2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001da4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8001dac:	e9c3 120c 	strd	r1, r2, [r3, #48]	; 0x30
		tmpFlashArray[6] = driveSettings->getUnderVoltageError();
 8001db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 feba 	bl	8002b2e <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	633b      	str	r3, [r7, #48]	; 0x30
 8001dc2:	637a      	str	r2, [r7, #52]	; 0x34
 8001dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8001dca:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tmpFlashArray[7] = driveSettings->getUnderVoltageWarning();
 8001dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 fed2 	bl	8002b7c <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2200      	movs	r2, #0
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8001de0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001de8:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

		tmpFlashArray[8] = driveSettings->getSelfShutdownDelay();
 8001dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 fe27 	bl	8002a44 <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8001df6:	4603      	mov	r3, r0
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	623b      	str	r3, [r7, #32]
 8001dfe:	627a      	str	r2, [r7, #36]	; 0x24
 8001e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e02:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001e06:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
		tmpFlashArray[9] = driveSettings->getInPosDiff();
 8001e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fd7c 	bl	800290c <_ZNK13DriveSettings12getInPosDiffEv>
 8001e14:	4603      	mov	r3, r0
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	2200      	movs	r2, #0
 8001e1a:	61bb      	str	r3, [r7, #24]
 8001e1c:	61fa      	str	r2, [r7, #28]
 8001e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e20:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001e24:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
		tmpFlashArray[10] = driveSettings->getOpeningDistance();
 8001e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 fd94 	bl	800295a <_ZNK13DriveSettings18getOpeningDistanceEv>
 8001e32:	4603      	mov	r3, r0
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	2200      	movs	r2, #0
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	617a      	str	r2, [r7, #20]
 8001e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001e42:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58

		tmpFlashArray[11] = driveSettings->getOverCurrentTimeThreshold();
 8001e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fdac 	bl	80029a8 <_ZNK13DriveSettings27getOverCurrentTimeThresholdEv>
 8001e50:	4603      	mov	r3, r0
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	2200      	movs	r2, #0
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	60fa      	str	r2, [r7, #12]
 8001e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001e60:	e9c3 1218 	strd	r1, r2, [r3, #96]	; 0x60
		tmpFlashArray[12] = driveSettings->getDeviceAddress();
 8001e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 fed5 	bl	8002c18 <_ZNK13DriveSettings16getDeviceAddressEv>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2200      	movs	r2, #0
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001e7e:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
		WriteFlash();
 8001e82:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001e84:	f000 f805 	bl	8001e92 <_ZN5Flash10WriteFlashEv>
	}
}
 8001e88:	bf00      	nop
 8001e8a:	3758      	adds	r7, #88	; 0x58
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001e92 <_ZN5Flash10WriteFlashEv>:
 *
 * @param None
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef Flash::WriteFlash()
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b088      	sub	sp, #32
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]

	FLASH_EraseInitTypeDef EraseinitStruct;
	uint32_t sectorError = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]

	if (HAL_FLASH_Unlock() != HAL_OK)
 8001e9e:	f003 fd51 	bl	8005944 <HAL_FLASH_Unlock>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf14      	ite	ne
 8001ea8:	2301      	movne	r3, #1
 8001eaa:	2300      	moveq	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d009      	beq.n	8001ec6 <_ZN5Flash10WriteFlashEv+0x34>
	{
		HAL_FLASH_Lock();
 8001eb2:	f003 fd69 	bl	8005988 <HAL_FLASH_Lock>
		driveStatus->setError(DriveStatus::E_FLASH_ERROR);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2101      	movs	r1, #1
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f001 f968 	bl	8003192 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
		return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e050      	b.n	8001f68 <_ZN5Flash10WriteFlashEv+0xd6>
	}

	EraseinitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
	EraseinitStruct.Banks = 1;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	613b      	str	r3, [r7, #16]
	EraseinitStruct.Page = UFLASH_PAGE;
 8001ece:	237f      	movs	r3, #127	; 0x7f
 8001ed0:	617b      	str	r3, [r7, #20]
	EraseinitStruct.NbPages = UFLASH_NPAGES;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	61bb      	str	r3, [r7, #24]

	if (HAL_FLASHEx_Erase(&EraseinitStruct, &sectorError) != HAL_OK)
 8001ed6:	f107 0208 	add.w	r2, r7, #8
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f003 fe15 	bl	8005b10 <HAL_FLASHEx_Erase>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf14      	ite	ne
 8001eec:	2301      	movne	r3, #1
 8001eee:	2300      	moveq	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <_ZN5Flash10WriteFlashEv+0x78>
	{
		HAL_FLASH_Lock();
 8001ef6:	f003 fd47 	bl	8005988 <HAL_FLASH_Lock>
		driveStatus->setError(DriveStatus::E_FLASH_ERROR);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2101      	movs	r1, #1
 8001f00:	4618      	mov	r0, r3
 8001f02:	f001 f946 	bl	8003192 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
		return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e02e      	b.n	8001f68 <_ZN5Flash10WriteFlashEv+0xd6>
	}

	for (int i = 0; i < UFLASH_SIZE; i++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	2b13      	cmp	r3, #19
 8001f12:	dc14      	bgt.n	8001f3e <_ZN5Flash10WriteFlashEv+0xac>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
				(FLASH_STAR_PAGE_ADDR + 64 * i), tmpFlashArray[i]);
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8001f1a:	f503 637e 	add.w	r3, r3, #4064	; 0xfe0
 8001f1e:	019b      	lsls	r3, r3, #6
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8001f20:	4619      	mov	r1, r3
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	3301      	adds	r3, #1
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	2000      	movs	r0, #0
 8001f32:	f003 fc9b 	bl	800586c <HAL_FLASH_Program>
	for (int i = 0; i < UFLASH_SIZE; i++)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	61fb      	str	r3, [r7, #28]
 8001f3c:	e7e7      	b.n	8001f0e <_ZN5Flash10WriteFlashEv+0x7c>
	}

	if (HAL_FLASH_Lock() != HAL_OK)
 8001f3e:	f003 fd23 	bl	8005988 <HAL_FLASH_Lock>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	bf14      	ite	ne
 8001f48:	2301      	movne	r3, #1
 8001f4a:	2300      	moveq	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d009      	beq.n	8001f66 <_ZN5Flash10WriteFlashEv+0xd4>
	{
		HAL_FLASH_Lock();
 8001f52:	f003 fd19 	bl	8005988 <HAL_FLASH_Lock>
		driveStatus->setError(DriveStatus::E_FLASH_ERROR);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f001 f918 	bl	8003192 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
		return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <_ZN5Flash10WriteFlashEv+0xd6>
	}

	return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3720      	adds	r7, #32
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>:
 */

#include "DO.h"
#include "../Tools/Delay.h"

DigitalOut::DigitalOut(GPIO_TypeDef* GPIOx_N, uint16_t GPIO_Pin_N, GPIO_TypeDef* GPIOx_P, uint16_t GPIO_Pin_P){
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	80fb      	strh	r3, [r7, #6]
	this->GPIO_Pin_N = GPIO_Pin_N;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	88fa      	ldrh	r2, [r7, #6]
 8001f84:	809a      	strh	r2, [r3, #4]
	this->GPIOx_N = GPIOx_N;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	601a      	str	r2, [r3, #0]
	this->GPIO_Pin_N = GPIO_Pin_P;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8b3a      	ldrh	r2, [r7, #24]
 8001f90:	809a      	strh	r2, [r3, #4]
	this->GPIOx_N = GPIOx_P;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	601a      	str	r2, [r3, #0]
}
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <_ZN3LEDC1EP12GPIO_TypeDeftb>:


#include "LED.h"


LED::LED(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool outputInverted) {
 8001fa6:	b480      	push	{r7}
 8001fa8:	b085      	sub	sp, #20
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	80fb      	strh	r3, [r7, #6]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	717b      	strb	r3, [r7, #5]

	this->GPIO_Pin = GPIO_Pin;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	88fa      	ldrh	r2, [r7, #6]
 8001fc0:	809a      	strh	r2, [r3, #4]
	this->GPIOx = GPIOx;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	601a      	str	r2, [r3, #0]
	this->outputInverted = outputInverted;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	797a      	ldrb	r2, [r7, #5]
 8001fcc:	719a      	strb	r2, [r3, #6]
}
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <_ZN3LED3OFFEv>:
}

/*
 * LED OFF method
 */
void LED::OFF() {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
	//check if output is inverted
	if(outputInverted){
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	799b      	ldrb	r3, [r3, #6]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <_ZN3LED3OFFEv+0x22>
		//clear output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	889b      	ldrh	r3, [r3, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f004 f842 	bl	8006080 <HAL_GPIO_WritePin>
	}else{
		//write output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
	}
}
 8001ffc:	e007      	b.n	800200e <_ZN3LED3OFFEv+0x32>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	889b      	ldrh	r3, [r3, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	4619      	mov	r1, r3
 800200a:	f004 f839 	bl	8006080 <HAL_GPIO_WritePin>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <_ZN3LED6ToggleEv>:

/*
 * LED Toggle method
 */
void LED::Toggle() {
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	889b      	ldrh	r3, [r3, #4]
 8002026:	4619      	mov	r1, r3
 8002028:	4610      	mov	r0, r2
 800202a:	f004 f841 	bl	80060b0 <HAL_GPIO_TogglePin>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <_ZN10RFM95_LoRaC1Ev>:
 */

#include "RFM95.h"
#include "../AppMain/AppMain.h"

RFM95_LoRa::RFM95_LoRa() :
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(0)
 8002040:	4a0a      	ldr	r2, [pc, #40]	; (800206c <_ZN10RFM95_LoRaC1Ev+0x34>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	615a      	str	r2, [r3, #20]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	61da      	str	r2, [r3, #28]
{

}
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	0800ed28 	.word	0x0800ed28

08002070 <_ZN10RFM95_LoRa9selectRFMEv>:
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::selectRFM(){
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_RESET);
 8002078:	2200      	movs	r2, #0
 800207a:	2108      	movs	r1, #8
 800207c:	4803      	ldr	r0, [pc, #12]	; (800208c <_ZN10RFM95_LoRa9selectRFMEv+0x1c>)
 800207e:	f003 ffff 	bl	8006080 <HAL_GPIO_WritePin>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	48000400 	.word	0x48000400

08002090 <_ZN10RFM95_LoRa11deselectRFMEv>:
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::deselectRFM(){
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_SET);
 8002098:	2201      	movs	r2, #1
 800209a:	2108      	movs	r1, #8
 800209c:	4803      	ldr	r0, [pc, #12]	; (80020ac <_ZN10RFM95_LoRa11deselectRFMEv+0x1c>)
 800209e:	f003 ffef 	bl	8006080 <HAL_GPIO_WritePin>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	48000400 	.word	0x48000400

080020b0 <_ZN10RFM95_LoRa8resetRFMEv>:

void RFM95_LoRa::resetRFM(){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2110      	movs	r1, #16
 80020bc:	4808      	ldr	r0, [pc, #32]	; (80020e0 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 80020be:	f003 ffdf 	bl	8006080 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80020c2:	2001      	movs	r0, #1
 80020c4:	f002 f85a 	bl	800417c <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 80020c8:	2201      	movs	r2, #1
 80020ca:	2110      	movs	r1, #16
 80020cc:	4804      	ldr	r0, [pc, #16]	; (80020e0 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 80020ce:	f003 ffd7 	bl	8006080 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80020d2:	2005      	movs	r0, #5
 80020d4:	f002 f852 	bl	800417c <HAL_Delay>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	48000400 	.word	0x48000400

080020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>:

bool RFM95_LoRa::writeRegister(uint8_t addr, uint8_t data){
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	70fb      	strb	r3, [r7, #3]
 80020f0:	4613      	mov	r3, r2
 80020f2:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	733b      	strb	r3, [r7, #12]
 80020fe:	78bb      	ldrb	r3, [r7, #2]
 8002100:	737b      	strb	r3, [r7, #13]
	selectRFM();
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ffb4 	bl	8002070 <_ZN10RFM95_LoRa9selectRFMEv>
	if(HAL_SPI_Transmit(&hspi3, (uint8_t*)buff, 2, 100) != HAL_OK){
 8002108:	f107 010c 	add.w	r1, r7, #12
 800210c:	2364      	movs	r3, #100	; 0x64
 800210e:	2202      	movs	r2, #2
 8002110:	480b      	ldr	r0, [pc, #44]	; (8002140 <_ZN10RFM95_LoRa13writeRegisterEhh+0x5c>)
 8002112:	f006 ffd2 	bl	80090ba <HAL_SPI_Transmit>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf14      	ite	ne
 800211c:	2301      	movne	r3, #1
 800211e:	2300      	moveq	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d004      	beq.n	8002130 <_ZN10RFM95_LoRa13writeRegisterEhh+0x4c>
		deselectRFM();
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffb2 	bl	8002090 <_ZN10RFM95_LoRa11deselectRFMEv>
		return false;
 800212c:	2300      	movs	r3, #0
 800212e:	e003      	b.n	8002138 <_ZN10RFM95_LoRa13writeRegisterEhh+0x54>
	}
	deselectRFM();
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ffad 	bl	8002090 <_ZN10RFM95_LoRa11deselectRFMEv>
	return true;
 8002136:	2301      	movs	r3, #1
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	200004c0 	.word	0x200004c0

08002144 <_ZN10RFM95_LoRa12readRegisterEh>:

uint8_t RFM95_LoRa::readRegister(uint8_t addr){
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af02      	add	r7, sp, #8
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 8002150:	2300      	movs	r3, #0
 8002152:	81bb      	strh	r3, [r7, #12]
	uint8_t txData[1] = {addr};
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	723b      	strb	r3, [r7, #8]

	selectRFM();
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff ff89 	bl	8002070 <_ZN10RFM95_LoRa9selectRFMEv>
	HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 800215e:	f107 020c 	add.w	r2, r7, #12
 8002162:	f107 0108 	add.w	r1, r7, #8
 8002166:	2364      	movs	r3, #100	; 0x64
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	2302      	movs	r3, #2
 800216c:	4805      	ldr	r0, [pc, #20]	; (8002184 <_ZN10RFM95_LoRa12readRegisterEh+0x40>)
 800216e:	f007 f912 	bl	8009396 <HAL_SPI_TransmitReceive>
	deselectRFM();
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ff8c 	bl	8002090 <_ZN10RFM95_LoRa11deselectRFMEv>
	return rxData[1];
 8002178:	7b7b      	ldrb	r3, [r7, #13]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200004c0 	.word	0x200004c0

08002188 <_ZN10RFM95_LoRa5beginEl>:


int RFM95_LoRa::begin(long frequency){
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
 resetRFM();
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ff8c 	bl	80020b0 <_ZN10RFM95_LoRa8resetRFMEv>
  // check version
  uint8_t version = readRegister(REG_VERSION);
 8002198:	2142      	movs	r1, #66	; 0x42
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ffd2 	bl	8002144 <_ZN10RFM95_LoRa12readRegisterEh>
 80021a0:	4603      	mov	r3, r0
 80021a2:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	2b12      	cmp	r3, #18
 80021a8:	d001      	beq.n	80021ae <_ZN10RFM95_LoRa5beginEl+0x26>
    return 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e02b      	b.n	8002206 <_ZN10RFM95_LoRa5beginEl+0x7e>
  }
  // put in sleep mode
  sleep();
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f995 	bl	80024de <_ZN10RFM95_LoRa5sleepEv>
  // set frequency
  setFrequency(frequency);
 80021b4:	6839      	ldr	r1, [r7, #0]
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f9dc 	bl	8002574 <_ZN10RFM95_LoRa12setFrequencyEl>
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 80021bc:	2200      	movs	r2, #0
 80021be:	210e      	movs	r1, #14
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ff8f 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	210f      	movs	r1, #15
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ff8a 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 80021d0:	210c      	movs	r1, #12
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ffb6 	bl	8002144 <_ZN10RFM95_LoRa12readRegisterEh>
 80021d8:	4603      	mov	r3, r0
 80021da:	f043 0303 	orr.w	r3, r3, #3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	461a      	mov	r2, r3
 80021e2:	210c      	movs	r1, #12
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ff7d 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 80021ea:	2204      	movs	r2, #4
 80021ec:	2126      	movs	r1, #38	; 0x26
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ff78 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set output power to 17 dBm
  setTxPower(20);
 80021f4:	2201      	movs	r2, #1
 80021f6:	2114      	movs	r1, #20
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f97d 	bl	80024f8 <_ZN10RFM95_LoRa10setTxPowerEii>
  // put in standby mode
  idle();
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f960 	bl	80024c4 <_ZN10RFM95_LoRa4idleEv>
  return 1;
 8002204:	2301      	movs	r3, #1
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <_ZN10RFM95_LoRa11beginPacketEi>:
  sleep();
}



int RFM95_LoRa::beginPacket(int implicitHeader){
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	6039      	str	r1, [r7, #0]
  // put in standby mode
  idle();
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f953 	bl	80024c4 <_ZN10RFM95_LoRa4idleEv>

  if (implicitHeader) {
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <_ZN10RFM95_LoRa11beginPacketEi+0x1e>
    implicitHeaderMode();
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 fad8 	bl	80027da <_ZN10RFM95_LoRa18implicitHeaderModeEv>
 800222a:	e002      	b.n	8002232 <_ZN10RFM95_LoRa11beginPacketEi+0x24>
  } else {
    explicitHeaderMode();
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 fabc 	bl	80027aa <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // reset FIFO address and paload length
  writeRegister(REG_FIFO_ADDR_PTR, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	210d      	movs	r1, #13
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ff54 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_PAYLOAD_LENGTH, 0);
 800223c:	2200      	movs	r2, #0
 800223e:	2122      	movs	r1, #34	; 0x22
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff4f 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 8002246:	2301      	movs	r3, #1
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <_ZN10RFM95_LoRa9endPacketEv>:



int RFM95_LoRa::endPacket(){
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  // put in TX mode
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8002258:	2283      	movs	r2, #131	; 0x83
 800225a:	2101      	movs	r1, #1
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ff41 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // wait for TX done
  while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 8002262:	2112      	movs	r1, #18
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff6d 	bl	8002144 <_ZN10RFM95_LoRa12readRegisterEh>
 800226a:	4603      	mov	r3, r0
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	bf0c      	ite	eq
 8002274:	2301      	moveq	r3, #1
 8002276:	2300      	movne	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d000      	beq.n	8002280 <_ZN10RFM95_LoRa9endPacketEv+0x30>
 800227e:	e7f0      	b.n	8002262 <_ZN10RFM95_LoRa9endPacketEv+0x12>

  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8002280:	2208      	movs	r2, #8
 8002282:	2112      	movs	r1, #18
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ff2d 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 800228a:	2301      	movs	r3, #1
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <_ZN10RFM95_LoRa11parsePacketEi>:



int RFM95_LoRa::parsePacket(int size)

{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 80022a2:	2112      	movs	r1, #18
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff ff4d 	bl	8002144 <_ZN10RFM95_LoRa12readRegisterEh>
 80022aa:	4603      	mov	r3, r0
 80022ac:	60bb      	str	r3, [r7, #8]
  if (size > 0) {
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	dd0a      	ble.n	80022ca <_ZN10RFM95_LoRa11parsePacketEi+0x36>
    implicitHeaderMode();
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 fa90 	bl	80027da <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	2122      	movs	r1, #34	; 0x22
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff ff0e 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
 80022c8:	e002      	b.n	80022d0 <_ZN10RFM95_LoRa11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fa6d 	bl	80027aa <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	2112      	movs	r1, #18
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7ff ff03 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d026      	beq.n	8002336 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d121      	bne.n	8002336 <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
    // received a packet
    _packetIndex = 0;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	615a      	str	r2, [r3, #20]
    // read packet length
    if (_implicitHeaderMode) {
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d006      	beq.n	800230e <_ZN10RFM95_LoRa11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 8002300:	2122      	movs	r1, #34	; 0x22
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ff1e 	bl	8002144 <_ZN10RFM95_LoRa12readRegisterEh>
 8002308:	4603      	mov	r3, r0
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	e005      	b.n	800231a <_ZN10RFM95_LoRa11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 800230e:	2113      	movs	r1, #19
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff17 	bl	8002144 <_ZN10RFM95_LoRa12readRegisterEh>
 8002316:	4603      	mov	r3, r0
 8002318:	60fb      	str	r3, [r7, #12]
    }
    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 800231a:	2110      	movs	r1, #16
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ff11 	bl	8002144 <_ZN10RFM95_LoRa12readRegisterEh>
 8002322:	4603      	mov	r3, r0
 8002324:	461a      	mov	r2, r3
 8002326:	210d      	movs	r1, #13
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff fedb 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in standby mode
    idle();
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f8c8 	bl	80024c4 <_ZN10RFM95_LoRa4idleEv>
 8002334:	e015      	b.n	8002362 <_ZN10RFM95_LoRa11parsePacketEi+0xce>
  } else if (readRegister(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
 8002336:	2101      	movs	r1, #1
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff ff03 	bl	8002144 <_ZN10RFM95_LoRa12readRegisterEh>
 800233e:	4603      	mov	r3, r0
 8002340:	2b86      	cmp	r3, #134	; 0x86
 8002342:	bf14      	ite	ne
 8002344:	2301      	movne	r3, #1
 8002346:	2300      	moveq	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d009      	beq.n	8002362 <_ZN10RFM95_LoRa11parsePacketEi+0xce>
    // not currently in RX mode
    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 800234e:	2200      	movs	r2, #0
 8002350:	210d      	movs	r1, #13
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff fec6 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in single RX mode
    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8002358:	2286      	movs	r2, #134	; 0x86
 800235a:	2101      	movs	r1, #1
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff fec1 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  return packetLength;
 8002362:	68fb      	ldr	r3, [r7, #12]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <_ZN10RFM95_LoRa5writeEh>:

float RFM95_LoRa::packetSnr(){
  return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
}

size_t RFM95_LoRa::write(uint8_t byte){
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	3304      	adds	r3, #4
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	1cf9      	adds	r1, r7, #3
 8002382:	2201      	movs	r2, #1
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	4798      	blx	r3
 8002388:	4603      	mov	r3, r0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <_ZN10RFM95_LoRa5writeEPKhj>:



size_t RFM95_LoRa::write(const uint8_t *buffer, size_t size){
 8002392:	b580      	push	{r7, lr}
 8002394:	b086      	sub	sp, #24
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 800239e:	2122      	movs	r1, #34	; 0x22
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f7ff fecf 	bl	8002144 <_ZN10RFM95_LoRa12readRegisterEh>
 80023a6:	4603      	mov	r3, r0
 80023a8:	613b      	str	r3, [r7, #16]
  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4413      	add	r3, r2
 80023b0:	2bff      	cmp	r3, #255	; 0xff
 80023b2:	d903      	bls.n	80023bc <_ZN10RFM95_LoRa5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80023ba:	607b      	str	r3, [r7, #4]
  }
  // write data
  for (size_t i = 0; i < size; i++) {
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d20c      	bcs.n	80023e2 <_ZN10RFM95_LoRa5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	4413      	add	r3, r2
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	2100      	movs	r1, #0
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f7ff fe85 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3301      	adds	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	e7ee      	b.n	80023c0 <_ZN10RFM95_LoRa5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	2122      	movs	r1, #34	; 0x22
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f7ff fe76 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return size;
 80023f8:	687b      	ldr	r3, [r7, #4]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <_ZN10RFM95_LoRa9availableEv>:


int RFM95_LoRa::available()
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 800240a:	2113      	movs	r1, #19
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff fe99 	bl	8002144 <_ZN10RFM95_LoRa12readRegisterEh>
 8002412:	4603      	mov	r3, r0
 8002414:	461a      	mov	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	1ad3      	subs	r3, r2, r3
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <_ZN10RFM95_LoRa4readEv>:



int RFM95_LoRa::read(){
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if (!available()) {
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	3308      	adds	r3, #8
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	4798      	blx	r3
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	bf0c      	ite	eq
 800243e:	2301      	moveq	r3, #1
 8002440:	2300      	movne	r3, #0
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <_ZN10RFM95_LoRa4readEv+0x2a>
    return -1;
 8002448:	f04f 33ff 	mov.w	r3, #4294967295
 800244c:	e009      	b.n	8002462 <_ZN10RFM95_LoRa4readEv+0x3e>
  }
  _packetIndex++;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	615a      	str	r2, [r3, #20]
  return readRegister(REG_FIFO);
 8002458:	2100      	movs	r1, #0
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff fe72 	bl	8002144 <_ZN10RFM95_LoRa12readRegisterEh>
 8002460:	4603      	mov	r3, r0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <_ZN10RFM95_LoRa4peekEv>:



int RFM95_LoRa::peek(){
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	3308      	adds	r3, #8
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	4798      	blx	r3
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	bf0c      	ite	eq
 8002484:	2301      	moveq	r3, #1
 8002486:	2300      	movne	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <_ZN10RFM95_LoRa4peekEv+0x2a>
    return -1;
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	e013      	b.n	80024bc <_ZN10RFM95_LoRa4peekEv+0x52>
  }
  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 8002494:	210d      	movs	r1, #13
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff fe54 	bl	8002144 <_ZN10RFM95_LoRa12readRegisterEh>
 800249c:	4603      	mov	r3, r0
 800249e:	60fb      	str	r3, [r7, #12]
  // read
  uint8_t b = readRegister(REG_FIFO);
 80024a0:	2100      	movs	r1, #0
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff fe4e 	bl	8002144 <_ZN10RFM95_LoRa12readRegisterEh>
 80024a8:	4603      	mov	r3, r0
 80024aa:	72fb      	strb	r3, [r7, #11]
  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	210d      	movs	r1, #13
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff fe15 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return b;
 80024ba:	7afb      	ldrb	r3, [r7, #11]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <_ZN10RFM95_LoRa4idleEv>:
    explicitHeaderMode();
  }
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
}

void RFM95_LoRa::idle(){
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 80024cc:	2281      	movs	r2, #129	; 0x81
 80024ce:	2101      	movs	r1, #1
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff fe07 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <_ZN10RFM95_LoRa5sleepEv>:

void RFM95_LoRa::sleep(){
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 80024e6:	2280      	movs	r2, #128	; 0x80
 80024e8:	2101      	movs	r1, #1
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff fdfa 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <_ZN10RFM95_LoRa10setTxPowerEii>:



void RFM95_LoRa::setTxPower(int level, int outputPin){
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d116      	bne.n	8002538 <_ZN10RFM95_LoRa10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	da02      	bge.n	8002516 <_ZN10RFM95_LoRa10setTxPowerEii+0x1e>
      level = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	e004      	b.n	8002520 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
    } else if (level > 14) {
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b0e      	cmp	r3, #14
 800251a:	dd01      	ble.n	8002520 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
      level = 14;
 800251c:	230e      	movs	r3, #14
 800251e:	60bb      	str	r3, [r7, #8]
    }
    writeRegister(REG_PA_CONFIG, 0x70 | level);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	b25b      	sxtb	r3, r3
 8002524:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002528:	b25b      	sxtb	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	2109      	movs	r1, #9
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f7ff fdd7 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
    } else if (level > 17) {
      level = 17;
    }
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 8002536:	e018      	b.n	800256a <_ZN10RFM95_LoRa10setTxPowerEii+0x72>
    if (level < 2) {
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b01      	cmp	r3, #1
 800253c:	dc02      	bgt.n	8002544 <_ZN10RFM95_LoRa10setTxPowerEii+0x4c>
      level = 2;
 800253e:	2302      	movs	r3, #2
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	e004      	b.n	800254e <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
    } else if (level > 17) {
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b11      	cmp	r3, #17
 8002548:	dd01      	ble.n	800254e <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
      level = 17;
 800254a:	2311      	movs	r3, #17
 800254c:	60bb      	str	r3, [r7, #8]
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	3b02      	subs	r3, #2
 8002554:	b2db      	uxtb	r3, r3
 8002556:	b25b      	sxtb	r3, r3
 8002558:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800255c:	b25b      	sxtb	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	2109      	movs	r1, #9
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f7ff fdbd 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <_ZN10RFM95_LoRa12setFrequencyEl>:



void RFM95_LoRa::setFrequency(long frequency){
 8002574:	b5b0      	push	{r4, r5, r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	6838      	ldr	r0, [r7, #0]
 8002582:	6108      	str	r0, [r1, #16]
  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8002584:	6839      	ldr	r1, [r7, #0]
 8002586:	17c8      	asrs	r0, r1, #31
 8002588:	460a      	mov	r2, r1
 800258a:	4603      	mov	r3, r0
 800258c:	1355      	asrs	r5, r2, #13
 800258e:	04d4      	lsls	r4, r2, #19
 8002590:	4a1a      	ldr	r2, [pc, #104]	; (80025fc <_ZN10RFM95_LoRa12setFrequencyEl+0x88>)
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	4620      	mov	r0, r4
 8002598:	4629      	mov	r1, r5
 800259a:	f7fd fe17 	bl	80001cc <__aeabi_uldivmod>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 80025a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	0c02      	lsrs	r2, r0, #16
 80025b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80025b8:	0c0b      	lsrs	r3, r1, #16
 80025ba:	b2d3      	uxtb	r3, r2
 80025bc:	461a      	mov	r2, r3
 80025be:	2106      	movs	r1, #6
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff fd8f 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 80025c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	0a02      	lsrs	r2, r0, #8
 80025d4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80025d8:	0a0b      	lsrs	r3, r1, #8
 80025da:	b2d3      	uxtb	r3, r2
 80025dc:	461a      	mov	r2, r3
 80025de:	2107      	movs	r1, #7
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff fd7f 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 80025e6:	7a3b      	ldrb	r3, [r7, #8]
 80025e8:	461a      	mov	r2, r3
 80025ea:	2108      	movs	r1, #8
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff fd79 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bdb0      	pop	{r4, r5, r7, pc}
 80025fa:	bf00      	nop
 80025fc:	01e84800 	.word	0x01e84800

08002600 <_ZN10RFM95_LoRa18setSpreadingFactorEi>:



void RFM95_LoRa::setSpreadingFactor(int sf){
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b05      	cmp	r3, #5
 800260e:	dc02      	bgt.n	8002616 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x16>
    sf = 6;
 8002610:	2306      	movs	r3, #6
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	e004      	b.n	8002620 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b0c      	cmp	r3, #12
 800261a:	dd01      	ble.n	8002620 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
    sf = 12;
 800261c:	230c      	movs	r3, #12
 800261e:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	2b06      	cmp	r3, #6
 8002624:	d10a      	bne.n	800263c <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 8002626:	22c5      	movs	r2, #197	; 0xc5
 8002628:	2131      	movs	r1, #49	; 0x31
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff fd5a 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 8002630:	220c      	movs	r2, #12
 8002632:	2137      	movs	r1, #55	; 0x37
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff fd55 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
 800263a:	e009      	b.n	8002650 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 800263c:	22c3      	movs	r2, #195	; 0xc3
 800263e:	2131      	movs	r1, #49	; 0x31
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff fd4f 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 8002646:	220a      	movs	r2, #10
 8002648:	2137      	movs	r1, #55	; 0x37
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff fd4a 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 8002650:	211e      	movs	r1, #30
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff fd76 	bl	8002144 <_ZN10RFM95_LoRa12readRegisterEh>
 8002658:	4603      	mov	r3, r0
 800265a:	b25b      	sxtb	r3, r3
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	b25a      	sxtb	r2, r3
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	b25b      	sxtb	r3, r3
 8002668:	4313      	orrs	r3, r2
 800266a:	b25b      	sxtb	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	211e      	movs	r1, #30
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff fd36 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002678:	bf00      	nop
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <_ZN10RFM95_LoRa18setSignalBandwidthEl>:


void RFM95_LoRa::setSignalBandwidth(long sbw){
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  int bw;
  if (sbw <= 7.8E3) {
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	f641 6278 	movw	r2, #7800	; 0x1e78
 8002690:	4293      	cmp	r3, r2
 8002692:	dc02      	bgt.n	800269a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x1a>
    bw = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	e03f      	b.n	800271a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 10.4E3) {
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	f642 02a0 	movw	r2, #10400	; 0x28a0
 80026a0:	4293      	cmp	r3, r2
 80026a2:	dc02      	bgt.n	80026aa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x2a>
    bw = 1;
 80026a4:	2301      	movs	r3, #1
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	e037      	b.n	800271a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 15.6E3) {
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 80026b0:	4293      	cmp	r3, r2
 80026b2:	dc02      	bgt.n	80026ba <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x3a>
    bw = 2;
 80026b4:	2302      	movs	r3, #2
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	e02f      	b.n	800271a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 20.8E3) {
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f245 1240 	movw	r2, #20800	; 0x5140
 80026c0:	4293      	cmp	r3, r2
 80026c2:	dc02      	bgt.n	80026ca <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x4a>
    bw = 3;
 80026c4:	2303      	movs	r3, #3
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	e027      	b.n	800271a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 31.25E3) {
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	f647 2212 	movw	r2, #31250	; 0x7a12
 80026d0:	4293      	cmp	r3, r2
 80026d2:	dc02      	bgt.n	80026da <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x5a>
    bw = 4;
 80026d4:	2304      	movs	r3, #4
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	e01f      	b.n	800271a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 41.7E3) {
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 80026e0:	4293      	cmp	r3, r2
 80026e2:	dc02      	bgt.n	80026ea <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x6a>
    bw = 5;
 80026e4:	2305      	movs	r3, #5
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	e017      	b.n	800271a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 62.5E3) {
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f24f 4224 	movw	r2, #62500	; 0xf424
 80026f0:	4293      	cmp	r3, r2
 80026f2:	dc02      	bgt.n	80026fa <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x7a>
    bw = 6;
 80026f4:	2306      	movs	r3, #6
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	e00f      	b.n	800271a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 125E3) {
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	4a13      	ldr	r2, [pc, #76]	; (800274c <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xcc>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	dc02      	bgt.n	8002708 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x88>
    bw = 7;
 8002702:	2307      	movs	r3, #7
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	e008      	b.n	800271a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 250E3) {
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4a11      	ldr	r2, [pc, #68]	; (8002750 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xd0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	dc02      	bgt.n	8002716 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x96>
    bw = 8;
 8002710:	2308      	movs	r3, #8
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	e001      	b.n	800271a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 8002716:	2309      	movs	r3, #9
 8002718:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 800271a:	211d      	movs	r1, #29
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff fd11 	bl	8002144 <_ZN10RFM95_LoRa12readRegisterEh>
 8002722:	4603      	mov	r3, r0
 8002724:	b25b      	sxtb	r3, r3
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	b25a      	sxtb	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	b25b      	sxtb	r3, r3
 8002732:	4313      	orrs	r3, r2
 8002734:	b25b      	sxtb	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	211d      	movs	r1, #29
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff fcd1 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	0001e848 	.word	0x0001e848
 8002750:	0003d090 	.word	0x0003d090

08002754 <_ZN10RFM95_LoRa14setCodingRate4Ei>:



void RFM95_LoRa::setCodingRate4(int denominator){
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b04      	cmp	r3, #4
 8002762:	dc02      	bgt.n	800276a <_ZN10RFM95_LoRa14setCodingRate4Ei+0x16>
    denominator = 5;
 8002764:	2305      	movs	r3, #5
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	e004      	b.n	8002774 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b08      	cmp	r3, #8
 800276e:	dd01      	ble.n	8002774 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
	  denominator = 8;
 8002770:	2308      	movs	r3, #8
 8002772:	603b      	str	r3, [r7, #0]
  }
  int cr = denominator - 4;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	3b04      	subs	r3, #4
 8002778:	60fb      	str	r3, [r7, #12]
  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 800277a:	211d      	movs	r1, #29
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff fce1 	bl	8002144 <_ZN10RFM95_LoRa12readRegisterEh>
 8002782:	4603      	mov	r3, r0
 8002784:	b25b      	sxtb	r3, r3
 8002786:	f023 030e 	bic.w	r3, r3, #14
 800278a:	b25a      	sxtb	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	b25b      	sxtb	r3, r3
 8002792:	4313      	orrs	r3, r2
 8002794:	b25b      	sxtb	r3, r3
 8002796:	b2db      	uxtb	r3, r3
 8002798:	461a      	mov	r2, r3
 800279a:	211d      	movs	r1, #29
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff fca1 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <_ZN10RFM95_LoRa18explicitHeaderModeEv>:
uint8_t RFM95_LoRa::random(){
  return readRegister(REG_RSSI_WIDEBAND);
}


void RFM95_LoRa::explicitHeaderMode(){
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 80027b8:	211d      	movs	r1, #29
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff fcc2 	bl	8002144 <_ZN10RFM95_LoRa12readRegisterEh>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	211d      	movs	r1, #29
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff fc89 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <_ZN10RFM95_LoRa18implicitHeaderModeEv>:


void RFM95_LoRa::implicitHeaderMode(){
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 80027e8:	211d      	movs	r1, #29
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff fcaa 	bl	8002144 <_ZN10RFM95_LoRa12readRegisterEh>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	211d      	movs	r1, #29
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff fc71 	bl	80020e4 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <_ZN10RFM95_LoRa7InitRFMEv>:
    writeRegister(REG_FIFO_ADDR_PTR, 0);
  }
}


bool RFM95_LoRa::InitRFM(){
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]


	setFrequency(868000000);
 8002814:	4914      	ldr	r1, [pc, #80]	; (8002868 <_ZN10RFM95_LoRa7InitRFMEv+0x5c>)
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff feac 	bl	8002574 <_ZN10RFM95_LoRa12setFrequencyEl>
	setTxPower(17, PA_OUTPUT_PA_BOOST_PIN);
 800281c:	2201      	movs	r2, #1
 800281e:	2111      	movs	r1, #17
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff fe69 	bl	80024f8 <_ZN10RFM95_LoRa10setTxPowerEii>
	setSignalBandwidth(31.25E3);
 8002826:	f647 2112 	movw	r1, #31250	; 0x7a12
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff ff28 	bl	8002680 <_ZN10RFM95_LoRa18setSignalBandwidthEl>
	setSpreadingFactor(12);
 8002830:	210c      	movs	r1, #12
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff fee4 	bl	8002600 <_ZN10RFM95_LoRa18setSpreadingFactorEi>
	setCodingRate4(5);
 8002838:	2105      	movs	r1, #5
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff ff8a 	bl	8002754 <_ZN10RFM95_LoRa14setCodingRate4Ei>
	if (!begin(866E6)) {
 8002840:	490a      	ldr	r1, [pc, #40]	; (800286c <_ZN10RFM95_LoRa7InitRFMEv+0x60>)
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff fca0 	bl	8002188 <_ZN10RFM95_LoRa5beginEl>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	bf0c      	ite	eq
 800284e:	2301      	moveq	r3, #1
 8002850:	2300      	movne	r3, #0
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <_ZN10RFM95_LoRa7InitRFMEv+0x50>
		return false;
 8002858:	2300      	movs	r3, #0
 800285a:	e000      	b.n	800285e <_ZN10RFM95_LoRa7InitRFMEv+0x52>
	}
	return true;
 800285c:	2301      	movs	r3, #1
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	33bca100 	.word	0x33bca100
 800286c:	339e1c80 	.word	0x339e1c80

08002870 <_ZNK13DriveSettings16getClampingSpeedEv>:

/****************************************************************************************
 / * 	Clamping speed get/set
 ****************************************************************************************/
uint16_t DriveSettings::getClampingSpeed() const
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	return clampingSpeed;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	891b      	ldrh	r3, [r3, #8]
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <_ZN13DriveSettings16setClampingSpeedEt>:

void DriveSettings::setClampingSpeed(uint16_t clampingSpeed)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	807b      	strh	r3, [r7, #2]
	if (this->clampingSpeed != clampingSpeed)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	891b      	ldrh	r3, [r3, #8]
 8002898:	887a      	ldrh	r2, [r7, #2]
 800289a:	429a      	cmp	r2, r3
 800289c:	d009      	beq.n	80028b2 <_ZN13DriveSettings16setClampingSpeedEt+0x2a>
	{
		this->clampingSpeed = clampingSpeed;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	887a      	ldrh	r2, [r7, #2]
 80028a2:	811a      	strh	r2, [r3, #8]
		this->settingsChangedReg |= CLAMPING_SPEED_CHANGE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	8b9b      	ldrh	r3, [r3, #28]
 80028a8:	f043 0308 	orr.w	r3, r3, #8
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	839a      	strh	r2, [r3, #28]
	}
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <_ZNK13DriveSettings17getClampingTorqueEv>:

/****************************************************************************************
 / * 	Clamping torque get/set
 ****************************************************************************************/
uint16_t DriveSettings::getClampingTorque() const
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
	return clampingTorque;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	889b      	ldrh	r3, [r3, #4]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <_ZN13DriveSettings17setClampingTorqueEt>:

void DriveSettings::setClampingTorque(uint16_t clampingTorque)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	460b      	mov	r3, r1
 80028e0:	807b      	strh	r3, [r7, #2]
	if (this->clampingTorque != clampingTorque)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	889b      	ldrh	r3, [r3, #4]
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d009      	beq.n	8002900 <_ZN13DriveSettings17setClampingTorqueEt+0x2a>
	{
		this->clampingTorque = clampingTorque;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	809a      	strh	r2, [r3, #4]
		this->settingsChangedReg |= CLAMPING_TORQUE_CHANGE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	8b9b      	ldrh	r3, [r3, #28]
 80028f6:	f043 0304 	orr.w	r3, r3, #4
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	839a      	strh	r2, [r3, #28]
	}
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <_ZNK13DriveSettings12getInPosDiffEv>:

/****************************************************************************************
 / * 	clamping position difference get/set
 ****************************************************************************************/
uint16_t DriveSettings::getInPosDiff() const
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	return inPosDiff;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	899b      	ldrh	r3, [r3, #12]
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <_ZN13DriveSettings12setInPosDiffEt>:

void DriveSettings::setInPosDiff(uint16_t inPosDiff)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	807b      	strh	r3, [r7, #2]
	if (this->inPosDiff != inPosDiff)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	899b      	ldrh	r3, [r3, #12]
 8002934:	887a      	ldrh	r2, [r7, #2]
 8002936:	429a      	cmp	r2, r3
 8002938:	d009      	beq.n	800294e <_ZN13DriveSettings12setInPosDiffEt+0x2a>
	{
		this->inPosDiff = inPosDiff;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	887a      	ldrh	r2, [r7, #2]
 800293e:	819a      	strh	r2, [r3, #12]
		this->settingsChangedReg |= IN_POS_DIFF_CHANGE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	8b9b      	ldrh	r3, [r3, #28]
 8002944:	f043 0320 	orr.w	r3, r3, #32
 8002948:	b29a      	uxth	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	839a      	strh	r2, [r3, #28]
	}

}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <_ZNK13DriveSettings18getOpeningDistanceEv>:

/****************************************************************************************
 / * 	opening distance get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOpeningDistance() const
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
	return openingDistance;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	89db      	ldrh	r3, [r3, #14]
}
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <_ZN13DriveSettings18setOpeningDistanceEt>:

void DriveSettings::setOpeningDistance(uint16_t openingDistance)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	460b      	mov	r3, r1
 800297c:	807b      	strh	r3, [r7, #2]
	if (this->openingDistance != openingDistance)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	89db      	ldrh	r3, [r3, #14]
 8002982:	887a      	ldrh	r2, [r7, #2]
 8002984:	429a      	cmp	r2, r3
 8002986:	d009      	beq.n	800299c <_ZN13DriveSettings18setOpeningDistanceEt+0x2a>
	{
		this->openingDistance = openingDistance;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	887a      	ldrh	r2, [r7, #2]
 800298c:	81da      	strh	r2, [r3, #14]
		this->settingsChangedReg |= OPENING_DISTANCE_CHANGE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	8b9b      	ldrh	r3, [r3, #28]
 8002992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002996:	b29a      	uxth	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	839a      	strh	r2, [r3, #28]
	}
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <_ZNK13DriveSettings27getOverCurrentTimeThresholdEv>:

/****************************************************************************************
 / * 	overcurrent time threshold get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentTimeThreshold() const
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
	return overCurrentTimeThreshold;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	8b1b      	ldrh	r3, [r3, #24]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <_ZN13DriveSettings27setOverCurrentTimeThresholdEt>:

void DriveSettings::setOverCurrentTimeThreshold(
		uint16_t overCurrentTimeThreshold)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	807b      	strh	r3, [r7, #2]
	if (this->overCurrentTimeThreshold != overCurrentTimeThreshold)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	8b1b      	ldrh	r3, [r3, #24]
 80029d0:	887a      	ldrh	r2, [r7, #2]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d009      	beq.n	80029ea <_ZN13DriveSettings27setOverCurrentTimeThresholdEt+0x2a>
	{
		this->overCurrentTimeThreshold = overCurrentTimeThreshold;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	887a      	ldrh	r2, [r7, #2]
 80029da:	831a      	strh	r2, [r3, #24]
		this->settingsChangedReg |= OVER_CURRENT_TIME_TH_CHANGE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	8b9b      	ldrh	r3, [r3, #28]
 80029e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	839a      	strh	r2, [r3, #28]
	}
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <_ZNK13DriveSettings21getOverCurrentWarningEv>:

/****************************************************************************************
 / * 	overcurrent warning get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentWarning() const
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
	return overCurrentWarning;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	8a9b      	ldrh	r3, [r3, #20]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <_ZN13DriveSettings21setOverCurrentWarningEt>:

void DriveSettings::setOverCurrentWarning(uint16_t overCurrentWarning)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	460b      	mov	r3, r1
 8002a18:	807b      	strh	r3, [r7, #2]
	if (this->overCurrentWarning != overCurrentWarning)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	8a9b      	ldrh	r3, [r3, #20]
 8002a1e:	887a      	ldrh	r2, [r7, #2]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d009      	beq.n	8002a38 <_ZN13DriveSettings21setOverCurrentWarningEt+0x2a>
	{
		this->overCurrentWarning = overCurrentWarning;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	887a      	ldrh	r2, [r7, #2]
 8002a28:	829a      	strh	r2, [r3, #20]
		this->settingsChangedReg |= OVER_CURRENT_WARNING_CHANGE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	8b9b      	ldrh	r3, [r3, #28]
 8002a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	839a      	strh	r2, [r3, #28]
	}
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <_ZNK13DriveSettings20getSelfShutdownDelayEv>:
/****************************************************************************************
 / * 	self shutdown delay get/set
 ****************************************************************************************/
uint16_t DriveSettings::getSelfShutdownDelay() const
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
	return selfShutdownDelay;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	895b      	ldrh	r3, [r3, #10]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <_ZN13DriveSettings20setSelfShutdownDelayEt>:

void DriveSettings::setSelfShutdownDelay(uint16_t selfShutdownDelay)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	807b      	strh	r3, [r7, #2]
	if (this->selfShutdownDelay != selfShutdownDelay)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	895b      	ldrh	r3, [r3, #10]
 8002a6c:	887a      	ldrh	r2, [r7, #2]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d009      	beq.n	8002a86 <_ZN13DriveSettings20setSelfShutdownDelayEt+0x2a>
	{
		this->selfShutdownDelay = selfShutdownDelay;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	887a      	ldrh	r2, [r7, #2]
 8002a76:	815a      	strh	r2, [r3, #10]
		this->settingsChangedReg |= SELF_SHUTDOWN_DELAY_CHANGE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	8b9b      	ldrh	r3, [r3, #28]
 8002a7c:	f043 0310 	orr.w	r3, r3, #16
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	839a      	strh	r2, [r3, #28]
	}
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <_ZNK13DriveSettings13getTeachSpeedEv>:

/****************************************************************************************
 / * 	teach speed get/set
 ****************************************************************************************/
uint16_t DriveSettings::getTeachSpeed() const
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
	return teachSpeed;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	88db      	ldrh	r3, [r3, #6]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <_ZN13DriveSettings13setTeachSpeedEt>:

void DriveSettings::setTeachSpeed(uint16_t teachSpeed)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	807b      	strh	r3, [r7, #2]
	if (this->teachSpeed != teachSpeed)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	88db      	ldrh	r3, [r3, #6]
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d009      	beq.n	8002ad4 <_ZN13DriveSettings13setTeachSpeedEt+0x2a>
	{
		this->teachSpeed = teachSpeed;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	887a      	ldrh	r2, [r7, #2]
 8002ac4:	80da      	strh	r2, [r3, #6]
		this->settingsChangedReg |= TEACH_SPEED_CHANGE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	8b9b      	ldrh	r3, [r3, #28]
 8002aca:	f043 0302 	orr.w	r3, r3, #2
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	839a      	strh	r2, [r3, #28]
	}
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <_ZNK13DriveSettings14getTeachTroqueEv>:
/****************************************************************************************
 / * 	teach torque get/set
 ****************************************************************************************/
uint16_t DriveSettings::getTeachTroque() const
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
	return teachTroque;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	885b      	ldrh	r3, [r3, #2]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <_ZN13DriveSettings14setTeachTroqueEt>:

void DriveSettings::setTeachTroque(uint16_t teachTroque)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	807b      	strh	r3, [r7, #2]
	if (this->teachTroque != teachTroque)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	885b      	ldrh	r3, [r3, #2]
 8002b08:	887a      	ldrh	r2, [r7, #2]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d009      	beq.n	8002b22 <_ZN13DriveSettings14setTeachTroqueEt+0x2a>
	{
		this->teachTroque = teachTroque;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	887a      	ldrh	r2, [r7, #2]
 8002b12:	805a      	strh	r2, [r3, #2]
		this->settingsChangedReg |= TEACH_TORQUE_CHANGE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	8b9b      	ldrh	r3, [r3, #28]
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	839a      	strh	r2, [r3, #28]
	}
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <_ZNK13DriveSettings20getUnderVoltageErrorEv>:
/****************************************************************************************
 / * 	undervoltage error get/set
 ****************************************************************************************/
uint16_t DriveSettings::getUnderVoltageError() const
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
	return underVoltageError;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	8a5b      	ldrh	r3, [r3, #18]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <_ZN13DriveSettings20setUnderVoltageErrorEt>:

void DriveSettings::setUnderVoltageError(uint16_t underVoltageError)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	807b      	strh	r3, [r7, #2]
	if (this->underVoltageError != underVoltageError)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	8a5b      	ldrh	r3, [r3, #18]
 8002b56:	887a      	ldrh	r2, [r7, #2]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d009      	beq.n	8002b70 <_ZN13DriveSettings20setUnderVoltageErrorEt+0x2a>
	{
		this->underVoltageError = underVoltageError;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	887a      	ldrh	r2, [r7, #2]
 8002b60:	825a      	strh	r2, [r3, #18]
		this->settingsChangedReg |= UNDERVOLTAGE_ERROR_CHANGE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	8b9b      	ldrh	r3, [r3, #28]
 8002b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	839a      	strh	r2, [r3, #28]
	}
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <_ZNK13DriveSettings22getUnderVoltageWarningEv>:

/****************************************************************************************
 / * 	undervoltage warning get/set
 ****************************************************************************************/
uint16_t DriveSettings::getUnderVoltageWarning() const
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	return underVoltageWarning;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	8a1b      	ldrh	r3, [r3, #16]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <_ZN13DriveSettings22setUnderVoltageWarningEt>:

void DriveSettings::setUnderVoltageWarning(uint16_t underVoltageWarning)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	807b      	strh	r3, [r7, #2]
	if (this->underVoltageWarning != underVoltageWarning)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	8a1b      	ldrh	r3, [r3, #16]
 8002ba4:	887a      	ldrh	r2, [r7, #2]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d009      	beq.n	8002bbe <_ZN13DriveSettings22setUnderVoltageWarningEt+0x2a>
	{
		this->underVoltageWarning = underVoltageWarning;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	887a      	ldrh	r2, [r7, #2]
 8002bae:	821a      	strh	r2, [r3, #16]
		this->settingsChangedReg |= UNDERVOLTAGE_WARNING_CHANGE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	8b9b      	ldrh	r3, [r3, #28]
 8002bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	839a      	strh	r2, [r3, #28]
	}
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <_ZNK13DriveSettings19getOverCurrentErrorEv>:
/****************************************************************************************
 / * 	overcurrent error get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentError() const
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
	return overCurrentError;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	8adb      	ldrh	r3, [r3, #22]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <_ZN13DriveSettings19setOverCurrentErrorEt>:

void DriveSettings::setOverCurrentError(uint16_t overCurrentError)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	460b      	mov	r3, r1
 8002bec:	807b      	strh	r3, [r7, #2]
	if (this->overCurrentError != overCurrentError)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	8adb      	ldrh	r3, [r3, #22]
 8002bf2:	887a      	ldrh	r2, [r7, #2]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d009      	beq.n	8002c0c <_ZN13DriveSettings19setOverCurrentErrorEt+0x2a>
	{
		this->overCurrentError = overCurrentError;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	887a      	ldrh	r2, [r7, #2]
 8002bfc:	82da      	strh	r2, [r3, #22]
		this->settingsChangedReg |= OVER_CURRENT_ERROR_CHANGE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	8b9b      	ldrh	r3, [r3, #28]
 8002c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	839a      	strh	r2, [r3, #28]
	}
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <_ZNK13DriveSettings16getDeviceAddressEv>:
/****************************************************************************************
 / * 	device address get/set
 ****************************************************************************************/
uint8_t DriveSettings::getDeviceAddress() const
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
	return deviceAddress;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	781b      	ldrb	r3, [r3, #0]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <_ZN13DriveSettings16setDeviceAddressEh>:

void DriveSettings::setDeviceAddress(uint8_t deviceAddress = 0)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	70fb      	strb	r3, [r7, #3]
	this->deviceAddress = deviceAddress;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	78fa      	ldrb	r2, [r7, #3]
 8002c40:	701a      	strb	r2, [r3, #0]
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <_ZN13DriveSettings15setSaveSettingsEb>:
	this->saveSettings = false;
	return saveSettingsTemp;
}

void DriveSettings::setSaveSettings(bool saveSettings)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	460b      	mov	r3, r1
 8002c58:	70fb      	strb	r3, [r7, #3]
	this->saveSettings = saveSettings;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	769a      	strb	r2, [r3, #26]
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <_ZN13DriveSettings17isSettingsChangedEv>:




bool DriveSettings::isSettingsChanged()
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
	return (settingsChangedReg != 0);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	8b9b      	ldrh	r3, [r3, #28]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf14      	ite	ne
 8002c7c:	2301      	movne	r3, #1
 8002c7e:	2300      	moveq	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <_ZNK13DriveSettings21getSettingsChangedRegEv>:

uint16_t DriveSettings::getSettingsChangedReg() const
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
	return this->settingsChangedReg;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	8b9b      	ldrh	r3, [r3, #28]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <_ZN13DriveSettings20ResetSettingsChangedEt>:

void DriveSettings::ResetSettingsChanged(uint16_t bit){
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	807b      	strh	r3, [r7, #2]
	settingsChangedReg &= ~bit;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	8b9b      	ldrh	r3, [r3, #28]
 8002cb6:	b21a      	sxth	r2, r3
 8002cb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	b21b      	sxth	r3, r3
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	b21b      	sxth	r3, r3
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	839a      	strh	r2, [r3, #28]
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <_ZN12DriveCommandC1Ev>:
 *      Author: marce
 */

#include "DriveCommand.h"

DriveCommand::DriveCommand()
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	705a      	strb	r2, [r3, #1]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	709a      	strb	r2, [r3, #2]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	70da      	strb	r2, [r3, #3]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	711a      	strb	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	715a      	strb	r2, [r3, #5]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	719a      	strb	r2, [r3, #6]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	71da      	strb	r2, [r3, #7]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	721a      	strb	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	725a      	strb	r2, [r3, #9]
{
}
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <_ZN12DriveCommand7isCloseEv>:

/****************************************************************************************
 / * 	close get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isClose()
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
	bool closeTemp = close;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	73fb      	strb	r3, [r7, #15]
	close = false;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
	return closeTemp;
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <_ZN12DriveCommand8setCloseEb>:

void DriveCommand::setClose(bool close)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	460b      	mov	r3, r1
 8002d54:	70fb      	strb	r3, [r7, #3]
	this->close = close;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	701a      	strb	r2, [r3, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <_ZN12DriveCommand6isOpenEv>:

/****************************************************************************************
 / * 	open get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isOpen()
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
	bool openTemp = open;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	785b      	ldrb	r3, [r3, #1]
 8002d74:	73fb      	strb	r3, [r7, #15]
	open = false;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	705a      	strb	r2, [r3, #1]
	return openTemp;
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <_ZN12DriveCommand7setOpenEb>:

void DriveCommand::setOpen(bool open)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	460b      	mov	r3, r1
 8002d94:	70fb      	strb	r3, [r7, #3]
	this->open = open;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	705a      	strb	r2, [r3, #1]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <_ZN12DriveCommand9isDisableEv>:

/****************************************************************************************
 / * 	disable get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isDisable()
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
	bool disableTemp = disable;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	799b      	ldrb	r3, [r3, #6]
 8002db4:	73fb      	strb	r3, [r7, #15]
	disable = false;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	719a      	strb	r2, [r3, #6]
	return disableTemp;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <_ZN12DriveCommand10setDisableEb>:

void DriveCommand::setDisable(bool disable)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	70fb      	strb	r3, [r7, #3]
	this->disable = disable;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	719a      	strb	r2, [r3, #6]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <_ZN12DriveCommand8isEnableEv>:

/****************************************************************************************
 / * 	enable get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isEnable()
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
	bool enableTemp = enable;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	791b      	ldrb	r3, [r3, #4]
 8002df4:	73fb      	strb	r3, [r7, #15]
	enable = false;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	711a      	strb	r2, [r3, #4]
	return enableTemp;
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <_ZN12DriveCommand9setEnableEb>:

void DriveCommand::setEnable(bool enable)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	460b      	mov	r3, r1
 8002e14:	70fb      	strb	r3, [r7, #3]
	this->enable = enable;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	711a      	strb	r2, [r3, #4]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <_ZN12DriveCommand7isResetEv>:

/****************************************************************************************
 / * 	reset get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isReset()
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
	bool resetTemp = reset;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	78db      	ldrb	r3, [r3, #3]
 8002e34:	73fb      	strb	r3, [r7, #15]
	reset = false;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	70da      	strb	r2, [r3, #3]
	return resetTemp;
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <_ZN12DriveCommand8setResetEb>:

void DriveCommand::setReset(bool reset)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	460b      	mov	r3, r1
 8002e54:	70fb      	strb	r3, [r7, #3]
	this->reset = reset;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	78fa      	ldrb	r2, [r7, #3]
 8002e5a:	70da      	strb	r2, [r3, #3]
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <_ZN12DriveCommand6isStopEv>:

/****************************************************************************************
 * 	stop get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isStop()
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
	bool stopTemp = stop;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	795b      	ldrb	r3, [r3, #5]
 8002e74:	73fb      	strb	r3, [r7, #15]
	stop = false;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	715a      	strb	r2, [r3, #5]
	return stopTemp;
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <_ZN12DriveCommand7setStopEb>:

void DriveCommand::setStop(bool stop)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	460b      	mov	r3, r1
 8002e94:	70fb      	strb	r3, [r7, #3]
	this->stop = stop;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	715a      	strb	r2, [r3, #5]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <_ZN12DriveCommand7isTeachEv>:

/****************************************************************************************
 * 	teach get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isTeach()
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
	bool teachTemp = teach;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	789b      	ldrb	r3, [r3, #2]
 8002eb4:	73fb      	strb	r3, [r7, #15]
	teach = false;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	709a      	strb	r2, [r3, #2]
	return teachTemp;
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <_ZN12DriveCommand8setTeachEb>:

void DriveCommand::setTeach(bool teach)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	70fb      	strb	r3, [r7, #3]
	if (this->teach != teach)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	789b      	ldrb	r3, [r3, #2]
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d002      	beq.n	8002ee6 <_ZN12DriveCommand8setTeachEb+0x1c>
	{
		this->teach = teach;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	709a      	strb	r2, [r3, #2]
	}

}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <_ZNK12DriveCommand16isCommandChangedEv>:
/****************************************************************************************
 * 	has commands changed get/set (read reset)
 ****************************************************************************************/

bool DriveCommand::isCommandChanged() const
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
	return (commandChangeReg != 0);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	7a5b      	ldrb	r3, [r3, #9]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bf14      	ite	ne
 8002f02:	2301      	movne	r3, #1
 8002f04:	2300      	moveq	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <_ZNK12DriveCommand20getCommandChangedRegEv>:

uint8_t DriveCommand::getCommandChangedReg() const
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
	return this->commandChangeReg;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	7a5b      	ldrb	r3, [r3, #9]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <_ZN12DriveCommand19ResetCommandChangedEh>:

void DriveCommand::ResetCommandChanged(uint8_t bit)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	70fb      	strb	r3, [r7, #3]
	this->commandChangeReg &= ~bit;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	7a5b      	ldrb	r3, [r3, #9]
 8002f3c:	b25a      	sxtb	r2, r3
 8002f3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f42:	43db      	mvns	r3, r3
 8002f44:	b25b      	sxtb	r3, r3
 8002f46:	4013      	ands	r3, r2
 8002f48:	b25b      	sxtb	r3, r3
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	725a      	strb	r2, [r3, #9]
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <_ZN11DriveStatusC1Ev>:
 *      Author: marce
 */

#include "DriveStatus.h"

DriveStatus::DriveStatus()
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	721a      	strb	r2, [r3, #8]
{
}
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <_ZN11DriveStatus7isCloseEv>:

/****************************************************************************************
 / * 	close get/set
 ****************************************************************************************/
bool DriveStatus::isClose()
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	return close;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	785b      	ldrb	r3, [r3, #1]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <_ZN11DriveStatus8setCloseEb>:

void DriveStatus::setClose(bool close)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	70fb      	strb	r3, [r7, #3]
	if (this->close != close)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	785b      	ldrb	r3, [r3, #1]
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d005      	beq.n	8002fb2 <_ZN11DriveStatus8setCloseEb+0x22>
	{
		this->close = close;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	78fa      	ldrb	r2, [r7, #3]
 8002faa:	705a      	strb	r2, [r3, #1]
		statusChanged = true;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	721a      	strb	r2, [r3, #8]
	}
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <_ZN11DriveStatus6isOpenEv>:

/****************************************************************************************
 / * 	open get/set
 ****************************************************************************************/
bool DriveStatus::isOpen()
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
	return open;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	789b      	ldrb	r3, [r3, #2]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <_ZN11DriveStatus7setOpenEb>:

void DriveStatus::setOpen(bool open)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	460b      	mov	r3, r1
 8002fe0:	70fb      	strb	r3, [r7, #3]
	if (this->open = open)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	709a      	strb	r2, [r3, #2]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	789b      	ldrb	r3, [r3, #2]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <_ZN11DriveStatus7setOpenEb+0x26>
	{
		this->open = open;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	709a      	strb	r2, [r3, #2]
		statusChanged = true;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	721a      	strb	r2, [r3, #8]
	}
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <_ZN11DriveStatus9isDisableEv>:

/****************************************************************************************
 / * 	disable get/set
 ****************************************************************************************/
bool DriveStatus::isDisable()
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
	return disable;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	79db      	ldrb	r3, [r3, #7]
}
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <_ZN11DriveStatus10setDisableEb>:

void DriveStatus::setDisable(bool disable)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	70fb      	strb	r3, [r7, #3]
	if (this->disable = disable)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	71da      	strb	r2, [r3, #7]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	79db      	ldrb	r3, [r3, #7]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <_ZN11DriveStatus10setDisableEb+0x26>
	{
		this->disable = disable;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	71da      	strb	r2, [r3, #7]
		statusChanged = true;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	721a      	strb	r2, [r3, #8]
	}
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <_ZN11DriveStatus8isEnableEv>:

/****************************************************************************************
 / * 	enable get/set
 ****************************************************************************************/
bool DriveStatus::isEnable()
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
	return enable;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	795b      	ldrb	r3, [r3, #5]
}
 800305e:	4618      	mov	r0, r3
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <_ZN11DriveStatus9setEnableEb>:

void DriveStatus::setEnable(bool enable)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	460b      	mov	r3, r1
 8003074:	70fb      	strb	r3, [r7, #3]
	if (this->enable = enable)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	78fa      	ldrb	r2, [r7, #3]
 800307a:	715a      	strb	r2, [r3, #5]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	795b      	ldrb	r3, [r3, #5]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <_ZN11DriveStatus9setEnableEb+0x26>
	{
		this->enable = enable;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	715a      	strb	r2, [r3, #5]
		statusChanged = true;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	721a      	strb	r2, [r3, #8]
	}
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <_ZN11DriveStatus7isResetEv>:

/****************************************************************************************
 / * 	reset get/set
 ****************************************************************************************/
bool DriveStatus::isReset()
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
	return reset;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	791b      	ldrb	r3, [r3, #4]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <_ZN11DriveStatus8setResetEb>:

void DriveStatus::setReset(bool reset)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	70fb      	strb	r3, [r7, #3]
	if (this->reset = reset)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	711a      	strb	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	791b      	ldrb	r3, [r3, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <_ZN11DriveStatus8setResetEb+0x26>
	{
		this->reset = reset;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	711a      	strb	r2, [r3, #4]
		statusChanged = true;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	721a      	strb	r2, [r3, #8]
	}
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <_ZN11DriveStatus6isStopEv>:

/****************************************************************************************
 / * 	stop get/set
 /****************************************************************************************/
bool DriveStatus::isStop()
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
	return stop;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	799b      	ldrb	r3, [r3, #6]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <_ZN11DriveStatus7setStopEb>:

void DriveStatus::setStop(bool stop)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	460b      	mov	r3, r1
 8003108:	70fb      	strb	r3, [r7, #3]
	if (this->stop = stop)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	719a      	strb	r2, [r3, #6]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	799b      	ldrb	r3, [r3, #6]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <_ZN11DriveStatus7setStopEb+0x26>
	{
		this->stop = stop;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	719a      	strb	r2, [r3, #6]
		statusChanged = true;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	721a      	strb	r2, [r3, #8]
	}
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <_ZN11DriveStatus7isTeachEv>:

/****************************************************************************************
 / * 	teach get/set
 /****************************************************************************************/
bool DriveStatus::isTeach()
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	return teach;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	78db      	ldrb	r3, [r3, #3]
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <_ZN11DriveStatus8setTeachEb>:

void DriveStatus::setTeach(bool teach)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	70fb      	strb	r3, [r7, #3]
	if (this->teach = teach)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	70da      	strb	r2, [r3, #3]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	78db      	ldrb	r3, [r3, #3]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <_ZN11DriveStatus8setTeachEb+0x26>
	{
		this->teach = teach;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	70da      	strb	r2, [r3, #3]
		statusChanged = true;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	721a      	strb	r2, [r3, #8]
	}
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <_ZN11DriveStatus8getErrorEv>:

/****************************************************************************************
 / * 	write config get/set
 ****************************************************************************************/
DriveStatus::_ERROR DriveStatus::getError()
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
	return this->error;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	781b      	ldrb	r3, [r3, #0]
}
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <_ZN11DriveStatus8setErrorENS_6_ERRORE>:

void DriveStatus::setError(_ERROR error)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	460b      	mov	r3, r1
 800319c:	70fb      	strb	r3, [r7, #3]
	if (this->error = error)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	701a      	strb	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bf14      	ite	ne
 80031ac:	2301      	movne	r3, #1
 80031ae:	2300      	moveq	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <_ZN11DriveStatus8setErrorENS_6_ERRORE+0x2a>
	{
		statusChanged = true;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	721a      	strb	r2, [r3, #8]
	}
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <_ZN11TaskHandler11UpdateTasksEv>:

#include "TaskHandler.h"
#include "gpio.h"

//update tasks, should be called every 1ms
void TaskHandler::UpdateTasks() {
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

	//1ms

	//2ms
	if(counter % 2 == 0){
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	899b      	ldrh	r3, [r3, #12]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d102      	bne.n	80031e2 <_ZN11TaskHandler11UpdateTasksEv+0x1a>
		adcUpdateTask = true;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	70da      	strb	r2, [r3, #3]
	}


	//15ms
	if(counter % 15 == 0){
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	899a      	ldrh	r2, [r3, #12]
 80031e6:	4b2c      	ldr	r3, [pc, #176]	; (8003298 <_ZN11TaskHandler11UpdateTasksEv+0xd0>)
 80031e8:	fba3 1302 	umull	r1, r3, r3, r2
 80031ec:	08d9      	lsrs	r1, r3, #3
 80031ee:	460b      	mov	r3, r1
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a5b      	subs	r3, r3, r1
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d102      	bne.n	8003202 <_ZN11TaskHandler11UpdateTasksEv+0x3a>
		ioUpdateTask = true;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	709a      	strb	r2, [r3, #2]
	}



	//100ms
	if(counter % 100 == 0){
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	899b      	ldrh	r3, [r3, #12]
 8003206:	4a25      	ldr	r2, [pc, #148]	; (800329c <_ZN11TaskHandler11UpdateTasksEv+0xd4>)
 8003208:	fba2 1203 	umull	r1, r2, r2, r3
 800320c:	0952      	lsrs	r2, r2, #5
 800320e:	2164      	movs	r1, #100	; 0x64
 8003210:	fb01 f202 	mul.w	r2, r1, r2
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d102      	bne.n	8003222 <_ZN11TaskHandler11UpdateTasksEv+0x5a>
		errorTask = true;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	701a      	strb	r2, [r3, #0]
	}


	//500ms
	if(counter % 500 == 0){
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	899b      	ldrh	r3, [r3, #12]
 8003226:	4a1e      	ldr	r2, [pc, #120]	; (80032a0 <_ZN11TaskHandler11UpdateTasksEv+0xd8>)
 8003228:	fba2 1203 	umull	r1, r2, r2, r3
 800322c:	0952      	lsrs	r2, r2, #5
 800322e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003232:	fb01 f202 	mul.w	r2, r1, r2
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d105      	bne.n	800324a <_ZN11TaskHandler11UpdateTasksEv+0x82>
		ledUpdateTask = true;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	711a      	strb	r2, [r3, #4]
		comTask = true;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	705a      	strb	r2, [r3, #1]
	}


	//1000ms
	if(counter % 1000 == 0){
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	899b      	ldrh	r3, [r3, #12]
 800324e:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <_ZN11TaskHandler11UpdateTasksEv+0xd8>)
 8003250:	fba2 1203 	umull	r1, r2, r2, r3
 8003254:	0992      	lsrs	r2, r2, #6
 8003256:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800325a:	fb01 f202 	mul.w	r2, r1, r2
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d102      	bne.n	800326c <_ZN11TaskHandler11UpdateTasksEv+0xa4>
		saveTask = true;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	715a      	strb	r2, [r3, #5]
	}



	//increment counter
	if(counter > 2999){
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	899b      	ldrh	r3, [r3, #12]
 8003270:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003274:	4293      	cmp	r3, r2
 8003276:	d903      	bls.n	8003280 <_ZN11TaskHandler11UpdateTasksEv+0xb8>
		counter = 1;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	819a      	strh	r2, [r3, #12]
	}else{
		counter++;
	}

}
 800327e:	e005      	b.n	800328c <_ZN11TaskHandler11UpdateTasksEv+0xc4>
		counter++;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	899b      	ldrh	r3, [r3, #12]
 8003284:	3301      	adds	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	819a      	strh	r2, [r3, #12]
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	88888889 	.word	0x88888889
 800329c:	51eb851f 	.word	0x51eb851f
 80032a0:	10624dd3 	.word	0x10624dd3

080032a4 <_ZN11TaskHandler9isComTaskEv>:



bool TaskHandler::isComTask()  {
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
	bool comTaskTemp = (comTask & comTaskEnable);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	785b      	ldrb	r3, [r3, #1]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	79db      	ldrb	r3, [r3, #7]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	bf14      	ite	ne
 80032c0:	2301      	movne	r3, #1
 80032c2:	2300      	moveq	r3, #0
 80032c4:	73fb      	strb	r3, [r7, #15]
	comTask = false;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	705a      	strb	r2, [r3, #1]
	return comTaskTemp;
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <_ZN11TaskHandler10isSaveTaskEv>:

bool TaskHandler::isSaveTask(){
 80032da:	b480      	push	{r7}
 80032dc:	b085      	sub	sp, #20
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
	bool saveTaskTemp = (saveTask & saveTaskEnable);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	795b      	ldrb	r3, [r3, #5]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	461a      	mov	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	7adb      	ldrb	r3, [r3, #11]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	bf14      	ite	ne
 80032f6:	2301      	movne	r3, #1
 80032f8:	2300      	moveq	r3, #0
 80032fa:	73fb      	strb	r3, [r7, #15]
	saveTask = false;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	715a      	strb	r2, [r3, #5]
	return saveTaskTemp;
 8003302:	7bfb      	ldrb	r3, [r7, #15]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <_ZN11TaskHandler11isErrorTaskEv>:


bool TaskHandler::isErrorTask()  {
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
	bool errorTaskTemp = (errorTask & errorTaskEnable);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	461a      	mov	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	799b      	ldrb	r3, [r3, #6]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]
	errorTask = false;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
	return errorTaskTemp;
 8003338:	7bfb      	ldrb	r3, [r7, #15]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <_ZN11TaskHandler14isIoUpdateTaskEv>:

bool TaskHandler::isIoUpdateTask()  {
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
	bool ioUpdateTaskTemp = (ioUpdateTask & ioUpdateTaskEnable);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	789b      	ldrb	r3, [r3, #2]
 8003352:	b2db      	uxtb	r3, r3
 8003354:	461a      	mov	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	7a1b      	ldrb	r3, [r3, #8]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	bf14      	ite	ne
 8003362:	2301      	movne	r3, #1
 8003364:	2300      	moveq	r3, #0
 8003366:	73fb      	strb	r3, [r7, #15]
	ioUpdateTask = false;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	709a      	strb	r2, [r3, #2]
	return ioUpdateTaskTemp;
 800336e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <_ZN11TaskHandler15isLEDUpdateTaskEv>:
	adcUpdateTask = false;
	return adcUpdateTaskTemp;
}


bool TaskHandler::isLEDUpdateTask(){
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	bool ledUpdateTaskTemp = (ledUpdateTask & ledUpdateTaskEnable);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	791b      	ldrb	r3, [r3, #4]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	461a      	mov	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	7a9b      	ldrb	r3, [r3, #10]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf14      	ite	ne
 8003398:	2301      	movne	r3, #1
 800339a:	2300      	moveq	r3, #0
 800339c:	73fb      	strb	r3, [r7, #15]
	ledUpdateTask = false;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	711a      	strb	r2, [r3, #4]
	return ledUpdateTaskTemp;
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <_ZN5Delay8DWT_InitEv>:


/*
 * Mikrosenkunden delay Initialisieren
 */
void Delay::DWT_Init(void) {
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80033b8:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <_ZN5Delay8DWT_InitEv+0x2c>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4a08      	ldr	r2, [pc, #32]	; (80033e0 <_ZN5Delay8DWT_InitEv+0x2c>)
 80033be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033c2:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 80033c4:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <_ZN5Delay8DWT_InitEv+0x30>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <_ZN5Delay8DWT_InitEv+0x30>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a05      	ldr	r2, [pc, #20]	; (80033e4 <_ZN5Delay8DWT_InitEv+0x30>)
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	6013      	str	r3, [r2, #0]
}
 80033d6:	bf00      	nop
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	e000edf0 	.word	0xe000edf0
 80033e4:	e0001000 	.word	0xe0001000

080033e8 <_ZN13TypeConverter12uint16ToByteEPhth>:
	int16_t byte2 = byteArray[1]<<8;
	return(byte1 + byte2);
}


void TypeConverter::uint16ToByte(uint8_t* byteArray, uint16_t data, uint8_t offset){
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	807b      	strh	r3, [r7, #2]
 80033f4:	4613      	mov	r3, r2
 80033f6:	707b      	strb	r3, [r7, #1]
	byteArray[offset] = data;
 80033f8:	787b      	ldrb	r3, [r7, #1]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4413      	add	r3, r2
 80033fe:	887a      	ldrh	r2, [r7, #2]
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	701a      	strb	r2, [r3, #0]
	byteArray[offset+1] = data>>8;
 8003404:	887b      	ldrh	r3, [r7, #2]
 8003406:	0a1b      	lsrs	r3, r3, #8
 8003408:	b299      	uxth	r1, r3
 800340a:	787b      	ldrb	r3, [r7, #1]
 800340c:	3301      	adds	r3, #1
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	b2ca      	uxtb	r2, r1
 8003414:	701a      	strb	r2, [r3, #0]
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800342a:	463b      	mov	r3, r7
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	611a      	str	r2, [r3, #16]
 8003438:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800343a:	4b29      	ldr	r3, [pc, #164]	; (80034e0 <MX_ADC1_Init+0xbc>)
 800343c:	4a29      	ldr	r2, [pc, #164]	; (80034e4 <MX_ADC1_Init+0xc0>)
 800343e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003440:	4b27      	ldr	r3, [pc, #156]	; (80034e0 <MX_ADC1_Init+0xbc>)
 8003442:	2200      	movs	r2, #0
 8003444:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003446:	4b26      	ldr	r3, [pc, #152]	; (80034e0 <MX_ADC1_Init+0xbc>)
 8003448:	2200      	movs	r2, #0
 800344a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800344c:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <MX_ADC1_Init+0xbc>)
 800344e:	2200      	movs	r2, #0
 8003450:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003452:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <MX_ADC1_Init+0xbc>)
 8003454:	2200      	movs	r2, #0
 8003456:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003458:	4b21      	ldr	r3, [pc, #132]	; (80034e0 <MX_ADC1_Init+0xbc>)
 800345a:	2204      	movs	r2, #4
 800345c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800345e:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <MX_ADC1_Init+0xbc>)
 8003460:	2200      	movs	r2, #0
 8003462:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003464:	4b1e      	ldr	r3, [pc, #120]	; (80034e0 <MX_ADC1_Init+0xbc>)
 8003466:	2200      	movs	r2, #0
 8003468:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800346a:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <MX_ADC1_Init+0xbc>)
 800346c:	2201      	movs	r2, #1
 800346e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003470:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <MX_ADC1_Init+0xbc>)
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003478:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <MX_ADC1_Init+0xbc>)
 800347a:	2200      	movs	r2, #0
 800347c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800347e:	4b18      	ldr	r3, [pc, #96]	; (80034e0 <MX_ADC1_Init+0xbc>)
 8003480:	2200      	movs	r2, #0
 8003482:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003484:	4b16      	ldr	r3, [pc, #88]	; (80034e0 <MX_ADC1_Init+0xbc>)
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800348c:	4b14      	ldr	r3, [pc, #80]	; (80034e0 <MX_ADC1_Init+0xbc>)
 800348e:	2200      	movs	r2, #0
 8003490:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003492:	4b13      	ldr	r3, [pc, #76]	; (80034e0 <MX_ADC1_Init+0xbc>)
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800349a:	4811      	ldr	r0, [pc, #68]	; (80034e0 <MX_ADC1_Init+0xbc>)
 800349c:	f001 f81e 	bl	80044dc <HAL_ADC_Init>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80034a6:	f000 fb95 	bl	8003bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80034aa:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <MX_ADC1_Init+0xc4>)
 80034ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80034ae:	2306      	movs	r3, #6
 80034b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80034b6:	237f      	movs	r3, #127	; 0x7f
 80034b8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80034ba:	2304      	movs	r3, #4
 80034bc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034c2:	463b      	mov	r3, r7
 80034c4:	4619      	mov	r1, r3
 80034c6:	4806      	ldr	r0, [pc, #24]	; (80034e0 <MX_ADC1_Init+0xbc>)
 80034c8:	f001 f950 	bl	800476c <HAL_ADC_ConfigChannel>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80034d2:	f000 fb7f 	bl	8003bd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80034d6:	bf00      	nop
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000224 	.word	0x20000224
 80034e4:	50040000 	.word	0x50040000
 80034e8:	2e300800 	.word	0x2e300800

080034ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b0a2      	sub	sp, #136	; 0x88
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	60da      	str	r2, [r3, #12]
 8003502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003504:	f107 0314 	add.w	r3, r7, #20
 8003508:	2260      	movs	r2, #96	; 0x60
 800350a:	2100      	movs	r1, #0
 800350c:	4618      	mov	r0, r3
 800350e:	f00b fab5 	bl	800ea7c <memset>
  if(adcHandle->Instance==ADC1)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a3b      	ldr	r2, [pc, #236]	; (8003604 <HAL_ADC_MspInit+0x118>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d16e      	bne.n	80035fa <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800351c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003520:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003522:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003526:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003528:	2301      	movs	r3, #1
 800352a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800352c:	2301      	movs	r3, #1
 800352e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003530:	2310      	movs	r3, #16
 8003532:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003534:	2307      	movs	r3, #7
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003538:	2302      	movs	r3, #2
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800353c:	2302      	movs	r3, #2
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003540:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003544:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003546:	f107 0314 	add.w	r3, r7, #20
 800354a:	4618      	mov	r0, r3
 800354c:	f005 f9d6 	bl	80088fc <HAL_RCCEx_PeriphCLKConfig>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8003556:	f000 fb3d 	bl	8003bd4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800355a:	4b2b      	ldr	r3, [pc, #172]	; (8003608 <HAL_ADC_MspInit+0x11c>)
 800355c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355e:	4a2a      	ldr	r2, [pc, #168]	; (8003608 <HAL_ADC_MspInit+0x11c>)
 8003560:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003566:	4b28      	ldr	r3, [pc, #160]	; (8003608 <HAL_ADC_MspInit+0x11c>)
 8003568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003572:	4b25      	ldr	r3, [pc, #148]	; (8003608 <HAL_ADC_MspInit+0x11c>)
 8003574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003576:	4a24      	ldr	r2, [pc, #144]	; (8003608 <HAL_ADC_MspInit+0x11c>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800357e:	4b22      	ldr	r3, [pc, #136]	; (8003608 <HAL_ADC_MspInit+0x11c>)
 8003580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800358a:	23c0      	movs	r3, #192	; 0xc0
 800358c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800358e:	230b      	movs	r3, #11
 8003590:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003592:	2300      	movs	r3, #0
 8003594:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003596:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800359a:	4619      	mov	r1, r3
 800359c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035a0:	f002 fbdc 	bl	8005d5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80035a4:	4b19      	ldr	r3, [pc, #100]	; (800360c <HAL_ADC_MspInit+0x120>)
 80035a6:	4a1a      	ldr	r2, [pc, #104]	; (8003610 <HAL_ADC_MspInit+0x124>)
 80035a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80035aa:	4b18      	ldr	r3, [pc, #96]	; (800360c <HAL_ADC_MspInit+0x120>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035b0:	4b16      	ldr	r3, [pc, #88]	; (800360c <HAL_ADC_MspInit+0x120>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80035b6:	4b15      	ldr	r3, [pc, #84]	; (800360c <HAL_ADC_MspInit+0x120>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80035bc:	4b13      	ldr	r3, [pc, #76]	; (800360c <HAL_ADC_MspInit+0x120>)
 80035be:	2280      	movs	r2, #128	; 0x80
 80035c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035c2:	4b12      	ldr	r3, [pc, #72]	; (800360c <HAL_ADC_MspInit+0x120>)
 80035c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035ca:	4b10      	ldr	r3, [pc, #64]	; (800360c <HAL_ADC_MspInit+0x120>)
 80035cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80035d2:	4b0e      	ldr	r3, [pc, #56]	; (800360c <HAL_ADC_MspInit+0x120>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80035d8:	4b0c      	ldr	r3, [pc, #48]	; (800360c <HAL_ADC_MspInit+0x120>)
 80035da:	2200      	movs	r2, #0
 80035dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80035de:	480b      	ldr	r0, [pc, #44]	; (800360c <HAL_ADC_MspInit+0x120>)
 80035e0:	f001 ffdc 	bl	800559c <HAL_DMA_Init>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80035ea:	f000 faf3 	bl	8003bd4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a06      	ldr	r2, [pc, #24]	; (800360c <HAL_ADC_MspInit+0x120>)
 80035f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80035f4:	4a05      	ldr	r2, [pc, #20]	; (800360c <HAL_ADC_MspInit+0x120>)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80035fa:	bf00      	nop
 80035fc:	3788      	adds	r7, #136	; 0x88
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	50040000 	.word	0x50040000
 8003608:	40021000 	.word	0x40021000
 800360c:	20000288 	.word	0x20000288
 8003610:	40020008 	.word	0x40020008

08003614 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003618:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <MX_CRC_Init+0x3c>)
 800361a:	4a0e      	ldr	r2, [pc, #56]	; (8003654 <MX_CRC_Init+0x40>)
 800361c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800361e:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <MX_CRC_Init+0x3c>)
 8003620:	2200      	movs	r2, #0
 8003622:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <MX_CRC_Init+0x3c>)
 8003626:	2200      	movs	r2, #0
 8003628:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800362a:	4b09      	ldr	r3, [pc, #36]	; (8003650 <MX_CRC_Init+0x3c>)
 800362c:	2200      	movs	r2, #0
 800362e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003630:	4b07      	ldr	r3, [pc, #28]	; (8003650 <MX_CRC_Init+0x3c>)
 8003632:	2200      	movs	r2, #0
 8003634:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <MX_CRC_Init+0x3c>)
 8003638:	2201      	movs	r2, #1
 800363a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800363c:	4804      	ldr	r0, [pc, #16]	; (8003650 <MX_CRC_Init+0x3c>)
 800363e:	f001 fd87 	bl	8005150 <HAL_CRC_Init>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003648:	f000 fac4 	bl	8003bd4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800364c:	bf00      	nop
 800364e:	bd80      	pop	{r7, pc}
 8003650:	200002d0 	.word	0x200002d0
 8003654:	40023000 	.word	0x40023000

08003658 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a0a      	ldr	r2, [pc, #40]	; (8003690 <HAL_CRC_MspInit+0x38>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d10b      	bne.n	8003682 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800366a:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <HAL_CRC_MspInit+0x3c>)
 800366c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800366e:	4a09      	ldr	r2, [pc, #36]	; (8003694 <HAL_CRC_MspInit+0x3c>)
 8003670:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003674:	6493      	str	r3, [r2, #72]	; 0x48
 8003676:	4b07      	ldr	r3, [pc, #28]	; (8003694 <HAL_CRC_MspInit+0x3c>)
 8003678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800367a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003682:	bf00      	nop
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40023000 	.word	0x40023000
 8003694:	40021000 	.word	0x40021000

08003698 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08a      	sub	sp, #40	; 0x28
 800369c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800369e:	1d3b      	adds	r3, r7, #4
 80036a0:	2224      	movs	r2, #36	; 0x24
 80036a2:	2100      	movs	r1, #0
 80036a4:	4618      	mov	r0, r3
 80036a6:	f00b f9e9 	bl	800ea7c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80036aa:	4b17      	ldr	r3, [pc, #92]	; (8003708 <MX_DAC1_Init+0x70>)
 80036ac:	4a17      	ldr	r2, [pc, #92]	; (800370c <MX_DAC1_Init+0x74>)
 80036ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80036b0:	4815      	ldr	r0, [pc, #84]	; (8003708 <MX_DAC1_Init+0x70>)
 80036b2:	f001 fe37 	bl	8005324 <HAL_DAC_Init>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80036bc:	f000 fa8a 	bl	8003bd4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80036c0:	2300      	movs	r3, #0
 80036c2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80036cc:	2300      	movs	r3, #0
 80036ce:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80036d4:	1d3b      	adds	r3, r7, #4
 80036d6:	2200      	movs	r2, #0
 80036d8:	4619      	mov	r1, r3
 80036da:	480b      	ldr	r0, [pc, #44]	; (8003708 <MX_DAC1_Init+0x70>)
 80036dc:	f001 fe44 	bl	8005368 <HAL_DAC_ConfigChannel>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80036e6:	f000 fa75 	bl	8003bd4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80036ea:	1d3b      	adds	r3, r7, #4
 80036ec:	2210      	movs	r2, #16
 80036ee:	4619      	mov	r1, r3
 80036f0:	4805      	ldr	r0, [pc, #20]	; (8003708 <MX_DAC1_Init+0x70>)
 80036f2:	f001 fe39 	bl	8005368 <HAL_DAC_ConfigChannel>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80036fc:	f000 fa6a 	bl	8003bd4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003700:	bf00      	nop
 8003702:	3728      	adds	r7, #40	; 0x28
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	200002f4 	.word	0x200002f4
 800370c:	40007400 	.word	0x40007400

08003710 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08a      	sub	sp, #40	; 0x28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003718:	f107 0314 	add.w	r3, r7, #20
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a40      	ldr	r2, [pc, #256]	; (8003830 <HAL_DAC_MspInit+0x120>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d17a      	bne.n	8003828 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003732:	4b40      	ldr	r3, [pc, #256]	; (8003834 <HAL_DAC_MspInit+0x124>)
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003736:	4a3f      	ldr	r2, [pc, #252]	; (8003834 <HAL_DAC_MspInit+0x124>)
 8003738:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800373c:	6593      	str	r3, [r2, #88]	; 0x58
 800373e:	4b3d      	ldr	r3, [pc, #244]	; (8003834 <HAL_DAC_MspInit+0x124>)
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003742:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374a:	4b3a      	ldr	r3, [pc, #232]	; (8003834 <HAL_DAC_MspInit+0x124>)
 800374c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374e:	4a39      	ldr	r2, [pc, #228]	; (8003834 <HAL_DAC_MspInit+0x124>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003756:	4b37      	ldr	r3, [pc, #220]	; (8003834 <HAL_DAC_MspInit+0x124>)
 8003758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003762:	2330      	movs	r3, #48	; 0x30
 8003764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003766:	2303      	movs	r3, #3
 8003768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800376e:	f107 0314 	add.w	r3, r7, #20
 8003772:	4619      	mov	r1, r3
 8003774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003778:	f002 faf0 	bl	8005d5c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800377c:	4b2e      	ldr	r3, [pc, #184]	; (8003838 <HAL_DAC_MspInit+0x128>)
 800377e:	4a2f      	ldr	r2, [pc, #188]	; (800383c <HAL_DAC_MspInit+0x12c>)
 8003780:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8003782:	4b2d      	ldr	r3, [pc, #180]	; (8003838 <HAL_DAC_MspInit+0x128>)
 8003784:	2206      	movs	r2, #6
 8003786:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003788:	4b2b      	ldr	r3, [pc, #172]	; (8003838 <HAL_DAC_MspInit+0x128>)
 800378a:	2210      	movs	r2, #16
 800378c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800378e:	4b2a      	ldr	r3, [pc, #168]	; (8003838 <HAL_DAC_MspInit+0x128>)
 8003790:	2200      	movs	r2, #0
 8003792:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003794:	4b28      	ldr	r3, [pc, #160]	; (8003838 <HAL_DAC_MspInit+0x128>)
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800379a:	4b27      	ldr	r3, [pc, #156]	; (8003838 <HAL_DAC_MspInit+0x128>)
 800379c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037a0:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037a2:	4b25      	ldr	r3, [pc, #148]	; (8003838 <HAL_DAC_MspInit+0x128>)
 80037a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037a8:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 80037aa:	4b23      	ldr	r3, [pc, #140]	; (8003838 <HAL_DAC_MspInit+0x128>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80037b0:	4b21      	ldr	r3, [pc, #132]	; (8003838 <HAL_DAC_MspInit+0x128>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80037b6:	4820      	ldr	r0, [pc, #128]	; (8003838 <HAL_DAC_MspInit+0x128>)
 80037b8:	f001 fef0 	bl	800559c <HAL_DMA_Init>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80037c2:	f000 fa07 	bl	8003bd4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <HAL_DAC_MspInit+0x128>)
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	4a1a      	ldr	r2, [pc, #104]	; (8003838 <HAL_DAC_MspInit+0x128>)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 80037d2:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <HAL_DAC_MspInit+0x130>)
 80037d4:	4a1b      	ldr	r2, [pc, #108]	; (8003844 <HAL_DAC_MspInit+0x134>)
 80037d6:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_DAC_MspInit+0x130>)
 80037da:	2205      	movs	r2, #5
 80037dc:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037de:	4b18      	ldr	r3, [pc, #96]	; (8003840 <HAL_DAC_MspInit+0x130>)
 80037e0:	2210      	movs	r2, #16
 80037e2:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80037e4:	4b16      	ldr	r3, [pc, #88]	; (8003840 <HAL_DAC_MspInit+0x130>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80037ea:	4b15      	ldr	r3, [pc, #84]	; (8003840 <HAL_DAC_MspInit+0x130>)
 80037ec:	2280      	movs	r2, #128	; 0x80
 80037ee:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037f0:	4b13      	ldr	r3, [pc, #76]	; (8003840 <HAL_DAC_MspInit+0x130>)
 80037f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037f6:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037f8:	4b11      	ldr	r3, [pc, #68]	; (8003840 <HAL_DAC_MspInit+0x130>)
 80037fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037fe:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_NORMAL;
 8003800:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <HAL_DAC_MspInit+0x130>)
 8003802:	2200      	movs	r2, #0
 8003804:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003806:	4b0e      	ldr	r3, [pc, #56]	; (8003840 <HAL_DAC_MspInit+0x130>)
 8003808:	2200      	movs	r2, #0
 800380a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 800380c:	480c      	ldr	r0, [pc, #48]	; (8003840 <HAL_DAC_MspInit+0x130>)
 800380e:	f001 fec5 	bl	800559c <HAL_DMA_Init>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8003818:	f000 f9dc 	bl	8003bd4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a08      	ldr	r2, [pc, #32]	; (8003840 <HAL_DAC_MspInit+0x130>)
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	4a07      	ldr	r2, [pc, #28]	; (8003840 <HAL_DAC_MspInit+0x130>)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8003828:	bf00      	nop
 800382a:	3728      	adds	r7, #40	; 0x28
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40007400 	.word	0x40007400
 8003834:	40021000 	.word	0x40021000
 8003838:	20000308 	.word	0x20000308
 800383c:	40020030 	.word	0x40020030
 8003840:	20000350 	.word	0x20000350
 8003844:	40020044 	.word	0x40020044

08003848 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800384e:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <MX_DMA_Init+0x58>)
 8003850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003852:	4a13      	ldr	r2, [pc, #76]	; (80038a0 <MX_DMA_Init+0x58>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	6493      	str	r3, [r2, #72]	; 0x48
 800385a:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <MX_DMA_Init+0x58>)
 800385c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	607b      	str	r3, [r7, #4]
 8003864:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003866:	2200      	movs	r2, #0
 8003868:	2100      	movs	r1, #0
 800386a:	200b      	movs	r0, #11
 800386c:	f001 fc39 	bl	80050e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003870:	200b      	movs	r0, #11
 8003872:	f001 fc52 	bl	800511a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003876:	2200      	movs	r2, #0
 8003878:	2100      	movs	r1, #0
 800387a:	200d      	movs	r0, #13
 800387c:	f001 fc31 	bl	80050e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003880:	200d      	movs	r0, #13
 8003882:	f001 fc4a 	bl	800511a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003886:	2200      	movs	r2, #0
 8003888:	2100      	movs	r1, #0
 800388a:	200e      	movs	r0, #14
 800388c:	f001 fc29 	bl	80050e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003890:	200e      	movs	r0, #14
 8003892:	f001 fc42 	bl	800511a <HAL_NVIC_EnableIRQ>

}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000

080038a4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	; 0x28
 80038a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038aa:	f107 0314 	add.w	r3, r7, #20
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	605a      	str	r2, [r3, #4]
 80038b4:	609a      	str	r2, [r3, #8]
 80038b6:	60da      	str	r2, [r3, #12]
 80038b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ba:	4b67      	ldr	r3, [pc, #412]	; (8003a58 <MX_GPIO_Init+0x1b4>)
 80038bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038be:	4a66      	ldr	r2, [pc, #408]	; (8003a58 <MX_GPIO_Init+0x1b4>)
 80038c0:	f043 0304 	orr.w	r3, r3, #4
 80038c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038c6:	4b64      	ldr	r3, [pc, #400]	; (8003a58 <MX_GPIO_Init+0x1b4>)
 80038c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038d2:	4b61      	ldr	r3, [pc, #388]	; (8003a58 <MX_GPIO_Init+0x1b4>)
 80038d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d6:	4a60      	ldr	r2, [pc, #384]	; (8003a58 <MX_GPIO_Init+0x1b4>)
 80038d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038de:	4b5e      	ldr	r3, [pc, #376]	; (8003a58 <MX_GPIO_Init+0x1b4>)
 80038e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ea:	4b5b      	ldr	r3, [pc, #364]	; (8003a58 <MX_GPIO_Init+0x1b4>)
 80038ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ee:	4a5a      	ldr	r2, [pc, #360]	; (8003a58 <MX_GPIO_Init+0x1b4>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038f6:	4b58      	ldr	r3, [pc, #352]	; (8003a58 <MX_GPIO_Init+0x1b4>)
 80038f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003902:	4b55      	ldr	r3, [pc, #340]	; (8003a58 <MX_GPIO_Init+0x1b4>)
 8003904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003906:	4a54      	ldr	r2, [pc, #336]	; (8003a58 <MX_GPIO_Init+0x1b4>)
 8003908:	f043 0302 	orr.w	r3, r3, #2
 800390c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800390e:	4b52      	ldr	r3, [pc, #328]	; (8003a58 <MX_GPIO_Init+0x1b4>)
 8003910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	607b      	str	r3, [r7, #4]
 8003918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 800391a:	2200      	movs	r2, #0
 800391c:	f24c 31d0 	movw	r1, #50128	; 0xc3d0
 8003920:	484e      	ldr	r0, [pc, #312]	; (8003a5c <MX_GPIO_Init+0x1b8>)
 8003922:	f002 fbad 	bl	8006080 <HAL_GPIO_WritePin>
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 8003926:	2200      	movs	r2, #0
 8003928:	f64e 41ff 	movw	r1, #60671	; 0xecff
 800392c:	484c      	ldr	r0, [pc, #304]	; (8003a60 <MX_GPIO_Init+0x1bc>)
 800392e:	f002 fba7 	bl	8006080 <HAL_GPIO_WritePin>
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DI_OUT_1_P_Pin|LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8003932:	2200      	movs	r2, #0
 8003934:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800393c:	f002 fba0 	bl	8006080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003946:	2303      	movs	r3, #3
 8003948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800394e:	f107 0314 	add.w	r3, r7, #20
 8003952:	4619      	mov	r1, r3
 8003954:	4841      	ldr	r0, [pc, #260]	; (8003a5c <MX_GPIO_Init+0x1b8>)
 8003956:	f002 fa01 	bl	8005d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 800395a:	f24c 33d0 	movw	r3, #50128	; 0xc3d0
 800395e:	617b      	str	r3, [r7, #20]
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003960:	2301      	movs	r3, #1
 8003962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003964:	2300      	movs	r3, #0
 8003966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003968:	2300      	movs	r3, #0
 800396a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800396c:	f107 0314 	add.w	r3, r7, #20
 8003970:	4619      	mov	r1, r3
 8003972:	483a      	ldr	r0, [pc, #232]	; (8003a5c <MX_GPIO_Init+0x1b8>)
 8003974:	f002 f9f2 	bl	8005d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8003978:	2309      	movs	r3, #9
 800397a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800397c:	2303      	movs	r3, #3
 800397e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003980:	2300      	movs	r3, #0
 8003982:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003984:	f107 0314 	add.w	r3, r7, #20
 8003988:	4619      	mov	r1, r3
 800398a:	4836      	ldr	r0, [pc, #216]	; (8003a64 <MX_GPIO_Init+0x1c0>)
 800398c:	f002 f9e6 	bl	8005d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DI_1_Pin;
 8003990:	2302      	movs	r3, #2
 8003992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003994:	2300      	movs	r3, #0
 8003996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003998:	2300      	movs	r3, #0
 800399a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DI_1_GPIO_Port, &GPIO_InitStruct);
 800399c:	f107 0314 	add.w	r3, r7, #20
 80039a0:	4619      	mov	r1, r3
 80039a2:	4830      	ldr	r0, [pc, #192]	; (8003a64 <MX_GPIO_Init+0x1c0>)
 80039a4:	f002 f9da 	bl	8005d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_2_Pin|DI_3_Pin|DI_4_Pin|DI_5_Pin;
 80039a8:	230f      	movs	r3, #15
 80039aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039ac:	2300      	movs	r3, #0
 80039ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039b4:	f107 0314 	add.w	r3, r7, #20
 80039b8:	4619      	mov	r1, r3
 80039ba:	4828      	ldr	r0, [pc, #160]	; (8003a5c <MX_GPIO_Init+0x1b8>)
 80039bc:	f002 f9ce 	bl	8005d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DI_6_Pin|DI_7_Pin|DI_8_Pin;
 80039c0:	2307      	movs	r3, #7
 80039c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039cc:	f107 0314 	add.w	r3, r7, #20
 80039d0:	4619      	mov	r1, r3
 80039d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039d6:	f002 f9c1 	bl	8005d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_15;
 80039da:	f248 0308 	movw	r3, #32776	; 0x8008
 80039de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039e0:	2303      	movs	r3, #3
 80039e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e8:	f107 0314 	add.w	r3, r7, #20
 80039ec:	4619      	mov	r1, r3
 80039ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039f2:	f002 f9b3 	bl	8005d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 80039f6:	f64e 43ff 	movw	r3, #60671	; 0xecff
 80039fa:	617b      	str	r3, [r7, #20]
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039fc:	2301      	movs	r3, #1
 80039fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a04:	2300      	movs	r3, #0
 8003a06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a08:	f107 0314 	add.w	r3, r7, #20
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4814      	ldr	r0, [pc, #80]	; (8003a60 <MX_GPIO_Init+0x1bc>)
 8003a10:	f002 f9a4 	bl	8005d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 8003a14:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8003a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a22:	f107 0314 	add.w	r3, r7, #20
 8003a26:	4619      	mov	r1, r3
 8003a28:	480d      	ldr	r0, [pc, #52]	; (8003a60 <MX_GPIO_Init+0x1bc>)
 8003a2a:	f002 f997 	bl	8005d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DI_OUT_1_P_Pin|LED_R_Pin|LED_G_Pin;
 8003a2e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a34:	2301      	movs	r3, #1
 8003a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a40:	f107 0314 	add.w	r3, r7, #20
 8003a44:	4619      	mov	r1, r3
 8003a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a4a:	f002 f987 	bl	8005d5c <HAL_GPIO_Init>

}
 8003a4e:	bf00      	nop
 8003a50:	3728      	adds	r7, #40	; 0x28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	48000800 	.word	0x48000800
 8003a60:	48000400 	.word	0x48000400
 8003a64:	48001c00 	.word	0x48001c00

08003a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a6c:	f000 fb11 	bl	8004092 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a70:	f000 f818 	bl	8003aa4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a74:	f7ff ff16 	bl	80038a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003a78:	f7ff fee6 	bl	8003848 <MX_DMA_Init>
  MX_ADC1_Init();
 8003a7c:	f7ff fcd2 	bl	8003424 <MX_ADC1_Init>
  MX_DAC1_Init();
 8003a80:	f7ff fe0a 	bl	8003698 <MX_DAC1_Init>
  MX_SPI3_Init();
 8003a84:	f000 f8ca 	bl	8003c1c <MX_SPI3_Init>
  MX_CRC_Init();
 8003a88:	f7ff fdc4 	bl	8003614 <MX_CRC_Init>
  MX_TIM6_Init();
 8003a8c:	f000 fa32 	bl	8003ef4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003a90:	f000 fa66 	bl	8003f60 <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 8003a94:	f00a fa1c 	bl	800ded0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  appMain.Startup();
 8003a98:	4801      	ldr	r0, [pc, #4]	; (8003aa0 <main+0x38>)
 8003a9a:	f7fc fef3 	bl	8000884 <_ZN7AppMain7StartupEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003a9e:	e7fe      	b.n	8003a9e <main+0x36>
 8003aa0:	20000398 	.word	0x20000398

08003aa4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b096      	sub	sp, #88	; 0x58
 8003aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003aaa:	f107 0314 	add.w	r3, r7, #20
 8003aae:	2244      	movs	r2, #68	; 0x44
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f00a ffe2 	bl	800ea7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ab8:	463b      	mov	r3, r7
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	605a      	str	r2, [r3, #4]
 8003ac0:	609a      	str	r2, [r3, #8]
 8003ac2:	60da      	str	r2, [r3, #12]
 8003ac4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003ac6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003aca:	f004 f8b1 	bl	8007c30 <HAL_PWREx_ControlVoltageScaling>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf14      	ite	ne
 8003ad4:	2301      	movne	r3, #1
 8003ad6:	2300      	moveq	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8003ade:	f000 f879 	bl	8003bd4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8003ae2:	2330      	movs	r3, #48	; 0x30
 8003ae4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003aea:	2301      	movs	r3, #1
 8003aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003aee:	2300      	movs	r3, #0
 8003af0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003af2:	2360      	movs	r3, #96	; 0x60
 8003af4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003af6:	2302      	movs	r3, #2
 8003af8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003afa:	2301      	movs	r3, #1
 8003afc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003afe:	2301      	movs	r3, #1
 8003b00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8003b02:	2324      	movs	r3, #36	; 0x24
 8003b04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003b06:	2307      	movs	r3, #7
 8003b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b12:	f107 0314 	add.w	r3, r7, #20
 8003b16:	4618      	mov	r0, r3
 8003b18:	f004 f8f0 	bl	8007cfc <HAL_RCC_OscConfig>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	bf14      	ite	ne
 8003b22:	2301      	movne	r3, #1
 8003b24:	2300      	moveq	r3, #0
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003b2c:	f000 f852 	bl	8003bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b30:	230f      	movs	r3, #15
 8003b32:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b34:	2303      	movs	r3, #3
 8003b36:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b40:	2300      	movs	r3, #0
 8003b42:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003b44:	463b      	mov	r3, r7
 8003b46:	2104      	movs	r1, #4
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f004 fceb 	bl	8008524 <HAL_RCC_ClockConfig>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf14      	ite	ne
 8003b54:	2301      	movne	r3, #1
 8003b56:	2300      	moveq	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 8003b5e:	f000 f839 	bl	8003bd4 <Error_Handler>
  }
}
 8003b62:	bf00      	nop
 8003b64:	3758      	adds	r7, #88	; 0x58
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <HAL_TIM_PeriodElapsedCallback>:


/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM7){
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a04      	ldr	r2, [pc, #16]	; (8003b8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d102      	bne.n	8003b84 <HAL_TIM_PeriodElapsedCallback+0x18>
		appMain.taskStatus.UpdateTasks();
 8003b7e:	4804      	ldr	r0, [pc, #16]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003b80:	f7ff fb22 	bl	80031c8 <_ZN11TaskHandler11UpdateTasksEv>
	}



}
 8003b84:	bf00      	nop
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40001400 	.word	0x40001400
 8003b90:	200003b8 	.word	0x200003b8

08003b94 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]

}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <USB_CDC_RX_Interrupt>:




void USB_CDC_RX_Interrupt(uint8_t *data, uint32_t length)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
	appMain.usbCOM->Receive(data, length);
 8003bb2:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <USB_CDC_RX_Interrupt+0x28>)
 8003bb4:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <USB_CDC_RX_Interrupt+0x28>)
 8003bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4798      	blx	r3
}
 8003bc8:	bf00      	nop
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000398 	.word	0x20000398

08003bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bd8:	b672      	cpsid	i
}
 8003bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bdc:	e7fe      	b.n	8003bdc <Error_Handler+0x8>
	...

08003be0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d107      	bne.n	8003c00 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d102      	bne.n	8003c00 <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 8003bfa:	4803      	ldr	r0, [pc, #12]	; (8003c08 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003bfc:	f7fc fdb9 	bl	8000772 <_ZN7AppMainC1Ev>
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20000398 	.word	0x20000398

08003c0c <_GLOBAL__sub_I_appMain>:
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c14:	2001      	movs	r0, #1
 8003c16:	f7ff ffe3 	bl	8003be0 <_Z41__static_initialization_and_destruction_0ii>
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003c20:	4b1b      	ldr	r3, [pc, #108]	; (8003c90 <MX_SPI3_Init+0x74>)
 8003c22:	4a1c      	ldr	r2, [pc, #112]	; (8003c94 <MX_SPI3_Init+0x78>)
 8003c24:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <MX_SPI3_Init+0x74>)
 8003c28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c2c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003c2e:	4b18      	ldr	r3, [pc, #96]	; (8003c90 <MX_SPI3_Init+0x74>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c34:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <MX_SPI3_Init+0x74>)
 8003c36:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003c3a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c3c:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <MX_SPI3_Init+0x74>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c42:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <MX_SPI3_Init+0x74>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003c48:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <MX_SPI3_Init+0x74>)
 8003c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c4e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003c50:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <MX_SPI3_Init+0x74>)
 8003c52:	2218      	movs	r2, #24
 8003c54:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c56:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <MX_SPI3_Init+0x74>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <MX_SPI3_Init+0x74>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c62:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <MX_SPI3_Init+0x74>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <MX_SPI3_Init+0x74>)
 8003c6a:	2207      	movs	r2, #7
 8003c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003c6e:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <MX_SPI3_Init+0x74>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <MX_SPI3_Init+0x74>)
 8003c76:	2208      	movs	r2, #8
 8003c78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003c7a:	4805      	ldr	r0, [pc, #20]	; (8003c90 <MX_SPI3_Init+0x74>)
 8003c7c:	f005 f97a 	bl	8008f74 <HAL_SPI_Init>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003c86:	f7ff ffa5 	bl	8003bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003c8a:	bf00      	nop
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	200004c0 	.word	0x200004c0
 8003c94:	40003c00 	.word	0x40003c00

08003c98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	; 0x28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca0:	f107 0314 	add.w	r3, r7, #20
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a17      	ldr	r2, [pc, #92]	; (8003d14 <HAL_SPI_MspInit+0x7c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d128      	bne.n	8003d0c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003cba:	4b17      	ldr	r3, [pc, #92]	; (8003d18 <HAL_SPI_MspInit+0x80>)
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbe:	4a16      	ldr	r2, [pc, #88]	; (8003d18 <HAL_SPI_MspInit+0x80>)
 8003cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8003cc6:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <HAL_SPI_MspInit+0x80>)
 8003cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cd2:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <HAL_SPI_MspInit+0x80>)
 8003cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd6:	4a10      	ldr	r2, [pc, #64]	; (8003d18 <HAL_SPI_MspInit+0x80>)
 8003cd8:	f043 0304 	orr.w	r3, r3, #4
 8003cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cde:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <HAL_SPI_MspInit+0x80>)
 8003ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003cea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003cfc:	2306      	movs	r3, #6
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d00:	f107 0314 	add.w	r3, r7, #20
 8003d04:	4619      	mov	r1, r3
 8003d06:	4805      	ldr	r0, [pc, #20]	; (8003d1c <HAL_SPI_MspInit+0x84>)
 8003d08:	f002 f828 	bl	8005d5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	3728      	adds	r7, #40	; 0x28
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40003c00 	.word	0x40003c00
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	48000800 	.word	0x48000800

08003d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d26:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <HAL_MspInit+0x44>)
 8003d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2a:	4a0e      	ldr	r2, [pc, #56]	; (8003d64 <HAL_MspInit+0x44>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	6613      	str	r3, [r2, #96]	; 0x60
 8003d32:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <HAL_MspInit+0x44>)
 8003d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	607b      	str	r3, [r7, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d3e:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <HAL_MspInit+0x44>)
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d42:	4a08      	ldr	r2, [pc, #32]	; (8003d64 <HAL_MspInit+0x44>)
 8003d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d48:	6593      	str	r3, [r2, #88]	; 0x58
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <HAL_MspInit+0x44>)
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40021000 	.word	0x40021000

08003d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d6c:	e7fe      	b.n	8003d6c <NMI_Handler+0x4>

08003d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d72:	e7fe      	b.n	8003d72 <HardFault_Handler+0x4>

08003d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d78:	e7fe      	b.n	8003d78 <MemManage_Handler+0x4>

08003d7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d7e:	e7fe      	b.n	8003d7e <BusFault_Handler+0x4>

08003d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d84:	e7fe      	b.n	8003d84 <UsageFault_Handler+0x4>

08003d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d86:	b480      	push	{r7}
 8003d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d8a:	bf00      	nop
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d98:	bf00      	nop
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003da2:	b480      	push	{r7}
 8003da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003da6:	bf00      	nop
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003db4:	f000 f9c2 	bl	800413c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003db8:	bf00      	nop
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003dc0:	4802      	ldr	r0, [pc, #8]	; (8003dcc <DMA1_Channel1_IRQHandler+0x10>)
 8003dc2:	f001 fca3 	bl	800570c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003dc6:	bf00      	nop
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000288 	.word	0x20000288

08003dd0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8003dd4:	4802      	ldr	r0, [pc, #8]	; (8003de0 <DMA1_Channel3_IRQHandler+0x10>)
 8003dd6:	f001 fc99 	bl	800570c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003dda:	bf00      	nop
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20000308 	.word	0x20000308

08003de4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8003de8:	4802      	ldr	r0, [pc, #8]	; (8003df4 <DMA1_Channel4_IRQHandler+0x10>)
 8003dea:	f001 fc8f 	bl	800570c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003dee:	bf00      	nop
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20000350 	.word	0x20000350

08003df8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003dfc:	4802      	ldr	r0, [pc, #8]	; (8003e08 <TIM7_IRQHandler+0x10>)
 8003dfe:	f005 feed 	bl	8009bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003e02:	bf00      	nop
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000574 	.word	0x20000574

08003e0c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003e10:	4802      	ldr	r0, [pc, #8]	; (8003e1c <USB_IRQHandler+0x10>)
 8003e12:	f002 faa0 	bl	8006356 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	20000c90 	.word	0x20000c90

08003e20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
	return 1;
 8003e24:	2301      	movs	r3, #1
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <_kill>:

int _kill(int pid, int sig)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003e3a:	f00a fded 	bl	800ea18 <__errno>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2216      	movs	r2, #22
 8003e42:	601a      	str	r2, [r3, #0]
	return -1;
 8003e44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <_exit>:

void _exit (int status)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e58:	f04f 31ff 	mov.w	r1, #4294967295
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff ffe7 	bl	8003e30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e62:	e7fe      	b.n	8003e62 <_exit+0x12>

08003e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e6c:	4a14      	ldr	r2, [pc, #80]	; (8003ec0 <_sbrk+0x5c>)
 8003e6e:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <_sbrk+0x60>)
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e78:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <_sbrk+0x64>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d102      	bne.n	8003e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e80:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <_sbrk+0x64>)
 8003e82:	4a12      	ldr	r2, [pc, #72]	; (8003ecc <_sbrk+0x68>)
 8003e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e86:	4b10      	ldr	r3, [pc, #64]	; (8003ec8 <_sbrk+0x64>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d207      	bcs.n	8003ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e94:	f00a fdc0 	bl	800ea18 <__errno>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	220c      	movs	r2, #12
 8003e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea2:	e009      	b.n	8003eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ea4:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <_sbrk+0x64>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003eaa:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <_sbrk+0x64>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	4a05      	ldr	r2, [pc, #20]	; (8003ec8 <_sbrk+0x64>)
 8003eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20010000 	.word	0x20010000
 8003ec4:	00000400 	.word	0x00000400
 8003ec8:	20000524 	.word	0x20000524
 8003ecc:	200011c0 	.word	0x200011c0

08003ed0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003ed4:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <SystemInit+0x20>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eda:	4a05      	ldr	r2, [pc, #20]	; (8003ef0 <SystemInit+0x20>)
 8003edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003ee4:	bf00      	nop
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003efa:	1d3b      	adds	r3, r7, #4
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	605a      	str	r2, [r3, #4]
 8003f02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003f04:	4b14      	ldr	r3, [pc, #80]	; (8003f58 <MX_TIM6_Init+0x64>)
 8003f06:	4a15      	ldr	r2, [pc, #84]	; (8003f5c <MX_TIM6_Init+0x68>)
 8003f08:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8003f0a:	4b13      	ldr	r3, [pc, #76]	; (8003f58 <MX_TIM6_Init+0x64>)
 8003f0c:	220a      	movs	r2, #10
 8003f0e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f10:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <MX_TIM6_Init+0x64>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16000;
 8003f16:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <MX_TIM6_Init+0x64>)
 8003f18:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003f1c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f1e:	4b0e      	ldr	r3, [pc, #56]	; (8003f58 <MX_TIM6_Init+0x64>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003f24:	480c      	ldr	r0, [pc, #48]	; (8003f58 <MX_TIM6_Init+0x64>)
 8003f26:	f005 fdad 	bl	8009a84 <HAL_TIM_Base_Init>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003f30:	f7ff fe50 	bl	8003bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f34:	2300      	movs	r3, #0
 8003f36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003f3c:	1d3b      	adds	r3, r7, #4
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4805      	ldr	r0, [pc, #20]	; (8003f58 <MX_TIM6_Init+0x64>)
 8003f42:	f005 ffed 	bl	8009f20 <HAL_TIMEx_MasterConfigSynchronization>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003f4c:	f7ff fe42 	bl	8003bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20000528 	.word	0x20000528
 8003f5c:	40001000 	.word	0x40001000

08003f60 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f66:	1d3b      	adds	r3, r7, #4
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003f70:	4b14      	ldr	r3, [pc, #80]	; (8003fc4 <MX_TIM7_Init+0x64>)
 8003f72:	4a15      	ldr	r2, [pc, #84]	; (8003fc8 <MX_TIM7_Init+0x68>)
 8003f74:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10;
 8003f76:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <MX_TIM7_Init+0x64>)
 8003f78:	220a      	movs	r2, #10
 8003f7a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f7c:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <MX_TIM7_Init+0x64>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7199;
 8003f82:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <MX_TIM7_Init+0x64>)
 8003f84:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003f88:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f8a:	4b0e      	ldr	r3, [pc, #56]	; (8003fc4 <MX_TIM7_Init+0x64>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003f90:	480c      	ldr	r0, [pc, #48]	; (8003fc4 <MX_TIM7_Init+0x64>)
 8003f92:	f005 fd77 	bl	8009a84 <HAL_TIM_Base_Init>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003f9c:	f7ff fe1a 	bl	8003bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003fa0:	2320      	movs	r3, #32
 8003fa2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003fa8:	1d3b      	adds	r3, r7, #4
 8003faa:	4619      	mov	r1, r3
 8003fac:	4805      	ldr	r0, [pc, #20]	; (8003fc4 <MX_TIM7_Init+0x64>)
 8003fae:	f005 ffb7 	bl	8009f20 <HAL_TIMEx_MasterConfigSynchronization>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003fb8:	f7ff fe0c 	bl	8003bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003fbc:	bf00      	nop
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20000574 	.word	0x20000574
 8003fc8:	40001400 	.word	0x40001400

08003fcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a16      	ldr	r2, [pc, #88]	; (8004034 <HAL_TIM_Base_MspInit+0x68>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003fde:	4b16      	ldr	r3, [pc, #88]	; (8004038 <HAL_TIM_Base_MspInit+0x6c>)
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe2:	4a15      	ldr	r2, [pc, #84]	; (8004038 <HAL_TIM_Base_MspInit+0x6c>)
 8003fe4:	f043 0310 	orr.w	r3, r3, #16
 8003fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8003fea:	4b13      	ldr	r3, [pc, #76]	; (8004038 <HAL_TIM_Base_MspInit+0x6c>)
 8003fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fee:	f003 0310 	and.w	r3, r3, #16
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003ff6:	e018      	b.n	800402a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a0f      	ldr	r2, [pc, #60]	; (800403c <HAL_TIM_Base_MspInit+0x70>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d113      	bne.n	800402a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004002:	4b0d      	ldr	r3, [pc, #52]	; (8004038 <HAL_TIM_Base_MspInit+0x6c>)
 8004004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004006:	4a0c      	ldr	r2, [pc, #48]	; (8004038 <HAL_TIM_Base_MspInit+0x6c>)
 8004008:	f043 0320 	orr.w	r3, r3, #32
 800400c:	6593      	str	r3, [r2, #88]	; 0x58
 800400e:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <HAL_TIM_Base_MspInit+0x6c>)
 8004010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800401a:	2200      	movs	r2, #0
 800401c:	2100      	movs	r1, #0
 800401e:	2037      	movs	r0, #55	; 0x37
 8004020:	f001 f85f 	bl	80050e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004024:	2037      	movs	r0, #55	; 0x37
 8004026:	f001 f878 	bl	800511a <HAL_NVIC_EnableIRQ>
}
 800402a:	bf00      	nop
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40001000 	.word	0x40001000
 8004038:	40021000 	.word	0x40021000
 800403c:	40001400 	.word	0x40001400

08004040 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004078 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004044:	f7ff ff44 	bl	8003ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004048:	480c      	ldr	r0, [pc, #48]	; (800407c <LoopForever+0x6>)
  ldr r1, =_edata
 800404a:	490d      	ldr	r1, [pc, #52]	; (8004080 <LoopForever+0xa>)
  ldr r2, =_sidata
 800404c:	4a0d      	ldr	r2, [pc, #52]	; (8004084 <LoopForever+0xe>)
  movs r3, #0
 800404e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004050:	e002      	b.n	8004058 <LoopCopyDataInit>

08004052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004056:	3304      	adds	r3, #4

08004058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800405a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800405c:	d3f9      	bcc.n	8004052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800405e:	4a0a      	ldr	r2, [pc, #40]	; (8004088 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004060:	4c0a      	ldr	r4, [pc, #40]	; (800408c <LoopForever+0x16>)
  movs r3, #0
 8004062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004064:	e001      	b.n	800406a <LoopFillZerobss>

08004066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004068:	3204      	adds	r2, #4

0800406a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800406a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800406c:	d3fb      	bcc.n	8004066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800406e:	f00a fcd9 	bl	800ea24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004072:	f7ff fcf9 	bl	8003a68 <main>

08004076 <LoopForever>:

LoopForever:
    b LoopForever
 8004076:	e7fe      	b.n	8004076 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004078:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800407c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004080:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8004084:	0800ed90 	.word	0x0800ed90
  ldr r2, =_sbss
 8004088:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 800408c:	200011c0 	.word	0x200011c0

08004090 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004090:	e7fe      	b.n	8004090 <ADC1_IRQHandler>

08004092 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004098:	2300      	movs	r3, #0
 800409a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800409c:	2003      	movs	r0, #3
 800409e:	f001 f815 	bl	80050cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040a2:	200f      	movs	r0, #15
 80040a4:	f000 f80e 	bl	80040c4 <HAL_InitTick>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	71fb      	strb	r3, [r7, #7]
 80040b2:	e001      	b.n	80040b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80040b4:	f7ff fe34 	bl	8003d20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80040b8:	79fb      	ldrb	r3, [r7, #7]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80040d0:	4b17      	ldr	r3, [pc, #92]	; (8004130 <HAL_InitTick+0x6c>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d023      	beq.n	8004120 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80040d8:	4b16      	ldr	r3, [pc, #88]	; (8004134 <HAL_InitTick+0x70>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4b14      	ldr	r3, [pc, #80]	; (8004130 <HAL_InitTick+0x6c>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	4619      	mov	r1, r3
 80040e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80040ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ee:	4618      	mov	r0, r3
 80040f0:	f001 f821 	bl	8005136 <HAL_SYSTICK_Config>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10f      	bne.n	800411a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b0f      	cmp	r3, #15
 80040fe:	d809      	bhi.n	8004114 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004100:	2200      	movs	r2, #0
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	f04f 30ff 	mov.w	r0, #4294967295
 8004108:	f000 ffeb 	bl	80050e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800410c:	4a0a      	ldr	r2, [pc, #40]	; (8004138 <HAL_InitTick+0x74>)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e007      	b.n	8004124 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
 8004118:	e004      	b.n	8004124 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	73fb      	strb	r3, [r7, #15]
 800411e:	e001      	b.n	8004124 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004124:	7bfb      	ldrb	r3, [r7, #15]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20000008 	.word	0x20000008
 8004134:	20000000 	.word	0x20000000
 8004138:	20000004 	.word	0x20000004

0800413c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004140:	4b06      	ldr	r3, [pc, #24]	; (800415c <HAL_IncTick+0x20>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	4b06      	ldr	r3, [pc, #24]	; (8004160 <HAL_IncTick+0x24>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4413      	add	r3, r2
 800414c:	4a04      	ldr	r2, [pc, #16]	; (8004160 <HAL_IncTick+0x24>)
 800414e:	6013      	str	r3, [r2, #0]
}
 8004150:	bf00      	nop
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	20000008 	.word	0x20000008
 8004160:	200005c0 	.word	0x200005c0

08004164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  return uwTick;
 8004168:	4b03      	ldr	r3, [pc, #12]	; (8004178 <HAL_GetTick+0x14>)
 800416a:	681b      	ldr	r3, [r3, #0]
}
 800416c:	4618      	mov	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	200005c0 	.word	0x200005c0

0800417c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004184:	f7ff ffee 	bl	8004164 <HAL_GetTick>
 8004188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004194:	d005      	beq.n	80041a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004196:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <HAL_Delay+0x44>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4413      	add	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041a2:	bf00      	nop
 80041a4:	f7ff ffde 	bl	8004164 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d8f7      	bhi.n	80041a4 <HAL_Delay+0x28>
  {
  }
}
 80041b4:	bf00      	nop
 80041b6:	bf00      	nop
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000008 	.word	0x20000008

080041c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	609a      	str	r2, [r3, #8]
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	609a      	str	r2, [r3, #8]
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004220:	4618      	mov	r0, r3
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800422c:	b480      	push	{r7}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
 8004238:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3360      	adds	r3, #96	; 0x60
 800423e:	461a      	mov	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4b08      	ldr	r3, [pc, #32]	; (8004270 <LL_ADC_SetOffset+0x44>)
 800424e:	4013      	ands	r3, r2
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	4313      	orrs	r3, r2
 800425c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004264:	bf00      	nop
 8004266:	371c      	adds	r7, #28
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	03fff000 	.word	0x03fff000

08004274 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3360      	adds	r3, #96	; 0x60
 8004282:	461a      	mov	r2, r3
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	3360      	adds	r3, #96	; 0x60
 80042b0:	461a      	mov	r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	431a      	orrs	r2, r3
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80042ca:	bf00      	nop
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b087      	sub	sp, #28
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3330      	adds	r3, #48	; 0x30
 80042e6:	461a      	mov	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	0a1b      	lsrs	r3, r3, #8
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	f003 030c 	and.w	r3, r3, #12
 80042f2:	4413      	add	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	211f      	movs	r1, #31
 8004302:	fa01 f303 	lsl.w	r3, r1, r3
 8004306:	43db      	mvns	r3, r3
 8004308:	401a      	ands	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	0e9b      	lsrs	r3, r3, #26
 800430e:	f003 011f 	and.w	r1, r3, #31
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	fa01 f303 	lsl.w	r3, r1, r3
 800431c:	431a      	orrs	r2, r3
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800432e:	b480      	push	{r7}
 8004330:	b087      	sub	sp, #28
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3314      	adds	r3, #20
 800433e:	461a      	mov	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	0e5b      	lsrs	r3, r3, #25
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	4413      	add	r3, r2
 800434c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	0d1b      	lsrs	r3, r3, #20
 8004356:	f003 031f 	and.w	r3, r3, #31
 800435a:	2107      	movs	r1, #7
 800435c:	fa01 f303 	lsl.w	r3, r1, r3
 8004360:	43db      	mvns	r3, r3
 8004362:	401a      	ands	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	0d1b      	lsrs	r3, r3, #20
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	fa01 f303 	lsl.w	r3, r1, r3
 8004372:	431a      	orrs	r2, r3
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004378:	bf00      	nop
 800437a:	371c      	adds	r7, #28
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800439c:	43db      	mvns	r3, r3
 800439e:	401a      	ands	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f003 0318 	and.w	r3, r3, #24
 80043a6:	4908      	ldr	r1, [pc, #32]	; (80043c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80043a8:	40d9      	lsrs	r1, r3
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	400b      	ands	r3, r1
 80043ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b2:	431a      	orrs	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80043ba:	bf00      	nop
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	0007ffff 	.word	0x0007ffff

080043cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80043dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6093      	str	r3, [r2, #8]
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004404:	d101      	bne.n	800440a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004428:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800442c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004454:	d101      	bne.n	800445a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <LL_ADC_IsEnabled+0x18>
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <LL_ADC_IsEnabled+0x1a>
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d101      	bne.n	80044a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d101      	bne.n	80044cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
	...

080044dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e12c      	b.n	8004750 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004500:	2b00      	cmp	r3, #0
 8004502:	d109      	bne.n	8004518 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7fe fff1 	bl	80034ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff ff67 	bl	80043f0 <LL_ADC_IsDeepPowerDownEnabled>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d004      	beq.n	8004532 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff ff4d 	bl	80043cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff ff82 	bl	8004440 <LL_ADC_IsInternalRegulatorEnabled>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d115      	bne.n	800456e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff ff66 	bl	8004418 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800454c:	4b82      	ldr	r3, [pc, #520]	; (8004758 <HAL_ADC_Init+0x27c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	099b      	lsrs	r3, r3, #6
 8004552:	4a82      	ldr	r2, [pc, #520]	; (800475c <HAL_ADC_Init+0x280>)
 8004554:	fba2 2303 	umull	r2, r3, r2, r3
 8004558:	099b      	lsrs	r3, r3, #6
 800455a:	3301      	adds	r3, #1
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004560:	e002      	b.n	8004568 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	3b01      	subs	r3, #1
 8004566:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f9      	bne.n	8004562 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff ff64 	bl	8004440 <LL_ADC_IsInternalRegulatorEnabled>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10d      	bne.n	800459a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004582:	f043 0210 	orr.w	r2, r3, #16
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458e:	f043 0201 	orr.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff ff75 	bl	800448e <LL_ADC_REG_IsConversionOngoing>
 80045a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045aa:	f003 0310 	and.w	r3, r3, #16
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f040 80c5 	bne.w	800473e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f040 80c1 	bne.w	800473e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80045c4:	f043 0202 	orr.w	r2, r3, #2
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff ff49 	bl	8004468 <LL_ADC_IsEnabled>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10b      	bne.n	80045f4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045dc:	4860      	ldr	r0, [pc, #384]	; (8004760 <HAL_ADC_Init+0x284>)
 80045de:	f7ff ff43 	bl	8004468 <LL_ADC_IsEnabled>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d105      	bne.n	80045f4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	4619      	mov	r1, r3
 80045ee:	485d      	ldr	r0, [pc, #372]	; (8004764 <HAL_ADC_Init+0x288>)
 80045f0:	f7ff fde8 	bl	80041c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	7e5b      	ldrb	r3, [r3, #25]
 80045f8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045fe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004604:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800460a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004612:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004614:	4313      	orrs	r3, r2
 8004616:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d106      	bne.n	8004630 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	3b01      	subs	r3, #1
 8004628:	045b      	lsls	r3, r3, #17
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4313      	orrs	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	2b00      	cmp	r3, #0
 8004636:	d009      	beq.n	800464c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4313      	orrs	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	4b45      	ldr	r3, [pc, #276]	; (8004768 <HAL_ADC_Init+0x28c>)
 8004654:	4013      	ands	r3, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	69b9      	ldr	r1, [r7, #24]
 800465c:	430b      	orrs	r3, r1
 800465e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff ff12 	bl	800448e <LL_ADC_REG_IsConversionOngoing>
 800466a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff ff1f 	bl	80044b4 <LL_ADC_INJ_IsConversionOngoing>
 8004676:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d13d      	bne.n	80046fa <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d13a      	bne.n	80046fa <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004688:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004690:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004692:	4313      	orrs	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046a0:	f023 0302 	bic.w	r3, r3, #2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6812      	ldr	r2, [r2, #0]
 80046a8:	69b9      	ldr	r1, [r7, #24]
 80046aa:	430b      	orrs	r3, r1
 80046ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d118      	bne.n	80046ea <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80046c2:	f023 0304 	bic.w	r3, r3, #4
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046ce:	4311      	orrs	r1, r2
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80046d4:	4311      	orrs	r1, r2
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80046da:	430a      	orrs	r2, r1
 80046dc:	431a      	orrs	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	611a      	str	r2, [r3, #16]
 80046e8:	e007      	b.n	80046fa <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0201 	bic.w	r2, r2, #1
 80046f8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d10c      	bne.n	800471c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	f023 010f 	bic.w	r1, r3, #15
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	1e5a      	subs	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
 800471a:	e007      	b.n	800472c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 020f 	bic.w	r2, r2, #15
 800472a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004730:	f023 0303 	bic.w	r3, r3, #3
 8004734:	f043 0201 	orr.w	r2, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	655a      	str	r2, [r3, #84]	; 0x54
 800473c:	e007      	b.n	800474e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004742:	f043 0210 	orr.w	r2, r3, #16
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800474e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3720      	adds	r7, #32
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20000000 	.word	0x20000000
 800475c:	053e2d63 	.word	0x053e2d63
 8004760:	50040000 	.word	0x50040000
 8004764:	50040300 	.word	0x50040300
 8004768:	fff0c007 	.word	0xfff0c007

0800476c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b0b6      	sub	sp, #216	; 0xd8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <HAL_ADC_ConfigChannel+0x22>
 800478a:	2302      	movs	r3, #2
 800478c:	e3b9      	b.n	8004f02 <HAL_ADC_ConfigChannel+0x796>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff fe77 	bl	800448e <LL_ADC_REG_IsConversionOngoing>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f040 839e 	bne.w	8004ee4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b05      	cmp	r3, #5
 80047ae:	d824      	bhi.n	80047fa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	3b02      	subs	r3, #2
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d81b      	bhi.n	80047f2 <HAL_ADC_ConfigChannel+0x86>
 80047ba:	a201      	add	r2, pc, #4	; (adr r2, 80047c0 <HAL_ADC_ConfigChannel+0x54>)
 80047bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c0:	080047d1 	.word	0x080047d1
 80047c4:	080047d9 	.word	0x080047d9
 80047c8:	080047e1 	.word	0x080047e1
 80047cc:	080047e9 	.word	0x080047e9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	220c      	movs	r2, #12
 80047d4:	605a      	str	r2, [r3, #4]
          break;
 80047d6:	e011      	b.n	80047fc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2212      	movs	r2, #18
 80047dc:	605a      	str	r2, [r3, #4]
          break;
 80047de:	e00d      	b.n	80047fc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2218      	movs	r2, #24
 80047e4:	605a      	str	r2, [r3, #4]
          break;
 80047e6:	e009      	b.n	80047fc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047ee:	605a      	str	r2, [r3, #4]
          break;
 80047f0:	e004      	b.n	80047fc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2206      	movs	r2, #6
 80047f6:	605a      	str	r2, [r3, #4]
          break;
 80047f8:	e000      	b.n	80047fc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80047fa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6818      	ldr	r0, [r3, #0]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	6859      	ldr	r1, [r3, #4]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	f7ff fd64 	bl	80042d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff fe3b 	bl	800448e <LL_ADC_REG_IsConversionOngoing>
 8004818:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff fe47 	bl	80044b4 <LL_ADC_INJ_IsConversionOngoing>
 8004826:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800482a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800482e:	2b00      	cmp	r3, #0
 8004830:	f040 81a6 	bne.w	8004b80 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004834:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004838:	2b00      	cmp	r3, #0
 800483a:	f040 81a1 	bne.w	8004b80 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	6819      	ldr	r1, [r3, #0]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	461a      	mov	r2, r3
 800484c:	f7ff fd6f 	bl	800432e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	695a      	ldr	r2, [r3, #20]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	08db      	lsrs	r3, r3, #3
 800485c:	f003 0303 	and.w	r3, r3, #3
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b04      	cmp	r3, #4
 8004870:	d00a      	beq.n	8004888 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6919      	ldr	r1, [r3, #16]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004882:	f7ff fcd3 	bl	800422c <LL_ADC_SetOffset>
 8004886:	e17b      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2100      	movs	r1, #0
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fcf0 	bl	8004274 <LL_ADC_GetOffsetChannel>
 8004894:	4603      	mov	r3, r0
 8004896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10a      	bne.n	80048b4 <HAL_ADC_ConfigChannel+0x148>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2100      	movs	r1, #0
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff fce5 	bl	8004274 <LL_ADC_GetOffsetChannel>
 80048aa:	4603      	mov	r3, r0
 80048ac:	0e9b      	lsrs	r3, r3, #26
 80048ae:	f003 021f 	and.w	r2, r3, #31
 80048b2:	e01e      	b.n	80048f2 <HAL_ADC_ConfigChannel+0x186>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2100      	movs	r1, #0
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff fcda 	bl	8004274 <LL_ADC_GetOffsetChannel>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048ca:	fa93 f3a3 	rbit	r3, r3
 80048ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80048d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80048da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80048e2:	2320      	movs	r3, #32
 80048e4:	e004      	b.n	80048f0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80048e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048ea:	fab3 f383 	clz	r3, r3
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d105      	bne.n	800490a <HAL_ADC_ConfigChannel+0x19e>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	0e9b      	lsrs	r3, r3, #26
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	e018      	b.n	800493c <HAL_ADC_ConfigChannel+0x1d0>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004912:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004916:	fa93 f3a3 	rbit	r3, r3
 800491a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800491e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004922:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004926:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800492e:	2320      	movs	r3, #32
 8004930:	e004      	b.n	800493c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004932:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004936:	fab3 f383 	clz	r3, r3
 800493a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800493c:	429a      	cmp	r2, r3
 800493e:	d106      	bne.n	800494e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2200      	movs	r2, #0
 8004946:	2100      	movs	r1, #0
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff fca9 	bl	80042a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2101      	movs	r1, #1
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff fc8d 	bl	8004274 <LL_ADC_GetOffsetChannel>
 800495a:	4603      	mov	r3, r0
 800495c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10a      	bne.n	800497a <HAL_ADC_ConfigChannel+0x20e>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2101      	movs	r1, #1
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff fc82 	bl	8004274 <LL_ADC_GetOffsetChannel>
 8004970:	4603      	mov	r3, r0
 8004972:	0e9b      	lsrs	r3, r3, #26
 8004974:	f003 021f 	and.w	r2, r3, #31
 8004978:	e01e      	b.n	80049b8 <HAL_ADC_ConfigChannel+0x24c>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2101      	movs	r1, #1
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff fc77 	bl	8004274 <LL_ADC_GetOffsetChannel>
 8004986:	4603      	mov	r3, r0
 8004988:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004990:	fa93 f3a3 	rbit	r3, r3
 8004994:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004998:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800499c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80049a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80049a8:	2320      	movs	r3, #32
 80049aa:	e004      	b.n	80049b6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80049ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049b0:	fab3 f383 	clz	r3, r3
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d105      	bne.n	80049d0 <HAL_ADC_ConfigChannel+0x264>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	0e9b      	lsrs	r3, r3, #26
 80049ca:	f003 031f 	and.w	r3, r3, #31
 80049ce:	e018      	b.n	8004a02 <HAL_ADC_ConfigChannel+0x296>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049dc:	fa93 f3a3 	rbit	r3, r3
 80049e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80049e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80049e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80049ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80049f4:	2320      	movs	r3, #32
 80049f6:	e004      	b.n	8004a02 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80049f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049fc:	fab3 f383 	clz	r3, r3
 8004a00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d106      	bne.n	8004a14 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff fc46 	bl	80042a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2102      	movs	r1, #2
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff fc2a 	bl	8004274 <LL_ADC_GetOffsetChannel>
 8004a20:	4603      	mov	r3, r0
 8004a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10a      	bne.n	8004a40 <HAL_ADC_ConfigChannel+0x2d4>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2102      	movs	r1, #2
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff fc1f 	bl	8004274 <LL_ADC_GetOffsetChannel>
 8004a36:	4603      	mov	r3, r0
 8004a38:	0e9b      	lsrs	r3, r3, #26
 8004a3a:	f003 021f 	and.w	r2, r3, #31
 8004a3e:	e01e      	b.n	8004a7e <HAL_ADC_ConfigChannel+0x312>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2102      	movs	r1, #2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff fc14 	bl	8004274 <LL_ADC_GetOffsetChannel>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a56:	fa93 f3a3 	rbit	r3, r3
 8004a5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004a5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004a66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004a6e:	2320      	movs	r3, #32
 8004a70:	e004      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004a72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a76:	fab3 f383 	clz	r3, r3
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d105      	bne.n	8004a96 <HAL_ADC_ConfigChannel+0x32a>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	0e9b      	lsrs	r3, r3, #26
 8004a90:	f003 031f 	and.w	r3, r3, #31
 8004a94:	e016      	b.n	8004ac4 <HAL_ADC_ConfigChannel+0x358>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004aa2:	fa93 f3a3 	rbit	r3, r3
 8004aa6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004aa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004aaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004aae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004ab6:	2320      	movs	r3, #32
 8004ab8:	e004      	b.n	8004ac4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004aba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004abe:	fab3 f383 	clz	r3, r3
 8004ac2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d106      	bne.n	8004ad6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2200      	movs	r2, #0
 8004ace:	2102      	movs	r1, #2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff fbe5 	bl	80042a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2103      	movs	r1, #3
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff fbc9 	bl	8004274 <LL_ADC_GetOffsetChannel>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10a      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x396>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2103      	movs	r1, #3
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff fbbe 	bl	8004274 <LL_ADC_GetOffsetChannel>
 8004af8:	4603      	mov	r3, r0
 8004afa:	0e9b      	lsrs	r3, r3, #26
 8004afc:	f003 021f 	and.w	r2, r3, #31
 8004b00:	e017      	b.n	8004b32 <HAL_ADC_ConfigChannel+0x3c6>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2103      	movs	r1, #3
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff fbb3 	bl	8004274 <LL_ADC_GetOffsetChannel>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b14:	fa93 f3a3 	rbit	r3, r3
 8004b18:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004b1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b1c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004b1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004b24:	2320      	movs	r3, #32
 8004b26:	e003      	b.n	8004b30 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b2a:	fab3 f383 	clz	r3, r3
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d105      	bne.n	8004b4a <HAL_ADC_ConfigChannel+0x3de>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	0e9b      	lsrs	r3, r3, #26
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	e011      	b.n	8004b6e <HAL_ADC_ConfigChannel+0x402>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b52:	fa93 f3a3 	rbit	r3, r3
 8004b56:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004b62:	2320      	movs	r3, #32
 8004b64:	e003      	b.n	8004b6e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b68:	fab3 f383 	clz	r3, r3
 8004b6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d106      	bne.n	8004b80 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2200      	movs	r2, #0
 8004b78:	2103      	movs	r1, #3
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fb90 	bl	80042a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff fc6f 	bl	8004468 <LL_ADC_IsEnabled>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f040 813f 	bne.w	8004e10 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	6819      	ldr	r1, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f7ff fbf0 	bl	8004384 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4a8e      	ldr	r2, [pc, #568]	; (8004de4 <HAL_ADC_ConfigChannel+0x678>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	f040 8130 	bne.w	8004e10 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10b      	bne.n	8004bd8 <HAL_ADC_ConfigChannel+0x46c>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	0e9b      	lsrs	r3, r3, #26
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	f003 031f 	and.w	r3, r3, #31
 8004bcc:	2b09      	cmp	r3, #9
 8004bce:	bf94      	ite	ls
 8004bd0:	2301      	movls	r3, #1
 8004bd2:	2300      	movhi	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	e019      	b.n	8004c0c <HAL_ADC_ConfigChannel+0x4a0>
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004be0:	fa93 f3a3 	rbit	r3, r3
 8004be4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004be6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004be8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004bea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004bf0:	2320      	movs	r3, #32
 8004bf2:	e003      	b.n	8004bfc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004bf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bf6:	fab3 f383 	clz	r3, r3
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	f003 031f 	and.w	r3, r3, #31
 8004c02:	2b09      	cmp	r3, #9
 8004c04:	bf94      	ite	ls
 8004c06:	2301      	movls	r3, #1
 8004c08:	2300      	movhi	r3, #0
 8004c0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d079      	beq.n	8004d04 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d107      	bne.n	8004c2c <HAL_ADC_ConfigChannel+0x4c0>
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	0e9b      	lsrs	r3, r3, #26
 8004c22:	3301      	adds	r3, #1
 8004c24:	069b      	lsls	r3, r3, #26
 8004c26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c2a:	e015      	b.n	8004c58 <HAL_ADC_ConfigChannel+0x4ec>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c34:	fa93 f3a3 	rbit	r3, r3
 8004c38:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004c44:	2320      	movs	r3, #32
 8004c46:	e003      	b.n	8004c50 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c4a:	fab3 f383 	clz	r3, r3
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	3301      	adds	r3, #1
 8004c52:	069b      	lsls	r3, r3, #26
 8004c54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d109      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0x50c>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	0e9b      	lsrs	r3, r3, #26
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	f003 031f 	and.w	r3, r3, #31
 8004c70:	2101      	movs	r1, #1
 8004c72:	fa01 f303 	lsl.w	r3, r1, r3
 8004c76:	e017      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x53c>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c80:	fa93 f3a3 	rbit	r3, r3
 8004c84:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004c90:	2320      	movs	r3, #32
 8004c92:	e003      	b.n	8004c9c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c96:	fab3 f383 	clz	r3, r3
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	f003 031f 	and.w	r3, r3, #31
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca8:	ea42 0103 	orr.w	r1, r2, r3
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <HAL_ADC_ConfigChannel+0x562>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	0e9b      	lsrs	r3, r3, #26
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	f003 021f 	and.w	r2, r3, #31
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	4413      	add	r3, r2
 8004cca:	051b      	lsls	r3, r3, #20
 8004ccc:	e018      	b.n	8004d00 <HAL_ADC_ConfigChannel+0x594>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd6:	fa93 f3a3 	rbit	r3, r3
 8004cda:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004ce6:	2320      	movs	r3, #32
 8004ce8:	e003      	b.n	8004cf2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cec:	fab3 f383 	clz	r3, r3
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	f003 021f 	and.w	r2, r3, #31
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	4413      	add	r3, r2
 8004cfe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d00:	430b      	orrs	r3, r1
 8004d02:	e080      	b.n	8004e06 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d107      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x5b4>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	0e9b      	lsrs	r3, r3, #26
 8004d16:	3301      	adds	r3, #1
 8004d18:	069b      	lsls	r3, r3, #26
 8004d1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d1e:	e015      	b.n	8004d4c <HAL_ADC_ConfigChannel+0x5e0>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d28:	fa93 f3a3 	rbit	r3, r3
 8004d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d30:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004d38:	2320      	movs	r3, #32
 8004d3a:	e003      	b.n	8004d44 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	fab3 f383 	clz	r3, r3
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	3301      	adds	r3, #1
 8004d46:	069b      	lsls	r3, r3, #26
 8004d48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d109      	bne.n	8004d6c <HAL_ADC_ConfigChannel+0x600>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	0e9b      	lsrs	r3, r3, #26
 8004d5e:	3301      	adds	r3, #1
 8004d60:	f003 031f 	and.w	r3, r3, #31
 8004d64:	2101      	movs	r1, #1
 8004d66:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6a:	e017      	b.n	8004d9c <HAL_ADC_ConfigChannel+0x630>
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	fa93 f3a3 	rbit	r3, r3
 8004d78:	61fb      	str	r3, [r7, #28]
  return result;
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004d84:	2320      	movs	r3, #32
 8004d86:	e003      	b.n	8004d90 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	fab3 f383 	clz	r3, r3
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	3301      	adds	r3, #1
 8004d92:	f003 031f 	and.w	r3, r3, #31
 8004d96:	2101      	movs	r1, #1
 8004d98:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9c:	ea42 0103 	orr.w	r1, r2, r3
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10d      	bne.n	8004dc8 <HAL_ADC_ConfigChannel+0x65c>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	0e9b      	lsrs	r3, r3, #26
 8004db2:	3301      	adds	r3, #1
 8004db4:	f003 021f 	and.w	r2, r3, #31
 8004db8:	4613      	mov	r3, r2
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	4413      	add	r3, r2
 8004dbe:	3b1e      	subs	r3, #30
 8004dc0:	051b      	lsls	r3, r3, #20
 8004dc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004dc6:	e01d      	b.n	8004e04 <HAL_ADC_ConfigChannel+0x698>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	fa93 f3a3 	rbit	r3, r3
 8004dd4:	613b      	str	r3, [r7, #16]
  return result;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d103      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004de0:	2320      	movs	r3, #32
 8004de2:	e005      	b.n	8004df0 <HAL_ADC_ConfigChannel+0x684>
 8004de4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	fab3 f383 	clz	r3, r3
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	3301      	adds	r3, #1
 8004df2:	f003 021f 	and.w	r2, r3, #31
 8004df6:	4613      	mov	r3, r2
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	4413      	add	r3, r2
 8004dfc:	3b1e      	subs	r3, #30
 8004dfe:	051b      	lsls	r3, r3, #20
 8004e00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e04:	430b      	orrs	r3, r1
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	6892      	ldr	r2, [r2, #8]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	f7ff fa8f 	bl	800432e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	4b3d      	ldr	r3, [pc, #244]	; (8004f0c <HAL_ADC_ConfigChannel+0x7a0>)
 8004e16:	4013      	ands	r3, r2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d06c      	beq.n	8004ef6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e1c:	483c      	ldr	r0, [pc, #240]	; (8004f10 <HAL_ADC_ConfigChannel+0x7a4>)
 8004e1e:	f7ff f9f7 	bl	8004210 <LL_ADC_GetCommonPathInternalCh>
 8004e22:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a3a      	ldr	r2, [pc, #232]	; (8004f14 <HAL_ADC_ConfigChannel+0x7a8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d127      	bne.n	8004e80 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d121      	bne.n	8004e80 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a35      	ldr	r2, [pc, #212]	; (8004f18 <HAL_ADC_ConfigChannel+0x7ac>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d157      	bne.n	8004ef6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e4e:	4619      	mov	r1, r3
 8004e50:	482f      	ldr	r0, [pc, #188]	; (8004f10 <HAL_ADC_ConfigChannel+0x7a4>)
 8004e52:	f7ff f9ca 	bl	80041ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e56:	4b31      	ldr	r3, [pc, #196]	; (8004f1c <HAL_ADC_ConfigChannel+0x7b0>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	099b      	lsrs	r3, r3, #6
 8004e5c:	4a30      	ldr	r2, [pc, #192]	; (8004f20 <HAL_ADC_ConfigChannel+0x7b4>)
 8004e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e62:	099b      	lsrs	r3, r3, #6
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	4613      	mov	r3, r2
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e70:	e002      	b.n	8004e78 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f9      	bne.n	8004e72 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e7e:	e03a      	b.n	8004ef6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a27      	ldr	r2, [pc, #156]	; (8004f24 <HAL_ADC_ConfigChannel+0x7b8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d113      	bne.n	8004eb2 <HAL_ADC_ConfigChannel+0x746>
 8004e8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10d      	bne.n	8004eb2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1f      	ldr	r2, [pc, #124]	; (8004f18 <HAL_ADC_ConfigChannel+0x7ac>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d12a      	bne.n	8004ef6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ea0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ea4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4819      	ldr	r0, [pc, #100]	; (8004f10 <HAL_ADC_ConfigChannel+0x7a4>)
 8004eac:	f7ff f99d 	bl	80041ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004eb0:	e021      	b.n	8004ef6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1c      	ldr	r2, [pc, #112]	; (8004f28 <HAL_ADC_ConfigChannel+0x7bc>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d11c      	bne.n	8004ef6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ebc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d116      	bne.n	8004ef6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a12      	ldr	r2, [pc, #72]	; (8004f18 <HAL_ADC_ConfigChannel+0x7ac>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d111      	bne.n	8004ef6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ed2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ed6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004eda:	4619      	mov	r1, r3
 8004edc:	480c      	ldr	r0, [pc, #48]	; (8004f10 <HAL_ADC_ConfigChannel+0x7a4>)
 8004ede:	f7ff f984 	bl	80041ea <LL_ADC_SetCommonPathInternalCh>
 8004ee2:	e008      	b.n	8004ef6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee8:	f043 0220 	orr.w	r2, r3, #32
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004efe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	37d8      	adds	r7, #216	; 0xd8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	80080000 	.word	0x80080000
 8004f10:	50040300 	.word	0x50040300
 8004f14:	c7520000 	.word	0xc7520000
 8004f18:	50040000 	.word	0x50040000
 8004f1c:	20000000 	.word	0x20000000
 8004f20:	053e2d63 	.word	0x053e2d63
 8004f24:	cb840000 	.word	0xcb840000
 8004f28:	80000001 	.word	0x80000001

08004f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f3c:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <__NVIC_SetPriorityGrouping+0x44>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f48:	4013      	ands	r3, r2
 8004f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f5e:	4a04      	ldr	r2, [pc, #16]	; (8004f70 <__NVIC_SetPriorityGrouping+0x44>)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	60d3      	str	r3, [r2, #12]
}
 8004f64:	bf00      	nop
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	e000ed00 	.word	0xe000ed00

08004f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f78:	4b04      	ldr	r3, [pc, #16]	; (8004f8c <__NVIC_GetPriorityGrouping+0x18>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	0a1b      	lsrs	r3, r3, #8
 8004f7e:	f003 0307 	and.w	r3, r3, #7
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	e000ed00 	.word	0xe000ed00

08004f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	db0b      	blt.n	8004fba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fa2:	79fb      	ldrb	r3, [r7, #7]
 8004fa4:	f003 021f 	and.w	r2, r3, #31
 8004fa8:	4907      	ldr	r1, [pc, #28]	; (8004fc8 <__NVIC_EnableIRQ+0x38>)
 8004faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	2001      	movs	r0, #1
 8004fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8004fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	e000e100 	.word	0xe000e100

08004fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	6039      	str	r1, [r7, #0]
 8004fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	db0a      	blt.n	8004ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	490c      	ldr	r1, [pc, #48]	; (8005018 <__NVIC_SetPriority+0x4c>)
 8004fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fea:	0112      	lsls	r2, r2, #4
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	440b      	add	r3, r1
 8004ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ff4:	e00a      	b.n	800500c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	4908      	ldr	r1, [pc, #32]	; (800501c <__NVIC_SetPriority+0x50>)
 8004ffc:	79fb      	ldrb	r3, [r7, #7]
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	3b04      	subs	r3, #4
 8005004:	0112      	lsls	r2, r2, #4
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	440b      	add	r3, r1
 800500a:	761a      	strb	r2, [r3, #24]
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	e000e100 	.word	0xe000e100
 800501c:	e000ed00 	.word	0xe000ed00

08005020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005020:	b480      	push	{r7}
 8005022:	b089      	sub	sp, #36	; 0x24
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f1c3 0307 	rsb	r3, r3, #7
 800503a:	2b04      	cmp	r3, #4
 800503c:	bf28      	it	cs
 800503e:	2304      	movcs	r3, #4
 8005040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	3304      	adds	r3, #4
 8005046:	2b06      	cmp	r3, #6
 8005048:	d902      	bls.n	8005050 <NVIC_EncodePriority+0x30>
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	3b03      	subs	r3, #3
 800504e:	e000      	b.n	8005052 <NVIC_EncodePriority+0x32>
 8005050:	2300      	movs	r3, #0
 8005052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005054:	f04f 32ff 	mov.w	r2, #4294967295
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	fa02 f303 	lsl.w	r3, r2, r3
 800505e:	43da      	mvns	r2, r3
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	401a      	ands	r2, r3
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005068:	f04f 31ff 	mov.w	r1, #4294967295
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	fa01 f303 	lsl.w	r3, r1, r3
 8005072:	43d9      	mvns	r1, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005078:	4313      	orrs	r3, r2
         );
}
 800507a:	4618      	mov	r0, r3
 800507c:	3724      	adds	r7, #36	; 0x24
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
	...

08005088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3b01      	subs	r3, #1
 8005094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005098:	d301      	bcc.n	800509e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800509a:	2301      	movs	r3, #1
 800509c:	e00f      	b.n	80050be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800509e:	4a0a      	ldr	r2, [pc, #40]	; (80050c8 <SysTick_Config+0x40>)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050a6:	210f      	movs	r1, #15
 80050a8:	f04f 30ff 	mov.w	r0, #4294967295
 80050ac:	f7ff ff8e 	bl	8004fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <SysTick_Config+0x40>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050b6:	4b04      	ldr	r3, [pc, #16]	; (80050c8 <SysTick_Config+0x40>)
 80050b8:	2207      	movs	r2, #7
 80050ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	e000e010 	.word	0xe000e010

080050cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7ff ff29 	bl	8004f2c <__NVIC_SetPriorityGrouping>
}
 80050da:	bf00      	nop
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b086      	sub	sp, #24
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	4603      	mov	r3, r0
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	607a      	str	r2, [r7, #4]
 80050ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80050f0:	2300      	movs	r3, #0
 80050f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050f4:	f7ff ff3e 	bl	8004f74 <__NVIC_GetPriorityGrouping>
 80050f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	6978      	ldr	r0, [r7, #20]
 8005100:	f7ff ff8e 	bl	8005020 <NVIC_EncodePriority>
 8005104:	4602      	mov	r2, r0
 8005106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800510a:	4611      	mov	r1, r2
 800510c:	4618      	mov	r0, r3
 800510e:	f7ff ff5d 	bl	8004fcc <__NVIC_SetPriority>
}
 8005112:	bf00      	nop
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b082      	sub	sp, #8
 800511e:	af00      	add	r7, sp, #0
 8005120:	4603      	mov	r3, r0
 8005122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff ff31 	bl	8004f90 <__NVIC_EnableIRQ>
}
 800512e:	bf00      	nop
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b082      	sub	sp, #8
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff ffa2 	bl	8005088 <SysTick_Config>
 8005144:	4603      	mov	r3, r0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e054      	b.n	800520c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	7f5b      	ldrb	r3, [r3, #29]
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d105      	bne.n	8005178 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fe fa70 	bl	8003658 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	791b      	ldrb	r3, [r3, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10c      	bne.n	80051a0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a22      	ldr	r2, [pc, #136]	; (8005214 <HAL_CRC_Init+0xc4>)
 800518c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0218 	bic.w	r2, r2, #24
 800519c:	609a      	str	r2, [r3, #8]
 800519e:	e00c      	b.n	80051ba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6899      	ldr	r1, [r3, #8]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	461a      	mov	r2, r3
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f834 	bl	8005218 <HAL_CRCEx_Polynomial_Set>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e028      	b.n	800520c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	795b      	ldrb	r3, [r3, #5]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d105      	bne.n	80051ce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f04f 32ff 	mov.w	r2, #4294967295
 80051ca:	611a      	str	r2, [r3, #16]
 80051cc:	e004      	b.n	80051d8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6912      	ldr	r2, [r2, #16]
 80051d6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695a      	ldr	r2, [r3, #20]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699a      	ldr	r2, [r3, #24]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	04c11db7 	.word	0x04c11db7

08005218 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005228:	231f      	movs	r3, #31
 800522a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800522c:	bf00      	nop
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1e5a      	subs	r2, r3, #1
 8005232:	613a      	str	r2, [r7, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d009      	beq.n	800524c <HAL_CRCEx_Polynomial_Set+0x34>
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f003 031f 	and.w	r3, r3, #31
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	fa22 f303 	lsr.w	r3, r2, r3
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0f0      	beq.n	800522e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b18      	cmp	r3, #24
 8005250:	d846      	bhi.n	80052e0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005252:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005258:	080052e7 	.word	0x080052e7
 800525c:	080052e1 	.word	0x080052e1
 8005260:	080052e1 	.word	0x080052e1
 8005264:	080052e1 	.word	0x080052e1
 8005268:	080052e1 	.word	0x080052e1
 800526c:	080052e1 	.word	0x080052e1
 8005270:	080052e1 	.word	0x080052e1
 8005274:	080052e1 	.word	0x080052e1
 8005278:	080052d5 	.word	0x080052d5
 800527c:	080052e1 	.word	0x080052e1
 8005280:	080052e1 	.word	0x080052e1
 8005284:	080052e1 	.word	0x080052e1
 8005288:	080052e1 	.word	0x080052e1
 800528c:	080052e1 	.word	0x080052e1
 8005290:	080052e1 	.word	0x080052e1
 8005294:	080052e1 	.word	0x080052e1
 8005298:	080052c9 	.word	0x080052c9
 800529c:	080052e1 	.word	0x080052e1
 80052a0:	080052e1 	.word	0x080052e1
 80052a4:	080052e1 	.word	0x080052e1
 80052a8:	080052e1 	.word	0x080052e1
 80052ac:	080052e1 	.word	0x080052e1
 80052b0:	080052e1 	.word	0x080052e1
 80052b4:	080052e1 	.word	0x080052e1
 80052b8:	080052bd 	.word	0x080052bd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	2b06      	cmp	r3, #6
 80052c0:	d913      	bls.n	80052ea <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80052c6:	e010      	b.n	80052ea <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	2b07      	cmp	r3, #7
 80052cc:	d90f      	bls.n	80052ee <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80052d2:	e00c      	b.n	80052ee <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b0f      	cmp	r3, #15
 80052d8:	d90b      	bls.n	80052f2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80052de:	e008      	b.n	80052f2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	75fb      	strb	r3, [r7, #23]
      break;
 80052e4:	e006      	b.n	80052f4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80052e6:	bf00      	nop
 80052e8:	e004      	b.n	80052f4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80052ea:	bf00      	nop
 80052ec:	e002      	b.n	80052f4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80052ee:	bf00      	nop
 80052f0:	e000      	b.n	80052f4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80052f2:	bf00      	nop
  }
  if (status == HAL_OK)
 80052f4:	7dfb      	ldrb	r3, [r7, #23]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10d      	bne.n	8005316 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f023 0118 	bic.w	r1, r3, #24
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	430a      	orrs	r2, r1
 8005314:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005316:	7dfb      	ldrb	r3, [r7, #23]
}
 8005318:	4618      	mov	r0, r3
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e014      	b.n	8005360 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	791b      	ldrb	r3, [r3, #4]
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d105      	bne.n	800534c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fe f9e2 	bl	8003710 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	795b      	ldrb	r3, [r3, #5]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_DAC_ConfigChannel+0x1c>
 8005380:	2302      	movs	r3, #2
 8005382:	e107      	b.n	8005594 <HAL_DAC_ConfigChannel+0x22c>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2201      	movs	r2, #1
 8005388:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2202      	movs	r2, #2
 800538e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b04      	cmp	r3, #4
 8005396:	d174      	bne.n	8005482 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005398:	f7fe fee4 	bl	8004164 <HAL_GetTick>
 800539c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d134      	bne.n	800540e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80053a4:	e011      	b.n	80053ca <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80053a6:	f7fe fedd 	bl	8004164 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d90a      	bls.n	80053ca <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f043 0208 	orr.w	r2, r3, #8
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2203      	movs	r2, #3
 80053c4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e0e4      	b.n	8005594 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e6      	bne.n	80053a6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80053d8:	2001      	movs	r0, #1
 80053da:	f7fe fecf 	bl	800417c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	6992      	ldr	r2, [r2, #24]
 80053e6:	641a      	str	r2, [r3, #64]	; 0x40
 80053e8:	e01e      	b.n	8005428 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80053ea:	f7fe febb 	bl	8004164 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d90a      	bls.n	800540e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f043 0208 	orr.w	r2, r3, #8
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2203      	movs	r2, #3
 8005408:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e0c2      	b.n	8005594 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005414:	2b00      	cmp	r3, #0
 8005416:	dbe8      	blt.n	80053ea <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8005418:	2001      	movs	r0, #1
 800541a:	f7fe feaf 	bl	800417c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	6992      	ldr	r2, [r2, #24]
 8005426:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f003 0310 	and.w	r3, r3, #16
 8005434:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005438:	fa01 f303 	lsl.w	r3, r1, r3
 800543c:	43db      	mvns	r3, r3
 800543e:	ea02 0103 	and.w	r1, r2, r3
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	69da      	ldr	r2, [r3, #28]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f003 0310 	and.w	r3, r3, #16
 800544c:	409a      	lsls	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f003 0310 	and.w	r3, r3, #16
 8005462:	21ff      	movs	r1, #255	; 0xff
 8005464:	fa01 f303 	lsl.w	r3, r1, r3
 8005468:	43db      	mvns	r3, r3
 800546a:	ea02 0103 	and.w	r1, r2, r3
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	6a1a      	ldr	r2, [r3, #32]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	409a      	lsls	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d11d      	bne.n	80054c6 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005490:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	221f      	movs	r2, #31
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	43db      	mvns	r3, r3
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	4013      	ands	r3, r2
 80054a4:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f003 0310 	and.w	r3, r3, #16
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054cc:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	2207      	movs	r2, #7
 80054d6:	fa02 f303 	lsl.w	r3, r2, r3
 80054da:	43db      	mvns	r3, r3
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	4013      	ands	r3, r2
 80054e0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	431a      	orrs	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f003 0310 	and.w	r3, r3, #16
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	4313      	orrs	r3, r2
 8005504:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6819      	ldr	r1, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f003 0310 	and.w	r3, r3, #16
 800551a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800551e:	fa02 f303 	lsl.w	r3, r2, r3
 8005522:	43da      	mvns	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	400a      	ands	r2, r1
 800552a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f003 0310 	and.w	r3, r3, #16
 800553a:	f640 72fc 	movw	r2, #4092	; 0xffc
 800553e:	fa02 f303 	lsl.w	r3, r2, r3
 8005542:	43db      	mvns	r3, r3
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	4013      	ands	r3, r2
 8005548:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f003 0310 	and.w	r3, r3, #16
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	4313      	orrs	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6819      	ldr	r1, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f003 0310 	and.w	r3, r3, #16
 8005576:	22c0      	movs	r2, #192	; 0xc0
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	43da      	mvns	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	400a      	ands	r2, r1
 8005584:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3720      	adds	r7, #32
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e098      	b.n	80056e0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	4b4d      	ldr	r3, [pc, #308]	; (80056ec <HAL_DMA_Init+0x150>)
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d80f      	bhi.n	80055da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	4b4b      	ldr	r3, [pc, #300]	; (80056f0 <HAL_DMA_Init+0x154>)
 80055c2:	4413      	add	r3, r2
 80055c4:	4a4b      	ldr	r2, [pc, #300]	; (80056f4 <HAL_DMA_Init+0x158>)
 80055c6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ca:	091b      	lsrs	r3, r3, #4
 80055cc:	009a      	lsls	r2, r3, #2
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a48      	ldr	r2, [pc, #288]	; (80056f8 <HAL_DMA_Init+0x15c>)
 80055d6:	641a      	str	r2, [r3, #64]	; 0x40
 80055d8:	e00e      	b.n	80055f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	4b46      	ldr	r3, [pc, #280]	; (80056fc <HAL_DMA_Init+0x160>)
 80055e2:	4413      	add	r3, r2
 80055e4:	4a43      	ldr	r2, [pc, #268]	; (80056f4 <HAL_DMA_Init+0x158>)
 80055e6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ea:	091b      	lsrs	r3, r3, #4
 80055ec:	009a      	lsls	r2, r3, #2
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a42      	ldr	r2, [pc, #264]	; (8005700 <HAL_DMA_Init+0x164>)
 80055f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800560e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005612:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800561c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005628:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005634:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005652:	d039      	beq.n	80056c8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	4a27      	ldr	r2, [pc, #156]	; (80056f8 <HAL_DMA_Init+0x15c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d11a      	bne.n	8005694 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800565e:	4b29      	ldr	r3, [pc, #164]	; (8005704 <HAL_DMA_Init+0x168>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005666:	f003 031c 	and.w	r3, r3, #28
 800566a:	210f      	movs	r1, #15
 800566c:	fa01 f303 	lsl.w	r3, r1, r3
 8005670:	43db      	mvns	r3, r3
 8005672:	4924      	ldr	r1, [pc, #144]	; (8005704 <HAL_DMA_Init+0x168>)
 8005674:	4013      	ands	r3, r2
 8005676:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005678:	4b22      	ldr	r3, [pc, #136]	; (8005704 <HAL_DMA_Init+0x168>)
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6859      	ldr	r1, [r3, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005684:	f003 031c 	and.w	r3, r3, #28
 8005688:	fa01 f303 	lsl.w	r3, r1, r3
 800568c:	491d      	ldr	r1, [pc, #116]	; (8005704 <HAL_DMA_Init+0x168>)
 800568e:	4313      	orrs	r3, r2
 8005690:	600b      	str	r3, [r1, #0]
 8005692:	e019      	b.n	80056c8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005694:	4b1c      	ldr	r3, [pc, #112]	; (8005708 <HAL_DMA_Init+0x16c>)
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569c:	f003 031c 	and.w	r3, r3, #28
 80056a0:	210f      	movs	r1, #15
 80056a2:	fa01 f303 	lsl.w	r3, r1, r3
 80056a6:	43db      	mvns	r3, r3
 80056a8:	4917      	ldr	r1, [pc, #92]	; (8005708 <HAL_DMA_Init+0x16c>)
 80056aa:	4013      	ands	r3, r2
 80056ac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80056ae:	4b16      	ldr	r3, [pc, #88]	; (8005708 <HAL_DMA_Init+0x16c>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6859      	ldr	r1, [r3, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ba:	f003 031c 	and.w	r3, r3, #28
 80056be:	fa01 f303 	lsl.w	r3, r1, r3
 80056c2:	4911      	ldr	r1, [pc, #68]	; (8005708 <HAL_DMA_Init+0x16c>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	40020407 	.word	0x40020407
 80056f0:	bffdfff8 	.word	0xbffdfff8
 80056f4:	cccccccd 	.word	0xcccccccd
 80056f8:	40020000 	.word	0x40020000
 80056fc:	bffdfbf8 	.word	0xbffdfbf8
 8005700:	40020400 	.word	0x40020400
 8005704:	400200a8 	.word	0x400200a8
 8005708:	400204a8 	.word	0x400204a8

0800570c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005728:	f003 031c 	and.w	r3, r3, #28
 800572c:	2204      	movs	r2, #4
 800572e:	409a      	lsls	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4013      	ands	r3, r2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d026      	beq.n	8005786 <HAL_DMA_IRQHandler+0x7a>
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	2b00      	cmp	r3, #0
 8005740:	d021      	beq.n	8005786 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b00      	cmp	r3, #0
 800574e:	d107      	bne.n	8005760 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0204 	bic.w	r2, r2, #4
 800575e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005764:	f003 021c 	and.w	r2, r3, #28
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576c:	2104      	movs	r1, #4
 800576e:	fa01 f202 	lsl.w	r2, r1, r2
 8005772:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005778:	2b00      	cmp	r3, #0
 800577a:	d071      	beq.n	8005860 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005784:	e06c      	b.n	8005860 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578a:	f003 031c 	and.w	r3, r3, #28
 800578e:	2202      	movs	r2, #2
 8005790:	409a      	lsls	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4013      	ands	r3, r2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d02e      	beq.n	80057f8 <HAL_DMA_IRQHandler+0xec>
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d029      	beq.n	80057f8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10b      	bne.n	80057ca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 020a 	bic.w	r2, r2, #10
 80057c0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ce:	f003 021c 	and.w	r2, r3, #28
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	2102      	movs	r1, #2
 80057d8:	fa01 f202 	lsl.w	r2, r1, r2
 80057dc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d038      	beq.n	8005860 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80057f6:	e033      	b.n	8005860 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fc:	f003 031c 	and.w	r3, r3, #28
 8005800:	2208      	movs	r2, #8
 8005802:	409a      	lsls	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4013      	ands	r3, r2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d02a      	beq.n	8005862 <HAL_DMA_IRQHandler+0x156>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b00      	cmp	r3, #0
 8005814:	d025      	beq.n	8005862 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 020e 	bic.w	r2, r2, #14
 8005824:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582a:	f003 021c 	and.w	r2, r3, #28
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	2101      	movs	r1, #1
 8005834:	fa01 f202 	lsl.w	r2, r1, r2
 8005838:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005854:	2b00      	cmp	r3, #0
 8005856:	d004      	beq.n	8005862 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005860:	bf00      	nop
 8005862:	bf00      	nop
}
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800587e:	4b2f      	ldr	r3, [pc, #188]	; (800593c <HAL_FLASH_Program+0xd0>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_FLASH_Program+0x1e>
 8005886:	2302      	movs	r3, #2
 8005888:	e053      	b.n	8005932 <HAL_FLASH_Program+0xc6>
 800588a:	4b2c      	ldr	r3, [pc, #176]	; (800593c <HAL_FLASH_Program+0xd0>)
 800588c:	2201      	movs	r2, #1
 800588e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005890:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005894:	f000 f888 	bl	80059a8 <FLASH_WaitForLastOperation>
 8005898:	4603      	mov	r3, r0
 800589a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800589c:	7dfb      	ldrb	r3, [r7, #23]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d143      	bne.n	800592a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80058a2:	4b26      	ldr	r3, [pc, #152]	; (800593c <HAL_FLASH_Program+0xd0>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80058a8:	4b25      	ldr	r3, [pc, #148]	; (8005940 <HAL_FLASH_Program+0xd4>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d009      	beq.n	80058c8 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80058b4:	4b22      	ldr	r3, [pc, #136]	; (8005940 <HAL_FLASH_Program+0xd4>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a21      	ldr	r2, [pc, #132]	; (8005940 <HAL_FLASH_Program+0xd4>)
 80058ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058be:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80058c0:	4b1e      	ldr	r3, [pc, #120]	; (800593c <HAL_FLASH_Program+0xd0>)
 80058c2:	2202      	movs	r2, #2
 80058c4:	771a      	strb	r2, [r3, #28]
 80058c6:	e002      	b.n	80058ce <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80058c8:	4b1c      	ldr	r3, [pc, #112]	; (800593c <HAL_FLASH_Program+0xd0>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d107      	bne.n	80058e4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80058d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058d8:	68b8      	ldr	r0, [r7, #8]
 80058da:	f000 f8bd 	bl	8005a58 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80058de:	2301      	movs	r3, #1
 80058e0:	613b      	str	r3, [r7, #16]
 80058e2:	e010      	b.n	8005906 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d002      	beq.n	80058f0 <HAL_FLASH_Program+0x84>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d10a      	bne.n	8005906 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	4619      	mov	r1, r3
 80058f4:	68b8      	ldr	r0, [r7, #8]
 80058f6:	f000 f8d5 	bl	8005aa4 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d102      	bne.n	8005906 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8005900:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005904:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005906:	f24c 3050 	movw	r0, #50000	; 0xc350
 800590a:	f000 f84d 	bl	80059a8 <FLASH_WaitForLastOperation>
 800590e:	4603      	mov	r3, r0
 8005910:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d006      	beq.n	8005926 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8005918:	4b09      	ldr	r3, [pc, #36]	; (8005940 <HAL_FLASH_Program+0xd4>)
 800591a:	695a      	ldr	r2, [r3, #20]
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	43db      	mvns	r3, r3
 8005920:	4907      	ldr	r1, [pc, #28]	; (8005940 <HAL_FLASH_Program+0xd4>)
 8005922:	4013      	ands	r3, r2
 8005924:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005926:	f000 f9cf 	bl	8005cc8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800592a:	4b04      	ldr	r3, [pc, #16]	; (800593c <HAL_FLASH_Program+0xd0>)
 800592c:	2200      	movs	r2, #0
 800592e:	701a      	strb	r2, [r3, #0]

  return status;
 8005930:	7dfb      	ldrb	r3, [r7, #23]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	2000000c 	.word	0x2000000c
 8005940:	40022000 	.word	0x40022000

08005944 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800594e:	4b0b      	ldr	r3, [pc, #44]	; (800597c <HAL_FLASH_Unlock+0x38>)
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	2b00      	cmp	r3, #0
 8005954:	da0b      	bge.n	800596e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005956:	4b09      	ldr	r3, [pc, #36]	; (800597c <HAL_FLASH_Unlock+0x38>)
 8005958:	4a09      	ldr	r2, [pc, #36]	; (8005980 <HAL_FLASH_Unlock+0x3c>)
 800595a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800595c:	4b07      	ldr	r3, [pc, #28]	; (800597c <HAL_FLASH_Unlock+0x38>)
 800595e:	4a09      	ldr	r2, [pc, #36]	; (8005984 <HAL_FLASH_Unlock+0x40>)
 8005960:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005962:	4b06      	ldr	r3, [pc, #24]	; (800597c <HAL_FLASH_Unlock+0x38>)
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	da01      	bge.n	800596e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800596e:	79fb      	ldrb	r3, [r7, #7]
}
 8005970:	4618      	mov	r0, r3
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	40022000 	.word	0x40022000
 8005980:	45670123 	.word	0x45670123
 8005984:	cdef89ab 	.word	0xcdef89ab

08005988 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800598c:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <HAL_FLASH_Lock+0x1c>)
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	4a04      	ldr	r2, [pc, #16]	; (80059a4 <HAL_FLASH_Lock+0x1c>)
 8005992:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005996:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	40022000 	.word	0x40022000

080059a8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80059b0:	f7fe fbd8 	bl	8004164 <HAL_GetTick>
 80059b4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80059b6:	e00d      	b.n	80059d4 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059be:	d009      	beq.n	80059d4 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80059c0:	f7fe fbd0 	bl	8004164 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d801      	bhi.n	80059d4 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e036      	b.n	8005a42 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80059d4:	4b1d      	ldr	r3, [pc, #116]	; (8005a4c <FLASH_WaitForLastOperation+0xa4>)
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1eb      	bne.n	80059b8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80059e0:	4b1a      	ldr	r3, [pc, #104]	; (8005a4c <FLASH_WaitForLastOperation+0xa4>)
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	4b1a      	ldr	r3, [pc, #104]	; (8005a50 <FLASH_WaitForLastOperation+0xa8>)
 80059e6:	4013      	ands	r3, r2
 80059e8:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d01e      	beq.n	8005a2e <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80059f0:	4b18      	ldr	r3, [pc, #96]	; (8005a54 <FLASH_WaitForLastOperation+0xac>)
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	4a16      	ldr	r2, [pc, #88]	; (8005a54 <FLASH_WaitForLastOperation+0xac>)
 80059fa:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d007      	beq.n	8005a16 <FLASH_WaitForLastOperation+0x6e>
 8005a06:	4b11      	ldr	r3, [pc, #68]	; (8005a4c <FLASH_WaitForLastOperation+0xa4>)
 8005a08:	699a      	ldr	r2, [r3, #24]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005a10:	490e      	ldr	r1, [pc, #56]	; (8005a4c <FLASH_WaitForLastOperation+0xa4>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	618b      	str	r3, [r1, #24]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d004      	beq.n	8005a2a <FLASH_WaitForLastOperation+0x82>
 8005a20:	4a0a      	ldr	r2, [pc, #40]	; (8005a4c <FLASH_WaitForLastOperation+0xa4>)
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005a28:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e009      	b.n	8005a42 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005a2e:	4b07      	ldr	r3, [pc, #28]	; (8005a4c <FLASH_WaitForLastOperation+0xa4>)
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005a3a:	4b04      	ldr	r3, [pc, #16]	; (8005a4c <FLASH_WaitForLastOperation+0xa4>)
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40022000 	.word	0x40022000
 8005a50:	0002c3fa 	.word	0x0002c3fa
 8005a54:	2000000c 	.word	0x2000000c

08005a58 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005a64:	4b0e      	ldr	r3, [pc, #56]	; (8005aa0 <FLASH_Program_DoubleWord+0x48>)
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	4a0d      	ldr	r2, [pc, #52]	; (8005aa0 <FLASH_Program_DoubleWord+0x48>)
 8005a6a:	f043 0301 	orr.w	r3, r3, #1
 8005a6e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005a76:	f3bf 8f6f 	isb	sy
}
 8005a7a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8005a7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a80:	f04f 0200 	mov.w	r2, #0
 8005a84:	f04f 0300 	mov.w	r3, #0
 8005a88:	000a      	movs	r2, r1
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	68f9      	ldr	r1, [r7, #12]
 8005a8e:	3104      	adds	r1, #4
 8005a90:	4613      	mov	r3, r2
 8005a92:	600b      	str	r3, [r1, #0]
}
 8005a94:	bf00      	nop
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	40022000 	.word	0x40022000

08005aa4 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b089      	sub	sp, #36	; 0x24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005aae:	2340      	movs	r3, #64	; 0x40
 8005ab0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005aba:	4b14      	ldr	r3, [pc, #80]	; (8005b0c <FLASH_Program_Fast+0x68>)
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	4a13      	ldr	r2, [pc, #76]	; (8005b0c <FLASH_Program_Fast+0x68>)
 8005ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ac4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8005aca:	60fb      	str	r3, [r7, #12]
  return(result);
 8005acc:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8005ace:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ad0:	b672      	cpsid	i
}
 8005ad2:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	3304      	adds	r3, #4
 8005ae6:	617b      	str	r3, [r7, #20]
    row_index--;
 8005ae8:	7ffb      	ldrb	r3, [r7, #31]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8005aee:	7ffb      	ldrb	r3, [r7, #31]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1ef      	bne.n	8005ad4 <FLASH_Program_Fast+0x30>
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f383 8810 	msr	PRIMASK, r3
}
 8005afe:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8005b00:	bf00      	nop
 8005b02:	3724      	adds	r7, #36	; 0x24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	40022000 	.word	0x40022000

08005b10 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005b1a:	4b48      	ldr	r3, [pc, #288]	; (8005c3c <HAL_FLASHEx_Erase+0x12c>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d101      	bne.n	8005b26 <HAL_FLASHEx_Erase+0x16>
 8005b22:	2302      	movs	r3, #2
 8005b24:	e085      	b.n	8005c32 <HAL_FLASHEx_Erase+0x122>
 8005b26:	4b45      	ldr	r3, [pc, #276]	; (8005c3c <HAL_FLASHEx_Erase+0x12c>)
 8005b28:	2201      	movs	r2, #1
 8005b2a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005b30:	f7ff ff3a 	bl	80059a8 <FLASH_WaitForLastOperation>
 8005b34:	4603      	mov	r3, r0
 8005b36:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d175      	bne.n	8005c2a <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b3e:	4b3f      	ldr	r3, [pc, #252]	; (8005c3c <HAL_FLASHEx_Erase+0x12c>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005b44:	4b3e      	ldr	r3, [pc, #248]	; (8005c40 <HAL_FLASHEx_Erase+0x130>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d013      	beq.n	8005b78 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005b50:	4b3b      	ldr	r3, [pc, #236]	; (8005c40 <HAL_FLASHEx_Erase+0x130>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d009      	beq.n	8005b70 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005b5c:	4b38      	ldr	r3, [pc, #224]	; (8005c40 <HAL_FLASHEx_Erase+0x130>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a37      	ldr	r2, [pc, #220]	; (8005c40 <HAL_FLASHEx_Erase+0x130>)
 8005b62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b66:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005b68:	4b34      	ldr	r3, [pc, #208]	; (8005c3c <HAL_FLASHEx_Erase+0x12c>)
 8005b6a:	2203      	movs	r2, #3
 8005b6c:	771a      	strb	r2, [r3, #28]
 8005b6e:	e016      	b.n	8005b9e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005b70:	4b32      	ldr	r3, [pc, #200]	; (8005c3c <HAL_FLASHEx_Erase+0x12c>)
 8005b72:	2201      	movs	r2, #1
 8005b74:	771a      	strb	r2, [r3, #28]
 8005b76:	e012      	b.n	8005b9e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005b78:	4b31      	ldr	r3, [pc, #196]	; (8005c40 <HAL_FLASHEx_Erase+0x130>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d009      	beq.n	8005b98 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005b84:	4b2e      	ldr	r3, [pc, #184]	; (8005c40 <HAL_FLASHEx_Erase+0x130>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a2d      	ldr	r2, [pc, #180]	; (8005c40 <HAL_FLASHEx_Erase+0x130>)
 8005b8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b8e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005b90:	4b2a      	ldr	r3, [pc, #168]	; (8005c3c <HAL_FLASHEx_Erase+0x12c>)
 8005b92:	2202      	movs	r2, #2
 8005b94:	771a      	strb	r2, [r3, #28]
 8005b96:	e002      	b.n	8005b9e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005b98:	4b28      	ldr	r3, [pc, #160]	; (8005c3c <HAL_FLASHEx_Erase+0x12c>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d111      	bne.n	8005bca <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 f84a 	bl	8005c44 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005bb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005bb4:	f7ff fef8 	bl	80059a8 <FLASH_WaitForLastOperation>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8005bbc:	4b20      	ldr	r3, [pc, #128]	; (8005c40 <HAL_FLASHEx_Erase+0x130>)
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	4a1f      	ldr	r2, [pc, #124]	; (8005c40 <HAL_FLASHEx_Erase+0x130>)
 8005bc2:	f023 0304 	bic.w	r3, r3, #4
 8005bc6:	6153      	str	r3, [r2, #20]
 8005bc8:	e02d      	b.n	8005c26 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd0:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	60bb      	str	r3, [r7, #8]
 8005bd8:	e01d      	b.n	8005c16 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	4619      	mov	r1, r3
 8005be0:	68b8      	ldr	r0, [r7, #8]
 8005be2:	f000 f84d 	bl	8005c80 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005be6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005bea:	f7ff fedd 	bl	80059a8 <FLASH_WaitForLastOperation>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005bf2:	4b13      	ldr	r3, [pc, #76]	; (8005c40 <HAL_FLASHEx_Erase+0x130>)
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	4a12      	ldr	r2, [pc, #72]	; (8005c40 <HAL_FLASHEx_Erase+0x130>)
 8005bf8:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005bfc:	f023 0302 	bic.w	r3, r3, #2
 8005c00:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	601a      	str	r2, [r3, #0]
          break;
 8005c0e:	e00a      	b.n	8005c26 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	3301      	adds	r3, #1
 8005c14:	60bb      	str	r3, [r7, #8]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	4413      	add	r3, r2
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d3d9      	bcc.n	8005bda <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005c26:	f000 f84f 	bl	8005cc8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005c2a:	4b04      	ldr	r3, [pc, #16]	; (8005c3c <HAL_FLASHEx_Erase+0x12c>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	701a      	strb	r2, [r3, #0]

  return status;
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	2000000c 	.word	0x2000000c
 8005c40:	40022000 	.word	0x40022000

08005c44 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d005      	beq.n	8005c62 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8005c56:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <FLASH_MassErase+0x38>)
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	4a08      	ldr	r2, [pc, #32]	; (8005c7c <FLASH_MassErase+0x38>)
 8005c5c:	f043 0304 	orr.w	r3, r3, #4
 8005c60:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005c62:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <FLASH_MassErase+0x38>)
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	4a05      	ldr	r2, [pc, #20]	; (8005c7c <FLASH_MassErase+0x38>)
 8005c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c6c:	6153      	str	r3, [r2, #20]
}
 8005c6e:	bf00      	nop
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	40022000 	.word	0x40022000

08005c80 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8005c8a:	4b0e      	ldr	r3, [pc, #56]	; (8005cc4 <FLASH_PageErase+0x44>)
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8005c9a:	490a      	ldr	r1, [pc, #40]	; (8005cc4 <FLASH_PageErase+0x44>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005ca0:	4b08      	ldr	r3, [pc, #32]	; (8005cc4 <FLASH_PageErase+0x44>)
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	4a07      	ldr	r2, [pc, #28]	; (8005cc4 <FLASH_PageErase+0x44>)
 8005ca6:	f043 0302 	orr.w	r3, r3, #2
 8005caa:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <FLASH_PageErase+0x44>)
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	4a04      	ldr	r2, [pc, #16]	; (8005cc4 <FLASH_PageErase+0x44>)
 8005cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb6:	6153      	str	r3, [r2, #20]
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	40022000 	.word	0x40022000

08005cc8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005cce:	4b21      	ldr	r3, [pc, #132]	; (8005d54 <FLASH_FlushCaches+0x8c>)
 8005cd0:	7f1b      	ldrb	r3, [r3, #28]
 8005cd2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005cd4:	79fb      	ldrb	r3, [r7, #7]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d002      	beq.n	8005ce0 <FLASH_FlushCaches+0x18>
 8005cda:	79fb      	ldrb	r3, [r7, #7]
 8005cdc:	2b03      	cmp	r3, #3
 8005cde:	d117      	bne.n	8005d10 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005ce0:	4b1d      	ldr	r3, [pc, #116]	; (8005d58 <FLASH_FlushCaches+0x90>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a1c      	ldr	r2, [pc, #112]	; (8005d58 <FLASH_FlushCaches+0x90>)
 8005ce6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cea:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005cec:	4b1a      	ldr	r3, [pc, #104]	; (8005d58 <FLASH_FlushCaches+0x90>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a19      	ldr	r2, [pc, #100]	; (8005d58 <FLASH_FlushCaches+0x90>)
 8005cf2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	4b17      	ldr	r3, [pc, #92]	; (8005d58 <FLASH_FlushCaches+0x90>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a16      	ldr	r2, [pc, #88]	; (8005d58 <FLASH_FlushCaches+0x90>)
 8005cfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d02:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d04:	4b14      	ldr	r3, [pc, #80]	; (8005d58 <FLASH_FlushCaches+0x90>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a13      	ldr	r2, [pc, #76]	; (8005d58 <FLASH_FlushCaches+0x90>)
 8005d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d0e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8005d10:	79fb      	ldrb	r3, [r7, #7]
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d002      	beq.n	8005d1c <FLASH_FlushCaches+0x54>
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	2b03      	cmp	r3, #3
 8005d1a:	d111      	bne.n	8005d40 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005d1c:	4b0e      	ldr	r3, [pc, #56]	; (8005d58 <FLASH_FlushCaches+0x90>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a0d      	ldr	r2, [pc, #52]	; (8005d58 <FLASH_FlushCaches+0x90>)
 8005d22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d26:	6013      	str	r3, [r2, #0]
 8005d28:	4b0b      	ldr	r3, [pc, #44]	; (8005d58 <FLASH_FlushCaches+0x90>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a0a      	ldr	r2, [pc, #40]	; (8005d58 <FLASH_FlushCaches+0x90>)
 8005d2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d32:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d34:	4b08      	ldr	r3, [pc, #32]	; (8005d58 <FLASH_FlushCaches+0x90>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a07      	ldr	r2, [pc, #28]	; (8005d58 <FLASH_FlushCaches+0x90>)
 8005d3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d3e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005d40:	4b04      	ldr	r3, [pc, #16]	; (8005d54 <FLASH_FlushCaches+0x8c>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	771a      	strb	r2, [r3, #28]
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	2000000c 	.word	0x2000000c
 8005d58:	40022000 	.word	0x40022000

08005d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d6a:	e154      	b.n	8006016 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	2101      	movs	r1, #1
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	fa01 f303 	lsl.w	r3, r1, r3
 8005d78:	4013      	ands	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 8146 	beq.w	8006010 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f003 0303 	and.w	r3, r3, #3
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d005      	beq.n	8005d9c <HAL_GPIO_Init+0x40>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f003 0303 	and.w	r3, r3, #3
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d130      	bne.n	8005dfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	2203      	movs	r2, #3
 8005da8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dac:	43db      	mvns	r3, r3
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	4013      	ands	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	43db      	mvns	r3, r3
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	4013      	ands	r3, r2
 8005de0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	091b      	lsrs	r3, r3, #4
 8005de8:	f003 0201 	and.w	r2, r3, #1
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	fa02 f303 	lsl.w	r3, r2, r3
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	2b03      	cmp	r3, #3
 8005e08:	d017      	beq.n	8005e3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	2203      	movs	r2, #3
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	43db      	mvns	r3, r3
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	689a      	ldr	r2, [r3, #8]
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d123      	bne.n	8005e8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	08da      	lsrs	r2, r3, #3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3208      	adds	r2, #8
 8005e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	220f      	movs	r2, #15
 8005e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e62:	43db      	mvns	r3, r3
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4013      	ands	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	691a      	ldr	r2, [r3, #16]
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	08da      	lsrs	r2, r3, #3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3208      	adds	r2, #8
 8005e88:	6939      	ldr	r1, [r7, #16]
 8005e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	2203      	movs	r2, #3
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	43db      	mvns	r3, r3
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f003 0203 	and.w	r2, r3, #3
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 80a0 	beq.w	8006010 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ed0:	4b58      	ldr	r3, [pc, #352]	; (8006034 <HAL_GPIO_Init+0x2d8>)
 8005ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed4:	4a57      	ldr	r2, [pc, #348]	; (8006034 <HAL_GPIO_Init+0x2d8>)
 8005ed6:	f043 0301 	orr.w	r3, r3, #1
 8005eda:	6613      	str	r3, [r2, #96]	; 0x60
 8005edc:	4b55      	ldr	r3, [pc, #340]	; (8006034 <HAL_GPIO_Init+0x2d8>)
 8005ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	60bb      	str	r3, [r7, #8]
 8005ee6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005ee8:	4a53      	ldr	r2, [pc, #332]	; (8006038 <HAL_GPIO_Init+0x2dc>)
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	089b      	lsrs	r3, r3, #2
 8005eee:	3302      	adds	r3, #2
 8005ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f003 0303 	and.w	r3, r3, #3
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	220f      	movs	r2, #15
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	43db      	mvns	r3, r3
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005f12:	d019      	beq.n	8005f48 <HAL_GPIO_Init+0x1ec>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a49      	ldr	r2, [pc, #292]	; (800603c <HAL_GPIO_Init+0x2e0>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d013      	beq.n	8005f44 <HAL_GPIO_Init+0x1e8>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a48      	ldr	r2, [pc, #288]	; (8006040 <HAL_GPIO_Init+0x2e4>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d00d      	beq.n	8005f40 <HAL_GPIO_Init+0x1e4>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a47      	ldr	r2, [pc, #284]	; (8006044 <HAL_GPIO_Init+0x2e8>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d007      	beq.n	8005f3c <HAL_GPIO_Init+0x1e0>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a46      	ldr	r2, [pc, #280]	; (8006048 <HAL_GPIO_Init+0x2ec>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d101      	bne.n	8005f38 <HAL_GPIO_Init+0x1dc>
 8005f34:	2304      	movs	r3, #4
 8005f36:	e008      	b.n	8005f4a <HAL_GPIO_Init+0x1ee>
 8005f38:	2307      	movs	r3, #7
 8005f3a:	e006      	b.n	8005f4a <HAL_GPIO_Init+0x1ee>
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e004      	b.n	8005f4a <HAL_GPIO_Init+0x1ee>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e002      	b.n	8005f4a <HAL_GPIO_Init+0x1ee>
 8005f44:	2301      	movs	r3, #1
 8005f46:	e000      	b.n	8005f4a <HAL_GPIO_Init+0x1ee>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	f002 0203 	and.w	r2, r2, #3
 8005f50:	0092      	lsls	r2, r2, #2
 8005f52:	4093      	lsls	r3, r2
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005f5a:	4937      	ldr	r1, [pc, #220]	; (8006038 <HAL_GPIO_Init+0x2dc>)
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	089b      	lsrs	r3, r3, #2
 8005f60:	3302      	adds	r3, #2
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f68:	4b38      	ldr	r3, [pc, #224]	; (800604c <HAL_GPIO_Init+0x2f0>)
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	43db      	mvns	r3, r3
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4013      	ands	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f8c:	4a2f      	ldr	r2, [pc, #188]	; (800604c <HAL_GPIO_Init+0x2f0>)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f92:	4b2e      	ldr	r3, [pc, #184]	; (800604c <HAL_GPIO_Init+0x2f0>)
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	43db      	mvns	r3, r3
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005fb6:	4a25      	ldr	r2, [pc, #148]	; (800604c <HAL_GPIO_Init+0x2f0>)
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005fbc:	4b23      	ldr	r3, [pc, #140]	; (800604c <HAL_GPIO_Init+0x2f0>)
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	43db      	mvns	r3, r3
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005fe0:	4a1a      	ldr	r2, [pc, #104]	; (800604c <HAL_GPIO_Init+0x2f0>)
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005fe6:	4b19      	ldr	r3, [pc, #100]	; (800604c <HAL_GPIO_Init+0x2f0>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	43db      	mvns	r3, r3
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4313      	orrs	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800600a:	4a10      	ldr	r2, [pc, #64]	; (800604c <HAL_GPIO_Init+0x2f0>)
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	3301      	adds	r3, #1
 8006014:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	fa22 f303 	lsr.w	r3, r2, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	f47f aea3 	bne.w	8005d6c <HAL_GPIO_Init+0x10>
  }
}
 8006026:	bf00      	nop
 8006028:	bf00      	nop
 800602a:	371c      	adds	r7, #28
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	40021000 	.word	0x40021000
 8006038:	40010000 	.word	0x40010000
 800603c:	48000400 	.word	0x48000400
 8006040:	48000800 	.word	0x48000800
 8006044:	48000c00 	.word	0x48000c00
 8006048:	48001000 	.word	0x48001000
 800604c:	40010400 	.word	0x40010400

08006050 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691a      	ldr	r2, [r3, #16]
 8006060:	887b      	ldrh	r3, [r7, #2]
 8006062:	4013      	ands	r3, r2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006068:	2301      	movs	r3, #1
 800606a:	73fb      	strb	r3, [r7, #15]
 800606c:	e001      	b.n	8006072 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800606e:	2300      	movs	r3, #0
 8006070:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006072:	7bfb      	ldrb	r3, [r7, #15]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	807b      	strh	r3, [r7, #2]
 800608c:	4613      	mov	r3, r2
 800608e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006090:	787b      	ldrb	r3, [r7, #1]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006096:	887a      	ldrh	r2, [r7, #2]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800609c:	e002      	b.n	80060a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800609e:	887a      	ldrh	r2, [r7, #2]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80060c2:	887a      	ldrh	r2, [r7, #2]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4013      	ands	r3, r2
 80060c8:	041a      	lsls	r2, r3, #16
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	43d9      	mvns	r1, r3
 80060ce:	887b      	ldrh	r3, [r7, #2]
 80060d0:	400b      	ands	r3, r1
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	619a      	str	r2, [r3, #24]
}
 80060d8:	bf00      	nop
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80060e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060e6:	b08b      	sub	sp, #44	; 0x2c
 80060e8:	af06      	add	r7, sp, #24
 80060ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e109      	b.n	800630a <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d106      	bne.n	8006110 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f008 f8ec 	bl	800e2e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2203      	movs	r2, #3
 8006114:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4618      	mov	r0, r3
 800611e:	f003 ffab 	bl	800a078 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	603b      	str	r3, [r7, #0]
 8006128:	687e      	ldr	r6, [r7, #4]
 800612a:	466d      	mov	r5, sp
 800612c:	f106 0410 	add.w	r4, r6, #16
 8006130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006134:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006138:	e885 0003 	stmia.w	r5, {r0, r1}
 800613c:	1d33      	adds	r3, r6, #4
 800613e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006140:	6838      	ldr	r0, [r7, #0]
 8006142:	f003 ff71 	bl	800a028 <USB_CoreInit>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d005      	beq.n	8006158 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e0d8      	b.n	800630a <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2100      	movs	r1, #0
 800615e:	4618      	mov	r0, r3
 8006160:	f003 ffa5 	bl	800a0ae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006164:	2300      	movs	r3, #0
 8006166:	73fb      	strb	r3, [r7, #15]
 8006168:	e04d      	b.n	8006206 <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800616a:	7bfb      	ldrb	r3, [r7, #15]
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	440b      	add	r3, r1
 800617a:	3305      	adds	r3, #5
 800617c:	2201      	movs	r2, #1
 800617e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	1c5a      	adds	r2, r3, #1
 8006186:	4613      	mov	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	440b      	add	r3, r1
 8006190:	3304      	adds	r3, #4
 8006192:	7bfa      	ldrb	r2, [r7, #15]
 8006194:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006196:	7bfa      	ldrb	r2, [r7, #15]
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	b298      	uxth	r0, r3
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	440b      	add	r3, r1
 80061a8:	333a      	adds	r3, #58	; 0x3a
 80061aa:	4602      	mov	r2, r0
 80061ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	6879      	ldr	r1, [r7, #4]
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	4613      	mov	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	440b      	add	r3, r1
 80061be:	3307      	adds	r3, #7
 80061c0:	2200      	movs	r2, #0
 80061c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80061c4:	7bfa      	ldrb	r2, [r7, #15]
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	440b      	add	r3, r1
 80061d2:	333c      	adds	r3, #60	; 0x3c
 80061d4:	2200      	movs	r2, #0
 80061d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80061d8:	7bfa      	ldrb	r2, [r7, #15]
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	4613      	mov	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	440b      	add	r3, r1
 80061e6:	3340      	adds	r3, #64	; 0x40
 80061e8:	2200      	movs	r2, #0
 80061ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80061ec:	7bfa      	ldrb	r2, [r7, #15]
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	4613      	mov	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	00db      	lsls	r3, r3, #3
 80061f8:	440b      	add	r3, r1
 80061fa:	3344      	adds	r3, #68	; 0x44
 80061fc:	2200      	movs	r2, #0
 80061fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	3301      	adds	r3, #1
 8006204:	73fb      	strb	r3, [r7, #15]
 8006206:	7bfa      	ldrb	r2, [r7, #15]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	429a      	cmp	r2, r3
 800620e:	d3ac      	bcc.n	800616a <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006210:	2300      	movs	r3, #0
 8006212:	73fb      	strb	r3, [r7, #15]
 8006214:	e044      	b.n	80062a0 <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006216:	7bfa      	ldrb	r2, [r7, #15]
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	4613      	mov	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4413      	add	r3, r2
 8006220:	00db      	lsls	r3, r3, #3
 8006222:	440b      	add	r3, r1
 8006224:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8006228:	2200      	movs	r2, #0
 800622a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800622c:	7bfa      	ldrb	r2, [r7, #15]
 800622e:	6879      	ldr	r1, [r7, #4]
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	440b      	add	r3, r1
 800623a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800623e:	7bfa      	ldrb	r2, [r7, #15]
 8006240:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006242:	7bfa      	ldrb	r2, [r7, #15]
 8006244:	6879      	ldr	r1, [r7, #4]
 8006246:	4613      	mov	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	00db      	lsls	r3, r3, #3
 800624e:	440b      	add	r3, r1
 8006250:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8006254:	2200      	movs	r2, #0
 8006256:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006258:	7bfa      	ldrb	r2, [r7, #15]
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	4613      	mov	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	440b      	add	r3, r1
 8006266:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800626e:	7bfa      	ldrb	r2, [r7, #15]
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	4613      	mov	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	00db      	lsls	r3, r3, #3
 800627a:	440b      	add	r3, r1
 800627c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006280:	2200      	movs	r2, #0
 8006282:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006284:	7bfa      	ldrb	r2, [r7, #15]
 8006286:	6879      	ldr	r1, [r7, #4]
 8006288:	4613      	mov	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	440b      	add	r3, r1
 8006292:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006296:	2200      	movs	r2, #0
 8006298:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800629a:	7bfb      	ldrb	r3, [r7, #15]
 800629c:	3301      	adds	r3, #1
 800629e:	73fb      	strb	r3, [r7, #15]
 80062a0:	7bfa      	ldrb	r2, [r7, #15]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d3b5      	bcc.n	8006216 <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	603b      	str	r3, [r7, #0]
 80062b0:	687e      	ldr	r6, [r7, #4]
 80062b2:	466d      	mov	r5, sp
 80062b4:	f106 0410 	add.w	r4, r6, #16
 80062b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80062c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80062c4:	1d33      	adds	r3, r6, #4
 80062c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062c8:	6838      	ldr	r0, [r7, #0]
 80062ca:	f003 fefd 	bl	800a0c8 <USB_DevInit>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d005      	beq.n	80062e0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e014      	b.n	800630a <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d102      	bne.n	80062fe <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 fc55 	bl	8007ba8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4618      	mov	r0, r3
 8006304:	f006 f909 	bl	800c51a <USB_DevDisconnect>

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006312 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b082      	sub	sp, #8
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <HAL_PCD_Start+0x16>
 8006324:	2302      	movs	r3, #2
 8006326:	e012      	b.n	800634e <HAL_PCD_Start+0x3c>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4618      	mov	r0, r3
 8006336:	f003 fe88 	bl	800a04a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4618      	mov	r0, r3
 8006340:	f006 f8d4 	bl	800c4ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b084      	sub	sp, #16
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4618      	mov	r0, r3
 8006364:	f006 f8ee 	bl	800c544 <USB_ReadInterrupts>
 8006368:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fb3e 	bl	80069f6 <PCD_EP_ISR_Handler>

    return;
 800637a:	e110      	b.n	800659e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006382:	2b00      	cmp	r3, #0
 8006384:	d013      	beq.n	80063ae <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800638e:	b29a      	uxth	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006398:	b292      	uxth	r2, r2
 800639a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f008 f833 	bl	800e40a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80063a4:	2100      	movs	r1, #0
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f8fc 	bl	80065a4 <HAL_PCD_SetAddress>

    return;
 80063ac:	e0f7      	b.n	800659e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00c      	beq.n	80063d2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063ca:	b292      	uxth	r2, r2
 80063cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80063d0:	e0e5      	b.n	800659e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00c      	beq.n	80063f6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063ee:	b292      	uxth	r2, r2
 80063f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80063f4:	e0d3      	b.n	800659e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d034      	beq.n	800646a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006408:	b29a      	uxth	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0204 	bic.w	r2, r2, #4
 8006412:	b292      	uxth	r2, r2
 8006414:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006420:	b29a      	uxth	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0208 	bic.w	r2, r2, #8
 800642a:	b292      	uxth	r2, r2
 800642c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8006436:	2b01      	cmp	r3, #1
 8006438:	d107      	bne.n	800644a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006442:	2100      	movs	r1, #0
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f001 fbd9 	bl	8007bfc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f008 f816 	bl	800e47c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006458:	b29a      	uxth	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006462:	b292      	uxth	r2, r2
 8006464:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006468:	e099      	b.n	800659e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006470:	2b00      	cmp	r3, #0
 8006472:	d027      	beq.n	80064c4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800647c:	b29a      	uxth	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0208 	orr.w	r2, r2, #8
 8006486:	b292      	uxth	r2, r2
 8006488:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006494:	b29a      	uxth	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800649e:	b292      	uxth	r2, r2
 80064a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0204 	orr.w	r2, r2, #4
 80064b6:	b292      	uxth	r2, r2
 80064b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f007 ffc3 	bl	800e448 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80064c2:	e06c      	b.n	800659e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d040      	beq.n	8006550 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064e0:	b292      	uxth	r2, r2
 80064e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d12b      	bne.n	8006548 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f042 0204 	orr.w	r2, r2, #4
 8006502:	b292      	uxth	r2, r2
 8006504:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006510:	b29a      	uxth	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f042 0208 	orr.w	r2, r2, #8
 800651a:	b292      	uxth	r2, r2
 800651c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006530:	b29b      	uxth	r3, r3
 8006532:	089b      	lsrs	r3, r3, #2
 8006534:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800653e:	2101      	movs	r1, #1
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f001 fb5b 	bl	8007bfc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006546:	e02a      	b.n	800659e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f007 ff7d 	bl	800e448 <HAL_PCD_SuspendCallback>
    return;
 800654e:	e026      	b.n	800659e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00f      	beq.n	800657a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006562:	b29a      	uxth	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800656c:	b292      	uxth	r2, r2
 800656e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f007 ff3b 	bl	800e3ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006578:	e011      	b.n	800659e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00c      	beq.n	800659e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800658c:	b29a      	uxth	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006596:	b292      	uxth	r2, r2
 8006598:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800659c:	bf00      	nop
  }
}
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d101      	bne.n	80065be <HAL_PCD_SetAddress+0x1a>
 80065ba:	2302      	movs	r3, #2
 80065bc:	e013      	b.n	80065e6 <HAL_PCD_SetAddress+0x42>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	78fa      	ldrb	r2, [r7, #3]
 80065ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	78fa      	ldrb	r2, [r7, #3]
 80065d4:	4611      	mov	r1, r2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f005 ff74 	bl	800c4c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b084      	sub	sp, #16
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	4608      	mov	r0, r1
 80065f8:	4611      	mov	r1, r2
 80065fa:	461a      	mov	r2, r3
 80065fc:	4603      	mov	r3, r0
 80065fe:	70fb      	strb	r3, [r7, #3]
 8006600:	460b      	mov	r3, r1
 8006602:	803b      	strh	r3, [r7, #0]
 8006604:	4613      	mov	r3, r2
 8006606:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800660c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006610:	2b00      	cmp	r3, #0
 8006612:	da0f      	bge.n	8006634 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006614:	78fb      	ldrb	r3, [r7, #3]
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	4613      	mov	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	4413      	add	r3, r2
 8006628:	3304      	adds	r3, #4
 800662a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2201      	movs	r2, #1
 8006630:	705a      	strb	r2, [r3, #1]
 8006632:	e00f      	b.n	8006654 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	f003 0207 	and.w	r2, r3, #7
 800663a:	4613      	mov	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	00db      	lsls	r3, r3, #3
 8006642:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	4413      	add	r3, r2
 800664a:	3304      	adds	r3, #4
 800664c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	b2da      	uxtb	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006660:	883a      	ldrh	r2, [r7, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	78ba      	ldrb	r2, [r7, #2]
 800666a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	785b      	ldrb	r3, [r3, #1]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d004      	beq.n	800667e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	b29a      	uxth	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800667e:	78bb      	ldrb	r3, [r7, #2]
 8006680:	2b02      	cmp	r3, #2
 8006682:	d102      	bne.n	800668a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006690:	2b01      	cmp	r3, #1
 8006692:	d101      	bne.n	8006698 <HAL_PCD_EP_Open+0xaa>
 8006694:	2302      	movs	r3, #2
 8006696:	e00e      	b.n	80066b6 <HAL_PCD_EP_Open+0xc8>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68f9      	ldr	r1, [r7, #12]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f003 fd30 	bl	800a10c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 80066b4:	7afb      	ldrb	r3, [r7, #11]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b084      	sub	sp, #16
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	460b      	mov	r3, r1
 80066c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80066ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	da0f      	bge.n	80066f2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066d2:	78fb      	ldrb	r3, [r7, #3]
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	4413      	add	r3, r2
 80066e6:	3304      	adds	r3, #4
 80066e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2201      	movs	r2, #1
 80066ee:	705a      	strb	r2, [r3, #1]
 80066f0:	e00f      	b.n	8006712 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066f2:	78fb      	ldrb	r3, [r7, #3]
 80066f4:	f003 0207 	and.w	r2, r3, #7
 80066f8:	4613      	mov	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	00db      	lsls	r3, r3, #3
 8006700:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	4413      	add	r3, r2
 8006708:	3304      	adds	r3, #4
 800670a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006712:	78fb      	ldrb	r3, [r7, #3]
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	b2da      	uxtb	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006724:	2b01      	cmp	r3, #1
 8006726:	d101      	bne.n	800672c <HAL_PCD_EP_Close+0x6e>
 8006728:	2302      	movs	r3, #2
 800672a:	e00e      	b.n	800674a <HAL_PCD_EP_Close+0x8c>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68f9      	ldr	r1, [r7, #12]
 800673a:	4618      	mov	r0, r3
 800673c:	f004 f8a0 	bl	800a880 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b086      	sub	sp, #24
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	607a      	str	r2, [r7, #4]
 800675c:	603b      	str	r3, [r7, #0]
 800675e:	460b      	mov	r3, r1
 8006760:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006762:	7afb      	ldrb	r3, [r7, #11]
 8006764:	f003 0207 	and.w	r2, r3, #7
 8006768:	4613      	mov	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	3304      	adds	r3, #4
 800677a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	2200      	movs	r2, #0
 800678c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2200      	movs	r2, #0
 8006792:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006794:	7afb      	ldrb	r3, [r7, #11]
 8006796:	f003 0307 	and.w	r3, r3, #7
 800679a:	b2da      	uxtb	r2, r3
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80067a0:	7afb      	ldrb	r3, [r7, #11]
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d106      	bne.n	80067b8 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6979      	ldr	r1, [r7, #20]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f004 fa52 	bl	800ac5a <USB_EPStartXfer>
 80067b6:	e005      	b.n	80067c4 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6979      	ldr	r1, [r7, #20]
 80067be:	4618      	mov	r0, r3
 80067c0:	f004 fa4b 	bl	800ac5a <USB_EPStartXfer>
  }

  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	460b      	mov	r3, r1
 80067d8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80067da:	78fb      	ldrb	r3, [r7, #3]
 80067dc:	f003 0207 	and.w	r2, r3, #7
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	4613      	mov	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	00db      	lsls	r3, r3, #3
 80067ea:	440b      	add	r3, r1
 80067ec:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80067f0:	681b      	ldr	r3, [r3, #0]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b086      	sub	sp, #24
 8006802:	af00      	add	r7, sp, #0
 8006804:	60f8      	str	r0, [r7, #12]
 8006806:	607a      	str	r2, [r7, #4]
 8006808:	603b      	str	r3, [r7, #0]
 800680a:	460b      	mov	r3, r1
 800680c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800680e:	7afb      	ldrb	r3, [r7, #11]
 8006810:	f003 0307 	and.w	r3, r3, #7
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	4613      	mov	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	00db      	lsls	r3, r3, #3
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	4413      	add	r3, r2
 8006822:	3304      	adds	r3, #4
 8006824:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	2200      	movs	r2, #0
 8006844:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2201      	movs	r2, #1
 800684a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800684c:	7afb      	ldrb	r3, [r7, #11]
 800684e:	f003 0307 	and.w	r3, r3, #7
 8006852:	b2da      	uxtb	r2, r3
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006858:	7afb      	ldrb	r3, [r7, #11]
 800685a:	f003 0307 	and.w	r3, r3, #7
 800685e:	2b00      	cmp	r3, #0
 8006860:	d106      	bne.n	8006870 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6979      	ldr	r1, [r7, #20]
 8006868:	4618      	mov	r0, r3
 800686a:	f004 f9f6 	bl	800ac5a <USB_EPStartXfer>
 800686e:	e005      	b.n	800687c <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6979      	ldr	r1, [r7, #20]
 8006876:	4618      	mov	r0, r3
 8006878:	f004 f9ef 	bl	800ac5a <USB_EPStartXfer>
  }

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b084      	sub	sp, #16
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	460b      	mov	r3, r1
 8006890:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006892:	78fb      	ldrb	r3, [r7, #3]
 8006894:	f003 0207 	and.w	r2, r3, #7
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	429a      	cmp	r2, r3
 800689e:	d901      	bls.n	80068a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e04e      	b.n	8006942 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80068a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	da0f      	bge.n	80068cc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068ac:	78fb      	ldrb	r3, [r7, #3]
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	1c5a      	adds	r2, r3, #1
 80068b4:	4613      	mov	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	4413      	add	r3, r2
 80068c0:	3304      	adds	r3, #4
 80068c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2201      	movs	r2, #1
 80068c8:	705a      	strb	r2, [r3, #1]
 80068ca:	e00d      	b.n	80068e8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80068cc:	78fa      	ldrb	r2, [r7, #3]
 80068ce:	4613      	mov	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	4413      	add	r3, r2
 80068de:	3304      	adds	r3, #4
 80068e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2201      	movs	r2, #1
 80068ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068ee:	78fb      	ldrb	r3, [r7, #3]
 80068f0:	f003 0307 	and.w	r3, r3, #7
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006900:	2b01      	cmp	r3, #1
 8006902:	d101      	bne.n	8006908 <HAL_PCD_EP_SetStall+0x82>
 8006904:	2302      	movs	r3, #2
 8006906:	e01c      	b.n	8006942 <HAL_PCD_EP_SetStall+0xbc>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68f9      	ldr	r1, [r7, #12]
 8006916:	4618      	mov	r0, r3
 8006918:	f005 fcd5 	bl	800c2c6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800691c:	78fb      	ldrb	r3, [r7, #3]
 800691e:	f003 0307 	and.w	r3, r3, #7
 8006922:	2b00      	cmp	r3, #0
 8006924:	d108      	bne.n	8006938 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8006930:	4619      	mov	r1, r3
 8006932:	4610      	mov	r0, r2
 8006934:	f005 fe16 	bl	800c564 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b084      	sub	sp, #16
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	460b      	mov	r3, r1
 8006954:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006956:	78fb      	ldrb	r3, [r7, #3]
 8006958:	f003 020f 	and.w	r2, r3, #15
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	429a      	cmp	r2, r3
 8006962:	d901      	bls.n	8006968 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e042      	b.n	80069ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006968:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800696c:	2b00      	cmp	r3, #0
 800696e:	da0f      	bge.n	8006990 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006970:	78fb      	ldrb	r3, [r7, #3]
 8006972:	f003 0307 	and.w	r3, r3, #7
 8006976:	1c5a      	adds	r2, r3, #1
 8006978:	4613      	mov	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	4413      	add	r3, r2
 8006984:	3304      	adds	r3, #4
 8006986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2201      	movs	r2, #1
 800698c:	705a      	strb	r2, [r3, #1]
 800698e:	e00f      	b.n	80069b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006990:	78fb      	ldrb	r3, [r7, #3]
 8006992:	f003 0207 	and.w	r2, r3, #7
 8006996:	4613      	mov	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	00db      	lsls	r3, r3, #3
 800699e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	4413      	add	r3, r2
 80069a6:	3304      	adds	r3, #4
 80069a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069b6:	78fb      	ldrb	r3, [r7, #3]
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d101      	bne.n	80069d0 <HAL_PCD_EP_ClrStall+0x86>
 80069cc:	2302      	movs	r3, #2
 80069ce:	e00e      	b.n	80069ee <HAL_PCD_EP_ClrStall+0xa4>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68f9      	ldr	r1, [r7, #12]
 80069de:	4618      	mov	r0, r3
 80069e0:	f005 fcc2 	bl	800c368 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b096      	sub	sp, #88	; 0x58
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80069fe:	e3a9      	b.n	8007154 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a08:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006a0c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	f003 030f 	and.w	r3, r3, #15
 8006a16:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8006a1a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f040 8169 	bne.w	8006cf6 <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006a24:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a28:	f003 0310 	and.w	r3, r3, #16
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d150      	bne.n	8006ad2 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a40:	81fb      	strh	r3, [r7, #14]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	89fb      	ldrh	r3, [r7, #14]
 8006a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	332c      	adds	r3, #44	; 0x2c
 8006a58:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	461a      	mov	r2, r3
 8006a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	4413      	add	r3, r2
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	6812      	ldr	r2, [r2, #0]
 8006a72:	4413      	add	r3, r2
 8006a74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a80:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a84:	695a      	ldr	r2, [r3, #20]
 8006a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	441a      	add	r2, r3
 8006a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a8e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006a90:	2100      	movs	r1, #0
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f007 fc91 	bl	800e3ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 8357 	beq.w	8007154 <PCD_EP_ISR_Handler+0x75e>
 8006aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f040 8352 	bne.w	8007154 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	b292      	uxth	r2, r2
 8006ac4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006ad0:	e340      	b.n	8007154 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8006ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006ae4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d032      	beq.n	8006b56 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	461a      	mov	r2, r3
 8006afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	4413      	add	r3, r2
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	6812      	ldr	r2, [r2, #0]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b16:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8006b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b24:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b28:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	f005 fd68 	bl	800c600 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	823b      	strh	r3, [r7, #16]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	8a3a      	ldrh	r2, [r7, #16]
 8006b46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b4a:	b292      	uxth	r2, r2
 8006b4c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f007 fc06 	bl	800e360 <HAL_PCD_SetupStageCallback>
 8006b54:	e2fe      	b.n	8007154 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006b56:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f280 82fa 	bge.w	8007154 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	83fb      	strh	r3, [r7, #30]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	8bfa      	ldrh	r2, [r7, #30]
 8006b76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b7a:	b292      	uxth	r2, r2
 8006b7c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	4413      	add	r3, r2
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6812      	ldr	r2, [r2, #0]
 8006b96:	4413      	add	r3, r2
 8006b98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d019      	beq.n	8006be2 <PCD_EP_ISR_Handler+0x1ec>
 8006bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d015      	beq.n	8006be2 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6818      	ldr	r0, [r3, #0]
 8006bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bbc:	6959      	ldr	r1, [r3, #20]
 8006bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	f005 fd1a 	bl	800c600 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bce:	695a      	ldr	r2, [r3, #20]
 8006bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	441a      	add	r2, r3
 8006bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006bda:	2100      	movs	r1, #0
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f007 fbd1 	bl	800e384 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006bec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f040 82ad 	bne.w	8007154 <PCD_EP_ISR_Handler+0x75e>
 8006bfa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006bfe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006c02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c06:	f000 82a5 	beq.w	8007154 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	61bb      	str	r3, [r7, #24]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	4413      	add	r3, r2
 8006c20:	61bb      	str	r3, [r7, #24]
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c28:	617b      	str	r3, [r7, #20]
 8006c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	2b3e      	cmp	r3, #62	; 0x3e
 8006c30:	d918      	bls.n	8006c64 <PCD_EP_ISR_Handler+0x26e>
 8006c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	095b      	lsrs	r3, r3, #5
 8006c38:	647b      	str	r3, [r7, #68]	; 0x44
 8006c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	f003 031f 	and.w	r3, r3, #31
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d102      	bne.n	8006c4c <PCD_EP_ISR_Handler+0x256>
 8006c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	029b      	lsls	r3, r3, #10
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	801a      	strh	r2, [r3, #0]
 8006c62:	e029      	b.n	8006cb8 <PCD_EP_ISR_Handler+0x2c2>
 8006c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d112      	bne.n	8006c92 <PCD_EP_ISR_Handler+0x29c>
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	801a      	strh	r2, [r3, #0]
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	801a      	strh	r2, [r3, #0]
 8006c90:	e012      	b.n	8006cb8 <PCD_EP_ISR_Handler+0x2c2>
 8006c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	085b      	lsrs	r3, r3, #1
 8006c98:	647b      	str	r3, [r7, #68]	; 0x44
 8006c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d002      	beq.n	8006cac <PCD_EP_ISR_Handler+0x2b6>
 8006ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ca8:	3301      	adds	r3, #1
 8006caa:	647b      	str	r3, [r7, #68]	; 0x44
 8006cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	029b      	lsls	r3, r3, #10
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc8:	827b      	strh	r3, [r7, #18]
 8006cca:	8a7b      	ldrh	r3, [r7, #18]
 8006ccc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006cd0:	827b      	strh	r3, [r7, #18]
 8006cd2:	8a7b      	ldrh	r3, [r7, #18]
 8006cd4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006cd8:	827b      	strh	r3, [r7, #18]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	8a7b      	ldrh	r3, [r7, #18]
 8006ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	8013      	strh	r3, [r2, #0]
 8006cf4:	e22e      	b.n	8007154 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006d0a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f280 80f7 	bge.w	8006f02 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	461a      	mov	r2, r3
 8006d36:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8006d42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d46:	b292      	uxth	r2, r2
 8006d48:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006d4a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8006d4e:	4613      	mov	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	00db      	lsls	r3, r3, #3
 8006d56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	3304      	adds	r3, #4
 8006d60:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d64:	7b1b      	ldrb	r3, [r3, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d123      	bne.n	8006db2 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	461a      	mov	r2, r3
 8006d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	00db      	lsls	r3, r3, #3
 8006d7c:	4413      	add	r3, r2
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	6812      	ldr	r2, [r2, #0]
 8006d82:	4413      	add	r3, r2
 8006d84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d8e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8006d92:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 808e 	beq.w	8006eb8 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6818      	ldr	r0, [r3, #0]
 8006da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da2:	6959      	ldr	r1, [r3, #20]
 8006da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da6:	88da      	ldrh	r2, [r3, #6]
 8006da8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006dac:	f005 fc28 	bl	800c600 <USB_ReadPMA>
 8006db0:	e082      	b.n	8006eb8 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006db4:	78db      	ldrb	r3, [r3, #3]
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d10a      	bne.n	8006dd0 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006dba:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f9d4 	bl	8007170 <HAL_PCD_EP_DB_Receive>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006dce:	e073      	b.n	8006eb8 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	441a      	add	r2, r3
 8006dfc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d022      	beq.n	8006e74 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	461a      	mov	r2, r3
 8006e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	4413      	add	r3, r2
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	6812      	ldr	r2, [r2, #0]
 8006e46:	4413      	add	r3, r2
 8006e48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e52:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006e56:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d02c      	beq.n	8006eb8 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e64:	6959      	ldr	r1, [r3, #20]
 8006e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e68:	891a      	ldrh	r2, [r3, #8]
 8006e6a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006e6e:	f005 fbc7 	bl	800c600 <USB_ReadPMA>
 8006e72:	e021      	b.n	8006eb8 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	461a      	mov	r2, r3
 8006e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	00db      	lsls	r3, r3, #3
 8006e86:	4413      	add	r3, r2
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6812      	ldr	r2, [r2, #0]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e98:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006e9c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d009      	beq.n	8006eb8 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6818      	ldr	r0, [r3, #0]
 8006ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eaa:	6959      	ldr	r1, [r3, #20]
 8006eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eae:	895a      	ldrh	r2, [r3, #10]
 8006eb0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006eb4:	f005 fba4 	bl	800c600 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eba:	69da      	ldr	r2, [r3, #28]
 8006ebc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006ec0:	441a      	add	r2, r3
 8006ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec8:	695a      	ldr	r2, [r3, #20]
 8006eca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006ece:	441a      	add	r2, r3
 8006ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d005      	beq.n	8006ee8 <PCD_EP_ISR_Handler+0x4f2>
 8006edc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d206      	bcs.n	8006ef6 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f007 fa48 	bl	800e384 <HAL_PCD_DataOutStageCallback>
 8006ef4:	e005      	b.n	8006f02 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006efc:	4618      	mov	r0, r3
 8006efe:	f003 feac 	bl	800ac5a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006f02:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 8122 	beq.w	8007154 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8006f10:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	4613      	mov	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	00db      	lsls	r3, r3, #3
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	4413      	add	r3, r2
 8006f22:	3304      	adds	r3, #4
 8006f24:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	881b      	ldrh	r3, [r3, #0]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	441a      	add	r2, r3
 8006f52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f64:	78db      	ldrb	r3, [r3, #3]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	f040 80a2 	bne.w	80070b0 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8006f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f6e:	2200      	movs	r2, #0
 8006f70:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f74:	7b1b      	ldrb	r3, [r3, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 8093 	beq.w	80070a2 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006f7c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d046      	beq.n	8007016 <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f8a:	785b      	ldrb	r3, [r3, #1]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d126      	bne.n	8006fde <PCD_EP_ISR_Handler+0x5e8>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	627b      	str	r3, [r7, #36]	; 0x24
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	4413      	add	r3, r2
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	00da      	lsls	r2, r3, #3
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fb6:	623b      	str	r3, [r7, #32]
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	801a      	strh	r2, [r3, #0]
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	881b      	ldrh	r3, [r3, #0]
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	801a      	strh	r2, [r3, #0]
 8006fdc:	e061      	b.n	80070a2 <PCD_EP_ISR_Handler+0x6ac>
 8006fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe0:	785b      	ldrb	r3, [r3, #1]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d15d      	bne.n	80070a2 <PCD_EP_ISR_Handler+0x6ac>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffa:	4413      	add	r3, r2
 8006ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	00da      	lsls	r2, r3, #3
 8007004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007006:	4413      	add	r3, r2
 8007008:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800700c:	62bb      	str	r3, [r7, #40]	; 0x28
 800700e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007010:	2200      	movs	r2, #0
 8007012:	801a      	strh	r2, [r3, #0]
 8007014:	e045      	b.n	80070a2 <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800701c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800701e:	785b      	ldrb	r3, [r3, #1]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d126      	bne.n	8007072 <PCD_EP_ISR_Handler+0x67c>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	637b      	str	r3, [r7, #52]	; 0x34
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007032:	b29b      	uxth	r3, r3
 8007034:	461a      	mov	r2, r3
 8007036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007038:	4413      	add	r3, r2
 800703a:	637b      	str	r3, [r7, #52]	; 0x34
 800703c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	00da      	lsls	r2, r3, #3
 8007042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007044:	4413      	add	r3, r2
 8007046:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800704a:	633b      	str	r3, [r7, #48]	; 0x30
 800704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	b29b      	uxth	r3, r3
 8007052:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007056:	b29a      	uxth	r2, r3
 8007058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705a:	801a      	strh	r2, [r3, #0]
 800705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705e:	881b      	ldrh	r3, [r3, #0]
 8007060:	b29b      	uxth	r3, r3
 8007062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800706a:	b29a      	uxth	r2, r3
 800706c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706e:	801a      	strh	r2, [r3, #0]
 8007070:	e017      	b.n	80070a2 <PCD_EP_ISR_Handler+0x6ac>
 8007072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007074:	785b      	ldrb	r3, [r3, #1]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d113      	bne.n	80070a2 <PCD_EP_ISR_Handler+0x6ac>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007082:	b29b      	uxth	r3, r3
 8007084:	461a      	mov	r2, r3
 8007086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007088:	4413      	add	r3, r2
 800708a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800708c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	00da      	lsls	r2, r3, #3
 8007092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007094:	4413      	add	r3, r2
 8007096:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800709a:	63bb      	str	r3, [r7, #56]	; 0x38
 800709c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709e:	2200      	movs	r2, #0
 80070a0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80070a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f007 f986 	bl	800e3ba <HAL_PCD_DataInStageCallback>
 80070ae:	e051      	b.n	8007154 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80070b0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80070b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d144      	bne.n	8007146 <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	461a      	mov	r2, r3
 80070c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	00db      	lsls	r3, r3, #3
 80070ce:	4413      	add	r3, r2
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	6812      	ldr	r2, [r2, #0]
 80070d4:	4413      	add	r3, r2
 80070d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070e0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80070e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e6:	699a      	ldr	r2, [r3, #24]
 80070e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d907      	bls.n	8007100 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 80070f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070f2:	699a      	ldr	r2, [r3, #24]
 80070f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80070f8:	1ad2      	subs	r2, r2, r3
 80070fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070fc:	619a      	str	r2, [r3, #24]
 80070fe:	e002      	b.n	8007106 <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 8007100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007102:	2200      	movs	r2, #0
 8007104:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d106      	bne.n	800711c <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800710e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f007 f950 	bl	800e3ba <HAL_PCD_DataInStageCallback>
 800711a:	e01b      	b.n	8007154 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800711c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800711e:	695a      	ldr	r2, [r3, #20]
 8007120:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007124:	441a      	add	r2, r3
 8007126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007128:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800712a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800712c:	69da      	ldr	r2, [r3, #28]
 800712e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007132:	441a      	add	r2, r3
 8007134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007136:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800713e:	4618      	mov	r0, r3
 8007140:	f003 fd8b 	bl	800ac5a <USB_EPStartXfer>
 8007144:	e006      	b.n	8007154 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007146:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800714a:	461a      	mov	r2, r3
 800714c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f917 	bl	8007382 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800715c:	b29b      	uxth	r3, r3
 800715e:	b21b      	sxth	r3, r3
 8007160:	2b00      	cmp	r3, #0
 8007162:	f6ff ac4d 	blt.w	8006a00 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3758      	adds	r7, #88	; 0x58
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	4613      	mov	r3, r2
 800717c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800717e:	88fb      	ldrh	r3, [r7, #6]
 8007180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d07c      	beq.n	8007282 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007190:	b29b      	uxth	r3, r3
 8007192:	461a      	mov	r2, r3
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	00db      	lsls	r3, r3, #3
 800719a:	4413      	add	r3, r2
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	6812      	ldr	r2, [r2, #0]
 80071a0:	4413      	add	r3, r2
 80071a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071a6:	881b      	ldrh	r3, [r3, #0]
 80071a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071ac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	699a      	ldr	r2, [r3, #24]
 80071b2:	8b7b      	ldrh	r3, [r7, #26]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d306      	bcc.n	80071c6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	699a      	ldr	r2, [r3, #24]
 80071bc:	8b7b      	ldrh	r3, [r7, #26]
 80071be:	1ad2      	subs	r2, r2, r3
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	619a      	str	r2, [r3, #24]
 80071c4:	e002      	b.n	80071cc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2200      	movs	r2, #0
 80071ca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d123      	bne.n	800721c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	461a      	mov	r2, r3
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ee:	833b      	strh	r3, [r7, #24]
 80071f0:	8b3b      	ldrh	r3, [r7, #24]
 80071f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071f6:	833b      	strh	r3, [r7, #24]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	461a      	mov	r2, r3
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	441a      	add	r2, r3
 8007206:	8b3b      	ldrh	r3, [r7, #24]
 8007208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800720c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007218:	b29b      	uxth	r3, r3
 800721a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800721c:	88fb      	ldrh	r3, [r7, #6]
 800721e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	d01f      	beq.n	8007266 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	b29b      	uxth	r3, r3
 8007238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800723c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007240:	82fb      	strh	r3, [r7, #22]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	461a      	mov	r2, r3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	441a      	add	r2, r3
 8007250:	8afb      	ldrh	r3, [r7, #22]
 8007252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800725a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800725e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007262:	b29b      	uxth	r3, r3
 8007264:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007266:	8b7b      	ldrh	r3, [r7, #26]
 8007268:	2b00      	cmp	r3, #0
 800726a:	f000 8085 	beq.w	8007378 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6818      	ldr	r0, [r3, #0]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	6959      	ldr	r1, [r3, #20]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	891a      	ldrh	r2, [r3, #8]
 800727a:	8b7b      	ldrh	r3, [r7, #26]
 800727c:	f005 f9c0 	bl	800c600 <USB_ReadPMA>
 8007280:	e07a      	b.n	8007378 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800728a:	b29b      	uxth	r3, r3
 800728c:	461a      	mov	r2, r3
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	4413      	add	r3, r2
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	6812      	ldr	r2, [r2, #0]
 800729a:	4413      	add	r3, r2
 800729c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072a6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	699a      	ldr	r2, [r3, #24]
 80072ac:	8b7b      	ldrh	r3, [r7, #26]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d306      	bcc.n	80072c0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	699a      	ldr	r2, [r3, #24]
 80072b6:	8b7b      	ldrh	r3, [r7, #26]
 80072b8:	1ad2      	subs	r2, r2, r3
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	619a      	str	r2, [r3, #24]
 80072be:	e002      	b.n	80072c6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2200      	movs	r2, #0
 80072c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d123      	bne.n	8007316 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	881b      	ldrh	r3, [r3, #0]
 80072de:	b29b      	uxth	r3, r3
 80072e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e8:	83fb      	strh	r3, [r7, #30]
 80072ea:	8bfb      	ldrh	r3, [r7, #30]
 80072ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80072f0:	83fb      	strh	r3, [r7, #30]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	461a      	mov	r2, r3
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	441a      	add	r2, r3
 8007300:	8bfb      	ldrh	r3, [r7, #30]
 8007302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800730a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800730e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007312:	b29b      	uxth	r3, r3
 8007314:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007316:	88fb      	ldrh	r3, [r7, #6]
 8007318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731c:	2b00      	cmp	r3, #0
 800731e:	d11f      	bne.n	8007360 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	461a      	mov	r2, r3
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	881b      	ldrh	r3, [r3, #0]
 8007330:	b29b      	uxth	r3, r3
 8007332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733a:	83bb      	strh	r3, [r7, #28]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	461a      	mov	r2, r3
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	441a      	add	r2, r3
 800734a:	8bbb      	ldrh	r3, [r7, #28]
 800734c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007358:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800735c:	b29b      	uxth	r3, r3
 800735e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007360:	8b7b      	ldrh	r3, [r7, #26]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d008      	beq.n	8007378 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6818      	ldr	r0, [r3, #0]
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	6959      	ldr	r1, [r3, #20]
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	895a      	ldrh	r2, [r3, #10]
 8007372:	8b7b      	ldrh	r3, [r7, #26]
 8007374:	f005 f944 	bl	800c600 <USB_ReadPMA>
    }
  }

  return count;
 8007378:	8b7b      	ldrh	r3, [r7, #26]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3720      	adds	r7, #32
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b0a2      	sub	sp, #136	; 0x88
 8007386:	af00      	add	r7, sp, #0
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	60b9      	str	r1, [r7, #8]
 800738c:	4613      	mov	r3, r2
 800738e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007390:	88fb      	ldrh	r3, [r7, #6]
 8007392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 81c5 	beq.w	8007726 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	461a      	mov	r2, r3
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	00db      	lsls	r3, r3, #3
 80073ae:	4413      	add	r3, r2
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	6812      	ldr	r2, [r2, #0]
 80073b4:	4413      	add	r3, r2
 80073b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073ba:	881b      	ldrh	r3, [r3, #0]
 80073bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	699a      	ldr	r2, [r3, #24]
 80073c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d907      	bls.n	80073e0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	699a      	ldr	r2, [r3, #24]
 80073d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073d8:	1ad2      	subs	r2, r2, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	619a      	str	r2, [r3, #24]
 80073de:	e002      	b.n	80073e6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2200      	movs	r2, #0
 80073e4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f040 80b9 	bne.w	8007562 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	785b      	ldrb	r3, [r3, #1]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d126      	bne.n	8007446 <HAL_PCD_EP_DB_Transmit+0xc4>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007406:	b29b      	uxth	r3, r3
 8007408:	461a      	mov	r2, r3
 800740a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740c:	4413      	add	r3, r2
 800740e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	00da      	lsls	r2, r3, #3
 8007416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007418:	4413      	add	r3, r2
 800741a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800741e:	627b      	str	r3, [r7, #36]	; 0x24
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	881b      	ldrh	r3, [r3, #0]
 8007424:	b29b      	uxth	r3, r3
 8007426:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800742a:	b29a      	uxth	r2, r3
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	801a      	strh	r2, [r3, #0]
 8007430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	b29b      	uxth	r3, r3
 8007436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800743a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800743e:	b29a      	uxth	r2, r3
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	801a      	strh	r2, [r3, #0]
 8007444:	e01a      	b.n	800747c <HAL_PCD_EP_DB_Transmit+0xfa>
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	785b      	ldrb	r3, [r3, #1]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d116      	bne.n	800747c <HAL_PCD_EP_DB_Transmit+0xfa>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	633b      	str	r3, [r7, #48]	; 0x30
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800745c:	b29b      	uxth	r3, r3
 800745e:	461a      	mov	r2, r3
 8007460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007462:	4413      	add	r3, r2
 8007464:	633b      	str	r3, [r7, #48]	; 0x30
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	00da      	lsls	r2, r3, #3
 800746c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746e:	4413      	add	r3, r2
 8007470:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007474:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007478:	2200      	movs	r2, #0
 800747a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	623b      	str	r3, [r7, #32]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	785b      	ldrb	r3, [r3, #1]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d126      	bne.n	80074d8 <HAL_PCD_EP_DB_Transmit+0x156>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	61bb      	str	r3, [r7, #24]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007498:	b29b      	uxth	r3, r3
 800749a:	461a      	mov	r2, r3
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	4413      	add	r3, r2
 80074a0:	61bb      	str	r3, [r7, #24]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	00da      	lsls	r2, r3, #3
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	4413      	add	r3, r2
 80074ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074b0:	617b      	str	r3, [r7, #20]
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074bc:	b29a      	uxth	r2, r3
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	801a      	strh	r2, [r3, #0]
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	801a      	strh	r2, [r3, #0]
 80074d6:	e017      	b.n	8007508 <HAL_PCD_EP_DB_Transmit+0x186>
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	785b      	ldrb	r3, [r3, #1]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d113      	bne.n	8007508 <HAL_PCD_EP_DB_Transmit+0x186>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	461a      	mov	r2, r3
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	4413      	add	r3, r2
 80074f0:	623b      	str	r3, [r7, #32]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	00da      	lsls	r2, r3, #3
 80074f8:	6a3b      	ldr	r3, [r7, #32]
 80074fa:	4413      	add	r3, r2
 80074fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007500:	61fb      	str	r3, [r7, #28]
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	2200      	movs	r2, #0
 8007506:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	4619      	mov	r1, r3
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f006 ff53 	bl	800e3ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007514:	88fb      	ldrh	r3, [r7, #6]
 8007516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 82d2 	beq.w	8007ac4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	461a      	mov	r2, r3
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	881b      	ldrh	r3, [r3, #0]
 8007530:	b29b      	uxth	r3, r3
 8007532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800753a:	827b      	strh	r3, [r7, #18]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	461a      	mov	r2, r3
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	441a      	add	r2, r3
 800754a:	8a7b      	ldrh	r3, [r7, #18]
 800754c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007554:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800755c:	b29b      	uxth	r3, r3
 800755e:	8013      	strh	r3, [r2, #0]
 8007560:	e2b0      	b.n	8007ac4 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007562:	88fb      	ldrh	r3, [r7, #6]
 8007564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d021      	beq.n	80075b0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	461a      	mov	r2, r3
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	b29b      	uxth	r3, r3
 800757e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007586:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	441a      	add	r2, r3
 8007598:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800759c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	f040 8284 	bne.w	8007ac4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	695a      	ldr	r2, [r3, #20]
 80075c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075c4:	441a      	add	r2, r3
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	69da      	ldr	r2, [r3, #28]
 80075ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075d2:	441a      	add	r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	6a1a      	ldr	r2, [r3, #32]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d309      	bcc.n	80075f8 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	6a1a      	ldr	r2, [r3, #32]
 80075ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075f0:	1ad2      	subs	r2, r2, r3
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	621a      	str	r2, [r3, #32]
 80075f6:	e015      	b.n	8007624 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d107      	bne.n	8007610 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8007600:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007604:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800760e:	e009      	b.n	8007624 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	2200      	movs	r2, #0
 8007622:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	785b      	ldrb	r3, [r3, #1]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d155      	bne.n	80076d8 <HAL_PCD_EP_DB_Transmit+0x356>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	63bb      	str	r3, [r7, #56]	; 0x38
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800763a:	b29b      	uxth	r3, r3
 800763c:	461a      	mov	r2, r3
 800763e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007640:	4413      	add	r3, r2
 8007642:	63bb      	str	r3, [r7, #56]	; 0x38
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	00da      	lsls	r2, r3, #3
 800764a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764c:	4413      	add	r3, r2
 800764e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007652:	637b      	str	r3, [r7, #52]	; 0x34
 8007654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007656:	2b3e      	cmp	r3, #62	; 0x3e
 8007658:	d916      	bls.n	8007688 <HAL_PCD_EP_DB_Transmit+0x306>
 800765a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800765c:	095b      	lsrs	r3, r3, #5
 800765e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007662:	f003 031f 	and.w	r3, r3, #31
 8007666:	2b00      	cmp	r3, #0
 8007668:	d102      	bne.n	8007670 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800766a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800766c:	3b01      	subs	r3, #1
 800766e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007672:	b29b      	uxth	r3, r3
 8007674:	029b      	lsls	r3, r3, #10
 8007676:	b29b      	uxth	r3, r3
 8007678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800767c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007680:	b29a      	uxth	r2, r3
 8007682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007684:	801a      	strh	r2, [r3, #0]
 8007686:	e043      	b.n	8007710 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800768a:	2b00      	cmp	r3, #0
 800768c:	d112      	bne.n	80076b4 <HAL_PCD_EP_DB_Transmit+0x332>
 800768e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007690:	881b      	ldrh	r3, [r3, #0]
 8007692:	b29b      	uxth	r3, r3
 8007694:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007698:	b29a      	uxth	r2, r3
 800769a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b0:	801a      	strh	r2, [r3, #0]
 80076b2:	e02d      	b.n	8007710 <HAL_PCD_EP_DB_Transmit+0x38e>
 80076b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076b6:	085b      	lsrs	r3, r3, #1
 80076b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80076ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d002      	beq.n	80076ca <HAL_PCD_EP_DB_Transmit+0x348>
 80076c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076c6:	3301      	adds	r3, #1
 80076c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80076ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	029b      	lsls	r3, r3, #10
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d4:	801a      	strh	r2, [r3, #0]
 80076d6:	e01b      	b.n	8007710 <HAL_PCD_EP_DB_Transmit+0x38e>
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	785b      	ldrb	r3, [r3, #1]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d117      	bne.n	8007710 <HAL_PCD_EP_DB_Transmit+0x38e>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	643b      	str	r3, [r7, #64]	; 0x40
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	461a      	mov	r2, r3
 80076f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076f4:	4413      	add	r3, r2
 80076f6:	643b      	str	r3, [r7, #64]	; 0x40
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	00da      	lsls	r2, r3, #3
 80076fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007700:	4413      	add	r3, r2
 8007702:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800770a:	b29a      	uxth	r2, r3
 800770c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800770e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6818      	ldr	r0, [r3, #0]
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	6959      	ldr	r1, [r3, #20]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	891a      	ldrh	r2, [r3, #8]
 800771c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800771e:	b29b      	uxth	r3, r3
 8007720:	f004 ff2c 	bl	800c57c <USB_WritePMA>
 8007724:	e1ce      	b.n	8007ac4 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800772e:	b29b      	uxth	r3, r3
 8007730:	461a      	mov	r2, r3
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	00db      	lsls	r3, r3, #3
 8007738:	4413      	add	r3, r2
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	6812      	ldr	r2, [r2, #0]
 800773e:	4413      	add	r3, r2
 8007740:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800774a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	699a      	ldr	r2, [r3, #24]
 8007752:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007756:	429a      	cmp	r2, r3
 8007758:	d307      	bcc.n	800776a <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	699a      	ldr	r2, [r3, #24]
 800775e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007762:	1ad2      	subs	r2, r2, r3
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	619a      	str	r2, [r3, #24]
 8007768:	e002      	b.n	8007770 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	2200      	movs	r2, #0
 800776e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	2b00      	cmp	r3, #0
 8007776:	f040 80c4 	bne.w	8007902 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	785b      	ldrb	r3, [r3, #1]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d126      	bne.n	80077d0 <HAL_PCD_EP_DB_Transmit+0x44e>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	66bb      	str	r3, [r7, #104]	; 0x68
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007790:	b29b      	uxth	r3, r3
 8007792:	461a      	mov	r2, r3
 8007794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007796:	4413      	add	r3, r2
 8007798:	66bb      	str	r3, [r7, #104]	; 0x68
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	00da      	lsls	r2, r3, #3
 80077a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077a2:	4413      	add	r3, r2
 80077a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077a8:	667b      	str	r3, [r7, #100]	; 0x64
 80077aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077b8:	801a      	strh	r2, [r3, #0]
 80077ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	b29b      	uxth	r3, r3
 80077c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077cc:	801a      	strh	r2, [r3, #0]
 80077ce:	e01a      	b.n	8007806 <HAL_PCD_EP_DB_Transmit+0x484>
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	785b      	ldrb	r3, [r3, #1]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d116      	bne.n	8007806 <HAL_PCD_EP_DB_Transmit+0x484>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	673b      	str	r3, [r7, #112]	; 0x70
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	461a      	mov	r2, r3
 80077ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077ec:	4413      	add	r3, r2
 80077ee:	673b      	str	r3, [r7, #112]	; 0x70
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	00da      	lsls	r2, r3, #3
 80077f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077f8:	4413      	add	r3, r2
 80077fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007802:	2200      	movs	r2, #0
 8007804:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	785b      	ldrb	r3, [r3, #1]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d12f      	bne.n	8007874 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007824:	b29b      	uxth	r3, r3
 8007826:	461a      	mov	r2, r3
 8007828:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800782c:	4413      	add	r3, r2
 800782e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	00da      	lsls	r2, r3, #3
 8007838:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800783c:	4413      	add	r3, r2
 800783e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007842:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007846:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	b29b      	uxth	r3, r3
 800784e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007852:	b29a      	uxth	r2, r3
 8007854:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007858:	801a      	strh	r2, [r3, #0]
 800785a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	b29b      	uxth	r3, r3
 8007862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800786a:	b29a      	uxth	r2, r3
 800786c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007870:	801a      	strh	r2, [r3, #0]
 8007872:	e017      	b.n	80078a4 <HAL_PCD_EP_DB_Transmit+0x522>
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	785b      	ldrb	r3, [r3, #1]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d113      	bne.n	80078a4 <HAL_PCD_EP_DB_Transmit+0x522>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007884:	b29b      	uxth	r3, r3
 8007886:	461a      	mov	r2, r3
 8007888:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800788a:	4413      	add	r3, r2
 800788c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	00da      	lsls	r2, r3, #3
 8007894:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007896:	4413      	add	r3, r2
 8007898:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800789c:	67bb      	str	r3, [r7, #120]	; 0x78
 800789e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078a0:	2200      	movs	r2, #0
 80078a2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	4619      	mov	r1, r3
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f006 fd85 	bl	800e3ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80078b0:	88fb      	ldrh	r3, [r7, #6]
 80078b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f040 8104 	bne.w	8007ac4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	461a      	mov	r2, r3
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4413      	add	r3, r2
 80078ca:	881b      	ldrh	r3, [r3, #0]
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	441a      	add	r2, r3
 80078e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80078ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	8013      	strh	r3, [r2, #0]
 8007900:	e0e0      	b.n	8007ac4 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007902:	88fb      	ldrh	r3, [r7, #6]
 8007904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d121      	bne.n	8007950 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	461a      	mov	r2, r3
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	b29b      	uxth	r3, r3
 800791e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007926:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	441a      	add	r2, r3
 8007938:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800793c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800794c:	b29b      	uxth	r3, r3
 800794e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007956:	2b01      	cmp	r3, #1
 8007958:	f040 80b4 	bne.w	8007ac4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	695a      	ldr	r2, [r3, #20]
 8007960:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007964:	441a      	add	r2, r3
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	69da      	ldr	r2, [r3, #28]
 800796e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007972:	441a      	add	r2, r3
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	6a1a      	ldr	r2, [r3, #32]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	429a      	cmp	r2, r3
 8007982:	d309      	bcc.n	8007998 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	6a1a      	ldr	r2, [r3, #32]
 800798e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007990:	1ad2      	subs	r2, r2, r3
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	621a      	str	r2, [r3, #32]
 8007996:	e015      	b.n	80079c4 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	6a1b      	ldr	r3, [r3, #32]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d107      	bne.n	80079b0 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80079a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80079a4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80079ae:	e009      	b.n	80079c4 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	6a1b      	ldr	r3, [r3, #32]
 80079b4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	2200      	movs	r2, #0
 80079ba:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	663b      	str	r3, [r7, #96]	; 0x60
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	785b      	ldrb	r3, [r3, #1]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d155      	bne.n	8007a7e <HAL_PCD_EP_DB_Transmit+0x6fc>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	461a      	mov	r2, r3
 80079e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079e6:	4413      	add	r3, r2
 80079e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	00da      	lsls	r2, r3, #3
 80079f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079f2:	4413      	add	r3, r2
 80079f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079f8:	657b      	str	r3, [r7, #84]	; 0x54
 80079fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079fc:	2b3e      	cmp	r3, #62	; 0x3e
 80079fe:	d916      	bls.n	8007a2e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8007a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a02:	095b      	lsrs	r3, r3, #5
 8007a04:	677b      	str	r3, [r7, #116]	; 0x74
 8007a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a08:	f003 031f 	and.w	r3, r3, #31
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d102      	bne.n	8007a16 <HAL_PCD_EP_DB_Transmit+0x694>
 8007a10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a12:	3b01      	subs	r3, #1
 8007a14:	677b      	str	r3, [r7, #116]	; 0x74
 8007a16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	029b      	lsls	r3, r3, #10
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a2a:	801a      	strh	r2, [r3, #0]
 8007a2c:	e040      	b.n	8007ab0 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d112      	bne.n	8007a5a <HAL_PCD_EP_DB_Transmit+0x6d8>
 8007a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a42:	801a      	strh	r2, [r3, #0]
 8007a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a56:	801a      	strh	r2, [r3, #0]
 8007a58:	e02a      	b.n	8007ab0 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a5c:	085b      	lsrs	r3, r3, #1
 8007a5e:	677b      	str	r3, [r7, #116]	; 0x74
 8007a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8007a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	677b      	str	r3, [r7, #116]	; 0x74
 8007a70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	029b      	lsls	r3, r3, #10
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a7a:	801a      	strh	r2, [r3, #0]
 8007a7c:	e018      	b.n	8007ab0 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	785b      	ldrb	r3, [r3, #1]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d114      	bne.n	8007ab0 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	461a      	mov	r2, r3
 8007a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a94:	4413      	add	r3, r2
 8007a96:	663b      	str	r3, [r7, #96]	; 0x60
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	00da      	lsls	r2, r3, #3
 8007a9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aae:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6818      	ldr	r0, [r3, #0]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	6959      	ldr	r1, [r3, #20]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	895a      	ldrh	r2, [r3, #10]
 8007abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	f004 fd5c 	bl	800c57c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	881b      	ldrh	r3, [r3, #0]
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ade:	823b      	strh	r3, [r7, #16]
 8007ae0:	8a3b      	ldrh	r3, [r7, #16]
 8007ae2:	f083 0310 	eor.w	r3, r3, #16
 8007ae6:	823b      	strh	r3, [r7, #16]
 8007ae8:	8a3b      	ldrh	r3, [r7, #16]
 8007aea:	f083 0320 	eor.w	r3, r3, #32
 8007aee:	823b      	strh	r3, [r7, #16]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	461a      	mov	r2, r3
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	441a      	add	r2, r3
 8007afe:	8a3b      	ldrh	r3, [r7, #16]
 8007b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3788      	adds	r7, #136	; 0x88
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b087      	sub	sp, #28
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	60f8      	str	r0, [r7, #12]
 8007b26:	607b      	str	r3, [r7, #4]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	817b      	strh	r3, [r7, #10]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007b30:	897b      	ldrh	r3, [r7, #10]
 8007b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00c      	beq.n	8007b56 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b3c:	897b      	ldrh	r3, [r7, #10]
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	1c5a      	adds	r2, r3, #1
 8007b44:	4613      	mov	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4413      	add	r3, r2
 8007b4a:	00db      	lsls	r3, r3, #3
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	4413      	add	r3, r2
 8007b50:	3304      	adds	r3, #4
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	e00a      	b.n	8007b6c <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007b56:	897a      	ldrh	r2, [r7, #10]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	4413      	add	r3, r2
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	4413      	add	r3, r2
 8007b68:	3304      	adds	r3, #4
 8007b6a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007b6c:	893b      	ldrh	r3, [r7, #8]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d107      	bne.n	8007b82 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2200      	movs	r2, #0
 8007b76:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	80da      	strh	r2, [r3, #6]
 8007b80:	e00b      	b.n	8007b9a <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	2201      	movs	r2, #1
 8007b86:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	0c1b      	lsrs	r3, r3, #16
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	371c      	adds	r7, #28
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	f043 0301 	orr.w	r3, r3, #1
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	f043 0302 	orr.w	r3, r3, #2
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	460b      	mov	r3, r1
 8007c06:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007c14:	b480      	push	{r7}
 8007c16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007c18:	4b04      	ldr	r3, [pc, #16]	; (8007c2c <HAL_PWREx_GetVoltageRange+0x18>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	40007000 	.word	0x40007000

08007c30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c3e:	d130      	bne.n	8007ca2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c40:	4b23      	ldr	r3, [pc, #140]	; (8007cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c4c:	d038      	beq.n	8007cc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c4e:	4b20      	ldr	r3, [pc, #128]	; (8007cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007c56:	4a1e      	ldr	r2, [pc, #120]	; (8007cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c5e:	4b1d      	ldr	r3, [pc, #116]	; (8007cd4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2232      	movs	r2, #50	; 0x32
 8007c64:	fb02 f303 	mul.w	r3, r2, r3
 8007c68:	4a1b      	ldr	r2, [pc, #108]	; (8007cd8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c6e:	0c9b      	lsrs	r3, r3, #18
 8007c70:	3301      	adds	r3, #1
 8007c72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c74:	e002      	b.n	8007c7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c7c:	4b14      	ldr	r3, [pc, #80]	; (8007cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c7e:	695b      	ldr	r3, [r3, #20]
 8007c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c88:	d102      	bne.n	8007c90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1f2      	bne.n	8007c76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c90:	4b0f      	ldr	r3, [pc, #60]	; (8007cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c9c:	d110      	bne.n	8007cc0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e00f      	b.n	8007cc2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007ca2:	4b0b      	ldr	r3, [pc, #44]	; (8007cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cae:	d007      	beq.n	8007cc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007cb0:	4b07      	ldr	r3, [pc, #28]	; (8007cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007cb8:	4a05      	ldr	r2, [pc, #20]	; (8007cd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007cbe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	40007000 	.word	0x40007000
 8007cd4:	20000000 	.word	0x20000000
 8007cd8:	431bde83 	.word	0x431bde83

08007cdc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007ce0:	4b05      	ldr	r3, [pc, #20]	; (8007cf8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	4a04      	ldr	r2, [pc, #16]	; (8007cf8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007cea:	6053      	str	r3, [r2, #4]
}
 8007cec:	bf00      	nop
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	40007000 	.word	0x40007000

08007cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b088      	sub	sp, #32
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d102      	bne.n	8007d10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	f000 bc02 	b.w	8008514 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d10:	4b96      	ldr	r3, [pc, #600]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	f003 030c 	and.w	r3, r3, #12
 8007d18:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d1a:	4b94      	ldr	r3, [pc, #592]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	f003 0303 	and.w	r3, r3, #3
 8007d22:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0310 	and.w	r3, r3, #16
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 80e4 	beq.w	8007efa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d007      	beq.n	8007d48 <HAL_RCC_OscConfig+0x4c>
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	2b0c      	cmp	r3, #12
 8007d3c:	f040 808b 	bne.w	8007e56 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	f040 8087 	bne.w	8007e56 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007d48:	4b88      	ldr	r3, [pc, #544]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 0302 	and.w	r3, r3, #2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d005      	beq.n	8007d60 <HAL_RCC_OscConfig+0x64>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e3d9      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a1a      	ldr	r2, [r3, #32]
 8007d64:	4b81      	ldr	r3, [pc, #516]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0308 	and.w	r3, r3, #8
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d004      	beq.n	8007d7a <HAL_RCC_OscConfig+0x7e>
 8007d70:	4b7e      	ldr	r3, [pc, #504]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d78:	e005      	b.n	8007d86 <HAL_RCC_OscConfig+0x8a>
 8007d7a:	4b7c      	ldr	r3, [pc, #496]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d80:	091b      	lsrs	r3, r3, #4
 8007d82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d223      	bcs.n	8007dd2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a1b      	ldr	r3, [r3, #32]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 fd54 	bl	800883c <RCC_SetFlashLatencyFromMSIRange>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e3ba      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007d9e:	4b73      	ldr	r3, [pc, #460]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a72      	ldr	r2, [pc, #456]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007da4:	f043 0308 	orr.w	r3, r3, #8
 8007da8:	6013      	str	r3, [r2, #0]
 8007daa:	4b70      	ldr	r3, [pc, #448]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	496d      	ldr	r1, [pc, #436]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007db8:	4313      	orrs	r3, r2
 8007dba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007dbc:	4b6b      	ldr	r3, [pc, #428]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	021b      	lsls	r3, r3, #8
 8007dca:	4968      	ldr	r1, [pc, #416]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	604b      	str	r3, [r1, #4]
 8007dd0:	e025      	b.n	8007e1e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007dd2:	4b66      	ldr	r3, [pc, #408]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a65      	ldr	r2, [pc, #404]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007dd8:	f043 0308 	orr.w	r3, r3, #8
 8007ddc:	6013      	str	r3, [r2, #0]
 8007dde:	4b63      	ldr	r3, [pc, #396]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	4960      	ldr	r1, [pc, #384]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007df0:	4b5e      	ldr	r3, [pc, #376]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	69db      	ldr	r3, [r3, #28]
 8007dfc:	021b      	lsls	r3, r3, #8
 8007dfe:	495b      	ldr	r1, [pc, #364]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007e00:	4313      	orrs	r3, r2
 8007e02:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d109      	bne.n	8007e1e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f000 fd14 	bl	800883c <RCC_SetFlashLatencyFromMSIRange>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e37a      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007e1e:	f000 fc81 	bl	8008724 <HAL_RCC_GetSysClockFreq>
 8007e22:	4602      	mov	r2, r0
 8007e24:	4b51      	ldr	r3, [pc, #324]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	091b      	lsrs	r3, r3, #4
 8007e2a:	f003 030f 	and.w	r3, r3, #15
 8007e2e:	4950      	ldr	r1, [pc, #320]	; (8007f70 <HAL_RCC_OscConfig+0x274>)
 8007e30:	5ccb      	ldrb	r3, [r1, r3]
 8007e32:	f003 031f 	and.w	r3, r3, #31
 8007e36:	fa22 f303 	lsr.w	r3, r2, r3
 8007e3a:	4a4e      	ldr	r2, [pc, #312]	; (8007f74 <HAL_RCC_OscConfig+0x278>)
 8007e3c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007e3e:	4b4e      	ldr	r3, [pc, #312]	; (8007f78 <HAL_RCC_OscConfig+0x27c>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fc f93e 	bl	80040c4 <HAL_InitTick>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d052      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
 8007e54:	e35e      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d032      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007e5e:	4b43      	ldr	r3, [pc, #268]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a42      	ldr	r2, [pc, #264]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007e64:	f043 0301 	orr.w	r3, r3, #1
 8007e68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007e6a:	f7fc f97b 	bl	8004164 <HAL_GetTick>
 8007e6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007e70:	e008      	b.n	8007e84 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007e72:	f7fc f977 	bl	8004164 <HAL_GetTick>
 8007e76:	4602      	mov	r2, r0
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d901      	bls.n	8007e84 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e347      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007e84:	4b39      	ldr	r3, [pc, #228]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 0302 	and.w	r3, r3, #2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d0f0      	beq.n	8007e72 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007e90:	4b36      	ldr	r3, [pc, #216]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a35      	ldr	r2, [pc, #212]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007e96:	f043 0308 	orr.w	r3, r3, #8
 8007e9a:	6013      	str	r3, [r2, #0]
 8007e9c:	4b33      	ldr	r3, [pc, #204]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a1b      	ldr	r3, [r3, #32]
 8007ea8:	4930      	ldr	r1, [pc, #192]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007eae:	4b2f      	ldr	r3, [pc, #188]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	69db      	ldr	r3, [r3, #28]
 8007eba:	021b      	lsls	r3, r3, #8
 8007ebc:	492b      	ldr	r1, [pc, #172]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	604b      	str	r3, [r1, #4]
 8007ec2:	e01a      	b.n	8007efa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007ec4:	4b29      	ldr	r3, [pc, #164]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a28      	ldr	r2, [pc, #160]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007eca:	f023 0301 	bic.w	r3, r3, #1
 8007ece:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007ed0:	f7fc f948 	bl	8004164 <HAL_GetTick>
 8007ed4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007ed6:	e008      	b.n	8007eea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007ed8:	f7fc f944 	bl	8004164 <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d901      	bls.n	8007eea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e314      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007eea:	4b20      	ldr	r3, [pc, #128]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0302 	and.w	r3, r3, #2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1f0      	bne.n	8007ed8 <HAL_RCC_OscConfig+0x1dc>
 8007ef6:	e000      	b.n	8007efa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007ef8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d073      	beq.n	8007fee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	2b08      	cmp	r3, #8
 8007f0a:	d005      	beq.n	8007f18 <HAL_RCC_OscConfig+0x21c>
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	2b0c      	cmp	r3, #12
 8007f10:	d10e      	bne.n	8007f30 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	d10b      	bne.n	8007f30 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f18:	4b14      	ldr	r3, [pc, #80]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d063      	beq.n	8007fec <HAL_RCC_OscConfig+0x2f0>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d15f      	bne.n	8007fec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e2f1      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f38:	d106      	bne.n	8007f48 <HAL_RCC_OscConfig+0x24c>
 8007f3a:	4b0c      	ldr	r3, [pc, #48]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a0b      	ldr	r2, [pc, #44]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f44:	6013      	str	r3, [r2, #0]
 8007f46:	e025      	b.n	8007f94 <HAL_RCC_OscConfig+0x298>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f50:	d114      	bne.n	8007f7c <HAL_RCC_OscConfig+0x280>
 8007f52:	4b06      	ldr	r3, [pc, #24]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a05      	ldr	r2, [pc, #20]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f5c:	6013      	str	r3, [r2, #0]
 8007f5e:	4b03      	ldr	r3, [pc, #12]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a02      	ldr	r2, [pc, #8]	; (8007f6c <HAL_RCC_OscConfig+0x270>)
 8007f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f68:	6013      	str	r3, [r2, #0]
 8007f6a:	e013      	b.n	8007f94 <HAL_RCC_OscConfig+0x298>
 8007f6c:	40021000 	.word	0x40021000
 8007f70:	0800ed3c 	.word	0x0800ed3c
 8007f74:	20000000 	.word	0x20000000
 8007f78:	20000004 	.word	0x20000004
 8007f7c:	4ba0      	ldr	r3, [pc, #640]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a9f      	ldr	r2, [pc, #636]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 8007f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f86:	6013      	str	r3, [r2, #0]
 8007f88:	4b9d      	ldr	r3, [pc, #628]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a9c      	ldr	r2, [pc, #624]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 8007f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d013      	beq.n	8007fc4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f9c:	f7fc f8e2 	bl	8004164 <HAL_GetTick>
 8007fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007fa2:	e008      	b.n	8007fb6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fa4:	f7fc f8de 	bl	8004164 <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	2b64      	cmp	r3, #100	; 0x64
 8007fb0:	d901      	bls.n	8007fb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e2ae      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007fb6:	4b92      	ldr	r3, [pc, #584]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d0f0      	beq.n	8007fa4 <HAL_RCC_OscConfig+0x2a8>
 8007fc2:	e014      	b.n	8007fee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc4:	f7fc f8ce 	bl	8004164 <HAL_GetTick>
 8007fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007fca:	e008      	b.n	8007fde <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fcc:	f7fc f8ca 	bl	8004164 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	2b64      	cmp	r3, #100	; 0x64
 8007fd8:	d901      	bls.n	8007fde <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e29a      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007fde:	4b88      	ldr	r3, [pc, #544]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1f0      	bne.n	8007fcc <HAL_RCC_OscConfig+0x2d0>
 8007fea:	e000      	b.n	8007fee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d060      	beq.n	80080bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	2b04      	cmp	r3, #4
 8007ffe:	d005      	beq.n	800800c <HAL_RCC_OscConfig+0x310>
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	2b0c      	cmp	r3, #12
 8008004:	d119      	bne.n	800803a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	2b02      	cmp	r3, #2
 800800a:	d116      	bne.n	800803a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800800c:	4b7c      	ldr	r3, [pc, #496]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008014:	2b00      	cmp	r3, #0
 8008016:	d005      	beq.n	8008024 <HAL_RCC_OscConfig+0x328>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e277      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008024:	4b76      	ldr	r3, [pc, #472]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	061b      	lsls	r3, r3, #24
 8008032:	4973      	ldr	r1, [pc, #460]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 8008034:	4313      	orrs	r3, r2
 8008036:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008038:	e040      	b.n	80080bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d023      	beq.n	800808a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008042:	4b6f      	ldr	r3, [pc, #444]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a6e      	ldr	r2, [pc, #440]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 8008048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800804c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800804e:	f7fc f889 	bl	8004164 <HAL_GetTick>
 8008052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008054:	e008      	b.n	8008068 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008056:	f7fc f885 	bl	8004164 <HAL_GetTick>
 800805a:	4602      	mov	r2, r0
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	2b02      	cmp	r3, #2
 8008062:	d901      	bls.n	8008068 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e255      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008068:	4b65      	ldr	r3, [pc, #404]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008070:	2b00      	cmp	r3, #0
 8008072:	d0f0      	beq.n	8008056 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008074:	4b62      	ldr	r3, [pc, #392]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	061b      	lsls	r3, r3, #24
 8008082:	495f      	ldr	r1, [pc, #380]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 8008084:	4313      	orrs	r3, r2
 8008086:	604b      	str	r3, [r1, #4]
 8008088:	e018      	b.n	80080bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800808a:	4b5d      	ldr	r3, [pc, #372]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a5c      	ldr	r2, [pc, #368]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 8008090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008096:	f7fc f865 	bl	8004164 <HAL_GetTick>
 800809a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800809c:	e008      	b.n	80080b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800809e:	f7fc f861 	bl	8004164 <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d901      	bls.n	80080b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e231      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80080b0:	4b53      	ldr	r3, [pc, #332]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1f0      	bne.n	800809e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0308 	and.w	r3, r3, #8
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d03c      	beq.n	8008142 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d01c      	beq.n	800810a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080d0:	4b4b      	ldr	r3, [pc, #300]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 80080d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080d6:	4a4a      	ldr	r2, [pc, #296]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 80080d8:	f043 0301 	orr.w	r3, r3, #1
 80080dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080e0:	f7fc f840 	bl	8004164 <HAL_GetTick>
 80080e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080e6:	e008      	b.n	80080fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080e8:	f7fc f83c 	bl	8004164 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d901      	bls.n	80080fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e20c      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080fa:	4b41      	ldr	r3, [pc, #260]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 80080fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008100:	f003 0302 	and.w	r3, r3, #2
 8008104:	2b00      	cmp	r3, #0
 8008106:	d0ef      	beq.n	80080e8 <HAL_RCC_OscConfig+0x3ec>
 8008108:	e01b      	b.n	8008142 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800810a:	4b3d      	ldr	r3, [pc, #244]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 800810c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008110:	4a3b      	ldr	r2, [pc, #236]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 8008112:	f023 0301 	bic.w	r3, r3, #1
 8008116:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800811a:	f7fc f823 	bl	8004164 <HAL_GetTick>
 800811e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008120:	e008      	b.n	8008134 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008122:	f7fc f81f 	bl	8004164 <HAL_GetTick>
 8008126:	4602      	mov	r2, r0
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	2b02      	cmp	r3, #2
 800812e:	d901      	bls.n	8008134 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e1ef      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008134:	4b32      	ldr	r3, [pc, #200]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 8008136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800813a:	f003 0302 	and.w	r3, r3, #2
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1ef      	bne.n	8008122 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0304 	and.w	r3, r3, #4
 800814a:	2b00      	cmp	r3, #0
 800814c:	f000 80a6 	beq.w	800829c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008150:	2300      	movs	r3, #0
 8008152:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008154:	4b2a      	ldr	r3, [pc, #168]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 8008156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10d      	bne.n	800817c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008160:	4b27      	ldr	r3, [pc, #156]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 8008162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008164:	4a26      	ldr	r2, [pc, #152]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 8008166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800816a:	6593      	str	r3, [r2, #88]	; 0x58
 800816c:	4b24      	ldr	r3, [pc, #144]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 800816e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008174:	60bb      	str	r3, [r7, #8]
 8008176:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008178:	2301      	movs	r3, #1
 800817a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800817c:	4b21      	ldr	r3, [pc, #132]	; (8008204 <HAL_RCC_OscConfig+0x508>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008184:	2b00      	cmp	r3, #0
 8008186:	d118      	bne.n	80081ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008188:	4b1e      	ldr	r3, [pc, #120]	; (8008204 <HAL_RCC_OscConfig+0x508>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a1d      	ldr	r2, [pc, #116]	; (8008204 <HAL_RCC_OscConfig+0x508>)
 800818e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008192:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008194:	f7fb ffe6 	bl	8004164 <HAL_GetTick>
 8008198:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800819a:	e008      	b.n	80081ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800819c:	f7fb ffe2 	bl	8004164 <HAL_GetTick>
 80081a0:	4602      	mov	r2, r0
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d901      	bls.n	80081ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80081aa:	2303      	movs	r3, #3
 80081ac:	e1b2      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081ae:	4b15      	ldr	r3, [pc, #84]	; (8008204 <HAL_RCC_OscConfig+0x508>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d0f0      	beq.n	800819c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d108      	bne.n	80081d4 <HAL_RCC_OscConfig+0x4d8>
 80081c2:	4b0f      	ldr	r3, [pc, #60]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 80081c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c8:	4a0d      	ldr	r2, [pc, #52]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 80081ca:	f043 0301 	orr.w	r3, r3, #1
 80081ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80081d2:	e029      	b.n	8008228 <HAL_RCC_OscConfig+0x52c>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	2b05      	cmp	r3, #5
 80081da:	d115      	bne.n	8008208 <HAL_RCC_OscConfig+0x50c>
 80081dc:	4b08      	ldr	r3, [pc, #32]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 80081de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081e2:	4a07      	ldr	r2, [pc, #28]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 80081e4:	f043 0304 	orr.w	r3, r3, #4
 80081e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80081ec:	4b04      	ldr	r3, [pc, #16]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 80081ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081f2:	4a03      	ldr	r2, [pc, #12]	; (8008200 <HAL_RCC_OscConfig+0x504>)
 80081f4:	f043 0301 	orr.w	r3, r3, #1
 80081f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80081fc:	e014      	b.n	8008228 <HAL_RCC_OscConfig+0x52c>
 80081fe:	bf00      	nop
 8008200:	40021000 	.word	0x40021000
 8008204:	40007000 	.word	0x40007000
 8008208:	4b9a      	ldr	r3, [pc, #616]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 800820a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800820e:	4a99      	ldr	r2, [pc, #612]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 8008210:	f023 0301 	bic.w	r3, r3, #1
 8008214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008218:	4b96      	ldr	r3, [pc, #600]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 800821a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800821e:	4a95      	ldr	r2, [pc, #596]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 8008220:	f023 0304 	bic.w	r3, r3, #4
 8008224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d016      	beq.n	800825e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008230:	f7fb ff98 	bl	8004164 <HAL_GetTick>
 8008234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008236:	e00a      	b.n	800824e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008238:	f7fb ff94 	bl	8004164 <HAL_GetTick>
 800823c:	4602      	mov	r2, r0
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	f241 3288 	movw	r2, #5000	; 0x1388
 8008246:	4293      	cmp	r3, r2
 8008248:	d901      	bls.n	800824e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e162      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800824e:	4b89      	ldr	r3, [pc, #548]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 8008250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008254:	f003 0302 	and.w	r3, r3, #2
 8008258:	2b00      	cmp	r3, #0
 800825a:	d0ed      	beq.n	8008238 <HAL_RCC_OscConfig+0x53c>
 800825c:	e015      	b.n	800828a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800825e:	f7fb ff81 	bl	8004164 <HAL_GetTick>
 8008262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008264:	e00a      	b.n	800827c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008266:	f7fb ff7d 	bl	8004164 <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	f241 3288 	movw	r2, #5000	; 0x1388
 8008274:	4293      	cmp	r3, r2
 8008276:	d901      	bls.n	800827c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	e14b      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800827c:	4b7d      	ldr	r3, [pc, #500]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 800827e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1ed      	bne.n	8008266 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800828a:	7ffb      	ldrb	r3, [r7, #31]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d105      	bne.n	800829c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008290:	4b78      	ldr	r3, [pc, #480]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 8008292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008294:	4a77      	ldr	r2, [pc, #476]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 8008296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800829a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 0320 	and.w	r3, r3, #32
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d03c      	beq.n	8008322 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d01c      	beq.n	80082ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80082b0:	4b70      	ldr	r3, [pc, #448]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 80082b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082b6:	4a6f      	ldr	r2, [pc, #444]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 80082b8:	f043 0301 	orr.w	r3, r3, #1
 80082bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082c0:	f7fb ff50 	bl	8004164 <HAL_GetTick>
 80082c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80082c6:	e008      	b.n	80082da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082c8:	f7fb ff4c 	bl	8004164 <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d901      	bls.n	80082da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e11c      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80082da:	4b66      	ldr	r3, [pc, #408]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 80082dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082e0:	f003 0302 	and.w	r3, r3, #2
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d0ef      	beq.n	80082c8 <HAL_RCC_OscConfig+0x5cc>
 80082e8:	e01b      	b.n	8008322 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80082ea:	4b62      	ldr	r3, [pc, #392]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 80082ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082f0:	4a60      	ldr	r2, [pc, #384]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 80082f2:	f023 0301 	bic.w	r3, r3, #1
 80082f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082fa:	f7fb ff33 	bl	8004164 <HAL_GetTick>
 80082fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008300:	e008      	b.n	8008314 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008302:	f7fb ff2f 	bl	8004164 <HAL_GetTick>
 8008306:	4602      	mov	r2, r0
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	2b02      	cmp	r3, #2
 800830e:	d901      	bls.n	8008314 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	e0ff      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008314:	4b57      	ldr	r3, [pc, #348]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 8008316:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1ef      	bne.n	8008302 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008326:	2b00      	cmp	r3, #0
 8008328:	f000 80f3 	beq.w	8008512 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008330:	2b02      	cmp	r3, #2
 8008332:	f040 80c9 	bne.w	80084c8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008336:	4b4f      	ldr	r3, [pc, #316]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	f003 0203 	and.w	r2, r3, #3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008346:	429a      	cmp	r2, r3
 8008348:	d12c      	bne.n	80083a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008354:	3b01      	subs	r3, #1
 8008356:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008358:	429a      	cmp	r2, r3
 800835a:	d123      	bne.n	80083a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008366:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008368:	429a      	cmp	r2, r3
 800836a:	d11b      	bne.n	80083a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008376:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008378:	429a      	cmp	r2, r3
 800837a:	d113      	bne.n	80083a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008386:	085b      	lsrs	r3, r3, #1
 8008388:	3b01      	subs	r3, #1
 800838a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800838c:	429a      	cmp	r2, r3
 800838e:	d109      	bne.n	80083a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839a:	085b      	lsrs	r3, r3, #1
 800839c:	3b01      	subs	r3, #1
 800839e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d06b      	beq.n	800847c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	2b0c      	cmp	r3, #12
 80083a8:	d062      	beq.n	8008470 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80083aa:	4b32      	ldr	r3, [pc, #200]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e0ac      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80083ba:	4b2e      	ldr	r3, [pc, #184]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a2d      	ldr	r2, [pc, #180]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 80083c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80083c6:	f7fb fecd 	bl	8004164 <HAL_GetTick>
 80083ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083cc:	e008      	b.n	80083e0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083ce:	f7fb fec9 	bl	8004164 <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d901      	bls.n	80083e0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e099      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083e0:	4b24      	ldr	r3, [pc, #144]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1f0      	bne.n	80083ce <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80083ec:	4b21      	ldr	r3, [pc, #132]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 80083ee:	68da      	ldr	r2, [r3, #12]
 80083f0:	4b21      	ldr	r3, [pc, #132]	; (8008478 <HAL_RCC_OscConfig+0x77c>)
 80083f2:	4013      	ands	r3, r2
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80083fc:	3a01      	subs	r2, #1
 80083fe:	0112      	lsls	r2, r2, #4
 8008400:	4311      	orrs	r1, r2
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008406:	0212      	lsls	r2, r2, #8
 8008408:	4311      	orrs	r1, r2
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800840e:	0852      	lsrs	r2, r2, #1
 8008410:	3a01      	subs	r2, #1
 8008412:	0552      	lsls	r2, r2, #21
 8008414:	4311      	orrs	r1, r2
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800841a:	0852      	lsrs	r2, r2, #1
 800841c:	3a01      	subs	r2, #1
 800841e:	0652      	lsls	r2, r2, #25
 8008420:	4311      	orrs	r1, r2
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008426:	06d2      	lsls	r2, r2, #27
 8008428:	430a      	orrs	r2, r1
 800842a:	4912      	ldr	r1, [pc, #72]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 800842c:	4313      	orrs	r3, r2
 800842e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008430:	4b10      	ldr	r3, [pc, #64]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a0f      	ldr	r2, [pc, #60]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 8008436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800843a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800843c:	4b0d      	ldr	r3, [pc, #52]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	4a0c      	ldr	r2, [pc, #48]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 8008442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008446:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008448:	f7fb fe8c 	bl	8004164 <HAL_GetTick>
 800844c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800844e:	e008      	b.n	8008462 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008450:	f7fb fe88 	bl	8004164 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	2b02      	cmp	r3, #2
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e058      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008462:	4b04      	ldr	r3, [pc, #16]	; (8008474 <HAL_RCC_OscConfig+0x778>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0f0      	beq.n	8008450 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800846e:	e050      	b.n	8008512 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e04f      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
 8008474:	40021000 	.word	0x40021000
 8008478:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800847c:	4b27      	ldr	r3, [pc, #156]	; (800851c <HAL_RCC_OscConfig+0x820>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d144      	bne.n	8008512 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008488:	4b24      	ldr	r3, [pc, #144]	; (800851c <HAL_RCC_OscConfig+0x820>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a23      	ldr	r2, [pc, #140]	; (800851c <HAL_RCC_OscConfig+0x820>)
 800848e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008492:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008494:	4b21      	ldr	r3, [pc, #132]	; (800851c <HAL_RCC_OscConfig+0x820>)
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	4a20      	ldr	r2, [pc, #128]	; (800851c <HAL_RCC_OscConfig+0x820>)
 800849a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800849e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80084a0:	f7fb fe60 	bl	8004164 <HAL_GetTick>
 80084a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084a6:	e008      	b.n	80084ba <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084a8:	f7fb fe5c 	bl	8004164 <HAL_GetTick>
 80084ac:	4602      	mov	r2, r0
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d901      	bls.n	80084ba <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e02c      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084ba:	4b18      	ldr	r3, [pc, #96]	; (800851c <HAL_RCC_OscConfig+0x820>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d0f0      	beq.n	80084a8 <HAL_RCC_OscConfig+0x7ac>
 80084c6:	e024      	b.n	8008512 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	2b0c      	cmp	r3, #12
 80084cc:	d01f      	beq.n	800850e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084ce:	4b13      	ldr	r3, [pc, #76]	; (800851c <HAL_RCC_OscConfig+0x820>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a12      	ldr	r2, [pc, #72]	; (800851c <HAL_RCC_OscConfig+0x820>)
 80084d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084da:	f7fb fe43 	bl	8004164 <HAL_GetTick>
 80084de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084e0:	e008      	b.n	80084f4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084e2:	f7fb fe3f 	bl	8004164 <HAL_GetTick>
 80084e6:	4602      	mov	r2, r0
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d901      	bls.n	80084f4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e00f      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084f4:	4b09      	ldr	r3, [pc, #36]	; (800851c <HAL_RCC_OscConfig+0x820>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1f0      	bne.n	80084e2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8008500:	4b06      	ldr	r3, [pc, #24]	; (800851c <HAL_RCC_OscConfig+0x820>)
 8008502:	68da      	ldr	r2, [r3, #12]
 8008504:	4905      	ldr	r1, [pc, #20]	; (800851c <HAL_RCC_OscConfig+0x820>)
 8008506:	4b06      	ldr	r3, [pc, #24]	; (8008520 <HAL_RCC_OscConfig+0x824>)
 8008508:	4013      	ands	r3, r2
 800850a:	60cb      	str	r3, [r1, #12]
 800850c:	e001      	b.n	8008512 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e000      	b.n	8008514 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3720      	adds	r7, #32
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	40021000 	.word	0x40021000
 8008520:	feeefffc 	.word	0xfeeefffc

08008524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e0e7      	b.n	8008708 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008538:	4b75      	ldr	r3, [pc, #468]	; (8008710 <HAL_RCC_ClockConfig+0x1ec>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 0307 	and.w	r3, r3, #7
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	429a      	cmp	r2, r3
 8008544:	d910      	bls.n	8008568 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008546:	4b72      	ldr	r3, [pc, #456]	; (8008710 <HAL_RCC_ClockConfig+0x1ec>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f023 0207 	bic.w	r2, r3, #7
 800854e:	4970      	ldr	r1, [pc, #448]	; (8008710 <HAL_RCC_ClockConfig+0x1ec>)
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	4313      	orrs	r3, r2
 8008554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008556:	4b6e      	ldr	r3, [pc, #440]	; (8008710 <HAL_RCC_ClockConfig+0x1ec>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0307 	and.w	r3, r3, #7
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	429a      	cmp	r2, r3
 8008562:	d001      	beq.n	8008568 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e0cf      	b.n	8008708 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0302 	and.w	r3, r3, #2
 8008570:	2b00      	cmp	r3, #0
 8008572:	d010      	beq.n	8008596 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	4b66      	ldr	r3, [pc, #408]	; (8008714 <HAL_RCC_ClockConfig+0x1f0>)
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008580:	429a      	cmp	r2, r3
 8008582:	d908      	bls.n	8008596 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008584:	4b63      	ldr	r3, [pc, #396]	; (8008714 <HAL_RCC_ClockConfig+0x1f0>)
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	4960      	ldr	r1, [pc, #384]	; (8008714 <HAL_RCC_ClockConfig+0x1f0>)
 8008592:	4313      	orrs	r3, r2
 8008594:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d04c      	beq.n	800863c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	2b03      	cmp	r3, #3
 80085a8:	d107      	bne.n	80085ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80085aa:	4b5a      	ldr	r3, [pc, #360]	; (8008714 <HAL_RCC_ClockConfig+0x1f0>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d121      	bne.n	80085fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e0a6      	b.n	8008708 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d107      	bne.n	80085d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80085c2:	4b54      	ldr	r3, [pc, #336]	; (8008714 <HAL_RCC_ClockConfig+0x1f0>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d115      	bne.n	80085fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e09a      	b.n	8008708 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d107      	bne.n	80085ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80085da:	4b4e      	ldr	r3, [pc, #312]	; (8008714 <HAL_RCC_ClockConfig+0x1f0>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0302 	and.w	r3, r3, #2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d109      	bne.n	80085fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e08e      	b.n	8008708 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80085ea:	4b4a      	ldr	r3, [pc, #296]	; (8008714 <HAL_RCC_ClockConfig+0x1f0>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e086      	b.n	8008708 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80085fa:	4b46      	ldr	r3, [pc, #280]	; (8008714 <HAL_RCC_ClockConfig+0x1f0>)
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	f023 0203 	bic.w	r2, r3, #3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	4943      	ldr	r1, [pc, #268]	; (8008714 <HAL_RCC_ClockConfig+0x1f0>)
 8008608:	4313      	orrs	r3, r2
 800860a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800860c:	f7fb fdaa 	bl	8004164 <HAL_GetTick>
 8008610:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008612:	e00a      	b.n	800862a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008614:	f7fb fda6 	bl	8004164 <HAL_GetTick>
 8008618:	4602      	mov	r2, r0
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	1ad3      	subs	r3, r2, r3
 800861e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008622:	4293      	cmp	r3, r2
 8008624:	d901      	bls.n	800862a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e06e      	b.n	8008708 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800862a:	4b3a      	ldr	r3, [pc, #232]	; (8008714 <HAL_RCC_ClockConfig+0x1f0>)
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f003 020c 	and.w	r2, r3, #12
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	429a      	cmp	r2, r3
 800863a:	d1eb      	bne.n	8008614 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0302 	and.w	r3, r3, #2
 8008644:	2b00      	cmp	r3, #0
 8008646:	d010      	beq.n	800866a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	689a      	ldr	r2, [r3, #8]
 800864c:	4b31      	ldr	r3, [pc, #196]	; (8008714 <HAL_RCC_ClockConfig+0x1f0>)
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008654:	429a      	cmp	r2, r3
 8008656:	d208      	bcs.n	800866a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008658:	4b2e      	ldr	r3, [pc, #184]	; (8008714 <HAL_RCC_ClockConfig+0x1f0>)
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	492b      	ldr	r1, [pc, #172]	; (8008714 <HAL_RCC_ClockConfig+0x1f0>)
 8008666:	4313      	orrs	r3, r2
 8008668:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800866a:	4b29      	ldr	r3, [pc, #164]	; (8008710 <HAL_RCC_ClockConfig+0x1ec>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0307 	and.w	r3, r3, #7
 8008672:	683a      	ldr	r2, [r7, #0]
 8008674:	429a      	cmp	r2, r3
 8008676:	d210      	bcs.n	800869a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008678:	4b25      	ldr	r3, [pc, #148]	; (8008710 <HAL_RCC_ClockConfig+0x1ec>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f023 0207 	bic.w	r2, r3, #7
 8008680:	4923      	ldr	r1, [pc, #140]	; (8008710 <HAL_RCC_ClockConfig+0x1ec>)
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	4313      	orrs	r3, r2
 8008686:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008688:	4b21      	ldr	r3, [pc, #132]	; (8008710 <HAL_RCC_ClockConfig+0x1ec>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0307 	and.w	r3, r3, #7
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	429a      	cmp	r2, r3
 8008694:	d001      	beq.n	800869a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e036      	b.n	8008708 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0304 	and.w	r3, r3, #4
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d008      	beq.n	80086b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086a6:	4b1b      	ldr	r3, [pc, #108]	; (8008714 <HAL_RCC_ClockConfig+0x1f0>)
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	4918      	ldr	r1, [pc, #96]	; (8008714 <HAL_RCC_ClockConfig+0x1f0>)
 80086b4:	4313      	orrs	r3, r2
 80086b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 0308 	and.w	r3, r3, #8
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d009      	beq.n	80086d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80086c4:	4b13      	ldr	r3, [pc, #76]	; (8008714 <HAL_RCC_ClockConfig+0x1f0>)
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	00db      	lsls	r3, r3, #3
 80086d2:	4910      	ldr	r1, [pc, #64]	; (8008714 <HAL_RCC_ClockConfig+0x1f0>)
 80086d4:	4313      	orrs	r3, r2
 80086d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80086d8:	f000 f824 	bl	8008724 <HAL_RCC_GetSysClockFreq>
 80086dc:	4602      	mov	r2, r0
 80086de:	4b0d      	ldr	r3, [pc, #52]	; (8008714 <HAL_RCC_ClockConfig+0x1f0>)
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	091b      	lsrs	r3, r3, #4
 80086e4:	f003 030f 	and.w	r3, r3, #15
 80086e8:	490b      	ldr	r1, [pc, #44]	; (8008718 <HAL_RCC_ClockConfig+0x1f4>)
 80086ea:	5ccb      	ldrb	r3, [r1, r3]
 80086ec:	f003 031f 	and.w	r3, r3, #31
 80086f0:	fa22 f303 	lsr.w	r3, r2, r3
 80086f4:	4a09      	ldr	r2, [pc, #36]	; (800871c <HAL_RCC_ClockConfig+0x1f8>)
 80086f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80086f8:	4b09      	ldr	r3, [pc, #36]	; (8008720 <HAL_RCC_ClockConfig+0x1fc>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fb fce1 	bl	80040c4 <HAL_InitTick>
 8008702:	4603      	mov	r3, r0
 8008704:	72fb      	strb	r3, [r7, #11]

  return status;
 8008706:	7afb      	ldrb	r3, [r7, #11]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	40022000 	.word	0x40022000
 8008714:	40021000 	.word	0x40021000
 8008718:	0800ed3c 	.word	0x0800ed3c
 800871c:	20000000 	.word	0x20000000
 8008720:	20000004 	.word	0x20000004

08008724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008724:	b480      	push	{r7}
 8008726:	b089      	sub	sp, #36	; 0x24
 8008728:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800872a:	2300      	movs	r3, #0
 800872c:	61fb      	str	r3, [r7, #28]
 800872e:	2300      	movs	r3, #0
 8008730:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008732:	4b3e      	ldr	r3, [pc, #248]	; (800882c <HAL_RCC_GetSysClockFreq+0x108>)
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f003 030c 	and.w	r3, r3, #12
 800873a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800873c:	4b3b      	ldr	r3, [pc, #236]	; (800882c <HAL_RCC_GetSysClockFreq+0x108>)
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	f003 0303 	and.w	r3, r3, #3
 8008744:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d005      	beq.n	8008758 <HAL_RCC_GetSysClockFreq+0x34>
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	2b0c      	cmp	r3, #12
 8008750:	d121      	bne.n	8008796 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d11e      	bne.n	8008796 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008758:	4b34      	ldr	r3, [pc, #208]	; (800882c <HAL_RCC_GetSysClockFreq+0x108>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0308 	and.w	r3, r3, #8
 8008760:	2b00      	cmp	r3, #0
 8008762:	d107      	bne.n	8008774 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008764:	4b31      	ldr	r3, [pc, #196]	; (800882c <HAL_RCC_GetSysClockFreq+0x108>)
 8008766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800876a:	0a1b      	lsrs	r3, r3, #8
 800876c:	f003 030f 	and.w	r3, r3, #15
 8008770:	61fb      	str	r3, [r7, #28]
 8008772:	e005      	b.n	8008780 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008774:	4b2d      	ldr	r3, [pc, #180]	; (800882c <HAL_RCC_GetSysClockFreq+0x108>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	091b      	lsrs	r3, r3, #4
 800877a:	f003 030f 	and.w	r3, r3, #15
 800877e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008780:	4a2b      	ldr	r2, [pc, #172]	; (8008830 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008788:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10d      	bne.n	80087ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008794:	e00a      	b.n	80087ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	2b04      	cmp	r3, #4
 800879a:	d102      	bne.n	80087a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800879c:	4b25      	ldr	r3, [pc, #148]	; (8008834 <HAL_RCC_GetSysClockFreq+0x110>)
 800879e:	61bb      	str	r3, [r7, #24]
 80087a0:	e004      	b.n	80087ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	2b08      	cmp	r3, #8
 80087a6:	d101      	bne.n	80087ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80087a8:	4b23      	ldr	r3, [pc, #140]	; (8008838 <HAL_RCC_GetSysClockFreq+0x114>)
 80087aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	2b0c      	cmp	r3, #12
 80087b0:	d134      	bne.n	800881c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80087b2:	4b1e      	ldr	r3, [pc, #120]	; (800882c <HAL_RCC_GetSysClockFreq+0x108>)
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	f003 0303 	and.w	r3, r3, #3
 80087ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d003      	beq.n	80087ca <HAL_RCC_GetSysClockFreq+0xa6>
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	2b03      	cmp	r3, #3
 80087c6:	d003      	beq.n	80087d0 <HAL_RCC_GetSysClockFreq+0xac>
 80087c8:	e005      	b.n	80087d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80087ca:	4b1a      	ldr	r3, [pc, #104]	; (8008834 <HAL_RCC_GetSysClockFreq+0x110>)
 80087cc:	617b      	str	r3, [r7, #20]
      break;
 80087ce:	e005      	b.n	80087dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80087d0:	4b19      	ldr	r3, [pc, #100]	; (8008838 <HAL_RCC_GetSysClockFreq+0x114>)
 80087d2:	617b      	str	r3, [r7, #20]
      break;
 80087d4:	e002      	b.n	80087dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	617b      	str	r3, [r7, #20]
      break;
 80087da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80087dc:	4b13      	ldr	r3, [pc, #76]	; (800882c <HAL_RCC_GetSysClockFreq+0x108>)
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	091b      	lsrs	r3, r3, #4
 80087e2:	f003 0307 	and.w	r3, r3, #7
 80087e6:	3301      	adds	r3, #1
 80087e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80087ea:	4b10      	ldr	r3, [pc, #64]	; (800882c <HAL_RCC_GetSysClockFreq+0x108>)
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	0a1b      	lsrs	r3, r3, #8
 80087f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	fb03 f202 	mul.w	r2, r3, r2
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008800:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008802:	4b0a      	ldr	r3, [pc, #40]	; (800882c <HAL_RCC_GetSysClockFreq+0x108>)
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	0e5b      	lsrs	r3, r3, #25
 8008808:	f003 0303 	and.w	r3, r3, #3
 800880c:	3301      	adds	r3, #1
 800880e:	005b      	lsls	r3, r3, #1
 8008810:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	fbb2 f3f3 	udiv	r3, r2, r3
 800881a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800881c:	69bb      	ldr	r3, [r7, #24]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3724      	adds	r7, #36	; 0x24
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	40021000 	.word	0x40021000
 8008830:	0800ed4c 	.word	0x0800ed4c
 8008834:	00f42400 	.word	0x00f42400
 8008838:	007a1200 	.word	0x007a1200

0800883c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008844:	2300      	movs	r3, #0
 8008846:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008848:	4b2a      	ldr	r3, [pc, #168]	; (80088f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800884a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800884c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d003      	beq.n	800885c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008854:	f7ff f9de 	bl	8007c14 <HAL_PWREx_GetVoltageRange>
 8008858:	6178      	str	r0, [r7, #20]
 800885a:	e014      	b.n	8008886 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800885c:	4b25      	ldr	r3, [pc, #148]	; (80088f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800885e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008860:	4a24      	ldr	r2, [pc, #144]	; (80088f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008866:	6593      	str	r3, [r2, #88]	; 0x58
 8008868:	4b22      	ldr	r3, [pc, #136]	; (80088f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800886a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800886c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008870:	60fb      	str	r3, [r7, #12]
 8008872:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008874:	f7ff f9ce 	bl	8007c14 <HAL_PWREx_GetVoltageRange>
 8008878:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800887a:	4b1e      	ldr	r3, [pc, #120]	; (80088f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800887c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800887e:	4a1d      	ldr	r2, [pc, #116]	; (80088f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008884:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800888c:	d10b      	bne.n	80088a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b80      	cmp	r3, #128	; 0x80
 8008892:	d919      	bls.n	80088c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2ba0      	cmp	r3, #160	; 0xa0
 8008898:	d902      	bls.n	80088a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800889a:	2302      	movs	r3, #2
 800889c:	613b      	str	r3, [r7, #16]
 800889e:	e013      	b.n	80088c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80088a0:	2301      	movs	r3, #1
 80088a2:	613b      	str	r3, [r7, #16]
 80088a4:	e010      	b.n	80088c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2b80      	cmp	r3, #128	; 0x80
 80088aa:	d902      	bls.n	80088b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80088ac:	2303      	movs	r3, #3
 80088ae:	613b      	str	r3, [r7, #16]
 80088b0:	e00a      	b.n	80088c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b80      	cmp	r3, #128	; 0x80
 80088b6:	d102      	bne.n	80088be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80088b8:	2302      	movs	r3, #2
 80088ba:	613b      	str	r3, [r7, #16]
 80088bc:	e004      	b.n	80088c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b70      	cmp	r3, #112	; 0x70
 80088c2:	d101      	bne.n	80088c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80088c4:	2301      	movs	r3, #1
 80088c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80088c8:	4b0b      	ldr	r3, [pc, #44]	; (80088f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f023 0207 	bic.w	r2, r3, #7
 80088d0:	4909      	ldr	r1, [pc, #36]	; (80088f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80088d8:	4b07      	ldr	r3, [pc, #28]	; (80088f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0307 	and.w	r3, r3, #7
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d001      	beq.n	80088ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e000      	b.n	80088ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	40021000 	.word	0x40021000
 80088f8:	40022000 	.word	0x40022000

080088fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008904:	2300      	movs	r3, #0
 8008906:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008908:	2300      	movs	r3, #0
 800890a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008914:	2b00      	cmp	r3, #0
 8008916:	d031      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800891c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008920:	d01a      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8008922:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008926:	d814      	bhi.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008928:	2b00      	cmp	r3, #0
 800892a:	d009      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800892c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008930:	d10f      	bne.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8008932:	4b5d      	ldr	r3, [pc, #372]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	4a5c      	ldr	r2, [pc, #368]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800893c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800893e:	e00c      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	3304      	adds	r3, #4
 8008944:	2100      	movs	r1, #0
 8008946:	4618      	mov	r0, r3
 8008948:	f000 fa22 	bl	8008d90 <RCCEx_PLLSAI1_Config>
 800894c:	4603      	mov	r3, r0
 800894e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008950:	e003      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	74fb      	strb	r3, [r7, #19]
      break;
 8008956:	e000      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8008958:	bf00      	nop
    }

    if(ret == HAL_OK)
 800895a:	7cfb      	ldrb	r3, [r7, #19]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10b      	bne.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008960:	4b51      	ldr	r3, [pc, #324]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008966:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800896e:	494e      	ldr	r1, [pc, #312]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008970:	4313      	orrs	r3, r2
 8008972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008976:	e001      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008978:	7cfb      	ldrb	r3, [r7, #19]
 800897a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008984:	2b00      	cmp	r3, #0
 8008986:	f000 809e 	beq.w	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800898a:	2300      	movs	r3, #0
 800898c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800898e:	4b46      	ldr	r3, [pc, #280]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800899a:	2301      	movs	r3, #1
 800899c:	e000      	b.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800899e:	2300      	movs	r3, #0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00d      	beq.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089a4:	4b40      	ldr	r3, [pc, #256]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80089a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089a8:	4a3f      	ldr	r2, [pc, #252]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80089aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089ae:	6593      	str	r3, [r2, #88]	; 0x58
 80089b0:	4b3d      	ldr	r3, [pc, #244]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80089b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089b8:	60bb      	str	r3, [r7, #8]
 80089ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089bc:	2301      	movs	r3, #1
 80089be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089c0:	4b3a      	ldr	r3, [pc, #232]	; (8008aac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a39      	ldr	r2, [pc, #228]	; (8008aac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80089c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80089cc:	f7fb fbca 	bl	8004164 <HAL_GetTick>
 80089d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80089d2:	e009      	b.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089d4:	f7fb fbc6 	bl	8004164 <HAL_GetTick>
 80089d8:	4602      	mov	r2, r0
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d902      	bls.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80089e2:	2303      	movs	r3, #3
 80089e4:	74fb      	strb	r3, [r7, #19]
        break;
 80089e6:	e005      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80089e8:	4b30      	ldr	r3, [pc, #192]	; (8008aac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d0ef      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80089f4:	7cfb      	ldrb	r3, [r7, #19]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d15a      	bne.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80089fa:	4b2b      	ldr	r3, [pc, #172]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80089fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d01e      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d019      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008a16:	4b24      	ldr	r3, [pc, #144]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a20:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008a22:	4b21      	ldr	r3, [pc, #132]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a28:	4a1f      	ldr	r2, [pc, #124]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008a32:	4b1d      	ldr	r3, [pc, #116]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a38:	4a1b      	ldr	r2, [pc, #108]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008a42:	4a19      	ldr	r2, [pc, #100]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d016      	beq.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a54:	f7fb fb86 	bl	8004164 <HAL_GetTick>
 8008a58:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a5a:	e00b      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a5c:	f7fb fb82 	bl	8004164 <HAL_GetTick>
 8008a60:	4602      	mov	r2, r0
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d902      	bls.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	74fb      	strb	r3, [r7, #19]
            break;
 8008a72:	e006      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a74:	4b0c      	ldr	r3, [pc, #48]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a7a:	f003 0302 	and.w	r3, r3, #2
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d0ec      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008a82:	7cfb      	ldrb	r3, [r7, #19]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10b      	bne.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a88:	4b07      	ldr	r3, [pc, #28]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a96:	4904      	ldr	r1, [pc, #16]	; (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008a9e:	e009      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008aa0:	7cfb      	ldrb	r3, [r7, #19]
 8008aa2:	74bb      	strb	r3, [r7, #18]
 8008aa4:	e006      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008aa6:	bf00      	nop
 8008aa8:	40021000 	.word	0x40021000
 8008aac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab0:	7cfb      	ldrb	r3, [r7, #19]
 8008ab2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ab4:	7c7b      	ldrb	r3, [r7, #17]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d105      	bne.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008aba:	4b8d      	ldr	r3, [pc, #564]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008abe:	4a8c      	ldr	r2, [pc, #560]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ac4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00a      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008ad2:	4b87      	ldr	r3, [pc, #540]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ad8:	f023 0203 	bic.w	r2, r3, #3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	4983      	ldr	r1, [pc, #524]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 0302 	and.w	r3, r3, #2
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00a      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008af4:	4b7e      	ldr	r3, [pc, #504]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008afa:	f023 020c 	bic.w	r2, r3, #12
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b02:	497b      	ldr	r1, [pc, #492]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b04:	4313      	orrs	r3, r2
 8008b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0304 	and.w	r3, r3, #4
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00a      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008b16:	4b76      	ldr	r3, [pc, #472]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b24:	4972      	ldr	r1, [pc, #456]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b26:	4313      	orrs	r3, r2
 8008b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0320 	and.w	r3, r3, #32
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00a      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b38:	4b6d      	ldr	r3, [pc, #436]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b46:	496a      	ldr	r1, [pc, #424]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00a      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b5a:	4b65      	ldr	r3, [pc, #404]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b68:	4961      	ldr	r1, [pc, #388]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00a      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008b7c:	4b5c      	ldr	r3, [pc, #368]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8a:	4959      	ldr	r1, [pc, #356]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00a      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b9e:	4b54      	ldr	r3, [pc, #336]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ba4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bac:	4950      	ldr	r1, [pc, #320]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00a      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008bc0:	4b4b      	ldr	r3, [pc, #300]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bc6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bce:	4948      	ldr	r1, [pc, #288]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00a      	beq.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008be2:	4b43      	ldr	r3, [pc, #268]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008be8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf0:	493f      	ldr	r1, [pc, #252]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d028      	beq.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c04:	4b3a      	ldr	r3, [pc, #232]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c12:	4937      	ldr	r1, [pc, #220]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008c14:	4313      	orrs	r3, r2
 8008c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c22:	d106      	bne.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c24:	4b32      	ldr	r3, [pc, #200]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	4a31      	ldr	r2, [pc, #196]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008c2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c2e:	60d3      	str	r3, [r2, #12]
 8008c30:	e011      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c3a:	d10c      	bne.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	3304      	adds	r3, #4
 8008c40:	2101      	movs	r1, #1
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 f8a4 	bl	8008d90 <RCCEx_PLLSAI1_Config>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008c4c:	7cfb      	ldrb	r3, [r7, #19]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d001      	beq.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8008c52:	7cfb      	ldrb	r3, [r7, #19]
 8008c54:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d028      	beq.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008c62:	4b23      	ldr	r3, [pc, #140]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c70:	491f      	ldr	r1, [pc, #124]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008c72:	4313      	orrs	r3, r2
 8008c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c80:	d106      	bne.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c82:	4b1b      	ldr	r3, [pc, #108]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	4a1a      	ldr	r2, [pc, #104]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008c88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c8c:	60d3      	str	r3, [r2, #12]
 8008c8e:	e011      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c98:	d10c      	bne.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3304      	adds	r3, #4
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 f875 	bl	8008d90 <RCCEx_PLLSAI1_Config>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008caa:	7cfb      	ldrb	r3, [r7, #19]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d001      	beq.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8008cb0:	7cfb      	ldrb	r3, [r7, #19]
 8008cb2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d02b      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008cc0:	4b0b      	ldr	r3, [pc, #44]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cce:	4908      	ldr	r1, [pc, #32]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cde:	d109      	bne.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ce0:	4b03      	ldr	r3, [pc, #12]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	4a02      	ldr	r2, [pc, #8]	; (8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cea:	60d3      	str	r3, [r2, #12]
 8008cec:	e014      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008cee:	bf00      	nop
 8008cf0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008cfc:	d10c      	bne.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	3304      	adds	r3, #4
 8008d02:	2101      	movs	r1, #1
 8008d04:	4618      	mov	r0, r3
 8008d06:	f000 f843 	bl	8008d90 <RCCEx_PLLSAI1_Config>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008d0e:	7cfb      	ldrb	r3, [r7, #19]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d001      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8008d14:	7cfb      	ldrb	r3, [r7, #19]
 8008d16:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d01c      	beq.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008d24:	4b19      	ldr	r3, [pc, #100]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d32:	4916      	ldr	r1, [pc, #88]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d42:	d10c      	bne.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3304      	adds	r3, #4
 8008d48:	2102      	movs	r1, #2
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 f820 	bl	8008d90 <RCCEx_PLLSAI1_Config>
 8008d50:	4603      	mov	r3, r0
 8008d52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008d54:	7cfb      	ldrb	r3, [r7, #19]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8008d5a:	7cfb      	ldrb	r3, [r7, #19]
 8008d5c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00a      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008d6a:	4b08      	ldr	r3, [pc, #32]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d70:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d78:	4904      	ldr	r1, [pc, #16]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008d80:	7cbb      	ldrb	r3, [r7, #18]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3718      	adds	r7, #24
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	40021000 	.word	0x40021000

08008d90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008d9e:	4b74      	ldr	r3, [pc, #464]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	f003 0303 	and.w	r3, r3, #3
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d018      	beq.n	8008ddc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008daa:	4b71      	ldr	r3, [pc, #452]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	f003 0203 	and.w	r2, r3, #3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d10d      	bne.n	8008dd6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
       ||
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d009      	beq.n	8008dd6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008dc2:	4b6b      	ldr	r3, [pc, #428]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	091b      	lsrs	r3, r3, #4
 8008dc8:	f003 0307 	and.w	r3, r3, #7
 8008dcc:	1c5a      	adds	r2, r3, #1
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685b      	ldr	r3, [r3, #4]
       ||
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d047      	beq.n	8008e66 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	73fb      	strb	r3, [r7, #15]
 8008dda:	e044      	b.n	8008e66 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b03      	cmp	r3, #3
 8008de2:	d018      	beq.n	8008e16 <RCCEx_PLLSAI1_Config+0x86>
 8008de4:	2b03      	cmp	r3, #3
 8008de6:	d825      	bhi.n	8008e34 <RCCEx_PLLSAI1_Config+0xa4>
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d002      	beq.n	8008df2 <RCCEx_PLLSAI1_Config+0x62>
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d009      	beq.n	8008e04 <RCCEx_PLLSAI1_Config+0x74>
 8008df0:	e020      	b.n	8008e34 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008df2:	4b5f      	ldr	r3, [pc, #380]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d11d      	bne.n	8008e3a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e02:	e01a      	b.n	8008e3a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008e04:	4b5a      	ldr	r3, [pc, #360]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d116      	bne.n	8008e3e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e14:	e013      	b.n	8008e3e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008e16:	4b56      	ldr	r3, [pc, #344]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10f      	bne.n	8008e42 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008e22:	4b53      	ldr	r3, [pc, #332]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d109      	bne.n	8008e42 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008e32:	e006      	b.n	8008e42 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	73fb      	strb	r3, [r7, #15]
      break;
 8008e38:	e004      	b.n	8008e44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008e3a:	bf00      	nop
 8008e3c:	e002      	b.n	8008e44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008e3e:	bf00      	nop
 8008e40:	e000      	b.n	8008e44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008e42:	bf00      	nop
    }

    if(status == HAL_OK)
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10d      	bne.n	8008e66 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008e4a:	4b49      	ldr	r3, [pc, #292]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6819      	ldr	r1, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	011b      	lsls	r3, r3, #4
 8008e5e:	430b      	orrs	r3, r1
 8008e60:	4943      	ldr	r1, [pc, #268]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d17c      	bne.n	8008f66 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008e6c:	4b40      	ldr	r3, [pc, #256]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a3f      	ldr	r2, [pc, #252]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e78:	f7fb f974 	bl	8004164 <HAL_GetTick>
 8008e7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008e7e:	e009      	b.n	8008e94 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008e80:	f7fb f970 	bl	8004164 <HAL_GetTick>
 8008e84:	4602      	mov	r2, r0
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	2b02      	cmp	r3, #2
 8008e8c:	d902      	bls.n	8008e94 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	73fb      	strb	r3, [r7, #15]
        break;
 8008e92:	e005      	b.n	8008ea0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008e94:	4b36      	ldr	r3, [pc, #216]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1ef      	bne.n	8008e80 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008ea0:	7bfb      	ldrb	r3, [r7, #15]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d15f      	bne.n	8008f66 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d110      	bne.n	8008ece <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008eac:	4b30      	ldr	r3, [pc, #192]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008eb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	6892      	ldr	r2, [r2, #8]
 8008ebc:	0211      	lsls	r1, r2, #8
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	68d2      	ldr	r2, [r2, #12]
 8008ec2:	06d2      	lsls	r2, r2, #27
 8008ec4:	430a      	orrs	r2, r1
 8008ec6:	492a      	ldr	r1, [pc, #168]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	610b      	str	r3, [r1, #16]
 8008ecc:	e027      	b.n	8008f1e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d112      	bne.n	8008efa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008ed4:	4b26      	ldr	r3, [pc, #152]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008edc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	6892      	ldr	r2, [r2, #8]
 8008ee4:	0211      	lsls	r1, r2, #8
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	6912      	ldr	r2, [r2, #16]
 8008eea:	0852      	lsrs	r2, r2, #1
 8008eec:	3a01      	subs	r2, #1
 8008eee:	0552      	lsls	r2, r2, #21
 8008ef0:	430a      	orrs	r2, r1
 8008ef2:	491f      	ldr	r1, [pc, #124]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	610b      	str	r3, [r1, #16]
 8008ef8:	e011      	b.n	8008f1e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008efa:	4b1d      	ldr	r3, [pc, #116]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008f02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	6892      	ldr	r2, [r2, #8]
 8008f0a:	0211      	lsls	r1, r2, #8
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	6952      	ldr	r2, [r2, #20]
 8008f10:	0852      	lsrs	r2, r2, #1
 8008f12:	3a01      	subs	r2, #1
 8008f14:	0652      	lsls	r2, r2, #25
 8008f16:	430a      	orrs	r2, r1
 8008f18:	4915      	ldr	r1, [pc, #84]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008f1e:	4b14      	ldr	r3, [pc, #80]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a13      	ldr	r2, [pc, #76]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f28:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f2a:	f7fb f91b 	bl	8004164 <HAL_GetTick>
 8008f2e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008f30:	e009      	b.n	8008f46 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008f32:	f7fb f917 	bl	8004164 <HAL_GetTick>
 8008f36:	4602      	mov	r2, r0
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d902      	bls.n	8008f46 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008f40:	2303      	movs	r3, #3
 8008f42:	73fb      	strb	r3, [r7, #15]
          break;
 8008f44:	e005      	b.n	8008f52 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008f46:	4b0a      	ldr	r3, [pc, #40]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d0ef      	beq.n	8008f32 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d106      	bne.n	8008f66 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008f58:	4b05      	ldr	r3, [pc, #20]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f5a:	691a      	ldr	r2, [r3, #16]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	4903      	ldr	r1, [pc, #12]	; (8008f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f62:	4313      	orrs	r3, r2
 8008f64:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	40021000 	.word	0x40021000

08008f74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d101      	bne.n	8008f86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e095      	b.n	80090b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d108      	bne.n	8008fa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f96:	d009      	beq.n	8008fac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	61da      	str	r2, [r3, #28]
 8008f9e:	e005      	b.n	8008fac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d106      	bne.n	8008fcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f7fa fe66 	bl	8003c98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fe2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008fec:	d902      	bls.n	8008ff4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	60fb      	str	r3, [r7, #12]
 8008ff2:	e002      	b.n	8008ffa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ff8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009002:	d007      	beq.n	8009014 <HAL_SPI_Init+0xa0>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800900c:	d002      	beq.n	8009014 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009024:	431a      	orrs	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	431a      	orrs	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	695b      	ldr	r3, [r3, #20]
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	431a      	orrs	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009042:	431a      	orrs	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800904c:	431a      	orrs	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a1b      	ldr	r3, [r3, #32]
 8009052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009056:	ea42 0103 	orr.w	r1, r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	430a      	orrs	r2, r1
 8009068:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	0c1b      	lsrs	r3, r3, #16
 8009070:	f003 0204 	and.w	r2, r3, #4
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009078:	f003 0310 	and.w	r3, r3, #16
 800907c:	431a      	orrs	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009082:	f003 0308 	and.w	r3, r3, #8
 8009086:	431a      	orrs	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009090:	ea42 0103 	orr.w	r1, r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	430a      	orrs	r2, r1
 80090a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b088      	sub	sp, #32
 80090be:	af00      	add	r7, sp, #0
 80090c0:	60f8      	str	r0, [r7, #12]
 80090c2:	60b9      	str	r1, [r7, #8]
 80090c4:	603b      	str	r3, [r7, #0]
 80090c6:	4613      	mov	r3, r2
 80090c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d101      	bne.n	80090dc <HAL_SPI_Transmit+0x22>
 80090d8:	2302      	movs	r3, #2
 80090da:	e158      	b.n	800938e <HAL_SPI_Transmit+0x2d4>
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090e4:	f7fb f83e 	bl	8004164 <HAL_GetTick>
 80090e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80090ea:	88fb      	ldrh	r3, [r7, #6]
 80090ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d002      	beq.n	8009100 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80090fa:	2302      	movs	r3, #2
 80090fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090fe:	e13d      	b.n	800937c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d002      	beq.n	800910c <HAL_SPI_Transmit+0x52>
 8009106:	88fb      	ldrh	r3, [r7, #6]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d102      	bne.n	8009112 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009110:	e134      	b.n	800937c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2203      	movs	r2, #3
 8009116:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	88fa      	ldrh	r2, [r7, #6]
 800912a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	88fa      	ldrh	r2, [r7, #6]
 8009130:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2200      	movs	r2, #0
 8009136:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800915c:	d10f      	bne.n	800917e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800916c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800917c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009188:	2b40      	cmp	r3, #64	; 0x40
 800918a:	d007      	beq.n	800919c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800919a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80091a4:	d94b      	bls.n	800923e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d002      	beq.n	80091b4 <HAL_SPI_Transmit+0xfa>
 80091ae:	8afb      	ldrh	r3, [r7, #22]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d13e      	bne.n	8009232 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b8:	881a      	ldrh	r2, [r3, #0]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c4:	1c9a      	adds	r2, r3, #2
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	3b01      	subs	r3, #1
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80091d8:	e02b      	b.n	8009232 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	f003 0302 	and.w	r3, r3, #2
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d112      	bne.n	800920e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ec:	881a      	ldrh	r2, [r3, #0]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f8:	1c9a      	adds	r2, r3, #2
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009202:	b29b      	uxth	r3, r3
 8009204:	3b01      	subs	r3, #1
 8009206:	b29a      	uxth	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800920c:	e011      	b.n	8009232 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800920e:	f7fa ffa9 	bl	8004164 <HAL_GetTick>
 8009212:	4602      	mov	r2, r0
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	683a      	ldr	r2, [r7, #0]
 800921a:	429a      	cmp	r2, r3
 800921c:	d803      	bhi.n	8009226 <HAL_SPI_Transmit+0x16c>
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009224:	d102      	bne.n	800922c <HAL_SPI_Transmit+0x172>
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d102      	bne.n	8009232 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800922c:	2303      	movs	r3, #3
 800922e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009230:	e0a4      	b.n	800937c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009236:	b29b      	uxth	r3, r3
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1ce      	bne.n	80091da <HAL_SPI_Transmit+0x120>
 800923c:	e07c      	b.n	8009338 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d002      	beq.n	800924c <HAL_SPI_Transmit+0x192>
 8009246:	8afb      	ldrh	r3, [r7, #22]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d170      	bne.n	800932e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009250:	b29b      	uxth	r3, r3
 8009252:	2b01      	cmp	r3, #1
 8009254:	d912      	bls.n	800927c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925a:	881a      	ldrh	r2, [r3, #0]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009266:	1c9a      	adds	r2, r3, #2
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009270:	b29b      	uxth	r3, r3
 8009272:	3b02      	subs	r3, #2
 8009274:	b29a      	uxth	r2, r3
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	87da      	strh	r2, [r3, #62]	; 0x3e
 800927a:	e058      	b.n	800932e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	330c      	adds	r3, #12
 8009286:	7812      	ldrb	r2, [r2, #0]
 8009288:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928e:	1c5a      	adds	r2, r3, #1
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009298:	b29b      	uxth	r3, r3
 800929a:	3b01      	subs	r3, #1
 800929c:	b29a      	uxth	r2, r3
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80092a2:	e044      	b.n	800932e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f003 0302 	and.w	r3, r3, #2
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d12b      	bne.n	800930a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d912      	bls.n	80092e2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c0:	881a      	ldrh	r2, [r3, #0]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092cc:	1c9a      	adds	r2, r3, #2
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	3b02      	subs	r3, #2
 80092da:	b29a      	uxth	r2, r3
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80092e0:	e025      	b.n	800932e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	330c      	adds	r3, #12
 80092ec:	7812      	ldrb	r2, [r2, #0]
 80092ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f4:	1c5a      	adds	r2, r3, #1
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092fe:	b29b      	uxth	r3, r3
 8009300:	3b01      	subs	r3, #1
 8009302:	b29a      	uxth	r2, r3
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009308:	e011      	b.n	800932e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800930a:	f7fa ff2b 	bl	8004164 <HAL_GetTick>
 800930e:	4602      	mov	r2, r0
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	1ad3      	subs	r3, r2, r3
 8009314:	683a      	ldr	r2, [r7, #0]
 8009316:	429a      	cmp	r2, r3
 8009318:	d803      	bhi.n	8009322 <HAL_SPI_Transmit+0x268>
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009320:	d102      	bne.n	8009328 <HAL_SPI_Transmit+0x26e>
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d102      	bne.n	800932e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8009328:	2303      	movs	r3, #3
 800932a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800932c:	e026      	b.n	800937c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009332:	b29b      	uxth	r3, r3
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1b5      	bne.n	80092a4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009338:	69ba      	ldr	r2, [r7, #24]
 800933a:	6839      	ldr	r1, [r7, #0]
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f000 fb5b 	bl	80099f8 <SPI_EndRxTxTransaction>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d002      	beq.n	800934e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2220      	movs	r2, #32
 800934c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10a      	bne.n	800936c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009356:	2300      	movs	r3, #0
 8009358:	613b      	str	r3, [r7, #16]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	613b      	str	r3, [r7, #16]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	613b      	str	r3, [r7, #16]
 800936a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	77fb      	strb	r3, [r7, #31]
 8009378:	e000      	b.n	800937c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800937a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800938c:	7ffb      	ldrb	r3, [r7, #31]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3720      	adds	r7, #32
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b08a      	sub	sp, #40	; 0x28
 800939a:	af00      	add	r7, sp, #0
 800939c:	60f8      	str	r0, [r7, #12]
 800939e:	60b9      	str	r1, [r7, #8]
 80093a0:	607a      	str	r2, [r7, #4]
 80093a2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80093a4:	2301      	movs	r3, #1
 80093a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d101      	bne.n	80093bc <HAL_SPI_TransmitReceive+0x26>
 80093b8:	2302      	movs	r3, #2
 80093ba:	e1fb      	b.n	80097b4 <HAL_SPI_TransmitReceive+0x41e>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093c4:	f7fa fece 	bl	8004164 <HAL_GetTick>
 80093c8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80093d0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80093d8:	887b      	ldrh	r3, [r7, #2]
 80093da:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80093dc:	887b      	ldrh	r3, [r7, #2]
 80093de:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80093e0:	7efb      	ldrb	r3, [r7, #27]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d00e      	beq.n	8009404 <HAL_SPI_TransmitReceive+0x6e>
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093ec:	d106      	bne.n	80093fc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d102      	bne.n	80093fc <HAL_SPI_TransmitReceive+0x66>
 80093f6:	7efb      	ldrb	r3, [r7, #27]
 80093f8:	2b04      	cmp	r3, #4
 80093fa:	d003      	beq.n	8009404 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80093fc:	2302      	movs	r3, #2
 80093fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009402:	e1cd      	b.n	80097a0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d005      	beq.n	8009416 <HAL_SPI_TransmitReceive+0x80>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <HAL_SPI_TransmitReceive+0x80>
 8009410:	887b      	ldrh	r3, [r7, #2]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d103      	bne.n	800941e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800941c:	e1c0      	b.n	80097a0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b04      	cmp	r3, #4
 8009428:	d003      	beq.n	8009432 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2205      	movs	r2, #5
 800942e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	887a      	ldrh	r2, [r7, #2]
 8009442:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	887a      	ldrh	r2, [r7, #2]
 800944a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	68ba      	ldr	r2, [r7, #8]
 8009452:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	887a      	ldrh	r2, [r7, #2]
 8009458:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	887a      	ldrh	r2, [r7, #2]
 800945e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2200      	movs	r2, #0
 8009464:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009474:	d802      	bhi.n	800947c <HAL_SPI_TransmitReceive+0xe6>
 8009476:	8a3b      	ldrh	r3, [r7, #16]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d908      	bls.n	800948e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	685a      	ldr	r2, [r3, #4]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800948a:	605a      	str	r2, [r3, #4]
 800948c:	e007      	b.n	800949e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800949c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a8:	2b40      	cmp	r3, #64	; 0x40
 80094aa:	d007      	beq.n	80094bc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80094c4:	d97c      	bls.n	80095c0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d002      	beq.n	80094d4 <HAL_SPI_TransmitReceive+0x13e>
 80094ce:	8a7b      	ldrh	r3, [r7, #18]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d169      	bne.n	80095a8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d8:	881a      	ldrh	r2, [r3, #0]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e4:	1c9a      	adds	r2, r3, #2
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	3b01      	subs	r3, #1
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094f8:	e056      	b.n	80095a8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f003 0302 	and.w	r3, r3, #2
 8009504:	2b02      	cmp	r3, #2
 8009506:	d11b      	bne.n	8009540 <HAL_SPI_TransmitReceive+0x1aa>
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800950c:	b29b      	uxth	r3, r3
 800950e:	2b00      	cmp	r3, #0
 8009510:	d016      	beq.n	8009540 <HAL_SPI_TransmitReceive+0x1aa>
 8009512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009514:	2b01      	cmp	r3, #1
 8009516:	d113      	bne.n	8009540 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951c:	881a      	ldrh	r2, [r3, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009528:	1c9a      	adds	r2, r3, #2
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009532:	b29b      	uxth	r3, r3
 8009534:	3b01      	subs	r3, #1
 8009536:	b29a      	uxth	r2, r3
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800953c:	2300      	movs	r3, #0
 800953e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	2b01      	cmp	r3, #1
 800954c:	d11c      	bne.n	8009588 <HAL_SPI_TransmitReceive+0x1f2>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009554:	b29b      	uxth	r3, r3
 8009556:	2b00      	cmp	r3, #0
 8009558:	d016      	beq.n	8009588 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68da      	ldr	r2, [r3, #12]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009564:	b292      	uxth	r2, r2
 8009566:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956c:	1c9a      	adds	r2, r3, #2
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009578:	b29b      	uxth	r3, r3
 800957a:	3b01      	subs	r3, #1
 800957c:	b29a      	uxth	r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009584:	2301      	movs	r3, #1
 8009586:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009588:	f7fa fdec 	bl	8004164 <HAL_GetTick>
 800958c:	4602      	mov	r2, r0
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009594:	429a      	cmp	r2, r3
 8009596:	d807      	bhi.n	80095a8 <HAL_SPI_TransmitReceive+0x212>
 8009598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800959e:	d003      	beq.n	80095a8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80095a0:	2303      	movs	r3, #3
 80095a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80095a6:	e0fb      	b.n	80097a0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1a3      	bne.n	80094fa <HAL_SPI_TransmitReceive+0x164>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d19d      	bne.n	80094fa <HAL_SPI_TransmitReceive+0x164>
 80095be:	e0df      	b.n	8009780 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d003      	beq.n	80095d0 <HAL_SPI_TransmitReceive+0x23a>
 80095c8:	8a7b      	ldrh	r3, [r7, #18]
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	f040 80cb 	bne.w	8009766 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d912      	bls.n	8009600 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095de:	881a      	ldrh	r2, [r3, #0]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ea:	1c9a      	adds	r2, r3, #2
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	3b02      	subs	r3, #2
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095fe:	e0b2      	b.n	8009766 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	330c      	adds	r3, #12
 800960a:	7812      	ldrb	r2, [r2, #0]
 800960c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009612:	1c5a      	adds	r2, r3, #1
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800961c:	b29b      	uxth	r3, r3
 800961e:	3b01      	subs	r3, #1
 8009620:	b29a      	uxth	r2, r3
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009626:	e09e      	b.n	8009766 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	f003 0302 	and.w	r3, r3, #2
 8009632:	2b02      	cmp	r3, #2
 8009634:	d134      	bne.n	80096a0 <HAL_SPI_TransmitReceive+0x30a>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800963a:	b29b      	uxth	r3, r3
 800963c:	2b00      	cmp	r3, #0
 800963e:	d02f      	beq.n	80096a0 <HAL_SPI_TransmitReceive+0x30a>
 8009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009642:	2b01      	cmp	r3, #1
 8009644:	d12c      	bne.n	80096a0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800964a:	b29b      	uxth	r3, r3
 800964c:	2b01      	cmp	r3, #1
 800964e:	d912      	bls.n	8009676 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009654:	881a      	ldrh	r2, [r3, #0]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009660:	1c9a      	adds	r2, r3, #2
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800966a:	b29b      	uxth	r3, r3
 800966c:	3b02      	subs	r3, #2
 800966e:	b29a      	uxth	r2, r3
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009674:	e012      	b.n	800969c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	330c      	adds	r3, #12
 8009680:	7812      	ldrb	r2, [r2, #0]
 8009682:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009688:	1c5a      	adds	r2, r3, #1
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009692:	b29b      	uxth	r3, r3
 8009694:	3b01      	subs	r3, #1
 8009696:	b29a      	uxth	r2, r3
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800969c:	2300      	movs	r3, #0
 800969e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d148      	bne.n	8009740 <HAL_SPI_TransmitReceive+0x3aa>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d042      	beq.n	8009740 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d923      	bls.n	800970e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	68da      	ldr	r2, [r3, #12]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d0:	b292      	uxth	r2, r2
 80096d2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d8:	1c9a      	adds	r2, r3, #2
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	3b02      	subs	r3, #2
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d81f      	bhi.n	800973c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	685a      	ldr	r2, [r3, #4]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800970a:	605a      	str	r2, [r3, #4]
 800970c:	e016      	b.n	800973c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f103 020c 	add.w	r2, r3, #12
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971a:	7812      	ldrb	r2, [r2, #0]
 800971c:	b2d2      	uxtb	r2, r2
 800971e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009724:	1c5a      	adds	r2, r3, #1
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009730:	b29b      	uxth	r3, r3
 8009732:	3b01      	subs	r3, #1
 8009734:	b29a      	uxth	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800973c:	2301      	movs	r3, #1
 800973e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009740:	f7fa fd10 	bl	8004164 <HAL_GetTick>
 8009744:	4602      	mov	r2, r0
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800974c:	429a      	cmp	r2, r3
 800974e:	d803      	bhi.n	8009758 <HAL_SPI_TransmitReceive+0x3c2>
 8009750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009756:	d102      	bne.n	800975e <HAL_SPI_TransmitReceive+0x3c8>
 8009758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975a:	2b00      	cmp	r3, #0
 800975c:	d103      	bne.n	8009766 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800975e:	2303      	movs	r3, #3
 8009760:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009764:	e01c      	b.n	80097a0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800976a:	b29b      	uxth	r3, r3
 800976c:	2b00      	cmp	r3, #0
 800976e:	f47f af5b 	bne.w	8009628 <HAL_SPI_TransmitReceive+0x292>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009778:	b29b      	uxth	r3, r3
 800977a:	2b00      	cmp	r3, #0
 800977c:	f47f af54 	bne.w	8009628 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009780:	69fa      	ldr	r2, [r7, #28]
 8009782:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f000 f937 	bl	80099f8 <SPI_EndRxTxTransaction>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d006      	beq.n	800979e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2220      	movs	r2, #32
 800979a:	661a      	str	r2, [r3, #96]	; 0x60
 800979c:	e000      	b.n	80097a0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800979e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80097b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3728      	adds	r7, #40	; 0x28
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b088      	sub	sp, #32
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	603b      	str	r3, [r7, #0]
 80097c8:	4613      	mov	r3, r2
 80097ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80097cc:	f7fa fcca 	bl	8004164 <HAL_GetTick>
 80097d0:	4602      	mov	r2, r0
 80097d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d4:	1a9b      	subs	r3, r3, r2
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	4413      	add	r3, r2
 80097da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80097dc:	f7fa fcc2 	bl	8004164 <HAL_GetTick>
 80097e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80097e2:	4b39      	ldr	r3, [pc, #228]	; (80098c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	015b      	lsls	r3, r3, #5
 80097e8:	0d1b      	lsrs	r3, r3, #20
 80097ea:	69fa      	ldr	r2, [r7, #28]
 80097ec:	fb02 f303 	mul.w	r3, r2, r3
 80097f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097f2:	e054      	b.n	800989e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097fa:	d050      	beq.n	800989e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80097fc:	f7fa fcb2 	bl	8004164 <HAL_GetTick>
 8009800:	4602      	mov	r2, r0
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	69fa      	ldr	r2, [r7, #28]
 8009808:	429a      	cmp	r2, r3
 800980a:	d902      	bls.n	8009812 <SPI_WaitFlagStateUntilTimeout+0x56>
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d13d      	bne.n	800988e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	685a      	ldr	r2, [r3, #4]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009820:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800982a:	d111      	bne.n	8009850 <SPI_WaitFlagStateUntilTimeout+0x94>
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009834:	d004      	beq.n	8009840 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800983e:	d107      	bne.n	8009850 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800984e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009858:	d10f      	bne.n	800987a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009878:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2201      	movs	r2, #1
 800987e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800988a:	2303      	movs	r3, #3
 800988c:	e017      	b.n	80098be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d101      	bne.n	8009898 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009894:	2300      	movs	r3, #0
 8009896:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	3b01      	subs	r3, #1
 800989c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	689a      	ldr	r2, [r3, #8]
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	4013      	ands	r3, r2
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	bf0c      	ite	eq
 80098ae:	2301      	moveq	r3, #1
 80098b0:	2300      	movne	r3, #0
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	461a      	mov	r2, r3
 80098b6:	79fb      	ldrb	r3, [r7, #7]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d19b      	bne.n	80097f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3720      	adds	r7, #32
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	20000000 	.word	0x20000000

080098cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b08a      	sub	sp, #40	; 0x28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]
 80098d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80098da:	2300      	movs	r3, #0
 80098dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80098de:	f7fa fc41 	bl	8004164 <HAL_GetTick>
 80098e2:	4602      	mov	r2, r0
 80098e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e6:	1a9b      	subs	r3, r3, r2
 80098e8:	683a      	ldr	r2, [r7, #0]
 80098ea:	4413      	add	r3, r2
 80098ec:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80098ee:	f7fa fc39 	bl	8004164 <HAL_GetTick>
 80098f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	330c      	adds	r3, #12
 80098fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80098fc:	4b3d      	ldr	r3, [pc, #244]	; (80099f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	4613      	mov	r3, r2
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	4413      	add	r3, r2
 8009906:	00da      	lsls	r2, r3, #3
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	0d1b      	lsrs	r3, r3, #20
 800990c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800990e:	fb02 f303 	mul.w	r3, r2, r3
 8009912:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009914:	e060      	b.n	80099d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800991c:	d107      	bne.n	800992e <SPI_WaitFifoStateUntilTimeout+0x62>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d104      	bne.n	800992e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	b2db      	uxtb	r3, r3
 800992a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800992c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009934:	d050      	beq.n	80099d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009936:	f7fa fc15 	bl	8004164 <HAL_GetTick>
 800993a:	4602      	mov	r2, r0
 800993c:	6a3b      	ldr	r3, [r7, #32]
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009942:	429a      	cmp	r2, r3
 8009944:	d902      	bls.n	800994c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009948:	2b00      	cmp	r3, #0
 800994a:	d13d      	bne.n	80099c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	685a      	ldr	r2, [r3, #4]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800995a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009964:	d111      	bne.n	800998a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800996e:	d004      	beq.n	800997a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009978:	d107      	bne.n	800998a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009988:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800998e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009992:	d10f      	bne.n	80099b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2200      	movs	r2, #0
 80099c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e010      	b.n	80099ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d101      	bne.n	80099d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80099ce:	2300      	movs	r3, #0
 80099d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	3b01      	subs	r3, #1
 80099d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	689a      	ldr	r2, [r3, #8]
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	4013      	ands	r3, r2
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d196      	bne.n	8009916 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3728      	adds	r7, #40	; 0x28
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	20000000 	.word	0x20000000

080099f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b086      	sub	sp, #24
 80099fc:	af02      	add	r7, sp, #8
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f7ff ff5b 	bl	80098cc <SPI_WaitFifoStateUntilTimeout>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d007      	beq.n	8009a2c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a20:	f043 0220 	orr.w	r2, r3, #32
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a28:	2303      	movs	r3, #3
 8009a2a:	e027      	b.n	8009a7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	9300      	str	r3, [sp, #0]
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	2200      	movs	r2, #0
 8009a34:	2180      	movs	r1, #128	; 0x80
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f7ff fec0 	bl	80097bc <SPI_WaitFlagStateUntilTimeout>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d007      	beq.n	8009a52 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a46:	f043 0220 	orr.w	r2, r3, #32
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	e014      	b.n	8009a7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	9300      	str	r3, [sp, #0]
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f7ff ff34 	bl	80098cc <SPI_WaitFifoStateUntilTimeout>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d007      	beq.n	8009a7a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a6e:	f043 0220 	orr.w	r2, r3, #32
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e000      	b.n	8009a7c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3710      	adds	r7, #16
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d101      	bne.n	8009a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e049      	b.n	8009b2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d106      	bne.n	8009ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f7fa fa8e 	bl	8003fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	3304      	adds	r3, #4
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	4610      	mov	r0, r2
 8009ac4:	f000 f9c8 	bl	8009e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
	...

08009b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d001      	beq.n	8009b4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e03b      	b.n	8009bc4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2202      	movs	r2, #2
 8009b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68da      	ldr	r2, [r3, #12]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f042 0201 	orr.w	r2, r2, #1
 8009b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a19      	ldr	r2, [pc, #100]	; (8009bd0 <HAL_TIM_Base_Start_IT+0x9c>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d009      	beq.n	8009b82 <HAL_TIM_Base_Start_IT+0x4e>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b76:	d004      	beq.n	8009b82 <HAL_TIM_Base_Start_IT+0x4e>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a15      	ldr	r2, [pc, #84]	; (8009bd4 <HAL_TIM_Base_Start_IT+0xa0>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d115      	bne.n	8009bae <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	689a      	ldr	r2, [r3, #8]
 8009b88:	4b13      	ldr	r3, [pc, #76]	; (8009bd8 <HAL_TIM_Base_Start_IT+0xa4>)
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2b06      	cmp	r3, #6
 8009b92:	d015      	beq.n	8009bc0 <HAL_TIM_Base_Start_IT+0x8c>
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b9a:	d011      	beq.n	8009bc0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f042 0201 	orr.w	r2, r2, #1
 8009baa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bac:	e008      	b.n	8009bc0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f042 0201 	orr.w	r2, r2, #1
 8009bbc:	601a      	str	r2, [r3, #0]
 8009bbe:	e000      	b.n	8009bc2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009bc2:	2300      	movs	r3, #0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3714      	adds	r7, #20
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr
 8009bd0:	40012c00 	.word	0x40012c00
 8009bd4:	40014000 	.word	0x40014000
 8009bd8:	00010007 	.word	0x00010007

08009bdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	f003 0302 	and.w	r3, r3, #2
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d122      	bne.n	8009c38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	f003 0302 	and.w	r3, r3, #2
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d11b      	bne.n	8009c38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f06f 0202 	mvn.w	r2, #2
 8009c08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	f003 0303 	and.w	r3, r3, #3
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d003      	beq.n	8009c26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 f905 	bl	8009e2e <HAL_TIM_IC_CaptureCallback>
 8009c24:	e005      	b.n	8009c32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f8f7 	bl	8009e1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f7f9 ffb1 	bl	8003b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	f003 0304 	and.w	r3, r3, #4
 8009c42:	2b04      	cmp	r3, #4
 8009c44:	d122      	bne.n	8009c8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	f003 0304 	and.w	r3, r3, #4
 8009c50:	2b04      	cmp	r3, #4
 8009c52:	d11b      	bne.n	8009c8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f06f 0204 	mvn.w	r2, #4
 8009c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2202      	movs	r2, #2
 8009c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	699b      	ldr	r3, [r3, #24]
 8009c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 f8db 	bl	8009e2e <HAL_TIM_IC_CaptureCallback>
 8009c78:	e005      	b.n	8009c86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f8cd 	bl	8009e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f7f9 ff87 	bl	8003b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	f003 0308 	and.w	r3, r3, #8
 8009c96:	2b08      	cmp	r3, #8
 8009c98:	d122      	bne.n	8009ce0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	f003 0308 	and.w	r3, r3, #8
 8009ca4:	2b08      	cmp	r3, #8
 8009ca6:	d11b      	bne.n	8009ce0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f06f 0208 	mvn.w	r2, #8
 8009cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2204      	movs	r2, #4
 8009cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	69db      	ldr	r3, [r3, #28]
 8009cbe:	f003 0303 	and.w	r3, r3, #3
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d003      	beq.n	8009cce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f8b1 	bl	8009e2e <HAL_TIM_IC_CaptureCallback>
 8009ccc:	e005      	b.n	8009cda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f8a3 	bl	8009e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f7f9 ff5d 	bl	8003b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	f003 0310 	and.w	r3, r3, #16
 8009cea:	2b10      	cmp	r3, #16
 8009cec:	d122      	bne.n	8009d34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	f003 0310 	and.w	r3, r3, #16
 8009cf8:	2b10      	cmp	r3, #16
 8009cfa:	d11b      	bne.n	8009d34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f06f 0210 	mvn.w	r2, #16
 8009d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2208      	movs	r2, #8
 8009d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	69db      	ldr	r3, [r3, #28]
 8009d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d003      	beq.n	8009d22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 f887 	bl	8009e2e <HAL_TIM_IC_CaptureCallback>
 8009d20:	e005      	b.n	8009d2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f879 	bl	8009e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f7f9 ff33 	bl	8003b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	f003 0301 	and.w	r3, r3, #1
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d10e      	bne.n	8009d60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	f003 0301 	and.w	r3, r3, #1
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d107      	bne.n	8009d60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f06f 0201 	mvn.w	r2, #1
 8009d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7f9 ff06 	bl	8003b6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d6a:	2b80      	cmp	r3, #128	; 0x80
 8009d6c:	d10e      	bne.n	8009d8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d78:	2b80      	cmp	r3, #128	; 0x80
 8009d7a:	d107      	bne.n	8009d8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 f93a 	bl	800a000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d9a:	d10e      	bne.n	8009dba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009da6:	2b80      	cmp	r3, #128	; 0x80
 8009da8:	d107      	bne.n	8009dba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 f92d 	bl	800a014 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dc4:	2b40      	cmp	r3, #64	; 0x40
 8009dc6:	d10e      	bne.n	8009de6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dd2:	2b40      	cmp	r3, #64	; 0x40
 8009dd4:	d107      	bne.n	8009de6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 f82e 	bl	8009e42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	f003 0320 	and.w	r3, r3, #32
 8009df0:	2b20      	cmp	r3, #32
 8009df2:	d10e      	bne.n	8009e12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	f003 0320 	and.w	r3, r3, #32
 8009dfe:	2b20      	cmp	r3, #32
 8009e00:	d107      	bne.n	8009e12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f06f 0220 	mvn.w	r2, #32
 8009e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f8ed 	bl	8009fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e12:	bf00      	nop
 8009e14:	3708      	adds	r7, #8
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	b083      	sub	sp, #12
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e22:	bf00      	nop
 8009e24:	370c      	adds	r7, #12
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr

08009e2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e2e:	b480      	push	{r7}
 8009e30:	b083      	sub	sp, #12
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e36:	bf00      	nop
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr

08009e42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e42:	b480      	push	{r7}
 8009e44:	b083      	sub	sp, #12
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e4a:	bf00      	nop
 8009e4c:	370c      	adds	r7, #12
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr
	...

08009e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4a2a      	ldr	r2, [pc, #168]	; (8009f14 <TIM_Base_SetConfig+0xbc>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d003      	beq.n	8009e78 <TIM_Base_SetConfig+0x20>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e76:	d108      	bne.n	8009e8a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a21      	ldr	r2, [pc, #132]	; (8009f14 <TIM_Base_SetConfig+0xbc>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d00b      	beq.n	8009eaa <TIM_Base_SetConfig+0x52>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e98:	d007      	beq.n	8009eaa <TIM_Base_SetConfig+0x52>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4a1e      	ldr	r2, [pc, #120]	; (8009f18 <TIM_Base_SetConfig+0xc0>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d003      	beq.n	8009eaa <TIM_Base_SetConfig+0x52>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4a1d      	ldr	r2, [pc, #116]	; (8009f1c <TIM_Base_SetConfig+0xc4>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d108      	bne.n	8009ebc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	695b      	ldr	r3, [r3, #20]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	689a      	ldr	r2, [r3, #8]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a0c      	ldr	r2, [pc, #48]	; (8009f14 <TIM_Base_SetConfig+0xbc>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d007      	beq.n	8009ef8 <TIM_Base_SetConfig+0xa0>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a0b      	ldr	r2, [pc, #44]	; (8009f18 <TIM_Base_SetConfig+0xc0>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d003      	beq.n	8009ef8 <TIM_Base_SetConfig+0xa0>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4a0a      	ldr	r2, [pc, #40]	; (8009f1c <TIM_Base_SetConfig+0xc4>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d103      	bne.n	8009f00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	691a      	ldr	r2, [r3, #16]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	615a      	str	r2, [r3, #20]
}
 8009f06:	bf00      	nop
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	40012c00 	.word	0x40012c00
 8009f18:	40014000 	.word	0x40014000
 8009f1c:	40014400 	.word	0x40014400

08009f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d101      	bne.n	8009f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f34:	2302      	movs	r3, #2
 8009f36:	e04f      	b.n	8009fd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2202      	movs	r2, #2
 8009f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a21      	ldr	r2, [pc, #132]	; (8009fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d108      	bne.n	8009f74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009f68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a14      	ldr	r2, [pc, #80]	; (8009fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d009      	beq.n	8009fac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fa0:	d004      	beq.n	8009fac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a10      	ldr	r2, [pc, #64]	; (8009fe8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d10c      	bne.n	8009fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	68ba      	ldr	r2, [r7, #8]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3714      	adds	r7, #20
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr
 8009fe4:	40012c00 	.word	0x40012c00
 8009fe8:	40014000 	.word	0x40014000

08009fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ff4:	bf00      	nop
 8009ff6:	370c      	adds	r7, #12
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a028:	b084      	sub	sp, #16
 800a02a:	b480      	push	{r7}
 800a02c:	b083      	sub	sp, #12
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	f107 0014 	add.w	r0, r7, #20
 800a036:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	b004      	add	sp, #16
 800a048:	4770      	bx	lr

0800a04a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a04a:	b480      	push	{r7}
 800a04c:	b085      	sub	sp, #20
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a05a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a05e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	b29a      	uxth	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3714      	adds	r7, #20
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a080:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a084:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	b29b      	uxth	r3, r3
 800a092:	43db      	mvns	r3, r3
 800a094:	b29b      	uxth	r3, r3
 800a096:	4013      	ands	r3, r2
 800a098:	b29a      	uxth	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3714      	adds	r7, #20
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800a0ae:	b480      	push	{r7}
 800a0b0:	b083      	sub	sp, #12
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a0c8:	b084      	sub	sp, #16
 800a0ca:	b480      	push	{r7}
 800a0cc:	b083      	sub	sp, #12
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
 800a0d2:	f107 0014 	add.w	r0, r7, #20
 800a0d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a0fa:	2300      	movs	r3, #0
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	b004      	add	sp, #16
 800a108:	4770      	bx	lr
	...

0800a10c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b09d      	sub	sp, #116	; 0x74
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a116:	2300      	movs	r3, #0
 800a118:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	4413      	add	r3, r2
 800a126:	881b      	ldrh	r3, [r3, #0]
 800a128:	b29b      	uxth	r3, r3
 800a12a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a12e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a132:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	78db      	ldrb	r3, [r3, #3]
 800a13a:	2b03      	cmp	r3, #3
 800a13c:	d81f      	bhi.n	800a17e <USB_ActivateEndpoint+0x72>
 800a13e:	a201      	add	r2, pc, #4	; (adr r2, 800a144 <USB_ActivateEndpoint+0x38>)
 800a140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a144:	0800a155 	.word	0x0800a155
 800a148:	0800a171 	.word	0x0800a171
 800a14c:	0800a187 	.word	0x0800a187
 800a150:	0800a163 	.word	0x0800a163
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a154:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a158:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a15c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a160:	e012      	b.n	800a188 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a162:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a166:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a16a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a16e:	e00b      	b.n	800a188 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a170:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a174:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a178:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a17c:	e004      	b.n	800a188 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a184:	e000      	b.n	800a188 <USB_ActivateEndpoint+0x7c>
      break;
 800a186:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	441a      	add	r2, r3
 800a192:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a19a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a19e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4413      	add	r3, r2
 800a1b4:	881b      	ldrh	r3, [r3, #0]
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	b21b      	sxth	r3, r3
 800a1ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1c2:	b21a      	sxth	r2, r3
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	b21b      	sxth	r3, r3
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	b21b      	sxth	r3, r3
 800a1ce:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	441a      	add	r2, r3
 800a1dc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a1e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	7b1b      	ldrb	r3, [r3, #12]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f040 816e 	bne.w	800a4da <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	785b      	ldrb	r3, [r3, #1]
 800a202:	2b00      	cmp	r3, #0
 800a204:	f000 8084 	beq.w	800a310 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	61bb      	str	r3, [r7, #24]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a212:	b29b      	uxth	r3, r3
 800a214:	461a      	mov	r2, r3
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	4413      	add	r3, r2
 800a21a:	61bb      	str	r3, [r7, #24]
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	00da      	lsls	r2, r3, #3
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	4413      	add	r3, r2
 800a226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a22a:	617b      	str	r3, [r7, #20]
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	88db      	ldrh	r3, [r3, #6]
 800a230:	085b      	lsrs	r3, r3, #1
 800a232:	b29b      	uxth	r3, r3
 800a234:	005b      	lsls	r3, r3, #1
 800a236:	b29a      	uxth	r2, r3
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	881b      	ldrh	r3, [r3, #0]
 800a248:	827b      	strh	r3, [r7, #18]
 800a24a:	8a7b      	ldrh	r3, [r7, #18]
 800a24c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a250:	2b00      	cmp	r3, #0
 800a252:	d01b      	beq.n	800a28c <USB_ActivateEndpoint+0x180>
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	4413      	add	r3, r2
 800a25e:	881b      	ldrh	r3, [r3, #0]
 800a260:	b29b      	uxth	r3, r3
 800a262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a26a:	823b      	strh	r3, [r7, #16]
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	441a      	add	r2, r3
 800a276:	8a3b      	ldrh	r3, [r7, #16]
 800a278:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a27c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a284:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a288:	b29b      	uxth	r3, r3
 800a28a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	78db      	ldrb	r3, [r3, #3]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d020      	beq.n	800a2d6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	4413      	add	r3, r2
 800a29e:	881b      	ldrh	r3, [r3, #0]
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2aa:	81bb      	strh	r3, [r7, #12]
 800a2ac:	89bb      	ldrh	r3, [r7, #12]
 800a2ae:	f083 0320 	eor.w	r3, r3, #32
 800a2b2:	81bb      	strh	r3, [r7, #12]
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	441a      	add	r2, r3
 800a2be:	89bb      	ldrh	r3, [r7, #12]
 800a2c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	8013      	strh	r3, [r2, #0]
 800a2d4:	e2cb      	b.n	800a86e <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	4413      	add	r3, r2
 800a2e0:	881b      	ldrh	r3, [r3, #0]
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2ec:	81fb      	strh	r3, [r7, #14]
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	441a      	add	r2, r3
 800a2f8:	89fb      	ldrh	r3, [r7, #14]
 800a2fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	8013      	strh	r3, [r2, #0]
 800a30e:	e2ae      	b.n	800a86e <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	633b      	str	r3, [r7, #48]	; 0x30
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	461a      	mov	r2, r3
 800a31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a320:	4413      	add	r3, r2
 800a322:	633b      	str	r3, [r7, #48]	; 0x30
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	00da      	lsls	r2, r3, #3
 800a32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32c:	4413      	add	r3, r2
 800a32e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a332:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	88db      	ldrh	r3, [r3, #6]
 800a338:	085b      	lsrs	r3, r3, #1
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	005b      	lsls	r3, r3, #1
 800a33e:	b29a      	uxth	r2, r3
 800a340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a342:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	62bb      	str	r3, [r7, #40]	; 0x28
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a34e:	b29b      	uxth	r3, r3
 800a350:	461a      	mov	r2, r3
 800a352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a354:	4413      	add	r3, r2
 800a356:	62bb      	str	r3, [r7, #40]	; 0x28
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	00da      	lsls	r2, r3, #3
 800a35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a360:	4413      	add	r3, r2
 800a362:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a366:	627b      	str	r3, [r7, #36]	; 0x24
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	691b      	ldr	r3, [r3, #16]
 800a36c:	2b3e      	cmp	r3, #62	; 0x3e
 800a36e:	d918      	bls.n	800a3a2 <USB_ActivateEndpoint+0x296>
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	095b      	lsrs	r3, r3, #5
 800a376:	66bb      	str	r3, [r7, #104]	; 0x68
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	f003 031f 	and.w	r3, r3, #31
 800a380:	2b00      	cmp	r3, #0
 800a382:	d102      	bne.n	800a38a <USB_ActivateEndpoint+0x27e>
 800a384:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a386:	3b01      	subs	r3, #1
 800a388:	66bb      	str	r3, [r7, #104]	; 0x68
 800a38a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	029b      	lsls	r3, r3, #10
 800a390:	b29b      	uxth	r3, r3
 800a392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39e:	801a      	strh	r2, [r3, #0]
 800a3a0:	e029      	b.n	800a3f6 <USB_ActivateEndpoint+0x2ea>
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d112      	bne.n	800a3d0 <USB_ActivateEndpoint+0x2c4>
 800a3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ac:	881b      	ldrh	r3, [r3, #0]
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b8:	801a      	strh	r2, [r3, #0]
 800a3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3bc:	881b      	ldrh	r3, [r3, #0]
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	801a      	strh	r2, [r3, #0]
 800a3ce:	e012      	b.n	800a3f6 <USB_ActivateEndpoint+0x2ea>
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	691b      	ldr	r3, [r3, #16]
 800a3d4:	085b      	lsrs	r3, r3, #1
 800a3d6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	f003 0301 	and.w	r3, r3, #1
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d002      	beq.n	800a3ea <USB_ActivateEndpoint+0x2de>
 800a3e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	029b      	lsls	r3, r3, #10
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	4413      	add	r3, r2
 800a400:	881b      	ldrh	r3, [r3, #0]
 800a402:	847b      	strh	r3, [r7, #34]	; 0x22
 800a404:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d01b      	beq.n	800a446 <USB_ActivateEndpoint+0x33a>
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	4413      	add	r3, r2
 800a418:	881b      	ldrh	r3, [r3, #0]
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a424:	843b      	strh	r3, [r7, #32]
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	441a      	add	r2, r3
 800a430:	8c3b      	ldrh	r3, [r7, #32]
 800a432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a43a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a43e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a442:	b29b      	uxth	r3, r3
 800a444:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d124      	bne.n	800a498 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	4413      	add	r3, r2
 800a458:	881b      	ldrh	r3, [r3, #0]
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a464:	83bb      	strh	r3, [r7, #28]
 800a466:	8bbb      	ldrh	r3, [r7, #28]
 800a468:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a46c:	83bb      	strh	r3, [r7, #28]
 800a46e:	8bbb      	ldrh	r3, [r7, #28]
 800a470:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a474:	83bb      	strh	r3, [r7, #28]
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	441a      	add	r2, r3
 800a480:	8bbb      	ldrh	r3, [r7, #28]
 800a482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a48a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a48e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a492:	b29b      	uxth	r3, r3
 800a494:	8013      	strh	r3, [r2, #0]
 800a496:	e1ea      	b.n	800a86e <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	4413      	add	r3, r2
 800a4a2:	881b      	ldrh	r3, [r3, #0]
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ae:	83fb      	strh	r3, [r7, #30]
 800a4b0:	8bfb      	ldrh	r3, [r7, #30]
 800a4b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a4b6:	83fb      	strh	r3, [r7, #30]
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	441a      	add	r2, r3
 800a4c2:	8bfb      	ldrh	r3, [r7, #30]
 800a4c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	8013      	strh	r3, [r2, #0]
 800a4d8:	e1c9      	b.n	800a86e <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	78db      	ldrb	r3, [r3, #3]
 800a4de:	2b02      	cmp	r3, #2
 800a4e0:	d11e      	bne.n	800a520 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4413      	add	r3, r2
 800a4ec:	881b      	ldrh	r3, [r3, #0]
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4f8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	441a      	add	r2, r3
 800a506:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a50a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a50e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a512:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	8013      	strh	r3, [r2, #0]
 800a51e:	e01d      	b.n	800a55c <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	4413      	add	r3, r2
 800a52a:	881b      	ldrh	r3, [r3, #0]
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a536:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	441a      	add	r2, r3
 800a544:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a54c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a558:	b29b      	uxth	r3, r3
 800a55a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a566:	b29b      	uxth	r3, r3
 800a568:	461a      	mov	r2, r3
 800a56a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a56c:	4413      	add	r3, r2
 800a56e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	00da      	lsls	r2, r3, #3
 800a576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a578:	4413      	add	r3, r2
 800a57a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a57e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	891b      	ldrh	r3, [r3, #8]
 800a584:	085b      	lsrs	r3, r3, #1
 800a586:	b29b      	uxth	r3, r3
 800a588:	005b      	lsls	r3, r3, #1
 800a58a:	b29a      	uxth	r2, r3
 800a58c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a58e:	801a      	strh	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	657b      	str	r3, [r7, #84]	; 0x54
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	461a      	mov	r2, r3
 800a59e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5a0:	4413      	add	r3, r2
 800a5a2:	657b      	str	r3, [r7, #84]	; 0x54
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	00da      	lsls	r2, r3, #3
 800a5aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5ac:	4413      	add	r3, r2
 800a5ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a5b2:	653b      	str	r3, [r7, #80]	; 0x50
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	895b      	ldrh	r3, [r3, #10]
 800a5b8:	085b      	lsrs	r3, r3, #1
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	005b      	lsls	r3, r3, #1
 800a5be:	b29a      	uxth	r2, r3
 800a5c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5c2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	785b      	ldrb	r3, [r3, #1]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f040 8093 	bne.w	800a6f4 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	4413      	add	r3, r2
 800a5d8:	881b      	ldrh	r3, [r3, #0]
 800a5da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a5de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a5e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d01b      	beq.n	800a622 <USB_ActivateEndpoint+0x516>
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	4413      	add	r3, r2
 800a5f4:	881b      	ldrh	r3, [r3, #0]
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a600:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	441a      	add	r2, r3
 800a60c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a60e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a61a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a61e:	b29b      	uxth	r3, r3
 800a620:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	4413      	add	r3, r2
 800a62c:	881b      	ldrh	r3, [r3, #0]
 800a62e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a630:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a636:	2b00      	cmp	r3, #0
 800a638:	d01b      	beq.n	800a672 <USB_ActivateEndpoint+0x566>
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4413      	add	r3, r2
 800a644:	881b      	ldrh	r3, [r3, #0]
 800a646:	b29b      	uxth	r3, r3
 800a648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a64c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a650:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	441a      	add	r2, r3
 800a65c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a65e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a66a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a66e:	b29b      	uxth	r3, r3
 800a670:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	4413      	add	r3, r2
 800a67c:	881b      	ldrh	r3, [r3, #0]
 800a67e:	b29b      	uxth	r3, r3
 800a680:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a688:	873b      	strh	r3, [r7, #56]	; 0x38
 800a68a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a68c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a690:	873b      	strh	r3, [r7, #56]	; 0x38
 800a692:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a694:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a698:	873b      	strh	r3, [r7, #56]	; 0x38
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	441a      	add	r2, r3
 800a6a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a6a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	881b      	ldrh	r3, [r3, #0]
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6d0:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	441a      	add	r2, r3
 800a6dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a6de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	8013      	strh	r3, [r2, #0]
 800a6f2:	e0bc      	b.n	800a86e <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	881b      	ldrh	r3, [r3, #0]
 800a700:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a704:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d01d      	beq.n	800a74c <USB_ActivateEndpoint+0x640>
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	881b      	ldrh	r3, [r3, #0]
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a726:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	441a      	add	r2, r3
 800a734:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a73c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a740:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a748:	b29b      	uxth	r3, r3
 800a74a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	4413      	add	r3, r2
 800a756:	881b      	ldrh	r3, [r3, #0]
 800a758:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a75c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a764:	2b00      	cmp	r3, #0
 800a766:	d01d      	beq.n	800a7a4 <USB_ActivateEndpoint+0x698>
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	4413      	add	r3, r2
 800a772:	881b      	ldrh	r3, [r3, #0]
 800a774:	b29b      	uxth	r3, r3
 800a776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a77a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a77e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	441a      	add	r2, r3
 800a78c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a79c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	78db      	ldrb	r3, [r3, #3]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d024      	beq.n	800a7f6 <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	4413      	add	r3, r2
 800a7b6:	881b      	ldrh	r3, [r3, #0]
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a7c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a7ca:	f083 0320 	eor.w	r3, r3, #32
 800a7ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	441a      	add	r2, r3
 800a7dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a7e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	8013      	strh	r3, [r2, #0]
 800a7f4:	e01d      	b.n	800a832 <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	4413      	add	r3, r2
 800a800:	881b      	ldrh	r3, [r3, #0]
 800a802:	b29b      	uxth	r3, r3
 800a804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a80c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	441a      	add	r2, r3
 800a81a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a81e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a82a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a82e:	b29b      	uxth	r3, r3
 800a830:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	881b      	ldrh	r3, [r3, #0]
 800a83e:	b29b      	uxth	r3, r3
 800a840:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a848:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	441a      	add	r2, r3
 800a856:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a85a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a85e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a86e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a872:	4618      	mov	r0, r3
 800a874:	3774      	adds	r7, #116	; 0x74
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop

0800a880 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a880:	b480      	push	{r7}
 800a882:	b08d      	sub	sp, #52	; 0x34
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	7b1b      	ldrb	r3, [r3, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	f040 808e 	bne.w	800a9b0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	785b      	ldrb	r3, [r3, #1]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d044      	beq.n	800a926 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	4413      	add	r3, r2
 800a8a6:	881b      	ldrh	r3, [r3, #0]
 800a8a8:	81bb      	strh	r3, [r7, #12]
 800a8aa:	89bb      	ldrh	r3, [r7, #12]
 800a8ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d01b      	beq.n	800a8ec <USB_DeactivateEndpoint+0x6c>
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	4413      	add	r3, r2
 800a8be:	881b      	ldrh	r3, [r3, #0]
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ca:	817b      	strh	r3, [r7, #10]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	441a      	add	r2, r3
 800a8d6:	897b      	ldrh	r3, [r7, #10]
 800a8d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4413      	add	r3, r2
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a902:	813b      	strh	r3, [r7, #8]
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	441a      	add	r2, r3
 800a90e:	893b      	ldrh	r3, [r7, #8]
 800a910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a91c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a920:	b29b      	uxth	r3, r3
 800a922:	8013      	strh	r3, [r2, #0]
 800a924:	e192      	b.n	800ac4c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	4413      	add	r3, r2
 800a930:	881b      	ldrh	r3, [r3, #0]
 800a932:	827b      	strh	r3, [r7, #18]
 800a934:	8a7b      	ldrh	r3, [r7, #18]
 800a936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d01b      	beq.n	800a976 <USB_DeactivateEndpoint+0xf6>
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	4413      	add	r3, r2
 800a948:	881b      	ldrh	r3, [r3, #0]
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a954:	823b      	strh	r3, [r7, #16]
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	441a      	add	r2, r3
 800a960:	8a3b      	ldrh	r3, [r7, #16]
 800a962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a96a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a96e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a972:	b29b      	uxth	r3, r3
 800a974:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	4413      	add	r3, r2
 800a980:	881b      	ldrh	r3, [r3, #0]
 800a982:	b29b      	uxth	r3, r3
 800a984:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a98c:	81fb      	strh	r3, [r7, #14]
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	441a      	add	r2, r3
 800a998:	89fb      	ldrh	r3, [r7, #14]
 800a99a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a99e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	8013      	strh	r3, [r2, #0]
 800a9ae:	e14d      	b.n	800ac4c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	785b      	ldrb	r3, [r3, #1]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f040 80a5 	bne.w	800ab04 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	4413      	add	r3, r2
 800a9c4:	881b      	ldrh	r3, [r3, #0]
 800a9c6:	843b      	strh	r3, [r7, #32]
 800a9c8:	8c3b      	ldrh	r3, [r7, #32]
 800a9ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d01b      	beq.n	800aa0a <USB_DeactivateEndpoint+0x18a>
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	4413      	add	r3, r2
 800a9dc:	881b      	ldrh	r3, [r3, #0]
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9e8:	83fb      	strh	r3, [r7, #30]
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	441a      	add	r2, r3
 800a9f4:	8bfb      	ldrh	r3, [r7, #30]
 800a9f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	009b      	lsls	r3, r3, #2
 800aa12:	4413      	add	r3, r2
 800aa14:	881b      	ldrh	r3, [r3, #0]
 800aa16:	83bb      	strh	r3, [r7, #28]
 800aa18:	8bbb      	ldrh	r3, [r7, #28]
 800aa1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d01b      	beq.n	800aa5a <USB_DeactivateEndpoint+0x1da>
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	4413      	add	r3, r2
 800aa2c:	881b      	ldrh	r3, [r3, #0]
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa38:	837b      	strh	r3, [r7, #26]
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	441a      	add	r2, r3
 800aa44:	8b7b      	ldrh	r3, [r7, #26]
 800aa46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	4413      	add	r3, r2
 800aa64:	881b      	ldrh	r3, [r3, #0]
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa70:	833b      	strh	r3, [r7, #24]
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	441a      	add	r2, r3
 800aa7c:	8b3b      	ldrh	r3, [r7, #24]
 800aa7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	4413      	add	r3, r2
 800aa9c:	881b      	ldrh	r3, [r3, #0]
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aaa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaa8:	82fb      	strh	r3, [r7, #22]
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	441a      	add	r2, r3
 800aab4:	8afb      	ldrh	r3, [r7, #22]
 800aab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aabe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4413      	add	r3, r2
 800aad4:	881b      	ldrh	r3, [r3, #0]
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aadc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aae0:	82bb      	strh	r3, [r7, #20]
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	441a      	add	r2, r3
 800aaec:	8abb      	ldrh	r3, [r7, #20]
 800aaee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aafa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	8013      	strh	r3, [r2, #0]
 800ab02:	e0a3      	b.n	800ac4c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	4413      	add	r3, r2
 800ab0e:	881b      	ldrh	r3, [r3, #0]
 800ab10:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ab12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ab14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d01b      	beq.n	800ab54 <USB_DeactivateEndpoint+0x2d4>
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	4413      	add	r3, r2
 800ab26:	881b      	ldrh	r3, [r3, #0]
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab32:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	441a      	add	r2, r3
 800ab3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ab40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4413      	add	r3, r2
 800ab5e:	881b      	ldrh	r3, [r3, #0]
 800ab60:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ab62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ab64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d01b      	beq.n	800aba4 <USB_DeactivateEndpoint+0x324>
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	4413      	add	r3, r2
 800ab76:	881b      	ldrh	r3, [r3, #0]
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab82:	853b      	strh	r3, [r7, #40]	; 0x28
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	441a      	add	r2, r3
 800ab8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ab90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	4413      	add	r3, r2
 800abae:	881b      	ldrh	r3, [r3, #0]
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abba:	84fb      	strh	r3, [r7, #38]	; 0x26
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	441a      	add	r2, r3
 800abc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800abc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800abd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abd8:	b29b      	uxth	r3, r3
 800abda:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	4413      	add	r3, r2
 800abe6:	881b      	ldrh	r3, [r3, #0]
 800abe8:	b29b      	uxth	r3, r3
 800abea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abf2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	441a      	add	r2, r3
 800abfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	009b      	lsls	r3, r3, #2
 800ac1c:	4413      	add	r3, r2
 800ac1e:	881b      	ldrh	r3, [r3, #0]
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac2a:	847b      	strh	r3, [r7, #34]	; 0x22
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	441a      	add	r2, r3
 800ac36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3734      	adds	r7, #52	; 0x34
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b0c2      	sub	sp, #264	; 0x108
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac68:	6018      	str	r0, [r3, #0]
 800ac6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac72:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ac74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	785b      	ldrb	r3, [r3, #1]
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	f040 867b 	bne.w	800b97c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ac86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	699a      	ldr	r2, [r3, #24]
 800ac92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d908      	bls.n	800acb4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800aca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800acb2:	e007      	b.n	800acc4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800acb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	699b      	ldr	r3, [r3, #24]
 800acc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800acc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	7b1b      	ldrb	r3, [r3, #12]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d13a      	bne.n	800ad4a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800acd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	6959      	ldr	r1, [r3, #20]
 800ace0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ace4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	88da      	ldrh	r2, [r3, #6]
 800acec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800acf6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800acfa:	6800      	ldr	r0, [r0, #0]
 800acfc:	f001 fc3e 	bl	800c57c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ad00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	613b      	str	r3, [r7, #16]
 800ad0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	4413      	add	r3, r2
 800ad22:	613b      	str	r3, [r7, #16]
 800ad24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	00da      	lsls	r2, r3, #3
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	4413      	add	r3, r2
 800ad36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ad3a:	60fb      	str	r3, [r7, #12]
 800ad3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad40:	b29a      	uxth	r2, r3
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	801a      	strh	r2, [r3, #0]
 800ad46:	f000 bde3 	b.w	800b910 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ad4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	78db      	ldrb	r3, [r3, #3]
 800ad56:	2b02      	cmp	r3, #2
 800ad58:	f040 843a 	bne.w	800b5d0 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ad5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	6a1a      	ldr	r2, [r3, #32]
 800ad68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	691b      	ldr	r3, [r3, #16]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	f240 83b7 	bls.w	800b4e8 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ad7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad82:	681a      	ldr	r2, [r3, #0]
 800ad84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4413      	add	r3, r2
 800ad94:	881b      	ldrh	r3, [r3, #0]
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ada0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800ada4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ada8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	441a      	add	r2, r3
 800adbe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800adc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800adce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800add2:	b29b      	uxth	r3, r3
 800add4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800add6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	6a1a      	ldr	r2, [r3, #32]
 800ade2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade6:	1ad2      	subs	r2, r2, r3
 800ade8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800adf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	4413      	add	r3, r2
 800ae0e:	881b      	ldrh	r3, [r3, #0]
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f000 81b3 	beq.w	800b182 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ae1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	633b      	str	r3, [r7, #48]	; 0x30
 800ae28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	785b      	ldrb	r3, [r3, #1]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d16d      	bne.n	800af14 <USB_EPStartXfer+0x2ba>
 800ae38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	461a      	mov	r2, r3
 800ae56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae58:	4413      	add	r3, r2
 800ae5a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	00da      	lsls	r2, r3, #3
 800ae6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6c:	4413      	add	r3, r2
 800ae6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae72:	627b      	str	r3, [r7, #36]	; 0x24
 800ae74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae78:	2b3e      	cmp	r3, #62	; 0x3e
 800ae7a:	d91c      	bls.n	800aeb6 <USB_EPStartXfer+0x25c>
 800ae7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae80:	095b      	lsrs	r3, r3, #5
 800ae82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ae86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae8a:	f003 031f 	and.w	r3, r3, #31
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d104      	bne.n	800ae9c <USB_EPStartXfer+0x242>
 800ae92:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ae96:	3b01      	subs	r3, #1
 800ae98:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ae9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	029b      	lsls	r3, r3, #10
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aeaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb2:	801a      	strh	r2, [r3, #0]
 800aeb4:	e053      	b.n	800af5e <USB_EPStartXfer+0x304>
 800aeb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d112      	bne.n	800aee4 <USB_EPStartXfer+0x28a>
 800aebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec0:	881b      	ldrh	r3, [r3, #0]
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aecc:	801a      	strh	r2, [r3, #0]
 800aece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed0:	881b      	ldrh	r3, [r3, #0]
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aedc:	b29a      	uxth	r2, r3
 800aede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee0:	801a      	strh	r2, [r3, #0]
 800aee2:	e03c      	b.n	800af5e <USB_EPStartXfer+0x304>
 800aee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee8:	085b      	lsrs	r3, r3, #1
 800aeea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aeee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef2:	f003 0301 	and.w	r3, r3, #1
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d004      	beq.n	800af04 <USB_EPStartXfer+0x2aa>
 800aefa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800aefe:	3301      	adds	r3, #1
 800af00:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800af04:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800af08:	b29b      	uxth	r3, r3
 800af0a:	029b      	lsls	r3, r3, #10
 800af0c:	b29a      	uxth	r2, r3
 800af0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af10:	801a      	strh	r2, [r3, #0]
 800af12:	e024      	b.n	800af5e <USB_EPStartXfer+0x304>
 800af14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	785b      	ldrb	r3, [r3, #1]
 800af20:	2b01      	cmp	r3, #1
 800af22:	d11c      	bne.n	800af5e <USB_EPStartXfer+0x304>
 800af24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af32:	b29b      	uxth	r3, r3
 800af34:	461a      	mov	r2, r3
 800af36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af38:	4413      	add	r3, r2
 800af3a:	633b      	str	r3, [r7, #48]	; 0x30
 800af3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	00da      	lsls	r2, r3, #3
 800af4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4c:	4413      	add	r3, r2
 800af4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af58:	b29a      	uxth	r2, r3
 800af5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800af5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	895b      	ldrh	r3, [r3, #10]
 800af6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	6959      	ldr	r1, [r3, #20]
 800af7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af7e:	b29b      	uxth	r3, r3
 800af80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800af84:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800af88:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800af8c:	6800      	ldr	r0, [r0, #0]
 800af8e:	f001 faf5 	bl	800c57c <USB_WritePMA>
            ep->xfer_buff += len;
 800af92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	695a      	ldr	r2, [r3, #20]
 800af9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa2:	441a      	add	r2, r3
 800afa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800afb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	6a1a      	ldr	r2, [r3, #32]
 800afbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	691b      	ldr	r3, [r3, #16]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d90f      	bls.n	800afec <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800afcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	6a1a      	ldr	r2, [r3, #32]
 800afd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afdc:	1ad2      	subs	r2, r2, r3
 800afde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	621a      	str	r2, [r3, #32]
 800afea:	e00e      	b.n	800b00a <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800afec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	6a1b      	ldr	r3, [r3, #32]
 800aff8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800affc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2200      	movs	r2, #0
 800b008:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b00a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b00e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	785b      	ldrb	r3, [r3, #1]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d16d      	bne.n	800b0f6 <USB_EPStartXfer+0x49c>
 800b01a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b01e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	61bb      	str	r3, [r7, #24]
 800b026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b02a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b034:	b29b      	uxth	r3, r3
 800b036:	461a      	mov	r2, r3
 800b038:	69bb      	ldr	r3, [r7, #24]
 800b03a:	4413      	add	r3, r2
 800b03c:	61bb      	str	r3, [r7, #24]
 800b03e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	00da      	lsls	r2, r3, #3
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	4413      	add	r3, r2
 800b050:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b054:	617b      	str	r3, [r7, #20]
 800b056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b05a:	2b3e      	cmp	r3, #62	; 0x3e
 800b05c:	d91c      	bls.n	800b098 <USB_EPStartXfer+0x43e>
 800b05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b062:	095b      	lsrs	r3, r3, #5
 800b064:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b06c:	f003 031f 	and.w	r3, r3, #31
 800b070:	2b00      	cmp	r3, #0
 800b072:	d104      	bne.n	800b07e <USB_EPStartXfer+0x424>
 800b074:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b078:	3b01      	subs	r3, #1
 800b07a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b07e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b082:	b29b      	uxth	r3, r3
 800b084:	029b      	lsls	r3, r3, #10
 800b086:	b29b      	uxth	r3, r3
 800b088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b08c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b090:	b29a      	uxth	r2, r3
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	801a      	strh	r2, [r3, #0]
 800b096:	e059      	b.n	800b14c <USB_EPStartXfer+0x4f2>
 800b098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d112      	bne.n	800b0c6 <USB_EPStartXfer+0x46c>
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	881b      	ldrh	r3, [r3, #0]
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b0aa:	b29a      	uxth	r2, r3
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	801a      	strh	r2, [r3, #0]
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	881b      	ldrh	r3, [r3, #0]
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	801a      	strh	r2, [r3, #0]
 800b0c4:	e042      	b.n	800b14c <USB_EPStartXfer+0x4f2>
 800b0c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ca:	085b      	lsrs	r3, r3, #1
 800b0cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b0d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0d4:	f003 0301 	and.w	r3, r3, #1
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d004      	beq.n	800b0e6 <USB_EPStartXfer+0x48c>
 800b0dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b0e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	029b      	lsls	r3, r3, #10
 800b0ee:	b29a      	uxth	r2, r3
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	801a      	strh	r2, [r3, #0]
 800b0f4:	e02a      	b.n	800b14c <USB_EPStartXfer+0x4f2>
 800b0f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	785b      	ldrb	r3, [r3, #1]
 800b102:	2b01      	cmp	r3, #1
 800b104:	d122      	bne.n	800b14c <USB_EPStartXfer+0x4f2>
 800b106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b10a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	623b      	str	r3, [r7, #32]
 800b112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b116:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b120:	b29b      	uxth	r3, r3
 800b122:	461a      	mov	r2, r3
 800b124:	6a3b      	ldr	r3, [r7, #32]
 800b126:	4413      	add	r3, r2
 800b128:	623b      	str	r3, [r7, #32]
 800b12a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b12e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	00da      	lsls	r2, r3, #3
 800b138:	6a3b      	ldr	r3, [r7, #32]
 800b13a:	4413      	add	r3, r2
 800b13c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b140:	61fb      	str	r3, [r7, #28]
 800b142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b146:	b29a      	uxth	r2, r3
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b14c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	891b      	ldrh	r3, [r3, #8]
 800b158:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b15c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	6959      	ldr	r1, [r3, #20]
 800b168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b172:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b176:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b17a:	6800      	ldr	r0, [r0, #0]
 800b17c:	f001 f9fe 	bl	800c57c <USB_WritePMA>
 800b180:	e3c6      	b.n	800b910 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	785b      	ldrb	r3, [r3, #1]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d16d      	bne.n	800b26e <USB_EPStartXfer+0x614>
 800b192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b196:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b19e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1b2:	4413      	add	r3, r2
 800b1b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	00da      	lsls	r2, r3, #3
 800b1c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1c6:	4413      	add	r3, r2
 800b1c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b1cc:	647b      	str	r3, [r7, #68]	; 0x44
 800b1ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1d2:	2b3e      	cmp	r3, #62	; 0x3e
 800b1d4:	d91c      	bls.n	800b210 <USB_EPStartXfer+0x5b6>
 800b1d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1da:	095b      	lsrs	r3, r3, #5
 800b1dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b1e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e4:	f003 031f 	and.w	r3, r3, #31
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d104      	bne.n	800b1f6 <USB_EPStartXfer+0x59c>
 800b1ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b1f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	029b      	lsls	r3, r3, #10
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b208:	b29a      	uxth	r2, r3
 800b20a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b20c:	801a      	strh	r2, [r3, #0]
 800b20e:	e059      	b.n	800b2c4 <USB_EPStartXfer+0x66a>
 800b210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b214:	2b00      	cmp	r3, #0
 800b216:	d112      	bne.n	800b23e <USB_EPStartXfer+0x5e4>
 800b218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b21a:	881b      	ldrh	r3, [r3, #0]
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b222:	b29a      	uxth	r2, r3
 800b224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b226:	801a      	strh	r2, [r3, #0]
 800b228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b22a:	881b      	ldrh	r3, [r3, #0]
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b236:	b29a      	uxth	r2, r3
 800b238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b23a:	801a      	strh	r2, [r3, #0]
 800b23c:	e042      	b.n	800b2c4 <USB_EPStartXfer+0x66a>
 800b23e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b242:	085b      	lsrs	r3, r3, #1
 800b244:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b24c:	f003 0301 	and.w	r3, r3, #1
 800b250:	2b00      	cmp	r3, #0
 800b252:	d004      	beq.n	800b25e <USB_EPStartXfer+0x604>
 800b254:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b258:	3301      	adds	r3, #1
 800b25a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b25e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b262:	b29b      	uxth	r3, r3
 800b264:	029b      	lsls	r3, r3, #10
 800b266:	b29a      	uxth	r2, r3
 800b268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b26a:	801a      	strh	r2, [r3, #0]
 800b26c:	e02a      	b.n	800b2c4 <USB_EPStartXfer+0x66a>
 800b26e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	785b      	ldrb	r3, [r3, #1]
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d122      	bne.n	800b2c4 <USB_EPStartXfer+0x66a>
 800b27e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b282:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	653b      	str	r3, [r7, #80]	; 0x50
 800b28a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b28e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b298:	b29b      	uxth	r3, r3
 800b29a:	461a      	mov	r2, r3
 800b29c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b29e:	4413      	add	r3, r2
 800b2a0:	653b      	str	r3, [r7, #80]	; 0x50
 800b2a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	00da      	lsls	r2, r3, #3
 800b2b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2b2:	4413      	add	r3, r2
 800b2b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b2b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b2c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	891b      	ldrh	r3, [r3, #8]
 800b2d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b2d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	6959      	ldr	r1, [r3, #20]
 800b2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b2ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b2ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b2f2:	6800      	ldr	r0, [r0, #0]
 800b2f4:	f001 f942 	bl	800c57c <USB_WritePMA>
            ep->xfer_buff += len;
 800b2f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	695a      	ldr	r2, [r3, #20]
 800b304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b308:	441a      	add	r2, r3
 800b30a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b30e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b31a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	6a1a      	ldr	r2, [r3, #32]
 800b322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	429a      	cmp	r2, r3
 800b330:	d90f      	bls.n	800b352 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800b332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	6a1a      	ldr	r2, [r3, #32]
 800b33e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b342:	1ad2      	subs	r2, r2, r3
 800b344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	621a      	str	r2, [r3, #32]
 800b350:	e00e      	b.n	800b370 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800b352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	6a1b      	ldr	r3, [r3, #32]
 800b35e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2200      	movs	r2, #0
 800b36e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b374:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	643b      	str	r3, [r7, #64]	; 0x40
 800b37c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	785b      	ldrb	r3, [r3, #1]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d16d      	bne.n	800b468 <USB_EPStartXfer+0x80e>
 800b38c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b390:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	63bb      	str	r3, [r7, #56]	; 0x38
 800b398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b39c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ac:	4413      	add	r3, r2
 800b3ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800b3b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	00da      	lsls	r2, r3, #3
 800b3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c0:	4413      	add	r3, r2
 800b3c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b3c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b3c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3cc:	2b3e      	cmp	r3, #62	; 0x3e
 800b3ce:	d91c      	bls.n	800b40a <USB_EPStartXfer+0x7b0>
 800b3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3d4:	095b      	lsrs	r3, r3, #5
 800b3d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b3da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3de:	f003 031f 	and.w	r3, r3, #31
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d104      	bne.n	800b3f0 <USB_EPStartXfer+0x796>
 800b3e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b3f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	029b      	lsls	r3, r3, #10
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b402:	b29a      	uxth	r2, r3
 800b404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b406:	801a      	strh	r2, [r3, #0]
 800b408:	e053      	b.n	800b4b2 <USB_EPStartXfer+0x858>
 800b40a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d112      	bne.n	800b438 <USB_EPStartXfer+0x7de>
 800b412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b414:	881b      	ldrh	r3, [r3, #0]
 800b416:	b29b      	uxth	r3, r3
 800b418:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b420:	801a      	strh	r2, [r3, #0]
 800b422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b424:	881b      	ldrh	r3, [r3, #0]
 800b426:	b29b      	uxth	r3, r3
 800b428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b42c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b430:	b29a      	uxth	r2, r3
 800b432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b434:	801a      	strh	r2, [r3, #0]
 800b436:	e03c      	b.n	800b4b2 <USB_EPStartXfer+0x858>
 800b438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b43c:	085b      	lsrs	r3, r3, #1
 800b43e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b446:	f003 0301 	and.w	r3, r3, #1
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d004      	beq.n	800b458 <USB_EPStartXfer+0x7fe>
 800b44e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b452:	3301      	adds	r3, #1
 800b454:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	029b      	lsls	r3, r3, #10
 800b460:	b29a      	uxth	r2, r3
 800b462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b464:	801a      	strh	r2, [r3, #0]
 800b466:	e024      	b.n	800b4b2 <USB_EPStartXfer+0x858>
 800b468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b46c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	785b      	ldrb	r3, [r3, #1]
 800b474:	2b01      	cmp	r3, #1
 800b476:	d11c      	bne.n	800b4b2 <USB_EPStartXfer+0x858>
 800b478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b47c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b486:	b29b      	uxth	r3, r3
 800b488:	461a      	mov	r2, r3
 800b48a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b48c:	4413      	add	r3, r2
 800b48e:	643b      	str	r3, [r7, #64]	; 0x40
 800b490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	00da      	lsls	r2, r3, #3
 800b49e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4a0:	4413      	add	r3, r2
 800b4a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ac:	b29a      	uxth	r2, r3
 800b4ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b4b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	895b      	ldrh	r3, [r3, #10]
 800b4be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b4c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	6959      	ldr	r1, [r3, #20]
 800b4ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b4d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b4dc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b4e0:	6800      	ldr	r0, [r0, #0]
 800b4e2:	f001 f84b 	bl	800c57c <USB_WritePMA>
 800b4e6:	e213      	b.n	800b910 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	6a1b      	ldr	r3, [r3, #32]
 800b4f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b4f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	4413      	add	r3, r2
 800b512:	881b      	ldrh	r3, [r3, #0]
 800b514:	b29b      	uxth	r3, r3
 800b516:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b51a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b51e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b526:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	441a      	add	r2, r3
 800b53c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b54c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b550:	b29b      	uxth	r3, r3
 800b552:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b558:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b564:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b56e:	b29b      	uxth	r3, r3
 800b570:	461a      	mov	r2, r3
 800b572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b574:	4413      	add	r3, r2
 800b576:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b57c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	00da      	lsls	r2, r3, #3
 800b586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b588:	4413      	add	r3, r2
 800b58a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b58e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b594:	b29a      	uxth	r2, r3
 800b596:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b598:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b59a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b59e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	891b      	ldrh	r3, [r3, #8]
 800b5a6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b5aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	6959      	ldr	r1, [r3, #20]
 800b5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b5c0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b5c4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b5c8:	6800      	ldr	r0, [r0, #0]
 800b5ca:	f000 ffd7 	bl	800c57c <USB_WritePMA>
 800b5ce:	e19f      	b.n	800b910 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b5d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	6a1a      	ldr	r2, [r3, #32]
 800b5dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5e0:	1ad2      	subs	r2, r2, r3
 800b5e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b5ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	4413      	add	r3, r2
 800b608:	881b      	ldrh	r3, [r3, #0]
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b610:	2b00      	cmp	r3, #0
 800b612:	f000 80bc 	beq.w	800b78e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b61a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	673b      	str	r3, [r7, #112]	; 0x70
 800b622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	785b      	ldrb	r3, [r3, #1]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d16d      	bne.n	800b70e <USB_EPStartXfer+0xab4>
 800b632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b636:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b63e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b642:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	461a      	mov	r2, r3
 800b650:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b652:	4413      	add	r3, r2
 800b654:	66bb      	str	r3, [r7, #104]	; 0x68
 800b656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b65a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	00da      	lsls	r2, r3, #3
 800b664:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b666:	4413      	add	r3, r2
 800b668:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b66c:	667b      	str	r3, [r7, #100]	; 0x64
 800b66e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b672:	2b3e      	cmp	r3, #62	; 0x3e
 800b674:	d91c      	bls.n	800b6b0 <USB_EPStartXfer+0xa56>
 800b676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b67a:	095b      	lsrs	r3, r3, #5
 800b67c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b684:	f003 031f 	and.w	r3, r3, #31
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d104      	bne.n	800b696 <USB_EPStartXfer+0xa3c>
 800b68c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b690:	3b01      	subs	r3, #1
 800b692:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b696:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	029b      	lsls	r3, r3, #10
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6a8:	b29a      	uxth	r2, r3
 800b6aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6ac:	801a      	strh	r2, [r3, #0]
 800b6ae:	e053      	b.n	800b758 <USB_EPStartXfer+0xafe>
 800b6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d112      	bne.n	800b6de <USB_EPStartXfer+0xa84>
 800b6b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6ba:	881b      	ldrh	r3, [r3, #0]
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6c6:	801a      	strh	r2, [r3, #0]
 800b6c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6ca:	881b      	ldrh	r3, [r3, #0]
 800b6cc:	b29b      	uxth	r3, r3
 800b6ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6da:	801a      	strh	r2, [r3, #0]
 800b6dc:	e03c      	b.n	800b758 <USB_EPStartXfer+0xafe>
 800b6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e2:	085b      	lsrs	r3, r3, #1
 800b6e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ec:	f003 0301 	and.w	r3, r3, #1
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d004      	beq.n	800b6fe <USB_EPStartXfer+0xaa4>
 800b6f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b6fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b702:	b29b      	uxth	r3, r3
 800b704:	029b      	lsls	r3, r3, #10
 800b706:	b29a      	uxth	r2, r3
 800b708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b70a:	801a      	strh	r2, [r3, #0]
 800b70c:	e024      	b.n	800b758 <USB_EPStartXfer+0xafe>
 800b70e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	785b      	ldrb	r3, [r3, #1]
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d11c      	bne.n	800b758 <USB_EPStartXfer+0xafe>
 800b71e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b722:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	461a      	mov	r2, r3
 800b730:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b732:	4413      	add	r3, r2
 800b734:	673b      	str	r3, [r7, #112]	; 0x70
 800b736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b73a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	00da      	lsls	r2, r3, #3
 800b744:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b746:	4413      	add	r3, r2
 800b748:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b74c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b752:	b29a      	uxth	r2, r3
 800b754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b756:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b75c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	895b      	ldrh	r3, [r3, #10]
 800b764:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b76c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	6959      	ldr	r1, [r3, #20]
 800b774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b778:	b29b      	uxth	r3, r3
 800b77a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b77e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b782:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b786:	6800      	ldr	r0, [r0, #0]
 800b788:	f000 fef8 	bl	800c57c <USB_WritePMA>
 800b78c:	e0c0      	b.n	800b910 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b78e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	785b      	ldrb	r3, [r3, #1]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d16d      	bne.n	800b87a <USB_EPStartXfer+0xc20>
 800b79e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b7aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b7be:	4413      	add	r3, r2
 800b7c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b7c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	00da      	lsls	r2, r3, #3
 800b7d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b7d2:	4413      	add	r3, r2
 800b7d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b7d8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7de:	2b3e      	cmp	r3, #62	; 0x3e
 800b7e0:	d91c      	bls.n	800b81c <USB_EPStartXfer+0xbc2>
 800b7e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7e6:	095b      	lsrs	r3, r3, #5
 800b7e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b7ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f0:	f003 031f 	and.w	r3, r3, #31
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d104      	bne.n	800b802 <USB_EPStartXfer+0xba8>
 800b7f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b802:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b806:	b29b      	uxth	r3, r3
 800b808:	029b      	lsls	r3, r3, #10
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b814:	b29a      	uxth	r2, r3
 800b816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b818:	801a      	strh	r2, [r3, #0]
 800b81a:	e05f      	b.n	800b8dc <USB_EPStartXfer+0xc82>
 800b81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b820:	2b00      	cmp	r3, #0
 800b822:	d112      	bne.n	800b84a <USB_EPStartXfer+0xbf0>
 800b824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b826:	881b      	ldrh	r3, [r3, #0]
 800b828:	b29b      	uxth	r3, r3
 800b82a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b82e:	b29a      	uxth	r2, r3
 800b830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b832:	801a      	strh	r2, [r3, #0]
 800b834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b836:	881b      	ldrh	r3, [r3, #0]
 800b838:	b29b      	uxth	r3, r3
 800b83a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b83e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b842:	b29a      	uxth	r2, r3
 800b844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b846:	801a      	strh	r2, [r3, #0]
 800b848:	e048      	b.n	800b8dc <USB_EPStartXfer+0xc82>
 800b84a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b84e:	085b      	lsrs	r3, r3, #1
 800b850:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b858:	f003 0301 	and.w	r3, r3, #1
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d004      	beq.n	800b86a <USB_EPStartXfer+0xc10>
 800b860:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b864:	3301      	adds	r3, #1
 800b866:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b86a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b86e:	b29b      	uxth	r3, r3
 800b870:	029b      	lsls	r3, r3, #10
 800b872:	b29a      	uxth	r2, r3
 800b874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b876:	801a      	strh	r2, [r3, #0]
 800b878:	e030      	b.n	800b8dc <USB_EPStartXfer+0xc82>
 800b87a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b87e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	785b      	ldrb	r3, [r3, #1]
 800b886:	2b01      	cmp	r3, #1
 800b888:	d128      	bne.n	800b8dc <USB_EPStartXfer+0xc82>
 800b88a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b88e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b89c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b8ae:	4413      	add	r3, r2
 800b8b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b8b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	00da      	lsls	r2, r3, #3
 800b8c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b8c6:	4413      	add	r3, r2
 800b8c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b8cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b8d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b8da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b8dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	891b      	ldrh	r3, [r3, #8]
 800b8e8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b8ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	6959      	ldr	r1, [r3, #20]
 800b8f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b902:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b906:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b90a:	6800      	ldr	r0, [r0, #0]
 800b90c:	f000 fe36 	bl	800c57c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b914:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b91e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	4413      	add	r3, r2
 800b92a:	881b      	ldrh	r3, [r3, #0]
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b936:	817b      	strh	r3, [r7, #10]
 800b938:	897b      	ldrh	r3, [r7, #10]
 800b93a:	f083 0310 	eor.w	r3, r3, #16
 800b93e:	817b      	strh	r3, [r7, #10]
 800b940:	897b      	ldrh	r3, [r7, #10]
 800b942:	f083 0320 	eor.w	r3, r3, #32
 800b946:	817b      	strh	r3, [r7, #10]
 800b948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b94c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	441a      	add	r2, r3
 800b962:	897b      	ldrh	r3, [r7, #10]
 800b964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b96c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b974:	b29b      	uxth	r3, r3
 800b976:	8013      	strh	r3, [r2, #0]
 800b978:	f000 bc9f 	b.w	800c2ba <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b97c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	7b1b      	ldrb	r3, [r3, #12]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f040 80ae 	bne.w	800baea <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b98e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	699a      	ldr	r2, [r3, #24]
 800b99a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b99e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	691b      	ldr	r3, [r3, #16]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d917      	bls.n	800b9da <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800b9aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	691b      	ldr	r3, [r3, #16]
 800b9b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800b9ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	699a      	ldr	r2, [r3, #24]
 800b9c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ca:	1ad2      	subs	r2, r2, r3
 800b9cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	619a      	str	r2, [r3, #24]
 800b9d8:	e00e      	b.n	800b9f8 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800b9da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	699b      	ldr	r3, [r3, #24]
 800b9e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800b9ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b9f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ba06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	461a      	mov	r2, r3
 800ba18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba1c:	4413      	add	r3, r2
 800ba1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ba22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	00da      	lsls	r2, r3, #3
 800ba30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba34:	4413      	add	r3, r2
 800ba36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ba3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba42:	2b3e      	cmp	r3, #62	; 0x3e
 800ba44:	d91d      	bls.n	800ba82 <USB_EPStartXfer+0xe28>
 800ba46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba4a:	095b      	lsrs	r3, r3, #5
 800ba4c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ba50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba54:	f003 031f 	and.w	r3, r3, #31
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d104      	bne.n	800ba66 <USB_EPStartXfer+0xe0c>
 800ba5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ba60:	3b01      	subs	r3, #1
 800ba62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ba66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	029b      	lsls	r3, r3, #10
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba78:	b29a      	uxth	r2, r3
 800ba7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba7e:	801a      	strh	r2, [r3, #0]
 800ba80:	e3e1      	b.n	800c246 <USB_EPStartXfer+0x15ec>
 800ba82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d116      	bne.n	800bab8 <USB_EPStartXfer+0xe5e>
 800ba8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba8e:	881b      	ldrh	r3, [r3, #0]
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ba96:	b29a      	uxth	r2, r3
 800ba98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba9c:	801a      	strh	r2, [r3, #0]
 800ba9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800baa2:	881b      	ldrh	r3, [r3, #0]
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800baaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800baae:	b29a      	uxth	r2, r3
 800bab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bab4:	801a      	strh	r2, [r3, #0]
 800bab6:	e3c6      	b.n	800c246 <USB_EPStartXfer+0x15ec>
 800bab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800babc:	085b      	lsrs	r3, r3, #1
 800babe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bac6:	f003 0301 	and.w	r3, r3, #1
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d004      	beq.n	800bad8 <USB_EPStartXfer+0xe7e>
 800bace:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bad2:	3301      	adds	r3, #1
 800bad4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bad8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800badc:	b29b      	uxth	r3, r3
 800bade:	029b      	lsls	r3, r3, #10
 800bae0:	b29a      	uxth	r2, r3
 800bae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bae6:	801a      	strh	r2, [r3, #0]
 800bae8:	e3ad      	b.n	800c246 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800baea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	78db      	ldrb	r3, [r3, #3]
 800baf6:	2b02      	cmp	r3, #2
 800baf8:	f040 8200 	bne.w	800befc <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bafc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	785b      	ldrb	r3, [r3, #1]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	f040 8091 	bne.w	800bc30 <USB_EPStartXfer+0xfd6>
 800bb0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bb32:	4413      	add	r3, r2
 800bb34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	00da      	lsls	r2, r3, #3
 800bb46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bb4a:	4413      	add	r3, r2
 800bb4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bb50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bb54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	2b3e      	cmp	r3, #62	; 0x3e
 800bb62:	d925      	bls.n	800bbb0 <USB_EPStartXfer+0xf56>
 800bb64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	691b      	ldr	r3, [r3, #16]
 800bb70:	095b      	lsrs	r3, r3, #5
 800bb72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bb76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	691b      	ldr	r3, [r3, #16]
 800bb82:	f003 031f 	and.w	r3, r3, #31
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d104      	bne.n	800bb94 <USB_EPStartXfer+0xf3a>
 800bb8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bb94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	029b      	lsls	r3, r3, #10
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bbac:	801a      	strh	r2, [r3, #0]
 800bbae:	e074      	b.n	800bc9a <USB_EPStartXfer+0x1040>
 800bbb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	691b      	ldr	r3, [r3, #16]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d116      	bne.n	800bbee <USB_EPStartXfer+0xf94>
 800bbc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bbc4:	881b      	ldrh	r3, [r3, #0]
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bbcc:	b29a      	uxth	r2, r3
 800bbce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bbd2:	801a      	strh	r2, [r3, #0]
 800bbd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bbd8:	881b      	ldrh	r3, [r3, #0]
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbe4:	b29a      	uxth	r2, r3
 800bbe6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bbea:	801a      	strh	r2, [r3, #0]
 800bbec:	e055      	b.n	800bc9a <USB_EPStartXfer+0x1040>
 800bbee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	085b      	lsrs	r3, r3, #1
 800bbfc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bc00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	691b      	ldr	r3, [r3, #16]
 800bc0c:	f003 0301 	and.w	r3, r3, #1
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d004      	beq.n	800bc1e <USB_EPStartXfer+0xfc4>
 800bc14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc18:	3301      	adds	r3, #1
 800bc1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bc1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	029b      	lsls	r3, r3, #10
 800bc26:	b29a      	uxth	r2, r3
 800bc28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bc2c:	801a      	strh	r2, [r3, #0]
 800bc2e:	e034      	b.n	800bc9a <USB_EPStartXfer+0x1040>
 800bc30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	785b      	ldrb	r3, [r3, #1]
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d12c      	bne.n	800bc9a <USB_EPStartXfer+0x1040>
 800bc40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	461a      	mov	r2, r3
 800bc60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bc64:	4413      	add	r3, r2
 800bc66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	00da      	lsls	r2, r3, #3
 800bc78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bc7c:	4413      	add	r3, r2
 800bc7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	691b      	ldr	r3, [r3, #16]
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bc98:	801a      	strh	r2, [r3, #0]
 800bc9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	785b      	ldrb	r3, [r3, #1]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f040 8091 	bne.w	800bddc <USB_EPStartXfer+0x1182>
 800bcba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bcc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bccc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcd6:	b29b      	uxth	r3, r3
 800bcd8:	461a      	mov	r2, r3
 800bcda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bcde:	4413      	add	r3, r2
 800bce0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	00da      	lsls	r2, r3, #3
 800bcf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bcf6:	4413      	add	r3, r2
 800bcf8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bcfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bd00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	691b      	ldr	r3, [r3, #16]
 800bd0c:	2b3e      	cmp	r3, #62	; 0x3e
 800bd0e:	d925      	bls.n	800bd5c <USB_EPStartXfer+0x1102>
 800bd10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	691b      	ldr	r3, [r3, #16]
 800bd1c:	095b      	lsrs	r3, r3, #5
 800bd1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bd22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	691b      	ldr	r3, [r3, #16]
 800bd2e:	f003 031f 	and.w	r3, r3, #31
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d104      	bne.n	800bd40 <USB_EPStartXfer+0x10e6>
 800bd36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bd40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	029b      	lsls	r3, r3, #10
 800bd48:	b29b      	uxth	r3, r3
 800bd4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd52:	b29a      	uxth	r2, r3
 800bd54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd58:	801a      	strh	r2, [r3, #0]
 800bd5a:	e06d      	b.n	800be38 <USB_EPStartXfer+0x11de>
 800bd5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	691b      	ldr	r3, [r3, #16]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d116      	bne.n	800bd9a <USB_EPStartXfer+0x1140>
 800bd6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd70:	881b      	ldrh	r3, [r3, #0]
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd7e:	801a      	strh	r2, [r3, #0]
 800bd80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd84:	881b      	ldrh	r3, [r3, #0]
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd96:	801a      	strh	r2, [r3, #0]
 800bd98:	e04e      	b.n	800be38 <USB_EPStartXfer+0x11de>
 800bd9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	085b      	lsrs	r3, r3, #1
 800bda8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bdac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	691b      	ldr	r3, [r3, #16]
 800bdb8:	f003 0301 	and.w	r3, r3, #1
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d004      	beq.n	800bdca <USB_EPStartXfer+0x1170>
 800bdc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bdca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	029b      	lsls	r3, r3, #10
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bdd8:	801a      	strh	r2, [r3, #0]
 800bdda:	e02d      	b.n	800be38 <USB_EPStartXfer+0x11de>
 800bddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bde0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	785b      	ldrb	r3, [r3, #1]
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d125      	bne.n	800be38 <USB_EPStartXfer+0x11de>
 800bdec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800be02:	4413      	add	r3, r2
 800be04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800be08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	00da      	lsls	r2, r3, #3
 800be16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800be1a:	4413      	add	r3, r2
 800be1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800be20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800be24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	b29a      	uxth	r2, r3
 800be32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be36:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800be38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	69db      	ldr	r3, [r3, #28]
 800be44:	2b00      	cmp	r3, #0
 800be46:	f000 81fe 	beq.w	800c246 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800be4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	4413      	add	r3, r2
 800be64:	881b      	ldrh	r3, [r3, #0]
 800be66:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800be6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800be6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be72:	2b00      	cmp	r3, #0
 800be74:	d005      	beq.n	800be82 <USB_EPStartXfer+0x1228>
 800be76:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800be7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d10d      	bne.n	800be9e <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800be82:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800be86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f040 81db 	bne.w	800c246 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800be90:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800be94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be98:	2b00      	cmp	r3, #0
 800be9a:	f040 81d4 	bne.w	800c246 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800be9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800beac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	4413      	add	r3, r2
 800beb8:	881b      	ldrh	r3, [r3, #0]
 800beba:	b29b      	uxth	r3, r3
 800bebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bec4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800bec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800becc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bed6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	441a      	add	r2, r3
 800bee2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800bee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800beea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800beee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bef2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	8013      	strh	r3, [r2, #0]
 800befa:	e1a4      	b.n	800c246 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800befc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	78db      	ldrb	r3, [r3, #3]
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	f040 819a 	bne.w	800c242 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800bf0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	699a      	ldr	r2, [r3, #24]
 800bf1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d917      	bls.n	800bf5a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800bf2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800bf3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	699a      	ldr	r2, [r3, #24]
 800bf46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf4a:	1ad2      	subs	r2, r2, r3
 800bf4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	619a      	str	r2, [r3, #24]
 800bf58:	e00e      	b.n	800bf78 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800bf5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	699b      	ldr	r3, [r3, #24]
 800bf66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800bf6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2200      	movs	r2, #0
 800bf76:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bf78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	785b      	ldrb	r3, [r3, #1]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d178      	bne.n	800c07a <USB_EPStartXfer+0x1420>
 800bf88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bf96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfa4:	b29b      	uxth	r3, r3
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bfac:	4413      	add	r3, r2
 800bfae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bfb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	00da      	lsls	r2, r3, #3
 800bfc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bfc4:	4413      	add	r3, r2
 800bfc6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bfca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bfce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfd2:	2b3e      	cmp	r3, #62	; 0x3e
 800bfd4:	d91d      	bls.n	800c012 <USB_EPStartXfer+0x13b8>
 800bfd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfda:	095b      	lsrs	r3, r3, #5
 800bfdc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bfe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfe4:	f003 031f 	and.w	r3, r3, #31
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d104      	bne.n	800bff6 <USB_EPStartXfer+0x139c>
 800bfec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bff0:	3b01      	subs	r3, #1
 800bff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	029b      	lsls	r3, r3, #10
 800bffe:	b29b      	uxth	r3, r3
 800c000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c008:	b29a      	uxth	r2, r3
 800c00a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c00e:	801a      	strh	r2, [r3, #0]
 800c010:	e064      	b.n	800c0dc <USB_EPStartXfer+0x1482>
 800c012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c016:	2b00      	cmp	r3, #0
 800c018:	d116      	bne.n	800c048 <USB_EPStartXfer+0x13ee>
 800c01a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c01e:	881b      	ldrh	r3, [r3, #0]
 800c020:	b29b      	uxth	r3, r3
 800c022:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c026:	b29a      	uxth	r2, r3
 800c028:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c02c:	801a      	strh	r2, [r3, #0]
 800c02e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c032:	881b      	ldrh	r3, [r3, #0]
 800c034:	b29b      	uxth	r3, r3
 800c036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c03a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c03e:	b29a      	uxth	r2, r3
 800c040:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c044:	801a      	strh	r2, [r3, #0]
 800c046:	e049      	b.n	800c0dc <USB_EPStartXfer+0x1482>
 800c048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c04c:	085b      	lsrs	r3, r3, #1
 800c04e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c056:	f003 0301 	and.w	r3, r3, #1
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d004      	beq.n	800c068 <USB_EPStartXfer+0x140e>
 800c05e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c062:	3301      	adds	r3, #1
 800c064:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	029b      	lsls	r3, r3, #10
 800c070:	b29a      	uxth	r2, r3
 800c072:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c076:	801a      	strh	r2, [r3, #0]
 800c078:	e030      	b.n	800c0dc <USB_EPStartXfer+0x1482>
 800c07a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c07e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	785b      	ldrb	r3, [r3, #1]
 800c086:	2b01      	cmp	r3, #1
 800c088:	d128      	bne.n	800c0dc <USB_EPStartXfer+0x1482>
 800c08a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c08e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c09c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c0ae:	4413      	add	r3, r2
 800c0b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c0b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	00da      	lsls	r2, r3, #3
 800c0c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c0c6:	4413      	add	r3, r2
 800c0c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c0cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c0d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c0da:	801a      	strh	r2, [r3, #0]
 800c0dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c0ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	785b      	ldrb	r3, [r3, #1]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d178      	bne.n	800c1ec <USB_EPStartXfer+0x1592>
 800c0fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c10c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c116:	b29b      	uxth	r3, r3
 800c118:	461a      	mov	r2, r3
 800c11a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c11e:	4413      	add	r3, r2
 800c120:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	00da      	lsls	r2, r3, #3
 800c132:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c136:	4413      	add	r3, r2
 800c138:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c13c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c144:	2b3e      	cmp	r3, #62	; 0x3e
 800c146:	d91d      	bls.n	800c184 <USB_EPStartXfer+0x152a>
 800c148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c14c:	095b      	lsrs	r3, r3, #5
 800c14e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c156:	f003 031f 	and.w	r3, r3, #31
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d104      	bne.n	800c168 <USB_EPStartXfer+0x150e>
 800c15e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c162:	3b01      	subs	r3, #1
 800c164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c168:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	029b      	lsls	r3, r3, #10
 800c170:	b29b      	uxth	r3, r3
 800c172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c180:	801a      	strh	r2, [r3, #0]
 800c182:	e060      	b.n	800c246 <USB_EPStartXfer+0x15ec>
 800c184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d116      	bne.n	800c1ba <USB_EPStartXfer+0x1560>
 800c18c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c190:	881b      	ldrh	r3, [r3, #0]
 800c192:	b29b      	uxth	r3, r3
 800c194:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c198:	b29a      	uxth	r2, r3
 800c19a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c19e:	801a      	strh	r2, [r3, #0]
 800c1a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c1a4:	881b      	ldrh	r3, [r3, #0]
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1b0:	b29a      	uxth	r2, r3
 800c1b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c1b6:	801a      	strh	r2, [r3, #0]
 800c1b8:	e045      	b.n	800c246 <USB_EPStartXfer+0x15ec>
 800c1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1be:	085b      	lsrs	r3, r3, #1
 800c1c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1c8:	f003 0301 	and.w	r3, r3, #1
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d004      	beq.n	800c1da <USB_EPStartXfer+0x1580>
 800c1d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c1da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	029b      	lsls	r3, r3, #10
 800c1e2:	b29a      	uxth	r2, r3
 800c1e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c1e8:	801a      	strh	r2, [r3, #0]
 800c1ea:	e02c      	b.n	800c246 <USB_EPStartXfer+0x15ec>
 800c1ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	785b      	ldrb	r3, [r3, #1]
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d124      	bne.n	800c246 <USB_EPStartXfer+0x15ec>
 800c1fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c200:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	461a      	mov	r2, r3
 800c20e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c212:	4413      	add	r3, r2
 800c214:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c21c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	00da      	lsls	r2, r3, #3
 800c226:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c22a:	4413      	add	r3, r2
 800c22c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c230:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c238:	b29a      	uxth	r2, r3
 800c23a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c23e:	801a      	strh	r2, [r3, #0]
 800c240:	e001      	b.n	800c246 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800c242:	2301      	movs	r3, #1
 800c244:	e03a      	b.n	800c2bc <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c24a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	4413      	add	r3, r2
 800c260:	881b      	ldrh	r3, [r3, #0]
 800c262:	b29b      	uxth	r3, r3
 800c264:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c26c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c270:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c274:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c278:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c27c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c280:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c284:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c28c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	441a      	add	r2, r3
 800c2a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c2a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c2ba:	2300      	movs	r3, #0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}

0800c2c6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c2c6:	b480      	push	{r7}
 800c2c8:	b085      	sub	sp, #20
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
 800c2ce:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	785b      	ldrb	r3, [r3, #1]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d020      	beq.n	800c31a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c2d8:	687a      	ldr	r2, [r7, #4]
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	4413      	add	r3, r2
 800c2e2:	881b      	ldrh	r3, [r3, #0]
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c2ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2ee:	81bb      	strh	r3, [r7, #12]
 800c2f0:	89bb      	ldrh	r3, [r7, #12]
 800c2f2:	f083 0310 	eor.w	r3, r3, #16
 800c2f6:	81bb      	strh	r3, [r7, #12]
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	441a      	add	r2, r3
 800c302:	89bb      	ldrh	r3, [r7, #12]
 800c304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c30c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c314:	b29b      	uxth	r3, r3
 800c316:	8013      	strh	r3, [r2, #0]
 800c318:	e01f      	b.n	800c35a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	4413      	add	r3, r2
 800c324:	881b      	ldrh	r3, [r3, #0]
 800c326:	b29b      	uxth	r3, r3
 800c328:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c32c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c330:	81fb      	strh	r3, [r7, #14]
 800c332:	89fb      	ldrh	r3, [r7, #14]
 800c334:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c338:	81fb      	strh	r3, [r7, #14]
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	009b      	lsls	r3, r3, #2
 800c342:	441a      	add	r2, r3
 800c344:	89fb      	ldrh	r3, [r7, #14]
 800c346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c34a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c34e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c356:	b29b      	uxth	r3, r3
 800c358:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3714      	adds	r7, #20
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c368:	b480      	push	{r7}
 800c36a:	b087      	sub	sp, #28
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	7b1b      	ldrb	r3, [r3, #12]
 800c376:	2b00      	cmp	r3, #0
 800c378:	f040 809d 	bne.w	800c4b6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	785b      	ldrb	r3, [r3, #1]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d04c      	beq.n	800c41e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	4413      	add	r3, r2
 800c38e:	881b      	ldrh	r3, [r3, #0]
 800c390:	823b      	strh	r3, [r7, #16]
 800c392:	8a3b      	ldrh	r3, [r7, #16]
 800c394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d01b      	beq.n	800c3d4 <USB_EPClearStall+0x6c>
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	4413      	add	r3, r2
 800c3a6:	881b      	ldrh	r3, [r3, #0]
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3b2:	81fb      	strh	r3, [r7, #14]
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	441a      	add	r2, r3
 800c3be:	89fb      	ldrh	r3, [r7, #14]
 800c3c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	78db      	ldrb	r3, [r3, #3]
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d06c      	beq.n	800c4b6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	4413      	add	r3, r2
 800c3e6:	881b      	ldrh	r3, [r3, #0]
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3f2:	81bb      	strh	r3, [r7, #12]
 800c3f4:	89bb      	ldrh	r3, [r7, #12]
 800c3f6:	f083 0320 	eor.w	r3, r3, #32
 800c3fa:	81bb      	strh	r3, [r7, #12]
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	441a      	add	r2, r3
 800c406:	89bb      	ldrh	r3, [r7, #12]
 800c408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c40c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c418:	b29b      	uxth	r3, r3
 800c41a:	8013      	strh	r3, [r2, #0]
 800c41c:	e04b      	b.n	800c4b6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	4413      	add	r3, r2
 800c428:	881b      	ldrh	r3, [r3, #0]
 800c42a:	82fb      	strh	r3, [r7, #22]
 800c42c:	8afb      	ldrh	r3, [r7, #22]
 800c42e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c432:	2b00      	cmp	r3, #0
 800c434:	d01b      	beq.n	800c46e <USB_EPClearStall+0x106>
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	4413      	add	r3, r2
 800c440:	881b      	ldrh	r3, [r3, #0]
 800c442:	b29b      	uxth	r3, r3
 800c444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c44c:	82bb      	strh	r3, [r7, #20]
 800c44e:	687a      	ldr	r2, [r7, #4]
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	009b      	lsls	r3, r3, #2
 800c456:	441a      	add	r2, r3
 800c458:	8abb      	ldrh	r3, [r7, #20]
 800c45a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c45e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c462:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	4413      	add	r3, r2
 800c478:	881b      	ldrh	r3, [r3, #0]
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c484:	827b      	strh	r3, [r7, #18]
 800c486:	8a7b      	ldrh	r3, [r7, #18]
 800c488:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c48c:	827b      	strh	r3, [r7, #18]
 800c48e:	8a7b      	ldrh	r3, [r7, #18]
 800c490:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c494:	827b      	strh	r3, [r7, #18]
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	009b      	lsls	r3, r3, #2
 800c49e:	441a      	add	r2, r3
 800c4a0:	8a7b      	ldrh	r3, [r7, #18]
 800c4a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c4b6:	2300      	movs	r3, #0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	371c      	adds	r7, #28
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr

0800c4c4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c4d0:	78fb      	ldrb	r3, [r7, #3]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d103      	bne.n	800c4de <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2280      	movs	r2, #128	; 0x80
 800c4da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c4de:	2300      	movs	r3, #0
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	370c      	adds	r7, #12
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c504:	b29a      	uxth	r2, r3
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c50c:	2300      	movs	r3, #0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	370c      	adds	r7, #12
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr

0800c51a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800c51a:	b480      	push	{r7}
 800c51c:	b083      	sub	sp, #12
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c528:	b29b      	uxth	r3, r3
 800c52a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c52e:	b29a      	uxth	r2, r3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c536:	2300      	movs	r3, #0
}
 800c538:	4618      	mov	r0, r3
 800c53a:	370c      	adds	r7, #12
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c544:	b480      	push	{r7}
 800c546:	b085      	sub	sp, #20
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c552:	b29b      	uxth	r3, r3
 800c554:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c556:	68fb      	ldr	r3, [r7, #12]
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3714      	adds	r7, #20
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800c564:	b480      	push	{r7}
 800c566:	b083      	sub	sp, #12
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c56e:	2300      	movs	r3, #0
}
 800c570:	4618      	mov	r0, r3
 800c572:	370c      	adds	r7, #12
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr

0800c57c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b08b      	sub	sp, #44	; 0x2c
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	4611      	mov	r1, r2
 800c588:	461a      	mov	r2, r3
 800c58a:	460b      	mov	r3, r1
 800c58c:	80fb      	strh	r3, [r7, #6]
 800c58e:	4613      	mov	r3, r2
 800c590:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c592:	88bb      	ldrh	r3, [r7, #4]
 800c594:	3301      	adds	r3, #1
 800c596:	085b      	lsrs	r3, r3, #1
 800c598:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c5a2:	88fa      	ldrh	r2, [r7, #6]
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	4413      	add	r3, r2
 800c5a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c5ac:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c5ae:	69bb      	ldr	r3, [r7, #24]
 800c5b0:	627b      	str	r3, [r7, #36]	; 0x24
 800c5b2:	e01b      	b.n	800c5ec <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800c5b4:	69fb      	ldr	r3, [r7, #28]
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	3301      	adds	r3, #1
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	021b      	lsls	r3, r3, #8
 800c5c2:	b21a      	sxth	r2, r3
 800c5c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	b21b      	sxth	r3, r3
 800c5cc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c5ce:	6a3b      	ldr	r3, [r7, #32]
 800c5d0:	8a7a      	ldrh	r2, [r7, #18]
 800c5d2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c5d4:	6a3b      	ldr	r3, [r7, #32]
 800c5d6:	3302      	adds	r3, #2
 800c5d8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	3301      	adds	r3, #1
 800c5de:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	627b      	str	r3, [r7, #36]	; 0x24
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1e0      	bne.n	800c5b4 <USB_WritePMA+0x38>
  }
}
 800c5f2:	bf00      	nop
 800c5f4:	bf00      	nop
 800c5f6:	372c      	adds	r7, #44	; 0x2c
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr

0800c600 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c600:	b480      	push	{r7}
 800c602:	b08b      	sub	sp, #44	; 0x2c
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	4611      	mov	r1, r2
 800c60c:	461a      	mov	r2, r3
 800c60e:	460b      	mov	r3, r1
 800c610:	80fb      	strh	r3, [r7, #6]
 800c612:	4613      	mov	r3, r2
 800c614:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c616:	88bb      	ldrh	r3, [r7, #4]
 800c618:	085b      	lsrs	r3, r3, #1
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c626:	88fa      	ldrh	r2, [r7, #6]
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	4413      	add	r3, r2
 800c62c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c630:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c632:	69bb      	ldr	r3, [r7, #24]
 800c634:	627b      	str	r3, [r7, #36]	; 0x24
 800c636:	e018      	b.n	800c66a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c638:	6a3b      	ldr	r3, [r7, #32]
 800c63a:	881b      	ldrh	r3, [r3, #0]
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c640:	6a3b      	ldr	r3, [r7, #32]
 800c642:	3302      	adds	r3, #2
 800c644:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	b2da      	uxtb	r2, r3
 800c64a:	69fb      	ldr	r3, [r7, #28]
 800c64c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c64e:	69fb      	ldr	r3, [r7, #28]
 800c650:	3301      	adds	r3, #1
 800c652:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	0a1b      	lsrs	r3, r3, #8
 800c658:	b2da      	uxtb	r2, r3
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	3301      	adds	r3, #1
 800c662:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c666:	3b01      	subs	r3, #1
 800c668:	627b      	str	r3, [r7, #36]	; 0x24
 800c66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d1e3      	bne.n	800c638 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c670:	88bb      	ldrh	r3, [r7, #4]
 800c672:	f003 0301 	and.w	r3, r3, #1
 800c676:	b29b      	uxth	r3, r3
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d007      	beq.n	800c68c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800c67c:	6a3b      	ldr	r3, [r7, #32]
 800c67e:	881b      	ldrh	r3, [r3, #0]
 800c680:	b29b      	uxth	r3, r3
 800c682:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	b2da      	uxtb	r2, r3
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	701a      	strb	r2, [r3, #0]
  }
}
 800c68c:	bf00      	nop
 800c68e:	372c      	adds	r7, #44	; 0x2c
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c6a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c6a8:	f002 f960 	bl	800e96c <USBD_static_malloc>
 800c6ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d105      	bne.n	800c6c0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c6bc:	2302      	movs	r3, #2
 800c6be:	e066      	b.n	800c78e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	68fa      	ldr	r2, [r7, #12]
 800c6c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	7c1b      	ldrb	r3, [r3, #16]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d119      	bne.n	800c704 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c6d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6d4:	2202      	movs	r2, #2
 800c6d6:	2181      	movs	r1, #129	; 0x81
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f001 ff7f 	bl	800e5dc <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c6e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6e8:	2202      	movs	r2, #2
 800c6ea:	2101      	movs	r1, #1
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f001 ff75 	bl	800e5dc <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2210      	movs	r2, #16
 800c6fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800c702:	e016      	b.n	800c732 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c704:	2340      	movs	r3, #64	; 0x40
 800c706:	2202      	movs	r2, #2
 800c708:	2181      	movs	r1, #129	; 0x81
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f001 ff66 	bl	800e5dc <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c716:	2340      	movs	r3, #64	; 0x40
 800c718:	2202      	movs	r2, #2
 800c71a:	2101      	movs	r1, #1
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f001 ff5d 	bl	800e5dc <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2201      	movs	r2, #1
 800c726:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2210      	movs	r2, #16
 800c72e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c732:	2308      	movs	r3, #8
 800c734:	2203      	movs	r2, #3
 800c736:	2182      	movs	r1, #130	; 0x82
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f001 ff4f 	bl	800e5dc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2201      	movs	r2, #1
 800c742:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2200      	movs	r2, #0
 800c754:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2200      	movs	r2, #0
 800c75c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	7c1b      	ldrb	r3, [r3, #16]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d109      	bne.n	800c77c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c76e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c772:	2101      	movs	r1, #1
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f002 f8ad 	bl	800e8d4 <USBD_LL_PrepareReceive>
 800c77a:	e007      	b.n	800c78c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c782:	2340      	movs	r3, #64	; 0x40
 800c784:	2101      	movs	r1, #1
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f002 f8a4 	bl	800e8d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c78c:	2300      	movs	r3, #0
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3710      	adds	r7, #16
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c796:	b580      	push	{r7, lr}
 800c798:	b082      	sub	sp, #8
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
 800c79e:	460b      	mov	r3, r1
 800c7a0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c7a2:	2181      	movs	r1, #129	; 0x81
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f001 ff57 	bl	800e658 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c7b0:	2101      	movs	r1, #1
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f001 ff50 	bl	800e658 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c7c0:	2182      	movs	r1, #130	; 0x82
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f001 ff48 	bl	800e658 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d00e      	beq.n	800c800 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f002 f8c8 	bl	800e988 <USBD_static_free>
    pdev->pClassData = NULL;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c800:	2300      	movs	r3, #0
}
 800c802:	4618      	mov	r0, r3
 800c804:	3708      	adds	r7, #8
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
	...

0800c80c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b086      	sub	sp, #24
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c81c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c81e:	2300      	movs	r3, #0
 800c820:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c822:	2300      	movs	r3, #0
 800c824:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c826:	2300      	movs	r3, #0
 800c828:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d101      	bne.n	800c834 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c830:	2303      	movs	r3, #3
 800c832:	e0af      	b.n	800c994 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d03f      	beq.n	800c8c0 <USBD_CDC_Setup+0xb4>
 800c840:	2b20      	cmp	r3, #32
 800c842:	f040 809f 	bne.w	800c984 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	88db      	ldrh	r3, [r3, #6]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d02e      	beq.n	800c8ac <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	b25b      	sxtb	r3, r3
 800c854:	2b00      	cmp	r3, #0
 800c856:	da16      	bge.n	800c886 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	683a      	ldr	r2, [r7, #0]
 800c862:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c864:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c866:	683a      	ldr	r2, [r7, #0]
 800c868:	88d2      	ldrh	r2, [r2, #6]
 800c86a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	88db      	ldrh	r3, [r3, #6]
 800c870:	2b07      	cmp	r3, #7
 800c872:	bf28      	it	cs
 800c874:	2307      	movcs	r3, #7
 800c876:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	89fa      	ldrh	r2, [r7, #14]
 800c87c:	4619      	mov	r1, r3
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f001 faa5 	bl	800ddce <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c884:	e085      	b.n	800c992 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	785a      	ldrb	r2, [r3, #1]
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	88db      	ldrh	r3, [r3, #6]
 800c894:	b2da      	uxtb	r2, r3
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c89c:	6939      	ldr	r1, [r7, #16]
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	88db      	ldrh	r3, [r3, #6]
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f001 fabe 	bl	800de26 <USBD_CtlPrepareRx>
      break;
 800c8aa:	e072      	b.n	800c992 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8b2:	689b      	ldr	r3, [r3, #8]
 800c8b4:	683a      	ldr	r2, [r7, #0]
 800c8b6:	7850      	ldrb	r0, [r2, #1]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	6839      	ldr	r1, [r7, #0]
 800c8bc:	4798      	blx	r3
      break;
 800c8be:	e068      	b.n	800c992 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	785b      	ldrb	r3, [r3, #1]
 800c8c4:	2b0b      	cmp	r3, #11
 800c8c6:	d852      	bhi.n	800c96e <USBD_CDC_Setup+0x162>
 800c8c8:	a201      	add	r2, pc, #4	; (adr r2, 800c8d0 <USBD_CDC_Setup+0xc4>)
 800c8ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ce:	bf00      	nop
 800c8d0:	0800c901 	.word	0x0800c901
 800c8d4:	0800c97d 	.word	0x0800c97d
 800c8d8:	0800c96f 	.word	0x0800c96f
 800c8dc:	0800c96f 	.word	0x0800c96f
 800c8e0:	0800c96f 	.word	0x0800c96f
 800c8e4:	0800c96f 	.word	0x0800c96f
 800c8e8:	0800c96f 	.word	0x0800c96f
 800c8ec:	0800c96f 	.word	0x0800c96f
 800c8f0:	0800c96f 	.word	0x0800c96f
 800c8f4:	0800c96f 	.word	0x0800c96f
 800c8f8:	0800c92b 	.word	0x0800c92b
 800c8fc:	0800c955 	.word	0x0800c955
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c906:	b2db      	uxtb	r3, r3
 800c908:	2b03      	cmp	r3, #3
 800c90a:	d107      	bne.n	800c91c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c90c:	f107 030a 	add.w	r3, r7, #10
 800c910:	2202      	movs	r2, #2
 800c912:	4619      	mov	r1, r3
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f001 fa5a 	bl	800ddce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c91a:	e032      	b.n	800c982 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c91c:	6839      	ldr	r1, [r7, #0]
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f001 f9e4 	bl	800dcec <USBD_CtlError>
            ret = USBD_FAIL;
 800c924:	2303      	movs	r3, #3
 800c926:	75fb      	strb	r3, [r7, #23]
          break;
 800c928:	e02b      	b.n	800c982 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c930:	b2db      	uxtb	r3, r3
 800c932:	2b03      	cmp	r3, #3
 800c934:	d107      	bne.n	800c946 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c936:	f107 030d 	add.w	r3, r7, #13
 800c93a:	2201      	movs	r2, #1
 800c93c:	4619      	mov	r1, r3
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f001 fa45 	bl	800ddce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c944:	e01d      	b.n	800c982 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c946:	6839      	ldr	r1, [r7, #0]
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f001 f9cf 	bl	800dcec <USBD_CtlError>
            ret = USBD_FAIL;
 800c94e:	2303      	movs	r3, #3
 800c950:	75fb      	strb	r3, [r7, #23]
          break;
 800c952:	e016      	b.n	800c982 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	2b03      	cmp	r3, #3
 800c95e:	d00f      	beq.n	800c980 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c960:	6839      	ldr	r1, [r7, #0]
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f001 f9c2 	bl	800dcec <USBD_CtlError>
            ret = USBD_FAIL;
 800c968:	2303      	movs	r3, #3
 800c96a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c96c:	e008      	b.n	800c980 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c96e:	6839      	ldr	r1, [r7, #0]
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f001 f9bb 	bl	800dcec <USBD_CtlError>
          ret = USBD_FAIL;
 800c976:	2303      	movs	r3, #3
 800c978:	75fb      	strb	r3, [r7, #23]
          break;
 800c97a:	e002      	b.n	800c982 <USBD_CDC_Setup+0x176>
          break;
 800c97c:	bf00      	nop
 800c97e:	e008      	b.n	800c992 <USBD_CDC_Setup+0x186>
          break;
 800c980:	bf00      	nop
      }
      break;
 800c982:	e006      	b.n	800c992 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c984:	6839      	ldr	r1, [r7, #0]
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f001 f9b0 	bl	800dcec <USBD_CtlError>
      ret = USBD_FAIL;
 800c98c:	2303      	movs	r3, #3
 800c98e:	75fb      	strb	r3, [r7, #23]
      break;
 800c990:	bf00      	nop
  }

  return (uint8_t)ret;
 800c992:	7dfb      	ldrb	r3, [r7, #23]
}
 800c994:	4618      	mov	r0, r3
 800c996:	3718      	adds	r7, #24
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b084      	sub	sp, #16
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c9ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d101      	bne.n	800c9be <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c9ba:	2303      	movs	r3, #3
 800c9bc:	e04f      	b.n	800ca5e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c9c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c9c6:	78fa      	ldrb	r2, [r7, #3]
 800c9c8:	6879      	ldr	r1, [r7, #4]
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	009b      	lsls	r3, r3, #2
 800c9ce:	4413      	add	r3, r2
 800c9d0:	009b      	lsls	r3, r3, #2
 800c9d2:	440b      	add	r3, r1
 800c9d4:	3318      	adds	r3, #24
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d029      	beq.n	800ca30 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c9dc:	78fa      	ldrb	r2, [r7, #3]
 800c9de:	6879      	ldr	r1, [r7, #4]
 800c9e0:	4613      	mov	r3, r2
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	4413      	add	r3, r2
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	440b      	add	r3, r1
 800c9ea:	3318      	adds	r3, #24
 800c9ec:	681a      	ldr	r2, [r3, #0]
 800c9ee:	78f9      	ldrb	r1, [r7, #3]
 800c9f0:	68f8      	ldr	r0, [r7, #12]
 800c9f2:	460b      	mov	r3, r1
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	440b      	add	r3, r1
 800c9f8:	00db      	lsls	r3, r3, #3
 800c9fa:	4403      	add	r3, r0
 800c9fc:	333c      	adds	r3, #60	; 0x3c
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	fbb2 f1f3 	udiv	r1, r2, r3
 800ca04:	fb01 f303 	mul.w	r3, r1, r3
 800ca08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d110      	bne.n	800ca30 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ca0e:	78fa      	ldrb	r2, [r7, #3]
 800ca10:	6879      	ldr	r1, [r7, #4]
 800ca12:	4613      	mov	r3, r2
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	4413      	add	r3, r2
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	440b      	add	r3, r1
 800ca1c:	3318      	adds	r3, #24
 800ca1e:	2200      	movs	r2, #0
 800ca20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ca22:	78f9      	ldrb	r1, [r7, #3]
 800ca24:	2300      	movs	r3, #0
 800ca26:	2200      	movs	r2, #0
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f001 ff1b 	bl	800e864 <USBD_LL_Transmit>
 800ca2e:	e015      	b.n	800ca5c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	2200      	movs	r2, #0
 800ca34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca3e:	691b      	ldr	r3, [r3, #16]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d00b      	beq.n	800ca5c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca4a:	691b      	ldr	r3, [r3, #16]
 800ca4c:	68ba      	ldr	r2, [r7, #8]
 800ca4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ca52:	68ba      	ldr	r2, [r7, #8]
 800ca54:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ca58:	78fa      	ldrb	r2, [r7, #3]
 800ca5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ca5c:	2300      	movs	r3, #0
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}

0800ca66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b084      	sub	sp, #16
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
 800ca6e:	460b      	mov	r3, r1
 800ca70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca78:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d101      	bne.n	800ca88 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ca84:	2303      	movs	r3, #3
 800ca86:	e015      	b.n	800cab4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ca88:	78fb      	ldrb	r3, [r7, #3]
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f001 ff59 	bl	800e944 <USBD_LL_GetRxDataSize>
 800ca92:	4602      	mov	r2, r0
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800caa0:	68db      	ldr	r3, [r3, #12]
 800caa2:	68fa      	ldr	r2, [r7, #12]
 800caa4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800caa8:	68fa      	ldr	r2, [r7, #12]
 800caaa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800caae:	4611      	mov	r1, r2
 800cab0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cab2:	2300      	movs	r3, #0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b084      	sub	sp, #16
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800caca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d101      	bne.n	800cad6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800cad2:	2303      	movs	r3, #3
 800cad4:	e01b      	b.n	800cb0e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d015      	beq.n	800cb0c <USBD_CDC_EP0_RxReady+0x50>
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cae6:	2bff      	cmp	r3, #255	; 0xff
 800cae8:	d010      	beq.n	800cb0c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800caf0:	689b      	ldr	r3, [r3, #8]
 800caf2:	68fa      	ldr	r2, [r7, #12]
 800caf4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800caf8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cafa:	68fa      	ldr	r2, [r7, #12]
 800cafc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cb00:	b292      	uxth	r2, r2
 800cb02:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	22ff      	movs	r2, #255	; 0xff
 800cb08:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800cb0c:	2300      	movs	r3, #0
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3710      	adds	r7, #16
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
	...

0800cb18 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b083      	sub	sp, #12
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2243      	movs	r2, #67	; 0x43
 800cb24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800cb26:	4b03      	ldr	r3, [pc, #12]	; (800cb34 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	370c      	adds	r7, #12
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr
 800cb34:	200000b4 	.word	0x200000b4

0800cb38 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2243      	movs	r2, #67	; 0x43
 800cb44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800cb46:	4b03      	ldr	r3, [pc, #12]	; (800cb54 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr
 800cb54:	20000070 	.word	0x20000070

0800cb58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b083      	sub	sp, #12
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2243      	movs	r2, #67	; 0x43
 800cb64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800cb66:	4b03      	ldr	r3, [pc, #12]	; (800cb74 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr
 800cb74:	200000f8 	.word	0x200000f8

0800cb78 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	220a      	movs	r2, #10
 800cb84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cb86:	4b03      	ldr	r3, [pc, #12]	; (800cb94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	370c      	adds	r7, #12
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr
 800cb94:	2000002c 	.word	0x2000002c

0800cb98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b083      	sub	sp, #12
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d101      	bne.n	800cbac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cba8:	2303      	movs	r3, #3
 800cbaa:	e004      	b.n	800cbb6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	683a      	ldr	r2, [r7, #0]
 800cbb0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800cbb4:	2300      	movs	r3, #0
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	370c      	adds	r7, #12
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr

0800cbc2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cbc2:	b480      	push	{r7}
 800cbc4:	b087      	sub	sp, #28
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	60f8      	str	r0, [r7, #12]
 800cbca:	60b9      	str	r1, [r7, #8]
 800cbcc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cbd4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d101      	bne.n	800cbe0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800cbdc:	2303      	movs	r3, #3
 800cbde:	e008      	b.n	800cbf2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	68ba      	ldr	r2, [r7, #8]
 800cbe4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cbf0:	2300      	movs	r3, #0
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	371c      	adds	r7, #28
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr

0800cbfe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cbfe:	b480      	push	{r7}
 800cc00:	b085      	sub	sp, #20
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
 800cc06:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc0e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d101      	bne.n	800cc1a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800cc16:	2303      	movs	r3, #3
 800cc18:	e004      	b.n	800cc24 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	683a      	ldr	r2, [r7, #0]
 800cc1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cc22:	2300      	movs	r3, #0
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3714      	adds	r7, #20
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc3e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cc40:	2301      	movs	r3, #1
 800cc42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d101      	bne.n	800cc52 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cc4e:	2303      	movs	r3, #3
 800cc50:	e01a      	b.n	800cc88 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d114      	bne.n	800cc86 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	2201      	movs	r2, #1
 800cc60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800cc7a:	2181      	movs	r1, #129	; 0x81
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f001 fdf1 	bl	800e864 <USBD_LL_Transmit>

    ret = USBD_OK;
 800cc82:	2300      	movs	r3, #0
 800cc84:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cc86:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3710      	adds	r7, #16
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d101      	bne.n	800ccae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ccaa:	2303      	movs	r3, #3
 800ccac:	e016      	b.n	800ccdc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	7c1b      	ldrb	r3, [r3, #16]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d109      	bne.n	800ccca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ccbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ccc0:	2101      	movs	r1, #1
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f001 fe06 	bl	800e8d4 <USBD_LL_PrepareReceive>
 800ccc8:	e007      	b.n	800ccda <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ccd0:	2340      	movs	r3, #64	; 0x40
 800ccd2:	2101      	movs	r1, #1
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f001 fdfd 	bl	800e8d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ccda:	2300      	movs	r3, #0
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3710      	adds	r7, #16
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b086      	sub	sp, #24
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	4613      	mov	r3, r2
 800ccf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d101      	bne.n	800ccfc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ccf8:	2303      	movs	r3, #3
 800ccfa:	e01f      	b.n	800cd3c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d003      	beq.n	800cd22 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	68ba      	ldr	r2, [r7, #8]
 800cd1e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2201      	movs	r2, #1
 800cd26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	79fa      	ldrb	r2, [r7, #7]
 800cd2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	f001 fbbf 	bl	800e4b4 <USBD_LL_Init>
 800cd36:	4603      	mov	r3, r0
 800cd38:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cd3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3718      	adds	r7, #24
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b084      	sub	sp, #16
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d101      	bne.n	800cd5c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cd58:	2303      	movs	r3, #3
 800cd5a:	e016      	b.n	800cd8a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	683a      	ldr	r2, [r7, #0]
 800cd60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d00b      	beq.n	800cd88 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd78:	f107 020e 	add.w	r2, r7, #14
 800cd7c:	4610      	mov	r0, r2
 800cd7e:	4798      	blx	r3
 800cd80:	4602      	mov	r2, r0
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800cd88:	2300      	movs	r3, #0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3710      	adds	r7, #16
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}

0800cd92 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cd92:	b580      	push	{r7, lr}
 800cd94:	b082      	sub	sp, #8
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f001 fbec 	bl	800e578 <USBD_LL_Start>
 800cda0:	4603      	mov	r3, r0
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3708      	adds	r7, #8
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cdaa:	b480      	push	{r7}
 800cdac:	b083      	sub	sp, #12
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cdb2:	2300      	movs	r3, #0
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	370c      	adds	r7, #12
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	460b      	mov	r3, r1
 800cdca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cdcc:	2303      	movs	r3, #3
 800cdce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d009      	beq.n	800cdee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	78fa      	ldrb	r2, [r7, #3]
 800cde4:	4611      	mov	r1, r2
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	4798      	blx	r3
 800cdea:	4603      	mov	r3, r0
 800cdec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cdee:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3710      	adds	r7, #16
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}

0800cdf8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	460b      	mov	r3, r1
 800ce02:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d007      	beq.n	800ce1e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	78fa      	ldrb	r2, [r7, #3]
 800ce18:	4611      	mov	r1, r2
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	4798      	blx	r3
  }

  return USBD_OK;
 800ce1e:	2300      	movs	r3, #0
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3708      	adds	r7, #8
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce38:	6839      	ldr	r1, [r7, #0]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f000 ff1c 	bl	800dc78 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2201      	movs	r2, #1
 800ce44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ce4e:	461a      	mov	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ce5c:	f003 031f 	and.w	r3, r3, #31
 800ce60:	2b02      	cmp	r3, #2
 800ce62:	d01a      	beq.n	800ce9a <USBD_LL_SetupStage+0x72>
 800ce64:	2b02      	cmp	r3, #2
 800ce66:	d822      	bhi.n	800ceae <USBD_LL_SetupStage+0x86>
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d002      	beq.n	800ce72 <USBD_LL_SetupStage+0x4a>
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d00a      	beq.n	800ce86 <USBD_LL_SetupStage+0x5e>
 800ce70:	e01d      	b.n	800ceae <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce78:	4619      	mov	r1, r3
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 f9ee 	bl	800d25c <USBD_StdDevReq>
 800ce80:	4603      	mov	r3, r0
 800ce82:	73fb      	strb	r3, [r7, #15]
      break;
 800ce84:	e020      	b.n	800cec8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f000 fa52 	bl	800d338 <USBD_StdItfReq>
 800ce94:	4603      	mov	r3, r0
 800ce96:	73fb      	strb	r3, [r7, #15]
      break;
 800ce98:	e016      	b.n	800cec8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cea0:	4619      	mov	r1, r3
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 fa91 	bl	800d3ca <USBD_StdEPReq>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	73fb      	strb	r3, [r7, #15]
      break;
 800ceac:	e00c      	b.n	800cec8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ceb4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	4619      	mov	r1, r3
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f001 fc01 	bl	800e6c4 <USBD_LL_StallEP>
 800cec2:	4603      	mov	r3, r0
 800cec4:	73fb      	strb	r3, [r7, #15]
      break;
 800cec6:	bf00      	nop
  }

  return ret;
 800cec8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3710      	adds	r7, #16
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}

0800ced2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ced2:	b580      	push	{r7, lr}
 800ced4:	b086      	sub	sp, #24
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	60f8      	str	r0, [r7, #12]
 800ceda:	460b      	mov	r3, r1
 800cedc:	607a      	str	r2, [r7, #4]
 800cede:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cee0:	7afb      	ldrb	r3, [r7, #11]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d138      	bne.n	800cf58 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ceec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cef4:	2b03      	cmp	r3, #3
 800cef6:	d14a      	bne.n	800cf8e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	689a      	ldr	r2, [r3, #8]
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d913      	bls.n	800cf2c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	689a      	ldr	r2, [r3, #8]
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	68db      	ldr	r3, [r3, #12]
 800cf0c:	1ad2      	subs	r2, r2, r3
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	68da      	ldr	r2, [r3, #12]
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	689b      	ldr	r3, [r3, #8]
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	bf28      	it	cs
 800cf1e:	4613      	movcs	r3, r2
 800cf20:	461a      	mov	r2, r3
 800cf22:	6879      	ldr	r1, [r7, #4]
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	f000 ff9b 	bl	800de60 <USBD_CtlContinueRx>
 800cf2a:	e030      	b.n	800cf8e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf32:	b2db      	uxtb	r3, r3
 800cf34:	2b03      	cmp	r3, #3
 800cf36:	d10b      	bne.n	800cf50 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf3e:	691b      	ldr	r3, [r3, #16]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d005      	beq.n	800cf50 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf4a:	691b      	ldr	r3, [r3, #16]
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cf50:	68f8      	ldr	r0, [r7, #12]
 800cf52:	f000 ff96 	bl	800de82 <USBD_CtlSendStatus>
 800cf56:	e01a      	b.n	800cf8e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	2b03      	cmp	r3, #3
 800cf62:	d114      	bne.n	800cf8e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf6a:	699b      	ldr	r3, [r3, #24]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00e      	beq.n	800cf8e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf76:	699b      	ldr	r3, [r3, #24]
 800cf78:	7afa      	ldrb	r2, [r7, #11]
 800cf7a:	4611      	mov	r1, r2
 800cf7c:	68f8      	ldr	r0, [r7, #12]
 800cf7e:	4798      	blx	r3
 800cf80:	4603      	mov	r3, r0
 800cf82:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cf84:	7dfb      	ldrb	r3, [r7, #23]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d001      	beq.n	800cf8e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800cf8a:	7dfb      	ldrb	r3, [r7, #23]
 800cf8c:	e000      	b.n	800cf90 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800cf8e:	2300      	movs	r3, #0
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3718      	adds	r7, #24
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b086      	sub	sp, #24
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	460b      	mov	r3, r1
 800cfa2:	607a      	str	r2, [r7, #4]
 800cfa4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cfa6:	7afb      	ldrb	r3, [r7, #11]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d16b      	bne.n	800d084 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	3314      	adds	r3, #20
 800cfb0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cfb8:	2b02      	cmp	r3, #2
 800cfba:	d156      	bne.n	800d06a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	689a      	ldr	r2, [r3, #8]
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	68db      	ldr	r3, [r3, #12]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d914      	bls.n	800cff2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	689a      	ldr	r2, [r3, #8]
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	68db      	ldr	r3, [r3, #12]
 800cfd0:	1ad2      	subs	r2, r2, r3
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	461a      	mov	r2, r3
 800cfdc:	6879      	ldr	r1, [r7, #4]
 800cfde:	68f8      	ldr	r0, [r7, #12]
 800cfe0:	f000 ff10 	bl	800de04 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	2100      	movs	r1, #0
 800cfea:	68f8      	ldr	r0, [r7, #12]
 800cfec:	f001 fc72 	bl	800e8d4 <USBD_LL_PrepareReceive>
 800cff0:	e03b      	b.n	800d06a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	68da      	ldr	r2, [r3, #12]
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	689b      	ldr	r3, [r3, #8]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d11c      	bne.n	800d038 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	685a      	ldr	r2, [r3, #4]
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d006:	429a      	cmp	r2, r3
 800d008:	d316      	bcc.n	800d038 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	685a      	ldr	r2, [r3, #4]
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d014:	429a      	cmp	r2, r3
 800d016:	d20f      	bcs.n	800d038 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d018:	2200      	movs	r2, #0
 800d01a:	2100      	movs	r1, #0
 800d01c:	68f8      	ldr	r0, [r7, #12]
 800d01e:	f000 fef1 	bl	800de04 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2200      	movs	r2, #0
 800d026:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d02a:	2300      	movs	r3, #0
 800d02c:	2200      	movs	r2, #0
 800d02e:	2100      	movs	r1, #0
 800d030:	68f8      	ldr	r0, [r7, #12]
 800d032:	f001 fc4f 	bl	800e8d4 <USBD_LL_PrepareReceive>
 800d036:	e018      	b.n	800d06a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d03e:	b2db      	uxtb	r3, r3
 800d040:	2b03      	cmp	r3, #3
 800d042:	d10b      	bne.n	800d05c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d005      	beq.n	800d05c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d056:	68db      	ldr	r3, [r3, #12]
 800d058:	68f8      	ldr	r0, [r7, #12]
 800d05a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d05c:	2180      	movs	r1, #128	; 0x80
 800d05e:	68f8      	ldr	r0, [r7, #12]
 800d060:	f001 fb30 	bl	800e6c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d064:	68f8      	ldr	r0, [r7, #12]
 800d066:	f000 ff1f 	bl	800dea8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d070:	2b01      	cmp	r3, #1
 800d072:	d122      	bne.n	800d0ba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d074:	68f8      	ldr	r0, [r7, #12]
 800d076:	f7ff fe98 	bl	800cdaa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2200      	movs	r2, #0
 800d07e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d082:	e01a      	b.n	800d0ba <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	2b03      	cmp	r3, #3
 800d08e:	d114      	bne.n	800d0ba <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d096:	695b      	ldr	r3, [r3, #20]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d00e      	beq.n	800d0ba <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0a2:	695b      	ldr	r3, [r3, #20]
 800d0a4:	7afa      	ldrb	r2, [r7, #11]
 800d0a6:	4611      	mov	r1, r2
 800d0a8:	68f8      	ldr	r0, [r7, #12]
 800d0aa:	4798      	blx	r3
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d0b0:	7dfb      	ldrb	r3, [r7, #23]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d001      	beq.n	800d0ba <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d0b6:	7dfb      	ldrb	r3, [r7, #23]
 800d0b8:	e000      	b.n	800d0bc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d0ba:	2300      	movs	r3, #0
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3718      	adds	r7, #24
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d101      	bne.n	800d0f8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d0f4:	2303      	movs	r3, #3
 800d0f6:	e02f      	b.n	800d158 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d00f      	beq.n	800d122 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d009      	beq.n	800d122 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	6852      	ldr	r2, [r2, #4]
 800d11a:	b2d2      	uxtb	r2, r2
 800d11c:	4611      	mov	r1, r2
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d122:	2340      	movs	r3, #64	; 0x40
 800d124:	2200      	movs	r2, #0
 800d126:	2100      	movs	r1, #0
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f001 fa57 	bl	800e5dc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2201      	movs	r2, #1
 800d132:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2240      	movs	r2, #64	; 0x40
 800d13a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d13e:	2340      	movs	r3, #64	; 0x40
 800d140:	2200      	movs	r2, #0
 800d142:	2180      	movs	r1, #128	; 0x80
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f001 fa49 	bl	800e5dc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2201      	movs	r2, #1
 800d14e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2240      	movs	r2, #64	; 0x40
 800d154:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d156:	2300      	movs	r3, #0
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3708      	adds	r7, #8
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d160:	b480      	push	{r7}
 800d162:	b083      	sub	sp, #12
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	460b      	mov	r3, r1
 800d16a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	78fa      	ldrb	r2, [r7, #3]
 800d170:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d172:	2300      	movs	r3, #0
}
 800d174:	4618      	mov	r0, r3
 800d176:	370c      	adds	r7, #12
 800d178:	46bd      	mov	sp, r7
 800d17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17e:	4770      	bx	lr

0800d180 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d180:	b480      	push	{r7}
 800d182:	b083      	sub	sp, #12
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d18e:	b2da      	uxtb	r2, r3
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2204      	movs	r2, #4
 800d19a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d19e:	2300      	movs	r3, #0
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	370c      	adds	r7, #12
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1ba:	b2db      	uxtb	r3, r3
 800d1bc:	2b04      	cmp	r3, #4
 800d1be:	d106      	bne.n	800d1ce <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d1c6:	b2da      	uxtb	r2, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d1ce:	2300      	movs	r3, #0
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	370c      	adds	r7, #12
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr

0800d1dc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d101      	bne.n	800d1f2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d1ee:	2303      	movs	r3, #3
 800d1f0:	e012      	b.n	800d218 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1f8:	b2db      	uxtb	r3, r3
 800d1fa:	2b03      	cmp	r3, #3
 800d1fc:	d10b      	bne.n	800d216 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d204:	69db      	ldr	r3, [r3, #28]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d005      	beq.n	800d216 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d210:	69db      	ldr	r3, [r3, #28]
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d216:	2300      	movs	r3, #0
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3708      	adds	r7, #8
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d220:	b480      	push	{r7}
 800d222:	b087      	sub	sp, #28
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	3301      	adds	r3, #1
 800d236:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d23e:	8a3b      	ldrh	r3, [r7, #16]
 800d240:	021b      	lsls	r3, r3, #8
 800d242:	b21a      	sxth	r2, r3
 800d244:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d248:	4313      	orrs	r3, r2
 800d24a:	b21b      	sxth	r3, r3
 800d24c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d24e:	89fb      	ldrh	r3, [r7, #14]
}
 800d250:	4618      	mov	r0, r3
 800d252:	371c      	adds	r7, #28
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr

0800d25c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d266:	2300      	movs	r3, #0
 800d268:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d272:	2b40      	cmp	r3, #64	; 0x40
 800d274:	d005      	beq.n	800d282 <USBD_StdDevReq+0x26>
 800d276:	2b40      	cmp	r3, #64	; 0x40
 800d278:	d853      	bhi.n	800d322 <USBD_StdDevReq+0xc6>
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d00b      	beq.n	800d296 <USBD_StdDevReq+0x3a>
 800d27e:	2b20      	cmp	r3, #32
 800d280:	d14f      	bne.n	800d322 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d288:	689b      	ldr	r3, [r3, #8]
 800d28a:	6839      	ldr	r1, [r7, #0]
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	4798      	blx	r3
 800d290:	4603      	mov	r3, r0
 800d292:	73fb      	strb	r3, [r7, #15]
      break;
 800d294:	e04a      	b.n	800d32c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	785b      	ldrb	r3, [r3, #1]
 800d29a:	2b09      	cmp	r3, #9
 800d29c:	d83b      	bhi.n	800d316 <USBD_StdDevReq+0xba>
 800d29e:	a201      	add	r2, pc, #4	; (adr r2, 800d2a4 <USBD_StdDevReq+0x48>)
 800d2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2a4:	0800d2f9 	.word	0x0800d2f9
 800d2a8:	0800d30d 	.word	0x0800d30d
 800d2ac:	0800d317 	.word	0x0800d317
 800d2b0:	0800d303 	.word	0x0800d303
 800d2b4:	0800d317 	.word	0x0800d317
 800d2b8:	0800d2d7 	.word	0x0800d2d7
 800d2bc:	0800d2cd 	.word	0x0800d2cd
 800d2c0:	0800d317 	.word	0x0800d317
 800d2c4:	0800d2ef 	.word	0x0800d2ef
 800d2c8:	0800d2e1 	.word	0x0800d2e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d2cc:	6839      	ldr	r1, [r7, #0]
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 f9de 	bl	800d690 <USBD_GetDescriptor>
          break;
 800d2d4:	e024      	b.n	800d320 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d2d6:	6839      	ldr	r1, [r7, #0]
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f000 fb43 	bl	800d964 <USBD_SetAddress>
          break;
 800d2de:	e01f      	b.n	800d320 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d2e0:	6839      	ldr	r1, [r7, #0]
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 fb82 	bl	800d9ec <USBD_SetConfig>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	73fb      	strb	r3, [r7, #15]
          break;
 800d2ec:	e018      	b.n	800d320 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d2ee:	6839      	ldr	r1, [r7, #0]
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f000 fc21 	bl	800db38 <USBD_GetConfig>
          break;
 800d2f6:	e013      	b.n	800d320 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d2f8:	6839      	ldr	r1, [r7, #0]
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 fc52 	bl	800dba4 <USBD_GetStatus>
          break;
 800d300:	e00e      	b.n	800d320 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d302:	6839      	ldr	r1, [r7, #0]
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f000 fc81 	bl	800dc0c <USBD_SetFeature>
          break;
 800d30a:	e009      	b.n	800d320 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d30c:	6839      	ldr	r1, [r7, #0]
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 fc90 	bl	800dc34 <USBD_ClrFeature>
          break;
 800d314:	e004      	b.n	800d320 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d316:	6839      	ldr	r1, [r7, #0]
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f000 fce7 	bl	800dcec <USBD_CtlError>
          break;
 800d31e:	bf00      	nop
      }
      break;
 800d320:	e004      	b.n	800d32c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d322:	6839      	ldr	r1, [r7, #0]
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 fce1 	bl	800dcec <USBD_CtlError>
      break;
 800d32a:	bf00      	nop
  }

  return ret;
 800d32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3710      	adds	r7, #16
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}
 800d336:	bf00      	nop

0800d338 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b084      	sub	sp, #16
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d342:	2300      	movs	r3, #0
 800d344:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d34e:	2b40      	cmp	r3, #64	; 0x40
 800d350:	d005      	beq.n	800d35e <USBD_StdItfReq+0x26>
 800d352:	2b40      	cmp	r3, #64	; 0x40
 800d354:	d82f      	bhi.n	800d3b6 <USBD_StdItfReq+0x7e>
 800d356:	2b00      	cmp	r3, #0
 800d358:	d001      	beq.n	800d35e <USBD_StdItfReq+0x26>
 800d35a:	2b20      	cmp	r3, #32
 800d35c:	d12b      	bne.n	800d3b6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d364:	b2db      	uxtb	r3, r3
 800d366:	3b01      	subs	r3, #1
 800d368:	2b02      	cmp	r3, #2
 800d36a:	d81d      	bhi.n	800d3a8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	889b      	ldrh	r3, [r3, #4]
 800d370:	b2db      	uxtb	r3, r3
 800d372:	2b01      	cmp	r3, #1
 800d374:	d813      	bhi.n	800d39e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d37c:	689b      	ldr	r3, [r3, #8]
 800d37e:	6839      	ldr	r1, [r7, #0]
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	4798      	blx	r3
 800d384:	4603      	mov	r3, r0
 800d386:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	88db      	ldrh	r3, [r3, #6]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d110      	bne.n	800d3b2 <USBD_StdItfReq+0x7a>
 800d390:	7bfb      	ldrb	r3, [r7, #15]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d10d      	bne.n	800d3b2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 fd73 	bl	800de82 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d39c:	e009      	b.n	800d3b2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d39e:	6839      	ldr	r1, [r7, #0]
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 fca3 	bl	800dcec <USBD_CtlError>
          break;
 800d3a6:	e004      	b.n	800d3b2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d3a8:	6839      	ldr	r1, [r7, #0]
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 fc9e 	bl	800dcec <USBD_CtlError>
          break;
 800d3b0:	e000      	b.n	800d3b4 <USBD_StdItfReq+0x7c>
          break;
 800d3b2:	bf00      	nop
      }
      break;
 800d3b4:	e004      	b.n	800d3c0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d3b6:	6839      	ldr	r1, [r7, #0]
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f000 fc97 	bl	800dcec <USBD_CtlError>
      break;
 800d3be:	bf00      	nop
  }

  return ret;
 800d3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3710      	adds	r7, #16
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}

0800d3ca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3ca:	b580      	push	{r7, lr}
 800d3cc:	b084      	sub	sp, #16
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	6078      	str	r0, [r7, #4]
 800d3d2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	889b      	ldrh	r3, [r3, #4]
 800d3dc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d3e6:	2b40      	cmp	r3, #64	; 0x40
 800d3e8:	d007      	beq.n	800d3fa <USBD_StdEPReq+0x30>
 800d3ea:	2b40      	cmp	r3, #64	; 0x40
 800d3ec:	f200 8145 	bhi.w	800d67a <USBD_StdEPReq+0x2b0>
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d00c      	beq.n	800d40e <USBD_StdEPReq+0x44>
 800d3f4:	2b20      	cmp	r3, #32
 800d3f6:	f040 8140 	bne.w	800d67a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d400:	689b      	ldr	r3, [r3, #8]
 800d402:	6839      	ldr	r1, [r7, #0]
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	4798      	blx	r3
 800d408:	4603      	mov	r3, r0
 800d40a:	73fb      	strb	r3, [r7, #15]
      break;
 800d40c:	e13a      	b.n	800d684 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	785b      	ldrb	r3, [r3, #1]
 800d412:	2b03      	cmp	r3, #3
 800d414:	d007      	beq.n	800d426 <USBD_StdEPReq+0x5c>
 800d416:	2b03      	cmp	r3, #3
 800d418:	f300 8129 	bgt.w	800d66e <USBD_StdEPReq+0x2a4>
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d07f      	beq.n	800d520 <USBD_StdEPReq+0x156>
 800d420:	2b01      	cmp	r3, #1
 800d422:	d03c      	beq.n	800d49e <USBD_StdEPReq+0xd4>
 800d424:	e123      	b.n	800d66e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	2b02      	cmp	r3, #2
 800d430:	d002      	beq.n	800d438 <USBD_StdEPReq+0x6e>
 800d432:	2b03      	cmp	r3, #3
 800d434:	d016      	beq.n	800d464 <USBD_StdEPReq+0x9a>
 800d436:	e02c      	b.n	800d492 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d438:	7bbb      	ldrb	r3, [r7, #14]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d00d      	beq.n	800d45a <USBD_StdEPReq+0x90>
 800d43e:	7bbb      	ldrb	r3, [r7, #14]
 800d440:	2b80      	cmp	r3, #128	; 0x80
 800d442:	d00a      	beq.n	800d45a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d444:	7bbb      	ldrb	r3, [r7, #14]
 800d446:	4619      	mov	r1, r3
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f001 f93b 	bl	800e6c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d44e:	2180      	movs	r1, #128	; 0x80
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f001 f937 	bl	800e6c4 <USBD_LL_StallEP>
 800d456:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d458:	e020      	b.n	800d49c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d45a:	6839      	ldr	r1, [r7, #0]
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 fc45 	bl	800dcec <USBD_CtlError>
              break;
 800d462:	e01b      	b.n	800d49c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	885b      	ldrh	r3, [r3, #2]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d10e      	bne.n	800d48a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d46c:	7bbb      	ldrb	r3, [r7, #14]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d00b      	beq.n	800d48a <USBD_StdEPReq+0xc0>
 800d472:	7bbb      	ldrb	r3, [r7, #14]
 800d474:	2b80      	cmp	r3, #128	; 0x80
 800d476:	d008      	beq.n	800d48a <USBD_StdEPReq+0xc0>
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	88db      	ldrh	r3, [r3, #6]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d104      	bne.n	800d48a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d480:	7bbb      	ldrb	r3, [r7, #14]
 800d482:	4619      	mov	r1, r3
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f001 f91d 	bl	800e6c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 fcf9 	bl	800de82 <USBD_CtlSendStatus>

              break;
 800d490:	e004      	b.n	800d49c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d492:	6839      	ldr	r1, [r7, #0]
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f000 fc29 	bl	800dcec <USBD_CtlError>
              break;
 800d49a:	bf00      	nop
          }
          break;
 800d49c:	e0ec      	b.n	800d678 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	2b02      	cmp	r3, #2
 800d4a8:	d002      	beq.n	800d4b0 <USBD_StdEPReq+0xe6>
 800d4aa:	2b03      	cmp	r3, #3
 800d4ac:	d016      	beq.n	800d4dc <USBD_StdEPReq+0x112>
 800d4ae:	e030      	b.n	800d512 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d4b0:	7bbb      	ldrb	r3, [r7, #14]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d00d      	beq.n	800d4d2 <USBD_StdEPReq+0x108>
 800d4b6:	7bbb      	ldrb	r3, [r7, #14]
 800d4b8:	2b80      	cmp	r3, #128	; 0x80
 800d4ba:	d00a      	beq.n	800d4d2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d4bc:	7bbb      	ldrb	r3, [r7, #14]
 800d4be:	4619      	mov	r1, r3
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f001 f8ff 	bl	800e6c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4c6:	2180      	movs	r1, #128	; 0x80
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f001 f8fb 	bl	800e6c4 <USBD_LL_StallEP>
 800d4ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d4d0:	e025      	b.n	800d51e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d4d2:	6839      	ldr	r1, [r7, #0]
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f000 fc09 	bl	800dcec <USBD_CtlError>
              break;
 800d4da:	e020      	b.n	800d51e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	885b      	ldrh	r3, [r3, #2]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d11b      	bne.n	800d51c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d4e4:	7bbb      	ldrb	r3, [r7, #14]
 800d4e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d004      	beq.n	800d4f8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d4ee:	7bbb      	ldrb	r3, [r7, #14]
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f001 f91c 	bl	800e730 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f000 fcc2 	bl	800de82 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d504:	689b      	ldr	r3, [r3, #8]
 800d506:	6839      	ldr	r1, [r7, #0]
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	4798      	blx	r3
 800d50c:	4603      	mov	r3, r0
 800d50e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d510:	e004      	b.n	800d51c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d512:	6839      	ldr	r1, [r7, #0]
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 fbe9 	bl	800dcec <USBD_CtlError>
              break;
 800d51a:	e000      	b.n	800d51e <USBD_StdEPReq+0x154>
              break;
 800d51c:	bf00      	nop
          }
          break;
 800d51e:	e0ab      	b.n	800d678 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d526:	b2db      	uxtb	r3, r3
 800d528:	2b02      	cmp	r3, #2
 800d52a:	d002      	beq.n	800d532 <USBD_StdEPReq+0x168>
 800d52c:	2b03      	cmp	r3, #3
 800d52e:	d032      	beq.n	800d596 <USBD_StdEPReq+0x1cc>
 800d530:	e097      	b.n	800d662 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d532:	7bbb      	ldrb	r3, [r7, #14]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d007      	beq.n	800d548 <USBD_StdEPReq+0x17e>
 800d538:	7bbb      	ldrb	r3, [r7, #14]
 800d53a:	2b80      	cmp	r3, #128	; 0x80
 800d53c:	d004      	beq.n	800d548 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d53e:	6839      	ldr	r1, [r7, #0]
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f000 fbd3 	bl	800dcec <USBD_CtlError>
                break;
 800d546:	e091      	b.n	800d66c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d548:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	da0b      	bge.n	800d568 <USBD_StdEPReq+0x19e>
 800d550:	7bbb      	ldrb	r3, [r7, #14]
 800d552:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d556:	4613      	mov	r3, r2
 800d558:	009b      	lsls	r3, r3, #2
 800d55a:	4413      	add	r3, r2
 800d55c:	009b      	lsls	r3, r3, #2
 800d55e:	3310      	adds	r3, #16
 800d560:	687a      	ldr	r2, [r7, #4]
 800d562:	4413      	add	r3, r2
 800d564:	3304      	adds	r3, #4
 800d566:	e00b      	b.n	800d580 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d568:	7bbb      	ldrb	r3, [r7, #14]
 800d56a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d56e:	4613      	mov	r3, r2
 800d570:	009b      	lsls	r3, r3, #2
 800d572:	4413      	add	r3, r2
 800d574:	009b      	lsls	r3, r3, #2
 800d576:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d57a:	687a      	ldr	r2, [r7, #4]
 800d57c:	4413      	add	r3, r2
 800d57e:	3304      	adds	r3, #4
 800d580:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	2200      	movs	r2, #0
 800d586:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	2202      	movs	r2, #2
 800d58c:	4619      	mov	r1, r3
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 fc1d 	bl	800ddce <USBD_CtlSendData>
              break;
 800d594:	e06a      	b.n	800d66c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d596:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	da11      	bge.n	800d5c2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d59e:	7bbb      	ldrb	r3, [r7, #14]
 800d5a0:	f003 020f 	and.w	r2, r3, #15
 800d5a4:	6879      	ldr	r1, [r7, #4]
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	009b      	lsls	r3, r3, #2
 800d5aa:	4413      	add	r3, r2
 800d5ac:	009b      	lsls	r3, r3, #2
 800d5ae:	440b      	add	r3, r1
 800d5b0:	3324      	adds	r3, #36	; 0x24
 800d5b2:	881b      	ldrh	r3, [r3, #0]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d117      	bne.n	800d5e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d5b8:	6839      	ldr	r1, [r7, #0]
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f000 fb96 	bl	800dcec <USBD_CtlError>
                  break;
 800d5c0:	e054      	b.n	800d66c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d5c2:	7bbb      	ldrb	r3, [r7, #14]
 800d5c4:	f003 020f 	and.w	r2, r3, #15
 800d5c8:	6879      	ldr	r1, [r7, #4]
 800d5ca:	4613      	mov	r3, r2
 800d5cc:	009b      	lsls	r3, r3, #2
 800d5ce:	4413      	add	r3, r2
 800d5d0:	009b      	lsls	r3, r3, #2
 800d5d2:	440b      	add	r3, r1
 800d5d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d5d8:	881b      	ldrh	r3, [r3, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d104      	bne.n	800d5e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d5de:	6839      	ldr	r1, [r7, #0]
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f000 fb83 	bl	800dcec <USBD_CtlError>
                  break;
 800d5e6:	e041      	b.n	800d66c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d5e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	da0b      	bge.n	800d608 <USBD_StdEPReq+0x23e>
 800d5f0:	7bbb      	ldrb	r3, [r7, #14]
 800d5f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d5f6:	4613      	mov	r3, r2
 800d5f8:	009b      	lsls	r3, r3, #2
 800d5fa:	4413      	add	r3, r2
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	3310      	adds	r3, #16
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	4413      	add	r3, r2
 800d604:	3304      	adds	r3, #4
 800d606:	e00b      	b.n	800d620 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d608:	7bbb      	ldrb	r3, [r7, #14]
 800d60a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d60e:	4613      	mov	r3, r2
 800d610:	009b      	lsls	r3, r3, #2
 800d612:	4413      	add	r3, r2
 800d614:	009b      	lsls	r3, r3, #2
 800d616:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d61a:	687a      	ldr	r2, [r7, #4]
 800d61c:	4413      	add	r3, r2
 800d61e:	3304      	adds	r3, #4
 800d620:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d622:	7bbb      	ldrb	r3, [r7, #14]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d002      	beq.n	800d62e <USBD_StdEPReq+0x264>
 800d628:	7bbb      	ldrb	r3, [r7, #14]
 800d62a:	2b80      	cmp	r3, #128	; 0x80
 800d62c:	d103      	bne.n	800d636 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	2200      	movs	r2, #0
 800d632:	601a      	str	r2, [r3, #0]
 800d634:	e00e      	b.n	800d654 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d636:	7bbb      	ldrb	r3, [r7, #14]
 800d638:	4619      	mov	r1, r3
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f001 f8ae 	bl	800e79c <USBD_LL_IsStallEP>
 800d640:	4603      	mov	r3, r0
 800d642:	2b00      	cmp	r3, #0
 800d644:	d003      	beq.n	800d64e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	2201      	movs	r2, #1
 800d64a:	601a      	str	r2, [r3, #0]
 800d64c:	e002      	b.n	800d654 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	2200      	movs	r2, #0
 800d652:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	2202      	movs	r2, #2
 800d658:	4619      	mov	r1, r3
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 fbb7 	bl	800ddce <USBD_CtlSendData>
              break;
 800d660:	e004      	b.n	800d66c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d662:	6839      	ldr	r1, [r7, #0]
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f000 fb41 	bl	800dcec <USBD_CtlError>
              break;
 800d66a:	bf00      	nop
          }
          break;
 800d66c:	e004      	b.n	800d678 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d66e:	6839      	ldr	r1, [r7, #0]
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f000 fb3b 	bl	800dcec <USBD_CtlError>
          break;
 800d676:	bf00      	nop
      }
      break;
 800d678:	e004      	b.n	800d684 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d67a:	6839      	ldr	r1, [r7, #0]
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 fb35 	bl	800dcec <USBD_CtlError>
      break;
 800d682:	bf00      	nop
  }

  return ret;
 800d684:	7bfb      	ldrb	r3, [r7, #15]
}
 800d686:	4618      	mov	r0, r3
 800d688:	3710      	adds	r7, #16
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
	...

0800d690 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d69a:	2300      	movs	r3, #0
 800d69c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	885b      	ldrh	r3, [r3, #2]
 800d6aa:	0a1b      	lsrs	r3, r3, #8
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	3b01      	subs	r3, #1
 800d6b0:	2b06      	cmp	r3, #6
 800d6b2:	f200 8128 	bhi.w	800d906 <USBD_GetDescriptor+0x276>
 800d6b6:	a201      	add	r2, pc, #4	; (adr r2, 800d6bc <USBD_GetDescriptor+0x2c>)
 800d6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6bc:	0800d6d9 	.word	0x0800d6d9
 800d6c0:	0800d6f1 	.word	0x0800d6f1
 800d6c4:	0800d731 	.word	0x0800d731
 800d6c8:	0800d907 	.word	0x0800d907
 800d6cc:	0800d907 	.word	0x0800d907
 800d6d0:	0800d8a7 	.word	0x0800d8a7
 800d6d4:	0800d8d3 	.word	0x0800d8d3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	7c12      	ldrb	r2, [r2, #16]
 800d6e4:	f107 0108 	add.w	r1, r7, #8
 800d6e8:	4610      	mov	r0, r2
 800d6ea:	4798      	blx	r3
 800d6ec:	60f8      	str	r0, [r7, #12]
      break;
 800d6ee:	e112      	b.n	800d916 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	7c1b      	ldrb	r3, [r3, #16]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d10d      	bne.n	800d714 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d700:	f107 0208 	add.w	r2, r7, #8
 800d704:	4610      	mov	r0, r2
 800d706:	4798      	blx	r3
 800d708:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	3301      	adds	r3, #1
 800d70e:	2202      	movs	r2, #2
 800d710:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d712:	e100      	b.n	800d916 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d71c:	f107 0208 	add.w	r2, r7, #8
 800d720:	4610      	mov	r0, r2
 800d722:	4798      	blx	r3
 800d724:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	3301      	adds	r3, #1
 800d72a:	2202      	movs	r2, #2
 800d72c:	701a      	strb	r2, [r3, #0]
      break;
 800d72e:	e0f2      	b.n	800d916 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	885b      	ldrh	r3, [r3, #2]
 800d734:	b2db      	uxtb	r3, r3
 800d736:	2b05      	cmp	r3, #5
 800d738:	f200 80ac 	bhi.w	800d894 <USBD_GetDescriptor+0x204>
 800d73c:	a201      	add	r2, pc, #4	; (adr r2, 800d744 <USBD_GetDescriptor+0xb4>)
 800d73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d742:	bf00      	nop
 800d744:	0800d75d 	.word	0x0800d75d
 800d748:	0800d791 	.word	0x0800d791
 800d74c:	0800d7c5 	.word	0x0800d7c5
 800d750:	0800d7f9 	.word	0x0800d7f9
 800d754:	0800d82d 	.word	0x0800d82d
 800d758:	0800d861 	.word	0x0800d861
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d762:	685b      	ldr	r3, [r3, #4]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d00b      	beq.n	800d780 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	687a      	ldr	r2, [r7, #4]
 800d772:	7c12      	ldrb	r2, [r2, #16]
 800d774:	f107 0108 	add.w	r1, r7, #8
 800d778:	4610      	mov	r0, r2
 800d77a:	4798      	blx	r3
 800d77c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d77e:	e091      	b.n	800d8a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d780:	6839      	ldr	r1, [r7, #0]
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 fab2 	bl	800dcec <USBD_CtlError>
            err++;
 800d788:	7afb      	ldrb	r3, [r7, #11]
 800d78a:	3301      	adds	r3, #1
 800d78c:	72fb      	strb	r3, [r7, #11]
          break;
 800d78e:	e089      	b.n	800d8a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d796:	689b      	ldr	r3, [r3, #8]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d00b      	beq.n	800d7b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7a2:	689b      	ldr	r3, [r3, #8]
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	7c12      	ldrb	r2, [r2, #16]
 800d7a8:	f107 0108 	add.w	r1, r7, #8
 800d7ac:	4610      	mov	r0, r2
 800d7ae:	4798      	blx	r3
 800d7b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7b2:	e077      	b.n	800d8a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7b4:	6839      	ldr	r1, [r7, #0]
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 fa98 	bl	800dcec <USBD_CtlError>
            err++;
 800d7bc:	7afb      	ldrb	r3, [r7, #11]
 800d7be:	3301      	adds	r3, #1
 800d7c0:	72fb      	strb	r3, [r7, #11]
          break;
 800d7c2:	e06f      	b.n	800d8a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7ca:	68db      	ldr	r3, [r3, #12]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d00b      	beq.n	800d7e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7d6:	68db      	ldr	r3, [r3, #12]
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	7c12      	ldrb	r2, [r2, #16]
 800d7dc:	f107 0108 	add.w	r1, r7, #8
 800d7e0:	4610      	mov	r0, r2
 800d7e2:	4798      	blx	r3
 800d7e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7e6:	e05d      	b.n	800d8a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7e8:	6839      	ldr	r1, [r7, #0]
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f000 fa7e 	bl	800dcec <USBD_CtlError>
            err++;
 800d7f0:	7afb      	ldrb	r3, [r7, #11]
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	72fb      	strb	r3, [r7, #11]
          break;
 800d7f6:	e055      	b.n	800d8a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7fe:	691b      	ldr	r3, [r3, #16]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d00b      	beq.n	800d81c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d80a:	691b      	ldr	r3, [r3, #16]
 800d80c:	687a      	ldr	r2, [r7, #4]
 800d80e:	7c12      	ldrb	r2, [r2, #16]
 800d810:	f107 0108 	add.w	r1, r7, #8
 800d814:	4610      	mov	r0, r2
 800d816:	4798      	blx	r3
 800d818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d81a:	e043      	b.n	800d8a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d81c:	6839      	ldr	r1, [r7, #0]
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 fa64 	bl	800dcec <USBD_CtlError>
            err++;
 800d824:	7afb      	ldrb	r3, [r7, #11]
 800d826:	3301      	adds	r3, #1
 800d828:	72fb      	strb	r3, [r7, #11]
          break;
 800d82a:	e03b      	b.n	800d8a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d832:	695b      	ldr	r3, [r3, #20]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d00b      	beq.n	800d850 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d83e:	695b      	ldr	r3, [r3, #20]
 800d840:	687a      	ldr	r2, [r7, #4]
 800d842:	7c12      	ldrb	r2, [r2, #16]
 800d844:	f107 0108 	add.w	r1, r7, #8
 800d848:	4610      	mov	r0, r2
 800d84a:	4798      	blx	r3
 800d84c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d84e:	e029      	b.n	800d8a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d850:	6839      	ldr	r1, [r7, #0]
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f000 fa4a 	bl	800dcec <USBD_CtlError>
            err++;
 800d858:	7afb      	ldrb	r3, [r7, #11]
 800d85a:	3301      	adds	r3, #1
 800d85c:	72fb      	strb	r3, [r7, #11]
          break;
 800d85e:	e021      	b.n	800d8a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d866:	699b      	ldr	r3, [r3, #24]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d00b      	beq.n	800d884 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d872:	699b      	ldr	r3, [r3, #24]
 800d874:	687a      	ldr	r2, [r7, #4]
 800d876:	7c12      	ldrb	r2, [r2, #16]
 800d878:	f107 0108 	add.w	r1, r7, #8
 800d87c:	4610      	mov	r0, r2
 800d87e:	4798      	blx	r3
 800d880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d882:	e00f      	b.n	800d8a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d884:	6839      	ldr	r1, [r7, #0]
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 fa30 	bl	800dcec <USBD_CtlError>
            err++;
 800d88c:	7afb      	ldrb	r3, [r7, #11]
 800d88e:	3301      	adds	r3, #1
 800d890:	72fb      	strb	r3, [r7, #11]
          break;
 800d892:	e007      	b.n	800d8a4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d894:	6839      	ldr	r1, [r7, #0]
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 fa28 	bl	800dcec <USBD_CtlError>
          err++;
 800d89c:	7afb      	ldrb	r3, [r7, #11]
 800d89e:	3301      	adds	r3, #1
 800d8a0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d8a2:	bf00      	nop
      }
      break;
 800d8a4:	e037      	b.n	800d916 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	7c1b      	ldrb	r3, [r3, #16]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d109      	bne.n	800d8c2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8b6:	f107 0208 	add.w	r2, r7, #8
 800d8ba:	4610      	mov	r0, r2
 800d8bc:	4798      	blx	r3
 800d8be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8c0:	e029      	b.n	800d916 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d8c2:	6839      	ldr	r1, [r7, #0]
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f000 fa11 	bl	800dcec <USBD_CtlError>
        err++;
 800d8ca:	7afb      	ldrb	r3, [r7, #11]
 800d8cc:	3301      	adds	r3, #1
 800d8ce:	72fb      	strb	r3, [r7, #11]
      break;
 800d8d0:	e021      	b.n	800d916 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	7c1b      	ldrb	r3, [r3, #16]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d10d      	bne.n	800d8f6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8e2:	f107 0208 	add.w	r2, r7, #8
 800d8e6:	4610      	mov	r0, r2
 800d8e8:	4798      	blx	r3
 800d8ea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	2207      	movs	r2, #7
 800d8f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8f4:	e00f      	b.n	800d916 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d8f6:	6839      	ldr	r1, [r7, #0]
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 f9f7 	bl	800dcec <USBD_CtlError>
        err++;
 800d8fe:	7afb      	ldrb	r3, [r7, #11]
 800d900:	3301      	adds	r3, #1
 800d902:	72fb      	strb	r3, [r7, #11]
      break;
 800d904:	e007      	b.n	800d916 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d906:	6839      	ldr	r1, [r7, #0]
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f000 f9ef 	bl	800dcec <USBD_CtlError>
      err++;
 800d90e:	7afb      	ldrb	r3, [r7, #11]
 800d910:	3301      	adds	r3, #1
 800d912:	72fb      	strb	r3, [r7, #11]
      break;
 800d914:	bf00      	nop
  }

  if (err != 0U)
 800d916:	7afb      	ldrb	r3, [r7, #11]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d11e      	bne.n	800d95a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	88db      	ldrh	r3, [r3, #6]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d016      	beq.n	800d952 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d924:	893b      	ldrh	r3, [r7, #8]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00e      	beq.n	800d948 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	88da      	ldrh	r2, [r3, #6]
 800d92e:	893b      	ldrh	r3, [r7, #8]
 800d930:	4293      	cmp	r3, r2
 800d932:	bf28      	it	cs
 800d934:	4613      	movcs	r3, r2
 800d936:	b29b      	uxth	r3, r3
 800d938:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d93a:	893b      	ldrh	r3, [r7, #8]
 800d93c:	461a      	mov	r2, r3
 800d93e:	68f9      	ldr	r1, [r7, #12]
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f000 fa44 	bl	800ddce <USBD_CtlSendData>
 800d946:	e009      	b.n	800d95c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d948:	6839      	ldr	r1, [r7, #0]
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f000 f9ce 	bl	800dcec <USBD_CtlError>
 800d950:	e004      	b.n	800d95c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f000 fa95 	bl	800de82 <USBD_CtlSendStatus>
 800d958:	e000      	b.n	800d95c <USBD_GetDescriptor+0x2cc>
    return;
 800d95a:	bf00      	nop
  }
}
 800d95c:	3710      	adds	r7, #16
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}
 800d962:	bf00      	nop

0800d964 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b084      	sub	sp, #16
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	889b      	ldrh	r3, [r3, #4]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d131      	bne.n	800d9da <USBD_SetAddress+0x76>
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	88db      	ldrh	r3, [r3, #6]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d12d      	bne.n	800d9da <USBD_SetAddress+0x76>
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	885b      	ldrh	r3, [r3, #2]
 800d982:	2b7f      	cmp	r3, #127	; 0x7f
 800d984:	d829      	bhi.n	800d9da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	885b      	ldrh	r3, [r3, #2]
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d990:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d998:	b2db      	uxtb	r3, r3
 800d99a:	2b03      	cmp	r3, #3
 800d99c:	d104      	bne.n	800d9a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d99e:	6839      	ldr	r1, [r7, #0]
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f000 f9a3 	bl	800dcec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9a6:	e01d      	b.n	800d9e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	7bfa      	ldrb	r2, [r7, #15]
 800d9ac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d9b0:	7bfb      	ldrb	r3, [r7, #15]
 800d9b2:	4619      	mov	r1, r3
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f000 ff1f 	bl	800e7f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f000 fa61 	bl	800de82 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d9c0:	7bfb      	ldrb	r3, [r7, #15]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d004      	beq.n	800d9d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2202      	movs	r2, #2
 800d9ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9ce:	e009      	b.n	800d9e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2201      	movs	r2, #1
 800d9d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9d8:	e004      	b.n	800d9e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d9da:	6839      	ldr	r1, [r7, #0]
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f000 f985 	bl	800dcec <USBD_CtlError>
  }
}
 800d9e2:	bf00      	nop
 800d9e4:	bf00      	nop
 800d9e6:	3710      	adds	r7, #16
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}

0800d9ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	885b      	ldrh	r3, [r3, #2]
 800d9fe:	b2da      	uxtb	r2, r3
 800da00:	4b4c      	ldr	r3, [pc, #304]	; (800db34 <USBD_SetConfig+0x148>)
 800da02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800da04:	4b4b      	ldr	r3, [pc, #300]	; (800db34 <USBD_SetConfig+0x148>)
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d905      	bls.n	800da18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800da0c:	6839      	ldr	r1, [r7, #0]
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f000 f96c 	bl	800dcec <USBD_CtlError>
    return USBD_FAIL;
 800da14:	2303      	movs	r3, #3
 800da16:	e088      	b.n	800db2a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da1e:	b2db      	uxtb	r3, r3
 800da20:	2b02      	cmp	r3, #2
 800da22:	d002      	beq.n	800da2a <USBD_SetConfig+0x3e>
 800da24:	2b03      	cmp	r3, #3
 800da26:	d025      	beq.n	800da74 <USBD_SetConfig+0x88>
 800da28:	e071      	b.n	800db0e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800da2a:	4b42      	ldr	r3, [pc, #264]	; (800db34 <USBD_SetConfig+0x148>)
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d01c      	beq.n	800da6c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800da32:	4b40      	ldr	r3, [pc, #256]	; (800db34 <USBD_SetConfig+0x148>)
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	461a      	mov	r2, r3
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800da3c:	4b3d      	ldr	r3, [pc, #244]	; (800db34 <USBD_SetConfig+0x148>)
 800da3e:	781b      	ldrb	r3, [r3, #0]
 800da40:	4619      	mov	r1, r3
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f7ff f9bc 	bl	800cdc0 <USBD_SetClassConfig>
 800da48:	4603      	mov	r3, r0
 800da4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800da4c:	7bfb      	ldrb	r3, [r7, #15]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d004      	beq.n	800da5c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800da52:	6839      	ldr	r1, [r7, #0]
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f000 f949 	bl	800dcec <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800da5a:	e065      	b.n	800db28 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f000 fa10 	bl	800de82 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2203      	movs	r2, #3
 800da66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800da6a:	e05d      	b.n	800db28 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f000 fa08 	bl	800de82 <USBD_CtlSendStatus>
      break;
 800da72:	e059      	b.n	800db28 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800da74:	4b2f      	ldr	r3, [pc, #188]	; (800db34 <USBD_SetConfig+0x148>)
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d112      	bne.n	800daa2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2202      	movs	r2, #2
 800da80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800da84:	4b2b      	ldr	r3, [pc, #172]	; (800db34 <USBD_SetConfig+0x148>)
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	461a      	mov	r2, r3
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800da8e:	4b29      	ldr	r3, [pc, #164]	; (800db34 <USBD_SetConfig+0x148>)
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	4619      	mov	r1, r3
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f7ff f9af 	bl	800cdf8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f000 f9f1 	bl	800de82 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800daa0:	e042      	b.n	800db28 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800daa2:	4b24      	ldr	r3, [pc, #144]	; (800db34 <USBD_SetConfig+0x148>)
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	461a      	mov	r2, r3
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	685b      	ldr	r3, [r3, #4]
 800daac:	429a      	cmp	r2, r3
 800daae:	d02a      	beq.n	800db06 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	685b      	ldr	r3, [r3, #4]
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	4619      	mov	r1, r3
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f7ff f99d 	bl	800cdf8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dabe:	4b1d      	ldr	r3, [pc, #116]	; (800db34 <USBD_SetConfig+0x148>)
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	461a      	mov	r2, r3
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dac8:	4b1a      	ldr	r3, [pc, #104]	; (800db34 <USBD_SetConfig+0x148>)
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	4619      	mov	r1, r3
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f7ff f976 	bl	800cdc0 <USBD_SetClassConfig>
 800dad4:	4603      	mov	r3, r0
 800dad6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dad8:	7bfb      	ldrb	r3, [r7, #15]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d00f      	beq.n	800dafe <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800dade:	6839      	ldr	r1, [r7, #0]
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f000 f903 	bl	800dcec <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	b2db      	uxtb	r3, r3
 800daec:	4619      	mov	r1, r3
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f7ff f982 	bl	800cdf8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2202      	movs	r2, #2
 800daf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dafc:	e014      	b.n	800db28 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 f9bf 	bl	800de82 <USBD_CtlSendStatus>
      break;
 800db04:	e010      	b.n	800db28 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f000 f9bb 	bl	800de82 <USBD_CtlSendStatus>
      break;
 800db0c:	e00c      	b.n	800db28 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800db0e:	6839      	ldr	r1, [r7, #0]
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f000 f8eb 	bl	800dcec <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db16:	4b07      	ldr	r3, [pc, #28]	; (800db34 <USBD_SetConfig+0x148>)
 800db18:	781b      	ldrb	r3, [r3, #0]
 800db1a:	4619      	mov	r1, r3
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f7ff f96b 	bl	800cdf8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800db22:	2303      	movs	r3, #3
 800db24:	73fb      	strb	r3, [r7, #15]
      break;
 800db26:	bf00      	nop
  }

  return ret;
 800db28:	7bfb      	ldrb	r3, [r7, #15]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3710      	adds	r7, #16
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	200005c4 	.word	0x200005c4

0800db38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	88db      	ldrh	r3, [r3, #6]
 800db46:	2b01      	cmp	r3, #1
 800db48:	d004      	beq.n	800db54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800db4a:	6839      	ldr	r1, [r7, #0]
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f000 f8cd 	bl	800dcec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800db52:	e023      	b.n	800db9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	2b02      	cmp	r3, #2
 800db5e:	dc02      	bgt.n	800db66 <USBD_GetConfig+0x2e>
 800db60:	2b00      	cmp	r3, #0
 800db62:	dc03      	bgt.n	800db6c <USBD_GetConfig+0x34>
 800db64:	e015      	b.n	800db92 <USBD_GetConfig+0x5a>
 800db66:	2b03      	cmp	r3, #3
 800db68:	d00b      	beq.n	800db82 <USBD_GetConfig+0x4a>
 800db6a:	e012      	b.n	800db92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2200      	movs	r2, #0
 800db70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	3308      	adds	r3, #8
 800db76:	2201      	movs	r2, #1
 800db78:	4619      	mov	r1, r3
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 f927 	bl	800ddce <USBD_CtlSendData>
        break;
 800db80:	e00c      	b.n	800db9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	3304      	adds	r3, #4
 800db86:	2201      	movs	r2, #1
 800db88:	4619      	mov	r1, r3
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f000 f91f 	bl	800ddce <USBD_CtlSendData>
        break;
 800db90:	e004      	b.n	800db9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800db92:	6839      	ldr	r1, [r7, #0]
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f000 f8a9 	bl	800dcec <USBD_CtlError>
        break;
 800db9a:	bf00      	nop
}
 800db9c:	bf00      	nop
 800db9e:	3708      	adds	r7, #8
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	3b01      	subs	r3, #1
 800dbb8:	2b02      	cmp	r3, #2
 800dbba:	d81e      	bhi.n	800dbfa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	88db      	ldrh	r3, [r3, #6]
 800dbc0:	2b02      	cmp	r3, #2
 800dbc2:	d004      	beq.n	800dbce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dbc4:	6839      	ldr	r1, [r7, #0]
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f000 f890 	bl	800dcec <USBD_CtlError>
        break;
 800dbcc:	e01a      	b.n	800dc04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2201      	movs	r2, #1
 800dbd2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d005      	beq.n	800dbea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	68db      	ldr	r3, [r3, #12]
 800dbe2:	f043 0202 	orr.w	r2, r3, #2
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	330c      	adds	r3, #12
 800dbee:	2202      	movs	r2, #2
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 f8eb 	bl	800ddce <USBD_CtlSendData>
      break;
 800dbf8:	e004      	b.n	800dc04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dbfa:	6839      	ldr	r1, [r7, #0]
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f000 f875 	bl	800dcec <USBD_CtlError>
      break;
 800dc02:	bf00      	nop
  }
}
 800dc04:	bf00      	nop
 800dc06:	3708      	adds	r7, #8
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	885b      	ldrh	r3, [r3, #2]
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d106      	bne.n	800dc2c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2201      	movs	r2, #1
 800dc22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f000 f92b 	bl	800de82 <USBD_CtlSendStatus>
  }
}
 800dc2c:	bf00      	nop
 800dc2e:	3708      	adds	r7, #8
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b082      	sub	sp, #8
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	3b01      	subs	r3, #1
 800dc48:	2b02      	cmp	r3, #2
 800dc4a:	d80b      	bhi.n	800dc64 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	885b      	ldrh	r3, [r3, #2]
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d10c      	bne.n	800dc6e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2200      	movs	r2, #0
 800dc58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f000 f910 	bl	800de82 <USBD_CtlSendStatus>
      }
      break;
 800dc62:	e004      	b.n	800dc6e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dc64:	6839      	ldr	r1, [r7, #0]
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 f840 	bl	800dcec <USBD_CtlError>
      break;
 800dc6c:	e000      	b.n	800dc70 <USBD_ClrFeature+0x3c>
      break;
 800dc6e:	bf00      	nop
  }
}
 800dc70:	bf00      	nop
 800dc72:	3708      	adds	r7, #8
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b084      	sub	sp, #16
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	781a      	ldrb	r2, [r3, #0]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	3301      	adds	r3, #1
 800dc92:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	781a      	ldrb	r2, [r3, #0]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	3301      	adds	r3, #1
 800dca0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dca2:	68f8      	ldr	r0, [r7, #12]
 800dca4:	f7ff fabc 	bl	800d220 <SWAPBYTE>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	461a      	mov	r2, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	3301      	adds	r3, #1
 800dcba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dcbc:	68f8      	ldr	r0, [r7, #12]
 800dcbe:	f7ff faaf 	bl	800d220 <SWAPBYTE>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	3301      	adds	r3, #1
 800dcce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dcd6:	68f8      	ldr	r0, [r7, #12]
 800dcd8:	f7ff faa2 	bl	800d220 <SWAPBYTE>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	461a      	mov	r2, r3
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	80da      	strh	r2, [r3, #6]
}
 800dce4:	bf00      	nop
 800dce6:	3710      	adds	r7, #16
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dcf6:	2180      	movs	r1, #128	; 0x80
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f000 fce3 	bl	800e6c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dcfe:	2100      	movs	r1, #0
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f000 fcdf 	bl	800e6c4 <USBD_LL_StallEP>
}
 800dd06:	bf00      	nop
 800dd08:	3708      	adds	r7, #8
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b086      	sub	sp, #24
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	60f8      	str	r0, [r7, #12]
 800dd16:	60b9      	str	r1, [r7, #8]
 800dd18:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d036      	beq.n	800dd92 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dd28:	6938      	ldr	r0, [r7, #16]
 800dd2a:	f000 f836 	bl	800dd9a <USBD_GetLen>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	3301      	adds	r3, #1
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	005b      	lsls	r3, r3, #1
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dd3c:	7dfb      	ldrb	r3, [r7, #23]
 800dd3e:	68ba      	ldr	r2, [r7, #8]
 800dd40:	4413      	add	r3, r2
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	7812      	ldrb	r2, [r2, #0]
 800dd46:	701a      	strb	r2, [r3, #0]
  idx++;
 800dd48:	7dfb      	ldrb	r3, [r7, #23]
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dd4e:	7dfb      	ldrb	r3, [r7, #23]
 800dd50:	68ba      	ldr	r2, [r7, #8]
 800dd52:	4413      	add	r3, r2
 800dd54:	2203      	movs	r2, #3
 800dd56:	701a      	strb	r2, [r3, #0]
  idx++;
 800dd58:	7dfb      	ldrb	r3, [r7, #23]
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dd5e:	e013      	b.n	800dd88 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dd60:	7dfb      	ldrb	r3, [r7, #23]
 800dd62:	68ba      	ldr	r2, [r7, #8]
 800dd64:	4413      	add	r3, r2
 800dd66:	693a      	ldr	r2, [r7, #16]
 800dd68:	7812      	ldrb	r2, [r2, #0]
 800dd6a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	3301      	adds	r3, #1
 800dd70:	613b      	str	r3, [r7, #16]
    idx++;
 800dd72:	7dfb      	ldrb	r3, [r7, #23]
 800dd74:	3301      	adds	r3, #1
 800dd76:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dd78:	7dfb      	ldrb	r3, [r7, #23]
 800dd7a:	68ba      	ldr	r2, [r7, #8]
 800dd7c:	4413      	add	r3, r2
 800dd7e:	2200      	movs	r2, #0
 800dd80:	701a      	strb	r2, [r3, #0]
    idx++;
 800dd82:	7dfb      	ldrb	r3, [r7, #23]
 800dd84:	3301      	adds	r3, #1
 800dd86:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d1e7      	bne.n	800dd60 <USBD_GetString+0x52>
 800dd90:	e000      	b.n	800dd94 <USBD_GetString+0x86>
    return;
 800dd92:	bf00      	nop
  }
}
 800dd94:	3718      	adds	r7, #24
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}

0800dd9a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dd9a:	b480      	push	{r7}
 800dd9c:	b085      	sub	sp, #20
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dda2:	2300      	movs	r3, #0
 800dda4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ddaa:	e005      	b.n	800ddb8 <USBD_GetLen+0x1e>
  {
    len++;
 800ddac:	7bfb      	ldrb	r3, [r7, #15]
 800ddae:	3301      	adds	r3, #1
 800ddb0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d1f5      	bne.n	800ddac <USBD_GetLen+0x12>
  }

  return len;
 800ddc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3714      	adds	r7, #20
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr

0800ddce <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b084      	sub	sp, #16
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	60f8      	str	r0, [r7, #12]
 800ddd6:	60b9      	str	r1, [r7, #8]
 800ddd8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	2202      	movs	r2, #2
 800ddde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	687a      	ldr	r2, [r7, #4]
 800ddec:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	68ba      	ldr	r2, [r7, #8]
 800ddf2:	2100      	movs	r1, #0
 800ddf4:	68f8      	ldr	r0, [r7, #12]
 800ddf6:	f000 fd35 	bl	800e864 <USBD_LL_Transmit>

  return USBD_OK;
 800ddfa:	2300      	movs	r3, #0
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3710      	adds	r7, #16
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	60f8      	str	r0, [r7, #12]
 800de0c:	60b9      	str	r1, [r7, #8]
 800de0e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	68ba      	ldr	r2, [r7, #8]
 800de14:	2100      	movs	r1, #0
 800de16:	68f8      	ldr	r0, [r7, #12]
 800de18:	f000 fd24 	bl	800e864 <USBD_LL_Transmit>

  return USBD_OK;
 800de1c:	2300      	movs	r3, #0
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3710      	adds	r7, #16
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800de26:	b580      	push	{r7, lr}
 800de28:	b084      	sub	sp, #16
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	60f8      	str	r0, [r7, #12]
 800de2e:	60b9      	str	r1, [r7, #8]
 800de30:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2203      	movs	r2, #3
 800de36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	687a      	ldr	r2, [r7, #4]
 800de3e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	687a      	ldr	r2, [r7, #4]
 800de46:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	68ba      	ldr	r2, [r7, #8]
 800de4e:	2100      	movs	r1, #0
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	f000 fd3f 	bl	800e8d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800de56:	2300      	movs	r3, #0
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3710      	adds	r7, #16
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	68ba      	ldr	r2, [r7, #8]
 800de70:	2100      	movs	r1, #0
 800de72:	68f8      	ldr	r0, [r7, #12]
 800de74:	f000 fd2e 	bl	800e8d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800de78:	2300      	movs	r3, #0
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3710      	adds	r7, #16
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}

0800de82 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800de82:	b580      	push	{r7, lr}
 800de84:	b082      	sub	sp, #8
 800de86:	af00      	add	r7, sp, #0
 800de88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2204      	movs	r2, #4
 800de8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800de92:	2300      	movs	r3, #0
 800de94:	2200      	movs	r2, #0
 800de96:	2100      	movs	r1, #0
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f000 fce3 	bl	800e864 <USBD_LL_Transmit>

  return USBD_OK;
 800de9e:	2300      	movs	r3, #0
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3708      	adds	r7, #8
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b082      	sub	sp, #8
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2205      	movs	r2, #5
 800deb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800deb8:	2300      	movs	r3, #0
 800deba:	2200      	movs	r2, #0
 800debc:	2100      	movs	r1, #0
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f000 fd08 	bl	800e8d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dec4:	2300      	movs	r3, #0
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3708      	adds	r7, #8
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
	...

0800ded0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ded4:	2200      	movs	r2, #0
 800ded6:	4912      	ldr	r1, [pc, #72]	; (800df20 <MX_USB_DEVICE_Init+0x50>)
 800ded8:	4812      	ldr	r0, [pc, #72]	; (800df24 <MX_USB_DEVICE_Init+0x54>)
 800deda:	f7fe ff03 	bl	800cce4 <USBD_Init>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d001      	beq.n	800dee8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dee4:	f7f5 fe76 	bl	8003bd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dee8:	490f      	ldr	r1, [pc, #60]	; (800df28 <MX_USB_DEVICE_Init+0x58>)
 800deea:	480e      	ldr	r0, [pc, #56]	; (800df24 <MX_USB_DEVICE_Init+0x54>)
 800deec:	f7fe ff2a 	bl	800cd44 <USBD_RegisterClass>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	d001      	beq.n	800defa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800def6:	f7f5 fe6d 	bl	8003bd4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800defa:	490c      	ldr	r1, [pc, #48]	; (800df2c <MX_USB_DEVICE_Init+0x5c>)
 800defc:	4809      	ldr	r0, [pc, #36]	; (800df24 <MX_USB_DEVICE_Init+0x54>)
 800defe:	f7fe fe4b 	bl	800cb98 <USBD_CDC_RegisterInterface>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d001      	beq.n	800df0c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800df08:	f7f5 fe64 	bl	8003bd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800df0c:	4805      	ldr	r0, [pc, #20]	; (800df24 <MX_USB_DEVICE_Init+0x54>)
 800df0e:	f7fe ff40 	bl	800cd92 <USBD_Start>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d001      	beq.n	800df1c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800df18:	f7f5 fe5c 	bl	8003bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800df1c:	bf00      	nop
 800df1e:	bd80      	pop	{r7, pc}
 800df20:	20000150 	.word	0x20000150
 800df24:	200005c8 	.word	0x200005c8
 800df28:	20000038 	.word	0x20000038
 800df2c:	2000013c 	.word	0x2000013c

0800df30 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800df34:	2200      	movs	r2, #0
 800df36:	4905      	ldr	r1, [pc, #20]	; (800df4c <CDC_Init_FS+0x1c>)
 800df38:	4805      	ldr	r0, [pc, #20]	; (800df50 <CDC_Init_FS+0x20>)
 800df3a:	f7fe fe42 	bl	800cbc2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800df3e:	4905      	ldr	r1, [pc, #20]	; (800df54 <CDC_Init_FS+0x24>)
 800df40:	4803      	ldr	r0, [pc, #12]	; (800df50 <CDC_Init_FS+0x20>)
 800df42:	f7fe fe5c 	bl	800cbfe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800df46:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800df48:	4618      	mov	r0, r3
 800df4a:	bd80      	pop	{r7, pc}
 800df4c:	20000994 	.word	0x20000994
 800df50:	200005c8 	.word	0x200005c8
 800df54:	20000898 	.word	0x20000898

0800df58 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800df58:	b480      	push	{r7}
 800df5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800df5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800df5e:	4618      	mov	r0, r3
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800df68:	b480      	push	{r7}
 800df6a:	b083      	sub	sp, #12
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	4603      	mov	r3, r0
 800df70:	6039      	str	r1, [r7, #0]
 800df72:	71fb      	strb	r3, [r7, #7]
 800df74:	4613      	mov	r3, r2
 800df76:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800df78:	79fb      	ldrb	r3, [r7, #7]
 800df7a:	2b23      	cmp	r3, #35	; 0x23
 800df7c:	d84a      	bhi.n	800e014 <CDC_Control_FS+0xac>
 800df7e:	a201      	add	r2, pc, #4	; (adr r2, 800df84 <CDC_Control_FS+0x1c>)
 800df80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df84:	0800e015 	.word	0x0800e015
 800df88:	0800e015 	.word	0x0800e015
 800df8c:	0800e015 	.word	0x0800e015
 800df90:	0800e015 	.word	0x0800e015
 800df94:	0800e015 	.word	0x0800e015
 800df98:	0800e015 	.word	0x0800e015
 800df9c:	0800e015 	.word	0x0800e015
 800dfa0:	0800e015 	.word	0x0800e015
 800dfa4:	0800e015 	.word	0x0800e015
 800dfa8:	0800e015 	.word	0x0800e015
 800dfac:	0800e015 	.word	0x0800e015
 800dfb0:	0800e015 	.word	0x0800e015
 800dfb4:	0800e015 	.word	0x0800e015
 800dfb8:	0800e015 	.word	0x0800e015
 800dfbc:	0800e015 	.word	0x0800e015
 800dfc0:	0800e015 	.word	0x0800e015
 800dfc4:	0800e015 	.word	0x0800e015
 800dfc8:	0800e015 	.word	0x0800e015
 800dfcc:	0800e015 	.word	0x0800e015
 800dfd0:	0800e015 	.word	0x0800e015
 800dfd4:	0800e015 	.word	0x0800e015
 800dfd8:	0800e015 	.word	0x0800e015
 800dfdc:	0800e015 	.word	0x0800e015
 800dfe0:	0800e015 	.word	0x0800e015
 800dfe4:	0800e015 	.word	0x0800e015
 800dfe8:	0800e015 	.word	0x0800e015
 800dfec:	0800e015 	.word	0x0800e015
 800dff0:	0800e015 	.word	0x0800e015
 800dff4:	0800e015 	.word	0x0800e015
 800dff8:	0800e015 	.word	0x0800e015
 800dffc:	0800e015 	.word	0x0800e015
 800e000:	0800e015 	.word	0x0800e015
 800e004:	0800e015 	.word	0x0800e015
 800e008:	0800e015 	.word	0x0800e015
 800e00c:	0800e015 	.word	0x0800e015
 800e010:	0800e015 	.word	0x0800e015
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e014:	bf00      	nop
  }

  return (USBD_OK);
 800e016:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e018:	4618      	mov	r0, r3
 800e01a:	370c      	adds	r7, #12
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr

0800e024 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b082      	sub	sp, #8
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e02e:	6879      	ldr	r1, [r7, #4]
 800e030:	4808      	ldr	r0, [pc, #32]	; (800e054 <CDC_Receive_FS+0x30>)
 800e032:	f7fe fde4 	bl	800cbfe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e036:	4807      	ldr	r0, [pc, #28]	; (800e054 <CDC_Receive_FS+0x30>)
 800e038:	f7fe fe2a 	bl	800cc90 <USBD_CDC_ReceivePacket>
  USB_CDC_RX_Interrupt(Buf, *Len);
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4619      	mov	r1, r3
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f7f5 fdb0 	bl	8003ba8 <USB_CDC_RX_Interrupt>
  return (USBD_OK);
 800e048:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	3708      	adds	r7, #8
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}
 800e052:	bf00      	nop
 800e054:	200005c8 	.word	0x200005c8

0800e058 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	460b      	mov	r3, r1
 800e062:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e064:	2300      	movs	r3, #0
 800e066:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e068:	4b0d      	ldr	r3, [pc, #52]	; (800e0a0 <CDC_Transmit_FS+0x48>)
 800e06a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e06e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e076:	2b00      	cmp	r3, #0
 800e078:	d001      	beq.n	800e07e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e07a:	2301      	movs	r3, #1
 800e07c:	e00b      	b.n	800e096 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e07e:	887b      	ldrh	r3, [r7, #2]
 800e080:	461a      	mov	r2, r3
 800e082:	6879      	ldr	r1, [r7, #4]
 800e084:	4806      	ldr	r0, [pc, #24]	; (800e0a0 <CDC_Transmit_FS+0x48>)
 800e086:	f7fe fd9c 	bl	800cbc2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e08a:	4805      	ldr	r0, [pc, #20]	; (800e0a0 <CDC_Transmit_FS+0x48>)
 800e08c:	f7fe fdd0 	bl	800cc30 <USBD_CDC_TransmitPacket>
 800e090:	4603      	mov	r3, r0
 800e092:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e094:	7bfb      	ldrb	r3, [r7, #15]
}
 800e096:	4618      	mov	r0, r3
 800e098:	3710      	adds	r7, #16
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	200005c8 	.word	0x200005c8

0800e0a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b087      	sub	sp, #28
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	60f8      	str	r0, [r7, #12]
 800e0ac:	60b9      	str	r1, [r7, #8]
 800e0ae:	4613      	mov	r3, r2
 800e0b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e0b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	371c      	adds	r7, #28
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c4:	4770      	bx	lr
	...

0800e0c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	b083      	sub	sp, #12
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	6039      	str	r1, [r7, #0]
 800e0d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	2212      	movs	r2, #18
 800e0d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e0da:	4b03      	ldr	r3, [pc, #12]	; (800e0e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	370c      	adds	r7, #12
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr
 800e0e8:	2000016c 	.word	0x2000016c

0800e0ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b083      	sub	sp, #12
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	6039      	str	r1, [r7, #0]
 800e0f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	2204      	movs	r2, #4
 800e0fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e0fe:	4b03      	ldr	r3, [pc, #12]	; (800e10c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e100:	4618      	mov	r0, r3
 800e102:	370c      	adds	r7, #12
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr
 800e10c:	20000180 	.word	0x20000180

0800e110 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b082      	sub	sp, #8
 800e114:	af00      	add	r7, sp, #0
 800e116:	4603      	mov	r3, r0
 800e118:	6039      	str	r1, [r7, #0]
 800e11a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e11c:	79fb      	ldrb	r3, [r7, #7]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d105      	bne.n	800e12e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e122:	683a      	ldr	r2, [r7, #0]
 800e124:	4907      	ldr	r1, [pc, #28]	; (800e144 <USBD_FS_ProductStrDescriptor+0x34>)
 800e126:	4808      	ldr	r0, [pc, #32]	; (800e148 <USBD_FS_ProductStrDescriptor+0x38>)
 800e128:	f7ff fdf1 	bl	800dd0e <USBD_GetString>
 800e12c:	e004      	b.n	800e138 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e12e:	683a      	ldr	r2, [r7, #0]
 800e130:	4904      	ldr	r1, [pc, #16]	; (800e144 <USBD_FS_ProductStrDescriptor+0x34>)
 800e132:	4805      	ldr	r0, [pc, #20]	; (800e148 <USBD_FS_ProductStrDescriptor+0x38>)
 800e134:	f7ff fdeb 	bl	800dd0e <USBD_GetString>
  }
  return USBD_StrDesc;
 800e138:	4b02      	ldr	r3, [pc, #8]	; (800e144 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3708      	adds	r7, #8
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}
 800e142:	bf00      	nop
 800e144:	20000a90 	.word	0x20000a90
 800e148:	0800ec98 	.word	0x0800ec98

0800e14c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af00      	add	r7, sp, #0
 800e152:	4603      	mov	r3, r0
 800e154:	6039      	str	r1, [r7, #0]
 800e156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e158:	683a      	ldr	r2, [r7, #0]
 800e15a:	4904      	ldr	r1, [pc, #16]	; (800e16c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e15c:	4804      	ldr	r0, [pc, #16]	; (800e170 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e15e:	f7ff fdd6 	bl	800dd0e <USBD_GetString>
  return USBD_StrDesc;
 800e162:	4b02      	ldr	r3, [pc, #8]	; (800e16c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e164:	4618      	mov	r0, r3
 800e166:	3708      	adds	r7, #8
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	20000a90 	.word	0x20000a90
 800e170:	0800ecb0 	.word	0x0800ecb0

0800e174 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	4603      	mov	r3, r0
 800e17c:	6039      	str	r1, [r7, #0]
 800e17e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	221a      	movs	r2, #26
 800e184:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e186:	f000 f843 	bl	800e210 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e18a:	4b02      	ldr	r3, [pc, #8]	; (800e194 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3708      	adds	r7, #8
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}
 800e194:	20000184 	.word	0x20000184

0800e198 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	4603      	mov	r3, r0
 800e1a0:	6039      	str	r1, [r7, #0]
 800e1a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e1a4:	79fb      	ldrb	r3, [r7, #7]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d105      	bne.n	800e1b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e1aa:	683a      	ldr	r2, [r7, #0]
 800e1ac:	4907      	ldr	r1, [pc, #28]	; (800e1cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800e1ae:	4808      	ldr	r0, [pc, #32]	; (800e1d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e1b0:	f7ff fdad 	bl	800dd0e <USBD_GetString>
 800e1b4:	e004      	b.n	800e1c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e1b6:	683a      	ldr	r2, [r7, #0]
 800e1b8:	4904      	ldr	r1, [pc, #16]	; (800e1cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800e1ba:	4805      	ldr	r0, [pc, #20]	; (800e1d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e1bc:	f7ff fda7 	bl	800dd0e <USBD_GetString>
  }
  return USBD_StrDesc;
 800e1c0:	4b02      	ldr	r3, [pc, #8]	; (800e1cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3708      	adds	r7, #8
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	20000a90 	.word	0x20000a90
 800e1d0:	0800ecc4 	.word	0x0800ecc4

0800e1d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	4603      	mov	r3, r0
 800e1dc:	6039      	str	r1, [r7, #0]
 800e1de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e1e0:	79fb      	ldrb	r3, [r7, #7]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d105      	bne.n	800e1f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e1e6:	683a      	ldr	r2, [r7, #0]
 800e1e8:	4907      	ldr	r1, [pc, #28]	; (800e208 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e1ea:	4808      	ldr	r0, [pc, #32]	; (800e20c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e1ec:	f7ff fd8f 	bl	800dd0e <USBD_GetString>
 800e1f0:	e004      	b.n	800e1fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e1f2:	683a      	ldr	r2, [r7, #0]
 800e1f4:	4904      	ldr	r1, [pc, #16]	; (800e208 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e1f6:	4805      	ldr	r0, [pc, #20]	; (800e20c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e1f8:	f7ff fd89 	bl	800dd0e <USBD_GetString>
  }
  return USBD_StrDesc;
 800e1fc:	4b02      	ldr	r3, [pc, #8]	; (800e208 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3708      	adds	r7, #8
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
 800e206:	bf00      	nop
 800e208:	20000a90 	.word	0x20000a90
 800e20c:	0800ecd0 	.word	0x0800ecd0

0800e210 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b084      	sub	sp, #16
 800e214:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e216:	4b0f      	ldr	r3, [pc, #60]	; (800e254 <Get_SerialNum+0x44>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e21c:	4b0e      	ldr	r3, [pc, #56]	; (800e258 <Get_SerialNum+0x48>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e222:	4b0e      	ldr	r3, [pc, #56]	; (800e25c <Get_SerialNum+0x4c>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e228:	68fa      	ldr	r2, [r7, #12]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	4413      	add	r3, r2
 800e22e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d009      	beq.n	800e24a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e236:	2208      	movs	r2, #8
 800e238:	4909      	ldr	r1, [pc, #36]	; (800e260 <Get_SerialNum+0x50>)
 800e23a:	68f8      	ldr	r0, [r7, #12]
 800e23c:	f000 f814 	bl	800e268 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e240:	2204      	movs	r2, #4
 800e242:	4908      	ldr	r1, [pc, #32]	; (800e264 <Get_SerialNum+0x54>)
 800e244:	68b8      	ldr	r0, [r7, #8]
 800e246:	f000 f80f 	bl	800e268 <IntToUnicode>
  }
}
 800e24a:	bf00      	nop
 800e24c:	3710      	adds	r7, #16
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop
 800e254:	1fff7590 	.word	0x1fff7590
 800e258:	1fff7594 	.word	0x1fff7594
 800e25c:	1fff7598 	.word	0x1fff7598
 800e260:	20000186 	.word	0x20000186
 800e264:	20000196 	.word	0x20000196

0800e268 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e268:	b480      	push	{r7}
 800e26a:	b087      	sub	sp, #28
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	60b9      	str	r1, [r7, #8]
 800e272:	4613      	mov	r3, r2
 800e274:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e276:	2300      	movs	r3, #0
 800e278:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e27a:	2300      	movs	r3, #0
 800e27c:	75fb      	strb	r3, [r7, #23]
 800e27e:	e027      	b.n	800e2d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	0f1b      	lsrs	r3, r3, #28
 800e284:	2b09      	cmp	r3, #9
 800e286:	d80b      	bhi.n	800e2a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	0f1b      	lsrs	r3, r3, #28
 800e28c:	b2da      	uxtb	r2, r3
 800e28e:	7dfb      	ldrb	r3, [r7, #23]
 800e290:	005b      	lsls	r3, r3, #1
 800e292:	4619      	mov	r1, r3
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	440b      	add	r3, r1
 800e298:	3230      	adds	r2, #48	; 0x30
 800e29a:	b2d2      	uxtb	r2, r2
 800e29c:	701a      	strb	r2, [r3, #0]
 800e29e:	e00a      	b.n	800e2b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	0f1b      	lsrs	r3, r3, #28
 800e2a4:	b2da      	uxtb	r2, r3
 800e2a6:	7dfb      	ldrb	r3, [r7, #23]
 800e2a8:	005b      	lsls	r3, r3, #1
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	440b      	add	r3, r1
 800e2b0:	3237      	adds	r2, #55	; 0x37
 800e2b2:	b2d2      	uxtb	r2, r2
 800e2b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	011b      	lsls	r3, r3, #4
 800e2ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e2bc:	7dfb      	ldrb	r3, [r7, #23]
 800e2be:	005b      	lsls	r3, r3, #1
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	68ba      	ldr	r2, [r7, #8]
 800e2c4:	4413      	add	r3, r2
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e2ca:	7dfb      	ldrb	r3, [r7, #23]
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	75fb      	strb	r3, [r7, #23]
 800e2d0:	7dfa      	ldrb	r2, [r7, #23]
 800e2d2:	79fb      	ldrb	r3, [r7, #7]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d3d3      	bcc.n	800e280 <IntToUnicode+0x18>
  }
}
 800e2d8:	bf00      	nop
 800e2da:	bf00      	nop
 800e2dc:	371c      	adds	r7, #28
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr
	...

0800e2e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b09c      	sub	sp, #112	; 0x70
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e2f0:	f107 0310 	add.w	r3, r7, #16
 800e2f4:	2260      	movs	r2, #96	; 0x60
 800e2f6:	2100      	movs	r1, #0
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f000 fbbf 	bl	800ea7c <memset>
  if(pcdHandle->Instance==USB)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	4a15      	ldr	r2, [pc, #84]	; (800e358 <HAL_PCD_MspInit+0x70>)
 800e304:	4293      	cmp	r3, r2
 800e306:	d122      	bne.n	800e34e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e308:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e30c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e30e:	2300      	movs	r3, #0
 800e310:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e312:	f107 0310 	add.w	r3, r7, #16
 800e316:	4618      	mov	r0, r3
 800e318:	f7fa faf0 	bl	80088fc <HAL_RCCEx_PeriphCLKConfig>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d001      	beq.n	800e326 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800e322:	f7f5 fc57 	bl	8003bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e326:	4b0d      	ldr	r3, [pc, #52]	; (800e35c <HAL_PCD_MspInit+0x74>)
 800e328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e32a:	4a0c      	ldr	r2, [pc, #48]	; (800e35c <HAL_PCD_MspInit+0x74>)
 800e32c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e330:	6593      	str	r3, [r2, #88]	; 0x58
 800e332:	4b0a      	ldr	r3, [pc, #40]	; (800e35c <HAL_PCD_MspInit+0x74>)
 800e334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e336:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e33a:	60fb      	str	r3, [r7, #12]
 800e33c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800e33e:	2200      	movs	r2, #0
 800e340:	2100      	movs	r1, #0
 800e342:	2043      	movs	r0, #67	; 0x43
 800e344:	f7f6 fecd 	bl	80050e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800e348:	2043      	movs	r0, #67	; 0x43
 800e34a:	f7f6 fee6 	bl	800511a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e34e:	bf00      	nop
 800e350:	3770      	adds	r7, #112	; 0x70
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	40006800 	.word	0x40006800
 800e35c:	40021000 	.word	0x40021000

0800e360 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800e374:	4619      	mov	r1, r3
 800e376:	4610      	mov	r0, r2
 800e378:	f7fe fd56 	bl	800ce28 <USBD_LL_SetupStage>
}
 800e37c:	bf00      	nop
 800e37e:	3708      	adds	r7, #8
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
 800e38c:	460b      	mov	r3, r1
 800e38e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800e396:	78fa      	ldrb	r2, [r7, #3]
 800e398:	6879      	ldr	r1, [r7, #4]
 800e39a:	4613      	mov	r3, r2
 800e39c:	009b      	lsls	r3, r3, #2
 800e39e:	4413      	add	r3, r2
 800e3a0:	00db      	lsls	r3, r3, #3
 800e3a2:	440b      	add	r3, r1
 800e3a4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	78fb      	ldrb	r3, [r7, #3]
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	f7fe fd90 	bl	800ced2 <USBD_LL_DataOutStage>
}
 800e3b2:	bf00      	nop
 800e3b4:	3708      	adds	r7, #8
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}

0800e3ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3ba:	b580      	push	{r7, lr}
 800e3bc:	b082      	sub	sp, #8
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]
 800e3c2:	460b      	mov	r3, r1
 800e3c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800e3cc:	78fa      	ldrb	r2, [r7, #3]
 800e3ce:	6879      	ldr	r1, [r7, #4]
 800e3d0:	4613      	mov	r3, r2
 800e3d2:	009b      	lsls	r3, r3, #2
 800e3d4:	4413      	add	r3, r2
 800e3d6:	00db      	lsls	r3, r3, #3
 800e3d8:	440b      	add	r3, r1
 800e3da:	3340      	adds	r3, #64	; 0x40
 800e3dc:	681a      	ldr	r2, [r3, #0]
 800e3de:	78fb      	ldrb	r3, [r7, #3]
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	f7fe fdd9 	bl	800cf98 <USBD_LL_DataInStage>
}
 800e3e6:	bf00      	nop
 800e3e8:	3708      	adds	r7, #8
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}

0800e3ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3ee:	b580      	push	{r7, lr}
 800e3f0:	b082      	sub	sp, #8
 800e3f2:	af00      	add	r7, sp, #0
 800e3f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7fe feed 	bl	800d1dc <USBD_LL_SOF>
}
 800e402:	bf00      	nop
 800e404:	3708      	adds	r7, #8
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b084      	sub	sp, #16
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e412:	2301      	movs	r3, #1
 800e414:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	689b      	ldr	r3, [r3, #8]
 800e41a:	2b02      	cmp	r3, #2
 800e41c:	d001      	beq.n	800e422 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e41e:	f7f5 fbd9 	bl	8003bd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e428:	7bfa      	ldrb	r2, [r7, #15]
 800e42a:	4611      	mov	r1, r2
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7fe fe97 	bl	800d160 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e438:	4618      	mov	r0, r3
 800e43a:	f7fe fe43 	bl	800d0c4 <USBD_LL_Reset>
}
 800e43e:	bf00      	nop
 800e440:	3710      	adds	r7, #16
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
	...

0800e448 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e456:	4618      	mov	r0, r3
 800e458:	f7fe fe92 	bl	800d180 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	699b      	ldr	r3, [r3, #24]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d005      	beq.n	800e470 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e464:	4b04      	ldr	r3, [pc, #16]	; (800e478 <HAL_PCD_SuspendCallback+0x30>)
 800e466:	691b      	ldr	r3, [r3, #16]
 800e468:	4a03      	ldr	r2, [pc, #12]	; (800e478 <HAL_PCD_SuspendCallback+0x30>)
 800e46a:	f043 0306 	orr.w	r3, r3, #6
 800e46e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e470:	bf00      	nop
 800e472:	3708      	adds	r7, #8
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	e000ed00 	.word	0xe000ed00

0800e47c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b082      	sub	sp, #8
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	699b      	ldr	r3, [r3, #24]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d007      	beq.n	800e49c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e48c:	4b08      	ldr	r3, [pc, #32]	; (800e4b0 <HAL_PCD_ResumeCallback+0x34>)
 800e48e:	691b      	ldr	r3, [r3, #16]
 800e490:	4a07      	ldr	r2, [pc, #28]	; (800e4b0 <HAL_PCD_ResumeCallback+0x34>)
 800e492:	f023 0306 	bic.w	r3, r3, #6
 800e496:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e498:	f000 fa80 	bl	800e99c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f7fe fe82 	bl	800d1ac <USBD_LL_Resume>
}
 800e4a8:	bf00      	nop
 800e4aa:	3708      	adds	r7, #8
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}
 800e4b0:	e000ed00 	.word	0xe000ed00

0800e4b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b082      	sub	sp, #8
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800e4bc:	f7f9 fc0e 	bl	8007cdc <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e4c0:	4a2b      	ldr	r2, [pc, #172]	; (800e570 <USBD_LL_Init+0xbc>)
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	4a29      	ldr	r2, [pc, #164]	; (800e570 <USBD_LL_Init+0xbc>)
 800e4cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800e4d0:	4b27      	ldr	r3, [pc, #156]	; (800e570 <USBD_LL_Init+0xbc>)
 800e4d2:	4a28      	ldr	r2, [pc, #160]	; (800e574 <USBD_LL_Init+0xc0>)
 800e4d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e4d6:	4b26      	ldr	r3, [pc, #152]	; (800e570 <USBD_LL_Init+0xbc>)
 800e4d8:	2208      	movs	r2, #8
 800e4da:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e4dc:	4b24      	ldr	r3, [pc, #144]	; (800e570 <USBD_LL_Init+0xbc>)
 800e4de:	2202      	movs	r2, #2
 800e4e0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e4e2:	4b23      	ldr	r3, [pc, #140]	; (800e570 <USBD_LL_Init+0xbc>)
 800e4e4:	2202      	movs	r2, #2
 800e4e6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e4e8:	4b21      	ldr	r3, [pc, #132]	; (800e570 <USBD_LL_Init+0xbc>)
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e4ee:	4b20      	ldr	r3, [pc, #128]	; (800e570 <USBD_LL_Init+0xbc>)
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e4f4:	4b1e      	ldr	r3, [pc, #120]	; (800e570 <USBD_LL_Init+0xbc>)
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e4fa:	4b1d      	ldr	r3, [pc, #116]	; (800e570 <USBD_LL_Init+0xbc>)
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e500:	481b      	ldr	r0, [pc, #108]	; (800e570 <USBD_LL_Init+0xbc>)
 800e502:	f7f7 fdef 	bl	80060e4 <HAL_PCD_Init>
 800e506:	4603      	mov	r3, r0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d001      	beq.n	800e510 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800e50c:	f7f5 fb62 	bl	8003bd4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e516:	2318      	movs	r3, #24
 800e518:	2200      	movs	r2, #0
 800e51a:	2100      	movs	r1, #0
 800e51c:	f7f9 faff 	bl	8007b1e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e526:	2358      	movs	r3, #88	; 0x58
 800e528:	2200      	movs	r2, #0
 800e52a:	2180      	movs	r1, #128	; 0x80
 800e52c:	f7f9 faf7 	bl	8007b1e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e536:	23c0      	movs	r3, #192	; 0xc0
 800e538:	2200      	movs	r2, #0
 800e53a:	2181      	movs	r1, #129	; 0x81
 800e53c:	f7f9 faef 	bl	8007b1e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e546:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e54a:	2200      	movs	r2, #0
 800e54c:	2101      	movs	r1, #1
 800e54e:	f7f9 fae6 	bl	8007b1e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e55c:	2200      	movs	r2, #0
 800e55e:	2182      	movs	r1, #130	; 0x82
 800e560:	f7f9 fadd 	bl	8007b1e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e564:	2300      	movs	r3, #0
}
 800e566:	4618      	mov	r0, r3
 800e568:	3708      	adds	r7, #8
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	bf00      	nop
 800e570:	20000c90 	.word	0x20000c90
 800e574:	40006800 	.word	0x40006800

0800e578 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e580:	2300      	movs	r3, #0
 800e582:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e584:	2300      	movs	r3, #0
 800e586:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e58e:	4618      	mov	r0, r3
 800e590:	f7f7 febf 	bl	8006312 <HAL_PCD_Start>
 800e594:	4603      	mov	r3, r0
 800e596:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e598:	7bbb      	ldrb	r3, [r7, #14]
 800e59a:	2b03      	cmp	r3, #3
 800e59c:	d816      	bhi.n	800e5cc <USBD_LL_Start+0x54>
 800e59e:	a201      	add	r2, pc, #4	; (adr r2, 800e5a4 <USBD_LL_Start+0x2c>)
 800e5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5a4:	0800e5b5 	.word	0x0800e5b5
 800e5a8:	0800e5bb 	.word	0x0800e5bb
 800e5ac:	0800e5c1 	.word	0x0800e5c1
 800e5b0:	0800e5c7 	.word	0x0800e5c7
    case HAL_OK :
      usb_status = USBD_OK;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	73fb      	strb	r3, [r7, #15]
    break;
 800e5b8:	e00b      	b.n	800e5d2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e5ba:	2303      	movs	r3, #3
 800e5bc:	73fb      	strb	r3, [r7, #15]
    break;
 800e5be:	e008      	b.n	800e5d2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	73fb      	strb	r3, [r7, #15]
    break;
 800e5c4:	e005      	b.n	800e5d2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e5c6:	2303      	movs	r3, #3
 800e5c8:	73fb      	strb	r3, [r7, #15]
    break;
 800e5ca:	e002      	b.n	800e5d2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800e5cc:	2303      	movs	r3, #3
 800e5ce:	73fb      	strb	r3, [r7, #15]
    break;
 800e5d0:	bf00      	nop
  }
  return usb_status;
 800e5d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3710      	adds	r7, #16
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b084      	sub	sp, #16
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	4608      	mov	r0, r1
 800e5e6:	4611      	mov	r1, r2
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	70fb      	strb	r3, [r7, #3]
 800e5ee:	460b      	mov	r3, r1
 800e5f0:	70bb      	strb	r3, [r7, #2]
 800e5f2:	4613      	mov	r3, r2
 800e5f4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e604:	78bb      	ldrb	r3, [r7, #2]
 800e606:	883a      	ldrh	r2, [r7, #0]
 800e608:	78f9      	ldrb	r1, [r7, #3]
 800e60a:	f7f7 fff0 	bl	80065ee <HAL_PCD_EP_Open>
 800e60e:	4603      	mov	r3, r0
 800e610:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e612:	7bbb      	ldrb	r3, [r7, #14]
 800e614:	2b03      	cmp	r3, #3
 800e616:	d817      	bhi.n	800e648 <USBD_LL_OpenEP+0x6c>
 800e618:	a201      	add	r2, pc, #4	; (adr r2, 800e620 <USBD_LL_OpenEP+0x44>)
 800e61a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e61e:	bf00      	nop
 800e620:	0800e631 	.word	0x0800e631
 800e624:	0800e637 	.word	0x0800e637
 800e628:	0800e63d 	.word	0x0800e63d
 800e62c:	0800e643 	.word	0x0800e643
    case HAL_OK :
      usb_status = USBD_OK;
 800e630:	2300      	movs	r3, #0
 800e632:	73fb      	strb	r3, [r7, #15]
    break;
 800e634:	e00b      	b.n	800e64e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e636:	2303      	movs	r3, #3
 800e638:	73fb      	strb	r3, [r7, #15]
    break;
 800e63a:	e008      	b.n	800e64e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e63c:	2301      	movs	r3, #1
 800e63e:	73fb      	strb	r3, [r7, #15]
    break;
 800e640:	e005      	b.n	800e64e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e642:	2303      	movs	r3, #3
 800e644:	73fb      	strb	r3, [r7, #15]
    break;
 800e646:	e002      	b.n	800e64e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800e648:	2303      	movs	r3, #3
 800e64a:	73fb      	strb	r3, [r7, #15]
    break;
 800e64c:	bf00      	nop
  }
  return usb_status;
 800e64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e650:	4618      	mov	r0, r3
 800e652:	3710      	adds	r7, #16
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b084      	sub	sp, #16
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	460b      	mov	r3, r1
 800e662:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e664:	2300      	movs	r3, #0
 800e666:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e668:	2300      	movs	r3, #0
 800e66a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e672:	78fa      	ldrb	r2, [r7, #3]
 800e674:	4611      	mov	r1, r2
 800e676:	4618      	mov	r0, r3
 800e678:	f7f8 f821 	bl	80066be <HAL_PCD_EP_Close>
 800e67c:	4603      	mov	r3, r0
 800e67e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e680:	7bbb      	ldrb	r3, [r7, #14]
 800e682:	2b03      	cmp	r3, #3
 800e684:	d816      	bhi.n	800e6b4 <USBD_LL_CloseEP+0x5c>
 800e686:	a201      	add	r2, pc, #4	; (adr r2, 800e68c <USBD_LL_CloseEP+0x34>)
 800e688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e68c:	0800e69d 	.word	0x0800e69d
 800e690:	0800e6a3 	.word	0x0800e6a3
 800e694:	0800e6a9 	.word	0x0800e6a9
 800e698:	0800e6af 	.word	0x0800e6af
    case HAL_OK :
      usb_status = USBD_OK;
 800e69c:	2300      	movs	r3, #0
 800e69e:	73fb      	strb	r3, [r7, #15]
    break;
 800e6a0:	e00b      	b.n	800e6ba <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e6a2:	2303      	movs	r3, #3
 800e6a4:	73fb      	strb	r3, [r7, #15]
    break;
 800e6a6:	e008      	b.n	800e6ba <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	73fb      	strb	r3, [r7, #15]
    break;
 800e6ac:	e005      	b.n	800e6ba <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e6ae:	2303      	movs	r3, #3
 800e6b0:	73fb      	strb	r3, [r7, #15]
    break;
 800e6b2:	e002      	b.n	800e6ba <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e6b4:	2303      	movs	r3, #3
 800e6b6:	73fb      	strb	r3, [r7, #15]
    break;
 800e6b8:	bf00      	nop
  }
  return usb_status;
 800e6ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3710      	adds	r7, #16
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b084      	sub	sp, #16
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	460b      	mov	r3, r1
 800e6ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e6de:	78fa      	ldrb	r2, [r7, #3]
 800e6e0:	4611      	mov	r1, r2
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7f8 f8cf 	bl	8006886 <HAL_PCD_EP_SetStall>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e6ec:	7bbb      	ldrb	r3, [r7, #14]
 800e6ee:	2b03      	cmp	r3, #3
 800e6f0:	d816      	bhi.n	800e720 <USBD_LL_StallEP+0x5c>
 800e6f2:	a201      	add	r2, pc, #4	; (adr r2, 800e6f8 <USBD_LL_StallEP+0x34>)
 800e6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6f8:	0800e709 	.word	0x0800e709
 800e6fc:	0800e70f 	.word	0x0800e70f
 800e700:	0800e715 	.word	0x0800e715
 800e704:	0800e71b 	.word	0x0800e71b
    case HAL_OK :
      usb_status = USBD_OK;
 800e708:	2300      	movs	r3, #0
 800e70a:	73fb      	strb	r3, [r7, #15]
    break;
 800e70c:	e00b      	b.n	800e726 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e70e:	2303      	movs	r3, #3
 800e710:	73fb      	strb	r3, [r7, #15]
    break;
 800e712:	e008      	b.n	800e726 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e714:	2301      	movs	r3, #1
 800e716:	73fb      	strb	r3, [r7, #15]
    break;
 800e718:	e005      	b.n	800e726 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e71a:	2303      	movs	r3, #3
 800e71c:	73fb      	strb	r3, [r7, #15]
    break;
 800e71e:	e002      	b.n	800e726 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e720:	2303      	movs	r3, #3
 800e722:	73fb      	strb	r3, [r7, #15]
    break;
 800e724:	bf00      	nop
  }
  return usb_status;
 800e726:	7bfb      	ldrb	r3, [r7, #15]
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3710      	adds	r7, #16
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	460b      	mov	r3, r1
 800e73a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e73c:	2300      	movs	r3, #0
 800e73e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e740:	2300      	movs	r3, #0
 800e742:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e74a:	78fa      	ldrb	r2, [r7, #3]
 800e74c:	4611      	mov	r1, r2
 800e74e:	4618      	mov	r0, r3
 800e750:	f7f8 f8fb 	bl	800694a <HAL_PCD_EP_ClrStall>
 800e754:	4603      	mov	r3, r0
 800e756:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e758:	7bbb      	ldrb	r3, [r7, #14]
 800e75a:	2b03      	cmp	r3, #3
 800e75c:	d816      	bhi.n	800e78c <USBD_LL_ClearStallEP+0x5c>
 800e75e:	a201      	add	r2, pc, #4	; (adr r2, 800e764 <USBD_LL_ClearStallEP+0x34>)
 800e760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e764:	0800e775 	.word	0x0800e775
 800e768:	0800e77b 	.word	0x0800e77b
 800e76c:	0800e781 	.word	0x0800e781
 800e770:	0800e787 	.word	0x0800e787
    case HAL_OK :
      usb_status = USBD_OK;
 800e774:	2300      	movs	r3, #0
 800e776:	73fb      	strb	r3, [r7, #15]
    break;
 800e778:	e00b      	b.n	800e792 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e77a:	2303      	movs	r3, #3
 800e77c:	73fb      	strb	r3, [r7, #15]
    break;
 800e77e:	e008      	b.n	800e792 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e780:	2301      	movs	r3, #1
 800e782:	73fb      	strb	r3, [r7, #15]
    break;
 800e784:	e005      	b.n	800e792 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e786:	2303      	movs	r3, #3
 800e788:	73fb      	strb	r3, [r7, #15]
    break;
 800e78a:	e002      	b.n	800e792 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e78c:	2303      	movs	r3, #3
 800e78e:	73fb      	strb	r3, [r7, #15]
    break;
 800e790:	bf00      	nop
  }
  return usb_status;
 800e792:	7bfb      	ldrb	r3, [r7, #15]
}
 800e794:	4618      	mov	r0, r3
 800e796:	3710      	adds	r7, #16
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e79c:	b480      	push	{r7}
 800e79e:	b085      	sub	sp, #20
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	460b      	mov	r3, r1
 800e7a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e7ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e7b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	da0c      	bge.n	800e7d2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e7b8:	78fb      	ldrb	r3, [r7, #3]
 800e7ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7be:	68f9      	ldr	r1, [r7, #12]
 800e7c0:	1c5a      	adds	r2, r3, #1
 800e7c2:	4613      	mov	r3, r2
 800e7c4:	009b      	lsls	r3, r3, #2
 800e7c6:	4413      	add	r3, r2
 800e7c8:	00db      	lsls	r3, r3, #3
 800e7ca:	440b      	add	r3, r1
 800e7cc:	3306      	adds	r3, #6
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	e00b      	b.n	800e7ea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e7d2:	78fb      	ldrb	r3, [r7, #3]
 800e7d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7d8:	68f9      	ldr	r1, [r7, #12]
 800e7da:	4613      	mov	r3, r2
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	4413      	add	r3, r2
 800e7e0:	00db      	lsls	r3, r3, #3
 800e7e2:	440b      	add	r3, r1
 800e7e4:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800e7e8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3714      	adds	r7, #20
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f4:	4770      	bx	lr
	...

0800e7f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	460b      	mov	r3, r1
 800e802:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e804:	2300      	movs	r3, #0
 800e806:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e808:	2300      	movs	r3, #0
 800e80a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e812:	78fa      	ldrb	r2, [r7, #3]
 800e814:	4611      	mov	r1, r2
 800e816:	4618      	mov	r0, r3
 800e818:	f7f7 fec4 	bl	80065a4 <HAL_PCD_SetAddress>
 800e81c:	4603      	mov	r3, r0
 800e81e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e820:	7bbb      	ldrb	r3, [r7, #14]
 800e822:	2b03      	cmp	r3, #3
 800e824:	d816      	bhi.n	800e854 <USBD_LL_SetUSBAddress+0x5c>
 800e826:	a201      	add	r2, pc, #4	; (adr r2, 800e82c <USBD_LL_SetUSBAddress+0x34>)
 800e828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e82c:	0800e83d 	.word	0x0800e83d
 800e830:	0800e843 	.word	0x0800e843
 800e834:	0800e849 	.word	0x0800e849
 800e838:	0800e84f 	.word	0x0800e84f
    case HAL_OK :
      usb_status = USBD_OK;
 800e83c:	2300      	movs	r3, #0
 800e83e:	73fb      	strb	r3, [r7, #15]
    break;
 800e840:	e00b      	b.n	800e85a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e842:	2303      	movs	r3, #3
 800e844:	73fb      	strb	r3, [r7, #15]
    break;
 800e846:	e008      	b.n	800e85a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e848:	2301      	movs	r3, #1
 800e84a:	73fb      	strb	r3, [r7, #15]
    break;
 800e84c:	e005      	b.n	800e85a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e84e:	2303      	movs	r3, #3
 800e850:	73fb      	strb	r3, [r7, #15]
    break;
 800e852:	e002      	b.n	800e85a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800e854:	2303      	movs	r3, #3
 800e856:	73fb      	strb	r3, [r7, #15]
    break;
 800e858:	bf00      	nop
  }
  return usb_status;
 800e85a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	3710      	adds	r7, #16
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b086      	sub	sp, #24
 800e868:	af00      	add	r7, sp, #0
 800e86a:	60f8      	str	r0, [r7, #12]
 800e86c:	607a      	str	r2, [r7, #4]
 800e86e:	603b      	str	r3, [r7, #0]
 800e870:	460b      	mov	r3, r1
 800e872:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e874:	2300      	movs	r3, #0
 800e876:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e878:	2300      	movs	r3, #0
 800e87a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e882:	7af9      	ldrb	r1, [r7, #11]
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	687a      	ldr	r2, [r7, #4]
 800e888:	f7f7 ffb9 	bl	80067fe <HAL_PCD_EP_Transmit>
 800e88c:	4603      	mov	r3, r0
 800e88e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e890:	7dbb      	ldrb	r3, [r7, #22]
 800e892:	2b03      	cmp	r3, #3
 800e894:	d816      	bhi.n	800e8c4 <USBD_LL_Transmit+0x60>
 800e896:	a201      	add	r2, pc, #4	; (adr r2, 800e89c <USBD_LL_Transmit+0x38>)
 800e898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e89c:	0800e8ad 	.word	0x0800e8ad
 800e8a0:	0800e8b3 	.word	0x0800e8b3
 800e8a4:	0800e8b9 	.word	0x0800e8b9
 800e8a8:	0800e8bf 	.word	0x0800e8bf
    case HAL_OK :
      usb_status = USBD_OK;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	75fb      	strb	r3, [r7, #23]
    break;
 800e8b0:	e00b      	b.n	800e8ca <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e8b2:	2303      	movs	r3, #3
 800e8b4:	75fb      	strb	r3, [r7, #23]
    break;
 800e8b6:	e008      	b.n	800e8ca <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	75fb      	strb	r3, [r7, #23]
    break;
 800e8bc:	e005      	b.n	800e8ca <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e8be:	2303      	movs	r3, #3
 800e8c0:	75fb      	strb	r3, [r7, #23]
    break;
 800e8c2:	e002      	b.n	800e8ca <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800e8c4:	2303      	movs	r3, #3
 800e8c6:	75fb      	strb	r3, [r7, #23]
    break;
 800e8c8:	bf00      	nop
  }
  return usb_status;
 800e8ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3718      	adds	r7, #24
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}

0800e8d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b086      	sub	sp, #24
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	607a      	str	r2, [r7, #4]
 800e8de:	603b      	str	r3, [r7, #0]
 800e8e0:	460b      	mov	r3, r1
 800e8e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e8f2:	7af9      	ldrb	r1, [r7, #11]
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	687a      	ldr	r2, [r7, #4]
 800e8f8:	f7f7 ff2b 	bl	8006752 <HAL_PCD_EP_Receive>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e900:	7dbb      	ldrb	r3, [r7, #22]
 800e902:	2b03      	cmp	r3, #3
 800e904:	d816      	bhi.n	800e934 <USBD_LL_PrepareReceive+0x60>
 800e906:	a201      	add	r2, pc, #4	; (adr r2, 800e90c <USBD_LL_PrepareReceive+0x38>)
 800e908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e90c:	0800e91d 	.word	0x0800e91d
 800e910:	0800e923 	.word	0x0800e923
 800e914:	0800e929 	.word	0x0800e929
 800e918:	0800e92f 	.word	0x0800e92f
    case HAL_OK :
      usb_status = USBD_OK;
 800e91c:	2300      	movs	r3, #0
 800e91e:	75fb      	strb	r3, [r7, #23]
    break;
 800e920:	e00b      	b.n	800e93a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e922:	2303      	movs	r3, #3
 800e924:	75fb      	strb	r3, [r7, #23]
    break;
 800e926:	e008      	b.n	800e93a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e928:	2301      	movs	r3, #1
 800e92a:	75fb      	strb	r3, [r7, #23]
    break;
 800e92c:	e005      	b.n	800e93a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e92e:	2303      	movs	r3, #3
 800e930:	75fb      	strb	r3, [r7, #23]
    break;
 800e932:	e002      	b.n	800e93a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800e934:	2303      	movs	r3, #3
 800e936:	75fb      	strb	r3, [r7, #23]
    break;
 800e938:	bf00      	nop
  }
  return usb_status;
 800e93a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3718      	adds	r7, #24
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b082      	sub	sp, #8
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	460b      	mov	r3, r1
 800e94e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e956:	78fa      	ldrb	r2, [r7, #3]
 800e958:	4611      	mov	r1, r2
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7f7 ff37 	bl	80067ce <HAL_PCD_EP_GetRxCount>
 800e960:	4603      	mov	r3, r0
}
 800e962:	4618      	mov	r0, r3
 800e964:	3708      	adds	r7, #8
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
	...

0800e96c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e96c:	b480      	push	{r7}
 800e96e:	b083      	sub	sp, #12
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e974:	4b03      	ldr	r3, [pc, #12]	; (800e984 <USBD_static_malloc+0x18>)
}
 800e976:	4618      	mov	r0, r3
 800e978:	370c      	adds	r7, #12
 800e97a:	46bd      	mov	sp, r7
 800e97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e980:	4770      	bx	lr
 800e982:	bf00      	nop
 800e984:	20000f8c 	.word	0x20000f8c

0800e988 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e988:	b480      	push	{r7}
 800e98a:	b083      	sub	sp, #12
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]

}
 800e990:	bf00      	nop
 800e992:	370c      	adds	r7, #12
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr

0800e99c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e99c:	b480      	push	{r7}
 800e99e:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800e9a0:	bf00      	nop
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr

0800e9aa <_Znwj>:
 800e9aa:	2801      	cmp	r0, #1
 800e9ac:	bf38      	it	cc
 800e9ae:	2001      	movcc	r0, #1
 800e9b0:	b510      	push	{r4, lr}
 800e9b2:	4604      	mov	r4, r0
 800e9b4:	4620      	mov	r0, r4
 800e9b6:	f000 f859 	bl	800ea6c <malloc>
 800e9ba:	b930      	cbnz	r0, 800e9ca <_Znwj+0x20>
 800e9bc:	f000 f81c 	bl	800e9f8 <_ZSt15get_new_handlerv>
 800e9c0:	b908      	cbnz	r0, 800e9c6 <_Znwj+0x1c>
 800e9c2:	f000 f821 	bl	800ea08 <abort>
 800e9c6:	4780      	blx	r0
 800e9c8:	e7f4      	b.n	800e9b4 <_Znwj+0xa>
 800e9ca:	bd10      	pop	{r4, pc}

0800e9cc <__cxa_pure_virtual>:
 800e9cc:	b508      	push	{r3, lr}
 800e9ce:	f000 f80d 	bl	800e9ec <_ZSt9terminatev>

0800e9d2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e9d2:	b508      	push	{r3, lr}
 800e9d4:	4780      	blx	r0
 800e9d6:	f000 f817 	bl	800ea08 <abort>
	...

0800e9dc <_ZSt13get_terminatev>:
 800e9dc:	4b02      	ldr	r3, [pc, #8]	; (800e9e8 <_ZSt13get_terminatev+0xc>)
 800e9de:	6818      	ldr	r0, [r3, #0]
 800e9e0:	f3bf 8f5b 	dmb	ish
 800e9e4:	4770      	bx	lr
 800e9e6:	bf00      	nop
 800e9e8:	200001a0 	.word	0x200001a0

0800e9ec <_ZSt9terminatev>:
 800e9ec:	b508      	push	{r3, lr}
 800e9ee:	f7ff fff5 	bl	800e9dc <_ZSt13get_terminatev>
 800e9f2:	f7ff ffee 	bl	800e9d2 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800e9f8 <_ZSt15get_new_handlerv>:
 800e9f8:	4b02      	ldr	r3, [pc, #8]	; (800ea04 <_ZSt15get_new_handlerv+0xc>)
 800e9fa:	6818      	ldr	r0, [r3, #0]
 800e9fc:	f3bf 8f5b 	dmb	ish
 800ea00:	4770      	bx	lr
 800ea02:	bf00      	nop
 800ea04:	200011ac 	.word	0x200011ac

0800ea08 <abort>:
 800ea08:	b508      	push	{r3, lr}
 800ea0a:	2006      	movs	r0, #6
 800ea0c:	f000 f90a 	bl	800ec24 <raise>
 800ea10:	2001      	movs	r0, #1
 800ea12:	f7f5 fa1d 	bl	8003e50 <_exit>
	...

0800ea18 <__errno>:
 800ea18:	4b01      	ldr	r3, [pc, #4]	; (800ea20 <__errno+0x8>)
 800ea1a:	6818      	ldr	r0, [r3, #0]
 800ea1c:	4770      	bx	lr
 800ea1e:	bf00      	nop
 800ea20:	200001a4 	.word	0x200001a4

0800ea24 <__libc_init_array>:
 800ea24:	b570      	push	{r4, r5, r6, lr}
 800ea26:	4d0d      	ldr	r5, [pc, #52]	; (800ea5c <__libc_init_array+0x38>)
 800ea28:	4c0d      	ldr	r4, [pc, #52]	; (800ea60 <__libc_init_array+0x3c>)
 800ea2a:	1b64      	subs	r4, r4, r5
 800ea2c:	10a4      	asrs	r4, r4, #2
 800ea2e:	2600      	movs	r6, #0
 800ea30:	42a6      	cmp	r6, r4
 800ea32:	d109      	bne.n	800ea48 <__libc_init_array+0x24>
 800ea34:	4d0b      	ldr	r5, [pc, #44]	; (800ea64 <__libc_init_array+0x40>)
 800ea36:	4c0c      	ldr	r4, [pc, #48]	; (800ea68 <__libc_init_array+0x44>)
 800ea38:	f000 f91e 	bl	800ec78 <_init>
 800ea3c:	1b64      	subs	r4, r4, r5
 800ea3e:	10a4      	asrs	r4, r4, #2
 800ea40:	2600      	movs	r6, #0
 800ea42:	42a6      	cmp	r6, r4
 800ea44:	d105      	bne.n	800ea52 <__libc_init_array+0x2e>
 800ea46:	bd70      	pop	{r4, r5, r6, pc}
 800ea48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea4c:	4798      	blx	r3
 800ea4e:	3601      	adds	r6, #1
 800ea50:	e7ee      	b.n	800ea30 <__libc_init_array+0xc>
 800ea52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea56:	4798      	blx	r3
 800ea58:	3601      	adds	r6, #1
 800ea5a:	e7f2      	b.n	800ea42 <__libc_init_array+0x1e>
 800ea5c:	0800ed84 	.word	0x0800ed84
 800ea60:	0800ed84 	.word	0x0800ed84
 800ea64:	0800ed84 	.word	0x0800ed84
 800ea68:	0800ed8c 	.word	0x0800ed8c

0800ea6c <malloc>:
 800ea6c:	4b02      	ldr	r3, [pc, #8]	; (800ea78 <malloc+0xc>)
 800ea6e:	4601      	mov	r1, r0
 800ea70:	6818      	ldr	r0, [r3, #0]
 800ea72:	f000 b82b 	b.w	800eacc <_malloc_r>
 800ea76:	bf00      	nop
 800ea78:	200001a4 	.word	0x200001a4

0800ea7c <memset>:
 800ea7c:	4402      	add	r2, r0
 800ea7e:	4603      	mov	r3, r0
 800ea80:	4293      	cmp	r3, r2
 800ea82:	d100      	bne.n	800ea86 <memset+0xa>
 800ea84:	4770      	bx	lr
 800ea86:	f803 1b01 	strb.w	r1, [r3], #1
 800ea8a:	e7f9      	b.n	800ea80 <memset+0x4>

0800ea8c <sbrk_aligned>:
 800ea8c:	b570      	push	{r4, r5, r6, lr}
 800ea8e:	4e0e      	ldr	r6, [pc, #56]	; (800eac8 <sbrk_aligned+0x3c>)
 800ea90:	460c      	mov	r4, r1
 800ea92:	6831      	ldr	r1, [r6, #0]
 800ea94:	4605      	mov	r5, r0
 800ea96:	b911      	cbnz	r1, 800ea9e <sbrk_aligned+0x12>
 800ea98:	f000 f88c 	bl	800ebb4 <_sbrk_r>
 800ea9c:	6030      	str	r0, [r6, #0]
 800ea9e:	4621      	mov	r1, r4
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	f000 f887 	bl	800ebb4 <_sbrk_r>
 800eaa6:	1c43      	adds	r3, r0, #1
 800eaa8:	d00a      	beq.n	800eac0 <sbrk_aligned+0x34>
 800eaaa:	1cc4      	adds	r4, r0, #3
 800eaac:	f024 0403 	bic.w	r4, r4, #3
 800eab0:	42a0      	cmp	r0, r4
 800eab2:	d007      	beq.n	800eac4 <sbrk_aligned+0x38>
 800eab4:	1a21      	subs	r1, r4, r0
 800eab6:	4628      	mov	r0, r5
 800eab8:	f000 f87c 	bl	800ebb4 <_sbrk_r>
 800eabc:	3001      	adds	r0, #1
 800eabe:	d101      	bne.n	800eac4 <sbrk_aligned+0x38>
 800eac0:	f04f 34ff 	mov.w	r4, #4294967295
 800eac4:	4620      	mov	r0, r4
 800eac6:	bd70      	pop	{r4, r5, r6, pc}
 800eac8:	200011b4 	.word	0x200011b4

0800eacc <_malloc_r>:
 800eacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ead0:	1ccd      	adds	r5, r1, #3
 800ead2:	f025 0503 	bic.w	r5, r5, #3
 800ead6:	3508      	adds	r5, #8
 800ead8:	2d0c      	cmp	r5, #12
 800eada:	bf38      	it	cc
 800eadc:	250c      	movcc	r5, #12
 800eade:	2d00      	cmp	r5, #0
 800eae0:	4607      	mov	r7, r0
 800eae2:	db01      	blt.n	800eae8 <_malloc_r+0x1c>
 800eae4:	42a9      	cmp	r1, r5
 800eae6:	d905      	bls.n	800eaf4 <_malloc_r+0x28>
 800eae8:	230c      	movs	r3, #12
 800eaea:	603b      	str	r3, [r7, #0]
 800eaec:	2600      	movs	r6, #0
 800eaee:	4630      	mov	r0, r6
 800eaf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaf4:	4e2e      	ldr	r6, [pc, #184]	; (800ebb0 <_malloc_r+0xe4>)
 800eaf6:	f000 f8b1 	bl	800ec5c <__malloc_lock>
 800eafa:	6833      	ldr	r3, [r6, #0]
 800eafc:	461c      	mov	r4, r3
 800eafe:	bb34      	cbnz	r4, 800eb4e <_malloc_r+0x82>
 800eb00:	4629      	mov	r1, r5
 800eb02:	4638      	mov	r0, r7
 800eb04:	f7ff ffc2 	bl	800ea8c <sbrk_aligned>
 800eb08:	1c43      	adds	r3, r0, #1
 800eb0a:	4604      	mov	r4, r0
 800eb0c:	d14d      	bne.n	800ebaa <_malloc_r+0xde>
 800eb0e:	6834      	ldr	r4, [r6, #0]
 800eb10:	4626      	mov	r6, r4
 800eb12:	2e00      	cmp	r6, #0
 800eb14:	d140      	bne.n	800eb98 <_malloc_r+0xcc>
 800eb16:	6823      	ldr	r3, [r4, #0]
 800eb18:	4631      	mov	r1, r6
 800eb1a:	4638      	mov	r0, r7
 800eb1c:	eb04 0803 	add.w	r8, r4, r3
 800eb20:	f000 f848 	bl	800ebb4 <_sbrk_r>
 800eb24:	4580      	cmp	r8, r0
 800eb26:	d13a      	bne.n	800eb9e <_malloc_r+0xd2>
 800eb28:	6821      	ldr	r1, [r4, #0]
 800eb2a:	3503      	adds	r5, #3
 800eb2c:	1a6d      	subs	r5, r5, r1
 800eb2e:	f025 0503 	bic.w	r5, r5, #3
 800eb32:	3508      	adds	r5, #8
 800eb34:	2d0c      	cmp	r5, #12
 800eb36:	bf38      	it	cc
 800eb38:	250c      	movcc	r5, #12
 800eb3a:	4629      	mov	r1, r5
 800eb3c:	4638      	mov	r0, r7
 800eb3e:	f7ff ffa5 	bl	800ea8c <sbrk_aligned>
 800eb42:	3001      	adds	r0, #1
 800eb44:	d02b      	beq.n	800eb9e <_malloc_r+0xd2>
 800eb46:	6823      	ldr	r3, [r4, #0]
 800eb48:	442b      	add	r3, r5
 800eb4a:	6023      	str	r3, [r4, #0]
 800eb4c:	e00e      	b.n	800eb6c <_malloc_r+0xa0>
 800eb4e:	6822      	ldr	r2, [r4, #0]
 800eb50:	1b52      	subs	r2, r2, r5
 800eb52:	d41e      	bmi.n	800eb92 <_malloc_r+0xc6>
 800eb54:	2a0b      	cmp	r2, #11
 800eb56:	d916      	bls.n	800eb86 <_malloc_r+0xba>
 800eb58:	1961      	adds	r1, r4, r5
 800eb5a:	42a3      	cmp	r3, r4
 800eb5c:	6025      	str	r5, [r4, #0]
 800eb5e:	bf18      	it	ne
 800eb60:	6059      	strne	r1, [r3, #4]
 800eb62:	6863      	ldr	r3, [r4, #4]
 800eb64:	bf08      	it	eq
 800eb66:	6031      	streq	r1, [r6, #0]
 800eb68:	5162      	str	r2, [r4, r5]
 800eb6a:	604b      	str	r3, [r1, #4]
 800eb6c:	4638      	mov	r0, r7
 800eb6e:	f104 060b 	add.w	r6, r4, #11
 800eb72:	f000 f879 	bl	800ec68 <__malloc_unlock>
 800eb76:	f026 0607 	bic.w	r6, r6, #7
 800eb7a:	1d23      	adds	r3, r4, #4
 800eb7c:	1af2      	subs	r2, r6, r3
 800eb7e:	d0b6      	beq.n	800eaee <_malloc_r+0x22>
 800eb80:	1b9b      	subs	r3, r3, r6
 800eb82:	50a3      	str	r3, [r4, r2]
 800eb84:	e7b3      	b.n	800eaee <_malloc_r+0x22>
 800eb86:	6862      	ldr	r2, [r4, #4]
 800eb88:	42a3      	cmp	r3, r4
 800eb8a:	bf0c      	ite	eq
 800eb8c:	6032      	streq	r2, [r6, #0]
 800eb8e:	605a      	strne	r2, [r3, #4]
 800eb90:	e7ec      	b.n	800eb6c <_malloc_r+0xa0>
 800eb92:	4623      	mov	r3, r4
 800eb94:	6864      	ldr	r4, [r4, #4]
 800eb96:	e7b2      	b.n	800eafe <_malloc_r+0x32>
 800eb98:	4634      	mov	r4, r6
 800eb9a:	6876      	ldr	r6, [r6, #4]
 800eb9c:	e7b9      	b.n	800eb12 <_malloc_r+0x46>
 800eb9e:	230c      	movs	r3, #12
 800eba0:	603b      	str	r3, [r7, #0]
 800eba2:	4638      	mov	r0, r7
 800eba4:	f000 f860 	bl	800ec68 <__malloc_unlock>
 800eba8:	e7a1      	b.n	800eaee <_malloc_r+0x22>
 800ebaa:	6025      	str	r5, [r4, #0]
 800ebac:	e7de      	b.n	800eb6c <_malloc_r+0xa0>
 800ebae:	bf00      	nop
 800ebb0:	200011b0 	.word	0x200011b0

0800ebb4 <_sbrk_r>:
 800ebb4:	b538      	push	{r3, r4, r5, lr}
 800ebb6:	4d06      	ldr	r5, [pc, #24]	; (800ebd0 <_sbrk_r+0x1c>)
 800ebb8:	2300      	movs	r3, #0
 800ebba:	4604      	mov	r4, r0
 800ebbc:	4608      	mov	r0, r1
 800ebbe:	602b      	str	r3, [r5, #0]
 800ebc0:	f7f5 f950 	bl	8003e64 <_sbrk>
 800ebc4:	1c43      	adds	r3, r0, #1
 800ebc6:	d102      	bne.n	800ebce <_sbrk_r+0x1a>
 800ebc8:	682b      	ldr	r3, [r5, #0]
 800ebca:	b103      	cbz	r3, 800ebce <_sbrk_r+0x1a>
 800ebcc:	6023      	str	r3, [r4, #0]
 800ebce:	bd38      	pop	{r3, r4, r5, pc}
 800ebd0:	200011b8 	.word	0x200011b8

0800ebd4 <_raise_r>:
 800ebd4:	291f      	cmp	r1, #31
 800ebd6:	b538      	push	{r3, r4, r5, lr}
 800ebd8:	4604      	mov	r4, r0
 800ebda:	460d      	mov	r5, r1
 800ebdc:	d904      	bls.n	800ebe8 <_raise_r+0x14>
 800ebde:	2316      	movs	r3, #22
 800ebe0:	6003      	str	r3, [r0, #0]
 800ebe2:	f04f 30ff 	mov.w	r0, #4294967295
 800ebe6:	bd38      	pop	{r3, r4, r5, pc}
 800ebe8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ebea:	b112      	cbz	r2, 800ebf2 <_raise_r+0x1e>
 800ebec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ebf0:	b94b      	cbnz	r3, 800ec06 <_raise_r+0x32>
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	f000 f830 	bl	800ec58 <_getpid_r>
 800ebf8:	462a      	mov	r2, r5
 800ebfa:	4601      	mov	r1, r0
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec02:	f000 b817 	b.w	800ec34 <_kill_r>
 800ec06:	2b01      	cmp	r3, #1
 800ec08:	d00a      	beq.n	800ec20 <_raise_r+0x4c>
 800ec0a:	1c59      	adds	r1, r3, #1
 800ec0c:	d103      	bne.n	800ec16 <_raise_r+0x42>
 800ec0e:	2316      	movs	r3, #22
 800ec10:	6003      	str	r3, [r0, #0]
 800ec12:	2001      	movs	r0, #1
 800ec14:	e7e7      	b.n	800ebe6 <_raise_r+0x12>
 800ec16:	2400      	movs	r4, #0
 800ec18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ec1c:	4628      	mov	r0, r5
 800ec1e:	4798      	blx	r3
 800ec20:	2000      	movs	r0, #0
 800ec22:	e7e0      	b.n	800ebe6 <_raise_r+0x12>

0800ec24 <raise>:
 800ec24:	4b02      	ldr	r3, [pc, #8]	; (800ec30 <raise+0xc>)
 800ec26:	4601      	mov	r1, r0
 800ec28:	6818      	ldr	r0, [r3, #0]
 800ec2a:	f7ff bfd3 	b.w	800ebd4 <_raise_r>
 800ec2e:	bf00      	nop
 800ec30:	200001a4 	.word	0x200001a4

0800ec34 <_kill_r>:
 800ec34:	b538      	push	{r3, r4, r5, lr}
 800ec36:	4d07      	ldr	r5, [pc, #28]	; (800ec54 <_kill_r+0x20>)
 800ec38:	2300      	movs	r3, #0
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	4608      	mov	r0, r1
 800ec3e:	4611      	mov	r1, r2
 800ec40:	602b      	str	r3, [r5, #0]
 800ec42:	f7f5 f8f5 	bl	8003e30 <_kill>
 800ec46:	1c43      	adds	r3, r0, #1
 800ec48:	d102      	bne.n	800ec50 <_kill_r+0x1c>
 800ec4a:	682b      	ldr	r3, [r5, #0]
 800ec4c:	b103      	cbz	r3, 800ec50 <_kill_r+0x1c>
 800ec4e:	6023      	str	r3, [r4, #0]
 800ec50:	bd38      	pop	{r3, r4, r5, pc}
 800ec52:	bf00      	nop
 800ec54:	200011b8 	.word	0x200011b8

0800ec58 <_getpid_r>:
 800ec58:	f7f5 b8e2 	b.w	8003e20 <_getpid>

0800ec5c <__malloc_lock>:
 800ec5c:	4801      	ldr	r0, [pc, #4]	; (800ec64 <__malloc_lock+0x8>)
 800ec5e:	f000 b809 	b.w	800ec74 <__retarget_lock_acquire_recursive>
 800ec62:	bf00      	nop
 800ec64:	200011bc 	.word	0x200011bc

0800ec68 <__malloc_unlock>:
 800ec68:	4801      	ldr	r0, [pc, #4]	; (800ec70 <__malloc_unlock+0x8>)
 800ec6a:	f000 b804 	b.w	800ec76 <__retarget_lock_release_recursive>
 800ec6e:	bf00      	nop
 800ec70:	200011bc 	.word	0x200011bc

0800ec74 <__retarget_lock_acquire_recursive>:
 800ec74:	4770      	bx	lr

0800ec76 <__retarget_lock_release_recursive>:
 800ec76:	4770      	bx	lr

0800ec78 <_init>:
 800ec78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec7a:	bf00      	nop
 800ec7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec7e:	bc08      	pop	{r3}
 800ec80:	469e      	mov	lr, r3
 800ec82:	4770      	bx	lr

0800ec84 <_fini>:
 800ec84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec86:	bf00      	nop
 800ec88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec8a:	bc08      	pop	{r3}
 800ec8c:	469e      	mov	lr, r3
 800ec8e:	4770      	bx	lr
