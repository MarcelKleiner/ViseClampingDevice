
Cobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eaf4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800ec80  0800ec80  0001ec80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed6c  0800ed6c  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed6c  0800ed6c  0001ed6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed74  0800ed74  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ed74  0800ed74  0001ed74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed7c  0800ed7c  0001ed7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800ed80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fb8  20000208  0800ef88  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200011c0  0800ef88  000211c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c8dc  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000071b2  00000000  00000000  0004cb14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021f0  00000000  00000000  00053cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e78  00000000  00000000  00055eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000300ed  00000000  00000000  00057d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e1dc  00000000  00000000  00087e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3f8c  00000000  00000000  000b5ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a9f85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e70  00000000  00000000  001a9fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000208 	.word	0x20000208
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800ec68 	.word	0x0800ec68

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000020c 	.word	0x2000020c
 80001c8:	0800ec68 	.word	0x0800ec68

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <_ZN4IComC1Ev>:
 */

#ifndef SRC_COM_ICOM_H_
#define SRC_COM_ICOM_H_

class ICom{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <_ZN4IComC1Ev+0x1c>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	0800ecd8 	.word	0x0800ecd8

080004f0 <_ZN6USBComC1EP11DriveStatusP13DriveSettingsP12DriveCommand>:
class USBCom :  public ICom, public BaseCOM
{

	public:

		USBCom(DriveStatus *driveStatus, DriveSettings *driveSettings,
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]
				DriveCommand *driveCommand) :
				BaseCOM(driveStatus, driveSettings, driveCommand)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff ffe5 	bl	80004d0 <_ZN4IComC1Ev>
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	1d18      	adds	r0, r3, #4
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	68b9      	ldr	r1, [r7, #8]
 8000510:	f000 fa38 	bl	8000984 <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <_ZN6USBComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x34>)
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	601a      	str	r2, [r3, #0]
		{
		}
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	4618      	mov	r0, r3
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	0800ed08 	.word	0x0800ed08

08000528 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa>:


class RFM95Com :  public ICom, public BaseCOM
{
	public:
		RFM95Com(DriveStatus *driveStatus, DriveSettings *driveSettings,
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
 8000534:	603b      	str	r3, [r7, #0]
				DriveCommand *driveCommand, RFM95_LoRa *rfm95) :
				BaseCOM(driveStatus, driveSettings, driveCommand)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ffc9 	bl	80004d0 <_ZN4IComC1Ev>
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	1d18      	adds	r0, r3, #4
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	68b9      	ldr	r1, [r7, #8]
 8000548:	f000 fa1c 	bl	8000984 <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 800054c:	4a0c      	ldr	r2, [pc, #48]	; (8000580 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa+0x58>)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	3328      	adds	r3, #40	; 0x28
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	f8c3 2003 	str.w	r2, [r3, #3]
		{
			this->rfm95 = rfm95;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	69ba      	ldr	r2, [r7, #24]
 8000562:	619a      	str	r2, [r3, #24]
			this->driveCommand = driveCommand;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	683a      	ldr	r2, [r7, #0]
 8000568:	625a      	str	r2, [r3, #36]	; 0x24
			this->driveStatus = driveStatus;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	68ba      	ldr	r2, [r7, #8]
 800056e:	621a      	str	r2, [r3, #32]
			this->driveSettings = driveSettings;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	61da      	str	r2, [r3, #28]
		}
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	4618      	mov	r0, r3
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	0800ecf8 	.word	0x0800ecf8

08000584 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand>:
#include "../IO/DO.h"

class IOCom: public ICom, public BaseCOM
{
	public:
		IOCom(DriveStatus *driveStatus, DriveSettings *driveSettings,
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af02      	add	r7, sp, #8
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	603b      	str	r3, [r7, #0]
				DriveCommand *driveCommand) :
				BaseCOM(driveStatus, driveSettings, driveCommand)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff ff9b 	bl	80004d0 <_ZN4IComC1Ev>
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	1d18      	adds	r0, r3, #4
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	68b9      	ldr	r1, [r7, #8]
 80005a4:	f000 f9ee 	bl	8000984 <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 80005a8:	4a39      	ldr	r2, [pc, #228]	; (8000690 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x10c>)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f103 0018 	add.w	r0, r3, #24
 80005b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005c2:	4934      	ldr	r1, [pc, #208]	; (8000694 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x110>)
 80005c4:	f001 fcd8 	bl	8001f78 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80005ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	4b30      	ldr	r3, [pc, #192]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	492f      	ldr	r1, [pc, #188]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 80005da:	f001 fccd 	bl	8001f78 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80005e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x110>)
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	4929      	ldr	r1, [pc, #164]	; (8000694 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x110>)
 80005f0:	f001 fcc2 	bl	8001f78 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f103 0048 	add.w	r0, r3, #72	; 0x48
 80005fa:	2301      	movs	r3, #1
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	4b26      	ldr	r3, [pc, #152]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 8000600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000604:	4924      	ldr	r1, [pc, #144]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 8000606:	f001 fcb7 	bl	8001f78 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8000610:	2340      	movs	r3, #64	; 0x40
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x110>)
 8000616:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800061a:	491f      	ldr	r1, [pc, #124]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 800061c:	f001 fcac 	bl	8001f78 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8000626:	2302      	movs	r3, #2
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 800062c:	2210      	movs	r2, #16
 800062e:	4919      	ldr	r1, [pc, #100]	; (8000694 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x110>)
 8000630:	f001 fca2 	bl	8001f78 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800063a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 8000642:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000646:	4914      	ldr	r1, [pc, #80]	; (8000698 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x114>)
 8000648:	f001 fc96 	bl	8001f78 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8000652:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x110>)
 800065a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800065e:	490d      	ldr	r1, [pc, #52]	; (8000694 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand+0x110>)
 8000660:	f001 fc8a 	bl	8001f78 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	2200      	movs	r2, #0
 8000670:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2200      	movs	r2, #0
 8000678:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
		{
			this->driveStatus = driveStatus;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		}
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4618      	mov	r0, r3
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	0800ece8 	.word	0x0800ece8
 8000694:	48000800 	.word	0x48000800
 8000698:	48000400 	.word	0x48000400

0800069c <_ZN11TaskHandlerC1Ev>:


#include "stdint.h"


class TaskHandler{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2200      	movs	r2, #0
 80006ae:	705a      	strb	r2, [r3, #1]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	709a      	strb	r2, [r3, #2]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2200      	movs	r2, #0
 80006ba:	70da      	strb	r2, [r3, #3]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2200      	movs	r2, #0
 80006c0:	711a      	strb	r2, [r3, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2200      	movs	r2, #0
 80006c6:	715a      	strb	r2, [r3, #5]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2201      	movs	r2, #1
 80006cc:	719a      	strb	r2, [r3, #6]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2201      	movs	r2, #1
 80006d2:	71da      	strb	r2, [r3, #7]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2201      	movs	r2, #1
 80006d8:	721a      	strb	r2, [r3, #8]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2201      	movs	r2, #1
 80006de:	725a      	strb	r2, [r3, #9]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2201      	movs	r2, #1
 80006e4:	729a      	strb	r2, [r3, #10]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2201      	movs	r2, #1
 80006ea:	72da      	strb	r2, [r3, #11]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <_ZN13DriveSettingsC1Ev>:
#define SRC_SETTINGS_DRIVESETTINGS_H_

#include "stdint.h"
#include "main.h"

class DriveSettings{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	221f      	movs	r2, #31
 8000706:	701a      	strb	r2, [r3, #0]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2200      	movs	r2, #0
 800070c:	805a      	strh	r2, [r3, #2]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	809a      	strh	r2, [r3, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	80da      	strh	r2, [r3, #6]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	811a      	strh	r2, [r3, #8]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000726:	815a      	strh	r2, [r3, #10]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2214      	movs	r2, #20
 800072c:	819a      	strh	r2, [r3, #12]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2264      	movs	r2, #100	; 0x64
 8000732:	81da      	strh	r2, [r3, #14]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f243 62b0 	movw	r2, #14000	; 0x36b0
 800073a:	821a      	strh	r2, [r3, #16]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000742:	825a      	strh	r2, [r3, #18]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2232      	movs	r2, #50	; 0x32
 8000748:	829a      	strh	r2, [r3, #20]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2264      	movs	r2, #100	; 0x64
 800074e:	82da      	strh	r2, [r3, #22]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000756:	831a      	strh	r2, [r3, #24]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2200      	movs	r2, #0
 800075c:	769a      	strb	r2, [r3, #26]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2200      	movs	r2, #0
 8000762:	839a      	strh	r2, [r3, #28]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4618      	mov	r0, r3
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <_ZN7AppMainC1Ev>:
#include "AppMain.h"
#include "../Tools/Delay.h"

extern TIM_HandleTypeDef htim7;

AppMain::AppMain()
 8000772:	b590      	push	{r4, r7, lr}
 8000774:	b085      	sub	sp, #20
 8000776:	af02      	add	r7, sp, #8
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4618      	mov	r0, r3
 800077e:	f001 fc5f 	bl	8002040 <_ZN10RFM95_LoRaC1Ev>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	3320      	adds	r3, #32
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	819a      	strh	r2, [r3, #12]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3320      	adds	r3, #32
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff81 	bl	800069c <_ZN11TaskHandlerC1Ev>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80007a0:	2301      	movs	r3, #1
 80007a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007a6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80007aa:	f001 fc00 	bl	8001fae <_ZN3LEDC1EP12GPIO_TypeDeftb>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80007b4:	2301      	movs	r3, #1
 80007b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ba:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80007be:	f001 fbf6 	bl	8001fae <_ZN3LEDC1EP12GPIO_TypeDeftb>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3340      	adds	r3, #64	; 0x40
 80007c6:	221e      	movs	r2, #30
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f00e f94e 	bl	800ea6c <memset>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3340      	adds	r3, #64	; 0x40
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff90 	bl	80006fa <_ZN13DriveSettingsC1Ev>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	335e      	adds	r3, #94	; 0x5e
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fbc0 	bl	8002f64 <_ZN11DriveStatusC1Ev>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3367      	adds	r3, #103	; 0x67
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 fa78 	bl	8002cde <_ZN12DriveCommandC1Ev>
 80007ee:	2030      	movs	r0, #48	; 0x30
 80007f0:	f00e f8d3 	bl	800e99a <_Znwj>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461c      	mov	r4, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f103 0067 	add.w	r0, r3, #103	; 0x67
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	4603      	mov	r3, r0
 8000810:	4620      	mov	r0, r4
 8000812:	f7ff fe89 	bl	8000528 <_ZN8RFM95ComC1EP11DriveStatusP13DriveSettingsP12DriveCommandP10RFM95_LoRa>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	675c      	str	r4, [r3, #116]	; 0x74
 800081a:	2018      	movs	r0, #24
 800081c:	f00e f8bd 	bl	800e99a <_Znwj>
 8000820:	4603      	mov	r3, r0
 8000822:	461c      	mov	r4, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3367      	adds	r3, #103	; 0x67
 8000834:	4620      	mov	r0, r4
 8000836:	f7ff fe5b 	bl	80004f0 <_ZN6USBComC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	679c      	str	r4, [r3, #120]	; 0x78
 800083e:	20a4      	movs	r0, #164	; 0xa4
 8000840:	f00e f8ab 	bl	800e99a <_Znwj>
 8000844:	4603      	mov	r3, r0
 8000846:	461c      	mov	r4, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3367      	adds	r3, #103	; 0x67
 8000858:	4620      	mov	r0, r4
 800085a:	f7ff fe93 	bl	8000584 <_ZN5IOComC1EP11DriveStatusP13DriveSettingsP12DriveCommand>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	67dc      	str	r4, [r3, #124]	; 0x7c
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	335e      	adds	r3, #94	; 0x5e
 8000872:	461a      	mov	r2, r3
 8000874:	f001 f996 	bl	8001ba4 <_ZN5FlashC1EP13DriveSettingsP11DriveStatus>
{

}
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bd90      	pop	{r4, r7, pc}
	...

08000884 <_ZN7AppMain7StartupEv>:

void AppMain::Startup()
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	Storage.ReadFlash();
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3380      	adds	r3, #128	; 0x80
 8000890:	4618      	mov	r0, r3
 8000892:	f001 f99a 	bl	8001bca <_ZN5Flash9ReadFlashEv>

	HAL_TIM_Base_Start_IT(&htim7);
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <_ZN7AppMain7StartupEv+0x48>)
 8000898:	f009 f93a 	bl	8009b10 <HAL_TIM_Base_Start_IT>

	LED_Green.OFF();
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3330      	adds	r3, #48	; 0x30
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 fb9f 	bl	8001fe4 <_ZN3LED3OFFEv>
	LED_Red.OFF();
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3338      	adds	r3, #56	; 0x38
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 fb9a 	bl	8001fe4 <_ZN3LED3OFFEv>

	if (rfm95.InitRFM())
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 ffae 	bl	8002814 <_ZN10RFM95_LoRa7InitRFMEv>
	{

	}

	Delay::DWT_Init();
 80008b8:	f002 fd74 	bl	80033a4 <_ZN5Delay8DWT_InitEv>

	Main();
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f000 f807 	bl	80008d0 <_ZN7AppMain4MainEv>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000574 	.word	0x20000574

080008d0 <_ZN7AppMain4MainEv>:

void AppMain::Main()
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]

	while (1)
	{

		if (taskStatus.isErrorTask())
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3320      	adds	r3, #32
 80008dc:	4618      	mov	r0, r3
 80008de:	f002 fd0f 	bl	8003300 <_ZN11TaskHandler11isErrorTaskEv>
		{

		}

		if (taskStatus.isLEDUpdateTask())
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3320      	adds	r3, #32
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 fd40 	bl	800336c <_ZN11TaskHandler15isLEDUpdateTaskEv>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d004      	beq.n	80008fc <_ZN7AppMain4MainEv+0x2c>
		{
			LED_Green.Toggle();
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3330      	adds	r3, #48	; 0x30
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 fb91 	bl	800201e <_ZN3LED6ToggleEv>
		}

		if (taskStatus.isComTask())
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3320      	adds	r3, #32
 8000900:	4618      	mov	r0, r3
 8000902:	f002 fcc7 	bl	8003294 <_ZN11TaskHandler9isComTaskEv>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d012      	beq.n	8000932 <_ZN7AppMain4MainEv+0x62>
		{
			rfm95COM->Transmitt();
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	4798      	blx	r3
			rfm95COM->Receive();
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	3304      	adds	r3, #4
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2200      	movs	r2, #0
 800092e:	2100      	movs	r1, #0
 8000930:	4798      	blx	r3
		}

		if (taskStatus.isIoUpdateTask())
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3320      	adds	r3, #32
 8000936:	4618      	mov	r0, r3
 8000938:	f002 fcfd 	bl	8003336 <_ZN11TaskHandler14isIoUpdateTaskEv>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d012      	beq.n	8000968 <_ZN7AppMain4MainEv+0x98>
		{
			ioCOM->Receive();
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3304      	adds	r3, #4
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	4798      	blx	r3
			ioCOM->Transmitt();
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	4798      	blx	r3
		}

		if (taskStatus.isSaveTask())
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3320      	adds	r3, #32
 800096c:	4618      	mov	r0, r3
 800096e:	f002 fcac 	bl	80032ca <_ZN11TaskHandler10isSaveTaskEv>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d0af      	beq.n	80008d8 <_ZN7AppMain4MainEv+0x8>
		{
			Storage.SaveFlash();
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3380      	adds	r3, #128	; 0x80
 800097c:	4618      	mov	r0, r3
 800097e:	f001 f9b9 	bl	8001cf4 <_ZN5Flash9SaveFlashEv>
		if (taskStatus.isErrorTask())
 8000982:	e7a9      	b.n	80008d8 <_ZN7AppMain4MainEv+0x8>

08000984 <_ZN7BaseCOMC1EP11DriveStatusP13DriveSettingsP12DriveCommand>:
#include "BaseCOM.h"
#include "../AppMain/Defines.h"
#include "../Tools/CRC8.h"
#include "../Tools/TypeConverter.h"

BaseCOM::BaseCOM(DriveStatus *driveStatus, DriveSettings *driveSettings,
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
		DriveCommand *driveCommand)
{
	this->driveSettings = driveSettings;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	605a      	str	r2, [r3, #4]
	this->driveCommand = driveCommand;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	609a      	str	r2, [r3, #8]
}
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4618      	mov	r0, r3
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <_ZN7BaseCOM11GetSettingsEh>:


uint8_t* BaseCOM::GetSettings(uint8_t addr)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	460b      	mov	r3, r1
 80009be:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	221f      	movs	r2, #31
 80009c4:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 f928 	bl	8002c20 <_ZNK13DriveSettings16getDeviceAddressEv>
 80009d0:	4603      	mov	r3, r0
 80009d2:	461a      	mov	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_COMMAND;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2212      	movs	r2, #18
 80009dc:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	78fa      	ldrb	r2, [r7, #3]
 80009e2:	73da      	strb	r2, [r3, #15]

	switch (addr)
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	3b10      	subs	r3, #16
 80009e8:	2b10      	cmp	r3, #16
 80009ea:	f200 80d3 	bhi.w	8000b94 <_ZN7BaseCOM11GetSettingsEh+0x1e0>
 80009ee:	a201      	add	r2, pc, #4	; (adr r2, 80009f4 <_ZN7BaseCOM11GetSettingsEh+0x40>)
 80009f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f4:	08000a39 	.word	0x08000a39
 80009f8:	08000a57 	.word	0x08000a57
 80009fc:	08000a75 	.word	0x08000a75
 8000a00:	08000a93 	.word	0x08000a93
 8000a04:	08000ab1 	.word	0x08000ab1
 8000a08:	08000acf 	.word	0x08000acf
 8000a0c:	08000aeb 	.word	0x08000aeb
 8000a10:	08000b09 	.word	0x08000b09
 8000a14:	08000b27 	.word	0x08000b27
 8000a18:	08000b45 	.word	0x08000b45
 8000a1c:	08000b63 	.word	0x08000b63
 8000a20:	08000b95 	.word	0x08000b95
 8000a24:	08000b95 	.word	0x08000b95
 8000a28:	08000b95 	.word	0x08000b95
 8000a2c:	08000b95 	.word	0x08000b95
 8000a30:	08000b95 	.word	0x08000b95
 8000a34:	08000b81 	.word	0x08000b81
	{
		case TEACH_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachTroque(), 4);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 f850 	bl	8002ae8 <_ZNK13DriveSettings14getTeachTroqueEv>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2204      	movs	r2, #4
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4620      	mov	r0, r4
 8000a50:	f002 fcc2 	bl	80033d8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000a54:	e0a2      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case TEACH_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getTeachSpeed(), 4);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a60:	4618      	mov	r0, r3
 8000a62:	f002 f81a 	bl	8002a9a <_ZNK13DriveSettings13getTeachSpeedEv>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2204      	movs	r2, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	f002 fcb3 	bl	80033d8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000a72:	e093      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case CLAMPING_TORQUE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingTorque(), 4);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 ff21 	bl	80028c6 <_ZNK13DriveSettings17getClampingTorqueEv>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2204      	movs	r2, #4
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	f002 fca4 	bl	80033d8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000a90:	e084      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case CLAMPING_SPEED_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getClampingSpeed(), 4);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 feeb 	bl	8002878 <_ZNK13DriveSettings16getClampingSpeedEv>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4620      	mov	r0, r4
 8000aaa:	f002 fc95 	bl	80033d8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000aae:	e075      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case SELF_SHUTDOWN_DELAY_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getSelfShutdownDelay(), 4);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 ffc6 	bl	8002a4c <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2204      	movs	r2, #4
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4620      	mov	r0, r4
 8000ac8:	f002 fc86 	bl	80033d8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000acc:	e066      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case IN_POS_DIFF_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getInPosDiff(), 4);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 ff1b 	bl	8002914 <_ZNK13DriveSettings12getInPosDiffEv>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	f002 fc77 	bl	80033d8 <_ZN13TypeConverter12uint16ToByteEPhth>
		case OPENING_DISTANCE_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOpeningDistance(), 4);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000af4:	4618      	mov	r0, r3
 8000af6:	f001 ff34 	bl	8002962 <_ZNK13DriveSettings18getOpeningDistanceEv>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2204      	movs	r2, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4620      	mov	r0, r4
 8000b02:	f002 fc69 	bl	80033d8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b06:	e049      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case UNDERVOLTAGE_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageWarning(),4);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 f836 	bl	8002b84 <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4620      	mov	r0, r4
 8000b20:	f002 fc5a 	bl	80033d8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b24:	e03a      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case UNDERVOLTAGE_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getUnderVoltageError(), 4);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b30:	4618      	mov	r0, r3
 8000b32:	f002 f800 	bl	8002b36 <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2204      	movs	r2, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	f002 fc4b 	bl	80033d8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b42:	e02b      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case OVER_CURRENT_WARNING_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentWarning(), 4);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 ff55 	bl	80029fe <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2204      	movs	r2, #4
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	f002 fc3c 	bl	80033d8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b60:	e01c      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case OVER_CURRENT_ERROR_ADDR:
			TypeConverter::uint16ToByte(data2send,
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f103 040c 	add.w	r4, r3, #12
					driveSettings->getOverCurrentError(), 4);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
			TypeConverter::uint16ToByte(data2send,
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 f830 	bl	8002bd2 <_ZNK13DriveSettings19getOverCurrentErrorEv>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2204      	movs	r2, #4
 8000b76:	4619      	mov	r1, r3
 8000b78:	4620      	mov	r0, r4
 8000b7a:	f002 fc2d 	bl	80033d8 <_ZN13TypeConverter12uint16ToByteEPhth>
			break;
 8000b7e:	e00d      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		case DEVICE_ADDRESS_ADDR:
			data2send[4] = driveSettings->getDeviceAddress();
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f002 f84b 	bl	8002c20 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	741a      	strb	r2, [r3, #16]
			break;
 8000b92:	e003      	b.n	8000b9c <_ZN7BaseCOM11GetSettingsEh+0x1e8>
		default:
			data2send[1] = 0x1D;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	221d      	movs	r2, #29
 8000b98:	735a      	strb	r2, [r3, #13]
			break;
 8000b9a:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	330c      	adds	r3, #12
 8000ba0:	2206      	movs	r2, #6
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 fbcd 	bl	8001344 <_ZN7BaseCOM4CRC8EPhh>
 8000baa:	4603      	mov	r3, r0
 8000bac:	461a      	mov	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	749a      	strb	r2, [r3, #18]
	return data2send;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	330c      	adds	r3, #12
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd90      	pop	{r4, r7, pc}
 8000bbe:	bf00      	nop

08000bc0 <_ZN7BaseCOM9GetStatusEh>:


uint8_t* BaseCOM::GetStatus(uint8_t addr)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	70fb      	strb	r3, [r7, #3]

	data2send[0] = 0x1F;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	221f      	movs	r2, #31
 8000bd0:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 f822 	bl	8002c20 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461a      	mov	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_STATUS;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2213      	movs	r2, #19
 8000be8:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	78fa      	ldrb	r2, [r7, #3]
 8000bee:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000bf0:	78fb      	ldrb	r3, [r7, #3]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	2b07      	cmp	r3, #7
 8000bf6:	d863      	bhi.n	8000cc0 <_ZN7BaseCOM9GetStatusEh+0x100>
 8000bf8:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <_ZN7BaseCOM9GetStatusEh+0x40>)
 8000bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfe:	bf00      	nop
 8000c00:	08000c21 	.word	0x08000c21
 8000c04:	08000c35 	.word	0x08000c35
 8000c08:	08000c49 	.word	0x08000c49
 8000c0c:	08000c5d 	.word	0x08000c5d
 8000c10:	08000c71 	.word	0x08000c71
 8000c14:	08000c85 	.word	0x08000c85
 8000c18:	08000c99 	.word	0x08000c99
 8000c1c:	08000cad 	.word	0x08000cad
	{
		case CLOSE_ADDR:
			data2send[4] = driveStatus->isClose();
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f002 f9ab 	bl	8002f80 <_ZN11DriveStatus7isCloseEv>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	741a      	strb	r2, [r3, #16]
			break;
 8000c32:	e049      	b.n	8000cc8 <_ZN7BaseCOM9GetStatusEh+0x108>
		case OPEN_ADDR:
			data2send[4] = driveStatus->isOpen();
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f002 f9c4 	bl	8002fc6 <_ZN11DriveStatus6isOpenEv>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	461a      	mov	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	741a      	strb	r2, [r3, #16]
			break;
 8000c46:	e03f      	b.n	8000cc8 <_ZN7BaseCOM9GetStatusEh+0x108>
		case TEACH_ADDR:
			data2send[4] = driveStatus->isTeach();
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f002 fa69 	bl	8003124 <_ZN11DriveStatus7isTeachEv>
 8000c52:	4603      	mov	r3, r0
 8000c54:	461a      	mov	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	741a      	strb	r2, [r3, #16]
			break;
 8000c5a:	e035      	b.n	8000cc8 <_ZN7BaseCOM9GetStatusEh+0x108>
		case RESET_ADDR:
			data2send[4] = driveStatus->isReset();
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f002 fa19 	bl	8003098 <_ZN11DriveStatus7isResetEv>
 8000c66:	4603      	mov	r3, r0
 8000c68:	461a      	mov	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	741a      	strb	r2, [r3, #16]
			break;
 8000c6e:	e02b      	b.n	8000cc8 <_ZN7BaseCOM9GetStatusEh+0x108>
		case ENABLE_ADDR:
			data2send[4] = driveStatus->isEnable();
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f002 f9ec 	bl	8003052 <_ZN11DriveStatus8isEnableEv>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	741a      	strb	r2, [r3, #16]
			break;
 8000c82:	e021      	b.n	8000cc8 <_ZN7BaseCOM9GetStatusEh+0x108>
		case DISABLE_ADDR:
			data2send[4] = driveStatus->isDisable();
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 f9bf 	bl	800300c <_ZN11DriveStatus9isDisableEv>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	461a      	mov	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	741a      	strb	r2, [r3, #16]
			break;
 8000c96:	e017      	b.n	8000cc8 <_ZN7BaseCOM9GetStatusEh+0x108>
		case STOP_ADDR:
			data2send[4] = driveStatus->isStop();
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f002 fa1e 	bl	80030de <_ZN11DriveStatus6isStopEv>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	741a      	strb	r2, [r3, #16]
			break;
 8000caa:	e00d      	b.n	8000cc8 <_ZN7BaseCOM9GetStatusEh+0x108>
		case ERROR_ADDR:
			data2send[4] = driveStatus->getError();
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f002 fa5a 	bl	800316a <_ZN11DriveStatus8getErrorEv>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	461a      	mov	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	741a      	strb	r2, [r3, #16]
			break;
 8000cbe:	e003      	b.n	8000cc8 <_ZN7BaseCOM9GetStatusEh+0x108>
		default:
			data2send[0] = 0x1D;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	221d      	movs	r2, #29
 8000cc4:	731a      	strb	r2, [r3, #12]
			break;
 8000cc6:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	330c      	adds	r3, #12
 8000ccc:	2206      	movs	r2, #6
 8000cce:	4619      	mov	r1, r3
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f000 fb37 	bl	8001344 <_ZN7BaseCOM4CRC8EPhh>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	461a      	mov	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	749a      	strb	r2, [r3, #18]

	return data2send;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	330c      	adds	r3, #12
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop

08000cec <_ZN7BaseCOM10GetCommandEh>:


uint8_t* BaseCOM::GetCommand(uint8_t addr)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	70fb      	strb	r3, [r7, #3]
	data2send[0] = 0x1F;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	221f      	movs	r2, #31
 8000cfc:	731a      	strb	r2, [r3, #12]
	data2send[1] = driveSettings->getDeviceAddress();
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 ff8c 	bl	8002c20 <_ZNK13DriveSettings16getDeviceAddressEv>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	735a      	strb	r2, [r3, #13]
	data2send[2] = GET_COMMAND;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2212      	movs	r2, #18
 8000d14:	739a      	strb	r2, [r3, #14]
	data2send[3] = addr;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	78fa      	ldrb	r2, [r7, #3]
 8000d1a:	73da      	strb	r2, [r3, #15]

	switch (addr)
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	2b06      	cmp	r3, #6
 8000d22:	d857      	bhi.n	8000dd4 <_ZN7BaseCOM10GetCommandEh+0xe8>
 8000d24:	a201      	add	r2, pc, #4	; (adr r2, 8000d2c <_ZN7BaseCOM10GetCommandEh+0x40>)
 8000d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2a:	bf00      	nop
 8000d2c:	08000d49 	.word	0x08000d49
 8000d30:	08000d5d 	.word	0x08000d5d
 8000d34:	08000d71 	.word	0x08000d71
 8000d38:	08000d85 	.word	0x08000d85
 8000d3c:	08000d99 	.word	0x08000d99
 8000d40:	08000dad 	.word	0x08000dad
 8000d44:	08000dc1 	.word	0x08000dc1
	{
		case CLOSE_ADDR:
			data2send[4] = driveCommand->isClose();
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f001 ffef 	bl	8002d30 <_ZN12DriveCommand7isCloseEv>
 8000d52:	4603      	mov	r3, r0
 8000d54:	461a      	mov	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	741a      	strb	r2, [r3, #16]
			break;
 8000d5a:	e03f      	b.n	8000ddc <_ZN7BaseCOM10GetCommandEh+0xf0>
		case OPEN_ADDR:
			data2send[4] = driveCommand->isOpen();
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f002 f805 	bl	8002d70 <_ZN12DriveCommand6isOpenEv>
 8000d66:	4603      	mov	r3, r0
 8000d68:	461a      	mov	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	741a      	strb	r2, [r3, #16]
			break;
 8000d6e:	e035      	b.n	8000ddc <_ZN7BaseCOM10GetCommandEh+0xf0>
		case TEACH_ADDR:
			data2send[4] = driveCommand->isTeach();
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f002 f89b 	bl	8002eb0 <_ZN12DriveCommand7isTeachEv>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	741a      	strb	r2, [r3, #16]
			break;
 8000d82:	e02b      	b.n	8000ddc <_ZN7BaseCOM10GetCommandEh+0xf0>
		case RESET_ADDR:
			data2send[4] = driveCommand->isReset();
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f002 f851 	bl	8002e30 <_ZN12DriveCommand7isResetEv>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	741a      	strb	r2, [r3, #16]
			break;
 8000d96:	e021      	b.n	8000ddc <_ZN7BaseCOM10GetCommandEh+0xf0>
		case ENABLE_ADDR:
			data2send[4] = driveCommand->isEnable();
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 f827 	bl	8002df0 <_ZN12DriveCommand8isEnableEv>
 8000da2:	4603      	mov	r3, r0
 8000da4:	461a      	mov	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	741a      	strb	r2, [r3, #16]
			break;
 8000daa:	e017      	b.n	8000ddc <_ZN7BaseCOM10GetCommandEh+0xf0>
		case DISABLE_ADDR:
			data2send[4] = driveCommand->isDisable();
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f001 fffd 	bl	8002db0 <_ZN12DriveCommand9isDisableEv>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	741a      	strb	r2, [r3, #16]
			break;
 8000dbe:	e00d      	b.n	8000ddc <_ZN7BaseCOM10GetCommandEh+0xf0>
		case STOP_ADDR:
			data2send[4] = driveCommand->isStop();
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f002 f853 	bl	8002e70 <_ZN12DriveCommand6isStopEv>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	741a      	strb	r2, [r3, #16]
			break;
 8000dd2:	e003      	b.n	8000ddc <_ZN7BaseCOM10GetCommandEh+0xf0>
		default:
			data2send[0] = 0x1D;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	221d      	movs	r2, #29
 8000dd8:	731a      	strb	r2, [r3, #12]
			break;
 8000dda:	bf00      	nop
	}
	data2send[6] = CRC8(data2send, 6);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	330c      	adds	r3, #12
 8000de0:	2206      	movs	r2, #6
 8000de2:	4619      	mov	r1, r3
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f000 faad 	bl	8001344 <_ZN7BaseCOM4CRC8EPhh>
 8000dea:	4603      	mov	r3, r0
 8000dec:	461a      	mov	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	749a      	strb	r2, [r3, #18]

	return data2send;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	330c      	adds	r3, #12
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop

08000e00 <_ZN7BaseCOM11SetSettingsEPh>:



void BaseCOM::SetSettings(uint8_t *data)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	uint16_t value = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	81fb      	strh	r3, [r7, #14]
	switch (data[3])
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	3303      	adds	r3, #3
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	3b10      	subs	r3, #16
 8000e16:	2b45      	cmp	r3, #69	; 0x45
 8000e18:	f200 817b 	bhi.w	8001112 <_ZN7BaseCOM11SetSettingsEPh+0x312>
 8000e1c:	a201      	add	r2, pc, #4	; (adr r2, 8000e24 <_ZN7BaseCOM11SetSettingsEPh+0x24>)
 8000e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e22:	bf00      	nop
 8000e24:	08000f3d 	.word	0x08000f3d
 8000e28:	08000f65 	.word	0x08000f65
 8000e2c:	08000f8d 	.word	0x08000f8d
 8000e30:	08000fb5 	.word	0x08000fb5
 8000e34:	0800107d 	.word	0x0800107d
 8000e38:	08000fdd 	.word	0x08000fdd
 8000e3c:	08001005 	.word	0x08001005
 8000e40:	080010a5 	.word	0x080010a5
 8000e44:	080010cd 	.word	0x080010cd
 8000e48:	0800102d 	.word	0x0800102d
 8000e4c:	08001055 	.word	0x08001055
 8000e50:	08001113 	.word	0x08001113
 8000e54:	08001113 	.word	0x08001113
 8000e58:	08001113 	.word	0x08001113
 8000e5c:	08001113 	.word	0x08001113
 8000e60:	08001113 	.word	0x08001113
 8000e64:	08001113 	.word	0x08001113
 8000e68:	08001113 	.word	0x08001113
 8000e6c:	08001113 	.word	0x08001113
 8000e70:	08001113 	.word	0x08001113
 8000e74:	08001113 	.word	0x08001113
 8000e78:	08001113 	.word	0x08001113
 8000e7c:	08001113 	.word	0x08001113
 8000e80:	08001113 	.word	0x08001113
 8000e84:	08001113 	.word	0x08001113
 8000e88:	08001113 	.word	0x08001113
 8000e8c:	08001113 	.word	0x08001113
 8000e90:	08001113 	.word	0x08001113
 8000e94:	08001113 	.word	0x08001113
 8000e98:	08001113 	.word	0x08001113
 8000e9c:	08001113 	.word	0x08001113
 8000ea0:	08001113 	.word	0x08001113
 8000ea4:	08001113 	.word	0x08001113
 8000ea8:	08001113 	.word	0x08001113
 8000eac:	08001113 	.word	0x08001113
 8000eb0:	08001113 	.word	0x08001113
 8000eb4:	08001113 	.word	0x08001113
 8000eb8:	08001113 	.word	0x08001113
 8000ebc:	08001113 	.word	0x08001113
 8000ec0:	08001113 	.word	0x08001113
 8000ec4:	08001113 	.word	0x08001113
 8000ec8:	08001113 	.word	0x08001113
 8000ecc:	08001113 	.word	0x08001113
 8000ed0:	08001113 	.word	0x08001113
 8000ed4:	08001113 	.word	0x08001113
 8000ed8:	08001113 	.word	0x08001113
 8000edc:	08001113 	.word	0x08001113
 8000ee0:	08001113 	.word	0x08001113
 8000ee4:	08001113 	.word	0x08001113
 8000ee8:	08001113 	.word	0x08001113
 8000eec:	08001113 	.word	0x08001113
 8000ef0:	08001113 	.word	0x08001113
 8000ef4:	08001113 	.word	0x08001113
 8000ef8:	08001113 	.word	0x08001113
 8000efc:	08001113 	.word	0x08001113
 8000f00:	08001113 	.word	0x08001113
 8000f04:	08001113 	.word	0x08001113
 8000f08:	08001113 	.word	0x08001113
 8000f0c:	08001113 	.word	0x08001113
 8000f10:	08001113 	.word	0x08001113
 8000f14:	08001113 	.word	0x08001113
 8000f18:	08001113 	.word	0x08001113
 8000f1c:	08001113 	.word	0x08001113
 8000f20:	08001113 	.word	0x08001113
 8000f24:	08001113 	.word	0x08001113
 8000f28:	08001113 	.word	0x08001113
 8000f2c:	08001113 	.word	0x08001113
 8000f30:	08001113 	.word	0x08001113
 8000f34:	08001113 	.word	0x08001113
 8000f38:	080010f5 	.word	0x080010f5
	{
		case TEACH_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	3305      	adds	r3, #5
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	01db      	lsls	r3, r3, #7
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachTroque(value);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	89fa      	ldrh	r2, [r7, #14]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f001 fdcf 	bl	8002b00 <_ZN13DriveSettings14setTeachTroqueEt>
			break;
 8000f62:	e0d7      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case TEACH_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	3305      	adds	r3, #5
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	01db      	lsls	r3, r3, #7
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	3304      	adds	r3, #4
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b21b      	sxth	r3, r3
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	81fb      	strh	r3, [r7, #14]
			driveSettings->setTeachSpeed(value);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	89fa      	ldrh	r2, [r7, #14]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 fd94 	bl	8002ab2 <_ZN13DriveSettings13setTeachSpeedEt>
			break;
 8000f8a:	e0c3      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case CLAMPING_TORQUE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	3305      	adds	r3, #5
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	01db      	lsls	r3, r3, #7
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingTorque(value);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	89fa      	ldrh	r2, [r7, #14]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f001 fc96 	bl	80028de <_ZN13DriveSettings17setClampingTorqueEt>
			break;
 8000fb2:	e0af      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case CLAMPING_SPEED_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	3305      	adds	r3, #5
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	01db      	lsls	r3, r3, #7
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	81fb      	strh	r3, [r7, #14]
			driveSettings->setClampingSpeed(value);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	89fa      	ldrh	r2, [r7, #14]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fc5b 	bl	8002890 <_ZN13DriveSettings16setClampingSpeedEt>
			break;
 8000fda:	e09b      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case IN_POS_DIFF_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	3305      	adds	r3, #5
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	01db      	lsls	r3, r3, #7
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	81fb      	strh	r3, [r7, #14]
			driveSettings->setInPosDiff(value);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	89fa      	ldrh	r2, [r7, #14]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 fc95 	bl	800292c <_ZN13DriveSettings12setInPosDiffEt>
			break;
 8001002:	e087      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case OPENING_DISTANCE_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	3305      	adds	r3, #5
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	01db      	lsls	r3, r3, #7
 800100c:	b21a      	sxth	r2, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	3304      	adds	r3, #4
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b21b      	sxth	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b21b      	sxth	r3, r3
 800101a:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOpeningDistance(value);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	89fa      	ldrh	r2, [r7, #14]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f001 fca8 	bl	800297a <_ZN13DriveSettings18setOpeningDistanceEt>
			break;
 800102a:	e073      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case OVER_CURRENT_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	3305      	adds	r3, #5
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	01db      	lsls	r3, r3, #7
 8001034:	b21a      	sxth	r2, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	3304      	adds	r3, #4
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21b      	sxth	r3, r3
 8001042:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentWarning(value);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	89fa      	ldrh	r2, [r7, #14]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f001 fce2 	bl	8002a16 <_ZN13DriveSettings21setOverCurrentWarningEt>
			break;
 8001052:	e05f      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case OVER_CURRENT_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	3305      	adds	r3, #5
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	01db      	lsls	r3, r3, #7
 800105c:	b21a      	sxth	r2, r3
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	3304      	adds	r3, #4
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21b      	sxth	r3, r3
 800106a:	81fb      	strh	r3, [r7, #14]
			driveSettings->setOverCurrentError(value);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	89fa      	ldrh	r2, [r7, #14]
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f001 fdb8 	bl	8002bea <_ZN13DriveSettings19setOverCurrentErrorEt>
			break;
 800107a:	e04b      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case SELF_SHUTDOWN_DELAY_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	3305      	adds	r3, #5
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	01db      	lsls	r3, r3, #7
 8001084:	b21a      	sxth	r2, r3
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	3304      	adds	r3, #4
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21b      	sxth	r3, r3
 8001092:	81fb      	strh	r3, [r7, #14]
			driveSettings->setSelfShutdownDelay(value);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	89fa      	ldrh	r2, [r7, #14]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f001 fce1 	bl	8002a64 <_ZN13DriveSettings20setSelfShutdownDelayEt>
			break;
 80010a2:	e037      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case UNDERVOLTAGE_WARNING_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	3305      	adds	r3, #5
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	01db      	lsls	r3, r3, #7
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	3304      	adds	r3, #4
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageWarning(value);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	89fa      	ldrh	r2, [r7, #14]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 fd69 	bl	8002b9c <_ZN13DriveSettings22setUnderVoltageWarningEt>
			break;
 80010ca:	e023      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case UNDERVOLTAGE_ERROR_ADDR:
			value = ((uint16_t) data[5]) << 7 | data[4];
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	3305      	adds	r3, #5
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	01db      	lsls	r3, r3, #7
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	3304      	adds	r3, #4
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	81fb      	strh	r3, [r7, #14]
			driveSettings->setUnderVoltageError(value);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	89fa      	ldrh	r2, [r7, #14]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fd2e 	bl	8002b4e <_ZN13DriveSettings20setUnderVoltageErrorEt>
			break;
 80010f2:	e00f      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		case SAVE_SETTINGS_ADDR:
			driveSettings->setSaveSettings(data[4] != 0);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	3304      	adds	r3, #4
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	bf14      	ite	ne
 8001102:	2301      	movne	r3, #1
 8001104:	2300      	moveq	r3, #0
 8001106:	b2db      	uxtb	r3, r3
 8001108:	4619      	mov	r1, r3
 800110a:	4610      	mov	r0, r2
 800110c:	f001 fda3 	bl	8002c56 <_ZN13DriveSettings15setSaveSettingsEb>
			break;
 8001110:	e000      	b.n	8001114 <_ZN7BaseCOM11SetSettingsEPh+0x314>
		default:
			break;
 8001112:	bf00      	nop
	}
}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <_ZN7BaseCOM9SetStatusEPh>:

void BaseCOM::SetStatus(uint8_t *data)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	switch (data[3])
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	3303      	adds	r3, #3
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	3b01      	subs	r3, #1
 800112e:	2b06      	cmp	r3, #6
 8001130:	d879      	bhi.n	8001226 <_ZN7BaseCOM9SetStatusEPh+0x10a>
 8001132:	a201      	add	r2, pc, #4	; (adr r2, 8001138 <_ZN7BaseCOM9SetStatusEPh+0x1c>)
 8001134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001138:	08001155 	.word	0x08001155
 800113c:	08001173 	.word	0x08001173
 8001140:	08001191 	.word	0x08001191
 8001144:	080011af 	.word	0x080011af
 8001148:	080011cd 	.word	0x080011cd
 800114c:	080011eb 	.word	0x080011eb
 8001150:	08001209 	.word	0x08001209
	{
		case CLOSE_ADDR:
			driveStatus->setClose(data[4] == 0x01);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	3304      	adds	r3, #4
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b01      	cmp	r3, #1
 8001160:	bf0c      	ite	eq
 8001162:	2301      	moveq	r3, #1
 8001164:	2300      	movne	r3, #0
 8001166:	b2db      	uxtb	r3, r3
 8001168:	4619      	mov	r1, r3
 800116a:	4610      	mov	r0, r2
 800116c:	f001 ff14 	bl	8002f98 <_ZN11DriveStatus8setCloseEb>
			break;
 8001170:	e05a      	b.n	8001228 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case OPEN_ADDR:
			driveStatus->setOpen(data[4] == 0x01);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	3304      	adds	r3, #4
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	bf0c      	ite	eq
 8001180:	2301      	moveq	r3, #1
 8001182:	2300      	movne	r3, #0
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4619      	mov	r1, r3
 8001188:	4610      	mov	r0, r2
 800118a:	f001 ff28 	bl	8002fde <_ZN11DriveStatus7setOpenEb>
			break;
 800118e:	e04b      	b.n	8001228 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case TEACH_ADDR:
			driveStatus->setTeach(data[4] == 0x01);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	3304      	adds	r3, #4
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b01      	cmp	r3, #1
 800119c:	bf0c      	ite	eq
 800119e:	2301      	moveq	r3, #1
 80011a0:	2300      	movne	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4619      	mov	r1, r3
 80011a6:	4610      	mov	r0, r2
 80011a8:	f001 ffc8 	bl	800313c <_ZN11DriveStatus8setTeachEb>
			break;
 80011ac:	e03c      	b.n	8001228 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case RESET_ADDR:
			driveStatus->setReset(data[4] == 0x01);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	3304      	adds	r3, #4
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	bf0c      	ite	eq
 80011bc:	2301      	moveq	r3, #1
 80011be:	2300      	movne	r3, #0
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	4619      	mov	r1, r3
 80011c4:	4610      	mov	r0, r2
 80011c6:	f001 ff73 	bl	80030b0 <_ZN11DriveStatus8setResetEb>
			break;
 80011ca:	e02d      	b.n	8001228 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case ENABLE_ADDR:
			driveStatus->setEnable(data[4] == 0x01);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	3304      	adds	r3, #4
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	bf0c      	ite	eq
 80011da:	2301      	moveq	r3, #1
 80011dc:	2300      	movne	r3, #0
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	4619      	mov	r1, r3
 80011e2:	4610      	mov	r0, r2
 80011e4:	f001 ff41 	bl	800306a <_ZN11DriveStatus9setEnableEb>
			break;
 80011e8:	e01e      	b.n	8001228 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case DISABLE_ADDR:
			driveStatus->setDisable(data[4] == 0x01);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	3304      	adds	r3, #4
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	bf0c      	ite	eq
 80011f8:	2301      	moveq	r3, #1
 80011fa:	2300      	movne	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	4619      	mov	r1, r3
 8001200:	4610      	mov	r0, r2
 8001202:	f001 ff0f 	bl	8003024 <_ZN11DriveStatus10setDisableEb>
			break;
 8001206:	e00f      	b.n	8001228 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		case STOP_ADDR:
			driveStatus->setStop(data[4] == 0x01);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	3304      	adds	r3, #4
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b01      	cmp	r3, #1
 8001214:	bf0c      	ite	eq
 8001216:	2301      	moveq	r3, #1
 8001218:	2300      	movne	r3, #0
 800121a:	b2db      	uxtb	r3, r3
 800121c:	4619      	mov	r1, r3
 800121e:	4610      	mov	r0, r2
 8001220:	f001 ff69 	bl	80030f6 <_ZN11DriveStatus7setStopEb>
			break;
 8001224:	e000      	b.n	8001228 <_ZN7BaseCOM9SetStatusEPh+0x10c>
		default:
			break;
 8001226:	bf00      	nop
	}
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <_ZN7BaseCOM10SetCommandEPh>:

void BaseCOM::SetCommand(uint8_t *data)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	switch (data[3])
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	3303      	adds	r3, #3
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	3b01      	subs	r3, #1
 8001242:	2b06      	cmp	r3, #6
 8001244:	d879      	bhi.n	800133a <_ZN7BaseCOM10SetCommandEPh+0x10a>
 8001246:	a201      	add	r2, pc, #4	; (adr r2, 800124c <_ZN7BaseCOM10SetCommandEPh+0x1c>)
 8001248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124c:	08001269 	.word	0x08001269
 8001250:	08001287 	.word	0x08001287
 8001254:	080012a5 	.word	0x080012a5
 8001258:	080012c3 	.word	0x080012c3
 800125c:	080012e1 	.word	0x080012e1
 8001260:	080012ff 	.word	0x080012ff
 8001264:	0800131d 	.word	0x0800131d
	{
		case CLOSE_ADDR:
			driveCommand->setClose(data[4] == 0x01);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	3304      	adds	r3, #4
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b01      	cmp	r3, #1
 8001274:	bf0c      	ite	eq
 8001276:	2301      	moveq	r3, #1
 8001278:	2300      	movne	r3, #0
 800127a:	b2db      	uxtb	r3, r3
 800127c:	4619      	mov	r1, r3
 800127e:	4610      	mov	r0, r2
 8001280:	f001 fd67 	bl	8002d52 <_ZN12DriveCommand8setCloseEb>
			break;
 8001284:	e05a      	b.n	800133c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case OPEN_ADDR:
			driveCommand->setOpen(data[4] == 0x01);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	3304      	adds	r3, #4
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b01      	cmp	r3, #1
 8001292:	bf0c      	ite	eq
 8001294:	2301      	moveq	r3, #1
 8001296:	2300      	movne	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4619      	mov	r1, r3
 800129c:	4610      	mov	r0, r2
 800129e:	f001 fd78 	bl	8002d92 <_ZN12DriveCommand7setOpenEb>
			break;
 80012a2:	e04b      	b.n	800133c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case TEACH_ADDR:
			driveCommand->setTeach(data[4] == 0x01);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	3304      	adds	r3, #4
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	bf0c      	ite	eq
 80012b2:	2301      	moveq	r3, #1
 80012b4:	2300      	movne	r3, #0
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	4619      	mov	r1, r3
 80012ba:	4610      	mov	r0, r2
 80012bc:	f001 fe09 	bl	8002ed2 <_ZN12DriveCommand8setTeachEb>
			break;
 80012c0:	e03c      	b.n	800133c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case RESET_ADDR:
			driveCommand->setReset(data[4] == 0x01);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	3304      	adds	r3, #4
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	bf0c      	ite	eq
 80012d0:	2301      	moveq	r3, #1
 80012d2:	2300      	movne	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4619      	mov	r1, r3
 80012d8:	4610      	mov	r0, r2
 80012da:	f001 fdba 	bl	8002e52 <_ZN12DriveCommand8setResetEb>
			break;
 80012de:	e02d      	b.n	800133c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case ENABLE_ADDR:
			driveCommand->setEnable(data[4] == 0x01);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	3304      	adds	r3, #4
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	bf0c      	ite	eq
 80012ee:	2301      	moveq	r3, #1
 80012f0:	2300      	movne	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4619      	mov	r1, r3
 80012f6:	4610      	mov	r0, r2
 80012f8:	f001 fd8b 	bl	8002e12 <_ZN12DriveCommand9setEnableEb>
			break;
 80012fc:	e01e      	b.n	800133c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case DISABLE_ADDR:
			driveCommand->setDisable(data[4] == 0x01);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	3304      	adds	r3, #4
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b01      	cmp	r3, #1
 800130a:	bf0c      	ite	eq
 800130c:	2301      	moveq	r3, #1
 800130e:	2300      	movne	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4619      	mov	r1, r3
 8001314:	4610      	mov	r0, r2
 8001316:	f001 fd5c 	bl	8002dd2 <_ZN12DriveCommand10setDisableEb>
			break;
 800131a:	e00f      	b.n	800133c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		case STOP_ADDR:
			driveCommand->setStop(data[4] == 0x01);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	3304      	adds	r3, #4
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	bf0c      	ite	eq
 800132a:	2301      	moveq	r3, #1
 800132c:	2300      	movne	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	4619      	mov	r1, r3
 8001332:	4610      	mov	r0, r2
 8001334:	f001 fdad 	bl	8002e92 <_ZN12DriveCommand7setStopEb>
			break;
 8001338:	e000      	b.n	800133c <_ZN7BaseCOM10SetCommandEPh+0x10c>
		default:
			break;
 800133a:	bf00      	nop
	}
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <_ZN7BaseCOM4CRC8EPhh>:




uint8_t BaseCOM::CRC8(uint8_t *data, uint8_t length)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	4613      	mov	r3, r2
 8001350:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0xff;
 8001352:	23ff      	movs	r3, #255	; 0xff
 8001354:	77fb      	strb	r3, [r7, #31]
	size_t i, j;
	for (i = 0; i < length; i++)
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	429a      	cmp	r2, r3
 8001360:	d222      	bcs.n	80013a8 <_ZN7BaseCOM4CRC8EPhh+0x64>
	{
		crc ^= data[i];
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	4413      	add	r3, r2
 8001368:	781a      	ldrb	r2, [r3, #0]
 800136a:	7ffb      	ldrb	r3, [r7, #31]
 800136c:	4053      	eors	r3, r2
 800136e:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	2b07      	cmp	r3, #7
 8001378:	d812      	bhi.n	80013a0 <_ZN7BaseCOM4CRC8EPhh+0x5c>
		{
			if ((crc & 0x80) != 0)
 800137a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800137e:	2b00      	cmp	r3, #0
 8001380:	da07      	bge.n	8001392 <_ZN7BaseCOM4CRC8EPhh+0x4e>
				crc = (uint8_t) ((crc << 1) ^ 0x31);
 8001382:	7ffb      	ldrb	r3, [r7, #31]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	b25b      	sxtb	r3, r3
 8001388:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800138c:	b25b      	sxtb	r3, r3
 800138e:	77fb      	strb	r3, [r7, #31]
 8001390:	e002      	b.n	8001398 <_ZN7BaseCOM4CRC8EPhh+0x54>
			else
				crc <<= 1;
 8001392:	7ffb      	ldrb	r3, [r7, #31]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	3301      	adds	r3, #1
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	e7e9      	b.n	8001374 <_ZN7BaseCOM4CRC8EPhh+0x30>
	for (i = 0; i < length; i++)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	3301      	adds	r3, #1
 80013a4:	61bb      	str	r3, [r7, #24]
 80013a6:	e7d8      	b.n	800135a <_ZN7BaseCOM4CRC8EPhh+0x16>
		}
	}
	return crc;
 80013a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <_ZN5IOCom9TransmittEPhh>:

#include "IOCom.h"
#include "../AppMain/Defines.h"

bool IOCom::Transmitt(uint8_t *data, uint8_t length)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	4613      	mov	r3, r2
 80013c2:	71fb      	strb	r3, [r7, #7]
	//	this->driveStatus->isOpen() == true ? Out2.Set() : Out2.Reset();
	//	this->driveStatus->isClose() == true ? Out3.Set() : Out3.Reset();
	//this->driveStatus->isStop() == true ? Out4.Set() : Out4.Reset();
	//this->driveStatus->isTeach() == true ? Out5.Set() : Out5.Reset();

	return true;
 80013c4:	2301      	movs	r3, #1
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <_ZN5IOCom7ReceiveEPhh>:

bool IOCom::Receive(uint8_t *data, uint8_t length)
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	4613      	mov	r3, r2
 80013e0:	71fb      	strb	r3, [r7, #7]
	configeWriteStatus = CONFIG_WRITE;
 80013e2:	2102      	movs	r1, #2
 80013e4:	4854      	ldr	r0, [pc, #336]	; (8001538 <_ZN5IOCom7ReceiveEPhh+0x164>)
 80013e6:	f004 fe21 	bl	800602c <HAL_GPIO_ReadPin>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	bf0c      	ite	eq
 80013f0:	2301      	moveq	r3, #1
 80013f2:	2300      	movne	r3, #0
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

	if (configeWriteStatus && !previousConfigeWriteStatus)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 8092 	beq.w	800152c <_ZN5IOCom7ReceiveEPhh+0x158>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800140e:	f083 0301 	eor.w	r3, r3, #1
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 8089 	beq.w	800152c <_ZN5IOCom7ReceiveEPhh+0x158>
	{
		//read digial config
		uint8_t data = ((uint8_t) CONFIG_ADDR_7 << 7)
 800141a:	2104      	movs	r1, #4
 800141c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001420:	f004 fe04 	bl	800602c <HAL_GPIO_ReadPin>
 8001424:	4603      	mov	r3, r0
 8001426:	2b80      	cmp	r3, #128	; 0x80
 8001428:	bf0c      	ite	eq
 800142a:	2301      	moveq	r3, #1
 800142c:	2300      	movne	r3, #0
 800142e:	b2db      	uxtb	r3, r3
 8001430:	461c      	mov	r4, r3
				+ (((uint8_t) CONFIG_ADDR_6) << 6)
 8001432:	2102      	movs	r1, #2
 8001434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001438:	f004 fdf8 	bl	800602c <HAL_GPIO_ReadPin>
 800143c:	4603      	mov	r3, r0
 800143e:	2b01      	cmp	r3, #1
 8001440:	d101      	bne.n	8001446 <_ZN5IOCom7ReceiveEPhh+0x72>
 8001442:	2340      	movs	r3, #64	; 0x40
 8001444:	e000      	b.n	8001448 <_ZN5IOCom7ReceiveEPhh+0x74>
 8001446:	2300      	movs	r3, #0
 8001448:	4423      	add	r3, r4
 800144a:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_5) << 5)
 800144c:	2101      	movs	r1, #1
 800144e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001452:	f004 fdeb 	bl	800602c <HAL_GPIO_ReadPin>
 8001456:	4603      	mov	r3, r0
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <_ZN5IOCom7ReceiveEPhh+0x8c>
 800145c:	2320      	movs	r3, #32
 800145e:	e000      	b.n	8001462 <_ZN5IOCom7ReceiveEPhh+0x8e>
 8001460:	2300      	movs	r3, #0
 8001462:	4423      	add	r3, r4
 8001464:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_4) << 4)
 8001466:	2108      	movs	r1, #8
 8001468:	4834      	ldr	r0, [pc, #208]	; (800153c <_ZN5IOCom7ReceiveEPhh+0x168>)
 800146a:	f004 fddf 	bl	800602c <HAL_GPIO_ReadPin>
 800146e:	4603      	mov	r3, r0
 8001470:	2b01      	cmp	r3, #1
 8001472:	d101      	bne.n	8001478 <_ZN5IOCom7ReceiveEPhh+0xa4>
 8001474:	2310      	movs	r3, #16
 8001476:	e000      	b.n	800147a <_ZN5IOCom7ReceiveEPhh+0xa6>
 8001478:	2300      	movs	r3, #0
 800147a:	4423      	add	r3, r4
 800147c:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_3) << 3)
 800147e:	2104      	movs	r1, #4
 8001480:	482e      	ldr	r0, [pc, #184]	; (800153c <_ZN5IOCom7ReceiveEPhh+0x168>)
 8001482:	f004 fdd3 	bl	800602c <HAL_GPIO_ReadPin>
 8001486:	4603      	mov	r3, r0
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <_ZN5IOCom7ReceiveEPhh+0xbc>
 800148c:	2308      	movs	r3, #8
 800148e:	e000      	b.n	8001492 <_ZN5IOCom7ReceiveEPhh+0xbe>
 8001490:	2300      	movs	r3, #0
 8001492:	4423      	add	r3, r4
 8001494:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_2) << 2)
 8001496:	2102      	movs	r1, #2
 8001498:	4828      	ldr	r0, [pc, #160]	; (800153c <_ZN5IOCom7ReceiveEPhh+0x168>)
 800149a:	f004 fdc7 	bl	800602c <HAL_GPIO_ReadPin>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <_ZN5IOCom7ReceiveEPhh+0xd4>
 80014a4:	2304      	movs	r3, #4
 80014a6:	e000      	b.n	80014aa <_ZN5IOCom7ReceiveEPhh+0xd6>
 80014a8:	2300      	movs	r3, #0
 80014aa:	4423      	add	r3, r4
 80014ac:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_1) << 1);
 80014ae:	2101      	movs	r1, #1
 80014b0:	4822      	ldr	r0, [pc, #136]	; (800153c <_ZN5IOCom7ReceiveEPhh+0x168>)
 80014b2:	f004 fdbb 	bl	800602c <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <_ZN5IOCom7ReceiveEPhh+0xec>
 80014bc:	2302      	movs	r3, #2
 80014be:	e000      	b.n	80014c2 <_ZN5IOCom7ReceiveEPhh+0xee>
 80014c0:	2300      	movs	r3, #0
 80014c2:	4423      	add	r3, r4
 80014c4:	75fb      	strb	r3, [r7, #23]

		switch (counter)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d827      	bhi.n	8001520 <_ZN5IOCom7ReceiveEPhh+0x14c>
 80014d0:	a201      	add	r2, pc, #4	; (adr r2, 80014d8 <_ZN5IOCom7ReceiveEPhh+0x104>)
 80014d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d6:	bf00      	nop
 80014d8:	080014e9 	.word	0x080014e9
 80014dc:	0800152b 	.word	0x0800152b
 80014e0:	0800152b 	.word	0x0800152b
 80014e4:	08001503 	.word	0x08001503
		{
			case 0:
				reg = data;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	7dfa      	ldrb	r2, [r7, #23]
 80014ec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
				counter++;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80014f6:	3301      	adds	r3, #1
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
			case 1:
				break;
 8001500:	e013      	b.n	800152a <_ZN5IOCom7ReceiveEPhh+0x156>
				break;
				payload |= ((uint16_t) data) << 7;
				counter++;
				break;
			case 3:
				payload |= data;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8001508:	7dfb      	ldrb	r3, [r7, #23]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	b29a      	uxth	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
				counter = 0;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
				break;
 800151e:	e005      	b.n	800152c <_ZN5IOCom7ReceiveEPhh+0x158>
			default:
				counter = 0;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
				break;
 8001528:	e000      	b.n	800152c <_ZN5IOCom7ReceiveEPhh+0x158>
				break;
 800152a:	bf00      	nop
		}
	}
	return false;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	371c      	adds	r7, #28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}
 8001536:	bf00      	nop
 8001538:	48001c00 	.word	0x48001c00
 800153c:	48000800 	.word	0x48000800

08001540 <_ZN8RFM95Com9TransmittEPhh>:

#include "RFM95Com.h"
#include "../AppMain/Defines.h"

bool RFM95Com::Transmitt(uint8_t *data, uint8_t length)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	4613      	mov	r3, r2
 800154c:	71fb      	strb	r3, [r7, #7]
	uint8_t *txData;

	if (this->driveCommand->isCommandChanged() != 0)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	4618      	mov	r0, r3
 8001554:	f001 fcd1 	bl	8002efa <_ZNK12DriveCommand16isCommandChangedEv>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	bf14      	ite	ne
 800155e:	2301      	movne	r3, #1
 8001560:	2300      	moveq	r3, #0
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 808d 	beq.w	8001684 <_ZN8RFM95Com9TransmittEPhh+0x144>
	{
		uint8_t command = driveCommand->getCommandChangedReg();
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	4618      	mov	r0, r3
 8001570:	f001 fcd4 	bl	8002f1c <_ZNK12DriveCommand20getCommandChangedRegEv>
 8001574:	4603      	mov	r3, r0
 8001576:	767b      	strb	r3, [r7, #25]

		if (command & CLOSE_CHANGE)
 8001578:	7e7b      	ldrb	r3, [r7, #25]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00d      	beq.n	800159e <_ZN8RFM95Com9TransmittEPhh+0x5e>
		{
			txData = this->GetCommand(CLOSE_ADDR);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3304      	adds	r3, #4
 8001586:	2101      	movs	r1, #1
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fbaf 	bl	8000cec <_ZN7BaseCOM10GetCommandEh>
 800158e:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(CLOSE_CHANGE);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	2101      	movs	r1, #1
 8001596:	4618      	mov	r0, r3
 8001598:	f001 fccc 	bl	8002f34 <_ZN12DriveCommand19ResetCommandChangedEh>
 800159c:	e179      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & OPEN_CHANGE)
 800159e:	7e7b      	ldrb	r3, [r7, #25]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00d      	beq.n	80015c4 <_ZN8RFM95Com9TransmittEPhh+0x84>
		{
			txData = this->GetCommand(OPEN_ADDR);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3304      	adds	r3, #4
 80015ac:	2102      	movs	r1, #2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fb9c 	bl	8000cec <_ZN7BaseCOM10GetCommandEh>
 80015b4:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(OPEN_CHANGE);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	2102      	movs	r1, #2
 80015bc:	4618      	mov	r0, r3
 80015be:	f001 fcb9 	bl	8002f34 <_ZN12DriveCommand19ResetCommandChangedEh>
 80015c2:	e166      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & TEACH_CHANGE)
 80015c4:	7e7b      	ldrb	r3, [r7, #25]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00d      	beq.n	80015ea <_ZN8RFM95Com9TransmittEPhh+0xaa>
		{
			txData = this->GetCommand(TEACH_ADDR);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	3304      	adds	r3, #4
 80015d2:	2103      	movs	r1, #3
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fb89 	bl	8000cec <_ZN7BaseCOM10GetCommandEh>
 80015da:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(TEACH_CHANGE);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	2104      	movs	r1, #4
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 fca6 	bl	8002f34 <_ZN12DriveCommand19ResetCommandChangedEh>
 80015e8:	e153      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & RESET_CHANGE)
 80015ea:	7e7b      	ldrb	r3, [r7, #25]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00d      	beq.n	8001610 <_ZN8RFM95Com9TransmittEPhh+0xd0>
		{
			txData = this->GetCommand(RESET_ADDR);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3304      	adds	r3, #4
 80015f8:	2104      	movs	r1, #4
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fb76 	bl	8000cec <_ZN7BaseCOM10GetCommandEh>
 8001600:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(RESET_CHANGE);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	2108      	movs	r1, #8
 8001608:	4618      	mov	r0, r3
 800160a:	f001 fc93 	bl	8002f34 <_ZN12DriveCommand19ResetCommandChangedEh>
 800160e:	e140      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & ENABLE_CHANGE)
 8001610:	7e7b      	ldrb	r3, [r7, #25]
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00d      	beq.n	8001636 <_ZN8RFM95Com9TransmittEPhh+0xf6>
		{
			txData = this->GetCommand(ENABLE_ADDR);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	3304      	adds	r3, #4
 800161e:	2105      	movs	r1, #5
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fb63 	bl	8000cec <_ZN7BaseCOM10GetCommandEh>
 8001626:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(ENABLE_CHANGE);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	2110      	movs	r1, #16
 800162e:	4618      	mov	r0, r3
 8001630:	f001 fc80 	bl	8002f34 <_ZN12DriveCommand19ResetCommandChangedEh>
 8001634:	e12d      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & DISABLE_CHANGE)
 8001636:	7e7b      	ldrb	r3, [r7, #25]
 8001638:	f003 0320 	and.w	r3, r3, #32
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00d      	beq.n	800165c <_ZN8RFM95Com9TransmittEPhh+0x11c>
		{
			txData = this->GetCommand(DISABLE_ADDR);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3304      	adds	r3, #4
 8001644:	2106      	movs	r1, #6
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fb50 	bl	8000cec <_ZN7BaseCOM10GetCommandEh>
 800164c:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(DISABLE_CHANGE);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	2120      	movs	r1, #32
 8001654:	4618      	mov	r0, r3
 8001656:	f001 fc6d 	bl	8002f34 <_ZN12DriveCommand19ResetCommandChangedEh>
 800165a:	e11a      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (command & STOP_CHANGE)
 800165c:	7e7b      	ldrb	r3, [r7, #25]
 800165e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 8115 	beq.w	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		{
			txData = this->GetCommand(STOP_ADDR);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	3304      	adds	r3, #4
 800166c:	2107      	movs	r1, #7
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fb3c 	bl	8000cec <_ZN7BaseCOM10GetCommandEh>
 8001674:	61f8      	str	r0, [r7, #28]
			driveCommand->ResetCommandChanged(STOP_CHANGE);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	2140      	movs	r1, #64	; 0x40
 800167c:	4618      	mov	r0, r3
 800167e:	f001 fc59 	bl	8002f34 <_ZN12DriveCommand19ResetCommandChangedEh>
 8001682:	e106      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
	}
	else if (driveSettings->isSettingsChanged() != 0)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	4618      	mov	r0, r3
 800168a:	f001 faf3 	bl	8002c74 <_ZN13DriveSettings17isSettingsChangedEv>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	bf14      	ite	ne
 8001694:	2301      	movne	r3, #1
 8001696:	2300      	moveq	r3, #0
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 80db 	beq.w	8001856 <_ZN8RFM95Com9TransmittEPhh+0x316>
	{
		uint16_t commands = driveSettings->getSettingsChangedReg();
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f001 faf6 	bl	8002c96 <_ZNK13DriveSettings21getSettingsChangedRegEv>
 80016aa:	4603      	mov	r3, r0
 80016ac:	837b      	strh	r3, [r7, #26]

		if (commands & TEACH_TORQUE_CHANGE)
 80016ae:	8b7b      	ldrh	r3, [r7, #26]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00d      	beq.n	80016d4 <_ZN8RFM95Com9TransmittEPhh+0x194>
		{
			txData = this->GetSettings(TEACH_TORQUE_ADDR);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3304      	adds	r3, #4
 80016bc:	2110      	movs	r1, #16
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff f978 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 80016c4:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(TEACH_TORQUE_CHANGE);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	2101      	movs	r1, #1
 80016cc:	4618      	mov	r0, r3
 80016ce:	f001 faee 	bl	8002cae <_ZN13DriveSettings20ResetSettingsChangedEt>
 80016d2:	e0de      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & TEACH_SPEED_CHANGE)
 80016d4:	8b7b      	ldrh	r3, [r7, #26]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00d      	beq.n	80016fa <_ZN8RFM95Com9TransmittEPhh+0x1ba>
		{
			txData = this->GetSettings(TEACH_SPEED_ADDR);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2111      	movs	r1, #17
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff f965 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 80016ea:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(TEACH_SPEED_CHANGE);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	2102      	movs	r1, #2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f001 fadb 	bl	8002cae <_ZN13DriveSettings20ResetSettingsChangedEt>
 80016f8:	e0cb      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & CLAMPING_TORQUE_CHANGE)
 80016fa:	8b7b      	ldrh	r3, [r7, #26]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00d      	beq.n	8001720 <_ZN8RFM95Com9TransmittEPhh+0x1e0>
		{
			txData = this->GetSettings(CLAMPING_TORQUE_ADDR);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	3304      	adds	r3, #4
 8001708:	2112      	movs	r1, #18
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff f952 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 8001710:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(CLAMPING_TORQUE_CHANGE);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	2104      	movs	r1, #4
 8001718:	4618      	mov	r0, r3
 800171a:	f001 fac8 	bl	8002cae <_ZN13DriveSettings20ResetSettingsChangedEt>
 800171e:	e0b8      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & CLAMPING_SPEED_CHANGE)
 8001720:	8b7b      	ldrh	r3, [r7, #26]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00d      	beq.n	8001746 <_ZN8RFM95Com9TransmittEPhh+0x206>
		{
			txData = this->GetSettings(CLAMPING_SPEED_ADDR);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	3304      	adds	r3, #4
 800172e:	2113      	movs	r1, #19
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff f93f 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 8001736:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(CLAMPING_SPEED_CHANGE);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	2108      	movs	r1, #8
 800173e:	4618      	mov	r0, r3
 8001740:	f001 fab5 	bl	8002cae <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001744:	e0a5      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & SELF_SHUTDOWN_DELAY_CHANGE)
 8001746:	8b7b      	ldrh	r3, [r7, #26]
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00d      	beq.n	800176c <_ZN8RFM95Com9TransmittEPhh+0x22c>
		{
			txData = this->GetSettings(SELF_SHUTDOWN_DELAY_ADDR);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3304      	adds	r3, #4
 8001754:	2114      	movs	r1, #20
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff f92c 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 800175c:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(SELF_SHUTDOWN_DELAY_CHANGE);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	2110      	movs	r1, #16
 8001764:	4618      	mov	r0, r3
 8001766:	f001 faa2 	bl	8002cae <_ZN13DriveSettings20ResetSettingsChangedEt>
 800176a:	e092      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & IN_POS_DIFF_CHANGE)
 800176c:	8b7b      	ldrh	r3, [r7, #26]
 800176e:	f003 0320 	and.w	r3, r3, #32
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00d      	beq.n	8001792 <_ZN8RFM95Com9TransmittEPhh+0x252>
		{
			txData = this->GetSettings(IN_POS_DIFF_ADDR);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	3304      	adds	r3, #4
 800177a:	2115      	movs	r1, #21
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff f919 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 8001782:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(IN_POS_DIFF_CHANGE);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	2120      	movs	r1, #32
 800178a:	4618      	mov	r0, r3
 800178c:	f001 fa8f 	bl	8002cae <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001790:	e07f      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & OPENING_DISTANCE_CHANGE)
 8001792:	8b7b      	ldrh	r3, [r7, #26]
 8001794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00d      	beq.n	80017b8 <_ZN8RFM95Com9TransmittEPhh+0x278>
		{
			txData = this->GetSettings(OPENING_DISTANCE_ADDR);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	3304      	adds	r3, #4
 80017a0:	2116      	movs	r1, #22
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff f906 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 80017a8:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(OPENING_DISTANCE_CHANGE);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	2140      	movs	r1, #64	; 0x40
 80017b0:	4618      	mov	r0, r3
 80017b2:	f001 fa7c 	bl	8002cae <_ZN13DriveSettings20ResetSettingsChangedEt>
 80017b6:	e06c      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & UNDERVOLTAGE_WARNING_CHANGE)
 80017b8:	8b7b      	ldrh	r3, [r7, #26]
 80017ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00d      	beq.n	80017de <_ZN8RFM95Com9TransmittEPhh+0x29e>
		{
			txData = this->GetSettings(UNDERVOLTAGE_WARNING_ADDR);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2117      	movs	r1, #23
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff f8f3 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 80017ce:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(UNDERVOLTAGE_WARNING_CHANGE);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	2180      	movs	r1, #128	; 0x80
 80017d6:	4618      	mov	r0, r3
 80017d8:	f001 fa69 	bl	8002cae <_ZN13DriveSettings20ResetSettingsChangedEt>
 80017dc:	e059      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & UNDERVOLTAGE_ERROR_CHANGE)
 80017de:	8b7b      	ldrh	r3, [r7, #26]
 80017e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00e      	beq.n	8001806 <_ZN8RFM95Com9TransmittEPhh+0x2c6>
		{
			txData = this->GetSettings(UNDERVOLTAGE_ERROR_ADDR);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3304      	adds	r3, #4
 80017ec:	2118      	movs	r1, #24
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff f8e0 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 80017f4:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(UNDERVOLTAGE_ERROR_CHANGE);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017fe:	4618      	mov	r0, r3
 8001800:	f001 fa55 	bl	8002cae <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001804:	e045      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & OVER_CURRENT_WARNING_CHANGE)
 8001806:	8b7b      	ldrh	r3, [r7, #26]
 8001808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00e      	beq.n	800182e <_ZN8RFM95Com9TransmittEPhh+0x2ee>
		{
			txData = this->GetSettings(OVER_CURRENT_WARNING_ADDR);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3304      	adds	r3, #4
 8001814:	2119      	movs	r1, #25
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff f8cc 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 800181c:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(OVER_CURRENT_WARNING_CHANGE);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001826:	4618      	mov	r0, r3
 8001828:	f001 fa41 	bl	8002cae <_ZN13DriveSettings20ResetSettingsChangedEt>
 800182c:	e031      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
		else if (commands & OVER_CURRENT_ERROR_CHANGE)
 800182e:	8b7b      	ldrh	r3, [r7, #26]
 8001830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001834:	2b00      	cmp	r3, #0
 8001836:	d02c      	beq.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		{
			txData = this->GetSettings(OVER_CURRENT_ERROR_ADDR);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3304      	adds	r3, #4
 800183c:	211a      	movs	r1, #26
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff f8b8 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 8001844:	61f8      	str	r0, [r7, #28]
			driveSettings->ResetSettingsChanged(OVER_CURRENT_ERROR_CHANGE);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800184e:	4618      	mov	r0, r3
 8001850:	f001 fa2d 	bl	8002cae <_ZN13DriveSettings20ResetSettingsChangedEt>
 8001854:	e01d      	b.n	8001892 <_ZN8RFM95Com9TransmittEPhh+0x352>
		}
	}
	else
	{
		uint8_t dataTemp[] =
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	f8c3 2003 	str.w	r2, [r3, #3]
 8001862:	231f      	movs	r3, #31
 8001864:	743b      	strb	r3, [r7, #16]
 8001866:	2313      	movs	r3, #19
 8001868:	74bb      	strb	r3, [r7, #18]
		{ 0x1F, driveSettings->getDeviceAddress(), GET_STATUS, 0x00, 0x00, 0x00,
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	4618      	mov	r0, r3
 8001870:	f001 f9d6 	bl	8002c20 <_ZNK13DriveSettings16getDeviceAddressEv>
 8001874:	4603      	mov	r3, r0
				0x00 };
 8001876:	747b      	strb	r3, [r7, #17]
		dataTemp[6] = CRC8(dataTemp, 6);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3304      	adds	r3, #4
 800187c:	f107 0110 	add.w	r1, r7, #16
 8001880:	2206      	movs	r2, #6
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fd5e 	bl	8001344 <_ZN7BaseCOM4CRC8EPhh>
 8001888:	4603      	mov	r3, r0
 800188a:	75bb      	strb	r3, [r7, #22]
		txData = dataTemp;
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	61fb      	str	r3, [r7, #28]
	}

	rfm95->beginPacket();
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f000 fcbc 	bl	8002216 <_ZN10RFM95_LoRa11beginPacketEi>
	rfm95->write(txData, 7);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6998      	ldr	r0, [r3, #24]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	3304      	adds	r3, #4
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2207      	movs	r2, #7
 80018ae:	69f9      	ldr	r1, [r7, #28]
 80018b0:	4798      	blx	r3
	rfm95->endPacket();
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 fcce 	bl	8002258 <_ZN10RFM95_LoRa9endPacketEv>
	return true;
 80018bc:	2301      	movs	r3, #1
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3720      	adds	r7, #32
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <_ZN8RFM95Com7ReceiveEPhh>:

bool RFM95Com::Receive(uint8_t *data, uint8_t length)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b086      	sub	sp, #24
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	60f8      	str	r0, [r7, #12]
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	4613      	mov	r3, r2
 80018d2:	71fb      	strb	r3, [r7, #7]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[5] = crc

	uint8_t packetSize = rfm95->parsePacket();
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 fcde 	bl	800229c <_ZN10RFM95_LoRa11parsePacketEi>
 80018e0:	4603      	mov	r3, r0
 80018e2:	75bb      	strb	r3, [r7, #22]
	if (packetSize != 0)
 80018e4:	7dbb      	ldrb	r3, [r7, #22]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d065      	beq.n	80019b6 <_ZN8RFM95Com7ReceiveEPhh+0xf0>
	{
		uint8_t counter = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	75fb      	strb	r3, [r7, #23]
		while (rfm95->available())
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	699a      	ldr	r2, [r3, #24]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3308      	adds	r3, #8
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4610      	mov	r0, r2
 80018fe:	4798      	blx	r3
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	bf14      	ite	ne
 8001906:	2301      	movne	r3, #1
 8001908:	2300      	moveq	r3, #0
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d017      	beq.n	8001940 <_ZN8RFM95Com7ReceiveEPhh+0x7a>
		{
			data[counter] = rfm95->read();
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	699a      	ldr	r2, [r3, #24]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	330c      	adds	r3, #12
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4610      	mov	r0, r2
 8001920:	4798      	blx	r3
 8001922:	4601      	mov	r1, r0
 8001924:	7dfb      	ldrb	r3, [r7, #23]
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	4413      	add	r3, r2
 800192a:	b2ca      	uxtb	r2, r1
 800192c:	701a      	strb	r2, [r3, #0]
			if (counter > MAX_PACKET_2_RECEIVE)
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	2b07      	cmp	r3, #7
 8001932:	d901      	bls.n	8001938 <_ZN8RFM95Com7ReceiveEPhh+0x72>
			{
				return false;
 8001934:	2300      	movs	r3, #0
 8001936:	e03f      	b.n	80019b8 <_ZN8RFM95Com7ReceiveEPhh+0xf2>
			}
			counter++;
 8001938:	7dfb      	ldrb	r3, [r7, #23]
 800193a:	3301      	adds	r3, #1
 800193c:	75fb      	strb	r3, [r7, #23]
		while (rfm95->available())
 800193e:	e7d6      	b.n	80018ee <_ZN8RFM95Com7ReceiveEPhh+0x28>
		}

		//check CRC
		if (CRC8(data, 6) != data[6])
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3304      	adds	r3, #4
 8001944:	2206      	movs	r2, #6
 8001946:	68b9      	ldr	r1, [r7, #8]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fcfb 	bl	8001344 <_ZN7BaseCOM4CRC8EPhh>
 800194e:	4603      	mov	r3, r0
 8001950:	461a      	mov	r2, r3
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	3306      	adds	r3, #6
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	bf14      	ite	ne
 800195c:	2301      	movne	r3, #1
 800195e:	2300      	moveq	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <_ZN8RFM95Com7ReceiveEPhh+0xa4>
		{
			//error crc error //ToDO
			return false;
 8001966:	2300      	movs	r3, #0
 8001968:	e026      	b.n	80019b8 <_ZN8RFM95Com7ReceiveEPhh+0xf2>
		}

		switch (data[2])
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	3302      	adds	r3, #2
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d014      	beq.n	800199e <_ZN8RFM95Com7ReceiveEPhh+0xd8>
 8001974:	2b03      	cmp	r3, #3
 8001976:	dc19      	bgt.n	80019ac <_ZN8RFM95Com7ReceiveEPhh+0xe6>
 8001978:	2b01      	cmp	r3, #1
 800197a:	d002      	beq.n	8001982 <_ZN8RFM95Com7ReceiveEPhh+0xbc>
 800197c:	2b02      	cmp	r3, #2
 800197e:	d007      	beq.n	8001990 <_ZN8RFM95Com7ReceiveEPhh+0xca>
 8001980:	e014      	b.n	80019ac <_ZN8RFM95Com7ReceiveEPhh+0xe6>
		{
			case SEND_SETTINGS:
				this->SetSettings(data);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3304      	adds	r3, #4
 8001986:	68b9      	ldr	r1, [r7, #8]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fa39 	bl	8000e00 <_ZN7BaseCOM11SetSettingsEPh>
				break;
 800198e:	e012      	b.n	80019b6 <_ZN8RFM95Com7ReceiveEPhh+0xf0>
			case SEND_COMMAND:
				this->SetCommand(data);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3304      	adds	r3, #4
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fc4a 	bl	8001230 <_ZN7BaseCOM10SetCommandEPh>
				break;
 800199c:	e00b      	b.n	80019b6 <_ZN8RFM95Com7ReceiveEPhh+0xf0>
			case SEND_STATUS:
				this->SetStatus(data);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3304      	adds	r3, #4
 80019a2:	68b9      	ldr	r1, [r7, #8]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fbb9 	bl	800111c <_ZN7BaseCOM9SetStatusEPh>
				break;
 80019aa:	e004      	b.n	80019b6 <_ZN8RFM95Com7ReceiveEPhh+0xf0>
			default:
				//not sported command
				data[2] = 0;
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	3302      	adds	r3, #2
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
				break;
 80019b4:	bf00      	nop
		}
	}
	return true;
 80019b6:	2301      	movs	r3, #1
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_ZN6USBCom9TransmittEPhh>:
#include "../AppMain/Defines.h"
#include "usb_device.h"
#include "usbd_cdc_if.h"

bool USBCom::Transmitt(uint8_t *data, uint8_t length)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	4613      	mov	r3, r2
 80019cc:	71fb      	strb	r3, [r7, #7]
	if (data == NULL)
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <_ZN6USBCom9TransmittEPhh+0x18>
	{
		return false;
 80019d4:	2300      	movs	r3, #0
 80019d6:	e019      	b.n	8001a0c <_ZN6USBCom9TransmittEPhh+0x4c>
	}

	uint16_t counter = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	82fb      	strh	r3, [r7, #22]
	while (CDC_Transmit_FS((uint8_t*) data, length) != USBD_OK)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	4619      	mov	r1, r3
 80019e2:	68b8      	ldr	r0, [r7, #8]
 80019e4:	f00c fb30 	bl	800e048 <CDC_Transmit_FS>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bf14      	ite	ne
 80019ee:	2301      	movne	r3, #1
 80019f0:	2300      	moveq	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <_ZN6USBCom9TransmittEPhh+0x4a>
	{
		counter++;
 80019f8:	8afb      	ldrh	r3, [r7, #22]
 80019fa:	3301      	adds	r3, #1
 80019fc:	82fb      	strh	r3, [r7, #22]
		if (counter >= 1000)
 80019fe:	8afb      	ldrh	r3, [r7, #22]
 8001a00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a04:	d3ea      	bcc.n	80019dc <_ZN6USBCom9TransmittEPhh+0x1c>
		{
			//ToDo USB Error
			return false;	//Transmit failed
 8001a06:	2300      	movs	r3, #0
 8001a08:	e000      	b.n	8001a0c <_ZN6USBCom9TransmittEPhh+0x4c>
		}
	}
	return true;	//Transmit successful
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <_ZN6USBCom7ReceiveEPhh>:

bool USBCom::Receive(uint8_t *data, uint8_t length)
{
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	71fb      	strb	r3, [r7, #7]
	uint8_t data2send[] =
 8001a22:	4a5f      	ldr	r2, [pc, #380]	; (8001ba0 <_ZN6USBCom7ReceiveEPhh+0x18c>)
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a2c:	6018      	str	r0, [r3, #0]
 8001a2e:	3304      	adds	r3, #4
 8001a30:	8019      	strh	r1, [r3, #0]
 8001a32:	3302      	adds	r3, #2
 8001a34:	0c0a      	lsrs	r2, r1, #16
 8001a36:	701a      	strb	r2, [r3, #0]
	{ 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t crc = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	75fb      	strb	r3, [r7, #23]
	//data[2] = command (readCommand, readSettings, readStatus, writeCommand...)
	//data[3] = reg addr (close, open, setTeach...)
	//data[4..n] = Payload
	//data[6] = crc

	if (length >= 5)
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	f240 80a9 	bls.w	8001b96 <_ZN6USBCom7ReceiveEPhh+0x182>
	{
		//calculate CRC from received data
		crc = this->CRC8(data, 6);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3304      	adds	r3, #4
 8001a48:	2206      	movs	r2, #6
 8001a4a:	68b9      	ldr	r1, [r7, #8]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fc79 	bl	8001344 <_ZN7BaseCOM4CRC8EPhh>
 8001a52:	4603      	mov	r3, r0
 8001a54:	75fb      	strb	r3, [r7, #23]
		if (crc != data[6])
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	3306      	adds	r3, #6
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	7dfa      	ldrb	r2, [r7, #23]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d003      	beq.n	8001a6a <_ZN6USBCom7ReceiveEPhh+0x56>
		{
			data[2] = 0;
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	3302      	adds	r3, #2
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
		}

		switch (data[2])
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	2b12      	cmp	r3, #18
 8001a74:	d876      	bhi.n	8001b64 <_ZN6USBCom7ReceiveEPhh+0x150>
 8001a76:	a201      	add	r2, pc, #4	; (adr r2, 8001a7c <_ZN6USBCom7ReceiveEPhh+0x68>)
 8001a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7c:	08001ac9 	.word	0x08001ac9
 8001a80:	08001ad7 	.word	0x08001ad7
 8001a84:	08001ae5 	.word	0x08001ae5
 8001a88:	08001b65 	.word	0x08001b65
 8001a8c:	08001b65 	.word	0x08001b65
 8001a90:	08001b65 	.word	0x08001b65
 8001a94:	08001b65 	.word	0x08001b65
 8001a98:	08001b65 	.word	0x08001b65
 8001a9c:	08001b65 	.word	0x08001b65
 8001aa0:	08001b65 	.word	0x08001b65
 8001aa4:	08001b65 	.word	0x08001b65
 8001aa8:	08001b65 	.word	0x08001b65
 8001aac:	08001b65 	.word	0x08001b65
 8001ab0:	08001b65 	.word	0x08001b65
 8001ab4:	08001b65 	.word	0x08001b65
 8001ab8:	08001b65 	.word	0x08001b65
 8001abc:	08001af3 	.word	0x08001af3
 8001ac0:	08001b19 	.word	0x08001b19
 8001ac4:	08001b3f 	.word	0x08001b3f
		{
			case SEND_SETTINGS:
				this->SetSettings(data);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	3304      	adds	r3, #4
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f996 	bl	8000e00 <_ZN7BaseCOM11SetSettingsEPh>
				break;
 8001ad4:	e04b      	b.n	8001b6e <_ZN6USBCom7ReceiveEPhh+0x15a>
			case SEND_COMMAND:
				this->SetCommand(data);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	68b9      	ldr	r1, [r7, #8]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fba7 	bl	8001230 <_ZN7BaseCOM10SetCommandEPh>
				break;
 8001ae2:	e044      	b.n	8001b6e <_ZN6USBCom7ReceiveEPhh+0x15a>
			case SEND_STATUS:
				this->SetStatus(data);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	68b9      	ldr	r1, [r7, #8]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fb16 	bl	800111c <_ZN7BaseCOM9SetStatusEPh>
				break;
 8001af0:	e03d      	b.n	8001b6e <_ZN6USBCom7ReceiveEPhh+0x15a>
			case GET_SETTINGS:
				return Transmitt(this->GetSettings(data[3]), 7);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681c      	ldr	r4, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1d1a      	adds	r2, r3, #4
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	3303      	adds	r3, #3
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	4619      	mov	r1, r3
 8001b04:	4610      	mov	r0, r2
 8001b06:	f7fe ff55 	bl	80009b4 <_ZN7BaseCOM11GetSettingsEh>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	4619      	mov	r1, r3
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	47a0      	blx	r4
 8001b14:	4603      	mov	r3, r0
 8001b16:	e03f      	b.n	8001b98 <_ZN6USBCom7ReceiveEPhh+0x184>
			case GET_COMMAND:
				return Transmitt(this->GetCommand(data[3]), 7);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681c      	ldr	r4, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1d1a      	adds	r2, r3, #4
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	3303      	adds	r3, #3
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	f7ff f8de 	bl	8000cec <_ZN7BaseCOM10GetCommandEh>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2207      	movs	r2, #7
 8001b34:	4619      	mov	r1, r3
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	47a0      	blx	r4
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	e02c      	b.n	8001b98 <_ZN6USBCom7ReceiveEPhh+0x184>
			case GET_STATUS:
				return Transmitt(this->GetStatus(data[3]), 7);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681c      	ldr	r4, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	1d1a      	adds	r2, r3, #4
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	3303      	adds	r3, #3
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4610      	mov	r0, r2
 8001b52:	f7ff f835 	bl	8000bc0 <_ZN7BaseCOM9GetStatusEh>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2207      	movs	r2, #7
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	47a0      	blx	r4
 8001b60:	4603      	mov	r3, r0
 8001b62:	e019      	b.n	8001b98 <_ZN6USBCom7ReceiveEPhh+0x184>
			default:
				//not suported command
				data[2] = 0;
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	3302      	adds	r3, #2
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
				break;
 8001b6c:	bf00      	nop
		}

		data2send[6] = CRC8(data2send, 6);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3304      	adds	r3, #4
 8001b72:	f107 0110 	add.w	r1, r7, #16
 8001b76:	2206      	movs	r2, #6
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fbe3 	bl	8001344 <_ZN7BaseCOM4CRC8EPhh>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	75bb      	strb	r3, [r7, #22]
		return Transmitt(data2send, 6);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f107 0110 	add.w	r1, r7, #16
 8001b8c:	2206      	movs	r2, #6
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	4798      	blx	r3
 8001b92:	4603      	mov	r3, r0
 8001b94:	e000      	b.n	8001b98 <_ZN6USBCom7ReceiveEPhh+0x184>
	}

	return false;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	371c      	adds	r7, #28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd90      	pop	{r4, r7, pc}
 8001ba0:	0800ec80 	.word	0x0800ec80

08001ba4 <_ZN5FlashC1EP13DriveSettingsP11DriveStatus>:
 */

#include "Flash.h"
#include "stm32l4xx_hal.h"

Flash::Flash(DriveSettings *driveSettings, DriveStatus *driveStatus)
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
{
	this->driveSettings = driveSettings;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	605a      	str	r2, [r3, #4]
}
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <_ZN5Flash9ReadFlashEv>:
 *
 * @param None
 * @return None
 */
void Flash::ReadFlash()
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b084      	sub	sp, #16
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < UFLASH_SIZE; i++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b13      	cmp	r3, #19
 8001bda:	dc12      	bgt.n	8001c02 <_ZN5Flash9ReadFlashEv+0x38>
	{
		tmpFlashArray[i] = *(uint64_t*) (FLASH_STAR_PAGE_ADDR + 64 * i);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8001be2:	f503 637e 	add.w	r3, r3, #4064	; 0xfe0
 8001be6:	019b      	lsls	r3, r3, #6
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	68f9      	ldr	r1, [r7, #12]
 8001bf0:	3101      	adds	r1, #1
 8001bf2:	00c9      	lsls	r1, r1, #3
 8001bf4:	4401      	add	r1, r0
 8001bf6:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < UFLASH_SIZE; i++)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	e7e9      	b.n	8001bd6 <_ZN5Flash9ReadFlashEv+0xc>
	}

	driveSettings->setClampingSpeed(tmpFlashArray[0]);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c0c:	b293      	uxth	r3, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f000 fe3e 	bl	8002890 <_ZN13DriveSettings16setClampingSpeedEt>
	driveSettings->setClampingTorque(tmpFlashArray[1]);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c1e:	b293      	uxth	r3, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	f000 fe5c 	bl	80028de <_ZN13DriveSettings17setClampingTorqueEt>
	driveSettings->setTeachSpeed(tmpFlashArray[2]);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001c30:	b293      	uxth	r3, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	f000 ff3d 	bl	8002ab2 <_ZN13DriveSettings13setTeachSpeedEt>
	driveSettings->setTeachTroque(tmpFlashArray[3]);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001c42:	b293      	uxth	r3, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f000 ff5b 	bl	8002b00 <_ZN13DriveSettings14setTeachTroqueEt>

	driveSettings->setOverCurrentError(tmpFlashArray[4]);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001c54:	b293      	uxth	r3, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	f000 ffc7 	bl	8002bea <_ZN13DriveSettings19setOverCurrentErrorEt>
	driveSettings->setOverCurrentWarning(tmpFlashArray[5]);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6818      	ldr	r0, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001c66:	b293      	uxth	r3, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f000 fed4 	bl	8002a16 <_ZN13DriveSettings21setOverCurrentWarningEt>
	driveSettings->setUnderVoltageError(tmpFlashArray[6]);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001c78:	b293      	uxth	r3, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f000 ff67 	bl	8002b4e <_ZN13DriveSettings20setUnderVoltageErrorEt>
	driveSettings->setUnderVoltageWarning(tmpFlashArray[7]);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001c8a:	b293      	uxth	r3, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f000 ff85 	bl	8002b9c <_ZN13DriveSettings22setUnderVoltageWarningEt>

	driveSettings->setSelfShutdownDelay(tmpFlashArray[8]);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001c9c:	b293      	uxth	r3, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f000 fee0 	bl	8002a64 <_ZN13DriveSettings20setSelfShutdownDelayEt>
	driveSettings->setInPosDiff(tmpFlashArray[9]);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001cae:	b293      	uxth	r3, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f000 fe3b 	bl	800292c <_ZN13DriveSettings12setInPosDiffEt>
	driveSettings->setOpeningDistance(tmpFlashArray[10]);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001cc0:	b293      	uxth	r3, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f000 fe59 	bl	800297a <_ZN13DriveSettings18setOpeningDistanceEt>

	driveSettings->setOverCurrentTimeThreshold(tmpFlashArray[11]);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001cd2:	b293      	uxth	r3, r2
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f000 fe77 	bl	80029c8 <_ZN13DriveSettings27setOverCurrentTimeThresholdEt>
	driveSettings->setDeviceAddress(tmpFlashArray[12]);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001ce4:	b2d3      	uxtb	r3, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f000 ffa6 	bl	8002c38 <_ZN13DriveSettings16setDeviceAddressEh>
}
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_ZN5Flash9SaveFlashEv>:



void Flash::SaveFlash(){
 8001cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cf8:	b096      	sub	sp, #88	; 0x58
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6578      	str	r0, [r7, #84]	; 0x54
	if (this->driveSettings->isSettingsChanged())
 8001cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 ffb6 	bl	8002c74 <_ZN13DriveSettings17isSettingsChangedEv>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 80c0 	beq.w	8001e90 <_ZN5Flash9SaveFlashEv+0x19c>
	{
		tmpFlashArray[0] = driveSettings->getClampingSpeed();
 8001d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 fdaf 	bl	8002878 <_ZNK13DriveSettings16getClampingSpeedEv>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2200      	movs	r2, #0
 8001d20:	461c      	mov	r4, r3
 8001d22:	4615      	mov	r5, r2
 8001d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d26:	e9c3 4502 	strd	r4, r5, [r3, #8]
		tmpFlashArray[1] = driveSettings->getClampingTorque();
 8001d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 fdc9 	bl	80028c6 <_ZNK13DriveSettings17getClampingTorqueEv>
 8001d34:	4603      	mov	r3, r0
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2200      	movs	r2, #0
 8001d3a:	4698      	mov	r8, r3
 8001d3c:	4691      	mov	r9, r2
 8001d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d40:	e9c3 8904 	strd	r8, r9, [r3, #16]
		tmpFlashArray[2] = driveSettings->getTeachSpeed();
 8001d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 fea6 	bl	8002a9a <_ZNK13DriveSettings13getTeachSpeedEv>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2200      	movs	r2, #0
 8001d54:	469a      	mov	sl, r3
 8001d56:	4693      	mov	fp, r2
 8001d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5a:	e9c3 ab06 	strd	sl, fp, [r3, #24]
		tmpFlashArray[3] = driveSettings->getTeachTroque();
 8001d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 fec0 	bl	8002ae8 <_ZNK13DriveSettings14getTeachTroqueEv>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d70:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d74:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8001d78:	e9c3 1208 	strd	r1, r2, [r3, #32]

		tmpFlashArray[4] = driveSettings->getOverCurrentError();
 8001d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 ff26 	bl	8002bd2 <_ZNK13DriveSettings19getOverCurrentErrorEv>
 8001d86:	4603      	mov	r3, r0
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8001d8e:	647a      	str	r2, [r7, #68]	; 0x44
 8001d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d92:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001d96:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
		tmpFlashArray[5] = driveSettings->getOverCurrentWarning();
 8001d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 fe2d 	bl	80029fe <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8001da4:	4603      	mov	r3, r0
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	2200      	movs	r2, #0
 8001daa:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8001db4:	e9c3 120c 	strd	r1, r2, [r3, #48]	; 0x30
		tmpFlashArray[6] = driveSettings->getUnderVoltageError();
 8001db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 feba 	bl	8002b36 <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
 8001dca:	637a      	str	r2, [r7, #52]	; 0x34
 8001dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8001dd2:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tmpFlashArray[7] = driveSettings->getUnderVoltageWarning();
 8001dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 fed2 	bl	8002b84 <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 8001de0:	4603      	mov	r3, r0
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	2200      	movs	r2, #0
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001de8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001df0:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

		tmpFlashArray[8] = driveSettings->getSelfShutdownDelay();
 8001df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 fe27 	bl	8002a4c <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	2200      	movs	r2, #0
 8001e04:	623b      	str	r3, [r7, #32]
 8001e06:	627a      	str	r2, [r7, #36]	; 0x24
 8001e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e0a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001e0e:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
		tmpFlashArray[9] = driveSettings->getInPosDiff();
 8001e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 fd7c 	bl	8002914 <_ZNK13DriveSettings12getInPosDiffEv>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	2200      	movs	r2, #0
 8001e22:	61bb      	str	r3, [r7, #24]
 8001e24:	61fa      	str	r2, [r7, #28]
 8001e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e28:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001e2c:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
		tmpFlashArray[10] = driveSettings->getOpeningDistance();
 8001e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fd94 	bl	8002962 <_ZNK13DriveSettings18getOpeningDistanceEv>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	2200      	movs	r2, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	617a      	str	r2, [r7, #20]
 8001e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e46:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001e4a:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58

		tmpFlashArray[11] = driveSettings->getOverCurrentTimeThreshold();
 8001e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fdac 	bl	80029b0 <_ZNK13DriveSettings27getOverCurrentTimeThresholdEv>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	60fa      	str	r2, [r7, #12]
 8001e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e64:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001e68:	e9c3 1218 	strd	r1, r2, [r3, #96]	; 0x60
		tmpFlashArray[12] = driveSettings->getDeviceAddress();
 8001e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 fed5 	bl	8002c20 <_ZNK13DriveSettings16getDeviceAddressEv>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	603b      	str	r3, [r7, #0]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e82:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001e86:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
		WriteFlash();
 8001e8a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001e8c:	f000 f805 	bl	8001e9a <_ZN5Flash10WriteFlashEv>
	}
}
 8001e90:	bf00      	nop
 8001e92:	3758      	adds	r7, #88	; 0x58
 8001e94:	46bd      	mov	sp, r7
 8001e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001e9a <_ZN5Flash10WriteFlashEv>:
 *
 * @param None
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef Flash::WriteFlash()
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b088      	sub	sp, #32
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]

	FLASH_EraseInitTypeDef EraseinitStruct;
	uint32_t sectorError = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60bb      	str	r3, [r7, #8]

	if (HAL_FLASH_Unlock() != HAL_OK)
 8001ea6:	f003 fd3b 	bl	8005920 <HAL_FLASH_Unlock>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf14      	ite	ne
 8001eb0:	2301      	movne	r3, #1
 8001eb2:	2300      	moveq	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d009      	beq.n	8001ece <_ZN5Flash10WriteFlashEv+0x34>
	{
		HAL_FLASH_Lock();
 8001eba:	f003 fd53 	bl	8005964 <HAL_FLASH_Lock>
		driveStatus->setError(DriveStatus::E_FLASH_ERROR);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f001 f95c 	bl	8003182 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
		return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e050      	b.n	8001f70 <_ZN5Flash10WriteFlashEv+0xd6>
	}

	EraseinitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
	EraseinitStruct.Banks = 1;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	613b      	str	r3, [r7, #16]
	EraseinitStruct.Page = UFLASH_PAGE;
 8001ed6:	237f      	movs	r3, #127	; 0x7f
 8001ed8:	617b      	str	r3, [r7, #20]
	EraseinitStruct.NbPages = UFLASH_NPAGES;
 8001eda:	2301      	movs	r3, #1
 8001edc:	61bb      	str	r3, [r7, #24]

	if (HAL_FLASHEx_Erase(&EraseinitStruct, &sectorError) != HAL_OK)
 8001ede:	f107 0208 	add.w	r2, r7, #8
 8001ee2:	f107 030c 	add.w	r3, r7, #12
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 fdff 	bl	8005aec <HAL_FLASHEx_Erase>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf14      	ite	ne
 8001ef4:	2301      	movne	r3, #1
 8001ef6:	2300      	moveq	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d009      	beq.n	8001f12 <_ZN5Flash10WriteFlashEv+0x78>
	{
		HAL_FLASH_Lock();
 8001efe:	f003 fd31 	bl	8005964 <HAL_FLASH_Lock>
		driveStatus->setError(DriveStatus::E_FLASH_ERROR);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2101      	movs	r1, #1
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f001 f93a 	bl	8003182 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
		return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e02e      	b.n	8001f70 <_ZN5Flash10WriteFlashEv+0xd6>
	}

	for (int i = 0; i < UFLASH_SIZE; i++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	2b13      	cmp	r3, #19
 8001f1a:	dc14      	bgt.n	8001f46 <_ZN5Flash10WriteFlashEv+0xac>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
				(FLASH_STAR_PAGE_ADDR + 64 * i), tmpFlashArray[i]);
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8001f22:	f503 637e 	add.w	r3, r3, #4064	; 0xfe0
 8001f26:	019b      	lsls	r3, r3, #6
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 8001f28:	4619      	mov	r1, r3
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4413      	add	r3, r2
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f003 fc85 	bl	8005848 <HAL_FLASH_Program>
	for (int i = 0; i < UFLASH_SIZE; i++)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3301      	adds	r3, #1
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	e7e7      	b.n	8001f16 <_ZN5Flash10WriteFlashEv+0x7c>
	}

	if (HAL_FLASH_Lock() != HAL_OK)
 8001f46:	f003 fd0d 	bl	8005964 <HAL_FLASH_Lock>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf14      	ite	ne
 8001f50:	2301      	movne	r3, #1
 8001f52:	2300      	moveq	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d009      	beq.n	8001f6e <_ZN5Flash10WriteFlashEv+0xd4>
	{
		HAL_FLASH_Lock();
 8001f5a:	f003 fd03 	bl	8005964 <HAL_FLASH_Lock>
		driveStatus->setError(DriveStatus::E_FLASH_ERROR);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2101      	movs	r1, #1
 8001f64:	4618      	mov	r0, r3
 8001f66:	f001 f90c 	bl	8003182 <_ZN11DriveStatus8setErrorENS_6_ERRORE>
		return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <_ZN5Flash10WriteFlashEv+0xd6>
	}

	return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>:
 */

#include "DO.h"
#include "../Tools/Delay.h"

DigitalOut::DigitalOut(GPIO_TypeDef* GPIOx_N, uint16_t GPIO_Pin_N, GPIO_TypeDef* GPIOx_P, uint16_t GPIO_Pin_P){
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	4613      	mov	r3, r2
 8001f86:	80fb      	strh	r3, [r7, #6]
	this->GPIO_Pin_N = GPIO_Pin_N;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	88fa      	ldrh	r2, [r7, #6]
 8001f8c:	809a      	strh	r2, [r3, #4]
	this->GPIOx_N = GPIOx_N;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	601a      	str	r2, [r3, #0]
	this->GPIO_Pin_N = GPIO_Pin_P;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8b3a      	ldrh	r2, [r7, #24]
 8001f98:	809a      	strh	r2, [r3, #4]
	this->GPIOx_N = GPIOx_P;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	601a      	str	r2, [r3, #0]
}
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <_ZN3LEDC1EP12GPIO_TypeDeftb>:


#include "LED.h"


LED::LED(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool outputInverted) {
 8001fae:	b480      	push	{r7}
 8001fb0:	b085      	sub	sp, #20
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	4611      	mov	r1, r2
 8001fba:	461a      	mov	r2, r3
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	80fb      	strh	r3, [r7, #6]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	717b      	strb	r3, [r7, #5]

	this->GPIO_Pin = GPIO_Pin;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	88fa      	ldrh	r2, [r7, #6]
 8001fc8:	809a      	strh	r2, [r3, #4]
	this->GPIOx = GPIOx;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	601a      	str	r2, [r3, #0]
	this->outputInverted = outputInverted;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	797a      	ldrb	r2, [r7, #5]
 8001fd4:	719a      	strb	r2, [r3, #6]
}
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_ZN3LED3OFFEv>:
}

/*
 * LED OFF method
 */
void LED::OFF() {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	//check if output is inverted
	if(outputInverted){
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	799b      	ldrb	r3, [r3, #6]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <_ZN3LED3OFFEv+0x22>
		//clear output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	889b      	ldrh	r3, [r3, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	4619      	mov	r1, r3
 8002000:	f004 f82c 	bl	800605c <HAL_GPIO_WritePin>
	}else{
		//write output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
	}
}
 8002004:	e007      	b.n	8002016 <_ZN3LED3OFFEv+0x32>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	889b      	ldrh	r3, [r3, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	4619      	mov	r1, r3
 8002012:	f004 f823 	bl	800605c <HAL_GPIO_WritePin>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <_ZN3LED6ToggleEv>:

/*
 * LED Toggle method
 */
void LED::Toggle() {
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	889b      	ldrh	r3, [r3, #4]
 800202e:	4619      	mov	r1, r3
 8002030:	4610      	mov	r0, r2
 8002032:	f004 f82b 	bl	800608c <HAL_GPIO_TogglePin>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <_ZN10RFM95_LoRaC1Ev>:
 */

#include "RFM95.h"
#include "../AppMain/AppMain.h"

RFM95_LoRa::RFM95_LoRa() :
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(0)
 8002048:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <_ZN10RFM95_LoRaC1Ev+0x34>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	615a      	str	r2, [r3, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	61da      	str	r2, [r3, #28]
{

}
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	0800ed18 	.word	0x0800ed18

08002078 <_ZN10RFM95_LoRa9selectRFMEv>:
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::selectRFM(){
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_RESET);
 8002080:	2200      	movs	r2, #0
 8002082:	2108      	movs	r1, #8
 8002084:	4803      	ldr	r0, [pc, #12]	; (8002094 <_ZN10RFM95_LoRa9selectRFMEv+0x1c>)
 8002086:	f003 ffe9 	bl	800605c <HAL_GPIO_WritePin>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	48000400 	.word	0x48000400

08002098 <_ZN10RFM95_LoRa11deselectRFMEv>:
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::deselectRFM(){
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_SET);
 80020a0:	2201      	movs	r2, #1
 80020a2:	2108      	movs	r1, #8
 80020a4:	4803      	ldr	r0, [pc, #12]	; (80020b4 <_ZN10RFM95_LoRa11deselectRFMEv+0x1c>)
 80020a6:	f003 ffd9 	bl	800605c <HAL_GPIO_WritePin>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	48000400 	.word	0x48000400

080020b8 <_ZN10RFM95_LoRa8resetRFMEv>:

void RFM95_LoRa::resetRFM(){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2110      	movs	r1, #16
 80020c4:	4808      	ldr	r0, [pc, #32]	; (80020e8 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 80020c6:	f003 ffc9 	bl	800605c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80020ca:	2001      	movs	r0, #1
 80020cc:	f002 f844 	bl	8004158 <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 80020d0:	2201      	movs	r2, #1
 80020d2:	2110      	movs	r1, #16
 80020d4:	4804      	ldr	r0, [pc, #16]	; (80020e8 <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 80020d6:	f003 ffc1 	bl	800605c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80020da:	2005      	movs	r0, #5
 80020dc:	f002 f83c 	bl	8004158 <HAL_Delay>
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	48000400 	.word	0x48000400

080020ec <_ZN10RFM95_LoRa13writeRegisterEhh>:

bool RFM95_LoRa::writeRegister(uint8_t addr, uint8_t data){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	70fb      	strb	r3, [r7, #3]
 80020f8:	4613      	mov	r3, r2
 80020fa:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002102:	b2db      	uxtb	r3, r3
 8002104:	733b      	strb	r3, [r7, #12]
 8002106:	78bb      	ldrb	r3, [r7, #2]
 8002108:	737b      	strb	r3, [r7, #13]
	selectRFM();
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ffb4 	bl	8002078 <_ZN10RFM95_LoRa9selectRFMEv>
	if(HAL_SPI_Transmit(&hspi3, (uint8_t*)buff, 2, 100) != HAL_OK){
 8002110:	f107 010c 	add.w	r1, r7, #12
 8002114:	2364      	movs	r3, #100	; 0x64
 8002116:	2202      	movs	r2, #2
 8002118:	480b      	ldr	r0, [pc, #44]	; (8002148 <_ZN10RFM95_LoRa13writeRegisterEhh+0x5c>)
 800211a:	f006 ffbc 	bl	8009096 <HAL_SPI_Transmit>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf14      	ite	ne
 8002124:	2301      	movne	r3, #1
 8002126:	2300      	moveq	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d004      	beq.n	8002138 <_ZN10RFM95_LoRa13writeRegisterEhh+0x4c>
		deselectRFM();
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ffb2 	bl	8002098 <_ZN10RFM95_LoRa11deselectRFMEv>
		return false;
 8002134:	2300      	movs	r3, #0
 8002136:	e003      	b.n	8002140 <_ZN10RFM95_LoRa13writeRegisterEhh+0x54>
	}
	deselectRFM();
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ffad 	bl	8002098 <_ZN10RFM95_LoRa11deselectRFMEv>
	return true;
 800213e:	2301      	movs	r3, #1
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	200004c0 	.word	0x200004c0

0800214c <_ZN10RFM95_LoRa12readRegisterEh>:

uint8_t RFM95_LoRa::readRegister(uint8_t addr){
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af02      	add	r7, sp, #8
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 8002158:	2300      	movs	r3, #0
 800215a:	81bb      	strh	r3, [r7, #12]
	uint8_t txData[1] = {addr};
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	723b      	strb	r3, [r7, #8]

	selectRFM();
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff ff89 	bl	8002078 <_ZN10RFM95_LoRa9selectRFMEv>
	HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 8002166:	f107 020c 	add.w	r2, r7, #12
 800216a:	f107 0108 	add.w	r1, r7, #8
 800216e:	2364      	movs	r3, #100	; 0x64
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	2302      	movs	r3, #2
 8002174:	4805      	ldr	r0, [pc, #20]	; (800218c <_ZN10RFM95_LoRa12readRegisterEh+0x40>)
 8002176:	f007 f8fc 	bl	8009372 <HAL_SPI_TransmitReceive>
	deselectRFM();
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff ff8c 	bl	8002098 <_ZN10RFM95_LoRa11deselectRFMEv>
	return rxData[1];
 8002180:	7b7b      	ldrb	r3, [r7, #13]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200004c0 	.word	0x200004c0

08002190 <_ZN10RFM95_LoRa5beginEl>:


int RFM95_LoRa::begin(long frequency){
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
 resetRFM();
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ff8c 	bl	80020b8 <_ZN10RFM95_LoRa8resetRFMEv>
  // check version
  uint8_t version = readRegister(REG_VERSION);
 80021a0:	2142      	movs	r1, #66	; 0x42
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff ffd2 	bl	800214c <_ZN10RFM95_LoRa12readRegisterEh>
 80021a8:	4603      	mov	r3, r0
 80021aa:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	2b12      	cmp	r3, #18
 80021b0:	d001      	beq.n	80021b6 <_ZN10RFM95_LoRa5beginEl+0x26>
    return 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	e02b      	b.n	800220e <_ZN10RFM95_LoRa5beginEl+0x7e>
  }
  // put in sleep mode
  sleep();
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f995 	bl	80024e6 <_ZN10RFM95_LoRa5sleepEv>
  // set frequency
  setFrequency(frequency);
 80021bc:	6839      	ldr	r1, [r7, #0]
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f9dc 	bl	800257c <_ZN10RFM95_LoRa12setFrequencyEl>
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 80021c4:	2200      	movs	r2, #0
 80021c6:	210e      	movs	r1, #14
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff ff8f 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	210f      	movs	r1, #15
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ff8a 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 80021d8:	210c      	movs	r1, #12
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ffb6 	bl	800214c <_ZN10RFM95_LoRa12readRegisterEh>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f043 0303 	orr.w	r3, r3, #3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	210c      	movs	r1, #12
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ff7d 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 80021f2:	2204      	movs	r2, #4
 80021f4:	2126      	movs	r1, #38	; 0x26
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ff78 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set output power to 17 dBm
  setTxPower(20);
 80021fc:	2201      	movs	r2, #1
 80021fe:	2114      	movs	r1, #20
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f97d 	bl	8002500 <_ZN10RFM95_LoRa10setTxPowerEii>
  // put in standby mode
  idle();
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f960 	bl	80024cc <_ZN10RFM95_LoRa4idleEv>
  return 1;
 800220c:	2301      	movs	r3, #1
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <_ZN10RFM95_LoRa11beginPacketEi>:
  sleep();
}



int RFM95_LoRa::beginPacket(int implicitHeader){
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
  // put in standby mode
  idle();
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f953 	bl	80024cc <_ZN10RFM95_LoRa4idleEv>

  if (implicitHeader) {
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <_ZN10RFM95_LoRa11beginPacketEi+0x1e>
    implicitHeaderMode();
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 fad8 	bl	80027e2 <_ZN10RFM95_LoRa18implicitHeaderModeEv>
 8002232:	e002      	b.n	800223a <_ZN10RFM95_LoRa11beginPacketEi+0x24>
  } else {
    explicitHeaderMode();
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 fabc 	bl	80027b2 <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // reset FIFO address and paload length
  writeRegister(REG_FIFO_ADDR_PTR, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	210d      	movs	r1, #13
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ff54 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_PAYLOAD_LENGTH, 0);
 8002244:	2200      	movs	r2, #0
 8002246:	2122      	movs	r1, #34	; 0x22
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff ff4f 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 800224e:	2301      	movs	r3, #1
}
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <_ZN10RFM95_LoRa9endPacketEv>:



int RFM95_LoRa::endPacket(){
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  // put in TX mode
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8002260:	2283      	movs	r2, #131	; 0x83
 8002262:	2101      	movs	r1, #1
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff41 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
  // wait for TX done
  while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 800226a:	2112      	movs	r1, #18
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff ff6d 	bl	800214c <_ZN10RFM95_LoRa12readRegisterEh>
 8002272:	4603      	mov	r3, r0
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	bf0c      	ite	eq
 800227c:	2301      	moveq	r3, #1
 800227e:	2300      	movne	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d000      	beq.n	8002288 <_ZN10RFM95_LoRa9endPacketEv+0x30>
 8002286:	e7f0      	b.n	800226a <_ZN10RFM95_LoRa9endPacketEv+0x12>

  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8002288:	2208      	movs	r2, #8
 800228a:	2112      	movs	r1, #18
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ff2d 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
  return 1;
 8002292:	2301      	movs	r3, #1
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <_ZN10RFM95_LoRa11parsePacketEi>:



int RFM95_LoRa::parsePacket(int size)

{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 80022aa:	2112      	movs	r1, #18
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff ff4d 	bl	800214c <_ZN10RFM95_LoRa12readRegisterEh>
 80022b2:	4603      	mov	r3, r0
 80022b4:	60bb      	str	r3, [r7, #8]
  if (size > 0) {
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	dd0a      	ble.n	80022d2 <_ZN10RFM95_LoRa11parsePacketEi+0x36>
    implicitHeaderMode();
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 fa90 	bl	80027e2 <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	2122      	movs	r1, #34	; 0x22
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ff0e 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
 80022d0:	e002      	b.n	80022d8 <_ZN10RFM95_LoRa11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fa6d 	bl	80027b2 <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	2112      	movs	r1, #18
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7ff ff03 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
  if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d026      	beq.n	800233e <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d121      	bne.n	800233e <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
    // received a packet
    _packetIndex = 0;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	615a      	str	r2, [r3, #20]
    // read packet length
    if (_implicitHeaderMode) {
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d006      	beq.n	8002316 <_ZN10RFM95_LoRa11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 8002308:	2122      	movs	r1, #34	; 0x22
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ff1e 	bl	800214c <_ZN10RFM95_LoRa12readRegisterEh>
 8002310:	4603      	mov	r3, r0
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	e005      	b.n	8002322 <_ZN10RFM95_LoRa11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 8002316:	2113      	movs	r1, #19
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff17 	bl	800214c <_ZN10RFM95_LoRa12readRegisterEh>
 800231e:	4603      	mov	r3, r0
 8002320:	60fb      	str	r3, [r7, #12]
    }
    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 8002322:	2110      	movs	r1, #16
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff11 	bl	800214c <_ZN10RFM95_LoRa12readRegisterEh>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	210d      	movs	r1, #13
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff fedb 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in standby mode
    idle();
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f8c8 	bl	80024cc <_ZN10RFM95_LoRa4idleEv>
 800233c:	e015      	b.n	800236a <_ZN10RFM95_LoRa11parsePacketEi+0xce>
  } else if (readRegister(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
 800233e:	2101      	movs	r1, #1
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff ff03 	bl	800214c <_ZN10RFM95_LoRa12readRegisterEh>
 8002346:	4603      	mov	r3, r0
 8002348:	2b86      	cmp	r3, #134	; 0x86
 800234a:	bf14      	ite	ne
 800234c:	2301      	movne	r3, #1
 800234e:	2300      	moveq	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <_ZN10RFM95_LoRa11parsePacketEi+0xce>
    // not currently in RX mode
    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	210d      	movs	r1, #13
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff fec6 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in single RX mode
    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8002360:	2286      	movs	r2, #134	; 0x86
 8002362:	2101      	movs	r1, #1
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff fec1 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  return packetLength;
 800236a:	68fb      	ldr	r3, [r7, #12]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <_ZN10RFM95_LoRa5writeEh>:

float RFM95_LoRa::packetSnr(){
  return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
}

size_t RFM95_LoRa::write(uint8_t byte){
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	3304      	adds	r3, #4
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	1cf9      	adds	r1, r7, #3
 800238a:	2201      	movs	r2, #1
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	4798      	blx	r3
 8002390:	4603      	mov	r3, r0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <_ZN10RFM95_LoRa5writeEPKhj>:



size_t RFM95_LoRa::write(const uint8_t *buffer, size_t size){
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 80023a6:	2122      	movs	r1, #34	; 0x22
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7ff fecf 	bl	800214c <_ZN10RFM95_LoRa12readRegisterEh>
 80023ae:	4603      	mov	r3, r0
 80023b0:	613b      	str	r3, [r7, #16]
  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	2bff      	cmp	r3, #255	; 0xff
 80023ba:	d903      	bls.n	80023c4 <_ZN10RFM95_LoRa5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80023c2:	607b      	str	r3, [r7, #4]
  }
  // write data
  for (size_t i = 0; i < size; i++) {
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d20c      	bcs.n	80023ea <_ZN10RFM95_LoRa5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	4413      	add	r3, r2
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	2100      	movs	r1, #0
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f7ff fe85 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	3301      	adds	r3, #1
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	e7ee      	b.n	80023c8 <_ZN10RFM95_LoRa5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	461a      	mov	r2, r3
 80023f8:	2122      	movs	r1, #34	; 0x22
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f7ff fe76 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
  return size;
 8002400:	687b      	ldr	r3, [r7, #4]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <_ZN10RFM95_LoRa9availableEv>:


int RFM95_LoRa::available()
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8002412:	2113      	movs	r1, #19
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff fe99 	bl	800214c <_ZN10RFM95_LoRa12readRegisterEh>
 800241a:	4603      	mov	r3, r0
 800241c:	461a      	mov	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	1ad3      	subs	r3, r2, r3
}
 8002424:	4618      	mov	r0, r3
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <_ZN10RFM95_LoRa4readEv>:



int RFM95_LoRa::read(){
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	3308      	adds	r3, #8
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	4798      	blx	r3
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	bf0c      	ite	eq
 8002446:	2301      	moveq	r3, #1
 8002448:	2300      	movne	r3, #0
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <_ZN10RFM95_LoRa4readEv+0x2a>
    return -1;
 8002450:	f04f 33ff 	mov.w	r3, #4294967295
 8002454:	e009      	b.n	800246a <_ZN10RFM95_LoRa4readEv+0x3e>
  }
  _packetIndex++;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	615a      	str	r2, [r3, #20]
  return readRegister(REG_FIFO);
 8002460:	2100      	movs	r1, #0
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff fe72 	bl	800214c <_ZN10RFM95_LoRa12readRegisterEh>
 8002468:	4603      	mov	r3, r0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <_ZN10RFM95_LoRa4peekEv>:



int RFM95_LoRa::peek(){
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  if (!available()) {
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	3308      	adds	r3, #8
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	4798      	blx	r3
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf0c      	ite	eq
 800248c:	2301      	moveq	r3, #1
 800248e:	2300      	movne	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <_ZN10RFM95_LoRa4peekEv+0x2a>
    return -1;
 8002496:	f04f 33ff 	mov.w	r3, #4294967295
 800249a:	e013      	b.n	80024c4 <_ZN10RFM95_LoRa4peekEv+0x52>
  }
  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 800249c:	210d      	movs	r1, #13
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff fe54 	bl	800214c <_ZN10RFM95_LoRa12readRegisterEh>
 80024a4:	4603      	mov	r3, r0
 80024a6:	60fb      	str	r3, [r7, #12]
  // read
  uint8_t b = readRegister(REG_FIFO);
 80024a8:	2100      	movs	r1, #0
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff fe4e 	bl	800214c <_ZN10RFM95_LoRa12readRegisterEh>
 80024b0:	4603      	mov	r3, r0
 80024b2:	72fb      	strb	r3, [r7, #11]
  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	210d      	movs	r1, #13
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff fe15 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
  return b;
 80024c2:	7afb      	ldrb	r3, [r7, #11]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <_ZN10RFM95_LoRa4idleEv>:
    explicitHeaderMode();
  }
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
}

void RFM95_LoRa::idle(){
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 80024d4:	2281      	movs	r2, #129	; 0x81
 80024d6:	2101      	movs	r1, #1
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff fe07 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <_ZN10RFM95_LoRa5sleepEv>:

void RFM95_LoRa::sleep(){
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 80024ee:	2280      	movs	r2, #128	; 0x80
 80024f0:	2101      	movs	r1, #1
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff fdfa 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <_ZN10RFM95_LoRa10setTxPowerEii>:



void RFM95_LoRa::setTxPower(int level, int outputPin){
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d116      	bne.n	8002540 <_ZN10RFM95_LoRa10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	da02      	bge.n	800251e <_ZN10RFM95_LoRa10setTxPowerEii+0x1e>
      level = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	e004      	b.n	8002528 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
    } else if (level > 14) {
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b0e      	cmp	r3, #14
 8002522:	dd01      	ble.n	8002528 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
      level = 14;
 8002524:	230e      	movs	r3, #14
 8002526:	60bb      	str	r3, [r7, #8]
    }
    writeRegister(REG_PA_CONFIG, 0x70 | level);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	b25b      	sxtb	r3, r3
 800252c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002530:	b25b      	sxtb	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	2109      	movs	r1, #9
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f7ff fdd7 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
    } else if (level > 17) {
      level = 17;
    }
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 800253e:	e018      	b.n	8002572 <_ZN10RFM95_LoRa10setTxPowerEii+0x72>
    if (level < 2) {
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b01      	cmp	r3, #1
 8002544:	dc02      	bgt.n	800254c <_ZN10RFM95_LoRa10setTxPowerEii+0x4c>
      level = 2;
 8002546:	2302      	movs	r3, #2
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	e004      	b.n	8002556 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
    } else if (level > 17) {
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b11      	cmp	r3, #17
 8002550:	dd01      	ble.n	8002556 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
      level = 17;
 8002552:	2311      	movs	r3, #17
 8002554:	60bb      	str	r3, [r7, #8]
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	3b02      	subs	r3, #2
 800255c:	b2db      	uxtb	r3, r3
 800255e:	b25b      	sxtb	r3, r3
 8002560:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002564:	b25b      	sxtb	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	2109      	movs	r1, #9
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f7ff fdbd 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <_ZN10RFM95_LoRa12setFrequencyEl>:



void RFM95_LoRa::setFrequency(long frequency){
 800257c:	b5b0      	push	{r4, r5, r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	6838      	ldr	r0, [r7, #0]
 800258a:	6108      	str	r0, [r1, #16]
  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 800258c:	6839      	ldr	r1, [r7, #0]
 800258e:	17c8      	asrs	r0, r1, #31
 8002590:	460a      	mov	r2, r1
 8002592:	4603      	mov	r3, r0
 8002594:	1355      	asrs	r5, r2, #13
 8002596:	04d4      	lsls	r4, r2, #19
 8002598:	4a1a      	ldr	r2, [pc, #104]	; (8002604 <_ZN10RFM95_LoRa12setFrequencyEl+0x88>)
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	4620      	mov	r0, r4
 80025a0:	4629      	mov	r1, r5
 80025a2:	f7fd fe13 	bl	80001cc <__aeabi_uldivmod>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 80025ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	0c02      	lsrs	r2, r0, #16
 80025bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80025c0:	0c0b      	lsrs	r3, r1, #16
 80025c2:	b2d3      	uxtb	r3, r2
 80025c4:	461a      	mov	r2, r3
 80025c6:	2106      	movs	r1, #6
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff fd8f 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 80025ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	0a02      	lsrs	r2, r0, #8
 80025dc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80025e0:	0a0b      	lsrs	r3, r1, #8
 80025e2:	b2d3      	uxtb	r3, r2
 80025e4:	461a      	mov	r2, r3
 80025e6:	2107      	movs	r1, #7
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff fd7f 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 80025ee:	7a3b      	ldrb	r3, [r7, #8]
 80025f0:	461a      	mov	r2, r3
 80025f2:	2108      	movs	r1, #8
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff fd79 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bdb0      	pop	{r4, r5, r7, pc}
 8002602:	bf00      	nop
 8002604:	01e84800 	.word	0x01e84800

08002608 <_ZN10RFM95_LoRa18setSpreadingFactorEi>:



void RFM95_LoRa::setSpreadingFactor(int sf){
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b05      	cmp	r3, #5
 8002616:	dc02      	bgt.n	800261e <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x16>
    sf = 6;
 8002618:	2306      	movs	r3, #6
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	e004      	b.n	8002628 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b0c      	cmp	r3, #12
 8002622:	dd01      	ble.n	8002628 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
    sf = 12;
 8002624:	230c      	movs	r3, #12
 8002626:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b06      	cmp	r3, #6
 800262c:	d10a      	bne.n	8002644 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 800262e:	22c5      	movs	r2, #197	; 0xc5
 8002630:	2131      	movs	r1, #49	; 0x31
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff fd5a 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 8002638:	220c      	movs	r2, #12
 800263a:	2137      	movs	r1, #55	; 0x37
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff fd55 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
 8002642:	e009      	b.n	8002658 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 8002644:	22c3      	movs	r2, #195	; 0xc3
 8002646:	2131      	movs	r1, #49	; 0x31
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff fd4f 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 800264e:	220a      	movs	r2, #10
 8002650:	2137      	movs	r1, #55	; 0x37
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff fd4a 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 8002658:	211e      	movs	r1, #30
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff fd76 	bl	800214c <_ZN10RFM95_LoRa12readRegisterEh>
 8002660:	4603      	mov	r3, r0
 8002662:	b25b      	sxtb	r3, r3
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	b25a      	sxtb	r2, r3
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	b25b      	sxtb	r3, r3
 8002670:	4313      	orrs	r3, r2
 8002672:	b25b      	sxtb	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	211e      	movs	r1, #30
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff fd36 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <_ZN10RFM95_LoRa18setSignalBandwidthEl>:


void RFM95_LoRa::setSignalBandwidth(long sbw){
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  int bw;
  if (sbw <= 7.8E3) {
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	f641 6278 	movw	r2, #7800	; 0x1e78
 8002698:	4293      	cmp	r3, r2
 800269a:	dc02      	bgt.n	80026a2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x1a>
    bw = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	e03f      	b.n	8002722 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 10.4E3) {
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	f642 02a0 	movw	r2, #10400	; 0x28a0
 80026a8:	4293      	cmp	r3, r2
 80026aa:	dc02      	bgt.n	80026b2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x2a>
    bw = 1;
 80026ac:	2301      	movs	r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	e037      	b.n	8002722 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 15.6E3) {
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 80026b8:	4293      	cmp	r3, r2
 80026ba:	dc02      	bgt.n	80026c2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x3a>
    bw = 2;
 80026bc:	2302      	movs	r3, #2
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	e02f      	b.n	8002722 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 20.8E3) {
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	f245 1240 	movw	r2, #20800	; 0x5140
 80026c8:	4293      	cmp	r3, r2
 80026ca:	dc02      	bgt.n	80026d2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x4a>
    bw = 3;
 80026cc:	2303      	movs	r3, #3
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	e027      	b.n	8002722 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 31.25E3) {
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	f647 2212 	movw	r2, #31250	; 0x7a12
 80026d8:	4293      	cmp	r3, r2
 80026da:	dc02      	bgt.n	80026e2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x5a>
    bw = 4;
 80026dc:	2304      	movs	r3, #4
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	e01f      	b.n	8002722 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 41.7E3) {
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 80026e8:	4293      	cmp	r3, r2
 80026ea:	dc02      	bgt.n	80026f2 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x6a>
    bw = 5;
 80026ec:	2305      	movs	r3, #5
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	e017      	b.n	8002722 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 62.5E3) {
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	f24f 4224 	movw	r2, #62500	; 0xf424
 80026f8:	4293      	cmp	r3, r2
 80026fa:	dc02      	bgt.n	8002702 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x7a>
    bw = 6;
 80026fc:	2306      	movs	r3, #6
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	e00f      	b.n	8002722 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 125E3) {
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	4a13      	ldr	r2, [pc, #76]	; (8002754 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xcc>)
 8002706:	4293      	cmp	r3, r2
 8002708:	dc02      	bgt.n	8002710 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x88>
    bw = 7;
 800270a:	2307      	movs	r3, #7
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	e008      	b.n	8002722 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 250E3) {
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	4a11      	ldr	r2, [pc, #68]	; (8002758 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xd0>)
 8002714:	4293      	cmp	r3, r2
 8002716:	dc02      	bgt.n	800271e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x96>
    bw = 8;
 8002718:	2308      	movs	r3, #8
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	e001      	b.n	8002722 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 800271e:	2309      	movs	r3, #9
 8002720:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 8002722:	211d      	movs	r1, #29
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff fd11 	bl	800214c <_ZN10RFM95_LoRa12readRegisterEh>
 800272a:	4603      	mov	r3, r0
 800272c:	b25b      	sxtb	r3, r3
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	b25a      	sxtb	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	b25b      	sxtb	r3, r3
 800273a:	4313      	orrs	r3, r2
 800273c:	b25b      	sxtb	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	211d      	movs	r1, #29
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff fcd1 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800274a:	bf00      	nop
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	0001e848 	.word	0x0001e848
 8002758:	0003d090 	.word	0x0003d090

0800275c <_ZN10RFM95_LoRa14setCodingRate4Ei>:



void RFM95_LoRa::setCodingRate4(int denominator){
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b04      	cmp	r3, #4
 800276a:	dc02      	bgt.n	8002772 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x16>
    denominator = 5;
 800276c:	2305      	movs	r3, #5
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	e004      	b.n	800277c <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b08      	cmp	r3, #8
 8002776:	dd01      	ble.n	800277c <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
	  denominator = 8;
 8002778:	2308      	movs	r3, #8
 800277a:	603b      	str	r3, [r7, #0]
  }
  int cr = denominator - 4;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	3b04      	subs	r3, #4
 8002780:	60fb      	str	r3, [r7, #12]
  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 8002782:	211d      	movs	r1, #29
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff fce1 	bl	800214c <_ZN10RFM95_LoRa12readRegisterEh>
 800278a:	4603      	mov	r3, r0
 800278c:	b25b      	sxtb	r3, r3
 800278e:	f023 030e 	bic.w	r3, r3, #14
 8002792:	b25a      	sxtb	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	b25b      	sxtb	r3, r3
 800279a:	4313      	orrs	r3, r2
 800279c:	b25b      	sxtb	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	211d      	movs	r1, #29
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff fca1 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <_ZN10RFM95_LoRa18explicitHeaderModeEv>:
uint8_t RFM95_LoRa::random(){
  return readRegister(REG_RSSI_WIDEBAND);
}


void RFM95_LoRa::explicitHeaderMode(){
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 80027c0:	211d      	movs	r1, #29
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff fcc2 	bl	800214c <_ZN10RFM95_LoRa12readRegisterEh>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f023 0301 	bic.w	r3, r3, #1
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	461a      	mov	r2, r3
 80027d2:	211d      	movs	r1, #29
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff fc89 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <_ZN10RFM95_LoRa18implicitHeaderModeEv>:


void RFM95_LoRa::implicitHeaderMode(){
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 80027f0:	211d      	movs	r1, #29
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff fcaa 	bl	800214c <_ZN10RFM95_LoRa12readRegisterEh>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	211d      	movs	r1, #29
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff fc71 	bl	80020ec <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <_ZN10RFM95_LoRa7InitRFMEv>:
    writeRegister(REG_FIFO_ADDR_PTR, 0);
  }
}


bool RFM95_LoRa::InitRFM(){
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]


	setFrequency(868000000);
 800281c:	4914      	ldr	r1, [pc, #80]	; (8002870 <_ZN10RFM95_LoRa7InitRFMEv+0x5c>)
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff feac 	bl	800257c <_ZN10RFM95_LoRa12setFrequencyEl>
	setTxPower(17, PA_OUTPUT_PA_BOOST_PIN);
 8002824:	2201      	movs	r2, #1
 8002826:	2111      	movs	r1, #17
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff fe69 	bl	8002500 <_ZN10RFM95_LoRa10setTxPowerEii>
	setSignalBandwidth(31.25E3);
 800282e:	f647 2112 	movw	r1, #31250	; 0x7a12
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff ff28 	bl	8002688 <_ZN10RFM95_LoRa18setSignalBandwidthEl>
	setSpreadingFactor(12);
 8002838:	210c      	movs	r1, #12
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff fee4 	bl	8002608 <_ZN10RFM95_LoRa18setSpreadingFactorEi>
	setCodingRate4(5);
 8002840:	2105      	movs	r1, #5
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ff8a 	bl	800275c <_ZN10RFM95_LoRa14setCodingRate4Ei>
	if (!begin(866E6)) {
 8002848:	490a      	ldr	r1, [pc, #40]	; (8002874 <_ZN10RFM95_LoRa7InitRFMEv+0x60>)
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff fca0 	bl	8002190 <_ZN10RFM95_LoRa5beginEl>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	bf0c      	ite	eq
 8002856:	2301      	moveq	r3, #1
 8002858:	2300      	movne	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <_ZN10RFM95_LoRa7InitRFMEv+0x50>
		return false;
 8002860:	2300      	movs	r3, #0
 8002862:	e000      	b.n	8002866 <_ZN10RFM95_LoRa7InitRFMEv+0x52>
	}
	return true;
 8002864:	2301      	movs	r3, #1
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	33bca100 	.word	0x33bca100
 8002874:	339e1c80 	.word	0x339e1c80

08002878 <_ZNK13DriveSettings16getClampingSpeedEv>:

/****************************************************************************************
 / * 	Clamping speed get/set
 ****************************************************************************************/
uint16_t DriveSettings::getClampingSpeed() const
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	return clampingSpeed;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	891b      	ldrh	r3, [r3, #8]
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <_ZN13DriveSettings16setClampingSpeedEt>:

void DriveSettings::setClampingSpeed(uint16_t clampingSpeed)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	807b      	strh	r3, [r7, #2]
	if (this->clampingSpeed != clampingSpeed)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	891b      	ldrh	r3, [r3, #8]
 80028a0:	887a      	ldrh	r2, [r7, #2]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d009      	beq.n	80028ba <_ZN13DriveSettings16setClampingSpeedEt+0x2a>
	{
		this->clampingSpeed = clampingSpeed;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	887a      	ldrh	r2, [r7, #2]
 80028aa:	811a      	strh	r2, [r3, #8]
		this->settingsChangedReg |= CLAMPING_SPEED_CHANGE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8b9b      	ldrh	r3, [r3, #28]
 80028b0:	f043 0308 	orr.w	r3, r3, #8
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	839a      	strh	r2, [r3, #28]
	}
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <_ZNK13DriveSettings17getClampingTorqueEv>:

/****************************************************************************************
 / * 	Clamping torque get/set
 ****************************************************************************************/
uint16_t DriveSettings::getClampingTorque() const
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
	return clampingTorque;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	889b      	ldrh	r3, [r3, #4]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <_ZN13DriveSettings17setClampingTorqueEt>:

void DriveSettings::setClampingTorque(uint16_t clampingTorque)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	807b      	strh	r3, [r7, #2]
	if (this->clampingTorque != clampingTorque)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	889b      	ldrh	r3, [r3, #4]
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d009      	beq.n	8002908 <_ZN13DriveSettings17setClampingTorqueEt+0x2a>
	{
		this->clampingTorque = clampingTorque;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	887a      	ldrh	r2, [r7, #2]
 80028f8:	809a      	strh	r2, [r3, #4]
		this->settingsChangedReg |= CLAMPING_TORQUE_CHANGE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	8b9b      	ldrh	r3, [r3, #28]
 80028fe:	f043 0304 	orr.w	r3, r3, #4
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	839a      	strh	r2, [r3, #28]
	}
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <_ZNK13DriveSettings12getInPosDiffEv>:

/****************************************************************************************
 / * 	clamping position difference get/set
 ****************************************************************************************/
uint16_t DriveSettings::getInPosDiff() const
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
	return inPosDiff;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	899b      	ldrh	r3, [r3, #12]
}
 8002920:	4618      	mov	r0, r3
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <_ZN13DriveSettings12setInPosDiffEt>:

void DriveSettings::setInPosDiff(uint16_t inPosDiff)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	807b      	strh	r3, [r7, #2]
	if (this->inPosDiff != inPosDiff)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	899b      	ldrh	r3, [r3, #12]
 800293c:	887a      	ldrh	r2, [r7, #2]
 800293e:	429a      	cmp	r2, r3
 8002940:	d009      	beq.n	8002956 <_ZN13DriveSettings12setInPosDiffEt+0x2a>
	{
		this->inPosDiff = inPosDiff;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	887a      	ldrh	r2, [r7, #2]
 8002946:	819a      	strh	r2, [r3, #12]
		this->settingsChangedReg |= IN_POS_DIFF_CHANGE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	8b9b      	ldrh	r3, [r3, #28]
 800294c:	f043 0320 	orr.w	r3, r3, #32
 8002950:	b29a      	uxth	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	839a      	strh	r2, [r3, #28]
	}

}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <_ZNK13DriveSettings18getOpeningDistanceEv>:

/****************************************************************************************
 / * 	opening distance get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOpeningDistance() const
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
	return openingDistance;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	89db      	ldrh	r3, [r3, #14]
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <_ZN13DriveSettings18setOpeningDistanceEt>:

void DriveSettings::setOpeningDistance(uint16_t openingDistance)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	460b      	mov	r3, r1
 8002984:	807b      	strh	r3, [r7, #2]
	if (this->openingDistance != openingDistance)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	89db      	ldrh	r3, [r3, #14]
 800298a:	887a      	ldrh	r2, [r7, #2]
 800298c:	429a      	cmp	r2, r3
 800298e:	d009      	beq.n	80029a4 <_ZN13DriveSettings18setOpeningDistanceEt+0x2a>
	{
		this->openingDistance = openingDistance;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	887a      	ldrh	r2, [r7, #2]
 8002994:	81da      	strh	r2, [r3, #14]
		this->settingsChangedReg |= OPENING_DISTANCE_CHANGE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	8b9b      	ldrh	r3, [r3, #28]
 800299a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800299e:	b29a      	uxth	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	839a      	strh	r2, [r3, #28]
	}
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <_ZNK13DriveSettings27getOverCurrentTimeThresholdEv>:

/****************************************************************************************
 / * 	overcurrent time threshold get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentTimeThreshold() const
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	return overCurrentTimeThreshold;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	8b1b      	ldrh	r3, [r3, #24]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <_ZN13DriveSettings27setOverCurrentTimeThresholdEt>:

void DriveSettings::setOverCurrentTimeThreshold(
		uint16_t overCurrentTimeThreshold)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	807b      	strh	r3, [r7, #2]
	if (this->overCurrentTimeThreshold != overCurrentTimeThreshold)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	8b1b      	ldrh	r3, [r3, #24]
 80029d8:	887a      	ldrh	r2, [r7, #2]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d009      	beq.n	80029f2 <_ZN13DriveSettings27setOverCurrentTimeThresholdEt+0x2a>
	{
		this->overCurrentTimeThreshold = overCurrentTimeThreshold;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	887a      	ldrh	r2, [r7, #2]
 80029e2:	831a      	strh	r2, [r3, #24]
		this->settingsChangedReg |= OVER_CURRENT_TIME_TH_CHANGE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	8b9b      	ldrh	r3, [r3, #28]
 80029e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	839a      	strh	r2, [r3, #28]
	}
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <_ZNK13DriveSettings21getOverCurrentWarningEv>:

/****************************************************************************************
 / * 	overcurrent warning get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentWarning() const
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
	return overCurrentWarning;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	8a9b      	ldrh	r3, [r3, #20]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <_ZN13DriveSettings21setOverCurrentWarningEt>:

void DriveSettings::setOverCurrentWarning(uint16_t overCurrentWarning)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	807b      	strh	r3, [r7, #2]
	if (this->overCurrentWarning != overCurrentWarning)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	8a9b      	ldrh	r3, [r3, #20]
 8002a26:	887a      	ldrh	r2, [r7, #2]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d009      	beq.n	8002a40 <_ZN13DriveSettings21setOverCurrentWarningEt+0x2a>
	{
		this->overCurrentWarning = overCurrentWarning;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	887a      	ldrh	r2, [r7, #2]
 8002a30:	829a      	strh	r2, [r3, #20]
		this->settingsChangedReg |= OVER_CURRENT_WARNING_CHANGE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	8b9b      	ldrh	r3, [r3, #28]
 8002a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	839a      	strh	r2, [r3, #28]
	}
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <_ZNK13DriveSettings20getSelfShutdownDelayEv>:
/****************************************************************************************
 / * 	self shutdown delay get/set
 ****************************************************************************************/
uint16_t DriveSettings::getSelfShutdownDelay() const
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	return selfShutdownDelay;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	895b      	ldrh	r3, [r3, #10]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <_ZN13DriveSettings20setSelfShutdownDelayEt>:

void DriveSettings::setSelfShutdownDelay(uint16_t selfShutdownDelay)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	807b      	strh	r3, [r7, #2]
	if (this->selfShutdownDelay != selfShutdownDelay)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	895b      	ldrh	r3, [r3, #10]
 8002a74:	887a      	ldrh	r2, [r7, #2]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d009      	beq.n	8002a8e <_ZN13DriveSettings20setSelfShutdownDelayEt+0x2a>
	{
		this->selfShutdownDelay = selfShutdownDelay;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	887a      	ldrh	r2, [r7, #2]
 8002a7e:	815a      	strh	r2, [r3, #10]
		this->settingsChangedReg |= SELF_SHUTDOWN_DELAY_CHANGE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	8b9b      	ldrh	r3, [r3, #28]
 8002a84:	f043 0310 	orr.w	r3, r3, #16
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	839a      	strh	r2, [r3, #28]
	}
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <_ZNK13DriveSettings13getTeachSpeedEv>:

/****************************************************************************************
 / * 	teach speed get/set
 ****************************************************************************************/
uint16_t DriveSettings::getTeachSpeed() const
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
	return teachSpeed;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	88db      	ldrh	r3, [r3, #6]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <_ZN13DriveSettings13setTeachSpeedEt>:

void DriveSettings::setTeachSpeed(uint16_t teachSpeed)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	807b      	strh	r3, [r7, #2]
	if (this->teachSpeed != teachSpeed)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	88db      	ldrh	r3, [r3, #6]
 8002ac2:	887a      	ldrh	r2, [r7, #2]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d009      	beq.n	8002adc <_ZN13DriveSettings13setTeachSpeedEt+0x2a>
	{
		this->teachSpeed = teachSpeed;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	887a      	ldrh	r2, [r7, #2]
 8002acc:	80da      	strh	r2, [r3, #6]
		this->settingsChangedReg |= TEACH_SPEED_CHANGE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	8b9b      	ldrh	r3, [r3, #28]
 8002ad2:	f043 0302 	orr.w	r3, r3, #2
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	839a      	strh	r2, [r3, #28]
	}
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <_ZNK13DriveSettings14getTeachTroqueEv>:
/****************************************************************************************
 / * 	teach torque get/set
 ****************************************************************************************/
uint16_t DriveSettings::getTeachTroque() const
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	return teachTroque;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	885b      	ldrh	r3, [r3, #2]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <_ZN13DriveSettings14setTeachTroqueEt>:

void DriveSettings::setTeachTroque(uint16_t teachTroque)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	807b      	strh	r3, [r7, #2]
	if (this->teachTroque != teachTroque)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	885b      	ldrh	r3, [r3, #2]
 8002b10:	887a      	ldrh	r2, [r7, #2]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d009      	beq.n	8002b2a <_ZN13DriveSettings14setTeachTroqueEt+0x2a>
	{
		this->teachTroque = teachTroque;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	887a      	ldrh	r2, [r7, #2]
 8002b1a:	805a      	strh	r2, [r3, #2]
		this->settingsChangedReg |= TEACH_TORQUE_CHANGE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	8b9b      	ldrh	r3, [r3, #28]
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	839a      	strh	r2, [r3, #28]
	}
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <_ZNK13DriveSettings20getUnderVoltageErrorEv>:
/****************************************************************************************
 / * 	undervoltage error get/set
 ****************************************************************************************/
uint16_t DriveSettings::getUnderVoltageError() const
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
	return underVoltageError;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	8a5b      	ldrh	r3, [r3, #18]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <_ZN13DriveSettings20setUnderVoltageErrorEt>:

void DriveSettings::setUnderVoltageError(uint16_t underVoltageError)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	460b      	mov	r3, r1
 8002b58:	807b      	strh	r3, [r7, #2]
	if (this->underVoltageError != underVoltageError)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	8a5b      	ldrh	r3, [r3, #18]
 8002b5e:	887a      	ldrh	r2, [r7, #2]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d009      	beq.n	8002b78 <_ZN13DriveSettings20setUnderVoltageErrorEt+0x2a>
	{
		this->underVoltageError = underVoltageError;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	887a      	ldrh	r2, [r7, #2]
 8002b68:	825a      	strh	r2, [r3, #18]
		this->settingsChangedReg |= UNDERVOLTAGE_ERROR_CHANGE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	8b9b      	ldrh	r3, [r3, #28]
 8002b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	839a      	strh	r2, [r3, #28]
	}
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <_ZNK13DriveSettings22getUnderVoltageWarningEv>:

/****************************************************************************************
 / * 	undervoltage warning get/set
 ****************************************************************************************/
uint16_t DriveSettings::getUnderVoltageWarning() const
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	return underVoltageWarning;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	8a1b      	ldrh	r3, [r3, #16]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <_ZN13DriveSettings22setUnderVoltageWarningEt>:

void DriveSettings::setUnderVoltageWarning(uint16_t underVoltageWarning)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	807b      	strh	r3, [r7, #2]
	if (this->underVoltageWarning != underVoltageWarning)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8a1b      	ldrh	r3, [r3, #16]
 8002bac:	887a      	ldrh	r2, [r7, #2]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d009      	beq.n	8002bc6 <_ZN13DriveSettings22setUnderVoltageWarningEt+0x2a>
	{
		this->underVoltageWarning = underVoltageWarning;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	887a      	ldrh	r2, [r7, #2]
 8002bb6:	821a      	strh	r2, [r3, #16]
		this->settingsChangedReg |= UNDERVOLTAGE_WARNING_CHANGE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	8b9b      	ldrh	r3, [r3, #28]
 8002bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	839a      	strh	r2, [r3, #28]
	}
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <_ZNK13DriveSettings19getOverCurrentErrorEv>:
/****************************************************************************************
 / * 	overcurrent error get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentError() const
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
	return overCurrentError;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	8adb      	ldrh	r3, [r3, #22]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <_ZN13DriveSettings19setOverCurrentErrorEt>:

void DriveSettings::setOverCurrentError(uint16_t overCurrentError)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	807b      	strh	r3, [r7, #2]
	if (this->overCurrentError != overCurrentError)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	8adb      	ldrh	r3, [r3, #22]
 8002bfa:	887a      	ldrh	r2, [r7, #2]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d009      	beq.n	8002c14 <_ZN13DriveSettings19setOverCurrentErrorEt+0x2a>
	{
		this->overCurrentError = overCurrentError;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	887a      	ldrh	r2, [r7, #2]
 8002c04:	82da      	strh	r2, [r3, #22]
		this->settingsChangedReg |= OVER_CURRENT_ERROR_CHANGE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	8b9b      	ldrh	r3, [r3, #28]
 8002c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	839a      	strh	r2, [r3, #28]
	}
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <_ZNK13DriveSettings16getDeviceAddressEv>:
/****************************************************************************************
 / * 	device address get/set
 ****************************************************************************************/
uint8_t DriveSettings::getDeviceAddress() const
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
	return deviceAddress;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <_ZN13DriveSettings16setDeviceAddressEh>:

void DriveSettings::setDeviceAddress(uint8_t deviceAddress = 0)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	70fb      	strb	r3, [r7, #3]
	this->deviceAddress = deviceAddress;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	701a      	strb	r2, [r3, #0]
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <_ZN13DriveSettings15setSaveSettingsEb>:
	this->saveSettings = false;
	return saveSettingsTemp;
}

void DriveSettings::setSaveSettings(bool saveSettings)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	70fb      	strb	r3, [r7, #3]
	this->saveSettings = saveSettings;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	769a      	strb	r2, [r3, #26]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <_ZN13DriveSettings17isSettingsChangedEv>:




bool DriveSettings::isSettingsChanged()
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
	return (settingsChangedReg != 0);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	8b9b      	ldrh	r3, [r3, #28]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf14      	ite	ne
 8002c84:	2301      	movne	r3, #1
 8002c86:	2300      	moveq	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <_ZNK13DriveSettings21getSettingsChangedRegEv>:

uint16_t DriveSettings::getSettingsChangedReg() const
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
	return this->settingsChangedReg;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	8b9b      	ldrh	r3, [r3, #28]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <_ZN13DriveSettings20ResetSettingsChangedEt>:

void DriveSettings::ResetSettingsChanged(uint16_t bit){
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	807b      	strh	r3, [r7, #2]
	settingsChangedReg &= ~bit;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	8b9b      	ldrh	r3, [r3, #28]
 8002cbe:	b21a      	sxth	r2, r3
 8002cc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	b21b      	sxth	r3, r3
 8002cc8:	4013      	ands	r3, r2
 8002cca:	b21b      	sxth	r3, r3
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	839a      	strh	r2, [r3, #28]
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <_ZN12DriveCommandC1Ev>:
 *      Author: marce
 */

#include "DriveCommand.h"

DriveCommand::DriveCommand()
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	705a      	strb	r2, [r3, #1]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	709a      	strb	r2, [r3, #2]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	70da      	strb	r2, [r3, #3]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	711a      	strb	r2, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	715a      	strb	r2, [r3, #5]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	719a      	strb	r2, [r3, #6]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	71da      	strb	r2, [r3, #7]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	721a      	strb	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	725a      	strb	r2, [r3, #9]
{
}
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <_ZN12DriveCommand7isCloseEv>:

/****************************************************************************************
 / * 	close get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isClose()
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	bool closeTemp = close;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	73fb      	strb	r3, [r7, #15]
	close = false;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
	return closeTemp;
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <_ZN12DriveCommand8setCloseEb>:

void DriveCommand::setClose(bool close)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	70fb      	strb	r3, [r7, #3]
	this->close = close;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	701a      	strb	r2, [r3, #0]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <_ZN12DriveCommand6isOpenEv>:

/****************************************************************************************
 / * 	open get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isOpen()
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
	bool openTemp = open;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	785b      	ldrb	r3, [r3, #1]
 8002d7c:	73fb      	strb	r3, [r7, #15]
	open = false;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	705a      	strb	r2, [r3, #1]
	return openTemp;
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <_ZN12DriveCommand7setOpenEb>:

void DriveCommand::setOpen(bool open)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	70fb      	strb	r3, [r7, #3]
	this->open = open;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	705a      	strb	r2, [r3, #1]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <_ZN12DriveCommand9isDisableEv>:

/****************************************************************************************
 / * 	disable get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isDisable()
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
	bool disableTemp = disable;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	799b      	ldrb	r3, [r3, #6]
 8002dbc:	73fb      	strb	r3, [r7, #15]
	disable = false;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	719a      	strb	r2, [r3, #6]
	return disableTemp;
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <_ZN12DriveCommand10setDisableEb>:

void DriveCommand::setDisable(bool disable)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	70fb      	strb	r3, [r7, #3]
	this->disable = disable;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	719a      	strb	r2, [r3, #6]
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <_ZN12DriveCommand8isEnableEv>:

/****************************************************************************************
 / * 	enable get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isEnable()
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	bool enableTemp = enable;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	791b      	ldrb	r3, [r3, #4]
 8002dfc:	73fb      	strb	r3, [r7, #15]
	enable = false;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	711a      	strb	r2, [r3, #4]
	return enableTemp;
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <_ZN12DriveCommand9setEnableEb>:

void DriveCommand::setEnable(bool enable)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	70fb      	strb	r3, [r7, #3]
	this->enable = enable;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	711a      	strb	r2, [r3, #4]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <_ZN12DriveCommand7isResetEv>:

/****************************************************************************************
 / * 	reset get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isReset()
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	bool resetTemp = reset;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	78db      	ldrb	r3, [r3, #3]
 8002e3c:	73fb      	strb	r3, [r7, #15]
	reset = false;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	70da      	strb	r2, [r3, #3]
	return resetTemp;
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <_ZN12DriveCommand8setResetEb>:

void DriveCommand::setReset(bool reset)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	70fb      	strb	r3, [r7, #3]
	this->reset = reset;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	70da      	strb	r2, [r3, #3]
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <_ZN12DriveCommand6isStopEv>:

/****************************************************************************************
 * 	stop get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isStop()
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	bool stopTemp = stop;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	795b      	ldrb	r3, [r3, #5]
 8002e7c:	73fb      	strb	r3, [r7, #15]
	stop = false;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	715a      	strb	r2, [r3, #5]
	return stopTemp;
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <_ZN12DriveCommand7setStopEb>:

void DriveCommand::setStop(bool stop)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	70fb      	strb	r3, [r7, #3]
	this->stop = stop;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	715a      	strb	r2, [r3, #5]
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <_ZN12DriveCommand7isTeachEv>:

/****************************************************************************************
 * 	teach get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isTeach()
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	bool teachTemp = teach;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	789b      	ldrb	r3, [r3, #2]
 8002ebc:	73fb      	strb	r3, [r7, #15]
	teach = false;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	709a      	strb	r2, [r3, #2]
	return teachTemp;
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <_ZN12DriveCommand8setTeachEb>:

void DriveCommand::setTeach(bool teach)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	460b      	mov	r3, r1
 8002edc:	70fb      	strb	r3, [r7, #3]
	if (this->teach != teach)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	789b      	ldrb	r3, [r3, #2]
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d002      	beq.n	8002eee <_ZN12DriveCommand8setTeachEb+0x1c>
	{
		this->teach = teach;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	78fa      	ldrb	r2, [r7, #3]
 8002eec:	709a      	strb	r2, [r3, #2]
	}

}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <_ZNK12DriveCommand16isCommandChangedEv>:
/****************************************************************************************
 * 	has commands changed get/set (read reset)
 ****************************************************************************************/

bool DriveCommand::isCommandChanged() const
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
	return (commandChangeReg != 0);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	7a5b      	ldrb	r3, [r3, #9]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	bf14      	ite	ne
 8002f0a:	2301      	movne	r3, #1
 8002f0c:	2300      	moveq	r3, #0
 8002f0e:	b2db      	uxtb	r3, r3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <_ZNK12DriveCommand20getCommandChangedRegEv>:

uint8_t DriveCommand::getCommandChangedReg() const
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
	return this->commandChangeReg;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	7a5b      	ldrb	r3, [r3, #9]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <_ZN12DriveCommand19ResetCommandChangedEh>:

void DriveCommand::ResetCommandChanged(uint8_t bit)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	70fb      	strb	r3, [r7, #3]
	this->commandChangeReg &= ~bit;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	7a5b      	ldrb	r3, [r3, #9]
 8002f44:	b25a      	sxtb	r2, r3
 8002f46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	b25b      	sxtb	r3, r3
 8002f4e:	4013      	ands	r3, r2
 8002f50:	b25b      	sxtb	r3, r3
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	725a      	strb	r2, [r3, #9]
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <_ZN11DriveStatusC1Ev>:
 *      Author: marce
 */

#include "DriveStatus.h"

DriveStatus::DriveStatus()
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	721a      	strb	r2, [r3, #8]
{
}
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <_ZN11DriveStatus7isCloseEv>:

/****************************************************************************************
 / * 	close get/set
 ****************************************************************************************/
bool DriveStatus::isClose()
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	return close;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	785b      	ldrb	r3, [r3, #1]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <_ZN11DriveStatus8setCloseEb>:

void DriveStatus::setClose(bool close)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	70fb      	strb	r3, [r7, #3]
	if (this->close != close)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	785b      	ldrb	r3, [r3, #1]
 8002fa8:	78fa      	ldrb	r2, [r7, #3]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d005      	beq.n	8002fba <_ZN11DriveStatus8setCloseEb+0x22>
	{
		this->close = close;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	705a      	strb	r2, [r3, #1]
		statusChanged = true;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	721a      	strb	r2, [r3, #8]
	}
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <_ZN11DriveStatus6isOpenEv>:

/****************************************************************************************
 / * 	open get/set
 ****************************************************************************************/
bool DriveStatus::isOpen()
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
	return open;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	789b      	ldrb	r3, [r3, #2]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <_ZN11DriveStatus7setOpenEb>:

void DriveStatus::setOpen(bool open)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	70fb      	strb	r3, [r7, #3]
	if (this->open != open)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	789b      	ldrb	r3, [r3, #2]
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d005      	beq.n	8003000 <_ZN11DriveStatus7setOpenEb+0x22>
	{
		this->open = open;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	709a      	strb	r2, [r3, #2]
		statusChanged = true;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	721a      	strb	r2, [r3, #8]
	}
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <_ZN11DriveStatus9isDisableEv>:

/****************************************************************************************
 / * 	disable get/set
 ****************************************************************************************/
bool DriveStatus::isDisable()
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	return disable;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	79db      	ldrb	r3, [r3, #7]
}
 8003018:	4618      	mov	r0, r3
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <_ZN11DriveStatus10setDisableEb>:

void DriveStatus::setDisable(bool disable)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	70fb      	strb	r3, [r7, #3]
	if (this->disable != disable)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	79db      	ldrb	r3, [r3, #7]
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	429a      	cmp	r2, r3
 8003038:	d005      	beq.n	8003046 <_ZN11DriveStatus10setDisableEb+0x22>
	{
		this->disable = disable;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	71da      	strb	r2, [r3, #7]
		statusChanged = true;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	721a      	strb	r2, [r3, #8]
	}
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <_ZN11DriveStatus8isEnableEv>:

/****************************************************************************************
 / * 	enable get/set
 ****************************************************************************************/
bool DriveStatus::isEnable()
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
	return enable;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	795b      	ldrb	r3, [r3, #5]
}
 800305e:	4618      	mov	r0, r3
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <_ZN11DriveStatus9setEnableEb>:

void DriveStatus::setEnable(bool enable)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	460b      	mov	r3, r1
 8003074:	70fb      	strb	r3, [r7, #3]
	if (this->enable != enable)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	795b      	ldrb	r3, [r3, #5]
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	429a      	cmp	r2, r3
 800307e:	d005      	beq.n	800308c <_ZN11DriveStatus9setEnableEb+0x22>
	{
		this->enable = enable;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	715a      	strb	r2, [r3, #5]
		statusChanged = true;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	721a      	strb	r2, [r3, #8]
	}
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <_ZN11DriveStatus7isResetEv>:

/****************************************************************************************
 / * 	reset get/set
 ****************************************************************************************/
bool DriveStatus::isReset()
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
	return reset;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	791b      	ldrb	r3, [r3, #4]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <_ZN11DriveStatus8setResetEb>:

void DriveStatus::setReset(bool reset)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	70fb      	strb	r3, [r7, #3]
	if (this->reset != reset)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	791b      	ldrb	r3, [r3, #4]
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d005      	beq.n	80030d2 <_ZN11DriveStatus8setResetEb+0x22>
	{
		this->reset = reset;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	711a      	strb	r2, [r3, #4]
		statusChanged = true;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	721a      	strb	r2, [r3, #8]
	}
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <_ZN11DriveStatus6isStopEv>:

/****************************************************************************************
 / * 	stop get/set
 /****************************************************************************************/
bool DriveStatus::isStop()
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
	return stop;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	799b      	ldrb	r3, [r3, #6]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <_ZN11DriveStatus7setStopEb>:

void DriveStatus::setStop(bool stop)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	460b      	mov	r3, r1
 8003100:	70fb      	strb	r3, [r7, #3]
	if (this->stop != stop)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	799b      	ldrb	r3, [r3, #6]
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	429a      	cmp	r2, r3
 800310a:	d005      	beq.n	8003118 <_ZN11DriveStatus7setStopEb+0x22>
	{
		this->stop = stop;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	719a      	strb	r2, [r3, #6]
		statusChanged = true;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	721a      	strb	r2, [r3, #8]
	}
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <_ZN11DriveStatus7isTeachEv>:

/****************************************************************************************
 / * 	teach get/set
 /****************************************************************************************/
bool DriveStatus::isTeach()
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
	return teach;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	78db      	ldrb	r3, [r3, #3]
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <_ZN11DriveStatus8setTeachEb>:

void DriveStatus::setTeach(bool teach)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	70fb      	strb	r3, [r7, #3]
	if (this->teach != teach)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	78db      	ldrb	r3, [r3, #3]
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	429a      	cmp	r2, r3
 8003150:	d005      	beq.n	800315e <_ZN11DriveStatus8setTeachEb+0x22>
	{
		this->teach = teach;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	70da      	strb	r2, [r3, #3]
		statusChanged = true;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	721a      	strb	r2, [r3, #8]
	}
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <_ZN11DriveStatus8getErrorEv>:

/****************************************************************************************
 / * 	write config get/set
 ****************************************************************************************/
DriveStatus::_ERROR DriveStatus::getError()
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
	return this->error;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	781b      	ldrb	r3, [r3, #0]
}
 8003176:	4618      	mov	r0, r3
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <_ZN11DriveStatus8setErrorENS_6_ERRORE>:

void DriveStatus::setError(_ERROR error)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	460b      	mov	r3, r1
 800318c:	70fb      	strb	r3, [r7, #3]
	if (this->error = error)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	701a      	strb	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	bf14      	ite	ne
 800319c:	2301      	movne	r3, #1
 800319e:	2300      	moveq	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <_ZN11DriveStatus8setErrorENS_6_ERRORE+0x2a>
	{
		statusChanged = true;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	721a      	strb	r2, [r3, #8]
	}
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <_ZN11TaskHandler11UpdateTasksEv>:

#include "TaskHandler.h"
#include "gpio.h"

//update tasks, should be called every 1ms
void TaskHandler::UpdateTasks() {
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

	//1ms

	//2ms
	if(counter % 2 == 0){
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	899b      	ldrh	r3, [r3, #12]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d102      	bne.n	80031d2 <_ZN11TaskHandler11UpdateTasksEv+0x1a>
		adcUpdateTask = true;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	70da      	strb	r2, [r3, #3]
	}


	//15ms
	if(counter % 15 == 0){
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	899a      	ldrh	r2, [r3, #12]
 80031d6:	4b2c      	ldr	r3, [pc, #176]	; (8003288 <_ZN11TaskHandler11UpdateTasksEv+0xd0>)
 80031d8:	fba3 1302 	umull	r1, r3, r3, r2
 80031dc:	08d9      	lsrs	r1, r3, #3
 80031de:	460b      	mov	r3, r1
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	1a5b      	subs	r3, r3, r1
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d102      	bne.n	80031f2 <_ZN11TaskHandler11UpdateTasksEv+0x3a>
		ioUpdateTask = true;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	709a      	strb	r2, [r3, #2]
	}



	//100ms
	if(counter % 100 == 0){
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	899b      	ldrh	r3, [r3, #12]
 80031f6:	4a25      	ldr	r2, [pc, #148]	; (800328c <_ZN11TaskHandler11UpdateTasksEv+0xd4>)
 80031f8:	fba2 1203 	umull	r1, r2, r2, r3
 80031fc:	0952      	lsrs	r2, r2, #5
 80031fe:	2164      	movs	r1, #100	; 0x64
 8003200:	fb01 f202 	mul.w	r2, r1, r2
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d102      	bne.n	8003212 <_ZN11TaskHandler11UpdateTasksEv+0x5a>
		errorTask = true;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
	}


	//500ms
	if(counter % 500 == 0){
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	899b      	ldrh	r3, [r3, #12]
 8003216:	4a1e      	ldr	r2, [pc, #120]	; (8003290 <_ZN11TaskHandler11UpdateTasksEv+0xd8>)
 8003218:	fba2 1203 	umull	r1, r2, r2, r3
 800321c:	0952      	lsrs	r2, r2, #5
 800321e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003222:	fb01 f202 	mul.w	r2, r1, r2
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d105      	bne.n	800323a <_ZN11TaskHandler11UpdateTasksEv+0x82>
		ledUpdateTask = true;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	711a      	strb	r2, [r3, #4]
		comTask = true;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	705a      	strb	r2, [r3, #1]
	}


	//1000ms
	if(counter % 1000 == 0){
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	899b      	ldrh	r3, [r3, #12]
 800323e:	4a14      	ldr	r2, [pc, #80]	; (8003290 <_ZN11TaskHandler11UpdateTasksEv+0xd8>)
 8003240:	fba2 1203 	umull	r1, r2, r2, r3
 8003244:	0992      	lsrs	r2, r2, #6
 8003246:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800324a:	fb01 f202 	mul.w	r2, r1, r2
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d102      	bne.n	800325c <_ZN11TaskHandler11UpdateTasksEv+0xa4>
		saveTask = true;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	715a      	strb	r2, [r3, #5]
	}



	//increment counter
	if(counter > 2999){
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	899b      	ldrh	r3, [r3, #12]
 8003260:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003264:	4293      	cmp	r3, r2
 8003266:	d903      	bls.n	8003270 <_ZN11TaskHandler11UpdateTasksEv+0xb8>
		counter = 1;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	819a      	strh	r2, [r3, #12]
	}else{
		counter++;
	}

}
 800326e:	e005      	b.n	800327c <_ZN11TaskHandler11UpdateTasksEv+0xc4>
		counter++;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	899b      	ldrh	r3, [r3, #12]
 8003274:	3301      	adds	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	819a      	strh	r2, [r3, #12]
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	88888889 	.word	0x88888889
 800328c:	51eb851f 	.word	0x51eb851f
 8003290:	10624dd3 	.word	0x10624dd3

08003294 <_ZN11TaskHandler9isComTaskEv>:



bool TaskHandler::isComTask()  {
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
	bool comTaskTemp = (comTask & comTaskEnable);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	785b      	ldrb	r3, [r3, #1]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	461a      	mov	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	79db      	ldrb	r3, [r3, #7]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf14      	ite	ne
 80032b0:	2301      	movne	r3, #1
 80032b2:	2300      	moveq	r3, #0
 80032b4:	73fb      	strb	r3, [r7, #15]
	comTask = false;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	705a      	strb	r2, [r3, #1]
	return comTaskTemp;
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <_ZN11TaskHandler10isSaveTaskEv>:

bool TaskHandler::isSaveTask(){
 80032ca:	b480      	push	{r7}
 80032cc:	b085      	sub	sp, #20
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
	bool saveTaskTemp = (saveTask & saveTaskEnable);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	795b      	ldrb	r3, [r3, #5]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	7adb      	ldrb	r3, [r3, #11]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	bf14      	ite	ne
 80032e6:	2301      	movne	r3, #1
 80032e8:	2300      	moveq	r3, #0
 80032ea:	73fb      	strb	r3, [r7, #15]
	saveTask = false;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	715a      	strb	r2, [r3, #5]
	return saveTaskTemp;
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <_ZN11TaskHandler11isErrorTaskEv>:


bool TaskHandler::isErrorTask()  {
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
	bool errorTaskTemp = (errorTask & errorTaskEnable);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	461a      	mov	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	799b      	ldrb	r3, [r3, #6]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	bf14      	ite	ne
 800331c:	2301      	movne	r3, #1
 800331e:	2300      	moveq	r3, #0
 8003320:	73fb      	strb	r3, [r7, #15]
	errorTask = false;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]
	return errorTaskTemp;
 8003328:	7bfb      	ldrb	r3, [r7, #15]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <_ZN11TaskHandler14isIoUpdateTaskEv>:

bool TaskHandler::isIoUpdateTask()  {
 8003336:	b480      	push	{r7}
 8003338:	b085      	sub	sp, #20
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
	bool ioUpdateTaskTemp = (ioUpdateTask & ioUpdateTaskEnable);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	789b      	ldrb	r3, [r3, #2]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	7a1b      	ldrb	r3, [r3, #8]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	4013      	ands	r3, r2
 800334e:	2b00      	cmp	r3, #0
 8003350:	bf14      	ite	ne
 8003352:	2301      	movne	r3, #1
 8003354:	2300      	moveq	r3, #0
 8003356:	73fb      	strb	r3, [r7, #15]
	ioUpdateTask = false;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	709a      	strb	r2, [r3, #2]
	return ioUpdateTaskTemp;
 800335e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <_ZN11TaskHandler15isLEDUpdateTaskEv>:
	adcUpdateTask = false;
	return adcUpdateTaskTemp;
}


bool TaskHandler::isLEDUpdateTask(){
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
	bool ledUpdateTaskTemp = (ledUpdateTask & ledUpdateTaskEnable);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	791b      	ldrb	r3, [r3, #4]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	7a9b      	ldrb	r3, [r3, #10]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf14      	ite	ne
 8003388:	2301      	movne	r3, #1
 800338a:	2300      	moveq	r3, #0
 800338c:	73fb      	strb	r3, [r7, #15]
	ledUpdateTask = false;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	711a      	strb	r2, [r3, #4]
	return ledUpdateTaskTemp;
 8003394:	7bfb      	ldrb	r3, [r7, #15]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <_ZN5Delay8DWT_InitEv>:


/*
 * Mikrosenkunden delay Initialisieren
 */
void Delay::DWT_Init(void) {
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <_ZN5Delay8DWT_InitEv+0x2c>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4a08      	ldr	r2, [pc, #32]	; (80033d0 <_ZN5Delay8DWT_InitEv+0x2c>)
 80033ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033b2:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 80033b4:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <_ZN5Delay8DWT_InitEv+0x30>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <_ZN5Delay8DWT_InitEv+0x30>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a05      	ldr	r2, [pc, #20]	; (80033d4 <_ZN5Delay8DWT_InitEv+0x30>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	6013      	str	r3, [r2, #0]
}
 80033c6:	bf00      	nop
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	e000edf0 	.word	0xe000edf0
 80033d4:	e0001000 	.word	0xe0001000

080033d8 <_ZN13TypeConverter12uint16ToByteEPhth>:
	int16_t byte2 = byteArray[1]<<8;
	return(byte1 + byte2);
}


void TypeConverter::uint16ToByte(uint8_t* byteArray, uint16_t data, uint8_t offset){
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	807b      	strh	r3, [r7, #2]
 80033e4:	4613      	mov	r3, r2
 80033e6:	707b      	strb	r3, [r7, #1]
	byteArray[offset] = data;
 80033e8:	787b      	ldrb	r3, [r7, #1]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	887a      	ldrh	r2, [r7, #2]
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	701a      	strb	r2, [r3, #0]
	byteArray[offset+1] = data>>8;
 80033f4:	887b      	ldrh	r3, [r7, #2]
 80033f6:	0a1b      	lsrs	r3, r3, #8
 80033f8:	b299      	uxth	r1, r3
 80033fa:	787b      	ldrb	r3, [r7, #1]
 80033fc:	3301      	adds	r3, #1
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	4413      	add	r3, r2
 8003402:	b2ca      	uxtb	r2, r1
 8003404:	701a      	strb	r2, [r3, #0]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800341a:	463b      	mov	r3, r7
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	60da      	str	r2, [r3, #12]
 8003426:	611a      	str	r2, [r3, #16]
 8003428:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800342a:	4b29      	ldr	r3, [pc, #164]	; (80034d0 <MX_ADC1_Init+0xbc>)
 800342c:	4a29      	ldr	r2, [pc, #164]	; (80034d4 <MX_ADC1_Init+0xc0>)
 800342e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003430:	4b27      	ldr	r3, [pc, #156]	; (80034d0 <MX_ADC1_Init+0xbc>)
 8003432:	2200      	movs	r2, #0
 8003434:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003436:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <MX_ADC1_Init+0xbc>)
 8003438:	2200      	movs	r2, #0
 800343a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800343c:	4b24      	ldr	r3, [pc, #144]	; (80034d0 <MX_ADC1_Init+0xbc>)
 800343e:	2200      	movs	r2, #0
 8003440:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003442:	4b23      	ldr	r3, [pc, #140]	; (80034d0 <MX_ADC1_Init+0xbc>)
 8003444:	2200      	movs	r2, #0
 8003446:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003448:	4b21      	ldr	r3, [pc, #132]	; (80034d0 <MX_ADC1_Init+0xbc>)
 800344a:	2204      	movs	r2, #4
 800344c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800344e:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <MX_ADC1_Init+0xbc>)
 8003450:	2200      	movs	r2, #0
 8003452:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003454:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <MX_ADC1_Init+0xbc>)
 8003456:	2200      	movs	r2, #0
 8003458:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800345a:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <MX_ADC1_Init+0xbc>)
 800345c:	2201      	movs	r2, #1
 800345e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003460:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <MX_ADC1_Init+0xbc>)
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <MX_ADC1_Init+0xbc>)
 800346a:	2200      	movs	r2, #0
 800346c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <MX_ADC1_Init+0xbc>)
 8003470:	2200      	movs	r2, #0
 8003472:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003474:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <MX_ADC1_Init+0xbc>)
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800347c:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <MX_ADC1_Init+0xbc>)
 800347e:	2200      	movs	r2, #0
 8003480:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003482:	4b13      	ldr	r3, [pc, #76]	; (80034d0 <MX_ADC1_Init+0xbc>)
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800348a:	4811      	ldr	r0, [pc, #68]	; (80034d0 <MX_ADC1_Init+0xbc>)
 800348c:	f001 f814 	bl	80044b8 <HAL_ADC_Init>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8003496:	f000 fb8b 	bl	8003bb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <MX_ADC1_Init+0xc4>)
 800349c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800349e:	2306      	movs	r3, #6
 80034a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80034a6:	237f      	movs	r3, #127	; 0x7f
 80034a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80034aa:	2304      	movs	r3, #4
 80034ac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034b2:	463b      	mov	r3, r7
 80034b4:	4619      	mov	r1, r3
 80034b6:	4806      	ldr	r0, [pc, #24]	; (80034d0 <MX_ADC1_Init+0xbc>)
 80034b8:	f001 f946 	bl	8004748 <HAL_ADC_ConfigChannel>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80034c2:	f000 fb75 	bl	8003bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80034c6:	bf00      	nop
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000224 	.word	0x20000224
 80034d4:	50040000 	.word	0x50040000
 80034d8:	2e300800 	.word	0x2e300800

080034dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b0a2      	sub	sp, #136	; 0x88
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034f4:	f107 0314 	add.w	r3, r7, #20
 80034f8:	2260      	movs	r2, #96	; 0x60
 80034fa:	2100      	movs	r1, #0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f00b fab5 	bl	800ea6c <memset>
  if(adcHandle->Instance==ADC1)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a3b      	ldr	r2, [pc, #236]	; (80035f4 <HAL_ADC_MspInit+0x118>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d16e      	bne.n	80035ea <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800350c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003510:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003512:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003516:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003518:	2301      	movs	r3, #1
 800351a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800351c:	2301      	movs	r3, #1
 800351e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003520:	2310      	movs	r3, #16
 8003522:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003524:	2307      	movs	r3, #7
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003528:	2302      	movs	r3, #2
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800352c:	2302      	movs	r3, #2
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003534:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003536:	f107 0314 	add.w	r3, r7, #20
 800353a:	4618      	mov	r0, r3
 800353c:	f005 f9cc 	bl	80088d8 <HAL_RCCEx_PeriphCLKConfig>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8003546:	f000 fb33 	bl	8003bb0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800354a:	4b2b      	ldr	r3, [pc, #172]	; (80035f8 <HAL_ADC_MspInit+0x11c>)
 800354c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354e:	4a2a      	ldr	r2, [pc, #168]	; (80035f8 <HAL_ADC_MspInit+0x11c>)
 8003550:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003556:	4b28      	ldr	r3, [pc, #160]	; (80035f8 <HAL_ADC_MspInit+0x11c>)
 8003558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003562:	4b25      	ldr	r3, [pc, #148]	; (80035f8 <HAL_ADC_MspInit+0x11c>)
 8003564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003566:	4a24      	ldr	r2, [pc, #144]	; (80035f8 <HAL_ADC_MspInit+0x11c>)
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800356e:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <HAL_ADC_MspInit+0x11c>)
 8003570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800357a:	23c0      	movs	r3, #192	; 0xc0
 800357c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800357e:	230b      	movs	r3, #11
 8003580:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003582:	2300      	movs	r3, #0
 8003584:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003586:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800358a:	4619      	mov	r1, r3
 800358c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003590:	f002 fbd2 	bl	8005d38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003594:	4b19      	ldr	r3, [pc, #100]	; (80035fc <HAL_ADC_MspInit+0x120>)
 8003596:	4a1a      	ldr	r2, [pc, #104]	; (8003600 <HAL_ADC_MspInit+0x124>)
 8003598:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800359a:	4b18      	ldr	r3, [pc, #96]	; (80035fc <HAL_ADC_MspInit+0x120>)
 800359c:	2200      	movs	r2, #0
 800359e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035a0:	4b16      	ldr	r3, [pc, #88]	; (80035fc <HAL_ADC_MspInit+0x120>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80035a6:	4b15      	ldr	r3, [pc, #84]	; (80035fc <HAL_ADC_MspInit+0x120>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80035ac:	4b13      	ldr	r3, [pc, #76]	; (80035fc <HAL_ADC_MspInit+0x120>)
 80035ae:	2280      	movs	r2, #128	; 0x80
 80035b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035b2:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_ADC_MspInit+0x120>)
 80035b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035ba:	4b10      	ldr	r3, [pc, #64]	; (80035fc <HAL_ADC_MspInit+0x120>)
 80035bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80035c2:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <HAL_ADC_MspInit+0x120>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80035c8:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <HAL_ADC_MspInit+0x120>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80035ce:	480b      	ldr	r0, [pc, #44]	; (80035fc <HAL_ADC_MspInit+0x120>)
 80035d0:	f001 ffd2 	bl	8005578 <HAL_DMA_Init>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80035da:	f000 fae9 	bl	8003bb0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a06      	ldr	r2, [pc, #24]	; (80035fc <HAL_ADC_MspInit+0x120>)
 80035e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80035e4:	4a05      	ldr	r2, [pc, #20]	; (80035fc <HAL_ADC_MspInit+0x120>)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80035ea:	bf00      	nop
 80035ec:	3788      	adds	r7, #136	; 0x88
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	50040000 	.word	0x50040000
 80035f8:	40021000 	.word	0x40021000
 80035fc:	20000288 	.word	0x20000288
 8003600:	40020008 	.word	0x40020008

08003604 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003608:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <MX_CRC_Init+0x3c>)
 800360a:	4a0e      	ldr	r2, [pc, #56]	; (8003644 <MX_CRC_Init+0x40>)
 800360c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800360e:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <MX_CRC_Init+0x3c>)
 8003610:	2200      	movs	r2, #0
 8003612:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003614:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <MX_CRC_Init+0x3c>)
 8003616:	2200      	movs	r2, #0
 8003618:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800361a:	4b09      	ldr	r3, [pc, #36]	; (8003640 <MX_CRC_Init+0x3c>)
 800361c:	2200      	movs	r2, #0
 800361e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003620:	4b07      	ldr	r3, [pc, #28]	; (8003640 <MX_CRC_Init+0x3c>)
 8003622:	2200      	movs	r2, #0
 8003624:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <MX_CRC_Init+0x3c>)
 8003628:	2201      	movs	r2, #1
 800362a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800362c:	4804      	ldr	r0, [pc, #16]	; (8003640 <MX_CRC_Init+0x3c>)
 800362e:	f001 fd7d 	bl	800512c <HAL_CRC_Init>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003638:	f000 faba 	bl	8003bb0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800363c:	bf00      	nop
 800363e:	bd80      	pop	{r7, pc}
 8003640:	200002d0 	.word	0x200002d0
 8003644:	40023000 	.word	0x40023000

08003648 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a0a      	ldr	r2, [pc, #40]	; (8003680 <HAL_CRC_MspInit+0x38>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d10b      	bne.n	8003672 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800365a:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <HAL_CRC_MspInit+0x3c>)
 800365c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800365e:	4a09      	ldr	r2, [pc, #36]	; (8003684 <HAL_CRC_MspInit+0x3c>)
 8003660:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003664:	6493      	str	r3, [r2, #72]	; 0x48
 8003666:	4b07      	ldr	r3, [pc, #28]	; (8003684 <HAL_CRC_MspInit+0x3c>)
 8003668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800366a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003672:	bf00      	nop
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40023000 	.word	0x40023000
 8003684:	40021000 	.word	0x40021000

08003688 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08a      	sub	sp, #40	; 0x28
 800368c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800368e:	1d3b      	adds	r3, r7, #4
 8003690:	2224      	movs	r2, #36	; 0x24
 8003692:	2100      	movs	r1, #0
 8003694:	4618      	mov	r0, r3
 8003696:	f00b f9e9 	bl	800ea6c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800369a:	4b17      	ldr	r3, [pc, #92]	; (80036f8 <MX_DAC1_Init+0x70>)
 800369c:	4a17      	ldr	r2, [pc, #92]	; (80036fc <MX_DAC1_Init+0x74>)
 800369e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80036a0:	4815      	ldr	r0, [pc, #84]	; (80036f8 <MX_DAC1_Init+0x70>)
 80036a2:	f001 fe2d 	bl	8005300 <HAL_DAC_Init>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80036ac:	f000 fa80 	bl	8003bb0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80036b0:	2300      	movs	r3, #0
 80036b2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80036c4:	1d3b      	adds	r3, r7, #4
 80036c6:	2200      	movs	r2, #0
 80036c8:	4619      	mov	r1, r3
 80036ca:	480b      	ldr	r0, [pc, #44]	; (80036f8 <MX_DAC1_Init+0x70>)
 80036cc:	f001 fe3a 	bl	8005344 <HAL_DAC_ConfigChannel>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80036d6:	f000 fa6b 	bl	8003bb0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80036da:	1d3b      	adds	r3, r7, #4
 80036dc:	2210      	movs	r2, #16
 80036de:	4619      	mov	r1, r3
 80036e0:	4805      	ldr	r0, [pc, #20]	; (80036f8 <MX_DAC1_Init+0x70>)
 80036e2:	f001 fe2f 	bl	8005344 <HAL_DAC_ConfigChannel>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80036ec:	f000 fa60 	bl	8003bb0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80036f0:	bf00      	nop
 80036f2:	3728      	adds	r7, #40	; 0x28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	200002f4 	.word	0x200002f4
 80036fc:	40007400 	.word	0x40007400

08003700 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08a      	sub	sp, #40	; 0x28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003708:	f107 0314 	add.w	r3, r7, #20
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a40      	ldr	r2, [pc, #256]	; (8003820 <HAL_DAC_MspInit+0x120>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d17a      	bne.n	8003818 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003722:	4b40      	ldr	r3, [pc, #256]	; (8003824 <HAL_DAC_MspInit+0x124>)
 8003724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003726:	4a3f      	ldr	r2, [pc, #252]	; (8003824 <HAL_DAC_MspInit+0x124>)
 8003728:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800372c:	6593      	str	r3, [r2, #88]	; 0x58
 800372e:	4b3d      	ldr	r3, [pc, #244]	; (8003824 <HAL_DAC_MspInit+0x124>)
 8003730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003732:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800373a:	4b3a      	ldr	r3, [pc, #232]	; (8003824 <HAL_DAC_MspInit+0x124>)
 800373c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373e:	4a39      	ldr	r2, [pc, #228]	; (8003824 <HAL_DAC_MspInit+0x124>)
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003746:	4b37      	ldr	r3, [pc, #220]	; (8003824 <HAL_DAC_MspInit+0x124>)
 8003748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003752:	2330      	movs	r3, #48	; 0x30
 8003754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003756:	2303      	movs	r3, #3
 8003758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375a:	2300      	movs	r3, #0
 800375c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800375e:	f107 0314 	add.w	r3, r7, #20
 8003762:	4619      	mov	r1, r3
 8003764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003768:	f002 fae6 	bl	8005d38 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800376c:	4b2e      	ldr	r3, [pc, #184]	; (8003828 <HAL_DAC_MspInit+0x128>)
 800376e:	4a2f      	ldr	r2, [pc, #188]	; (800382c <HAL_DAC_MspInit+0x12c>)
 8003770:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8003772:	4b2d      	ldr	r3, [pc, #180]	; (8003828 <HAL_DAC_MspInit+0x128>)
 8003774:	2206      	movs	r2, #6
 8003776:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003778:	4b2b      	ldr	r3, [pc, #172]	; (8003828 <HAL_DAC_MspInit+0x128>)
 800377a:	2210      	movs	r2, #16
 800377c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800377e:	4b2a      	ldr	r3, [pc, #168]	; (8003828 <HAL_DAC_MspInit+0x128>)
 8003780:	2200      	movs	r2, #0
 8003782:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003784:	4b28      	ldr	r3, [pc, #160]	; (8003828 <HAL_DAC_MspInit+0x128>)
 8003786:	2280      	movs	r2, #128	; 0x80
 8003788:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800378a:	4b27      	ldr	r3, [pc, #156]	; (8003828 <HAL_DAC_MspInit+0x128>)
 800378c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003790:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003792:	4b25      	ldr	r3, [pc, #148]	; (8003828 <HAL_DAC_MspInit+0x128>)
 8003794:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003798:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 800379a:	4b23      	ldr	r3, [pc, #140]	; (8003828 <HAL_DAC_MspInit+0x128>)
 800379c:	2200      	movs	r2, #0
 800379e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80037a0:	4b21      	ldr	r3, [pc, #132]	; (8003828 <HAL_DAC_MspInit+0x128>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80037a6:	4820      	ldr	r0, [pc, #128]	; (8003828 <HAL_DAC_MspInit+0x128>)
 80037a8:	f001 fee6 	bl	8005578 <HAL_DMA_Init>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80037b2:	f000 f9fd 	bl	8003bb0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a1b      	ldr	r2, [pc, #108]	; (8003828 <HAL_DAC_MspInit+0x128>)
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	4a1a      	ldr	r2, [pc, #104]	; (8003828 <HAL_DAC_MspInit+0x128>)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 80037c2:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <HAL_DAC_MspInit+0x130>)
 80037c4:	4a1b      	ldr	r2, [pc, #108]	; (8003834 <HAL_DAC_MspInit+0x134>)
 80037c6:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 80037c8:	4b19      	ldr	r3, [pc, #100]	; (8003830 <HAL_DAC_MspInit+0x130>)
 80037ca:	2205      	movs	r2, #5
 80037cc:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037ce:	4b18      	ldr	r3, [pc, #96]	; (8003830 <HAL_DAC_MspInit+0x130>)
 80037d0:	2210      	movs	r2, #16
 80037d2:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80037d4:	4b16      	ldr	r3, [pc, #88]	; (8003830 <HAL_DAC_MspInit+0x130>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80037da:	4b15      	ldr	r3, [pc, #84]	; (8003830 <HAL_DAC_MspInit+0x130>)
 80037dc:	2280      	movs	r2, #128	; 0x80
 80037de:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037e0:	4b13      	ldr	r3, [pc, #76]	; (8003830 <HAL_DAC_MspInit+0x130>)
 80037e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037e6:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037e8:	4b11      	ldr	r3, [pc, #68]	; (8003830 <HAL_DAC_MspInit+0x130>)
 80037ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ee:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_NORMAL;
 80037f0:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <HAL_DAC_MspInit+0x130>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80037f6:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <HAL_DAC_MspInit+0x130>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 80037fc:	480c      	ldr	r0, [pc, #48]	; (8003830 <HAL_DAC_MspInit+0x130>)
 80037fe:	f001 febb 	bl	8005578 <HAL_DMA_Init>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8003808:	f000 f9d2 	bl	8003bb0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a08      	ldr	r2, [pc, #32]	; (8003830 <HAL_DAC_MspInit+0x130>)
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	4a07      	ldr	r2, [pc, #28]	; (8003830 <HAL_DAC_MspInit+0x130>)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8003818:	bf00      	nop
 800381a:	3728      	adds	r7, #40	; 0x28
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40007400 	.word	0x40007400
 8003824:	40021000 	.word	0x40021000
 8003828:	20000308 	.word	0x20000308
 800382c:	40020030 	.word	0x40020030
 8003830:	20000350 	.word	0x20000350
 8003834:	40020044 	.word	0x40020044

08003838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800383e:	4b14      	ldr	r3, [pc, #80]	; (8003890 <MX_DMA_Init+0x58>)
 8003840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003842:	4a13      	ldr	r2, [pc, #76]	; (8003890 <MX_DMA_Init+0x58>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	6493      	str	r3, [r2, #72]	; 0x48
 800384a:	4b11      	ldr	r3, [pc, #68]	; (8003890 <MX_DMA_Init+0x58>)
 800384c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	607b      	str	r3, [r7, #4]
 8003854:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003856:	2200      	movs	r2, #0
 8003858:	2100      	movs	r1, #0
 800385a:	200b      	movs	r0, #11
 800385c:	f001 fc2f 	bl	80050be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003860:	200b      	movs	r0, #11
 8003862:	f001 fc48 	bl	80050f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003866:	2200      	movs	r2, #0
 8003868:	2100      	movs	r1, #0
 800386a:	200d      	movs	r0, #13
 800386c:	f001 fc27 	bl	80050be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003870:	200d      	movs	r0, #13
 8003872:	f001 fc40 	bl	80050f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003876:	2200      	movs	r2, #0
 8003878:	2100      	movs	r1, #0
 800387a:	200e      	movs	r0, #14
 800387c:	f001 fc1f 	bl	80050be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003880:	200e      	movs	r0, #14
 8003882:	f001 fc38 	bl	80050f6 <HAL_NVIC_EnableIRQ>

}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000

08003894 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	; 0x28
 8003898:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800389a:	f107 0314 	add.w	r3, r7, #20
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	605a      	str	r2, [r3, #4]
 80038a4:	609a      	str	r2, [r3, #8]
 80038a6:	60da      	str	r2, [r3, #12]
 80038a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038aa:	4b67      	ldr	r3, [pc, #412]	; (8003a48 <MX_GPIO_Init+0x1b4>)
 80038ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ae:	4a66      	ldr	r2, [pc, #408]	; (8003a48 <MX_GPIO_Init+0x1b4>)
 80038b0:	f043 0304 	orr.w	r3, r3, #4
 80038b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038b6:	4b64      	ldr	r3, [pc, #400]	; (8003a48 <MX_GPIO_Init+0x1b4>)
 80038b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038c2:	4b61      	ldr	r3, [pc, #388]	; (8003a48 <MX_GPIO_Init+0x1b4>)
 80038c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c6:	4a60      	ldr	r2, [pc, #384]	; (8003a48 <MX_GPIO_Init+0x1b4>)
 80038c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038ce:	4b5e      	ldr	r3, [pc, #376]	; (8003a48 <MX_GPIO_Init+0x1b4>)
 80038d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038da:	4b5b      	ldr	r3, [pc, #364]	; (8003a48 <MX_GPIO_Init+0x1b4>)
 80038dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038de:	4a5a      	ldr	r2, [pc, #360]	; (8003a48 <MX_GPIO_Init+0x1b4>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038e6:	4b58      	ldr	r3, [pc, #352]	; (8003a48 <MX_GPIO_Init+0x1b4>)
 80038e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	60bb      	str	r3, [r7, #8]
 80038f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f2:	4b55      	ldr	r3, [pc, #340]	; (8003a48 <MX_GPIO_Init+0x1b4>)
 80038f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f6:	4a54      	ldr	r2, [pc, #336]	; (8003a48 <MX_GPIO_Init+0x1b4>)
 80038f8:	f043 0302 	orr.w	r3, r3, #2
 80038fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038fe:	4b52      	ldr	r3, [pc, #328]	; (8003a48 <MX_GPIO_Init+0x1b4>)
 8003900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	607b      	str	r3, [r7, #4]
 8003908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 800390a:	2200      	movs	r2, #0
 800390c:	f24c 31d0 	movw	r1, #50128	; 0xc3d0
 8003910:	484e      	ldr	r0, [pc, #312]	; (8003a4c <MX_GPIO_Init+0x1b8>)
 8003912:	f002 fba3 	bl	800605c <HAL_GPIO_WritePin>
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 8003916:	2200      	movs	r2, #0
 8003918:	f64e 41ff 	movw	r1, #60671	; 0xecff
 800391c:	484c      	ldr	r0, [pc, #304]	; (8003a50 <MX_GPIO_Init+0x1bc>)
 800391e:	f002 fb9d 	bl	800605c <HAL_GPIO_WritePin>
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DI_OUT_1_P_Pin|LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8003922:	2200      	movs	r2, #0
 8003924:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800392c:	f002 fb96 	bl	800605c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003936:	2303      	movs	r3, #3
 8003938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800393e:	f107 0314 	add.w	r3, r7, #20
 8003942:	4619      	mov	r1, r3
 8003944:	4841      	ldr	r0, [pc, #260]	; (8003a4c <MX_GPIO_Init+0x1b8>)
 8003946:	f002 f9f7 	bl	8005d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 800394a:	f24c 33d0 	movw	r3, #50128	; 0xc3d0
 800394e:	617b      	str	r3, [r7, #20]
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003950:	2301      	movs	r3, #1
 8003952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003954:	2300      	movs	r3, #0
 8003956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003958:	2300      	movs	r3, #0
 800395a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800395c:	f107 0314 	add.w	r3, r7, #20
 8003960:	4619      	mov	r1, r3
 8003962:	483a      	ldr	r0, [pc, #232]	; (8003a4c <MX_GPIO_Init+0x1b8>)
 8003964:	f002 f9e8 	bl	8005d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8003968:	2309      	movs	r3, #9
 800396a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800396c:	2303      	movs	r3, #3
 800396e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003974:	f107 0314 	add.w	r3, r7, #20
 8003978:	4619      	mov	r1, r3
 800397a:	4836      	ldr	r0, [pc, #216]	; (8003a54 <MX_GPIO_Init+0x1c0>)
 800397c:	f002 f9dc 	bl	8005d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DI_1_Pin;
 8003980:	2302      	movs	r3, #2
 8003982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003984:	2300      	movs	r3, #0
 8003986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003988:	2300      	movs	r3, #0
 800398a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DI_1_GPIO_Port, &GPIO_InitStruct);
 800398c:	f107 0314 	add.w	r3, r7, #20
 8003990:	4619      	mov	r1, r3
 8003992:	4830      	ldr	r0, [pc, #192]	; (8003a54 <MX_GPIO_Init+0x1c0>)
 8003994:	f002 f9d0 	bl	8005d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_2_Pin|DI_3_Pin|DI_4_Pin|DI_5_Pin;
 8003998:	230f      	movs	r3, #15
 800399a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800399c:	2300      	movs	r3, #0
 800399e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a0:	2300      	movs	r3, #0
 80039a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039a4:	f107 0314 	add.w	r3, r7, #20
 80039a8:	4619      	mov	r1, r3
 80039aa:	4828      	ldr	r0, [pc, #160]	; (8003a4c <MX_GPIO_Init+0x1b8>)
 80039ac:	f002 f9c4 	bl	8005d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DI_6_Pin|DI_7_Pin|DI_8_Pin;
 80039b0:	2307      	movs	r3, #7
 80039b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039bc:	f107 0314 	add.w	r3, r7, #20
 80039c0:	4619      	mov	r1, r3
 80039c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039c6:	f002 f9b7 	bl	8005d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_15;
 80039ca:	f248 0308 	movw	r3, #32776	; 0x8008
 80039ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039d0:	2303      	movs	r3, #3
 80039d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d8:	f107 0314 	add.w	r3, r7, #20
 80039dc:	4619      	mov	r1, r3
 80039de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039e2:	f002 f9a9 	bl	8005d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 80039e6:	f64e 43ff 	movw	r3, #60671	; 0xecff
 80039ea:	617b      	str	r3, [r7, #20]
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ec:	2301      	movs	r3, #1
 80039ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f4:	2300      	movs	r3, #0
 80039f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039f8:	f107 0314 	add.w	r3, r7, #20
 80039fc:	4619      	mov	r1, r3
 80039fe:	4814      	ldr	r0, [pc, #80]	; (8003a50 <MX_GPIO_Init+0x1bc>)
 8003a00:	f002 f99a 	bl	8005d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 8003a04:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8003a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a12:	f107 0314 	add.w	r3, r7, #20
 8003a16:	4619      	mov	r1, r3
 8003a18:	480d      	ldr	r0, [pc, #52]	; (8003a50 <MX_GPIO_Init+0x1bc>)
 8003a1a:	f002 f98d 	bl	8005d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DI_OUT_1_P_Pin|LED_R_Pin|LED_G_Pin;
 8003a1e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a24:	2301      	movs	r3, #1
 8003a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a30:	f107 0314 	add.w	r3, r7, #20
 8003a34:	4619      	mov	r1, r3
 8003a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a3a:	f002 f97d 	bl	8005d38 <HAL_GPIO_Init>

}
 8003a3e:	bf00      	nop
 8003a40:	3728      	adds	r7, #40	; 0x28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	48000800 	.word	0x48000800
 8003a50:	48000400 	.word	0x48000400
 8003a54:	48001c00 	.word	0x48001c00

08003a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a5c:	f000 fb07 	bl	800406e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a60:	f000 f818 	bl	8003a94 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a64:	f7ff ff16 	bl	8003894 <MX_GPIO_Init>
  MX_DMA_Init();
 8003a68:	f7ff fee6 	bl	8003838 <MX_DMA_Init>
  MX_ADC1_Init();
 8003a6c:	f7ff fcd2 	bl	8003414 <MX_ADC1_Init>
  MX_DAC1_Init();
 8003a70:	f7ff fe0a 	bl	8003688 <MX_DAC1_Init>
  MX_SPI3_Init();
 8003a74:	f000 f8c0 	bl	8003bf8 <MX_SPI3_Init>
  MX_CRC_Init();
 8003a78:	f7ff fdc4 	bl	8003604 <MX_CRC_Init>
  MX_TIM6_Init();
 8003a7c:	f000 fa28 	bl	8003ed0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003a80:	f000 fa5c 	bl	8003f3c <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 8003a84:	f00a fa1c 	bl	800dec0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  appMain.Startup();
 8003a88:	4801      	ldr	r0, [pc, #4]	; (8003a90 <main+0x38>)
 8003a8a:	f7fc fefb 	bl	8000884 <_ZN7AppMain7StartupEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003a8e:	e7fe      	b.n	8003a8e <main+0x36>
 8003a90:	20000398 	.word	0x20000398

08003a94 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b096      	sub	sp, #88	; 0x58
 8003a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a9a:	f107 0314 	add.w	r3, r7, #20
 8003a9e:	2244      	movs	r2, #68	; 0x44
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f00a ffe2 	bl	800ea6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003aa8:	463b      	mov	r3, r7
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	605a      	str	r2, [r3, #4]
 8003ab0:	609a      	str	r2, [r3, #8]
 8003ab2:	60da      	str	r2, [r3, #12]
 8003ab4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003ab6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003aba:	f004 f8a7 	bl	8007c0c <HAL_PWREx_ControlVoltageScaling>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	bf14      	ite	ne
 8003ac4:	2301      	movne	r3, #1
 8003ac6:	2300      	moveq	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8003ace:	f000 f86f 	bl	8003bb0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8003ad2:	2330      	movs	r3, #48	; 0x30
 8003ad4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003ada:	2301      	movs	r3, #1
 8003adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003ae2:	2360      	movs	r3, #96	; 0x60
 8003ae4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003aea:	2301      	movs	r3, #1
 8003aec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003aee:	2301      	movs	r3, #1
 8003af0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8003af2:	2324      	movs	r3, #36	; 0x24
 8003af4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003af6:	2307      	movs	r3, #7
 8003af8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003afa:	2302      	movs	r3, #2
 8003afc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003afe:	2302      	movs	r3, #2
 8003b00:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b02:	f107 0314 	add.w	r3, r7, #20
 8003b06:	4618      	mov	r0, r3
 8003b08:	f004 f8e6 	bl	8007cd8 <HAL_RCC_OscConfig>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	bf14      	ite	ne
 8003b12:	2301      	movne	r3, #1
 8003b14:	2300      	moveq	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003b1c:	f000 f848 	bl	8003bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b20:	230f      	movs	r3, #15
 8003b22:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b24:	2303      	movs	r3, #3
 8003b26:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b30:	2300      	movs	r3, #0
 8003b32:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003b34:	463b      	mov	r3, r7
 8003b36:	2104      	movs	r1, #4
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f004 fce1 	bl	8008500 <HAL_RCC_ClockConfig>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	bf14      	ite	ne
 8003b44:	2301      	movne	r3, #1
 8003b46:	2300      	moveq	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 8003b4e:	f000 f82f 	bl	8003bb0 <Error_Handler>
  }
}
 8003b52:	bf00      	nop
 8003b54:	3758      	adds	r7, #88	; 0x58
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <HAL_TIM_PeriodElapsedCallback>:


/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d102      	bne.n	8003b74 <HAL_TIM_PeriodElapsedCallback+0x18>
		appMain.taskStatus.UpdateTasks();
 8003b6e:	4804      	ldr	r0, [pc, #16]	; (8003b80 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003b70:	f7ff fb22 	bl	80031b8 <_ZN11TaskHandler11UpdateTasksEv>
	}
}
 8003b74:	bf00      	nop
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40001400 	.word	0x40001400
 8003b80:	200003b8 	.word	0x200003b8

08003b84 <USB_CDC_RX_Interrupt>:


void USB_CDC_RX_Interrupt(uint8_t *data, uint32_t length)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
	appMain.usbCOM->Receive(data, length);
 8003b8e:	4b07      	ldr	r3, [pc, #28]	; (8003bac <USB_CDC_RX_Interrupt+0x28>)
 8003b90:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8003b92:	4b06      	ldr	r3, [pc, #24]	; (8003bac <USB_CDC_RX_Interrupt+0x28>)
 8003b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4798      	blx	r3
}
 8003ba4:	bf00      	nop
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20000398 	.word	0x20000398

08003bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bb4:	b672      	cpsid	i
}
 8003bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bb8:	e7fe      	b.n	8003bb8 <Error_Handler+0x8>
	...

08003bbc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d107      	bne.n	8003bdc <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d102      	bne.n	8003bdc <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 8003bd6:	4803      	ldr	r0, [pc, #12]	; (8003be4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003bd8:	f7fc fdcb 	bl	8000772 <_ZN7AppMainC1Ev>
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20000398 	.word	0x20000398

08003be8 <_GLOBAL__sub_I_appMain>:
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003bf0:	2001      	movs	r0, #1
 8003bf2:	f7ff ffe3 	bl	8003bbc <_Z41__static_initialization_and_destruction_0ii>
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <MX_SPI3_Init+0x74>)
 8003bfe:	4a1c      	ldr	r2, [pc, #112]	; (8003c70 <MX_SPI3_Init+0x78>)
 8003c00:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003c02:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <MX_SPI3_Init+0x74>)
 8003c04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c08:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003c0a:	4b18      	ldr	r3, [pc, #96]	; (8003c6c <MX_SPI3_Init+0x74>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c10:	4b16      	ldr	r3, [pc, #88]	; (8003c6c <MX_SPI3_Init+0x74>)
 8003c12:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003c16:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c18:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <MX_SPI3_Init+0x74>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c1e:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <MX_SPI3_Init+0x74>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003c24:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <MX_SPI3_Init+0x74>)
 8003c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c2a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003c2c:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <MX_SPI3_Init+0x74>)
 8003c2e:	2218      	movs	r2, #24
 8003c30:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c32:	4b0e      	ldr	r3, [pc, #56]	; (8003c6c <MX_SPI3_Init+0x74>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c38:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <MX_SPI3_Init+0x74>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <MX_SPI3_Init+0x74>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003c44:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <MX_SPI3_Init+0x74>)
 8003c46:	2207      	movs	r2, #7
 8003c48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003c4a:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <MX_SPI3_Init+0x74>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c50:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <MX_SPI3_Init+0x74>)
 8003c52:	2208      	movs	r2, #8
 8003c54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003c56:	4805      	ldr	r0, [pc, #20]	; (8003c6c <MX_SPI3_Init+0x74>)
 8003c58:	f005 f97a 	bl	8008f50 <HAL_SPI_Init>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003c62:	f7ff ffa5 	bl	8003bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	200004c0 	.word	0x200004c0
 8003c70:	40003c00 	.word	0x40003c00

08003c74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08a      	sub	sp, #40	; 0x28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c7c:	f107 0314 	add.w	r3, r7, #20
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	605a      	str	r2, [r3, #4]
 8003c86:	609a      	str	r2, [r3, #8]
 8003c88:	60da      	str	r2, [r3, #12]
 8003c8a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a17      	ldr	r2, [pc, #92]	; (8003cf0 <HAL_SPI_MspInit+0x7c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d128      	bne.n	8003ce8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003c96:	4b17      	ldr	r3, [pc, #92]	; (8003cf4 <HAL_SPI_MspInit+0x80>)
 8003c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9a:	4a16      	ldr	r2, [pc, #88]	; (8003cf4 <HAL_SPI_MspInit+0x80>)
 8003c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ca0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ca2:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <HAL_SPI_MspInit+0x80>)
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cae:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <HAL_SPI_MspInit+0x80>)
 8003cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb2:	4a10      	ldr	r2, [pc, #64]	; (8003cf4 <HAL_SPI_MspInit+0x80>)
 8003cb4:	f043 0304 	orr.w	r3, r3, #4
 8003cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cba:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <HAL_SPI_MspInit+0x80>)
 8003cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003cc6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003cd8:	2306      	movs	r3, #6
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cdc:	f107 0314 	add.w	r3, r7, #20
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4805      	ldr	r0, [pc, #20]	; (8003cf8 <HAL_SPI_MspInit+0x84>)
 8003ce4:	f002 f828 	bl	8005d38 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003ce8:	bf00      	nop
 8003cea:	3728      	adds	r7, #40	; 0x28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40003c00 	.word	0x40003c00
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	48000800 	.word	0x48000800

08003cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d02:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <HAL_MspInit+0x44>)
 8003d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d06:	4a0e      	ldr	r2, [pc, #56]	; (8003d40 <HAL_MspInit+0x44>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	6613      	str	r3, [r2, #96]	; 0x60
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <HAL_MspInit+0x44>)
 8003d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	607b      	str	r3, [r7, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d1a:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <HAL_MspInit+0x44>)
 8003d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1e:	4a08      	ldr	r2, [pc, #32]	; (8003d40 <HAL_MspInit+0x44>)
 8003d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d24:	6593      	str	r3, [r2, #88]	; 0x58
 8003d26:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <HAL_MspInit+0x44>)
 8003d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	603b      	str	r3, [r7, #0]
 8003d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40021000 	.word	0x40021000

08003d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d48:	e7fe      	b.n	8003d48 <NMI_Handler+0x4>

08003d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d4e:	e7fe      	b.n	8003d4e <HardFault_Handler+0x4>

08003d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d54:	e7fe      	b.n	8003d54 <MemManage_Handler+0x4>

08003d56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d56:	b480      	push	{r7}
 8003d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d5a:	e7fe      	b.n	8003d5a <BusFault_Handler+0x4>

08003d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d60:	e7fe      	b.n	8003d60 <UsageFault_Handler+0x4>

08003d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d62:	b480      	push	{r7}
 8003d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d66:	bf00      	nop
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d74:	bf00      	nop
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d82:	bf00      	nop
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d90:	f000 f9c2 	bl	8004118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d94:	bf00      	nop
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d9c:	4802      	ldr	r0, [pc, #8]	; (8003da8 <DMA1_Channel1_IRQHandler+0x10>)
 8003d9e:	f001 fca3 	bl	80056e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003da2:	bf00      	nop
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000288 	.word	0x20000288

08003dac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8003db0:	4802      	ldr	r0, [pc, #8]	; (8003dbc <DMA1_Channel3_IRQHandler+0x10>)
 8003db2:	f001 fc99 	bl	80056e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003db6:	bf00      	nop
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000308 	.word	0x20000308

08003dc0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8003dc4:	4802      	ldr	r0, [pc, #8]	; (8003dd0 <DMA1_Channel4_IRQHandler+0x10>)
 8003dc6:	f001 fc8f 	bl	80056e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000350 	.word	0x20000350

08003dd4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003dd8:	4802      	ldr	r0, [pc, #8]	; (8003de4 <TIM7_IRQHandler+0x10>)
 8003dda:	f005 feed 	bl	8009bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000574 	.word	0x20000574

08003de8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003dec:	4802      	ldr	r0, [pc, #8]	; (8003df8 <USB_IRQHandler+0x10>)
 8003dee:	f002 faa0 	bl	8006332 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8003df2:	bf00      	nop
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000c90 	.word	0x20000c90

08003dfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
	return 1;
 8003e00:	2301      	movs	r3, #1
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <_kill>:

int _kill(int pid, int sig)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003e16:	f00a fdf7 	bl	800ea08 <__errno>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2216      	movs	r2, #22
 8003e1e:	601a      	str	r2, [r3, #0]
	return -1;
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <_exit>:

void _exit (int status)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e34:	f04f 31ff 	mov.w	r1, #4294967295
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ffe7 	bl	8003e0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e3e:	e7fe      	b.n	8003e3e <_exit+0x12>

08003e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e48:	4a14      	ldr	r2, [pc, #80]	; (8003e9c <_sbrk+0x5c>)
 8003e4a:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <_sbrk+0x60>)
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e54:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <_sbrk+0x64>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d102      	bne.n	8003e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e5c:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <_sbrk+0x64>)
 8003e5e:	4a12      	ldr	r2, [pc, #72]	; (8003ea8 <_sbrk+0x68>)
 8003e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e62:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <_sbrk+0x64>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4413      	add	r3, r2
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d207      	bcs.n	8003e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e70:	f00a fdca 	bl	800ea08 <__errno>
 8003e74:	4603      	mov	r3, r0
 8003e76:	220c      	movs	r2, #12
 8003e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7e:	e009      	b.n	8003e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e80:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <_sbrk+0x64>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e86:	4b07      	ldr	r3, [pc, #28]	; (8003ea4 <_sbrk+0x64>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	4a05      	ldr	r2, [pc, #20]	; (8003ea4 <_sbrk+0x64>)
 8003e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e92:	68fb      	ldr	r3, [r7, #12]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20010000 	.word	0x20010000
 8003ea0:	00000400 	.word	0x00000400
 8003ea4:	20000524 	.word	0x20000524
 8003ea8:	200011c0 	.word	0x200011c0

08003eac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003eb0:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <SystemInit+0x20>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb6:	4a05      	ldr	r2, [pc, #20]	; (8003ecc <SystemInit+0x20>)
 8003eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003ec0:	bf00      	nop
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	e000ed00 	.word	0xe000ed00

08003ed0 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ed6:	1d3b      	adds	r3, r7, #4
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	605a      	str	r2, [r3, #4]
 8003ede:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003ee0:	4b14      	ldr	r3, [pc, #80]	; (8003f34 <MX_TIM6_Init+0x64>)
 8003ee2:	4a15      	ldr	r2, [pc, #84]	; (8003f38 <MX_TIM6_Init+0x68>)
 8003ee4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8003ee6:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <MX_TIM6_Init+0x64>)
 8003ee8:	220a      	movs	r2, #10
 8003eea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eec:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <MX_TIM6_Init+0x64>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16000;
 8003ef2:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <MX_TIM6_Init+0x64>)
 8003ef4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003ef8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003efa:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <MX_TIM6_Init+0x64>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003f00:	480c      	ldr	r0, [pc, #48]	; (8003f34 <MX_TIM6_Init+0x64>)
 8003f02:	f005 fdad 	bl	8009a60 <HAL_TIM_Base_Init>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003f0c:	f7ff fe50 	bl	8003bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f10:	2300      	movs	r3, #0
 8003f12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003f18:	1d3b      	adds	r3, r7, #4
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4805      	ldr	r0, [pc, #20]	; (8003f34 <MX_TIM6_Init+0x64>)
 8003f1e:	f005 fff7 	bl	8009f10 <HAL_TIMEx_MasterConfigSynchronization>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003f28:	f7ff fe42 	bl	8003bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003f2c:	bf00      	nop
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20000528 	.word	0x20000528
 8003f38:	40001000 	.word	0x40001000

08003f3c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f42:	1d3b      	adds	r3, r7, #4
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	605a      	str	r2, [r3, #4]
 8003f4a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003f4c:	4b14      	ldr	r3, [pc, #80]	; (8003fa0 <MX_TIM7_Init+0x64>)
 8003f4e:	4a15      	ldr	r2, [pc, #84]	; (8003fa4 <MX_TIM7_Init+0x68>)
 8003f50:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10;
 8003f52:	4b13      	ldr	r3, [pc, #76]	; (8003fa0 <MX_TIM7_Init+0x64>)
 8003f54:	220a      	movs	r2, #10
 8003f56:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f58:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <MX_TIM7_Init+0x64>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7199;
 8003f5e:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <MX_TIM7_Init+0x64>)
 8003f60:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003f64:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f66:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <MX_TIM7_Init+0x64>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003f6c:	480c      	ldr	r0, [pc, #48]	; (8003fa0 <MX_TIM7_Init+0x64>)
 8003f6e:	f005 fd77 	bl	8009a60 <HAL_TIM_Base_Init>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003f78:	f7ff fe1a 	bl	8003bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003f7c:	2320      	movs	r3, #32
 8003f7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f80:	2300      	movs	r3, #0
 8003f82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003f84:	1d3b      	adds	r3, r7, #4
 8003f86:	4619      	mov	r1, r3
 8003f88:	4805      	ldr	r0, [pc, #20]	; (8003fa0 <MX_TIM7_Init+0x64>)
 8003f8a:	f005 ffc1 	bl	8009f10 <HAL_TIMEx_MasterConfigSynchronization>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003f94:	f7ff fe0c 	bl	8003bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003f98:	bf00      	nop
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000574 	.word	0x20000574
 8003fa4:	40001400 	.word	0x40001400

08003fa8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a16      	ldr	r2, [pc, #88]	; (8004010 <HAL_TIM_Base_MspInit+0x68>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d10c      	bne.n	8003fd4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003fba:	4b16      	ldr	r3, [pc, #88]	; (8004014 <HAL_TIM_Base_MspInit+0x6c>)
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	4a15      	ldr	r2, [pc, #84]	; (8004014 <HAL_TIM_Base_MspInit+0x6c>)
 8003fc0:	f043 0310 	orr.w	r3, r3, #16
 8003fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8003fc6:	4b13      	ldr	r3, [pc, #76]	; (8004014 <HAL_TIM_Base_MspInit+0x6c>)
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003fd2:	e018      	b.n	8004006 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a0f      	ldr	r2, [pc, #60]	; (8004018 <HAL_TIM_Base_MspInit+0x70>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d113      	bne.n	8004006 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003fde:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <HAL_TIM_Base_MspInit+0x6c>)
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe2:	4a0c      	ldr	r2, [pc, #48]	; (8004014 <HAL_TIM_Base_MspInit+0x6c>)
 8003fe4:	f043 0320 	orr.w	r3, r3, #32
 8003fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8003fea:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <HAL_TIM_Base_MspInit+0x6c>)
 8003fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	2037      	movs	r0, #55	; 0x37
 8003ffc:	f001 f85f 	bl	80050be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004000:	2037      	movs	r0, #55	; 0x37
 8004002:	f001 f878 	bl	80050f6 <HAL_NVIC_EnableIRQ>
}
 8004006:	bf00      	nop
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40001000 	.word	0x40001000
 8004014:	40021000 	.word	0x40021000
 8004018:	40001400 	.word	0x40001400

0800401c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800401c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004054 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004020:	f7ff ff44 	bl	8003eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004024:	480c      	ldr	r0, [pc, #48]	; (8004058 <LoopForever+0x6>)
  ldr r1, =_edata
 8004026:	490d      	ldr	r1, [pc, #52]	; (800405c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004028:	4a0d      	ldr	r2, [pc, #52]	; (8004060 <LoopForever+0xe>)
  movs r3, #0
 800402a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800402c:	e002      	b.n	8004034 <LoopCopyDataInit>

0800402e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800402e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004032:	3304      	adds	r3, #4

08004034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004038:	d3f9      	bcc.n	800402e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800403a:	4a0a      	ldr	r2, [pc, #40]	; (8004064 <LoopForever+0x12>)
  ldr r4, =_ebss
 800403c:	4c0a      	ldr	r4, [pc, #40]	; (8004068 <LoopForever+0x16>)
  movs r3, #0
 800403e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004040:	e001      	b.n	8004046 <LoopFillZerobss>

08004042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004044:	3204      	adds	r2, #4

08004046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004048:	d3fb      	bcc.n	8004042 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800404a:	f00a fce3 	bl	800ea14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800404e:	f7ff fd03 	bl	8003a58 <main>

08004052 <LoopForever>:

LoopForever:
    b LoopForever
 8004052:	e7fe      	b.n	8004052 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004054:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800405c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8004060:	0800ed80 	.word	0x0800ed80
  ldr r2, =_sbss
 8004064:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8004068:	200011c0 	.word	0x200011c0

0800406c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800406c:	e7fe      	b.n	800406c <ADC1_IRQHandler>

0800406e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004078:	2003      	movs	r0, #3
 800407a:	f001 f815 	bl	80050a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800407e:	200f      	movs	r0, #15
 8004080:	f000 f80e 	bl	80040a0 <HAL_InitTick>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	71fb      	strb	r3, [r7, #7]
 800408e:	e001      	b.n	8004094 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004090:	f7ff fe34 	bl	8003cfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004094:	79fb      	ldrb	r3, [r7, #7]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80040ac:	4b17      	ldr	r3, [pc, #92]	; (800410c <HAL_InitTick+0x6c>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d023      	beq.n	80040fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80040b4:	4b16      	ldr	r3, [pc, #88]	; (8004110 <HAL_InitTick+0x70>)
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	4b14      	ldr	r3, [pc, #80]	; (800410c <HAL_InitTick+0x6c>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	4619      	mov	r1, r3
 80040be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80040c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 f821 	bl	8005112 <HAL_SYSTICK_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10f      	bne.n	80040f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b0f      	cmp	r3, #15
 80040da:	d809      	bhi.n	80040f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040dc:	2200      	movs	r2, #0
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	f04f 30ff 	mov.w	r0, #4294967295
 80040e4:	f000 ffeb 	bl	80050be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80040e8:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <HAL_InitTick+0x74>)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	e007      	b.n	8004100 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
 80040f4:	e004      	b.n	8004100 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
 80040fa:	e001      	b.n	8004100 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004100:	7bfb      	ldrb	r3, [r7, #15]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000008 	.word	0x20000008
 8004110:	20000000 	.word	0x20000000
 8004114:	20000004 	.word	0x20000004

08004118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800411c:	4b06      	ldr	r3, [pc, #24]	; (8004138 <HAL_IncTick+0x20>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	4b06      	ldr	r3, [pc, #24]	; (800413c <HAL_IncTick+0x24>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4413      	add	r3, r2
 8004128:	4a04      	ldr	r2, [pc, #16]	; (800413c <HAL_IncTick+0x24>)
 800412a:	6013      	str	r3, [r2, #0]
}
 800412c:	bf00      	nop
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	20000008 	.word	0x20000008
 800413c:	200005c0 	.word	0x200005c0

08004140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  return uwTick;
 8004144:	4b03      	ldr	r3, [pc, #12]	; (8004154 <HAL_GetTick+0x14>)
 8004146:	681b      	ldr	r3, [r3, #0]
}
 8004148:	4618      	mov	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	200005c0 	.word	0x200005c0

08004158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004160:	f7ff ffee 	bl	8004140 <HAL_GetTick>
 8004164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004170:	d005      	beq.n	800417e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004172:	4b0a      	ldr	r3, [pc, #40]	; (800419c <HAL_Delay+0x44>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4413      	add	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800417e:	bf00      	nop
 8004180:	f7ff ffde 	bl	8004140 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	429a      	cmp	r2, r3
 800418e:	d8f7      	bhi.n	8004180 <HAL_Delay+0x28>
  {
  }
}
 8004190:	bf00      	nop
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000008 	.word	0x20000008

080041a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	609a      	str	r2, [r3, #8]
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	609a      	str	r2, [r3, #8]
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3360      	adds	r3, #96	; 0x60
 800421a:	461a      	mov	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	4b08      	ldr	r3, [pc, #32]	; (800424c <LL_ADC_SetOffset+0x44>)
 800422a:	4013      	ands	r3, r2
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	4313      	orrs	r3, r2
 8004238:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	03fff000 	.word	0x03fff000

08004250 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3360      	adds	r3, #96	; 0x60
 800425e:	461a      	mov	r2, r3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004270:	4618      	mov	r0, r3
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	3360      	adds	r3, #96	; 0x60
 800428c:	461a      	mov	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	431a      	orrs	r2, r3
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80042a6:	bf00      	nop
 80042a8:	371c      	adds	r7, #28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b087      	sub	sp, #28
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	3330      	adds	r3, #48	; 0x30
 80042c2:	461a      	mov	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	0a1b      	lsrs	r3, r3, #8
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	4413      	add	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	211f      	movs	r1, #31
 80042de:	fa01 f303 	lsl.w	r3, r1, r3
 80042e2:	43db      	mvns	r3, r3
 80042e4:	401a      	ands	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	0e9b      	lsrs	r3, r3, #26
 80042ea:	f003 011f 	and.w	r1, r3, #31
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	fa01 f303 	lsl.w	r3, r1, r3
 80042f8:	431a      	orrs	r2, r3
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80042fe:	bf00      	nop
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800430a:	b480      	push	{r7}
 800430c:	b087      	sub	sp, #28
 800430e:	af00      	add	r7, sp, #0
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3314      	adds	r3, #20
 800431a:	461a      	mov	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	0e5b      	lsrs	r3, r3, #25
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	4413      	add	r3, r2
 8004328:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	0d1b      	lsrs	r3, r3, #20
 8004332:	f003 031f 	and.w	r3, r3, #31
 8004336:	2107      	movs	r1, #7
 8004338:	fa01 f303 	lsl.w	r3, r1, r3
 800433c:	43db      	mvns	r3, r3
 800433e:	401a      	ands	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	0d1b      	lsrs	r3, r3, #20
 8004344:	f003 031f 	and.w	r3, r3, #31
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	fa01 f303 	lsl.w	r3, r1, r3
 800434e:	431a      	orrs	r2, r3
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004354:	bf00      	nop
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004378:	43db      	mvns	r3, r3
 800437a:	401a      	ands	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f003 0318 	and.w	r3, r3, #24
 8004382:	4908      	ldr	r1, [pc, #32]	; (80043a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004384:	40d9      	lsrs	r1, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	400b      	ands	r3, r1
 800438a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800438e:	431a      	orrs	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004396:	bf00      	nop
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	0007ffff 	.word	0x0007ffff

080043a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80043b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6093      	str	r3, [r2, #8]
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043e0:	d101      	bne.n	80043e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004404:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004408:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004430:	d101      	bne.n	8004436 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <LL_ADC_IsEnabled+0x18>
 8004458:	2301      	movs	r3, #1
 800445a:	e000      	b.n	800445e <LL_ADC_IsEnabled+0x1a>
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b04      	cmp	r3, #4
 800447c:	d101      	bne.n	8004482 <LL_ADC_REG_IsConversionOngoing+0x18>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d101      	bne.n	80044a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
	...

080044b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e12c      	b.n	800472c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d109      	bne.n	80044f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7fe fffb 	bl	80034dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff ff67 	bl	80043cc <LL_ADC_IsDeepPowerDownEnabled>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d004      	beq.n	800450e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff ff4d 	bl	80043a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff ff82 	bl	800441c <LL_ADC_IsInternalRegulatorEnabled>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d115      	bne.n	800454a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff ff66 	bl	80043f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004528:	4b82      	ldr	r3, [pc, #520]	; (8004734 <HAL_ADC_Init+0x27c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	099b      	lsrs	r3, r3, #6
 800452e:	4a82      	ldr	r2, [pc, #520]	; (8004738 <HAL_ADC_Init+0x280>)
 8004530:	fba2 2303 	umull	r2, r3, r2, r3
 8004534:	099b      	lsrs	r3, r3, #6
 8004536:	3301      	adds	r3, #1
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800453c:	e002      	b.n	8004544 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	3b01      	subs	r3, #1
 8004542:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f9      	bne.n	800453e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff ff64 	bl	800441c <LL_ADC_IsInternalRegulatorEnabled>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10d      	bne.n	8004576 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455e:	f043 0210 	orr.w	r2, r3, #16
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456a:	f043 0201 	orr.w	r2, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff ff75 	bl	800446a <LL_ADC_REG_IsConversionOngoing>
 8004580:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b00      	cmp	r3, #0
 800458c:	f040 80c5 	bne.w	800471a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2b00      	cmp	r3, #0
 8004594:	f040 80c1 	bne.w	800471a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80045a0:	f043 0202 	orr.w	r2, r3, #2
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff ff49 	bl	8004444 <LL_ADC_IsEnabled>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10b      	bne.n	80045d0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045b8:	4860      	ldr	r0, [pc, #384]	; (800473c <HAL_ADC_Init+0x284>)
 80045ba:	f7ff ff43 	bl	8004444 <LL_ADC_IsEnabled>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d105      	bne.n	80045d0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4619      	mov	r1, r3
 80045ca:	485d      	ldr	r0, [pc, #372]	; (8004740 <HAL_ADC_Init+0x288>)
 80045cc:	f7ff fde8 	bl	80041a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	7e5b      	ldrb	r3, [r3, #25]
 80045d4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045da:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80045e0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80045e6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045ee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045f0:	4313      	orrs	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d106      	bne.n	800460c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	3b01      	subs	r3, #1
 8004604:	045b      	lsls	r3, r3, #17
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	4313      	orrs	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	2b00      	cmp	r3, #0
 8004612:	d009      	beq.n	8004628 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4313      	orrs	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	4b45      	ldr	r3, [pc, #276]	; (8004744 <HAL_ADC_Init+0x28c>)
 8004630:	4013      	ands	r3, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	69b9      	ldr	r1, [r7, #24]
 8004638:	430b      	orrs	r3, r1
 800463a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff ff12 	bl	800446a <LL_ADC_REG_IsConversionOngoing>
 8004646:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff ff1f 	bl	8004490 <LL_ADC_INJ_IsConversionOngoing>
 8004652:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d13d      	bne.n	80046d6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d13a      	bne.n	80046d6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004664:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800466c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800466e:	4313      	orrs	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800467c:	f023 0302 	bic.w	r3, r3, #2
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6812      	ldr	r2, [r2, #0]
 8004684:	69b9      	ldr	r1, [r7, #24]
 8004686:	430b      	orrs	r3, r1
 8004688:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004690:	2b01      	cmp	r3, #1
 8004692:	d118      	bne.n	80046c6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800469e:	f023 0304 	bic.w	r3, r3, #4
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046aa:	4311      	orrs	r1, r2
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80046b0:	4311      	orrs	r1, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80046b6:	430a      	orrs	r2, r1
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	611a      	str	r2, [r3, #16]
 80046c4:	e007      	b.n	80046d6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0201 	bic.w	r2, r2, #1
 80046d4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d10c      	bne.n	80046f8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	f023 010f 	bic.w	r1, r3, #15
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	1e5a      	subs	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
 80046f6:	e007      	b.n	8004708 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 020f 	bic.w	r2, r2, #15
 8004706:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470c:	f023 0303 	bic.w	r3, r3, #3
 8004710:	f043 0201 	orr.w	r2, r3, #1
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	655a      	str	r2, [r3, #84]	; 0x54
 8004718:	e007      	b.n	800472a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471e:	f043 0210 	orr.w	r2, r3, #16
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800472a:	7ffb      	ldrb	r3, [r7, #31]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3720      	adds	r7, #32
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	20000000 	.word	0x20000000
 8004738:	053e2d63 	.word	0x053e2d63
 800473c:	50040000 	.word	0x50040000
 8004740:	50040300 	.word	0x50040300
 8004744:	fff0c007 	.word	0xfff0c007

08004748 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b0b6      	sub	sp, #216	; 0xd8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004752:	2300      	movs	r3, #0
 8004754:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <HAL_ADC_ConfigChannel+0x22>
 8004766:	2302      	movs	r3, #2
 8004768:	e3b9      	b.n	8004ede <HAL_ADC_ConfigChannel+0x796>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff fe77 	bl	800446a <LL_ADC_REG_IsConversionOngoing>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	f040 839e 	bne.w	8004ec0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b05      	cmp	r3, #5
 800478a:	d824      	bhi.n	80047d6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	3b02      	subs	r3, #2
 8004792:	2b03      	cmp	r3, #3
 8004794:	d81b      	bhi.n	80047ce <HAL_ADC_ConfigChannel+0x86>
 8004796:	a201      	add	r2, pc, #4	; (adr r2, 800479c <HAL_ADC_ConfigChannel+0x54>)
 8004798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479c:	080047ad 	.word	0x080047ad
 80047a0:	080047b5 	.word	0x080047b5
 80047a4:	080047bd 	.word	0x080047bd
 80047a8:	080047c5 	.word	0x080047c5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	220c      	movs	r2, #12
 80047b0:	605a      	str	r2, [r3, #4]
          break;
 80047b2:	e011      	b.n	80047d8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2212      	movs	r2, #18
 80047b8:	605a      	str	r2, [r3, #4]
          break;
 80047ba:	e00d      	b.n	80047d8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2218      	movs	r2, #24
 80047c0:	605a      	str	r2, [r3, #4]
          break;
 80047c2:	e009      	b.n	80047d8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047ca:	605a      	str	r2, [r3, #4]
          break;
 80047cc:	e004      	b.n	80047d8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2206      	movs	r2, #6
 80047d2:	605a      	str	r2, [r3, #4]
          break;
 80047d4:	e000      	b.n	80047d8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80047d6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	6859      	ldr	r1, [r3, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	461a      	mov	r2, r3
 80047e6:	f7ff fd64 	bl	80042b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff fe3b 	bl	800446a <LL_ADC_REG_IsConversionOngoing>
 80047f4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff fe47 	bl	8004490 <LL_ADC_INJ_IsConversionOngoing>
 8004802:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004806:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800480a:	2b00      	cmp	r3, #0
 800480c:	f040 81a6 	bne.w	8004b5c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004810:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004814:	2b00      	cmp	r3, #0
 8004816:	f040 81a1 	bne.w	8004b5c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6818      	ldr	r0, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6819      	ldr	r1, [r3, #0]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	461a      	mov	r2, r3
 8004828:	f7ff fd6f 	bl	800430a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	695a      	ldr	r2, [r3, #20]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	08db      	lsrs	r3, r3, #3
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	2b04      	cmp	r3, #4
 800484c:	d00a      	beq.n	8004864 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6818      	ldr	r0, [r3, #0]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	6919      	ldr	r1, [r3, #16]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800485e:	f7ff fcd3 	bl	8004208 <LL_ADC_SetOffset>
 8004862:	e17b      	b.n	8004b5c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2100      	movs	r1, #0
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff fcf0 	bl	8004250 <LL_ADC_GetOffsetChannel>
 8004870:	4603      	mov	r3, r0
 8004872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10a      	bne.n	8004890 <HAL_ADC_ConfigChannel+0x148>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2100      	movs	r1, #0
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff fce5 	bl	8004250 <LL_ADC_GetOffsetChannel>
 8004886:	4603      	mov	r3, r0
 8004888:	0e9b      	lsrs	r3, r3, #26
 800488a:	f003 021f 	and.w	r2, r3, #31
 800488e:	e01e      	b.n	80048ce <HAL_ADC_ConfigChannel+0x186>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2100      	movs	r1, #0
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff fcda 	bl	8004250 <LL_ADC_GetOffsetChannel>
 800489c:	4603      	mov	r3, r0
 800489e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048a6:	fa93 f3a3 	rbit	r3, r3
 80048aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80048ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80048b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80048be:	2320      	movs	r3, #32
 80048c0:	e004      	b.n	80048cc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80048c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048c6:	fab3 f383 	clz	r3, r3
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d105      	bne.n	80048e6 <HAL_ADC_ConfigChannel+0x19e>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	0e9b      	lsrs	r3, r3, #26
 80048e0:	f003 031f 	and.w	r3, r3, #31
 80048e4:	e018      	b.n	8004918 <HAL_ADC_ConfigChannel+0x1d0>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80048f2:	fa93 f3a3 	rbit	r3, r3
 80048f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80048fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004902:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800490a:	2320      	movs	r3, #32
 800490c:	e004      	b.n	8004918 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800490e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004912:	fab3 f383 	clz	r3, r3
 8004916:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004918:	429a      	cmp	r2, r3
 800491a:	d106      	bne.n	800492a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2200      	movs	r2, #0
 8004922:	2100      	movs	r1, #0
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff fca9 	bl	800427c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2101      	movs	r1, #1
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fc8d 	bl	8004250 <LL_ADC_GetOffsetChannel>
 8004936:	4603      	mov	r3, r0
 8004938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10a      	bne.n	8004956 <HAL_ADC_ConfigChannel+0x20e>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2101      	movs	r1, #1
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff fc82 	bl	8004250 <LL_ADC_GetOffsetChannel>
 800494c:	4603      	mov	r3, r0
 800494e:	0e9b      	lsrs	r3, r3, #26
 8004950:	f003 021f 	and.w	r2, r3, #31
 8004954:	e01e      	b.n	8004994 <HAL_ADC_ConfigChannel+0x24c>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2101      	movs	r1, #1
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff fc77 	bl	8004250 <LL_ADC_GetOffsetChannel>
 8004962:	4603      	mov	r3, r0
 8004964:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004968:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800496c:	fa93 f3a3 	rbit	r3, r3
 8004970:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004974:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004978:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800497c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004984:	2320      	movs	r3, #32
 8004986:	e004      	b.n	8004992 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004988:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800498c:	fab3 f383 	clz	r3, r3
 8004990:	b2db      	uxtb	r3, r3
 8004992:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800499c:	2b00      	cmp	r3, #0
 800499e:	d105      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x264>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	0e9b      	lsrs	r3, r3, #26
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	e018      	b.n	80049de <HAL_ADC_ConfigChannel+0x296>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049b8:	fa93 f3a3 	rbit	r3, r3
 80049bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80049c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80049c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80049c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80049d0:	2320      	movs	r3, #32
 80049d2:	e004      	b.n	80049de <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80049d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049d8:	fab3 f383 	clz	r3, r3
 80049dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049de:	429a      	cmp	r2, r3
 80049e0:	d106      	bne.n	80049f0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2200      	movs	r2, #0
 80049e8:	2101      	movs	r1, #1
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff fc46 	bl	800427c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2102      	movs	r1, #2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff fc2a 	bl	8004250 <LL_ADC_GetOffsetChannel>
 80049fc:	4603      	mov	r3, r0
 80049fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10a      	bne.n	8004a1c <HAL_ADC_ConfigChannel+0x2d4>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2102      	movs	r1, #2
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff fc1f 	bl	8004250 <LL_ADC_GetOffsetChannel>
 8004a12:	4603      	mov	r3, r0
 8004a14:	0e9b      	lsrs	r3, r3, #26
 8004a16:	f003 021f 	and.w	r2, r3, #31
 8004a1a:	e01e      	b.n	8004a5a <HAL_ADC_ConfigChannel+0x312>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2102      	movs	r1, #2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fc14 	bl	8004250 <LL_ADC_GetOffsetChannel>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a32:	fa93 f3a3 	rbit	r3, r3
 8004a36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004a3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004a42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004a4a:	2320      	movs	r3, #32
 8004a4c:	e004      	b.n	8004a58 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004a4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a52:	fab3 f383 	clz	r3, r3
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d105      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x32a>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	0e9b      	lsrs	r3, r3, #26
 8004a6c:	f003 031f 	and.w	r3, r3, #31
 8004a70:	e016      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x358>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a7e:	fa93 f3a3 	rbit	r3, r3
 8004a82:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004a84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004a8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004a92:	2320      	movs	r3, #32
 8004a94:	e004      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004a96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a9a:	fab3 f383 	clz	r3, r3
 8004a9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d106      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	2102      	movs	r1, #2
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff fbe5 	bl	800427c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2103      	movs	r1, #3
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fbc9 	bl	8004250 <LL_ADC_GetOffsetChannel>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10a      	bne.n	8004ade <HAL_ADC_ConfigChannel+0x396>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2103      	movs	r1, #3
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7ff fbbe 	bl	8004250 <LL_ADC_GetOffsetChannel>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	0e9b      	lsrs	r3, r3, #26
 8004ad8:	f003 021f 	and.w	r2, r3, #31
 8004adc:	e017      	b.n	8004b0e <HAL_ADC_ConfigChannel+0x3c6>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2103      	movs	r1, #3
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff fbb3 	bl	8004250 <LL_ADC_GetOffsetChannel>
 8004aea:	4603      	mov	r3, r0
 8004aec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004af0:	fa93 f3a3 	rbit	r3, r3
 8004af4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004af8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004afa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004b00:	2320      	movs	r3, #32
 8004b02:	e003      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b06:	fab3 f383 	clz	r3, r3
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d105      	bne.n	8004b26 <HAL_ADC_ConfigChannel+0x3de>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	0e9b      	lsrs	r3, r3, #26
 8004b20:	f003 031f 	and.w	r3, r3, #31
 8004b24:	e011      	b.n	8004b4a <HAL_ADC_ConfigChannel+0x402>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b2e:	fa93 f3a3 	rbit	r3, r3
 8004b32:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b36:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004b3e:	2320      	movs	r3, #32
 8004b40:	e003      	b.n	8004b4a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b44:	fab3 f383 	clz	r3, r3
 8004b48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d106      	bne.n	8004b5c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2200      	movs	r2, #0
 8004b54:	2103      	movs	r1, #3
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff fb90 	bl	800427c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff fc6f 	bl	8004444 <LL_ADC_IsEnabled>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f040 813f 	bne.w	8004dec <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	6819      	ldr	r1, [r3, #0]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f7ff fbf0 	bl	8004360 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	4a8e      	ldr	r2, [pc, #568]	; (8004dc0 <HAL_ADC_ConfigChannel+0x678>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	f040 8130 	bne.w	8004dec <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10b      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x46c>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	0e9b      	lsrs	r3, r3, #26
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	f003 031f 	and.w	r3, r3, #31
 8004ba8:	2b09      	cmp	r3, #9
 8004baa:	bf94      	ite	ls
 8004bac:	2301      	movls	r3, #1
 8004bae:	2300      	movhi	r3, #0
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	e019      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x4a0>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bbc:	fa93 f3a3 	rbit	r3, r3
 8004bc0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bc4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004bcc:	2320      	movs	r3, #32
 8004bce:	e003      	b.n	8004bd8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004bd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bd2:	fab3 f383 	clz	r3, r3
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	3301      	adds	r3, #1
 8004bda:	f003 031f 	and.w	r3, r3, #31
 8004bde:	2b09      	cmp	r3, #9
 8004be0:	bf94      	ite	ls
 8004be2:	2301      	movls	r3, #1
 8004be4:	2300      	movhi	r3, #0
 8004be6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d079      	beq.n	8004ce0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d107      	bne.n	8004c08 <HAL_ADC_ConfigChannel+0x4c0>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	0e9b      	lsrs	r3, r3, #26
 8004bfe:	3301      	adds	r3, #1
 8004c00:	069b      	lsls	r3, r3, #26
 8004c02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c06:	e015      	b.n	8004c34 <HAL_ADC_ConfigChannel+0x4ec>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c10:	fa93 f3a3 	rbit	r3, r3
 8004c14:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c18:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004c20:	2320      	movs	r3, #32
 8004c22:	e003      	b.n	8004c2c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c26:	fab3 f383 	clz	r3, r3
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	069b      	lsls	r3, r3, #26
 8004c30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d109      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x50c>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	0e9b      	lsrs	r3, r3, #26
 8004c46:	3301      	adds	r3, #1
 8004c48:	f003 031f 	and.w	r3, r3, #31
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c52:	e017      	b.n	8004c84 <HAL_ADC_ConfigChannel+0x53c>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c5c:	fa93 f3a3 	rbit	r3, r3
 8004c60:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c64:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004c6c:	2320      	movs	r3, #32
 8004c6e:	e003      	b.n	8004c78 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c72:	fab3 f383 	clz	r3, r3
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	3301      	adds	r3, #1
 8004c7a:	f003 031f 	and.w	r3, r3, #31
 8004c7e:	2101      	movs	r1, #1
 8004c80:	fa01 f303 	lsl.w	r3, r1, r3
 8004c84:	ea42 0103 	orr.w	r1, r2, r3
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10a      	bne.n	8004caa <HAL_ADC_ConfigChannel+0x562>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	0e9b      	lsrs	r3, r3, #26
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	f003 021f 	and.w	r2, r3, #31
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	4413      	add	r3, r2
 8004ca6:	051b      	lsls	r3, r3, #20
 8004ca8:	e018      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x594>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	fa93 f3a3 	rbit	r3, r3
 8004cb6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004cc2:	2320      	movs	r3, #32
 8004cc4:	e003      	b.n	8004cce <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc8:	fab3 f383 	clz	r3, r3
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	3301      	adds	r3, #1
 8004cd0:	f003 021f 	and.w	r2, r3, #31
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	4413      	add	r3, r2
 8004cda:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	e080      	b.n	8004de2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d107      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x5b4>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	0e9b      	lsrs	r3, r3, #26
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	069b      	lsls	r3, r3, #26
 8004cf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cfa:	e015      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x5e0>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d04:	fa93 f3a3 	rbit	r3, r3
 8004d08:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004d14:	2320      	movs	r3, #32
 8004d16:	e003      	b.n	8004d20 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	fab3 f383 	clz	r3, r3
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	3301      	adds	r3, #1
 8004d22:	069b      	lsls	r3, r3, #26
 8004d24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d109      	bne.n	8004d48 <HAL_ADC_ConfigChannel+0x600>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	0e9b      	lsrs	r3, r3, #26
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	f003 031f 	and.w	r3, r3, #31
 8004d40:	2101      	movs	r1, #1
 8004d42:	fa01 f303 	lsl.w	r3, r1, r3
 8004d46:	e017      	b.n	8004d78 <HAL_ADC_ConfigChannel+0x630>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	fa93 f3a3 	rbit	r3, r3
 8004d54:	61fb      	str	r3, [r7, #28]
  return result;
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004d60:	2320      	movs	r3, #32
 8004d62:	e003      	b.n	8004d6c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	fab3 f383 	clz	r3, r3
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	f003 031f 	and.w	r3, r3, #31
 8004d72:	2101      	movs	r1, #1
 8004d74:	fa01 f303 	lsl.w	r3, r1, r3
 8004d78:	ea42 0103 	orr.w	r1, r2, r3
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10d      	bne.n	8004da4 <HAL_ADC_ConfigChannel+0x65c>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	0e9b      	lsrs	r3, r3, #26
 8004d8e:	3301      	adds	r3, #1
 8004d90:	f003 021f 	and.w	r2, r3, #31
 8004d94:	4613      	mov	r3, r2
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	4413      	add	r3, r2
 8004d9a:	3b1e      	subs	r3, #30
 8004d9c:	051b      	lsls	r3, r3, #20
 8004d9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004da2:	e01d      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x698>
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	fa93 f3a3 	rbit	r3, r3
 8004db0:	613b      	str	r3, [r7, #16]
  return result;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d103      	bne.n	8004dc4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004dbc:	2320      	movs	r3, #32
 8004dbe:	e005      	b.n	8004dcc <HAL_ADC_ConfigChannel+0x684>
 8004dc0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	fab3 f383 	clz	r3, r3
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	3301      	adds	r3, #1
 8004dce:	f003 021f 	and.w	r2, r3, #31
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	4413      	add	r3, r2
 8004dd8:	3b1e      	subs	r3, #30
 8004dda:	051b      	lsls	r3, r3, #20
 8004ddc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004de0:	430b      	orrs	r3, r1
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	6892      	ldr	r2, [r2, #8]
 8004de6:	4619      	mov	r1, r3
 8004de8:	f7ff fa8f 	bl	800430a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	4b3d      	ldr	r3, [pc, #244]	; (8004ee8 <HAL_ADC_ConfigChannel+0x7a0>)
 8004df2:	4013      	ands	r3, r2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d06c      	beq.n	8004ed2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004df8:	483c      	ldr	r0, [pc, #240]	; (8004eec <HAL_ADC_ConfigChannel+0x7a4>)
 8004dfa:	f7ff f9f7 	bl	80041ec <LL_ADC_GetCommonPathInternalCh>
 8004dfe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a3a      	ldr	r2, [pc, #232]	; (8004ef0 <HAL_ADC_ConfigChannel+0x7a8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d127      	bne.n	8004e5c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d121      	bne.n	8004e5c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a35      	ldr	r2, [pc, #212]	; (8004ef4 <HAL_ADC_ConfigChannel+0x7ac>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d157      	bne.n	8004ed2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	482f      	ldr	r0, [pc, #188]	; (8004eec <HAL_ADC_ConfigChannel+0x7a4>)
 8004e2e:	f7ff f9ca 	bl	80041c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e32:	4b31      	ldr	r3, [pc, #196]	; (8004ef8 <HAL_ADC_ConfigChannel+0x7b0>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	099b      	lsrs	r3, r3, #6
 8004e38:	4a30      	ldr	r2, [pc, #192]	; (8004efc <HAL_ADC_ConfigChannel+0x7b4>)
 8004e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3e:	099b      	lsrs	r3, r3, #6
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	4613      	mov	r3, r2
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e4c:	e002      	b.n	8004e54 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1f9      	bne.n	8004e4e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e5a:	e03a      	b.n	8004ed2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a27      	ldr	r2, [pc, #156]	; (8004f00 <HAL_ADC_ConfigChannel+0x7b8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d113      	bne.n	8004e8e <HAL_ADC_ConfigChannel+0x746>
 8004e66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10d      	bne.n	8004e8e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a1f      	ldr	r2, [pc, #124]	; (8004ef4 <HAL_ADC_ConfigChannel+0x7ac>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d12a      	bne.n	8004ed2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e84:	4619      	mov	r1, r3
 8004e86:	4819      	ldr	r0, [pc, #100]	; (8004eec <HAL_ADC_ConfigChannel+0x7a4>)
 8004e88:	f7ff f99d 	bl	80041c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e8c:	e021      	b.n	8004ed2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a1c      	ldr	r2, [pc, #112]	; (8004f04 <HAL_ADC_ConfigChannel+0x7bc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d11c      	bne.n	8004ed2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d116      	bne.n	8004ed2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a12      	ldr	r2, [pc, #72]	; (8004ef4 <HAL_ADC_ConfigChannel+0x7ac>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d111      	bne.n	8004ed2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004eae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004eb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	480c      	ldr	r0, [pc, #48]	; (8004eec <HAL_ADC_ConfigChannel+0x7a4>)
 8004eba:	f7ff f984 	bl	80041c6 <LL_ADC_SetCommonPathInternalCh>
 8004ebe:	e008      	b.n	8004ed2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	f043 0220 	orr.w	r2, r3, #32
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004eda:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	37d8      	adds	r7, #216	; 0xd8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	80080000 	.word	0x80080000
 8004eec:	50040300 	.word	0x50040300
 8004ef0:	c7520000 	.word	0xc7520000
 8004ef4:	50040000 	.word	0x50040000
 8004ef8:	20000000 	.word	0x20000000
 8004efc:	053e2d63 	.word	0x053e2d63
 8004f00:	cb840000 	.word	0xcb840000
 8004f04:	80000001 	.word	0x80000001

08004f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f18:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <__NVIC_SetPriorityGrouping+0x44>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f24:	4013      	ands	r3, r2
 8004f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f3a:	4a04      	ldr	r2, [pc, #16]	; (8004f4c <__NVIC_SetPriorityGrouping+0x44>)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	60d3      	str	r3, [r2, #12]
}
 8004f40:	bf00      	nop
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	e000ed00 	.word	0xe000ed00

08004f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f54:	4b04      	ldr	r3, [pc, #16]	; (8004f68 <__NVIC_GetPriorityGrouping+0x18>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	0a1b      	lsrs	r3, r3, #8
 8004f5a:	f003 0307 	and.w	r3, r3, #7
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	e000ed00 	.word	0xe000ed00

08004f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	4603      	mov	r3, r0
 8004f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	db0b      	blt.n	8004f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	f003 021f 	and.w	r2, r3, #31
 8004f84:	4907      	ldr	r1, [pc, #28]	; (8004fa4 <__NVIC_EnableIRQ+0x38>)
 8004f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	2001      	movs	r0, #1
 8004f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	e000e100 	.word	0xe000e100

08004fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	6039      	str	r1, [r7, #0]
 8004fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	db0a      	blt.n	8004fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	490c      	ldr	r1, [pc, #48]	; (8004ff4 <__NVIC_SetPriority+0x4c>)
 8004fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc6:	0112      	lsls	r2, r2, #4
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	440b      	add	r3, r1
 8004fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fd0:	e00a      	b.n	8004fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	4908      	ldr	r1, [pc, #32]	; (8004ff8 <__NVIC_SetPriority+0x50>)
 8004fd8:	79fb      	ldrb	r3, [r7, #7]
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	3b04      	subs	r3, #4
 8004fe0:	0112      	lsls	r2, r2, #4
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	761a      	strb	r2, [r3, #24]
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	e000e100 	.word	0xe000e100
 8004ff8:	e000ed00 	.word	0xe000ed00

08004ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b089      	sub	sp, #36	; 0x24
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f1c3 0307 	rsb	r3, r3, #7
 8005016:	2b04      	cmp	r3, #4
 8005018:	bf28      	it	cs
 800501a:	2304      	movcs	r3, #4
 800501c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	3304      	adds	r3, #4
 8005022:	2b06      	cmp	r3, #6
 8005024:	d902      	bls.n	800502c <NVIC_EncodePriority+0x30>
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	3b03      	subs	r3, #3
 800502a:	e000      	b.n	800502e <NVIC_EncodePriority+0x32>
 800502c:	2300      	movs	r3, #0
 800502e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005030:	f04f 32ff 	mov.w	r2, #4294967295
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	fa02 f303 	lsl.w	r3, r2, r3
 800503a:	43da      	mvns	r2, r3
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	401a      	ands	r2, r3
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005044:	f04f 31ff 	mov.w	r1, #4294967295
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	fa01 f303 	lsl.w	r3, r1, r3
 800504e:	43d9      	mvns	r1, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005054:	4313      	orrs	r3, r2
         );
}
 8005056:	4618      	mov	r0, r3
 8005058:	3724      	adds	r7, #36	; 0x24
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
	...

08005064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3b01      	subs	r3, #1
 8005070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005074:	d301      	bcc.n	800507a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005076:	2301      	movs	r3, #1
 8005078:	e00f      	b.n	800509a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800507a:	4a0a      	ldr	r2, [pc, #40]	; (80050a4 <SysTick_Config+0x40>)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3b01      	subs	r3, #1
 8005080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005082:	210f      	movs	r1, #15
 8005084:	f04f 30ff 	mov.w	r0, #4294967295
 8005088:	f7ff ff8e 	bl	8004fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800508c:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <SysTick_Config+0x40>)
 800508e:	2200      	movs	r2, #0
 8005090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005092:	4b04      	ldr	r3, [pc, #16]	; (80050a4 <SysTick_Config+0x40>)
 8005094:	2207      	movs	r2, #7
 8005096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	e000e010 	.word	0xe000e010

080050a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7ff ff29 	bl	8004f08 <__NVIC_SetPriorityGrouping>
}
 80050b6:	bf00      	nop
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b086      	sub	sp, #24
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	4603      	mov	r3, r0
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	607a      	str	r2, [r7, #4]
 80050ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80050cc:	2300      	movs	r3, #0
 80050ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050d0:	f7ff ff3e 	bl	8004f50 <__NVIC_GetPriorityGrouping>
 80050d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	68b9      	ldr	r1, [r7, #8]
 80050da:	6978      	ldr	r0, [r7, #20]
 80050dc:	f7ff ff8e 	bl	8004ffc <NVIC_EncodePriority>
 80050e0:	4602      	mov	r2, r0
 80050e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050e6:	4611      	mov	r1, r2
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7ff ff5d 	bl	8004fa8 <__NVIC_SetPriority>
}
 80050ee:	bf00      	nop
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b082      	sub	sp, #8
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	4603      	mov	r3, r0
 80050fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff ff31 	bl	8004f6c <__NVIC_EnableIRQ>
}
 800510a:	bf00      	nop
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b082      	sub	sp, #8
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff ffa2 	bl	8005064 <SysTick_Config>
 8005120:	4603      	mov	r3, r0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e054      	b.n	80051e8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	7f5b      	ldrb	r3, [r3, #29]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d105      	bne.n	8005154 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fe fa7a 	bl	8003648 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	791b      	ldrb	r3, [r3, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10c      	bne.n	800517c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a22      	ldr	r2, [pc, #136]	; (80051f0 <HAL_CRC_Init+0xc4>)
 8005168:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0218 	bic.w	r2, r2, #24
 8005178:	609a      	str	r2, [r3, #8]
 800517a:	e00c      	b.n	8005196 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6899      	ldr	r1, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	461a      	mov	r2, r3
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f834 	bl	80051f4 <HAL_CRCEx_Polynomial_Set>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e028      	b.n	80051e8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	795b      	ldrb	r3, [r3, #5]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d105      	bne.n	80051aa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f04f 32ff 	mov.w	r2, #4294967295
 80051a6:	611a      	str	r2, [r3, #16]
 80051a8:	e004      	b.n	80051b4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6912      	ldr	r2, [r2, #16]
 80051b2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695a      	ldr	r2, [r3, #20]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699a      	ldr	r2, [r3, #24]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	04c11db7 	.word	0x04c11db7

080051f4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005200:	2300      	movs	r3, #0
 8005202:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005204:	231f      	movs	r3, #31
 8005206:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005208:	bf00      	nop
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1e5a      	subs	r2, r3, #1
 800520e:	613a      	str	r2, [r7, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d009      	beq.n	8005228 <HAL_CRCEx_Polynomial_Set+0x34>
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f003 031f 	and.w	r3, r3, #31
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	fa22 f303 	lsr.w	r3, r2, r3
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0f0      	beq.n	800520a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b18      	cmp	r3, #24
 800522c:	d846      	bhi.n	80052bc <HAL_CRCEx_Polynomial_Set+0xc8>
 800522e:	a201      	add	r2, pc, #4	; (adr r2, 8005234 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005234:	080052c3 	.word	0x080052c3
 8005238:	080052bd 	.word	0x080052bd
 800523c:	080052bd 	.word	0x080052bd
 8005240:	080052bd 	.word	0x080052bd
 8005244:	080052bd 	.word	0x080052bd
 8005248:	080052bd 	.word	0x080052bd
 800524c:	080052bd 	.word	0x080052bd
 8005250:	080052bd 	.word	0x080052bd
 8005254:	080052b1 	.word	0x080052b1
 8005258:	080052bd 	.word	0x080052bd
 800525c:	080052bd 	.word	0x080052bd
 8005260:	080052bd 	.word	0x080052bd
 8005264:	080052bd 	.word	0x080052bd
 8005268:	080052bd 	.word	0x080052bd
 800526c:	080052bd 	.word	0x080052bd
 8005270:	080052bd 	.word	0x080052bd
 8005274:	080052a5 	.word	0x080052a5
 8005278:	080052bd 	.word	0x080052bd
 800527c:	080052bd 	.word	0x080052bd
 8005280:	080052bd 	.word	0x080052bd
 8005284:	080052bd 	.word	0x080052bd
 8005288:	080052bd 	.word	0x080052bd
 800528c:	080052bd 	.word	0x080052bd
 8005290:	080052bd 	.word	0x080052bd
 8005294:	08005299 	.word	0x08005299
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	2b06      	cmp	r3, #6
 800529c:	d913      	bls.n	80052c6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80052a2:	e010      	b.n	80052c6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	2b07      	cmp	r3, #7
 80052a8:	d90f      	bls.n	80052ca <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80052ae:	e00c      	b.n	80052ca <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	2b0f      	cmp	r3, #15
 80052b4:	d90b      	bls.n	80052ce <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80052ba:	e008      	b.n	80052ce <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	75fb      	strb	r3, [r7, #23]
      break;
 80052c0:	e006      	b.n	80052d0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80052c2:	bf00      	nop
 80052c4:	e004      	b.n	80052d0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80052c6:	bf00      	nop
 80052c8:	e002      	b.n	80052d0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80052ca:	bf00      	nop
 80052cc:	e000      	b.n	80052d0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80052ce:	bf00      	nop
  }
  if (status == HAL_OK)
 80052d0:	7dfb      	ldrb	r3, [r7, #23]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10d      	bne.n	80052f2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f023 0118 	bic.w	r1, r3, #24
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80052f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	371c      	adds	r7, #28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e014      	b.n	800533c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	791b      	ldrb	r3, [r3, #4]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d105      	bne.n	8005328 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fe f9ec 	bl	8003700 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	795b      	ldrb	r3, [r3, #5]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_DAC_ConfigChannel+0x1c>
 800535c:	2302      	movs	r3, #2
 800535e:	e107      	b.n	8005570 <HAL_DAC_ConfigChannel+0x22c>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2201      	movs	r2, #1
 8005364:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2202      	movs	r2, #2
 800536a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b04      	cmp	r3, #4
 8005372:	d174      	bne.n	800545e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005374:	f7fe fee4 	bl	8004140 <HAL_GetTick>
 8005378:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d134      	bne.n	80053ea <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005380:	e011      	b.n	80053a6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005382:	f7fe fedd 	bl	8004140 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b01      	cmp	r3, #1
 800538e:	d90a      	bls.n	80053a6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f043 0208 	orr.w	r2, r3, #8
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2203      	movs	r2, #3
 80053a0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e0e4      	b.n	8005570 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1e6      	bne.n	8005382 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80053b4:	2001      	movs	r0, #1
 80053b6:	f7fe fecf 	bl	8004158 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	6992      	ldr	r2, [r2, #24]
 80053c2:	641a      	str	r2, [r3, #64]	; 0x40
 80053c4:	e01e      	b.n	8005404 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80053c6:	f7fe febb 	bl	8004140 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d90a      	bls.n	80053ea <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f043 0208 	orr.w	r2, r3, #8
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2203      	movs	r2, #3
 80053e4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e0c2      	b.n	8005570 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	dbe8      	blt.n	80053c6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80053f4:	2001      	movs	r0, #1
 80053f6:	f7fe feaf 	bl	8004158 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	6992      	ldr	r2, [r2, #24]
 8005402:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005414:	fa01 f303 	lsl.w	r3, r1, r3
 8005418:	43db      	mvns	r3, r3
 800541a:	ea02 0103 	and.w	r1, r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	69da      	ldr	r2, [r3, #28]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f003 0310 	and.w	r3, r3, #16
 8005428:	409a      	lsls	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f003 0310 	and.w	r3, r3, #16
 800543e:	21ff      	movs	r1, #255	; 0xff
 8005440:	fa01 f303 	lsl.w	r3, r1, r3
 8005444:	43db      	mvns	r3, r3
 8005446:	ea02 0103 	and.w	r1, r2, r3
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6a1a      	ldr	r2, [r3, #32]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	409a      	lsls	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d11d      	bne.n	80054a2 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f003 0310 	and.w	r3, r3, #16
 8005474:	221f      	movs	r2, #31
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	43db      	mvns	r3, r3
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	4013      	ands	r3, r2
 8005480:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f003 0310 	and.w	r3, r3, #16
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	4313      	orrs	r3, r2
 8005498:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f003 0310 	and.w	r3, r3, #16
 80054b0:	2207      	movs	r2, #7
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	43db      	mvns	r3, r3
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	4013      	ands	r3, r2
 80054bc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	4313      	orrs	r3, r2
 80054e0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6819      	ldr	r1, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f003 0310 	and.w	r3, r3, #16
 80054f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80054fa:	fa02 f303 	lsl.w	r3, r2, r3
 80054fe:	43da      	mvns	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	400a      	ands	r2, r1
 8005506:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f003 0310 	and.w	r3, r3, #16
 8005516:	f640 72fc 	movw	r2, #4092	; 0xffc
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	43db      	mvns	r3, r3
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	4013      	ands	r3, r2
 8005524:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f003 0310 	and.w	r3, r3, #16
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	fa02 f303 	lsl.w	r3, r2, r3
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	4313      	orrs	r3, r2
 800553c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6819      	ldr	r1, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f003 0310 	and.w	r3, r3, #16
 8005552:	22c0      	movs	r2, #192	; 0xc0
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	43da      	mvns	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	400a      	ands	r2, r1
 8005560:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2201      	movs	r2, #1
 8005566:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3720      	adds	r7, #32
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e098      	b.n	80056bc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	4b4d      	ldr	r3, [pc, #308]	; (80056c8 <HAL_DMA_Init+0x150>)
 8005592:	429a      	cmp	r2, r3
 8005594:	d80f      	bhi.n	80055b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	4b4b      	ldr	r3, [pc, #300]	; (80056cc <HAL_DMA_Init+0x154>)
 800559e:	4413      	add	r3, r2
 80055a0:	4a4b      	ldr	r2, [pc, #300]	; (80056d0 <HAL_DMA_Init+0x158>)
 80055a2:	fba2 2303 	umull	r2, r3, r2, r3
 80055a6:	091b      	lsrs	r3, r3, #4
 80055a8:	009a      	lsls	r2, r3, #2
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a48      	ldr	r2, [pc, #288]	; (80056d4 <HAL_DMA_Init+0x15c>)
 80055b2:	641a      	str	r2, [r3, #64]	; 0x40
 80055b4:	e00e      	b.n	80055d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	4b46      	ldr	r3, [pc, #280]	; (80056d8 <HAL_DMA_Init+0x160>)
 80055be:	4413      	add	r3, r2
 80055c0:	4a43      	ldr	r2, [pc, #268]	; (80056d0 <HAL_DMA_Init+0x158>)
 80055c2:	fba2 2303 	umull	r2, r3, r2, r3
 80055c6:	091b      	lsrs	r3, r3, #4
 80055c8:	009a      	lsls	r2, r3, #2
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a42      	ldr	r2, [pc, #264]	; (80056dc <HAL_DMA_Init+0x164>)
 80055d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80055ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80055f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005604:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005610:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800562e:	d039      	beq.n	80056a4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005634:	4a27      	ldr	r2, [pc, #156]	; (80056d4 <HAL_DMA_Init+0x15c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d11a      	bne.n	8005670 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800563a:	4b29      	ldr	r3, [pc, #164]	; (80056e0 <HAL_DMA_Init+0x168>)
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005642:	f003 031c 	and.w	r3, r3, #28
 8005646:	210f      	movs	r1, #15
 8005648:	fa01 f303 	lsl.w	r3, r1, r3
 800564c:	43db      	mvns	r3, r3
 800564e:	4924      	ldr	r1, [pc, #144]	; (80056e0 <HAL_DMA_Init+0x168>)
 8005650:	4013      	ands	r3, r2
 8005652:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005654:	4b22      	ldr	r3, [pc, #136]	; (80056e0 <HAL_DMA_Init+0x168>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6859      	ldr	r1, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005660:	f003 031c 	and.w	r3, r3, #28
 8005664:	fa01 f303 	lsl.w	r3, r1, r3
 8005668:	491d      	ldr	r1, [pc, #116]	; (80056e0 <HAL_DMA_Init+0x168>)
 800566a:	4313      	orrs	r3, r2
 800566c:	600b      	str	r3, [r1, #0]
 800566e:	e019      	b.n	80056a4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005670:	4b1c      	ldr	r3, [pc, #112]	; (80056e4 <HAL_DMA_Init+0x16c>)
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005678:	f003 031c 	and.w	r3, r3, #28
 800567c:	210f      	movs	r1, #15
 800567e:	fa01 f303 	lsl.w	r3, r1, r3
 8005682:	43db      	mvns	r3, r3
 8005684:	4917      	ldr	r1, [pc, #92]	; (80056e4 <HAL_DMA_Init+0x16c>)
 8005686:	4013      	ands	r3, r2
 8005688:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800568a:	4b16      	ldr	r3, [pc, #88]	; (80056e4 <HAL_DMA_Init+0x16c>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6859      	ldr	r1, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005696:	f003 031c 	and.w	r3, r3, #28
 800569a:	fa01 f303 	lsl.w	r3, r1, r3
 800569e:	4911      	ldr	r1, [pc, #68]	; (80056e4 <HAL_DMA_Init+0x16c>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	40020407 	.word	0x40020407
 80056cc:	bffdfff8 	.word	0xbffdfff8
 80056d0:	cccccccd 	.word	0xcccccccd
 80056d4:	40020000 	.word	0x40020000
 80056d8:	bffdfbf8 	.word	0xbffdfbf8
 80056dc:	40020400 	.word	0x40020400
 80056e0:	400200a8 	.word	0x400200a8
 80056e4:	400204a8 	.word	0x400204a8

080056e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005704:	f003 031c 	and.w	r3, r3, #28
 8005708:	2204      	movs	r2, #4
 800570a:	409a      	lsls	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4013      	ands	r3, r2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d026      	beq.n	8005762 <HAL_DMA_IRQHandler+0x7a>
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	2b00      	cmp	r3, #0
 800571c:	d021      	beq.n	8005762 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b00      	cmp	r3, #0
 800572a:	d107      	bne.n	800573c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0204 	bic.w	r2, r2, #4
 800573a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005740:	f003 021c 	and.w	r2, r3, #28
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	2104      	movs	r1, #4
 800574a:	fa01 f202 	lsl.w	r2, r1, r2
 800574e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005754:	2b00      	cmp	r3, #0
 8005756:	d071      	beq.n	800583c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005760:	e06c      	b.n	800583c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005766:	f003 031c 	and.w	r3, r3, #28
 800576a:	2202      	movs	r2, #2
 800576c:	409a      	lsls	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4013      	ands	r3, r2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d02e      	beq.n	80057d4 <HAL_DMA_IRQHandler+0xec>
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d029      	beq.n	80057d4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10b      	bne.n	80057a6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 020a 	bic.w	r2, r2, #10
 800579c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057aa:	f003 021c 	and.w	r2, r3, #28
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	2102      	movs	r1, #2
 80057b4:	fa01 f202 	lsl.w	r2, r1, r2
 80057b8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d038      	beq.n	800583c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80057d2:	e033      	b.n	800583c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d8:	f003 031c 	and.w	r3, r3, #28
 80057dc:	2208      	movs	r2, #8
 80057de:	409a      	lsls	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	4013      	ands	r3, r2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d02a      	beq.n	800583e <HAL_DMA_IRQHandler+0x156>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d025      	beq.n	800583e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 020e 	bic.w	r2, r2, #14
 8005800:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005806:	f003 021c 	and.w	r2, r3, #28
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	2101      	movs	r1, #1
 8005810:	fa01 f202 	lsl.w	r2, r1, r2
 8005814:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005830:	2b00      	cmp	r3, #0
 8005832:	d004      	beq.n	800583e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800583c:	bf00      	nop
 800583e:	bf00      	nop
}
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8005856:	2300      	movs	r3, #0
 8005858:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800585a:	4b2f      	ldr	r3, [pc, #188]	; (8005918 <HAL_FLASH_Program+0xd0>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d101      	bne.n	8005866 <HAL_FLASH_Program+0x1e>
 8005862:	2302      	movs	r3, #2
 8005864:	e053      	b.n	800590e <HAL_FLASH_Program+0xc6>
 8005866:	4b2c      	ldr	r3, [pc, #176]	; (8005918 <HAL_FLASH_Program+0xd0>)
 8005868:	2201      	movs	r2, #1
 800586a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800586c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005870:	f000 f888 	bl	8005984 <FLASH_WaitForLastOperation>
 8005874:	4603      	mov	r3, r0
 8005876:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005878:	7dfb      	ldrb	r3, [r7, #23]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d143      	bne.n	8005906 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800587e:	4b26      	ldr	r3, [pc, #152]	; (8005918 <HAL_FLASH_Program+0xd0>)
 8005880:	2200      	movs	r2, #0
 8005882:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005884:	4b25      	ldr	r3, [pc, #148]	; (800591c <HAL_FLASH_Program+0xd4>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800588c:	2b00      	cmp	r3, #0
 800588e:	d009      	beq.n	80058a4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005890:	4b22      	ldr	r3, [pc, #136]	; (800591c <HAL_FLASH_Program+0xd4>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a21      	ldr	r2, [pc, #132]	; (800591c <HAL_FLASH_Program+0xd4>)
 8005896:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800589a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800589c:	4b1e      	ldr	r3, [pc, #120]	; (8005918 <HAL_FLASH_Program+0xd0>)
 800589e:	2202      	movs	r2, #2
 80058a0:	771a      	strb	r2, [r3, #28]
 80058a2:	e002      	b.n	80058aa <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80058a4:	4b1c      	ldr	r3, [pc, #112]	; (8005918 <HAL_FLASH_Program+0xd0>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d107      	bne.n	80058c0 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80058b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058b4:	68b8      	ldr	r0, [r7, #8]
 80058b6:	f000 f8bd 	bl	8005a34 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80058ba:	2301      	movs	r3, #1
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	e010      	b.n	80058e2 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d002      	beq.n	80058cc <HAL_FLASH_Program+0x84>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d10a      	bne.n	80058e2 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	4619      	mov	r1, r3
 80058d0:	68b8      	ldr	r0, [r7, #8]
 80058d2:	f000 f8d5 	bl	8005a80 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d102      	bne.n	80058e2 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80058dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80058e0:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80058e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80058e6:	f000 f84d 	bl	8005984 <FLASH_WaitForLastOperation>
 80058ea:	4603      	mov	r3, r0
 80058ec:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d006      	beq.n	8005902 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80058f4:	4b09      	ldr	r3, [pc, #36]	; (800591c <HAL_FLASH_Program+0xd4>)
 80058f6:	695a      	ldr	r2, [r3, #20]
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	43db      	mvns	r3, r3
 80058fc:	4907      	ldr	r1, [pc, #28]	; (800591c <HAL_FLASH_Program+0xd4>)
 80058fe:	4013      	ands	r3, r2
 8005900:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005902:	f000 f9cf 	bl	8005ca4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005906:	4b04      	ldr	r3, [pc, #16]	; (8005918 <HAL_FLASH_Program+0xd0>)
 8005908:	2200      	movs	r2, #0
 800590a:	701a      	strb	r2, [r3, #0]

  return status;
 800590c:	7dfb      	ldrb	r3, [r7, #23]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	2000000c 	.word	0x2000000c
 800591c:	40022000 	.word	0x40022000

08005920 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005926:	2300      	movs	r3, #0
 8005928:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800592a:	4b0b      	ldr	r3, [pc, #44]	; (8005958 <HAL_FLASH_Unlock+0x38>)
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	2b00      	cmp	r3, #0
 8005930:	da0b      	bge.n	800594a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005932:	4b09      	ldr	r3, [pc, #36]	; (8005958 <HAL_FLASH_Unlock+0x38>)
 8005934:	4a09      	ldr	r2, [pc, #36]	; (800595c <HAL_FLASH_Unlock+0x3c>)
 8005936:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005938:	4b07      	ldr	r3, [pc, #28]	; (8005958 <HAL_FLASH_Unlock+0x38>)
 800593a:	4a09      	ldr	r2, [pc, #36]	; (8005960 <HAL_FLASH_Unlock+0x40>)
 800593c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800593e:	4b06      	ldr	r3, [pc, #24]	; (8005958 <HAL_FLASH_Unlock+0x38>)
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	2b00      	cmp	r3, #0
 8005944:	da01      	bge.n	800594a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800594a:	79fb      	ldrb	r3, [r7, #7]
}
 800594c:	4618      	mov	r0, r3
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	40022000 	.word	0x40022000
 800595c:	45670123 	.word	0x45670123
 8005960:	cdef89ab 	.word	0xcdef89ab

08005964 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005964:	b480      	push	{r7}
 8005966:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005968:	4b05      	ldr	r3, [pc, #20]	; (8005980 <HAL_FLASH_Lock+0x1c>)
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	4a04      	ldr	r2, [pc, #16]	; (8005980 <HAL_FLASH_Lock+0x1c>)
 800596e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005972:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	40022000 	.word	0x40022000

08005984 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800598c:	f7fe fbd8 	bl	8004140 <HAL_GetTick>
 8005990:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005992:	e00d      	b.n	80059b0 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599a:	d009      	beq.n	80059b0 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800599c:	f7fe fbd0 	bl	8004140 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d801      	bhi.n	80059b0 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e036      	b.n	8005a1e <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80059b0:	4b1d      	ldr	r3, [pc, #116]	; (8005a28 <FLASH_WaitForLastOperation+0xa4>)
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1eb      	bne.n	8005994 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80059bc:	4b1a      	ldr	r3, [pc, #104]	; (8005a28 <FLASH_WaitForLastOperation+0xa4>)
 80059be:	691a      	ldr	r2, [r3, #16]
 80059c0:	4b1a      	ldr	r3, [pc, #104]	; (8005a2c <FLASH_WaitForLastOperation+0xa8>)
 80059c2:	4013      	ands	r3, r2
 80059c4:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01e      	beq.n	8005a0a <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80059cc:	4b18      	ldr	r3, [pc, #96]	; (8005a30 <FLASH_WaitForLastOperation+0xac>)
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	4a16      	ldr	r2, [pc, #88]	; (8005a30 <FLASH_WaitForLastOperation+0xac>)
 80059d6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d007      	beq.n	80059f2 <FLASH_WaitForLastOperation+0x6e>
 80059e2:	4b11      	ldr	r3, [pc, #68]	; (8005a28 <FLASH_WaitForLastOperation+0xa4>)
 80059e4:	699a      	ldr	r2, [r3, #24]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80059ec:	490e      	ldr	r1, [pc, #56]	; (8005a28 <FLASH_WaitForLastOperation+0xa4>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	618b      	str	r3, [r1, #24]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d004      	beq.n	8005a06 <FLASH_WaitForLastOperation+0x82>
 80059fc:	4a0a      	ldr	r2, [pc, #40]	; (8005a28 <FLASH_WaitForLastOperation+0xa4>)
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005a04:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e009      	b.n	8005a1e <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005a0a:	4b07      	ldr	r3, [pc, #28]	; (8005a28 <FLASH_WaitForLastOperation+0xa4>)
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005a16:	4b04      	ldr	r3, [pc, #16]	; (8005a28 <FLASH_WaitForLastOperation+0xa4>)
 8005a18:	2201      	movs	r2, #1
 8005a1a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	40022000 	.word	0x40022000
 8005a2c:	0002c3fa 	.word	0x0002c3fa
 8005a30:	2000000c 	.word	0x2000000c

08005a34 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005a40:	4b0e      	ldr	r3, [pc, #56]	; (8005a7c <FLASH_Program_DoubleWord+0x48>)
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	4a0d      	ldr	r2, [pc, #52]	; (8005a7c <FLASH_Program_DoubleWord+0x48>)
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005a52:	f3bf 8f6f 	isb	sy
}
 8005a56:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8005a58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a5c:	f04f 0200 	mov.w	r2, #0
 8005a60:	f04f 0300 	mov.w	r3, #0
 8005a64:	000a      	movs	r2, r1
 8005a66:	2300      	movs	r3, #0
 8005a68:	68f9      	ldr	r1, [r7, #12]
 8005a6a:	3104      	adds	r1, #4
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	600b      	str	r3, [r1, #0]
}
 8005a70:	bf00      	nop
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	40022000 	.word	0x40022000

08005a80 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b089      	sub	sp, #36	; 0x24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005a8a:	2340      	movs	r3, #64	; 0x40
 8005a8c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005a96:	4b14      	ldr	r3, [pc, #80]	; (8005ae8 <FLASH_Program_Fast+0x68>)
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	4a13      	ldr	r2, [pc, #76]	; (8005ae8 <FLASH_Program_Fast+0x68>)
 8005a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005aa0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8005aa6:	60fb      	str	r3, [r7, #12]
  return(result);
 8005aa8:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8005aaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005aac:	b672      	cpsid	i
}
 8005aae:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	3304      	adds	r3, #4
 8005abc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	617b      	str	r3, [r7, #20]
    row_index--;
 8005ac4:	7ffb      	ldrb	r3, [r7, #31]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8005aca:	7ffb      	ldrb	r3, [r7, #31]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1ef      	bne.n	8005ab0 <FLASH_Program_Fast+0x30>
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f383 8810 	msr	PRIMASK, r3
}
 8005ada:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8005adc:	bf00      	nop
 8005ade:	3724      	adds	r7, #36	; 0x24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	40022000 	.word	0x40022000

08005aec <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005af6:	4b48      	ldr	r3, [pc, #288]	; (8005c18 <HAL_FLASHEx_Erase+0x12c>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d101      	bne.n	8005b02 <HAL_FLASHEx_Erase+0x16>
 8005afe:	2302      	movs	r3, #2
 8005b00:	e085      	b.n	8005c0e <HAL_FLASHEx_Erase+0x122>
 8005b02:	4b45      	ldr	r3, [pc, #276]	; (8005c18 <HAL_FLASHEx_Erase+0x12c>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005b0c:	f7ff ff3a 	bl	8005984 <FLASH_WaitForLastOperation>
 8005b10:	4603      	mov	r3, r0
 8005b12:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d175      	bne.n	8005c06 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b1a:	4b3f      	ldr	r3, [pc, #252]	; (8005c18 <HAL_FLASHEx_Erase+0x12c>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005b20:	4b3e      	ldr	r3, [pc, #248]	; (8005c1c <HAL_FLASHEx_Erase+0x130>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d013      	beq.n	8005b54 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005b2c:	4b3b      	ldr	r3, [pc, #236]	; (8005c1c <HAL_FLASHEx_Erase+0x130>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d009      	beq.n	8005b4c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005b38:	4b38      	ldr	r3, [pc, #224]	; (8005c1c <HAL_FLASHEx_Erase+0x130>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a37      	ldr	r2, [pc, #220]	; (8005c1c <HAL_FLASHEx_Erase+0x130>)
 8005b3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b42:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005b44:	4b34      	ldr	r3, [pc, #208]	; (8005c18 <HAL_FLASHEx_Erase+0x12c>)
 8005b46:	2203      	movs	r2, #3
 8005b48:	771a      	strb	r2, [r3, #28]
 8005b4a:	e016      	b.n	8005b7a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005b4c:	4b32      	ldr	r3, [pc, #200]	; (8005c18 <HAL_FLASHEx_Erase+0x12c>)
 8005b4e:	2201      	movs	r2, #1
 8005b50:	771a      	strb	r2, [r3, #28]
 8005b52:	e012      	b.n	8005b7a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005b54:	4b31      	ldr	r3, [pc, #196]	; (8005c1c <HAL_FLASHEx_Erase+0x130>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d009      	beq.n	8005b74 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005b60:	4b2e      	ldr	r3, [pc, #184]	; (8005c1c <HAL_FLASHEx_Erase+0x130>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a2d      	ldr	r2, [pc, #180]	; (8005c1c <HAL_FLASHEx_Erase+0x130>)
 8005b66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b6a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005b6c:	4b2a      	ldr	r3, [pc, #168]	; (8005c18 <HAL_FLASHEx_Erase+0x12c>)
 8005b6e:	2202      	movs	r2, #2
 8005b70:	771a      	strb	r2, [r3, #28]
 8005b72:	e002      	b.n	8005b7a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005b74:	4b28      	ldr	r3, [pc, #160]	; (8005c18 <HAL_FLASHEx_Erase+0x12c>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d111      	bne.n	8005ba6 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 f84a 	bl	8005c20 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005b90:	f7ff fef8 	bl	8005984 <FLASH_WaitForLastOperation>
 8005b94:	4603      	mov	r3, r0
 8005b96:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8005b98:	4b20      	ldr	r3, [pc, #128]	; (8005c1c <HAL_FLASHEx_Erase+0x130>)
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	4a1f      	ldr	r2, [pc, #124]	; (8005c1c <HAL_FLASHEx_Erase+0x130>)
 8005b9e:	f023 0304 	bic.w	r3, r3, #4
 8005ba2:	6153      	str	r3, [r2, #20]
 8005ba4:	e02d      	b.n	8005c02 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bac:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	60bb      	str	r3, [r7, #8]
 8005bb4:	e01d      	b.n	8005bf2 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	4619      	mov	r1, r3
 8005bbc:	68b8      	ldr	r0, [r7, #8]
 8005bbe:	f000 f84d 	bl	8005c5c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005bc2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005bc6:	f7ff fedd 	bl	8005984 <FLASH_WaitForLastOperation>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005bce:	4b13      	ldr	r3, [pc, #76]	; (8005c1c <HAL_FLASHEx_Erase+0x130>)
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	4a12      	ldr	r2, [pc, #72]	; (8005c1c <HAL_FLASHEx_Erase+0x130>)
 8005bd4:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005bd8:	f023 0302 	bic.w	r3, r3, #2
 8005bdc:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	601a      	str	r2, [r3, #0]
          break;
 8005bea:	e00a      	b.n	8005c02 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	60bb      	str	r3, [r7, #8]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d3d9      	bcc.n	8005bb6 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005c02:	f000 f84f 	bl	8005ca4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005c06:	4b04      	ldr	r3, [pc, #16]	; (8005c18 <HAL_FLASHEx_Erase+0x12c>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	701a      	strb	r2, [r3, #0]

  return status;
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	2000000c 	.word	0x2000000c
 8005c1c:	40022000 	.word	0x40022000

08005c20 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d005      	beq.n	8005c3e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8005c32:	4b09      	ldr	r3, [pc, #36]	; (8005c58 <FLASH_MassErase+0x38>)
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	4a08      	ldr	r2, [pc, #32]	; (8005c58 <FLASH_MassErase+0x38>)
 8005c38:	f043 0304 	orr.w	r3, r3, #4
 8005c3c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005c3e:	4b06      	ldr	r3, [pc, #24]	; (8005c58 <FLASH_MassErase+0x38>)
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	4a05      	ldr	r2, [pc, #20]	; (8005c58 <FLASH_MassErase+0x38>)
 8005c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c48:	6153      	str	r3, [r2, #20]
}
 8005c4a:	bf00      	nop
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40022000 	.word	0x40022000

08005c5c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8005c66:	4b0e      	ldr	r3, [pc, #56]	; (8005ca0 <FLASH_PageErase+0x44>)
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8005c76:	490a      	ldr	r1, [pc, #40]	; (8005ca0 <FLASH_PageErase+0x44>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005c7c:	4b08      	ldr	r3, [pc, #32]	; (8005ca0 <FLASH_PageErase+0x44>)
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	4a07      	ldr	r2, [pc, #28]	; (8005ca0 <FLASH_PageErase+0x44>)
 8005c82:	f043 0302 	orr.w	r3, r3, #2
 8005c86:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005c88:	4b05      	ldr	r3, [pc, #20]	; (8005ca0 <FLASH_PageErase+0x44>)
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	4a04      	ldr	r2, [pc, #16]	; (8005ca0 <FLASH_PageErase+0x44>)
 8005c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c92:	6153      	str	r3, [r2, #20]
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	40022000 	.word	0x40022000

08005ca4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005caa:	4b21      	ldr	r3, [pc, #132]	; (8005d30 <FLASH_FlushCaches+0x8c>)
 8005cac:	7f1b      	ldrb	r3, [r3, #28]
 8005cae:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d002      	beq.n	8005cbc <FLASH_FlushCaches+0x18>
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d117      	bne.n	8005cec <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005cbc:	4b1d      	ldr	r3, [pc, #116]	; (8005d34 <FLASH_FlushCaches+0x90>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1c      	ldr	r2, [pc, #112]	; (8005d34 <FLASH_FlushCaches+0x90>)
 8005cc2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cc6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005cc8:	4b1a      	ldr	r3, [pc, #104]	; (8005d34 <FLASH_FlushCaches+0x90>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a19      	ldr	r2, [pc, #100]	; (8005d34 <FLASH_FlushCaches+0x90>)
 8005cce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	4b17      	ldr	r3, [pc, #92]	; (8005d34 <FLASH_FlushCaches+0x90>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a16      	ldr	r2, [pc, #88]	; (8005d34 <FLASH_FlushCaches+0x90>)
 8005cda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cde:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ce0:	4b14      	ldr	r3, [pc, #80]	; (8005d34 <FLASH_FlushCaches+0x90>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a13      	ldr	r2, [pc, #76]	; (8005d34 <FLASH_FlushCaches+0x90>)
 8005ce6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cea:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8005cec:	79fb      	ldrb	r3, [r7, #7]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d002      	beq.n	8005cf8 <FLASH_FlushCaches+0x54>
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d111      	bne.n	8005d1c <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005cf8:	4b0e      	ldr	r3, [pc, #56]	; (8005d34 <FLASH_FlushCaches+0x90>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a0d      	ldr	r2, [pc, #52]	; (8005d34 <FLASH_FlushCaches+0x90>)
 8005cfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	4b0b      	ldr	r3, [pc, #44]	; (8005d34 <FLASH_FlushCaches+0x90>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a0a      	ldr	r2, [pc, #40]	; (8005d34 <FLASH_FlushCaches+0x90>)
 8005d0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d0e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d10:	4b08      	ldr	r3, [pc, #32]	; (8005d34 <FLASH_FlushCaches+0x90>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a07      	ldr	r2, [pc, #28]	; (8005d34 <FLASH_FlushCaches+0x90>)
 8005d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d1a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005d1c:	4b04      	ldr	r3, [pc, #16]	; (8005d30 <FLASH_FlushCaches+0x8c>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	771a      	strb	r2, [r3, #28]
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	2000000c 	.word	0x2000000c
 8005d34:	40022000 	.word	0x40022000

08005d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d42:	2300      	movs	r3, #0
 8005d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d46:	e154      	b.n	8005ff2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	fa01 f303 	lsl.w	r3, r1, r3
 8005d54:	4013      	ands	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 8146 	beq.w	8005fec <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f003 0303 	and.w	r3, r3, #3
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d005      	beq.n	8005d78 <HAL_GPIO_Init+0x40>
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f003 0303 	and.w	r3, r3, #3
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d130      	bne.n	8005dda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	2203      	movs	r2, #3
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	43db      	mvns	r3, r3
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	005b      	lsls	r3, r3, #1
 8005d98:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dae:	2201      	movs	r2, #1
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	43db      	mvns	r3, r3
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	091b      	lsrs	r3, r3, #4
 8005dc4:	f003 0201 	and.w	r2, r3, #1
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d017      	beq.n	8005e16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	2203      	movs	r2, #3
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	43db      	mvns	r3, r3
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	689a      	ldr	r2, [r3, #8]
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d123      	bne.n	8005e6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	08da      	lsrs	r2, r3, #3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	3208      	adds	r2, #8
 8005e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	220f      	movs	r2, #15
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4013      	ands	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	691a      	ldr	r2, [r3, #16]
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f003 0307 	and.w	r3, r3, #7
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	fa02 f303 	lsl.w	r3, r2, r3
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	08da      	lsrs	r2, r3, #3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3208      	adds	r2, #8
 8005e64:	6939      	ldr	r1, [r7, #16]
 8005e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	2203      	movs	r2, #3
 8005e76:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7a:	43db      	mvns	r3, r3
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f003 0203 	and.w	r2, r3, #3
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 80a0 	beq.w	8005fec <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eac:	4b58      	ldr	r3, [pc, #352]	; (8006010 <HAL_GPIO_Init+0x2d8>)
 8005eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb0:	4a57      	ldr	r2, [pc, #348]	; (8006010 <HAL_GPIO_Init+0x2d8>)
 8005eb2:	f043 0301 	orr.w	r3, r3, #1
 8005eb6:	6613      	str	r3, [r2, #96]	; 0x60
 8005eb8:	4b55      	ldr	r3, [pc, #340]	; (8006010 <HAL_GPIO_Init+0x2d8>)
 8005eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	60bb      	str	r3, [r7, #8]
 8005ec2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005ec4:	4a53      	ldr	r2, [pc, #332]	; (8006014 <HAL_GPIO_Init+0x2dc>)
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	089b      	lsrs	r3, r3, #2
 8005eca:	3302      	adds	r3, #2
 8005ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f003 0303 	and.w	r3, r3, #3
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	220f      	movs	r2, #15
 8005edc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee0:	43db      	mvns	r3, r3
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005eee:	d019      	beq.n	8005f24 <HAL_GPIO_Init+0x1ec>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a49      	ldr	r2, [pc, #292]	; (8006018 <HAL_GPIO_Init+0x2e0>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d013      	beq.n	8005f20 <HAL_GPIO_Init+0x1e8>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a48      	ldr	r2, [pc, #288]	; (800601c <HAL_GPIO_Init+0x2e4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00d      	beq.n	8005f1c <HAL_GPIO_Init+0x1e4>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a47      	ldr	r2, [pc, #284]	; (8006020 <HAL_GPIO_Init+0x2e8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d007      	beq.n	8005f18 <HAL_GPIO_Init+0x1e0>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a46      	ldr	r2, [pc, #280]	; (8006024 <HAL_GPIO_Init+0x2ec>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d101      	bne.n	8005f14 <HAL_GPIO_Init+0x1dc>
 8005f10:	2304      	movs	r3, #4
 8005f12:	e008      	b.n	8005f26 <HAL_GPIO_Init+0x1ee>
 8005f14:	2307      	movs	r3, #7
 8005f16:	e006      	b.n	8005f26 <HAL_GPIO_Init+0x1ee>
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e004      	b.n	8005f26 <HAL_GPIO_Init+0x1ee>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e002      	b.n	8005f26 <HAL_GPIO_Init+0x1ee>
 8005f20:	2301      	movs	r3, #1
 8005f22:	e000      	b.n	8005f26 <HAL_GPIO_Init+0x1ee>
 8005f24:	2300      	movs	r3, #0
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	f002 0203 	and.w	r2, r2, #3
 8005f2c:	0092      	lsls	r2, r2, #2
 8005f2e:	4093      	lsls	r3, r2
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005f36:	4937      	ldr	r1, [pc, #220]	; (8006014 <HAL_GPIO_Init+0x2dc>)
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	089b      	lsrs	r3, r3, #2
 8005f3c:	3302      	adds	r3, #2
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f44:	4b38      	ldr	r3, [pc, #224]	; (8006028 <HAL_GPIO_Init+0x2f0>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	43db      	mvns	r3, r3
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4013      	ands	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f68:	4a2f      	ldr	r2, [pc, #188]	; (8006028 <HAL_GPIO_Init+0x2f0>)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f6e:	4b2e      	ldr	r3, [pc, #184]	; (8006028 <HAL_GPIO_Init+0x2f0>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	43db      	mvns	r3, r3
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f92:	4a25      	ldr	r2, [pc, #148]	; (8006028 <HAL_GPIO_Init+0x2f0>)
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005f98:	4b23      	ldr	r3, [pc, #140]	; (8006028 <HAL_GPIO_Init+0x2f0>)
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005fbc:	4a1a      	ldr	r2, [pc, #104]	; (8006028 <HAL_GPIO_Init+0x2f0>)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005fc2:	4b19      	ldr	r3, [pc, #100]	; (8006028 <HAL_GPIO_Init+0x2f0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005fe6:	4a10      	ldr	r2, [pc, #64]	; (8006028 <HAL_GPIO_Init+0x2f0>)
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f47f aea3 	bne.w	8005d48 <HAL_GPIO_Init+0x10>
  }
}
 8006002:	bf00      	nop
 8006004:	bf00      	nop
 8006006:	371c      	adds	r7, #28
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	40021000 	.word	0x40021000
 8006014:	40010000 	.word	0x40010000
 8006018:	48000400 	.word	0x48000400
 800601c:	48000800 	.word	0x48000800
 8006020:	48000c00 	.word	0x48000c00
 8006024:	48001000 	.word	0x48001000
 8006028:	40010400 	.word	0x40010400

0800602c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691a      	ldr	r2, [r3, #16]
 800603c:	887b      	ldrh	r3, [r7, #2]
 800603e:	4013      	ands	r3, r2
 8006040:	2b00      	cmp	r3, #0
 8006042:	d002      	beq.n	800604a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006044:	2301      	movs	r3, #1
 8006046:	73fb      	strb	r3, [r7, #15]
 8006048:	e001      	b.n	800604e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800604a:	2300      	movs	r3, #0
 800604c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800604e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	460b      	mov	r3, r1
 8006066:	807b      	strh	r3, [r7, #2]
 8006068:	4613      	mov	r3, r2
 800606a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800606c:	787b      	ldrb	r3, [r7, #1]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006072:	887a      	ldrh	r2, [r7, #2]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006078:	e002      	b.n	8006080 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800607a:	887a      	ldrh	r2, [r7, #2]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	460b      	mov	r3, r1
 8006096:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800609e:	887a      	ldrh	r2, [r7, #2]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4013      	ands	r3, r2
 80060a4:	041a      	lsls	r2, r3, #16
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	43d9      	mvns	r1, r3
 80060aa:	887b      	ldrh	r3, [r7, #2]
 80060ac:	400b      	ands	r3, r1
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	619a      	str	r2, [r3, #24]
}
 80060b4:	bf00      	nop
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80060c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060c2:	b08b      	sub	sp, #44	; 0x2c
 80060c4:	af06      	add	r7, sp, #24
 80060c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e109      	b.n	80062e6 <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d106      	bne.n	80060ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f008 f8f6 	bl	800e2d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2203      	movs	r2, #3
 80060f0:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f003 ffb5 	bl	800a068 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	603b      	str	r3, [r7, #0]
 8006104:	687e      	ldr	r6, [r7, #4]
 8006106:	466d      	mov	r5, sp
 8006108:	f106 0410 	add.w	r4, r6, #16
 800610c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800610e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006110:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006114:	e885 0003 	stmia.w	r5, {r0, r1}
 8006118:	1d33      	adds	r3, r6, #4
 800611a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800611c:	6838      	ldr	r0, [r7, #0]
 800611e:	f003 ff7b 	bl	800a018 <USB_CoreInit>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e0d8      	b.n	80062e6 <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2100      	movs	r1, #0
 800613a:	4618      	mov	r0, r3
 800613c:	f003 ffaf 	bl	800a09e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006140:	2300      	movs	r3, #0
 8006142:	73fb      	strb	r3, [r7, #15]
 8006144:	e04d      	b.n	80061e2 <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006146:	7bfb      	ldrb	r3, [r7, #15]
 8006148:	6879      	ldr	r1, [r7, #4]
 800614a:	1c5a      	adds	r2, r3, #1
 800614c:	4613      	mov	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	440b      	add	r3, r1
 8006156:	3305      	adds	r3, #5
 8006158:	2201      	movs	r2, #1
 800615a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800615c:	7bfb      	ldrb	r3, [r7, #15]
 800615e:	6879      	ldr	r1, [r7, #4]
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	440b      	add	r3, r1
 800616c:	3304      	adds	r3, #4
 800616e:	7bfa      	ldrb	r2, [r7, #15]
 8006170:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006172:	7bfa      	ldrb	r2, [r7, #15]
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	b298      	uxth	r0, r3
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	440b      	add	r3, r1
 8006184:	333a      	adds	r3, #58	; 0x3a
 8006186:	4602      	mov	r2, r0
 8006188:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800618a:	7bfb      	ldrb	r3, [r7, #15]
 800618c:	6879      	ldr	r1, [r7, #4]
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	4613      	mov	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	00db      	lsls	r3, r3, #3
 8006198:	440b      	add	r3, r1
 800619a:	3307      	adds	r3, #7
 800619c:	2200      	movs	r2, #0
 800619e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80061a0:	7bfa      	ldrb	r2, [r7, #15]
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	440b      	add	r3, r1
 80061ae:	333c      	adds	r3, #60	; 0x3c
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80061b4:	7bfa      	ldrb	r2, [r7, #15]
 80061b6:	6879      	ldr	r1, [r7, #4]
 80061b8:	4613      	mov	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	440b      	add	r3, r1
 80061c2:	3340      	adds	r3, #64	; 0x40
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80061c8:	7bfa      	ldrb	r2, [r7, #15]
 80061ca:	6879      	ldr	r1, [r7, #4]
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	440b      	add	r3, r1
 80061d6:	3344      	adds	r3, #68	; 0x44
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
 80061de:	3301      	adds	r3, #1
 80061e0:	73fb      	strb	r3, [r7, #15]
 80061e2:	7bfa      	ldrb	r2, [r7, #15]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d3ac      	bcc.n	8006146 <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061ec:	2300      	movs	r3, #0
 80061ee:	73fb      	strb	r3, [r7, #15]
 80061f0:	e044      	b.n	800627c <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80061f2:	7bfa      	ldrb	r2, [r7, #15]
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	440b      	add	r3, r1
 8006200:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8006204:	2200      	movs	r2, #0
 8006206:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006208:	7bfa      	ldrb	r2, [r7, #15]
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	4613      	mov	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	440b      	add	r3, r1
 8006216:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800621a:	7bfa      	ldrb	r2, [r7, #15]
 800621c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800621e:	7bfa      	ldrb	r2, [r7, #15]
 8006220:	6879      	ldr	r1, [r7, #4]
 8006222:	4613      	mov	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	440b      	add	r3, r1
 800622c:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8006230:	2200      	movs	r2, #0
 8006232:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006234:	7bfa      	ldrb	r2, [r7, #15]
 8006236:	6879      	ldr	r1, [r7, #4]
 8006238:	4613      	mov	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	440b      	add	r3, r1
 8006242:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006246:	2200      	movs	r2, #0
 8006248:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800624a:	7bfa      	ldrb	r2, [r7, #15]
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	4613      	mov	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	440b      	add	r3, r1
 8006258:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006260:	7bfa      	ldrb	r2, [r7, #15]
 8006262:	6879      	ldr	r1, [r7, #4]
 8006264:	4613      	mov	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	00db      	lsls	r3, r3, #3
 800626c:	440b      	add	r3, r1
 800626e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	3301      	adds	r3, #1
 800627a:	73fb      	strb	r3, [r7, #15]
 800627c:	7bfa      	ldrb	r2, [r7, #15]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	429a      	cmp	r2, r3
 8006284:	d3b5      	bcc.n	80061f2 <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	687e      	ldr	r6, [r7, #4]
 800628e:	466d      	mov	r5, sp
 8006290:	f106 0410 	add.w	r4, r6, #16
 8006294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006298:	e894 0003 	ldmia.w	r4, {r0, r1}
 800629c:	e885 0003 	stmia.w	r5, {r0, r1}
 80062a0:	1d33      	adds	r3, r6, #4
 80062a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062a4:	6838      	ldr	r0, [r7, #0]
 80062a6:	f003 ff07 	bl	800a0b8 <USB_DevInit>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d005      	beq.n	80062bc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e014      	b.n	80062e6 <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d102      	bne.n	80062da <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f001 fc55 	bl	8007b84 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4618      	mov	r0, r3
 80062e0:	f006 f913 	bl	800c50a <USB_DevDisconnect>

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b082      	sub	sp, #8
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_PCD_Start+0x16>
 8006300:	2302      	movs	r3, #2
 8006302:	e012      	b.n	800632a <HAL_PCD_Start+0x3c>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4618      	mov	r0, r3
 8006312:	f003 fe92 	bl	800a03a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f006 f8de 	bl	800c4dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4618      	mov	r0, r3
 8006340:	f006 f8f8 	bl	800c534 <USB_ReadInterrupts>
 8006344:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fb3e 	bl	80069d2 <PCD_EP_ISR_Handler>

    return;
 8006356:	e110      	b.n	800657a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800635e:	2b00      	cmp	r3, #0
 8006360:	d013      	beq.n	800638a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800636a:	b29a      	uxth	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006374:	b292      	uxth	r2, r2
 8006376:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f008 f83d 	bl	800e3fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006380:	2100      	movs	r1, #0
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f8fc 	bl	8006580 <HAL_PCD_SetAddress>

    return;
 8006388:	e0f7      	b.n	800657a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00c      	beq.n	80063ae <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800639c:	b29a      	uxth	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063a6:	b292      	uxth	r2, r2
 80063a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80063ac:	e0e5      	b.n	800657a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00c      	beq.n	80063d2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063ca:	b292      	uxth	r2, r2
 80063cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80063d0:	e0d3      	b.n	800657a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d034      	beq.n	8006446 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0204 	bic.w	r2, r2, #4
 80063ee:	b292      	uxth	r2, r2
 80063f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0208 	bic.w	r2, r2, #8
 8006406:	b292      	uxth	r2, r2
 8006408:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8006412:	2b01      	cmp	r3, #1
 8006414:	d107      	bne.n	8006426 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800641e:	2100      	movs	r1, #0
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f001 fbd9 	bl	8007bd8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f008 f820 	bl	800e46c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006434:	b29a      	uxth	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800643e:	b292      	uxth	r2, r2
 8006440:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006444:	e099      	b.n	800657a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800644c:	2b00      	cmp	r3, #0
 800644e:	d027      	beq.n	80064a0 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006458:	b29a      	uxth	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 0208 	orr.w	r2, r2, #8
 8006462:	b292      	uxth	r2, r2
 8006464:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006470:	b29a      	uxth	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800647a:	b292      	uxth	r2, r2
 800647c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006488:	b29a      	uxth	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0204 	orr.w	r2, r2, #4
 8006492:	b292      	uxth	r2, r2
 8006494:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f007 ffcd 	bl	800e438 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800649e:	e06c      	b.n	800657a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d040      	beq.n	800652c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064bc:	b292      	uxth	r2, r2
 80064be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d12b      	bne.n	8006524 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0204 	orr.w	r2, r2, #4
 80064de:	b292      	uxth	r2, r2
 80064e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0208 	orr.w	r2, r2, #8
 80064f6:	b292      	uxth	r2, r2
 80064f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800650c:	b29b      	uxth	r3, r3
 800650e:	089b      	lsrs	r3, r3, #2
 8006510:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800651a:	2101      	movs	r1, #1
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f001 fb5b 	bl	8007bd8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006522:	e02a      	b.n	800657a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f007 ff87 	bl	800e438 <HAL_PCD_SuspendCallback>
    return;
 800652a:	e026      	b.n	800657a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00f      	beq.n	8006556 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800653e:	b29a      	uxth	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006548:	b292      	uxth	r2, r2
 800654a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f007 ff45 	bl	800e3de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006554:	e011      	b.n	800657a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00c      	beq.n	800657a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006568:	b29a      	uxth	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006572:	b292      	uxth	r2, r2
 8006574:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006578:	bf00      	nop
  }
}
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	460b      	mov	r3, r1
 800658a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006592:	2b01      	cmp	r3, #1
 8006594:	d101      	bne.n	800659a <HAL_PCD_SetAddress+0x1a>
 8006596:	2302      	movs	r3, #2
 8006598:	e013      	b.n	80065c2 <HAL_PCD_SetAddress+0x42>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	78fa      	ldrb	r2, [r7, #3]
 80065a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	78fa      	ldrb	r2, [r7, #3]
 80065b0:	4611      	mov	r1, r2
 80065b2:	4618      	mov	r0, r3
 80065b4:	f005 ff7e 	bl	800c4b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	4608      	mov	r0, r1
 80065d4:	4611      	mov	r1, r2
 80065d6:	461a      	mov	r2, r3
 80065d8:	4603      	mov	r3, r0
 80065da:	70fb      	strb	r3, [r7, #3]
 80065dc:	460b      	mov	r3, r1
 80065de:	803b      	strh	r3, [r7, #0]
 80065e0:	4613      	mov	r3, r2
 80065e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80065e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	da0f      	bge.n	8006610 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	f003 0307 	and.w	r3, r3, #7
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	4613      	mov	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	4413      	add	r3, r2
 8006604:	3304      	adds	r3, #4
 8006606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2201      	movs	r2, #1
 800660c:	705a      	strb	r2, [r3, #1]
 800660e:	e00f      	b.n	8006630 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006610:	78fb      	ldrb	r3, [r7, #3]
 8006612:	f003 0207 	and.w	r2, r3, #7
 8006616:	4613      	mov	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	00db      	lsls	r3, r3, #3
 800661e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	4413      	add	r3, r2
 8006626:	3304      	adds	r3, #4
 8006628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	b2da      	uxtb	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800663c:	883a      	ldrh	r2, [r7, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	78ba      	ldrb	r2, [r7, #2]
 8006646:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	785b      	ldrb	r3, [r3, #1]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d004      	beq.n	800665a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	b29a      	uxth	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800665a:	78bb      	ldrb	r3, [r7, #2]
 800665c:	2b02      	cmp	r3, #2
 800665e:	d102      	bne.n	8006666 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800666c:	2b01      	cmp	r3, #1
 800666e:	d101      	bne.n	8006674 <HAL_PCD_EP_Open+0xaa>
 8006670:	2302      	movs	r3, #2
 8006672:	e00e      	b.n	8006692 <HAL_PCD_EP_Open+0xc8>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68f9      	ldr	r1, [r7, #12]
 8006682:	4618      	mov	r0, r3
 8006684:	f003 fd3a 	bl	800a0fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8006690:	7afb      	ldrb	r3, [r7, #11]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	460b      	mov	r3, r1
 80066a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80066a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	da0f      	bge.n	80066ce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066ae:	78fb      	ldrb	r3, [r7, #3]
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	1c5a      	adds	r2, r3, #1
 80066b6:	4613      	mov	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4413      	add	r3, r2
 80066bc:	00db      	lsls	r3, r3, #3
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	4413      	add	r3, r2
 80066c2:	3304      	adds	r3, #4
 80066c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2201      	movs	r2, #1
 80066ca:	705a      	strb	r2, [r3, #1]
 80066cc:	e00f      	b.n	80066ee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066ce:	78fb      	ldrb	r3, [r7, #3]
 80066d0:	f003 0207 	and.w	r2, r3, #7
 80066d4:	4613      	mov	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	4413      	add	r3, r2
 80066e4:	3304      	adds	r3, #4
 80066e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80066ee:	78fb      	ldrb	r3, [r7, #3]
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <HAL_PCD_EP_Close+0x6e>
 8006704:	2302      	movs	r3, #2
 8006706:	e00e      	b.n	8006726 <HAL_PCD_EP_Close+0x8c>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68f9      	ldr	r1, [r7, #12]
 8006716:	4618      	mov	r0, r3
 8006718:	f004 f8aa 	bl	800a870 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b086      	sub	sp, #24
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	607a      	str	r2, [r7, #4]
 8006738:	603b      	str	r3, [r7, #0]
 800673a:	460b      	mov	r3, r1
 800673c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800673e:	7afb      	ldrb	r3, [r7, #11]
 8006740:	f003 0207 	and.w	r2, r3, #7
 8006744:	4613      	mov	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	00db      	lsls	r3, r3, #3
 800674c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4413      	add	r3, r2
 8006754:	3304      	adds	r3, #4
 8006756:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	2200      	movs	r2, #0
 8006768:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2200      	movs	r2, #0
 800676e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006770:	7afb      	ldrb	r3, [r7, #11]
 8006772:	f003 0307 	and.w	r3, r3, #7
 8006776:	b2da      	uxtb	r2, r3
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800677c:	7afb      	ldrb	r3, [r7, #11]
 800677e:	f003 0307 	and.w	r3, r3, #7
 8006782:	2b00      	cmp	r3, #0
 8006784:	d106      	bne.n	8006794 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6979      	ldr	r1, [r7, #20]
 800678c:	4618      	mov	r0, r3
 800678e:	f004 fa5c 	bl	800ac4a <USB_EPStartXfer>
 8006792:	e005      	b.n	80067a0 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6979      	ldr	r1, [r7, #20]
 800679a:	4618      	mov	r0, r3
 800679c:	f004 fa55 	bl	800ac4a <USB_EPStartXfer>
  }

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3718      	adds	r7, #24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b083      	sub	sp, #12
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	460b      	mov	r3, r1
 80067b4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80067b6:	78fb      	ldrb	r3, [r7, #3]
 80067b8:	f003 0207 	and.w	r2, r3, #7
 80067bc:	6879      	ldr	r1, [r7, #4]
 80067be:	4613      	mov	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	00db      	lsls	r3, r3, #3
 80067c6:	440b      	add	r3, r1
 80067c8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80067cc:	681b      	ldr	r3, [r3, #0]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b086      	sub	sp, #24
 80067de:	af00      	add	r7, sp, #0
 80067e0:	60f8      	str	r0, [r7, #12]
 80067e2:	607a      	str	r2, [r7, #4]
 80067e4:	603b      	str	r3, [r7, #0]
 80067e6:	460b      	mov	r3, r1
 80067e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067ea:	7afb      	ldrb	r3, [r7, #11]
 80067ec:	f003 0307 	and.w	r3, r3, #7
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	4613      	mov	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4413      	add	r3, r2
 80067fe:	3304      	adds	r3, #4
 8006800:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	2200      	movs	r2, #0
 8006820:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	2201      	movs	r2, #1
 8006826:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006828:	7afb      	ldrb	r3, [r7, #11]
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	b2da      	uxtb	r2, r3
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006834:	7afb      	ldrb	r3, [r7, #11]
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	2b00      	cmp	r3, #0
 800683c:	d106      	bne.n	800684c <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6979      	ldr	r1, [r7, #20]
 8006844:	4618      	mov	r0, r3
 8006846:	f004 fa00 	bl	800ac4a <USB_EPStartXfer>
 800684a:	e005      	b.n	8006858 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6979      	ldr	r1, [r7, #20]
 8006852:	4618      	mov	r0, r3
 8006854:	f004 f9f9 	bl	800ac4a <USB_EPStartXfer>
  }

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b084      	sub	sp, #16
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	460b      	mov	r3, r1
 800686c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800686e:	78fb      	ldrb	r3, [r7, #3]
 8006870:	f003 0207 	and.w	r2, r3, #7
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	429a      	cmp	r2, r3
 800687a:	d901      	bls.n	8006880 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e04e      	b.n	800691e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006880:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006884:	2b00      	cmp	r3, #0
 8006886:	da0f      	bge.n	80068a8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006888:	78fb      	ldrb	r3, [r7, #3]
 800688a:	f003 0307 	and.w	r3, r3, #7
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	4613      	mov	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	00db      	lsls	r3, r3, #3
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	4413      	add	r3, r2
 800689c:	3304      	adds	r3, #4
 800689e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2201      	movs	r2, #1
 80068a4:	705a      	strb	r2, [r3, #1]
 80068a6:	e00d      	b.n	80068c4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80068a8:	78fa      	ldrb	r2, [r7, #3]
 80068aa:	4613      	mov	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	00db      	lsls	r3, r3, #3
 80068b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	4413      	add	r3, r2
 80068ba:	3304      	adds	r3, #4
 80068bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2201      	movs	r2, #1
 80068c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d101      	bne.n	80068e4 <HAL_PCD_EP_SetStall+0x82>
 80068e0:	2302      	movs	r3, #2
 80068e2:	e01c      	b.n	800691e <HAL_PCD_EP_SetStall+0xbc>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68f9      	ldr	r1, [r7, #12]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f005 fcdf 	bl	800c2b6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d108      	bne.n	8006914 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800690c:	4619      	mov	r1, r3
 800690e:	4610      	mov	r0, r2
 8006910:	f005 fe20 	bl	800c554 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	460b      	mov	r3, r1
 8006930:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006932:	78fb      	ldrb	r3, [r7, #3]
 8006934:	f003 020f 	and.w	r2, r3, #15
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	429a      	cmp	r2, r3
 800693e:	d901      	bls.n	8006944 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e042      	b.n	80069ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006944:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006948:	2b00      	cmp	r3, #0
 800694a:	da0f      	bge.n	800696c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800694c:	78fb      	ldrb	r3, [r7, #3]
 800694e:	f003 0307 	and.w	r3, r3, #7
 8006952:	1c5a      	adds	r2, r3, #1
 8006954:	4613      	mov	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	00db      	lsls	r3, r3, #3
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	4413      	add	r3, r2
 8006960:	3304      	adds	r3, #4
 8006962:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2201      	movs	r2, #1
 8006968:	705a      	strb	r2, [r3, #1]
 800696a:	e00f      	b.n	800698c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800696c:	78fb      	ldrb	r3, [r7, #3]
 800696e:	f003 0207 	and.w	r2, r3, #7
 8006972:	4613      	mov	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	00db      	lsls	r3, r3, #3
 800697a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	4413      	add	r3, r2
 8006982:	3304      	adds	r3, #4
 8006984:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006992:	78fb      	ldrb	r3, [r7, #3]
 8006994:	f003 0307 	and.w	r3, r3, #7
 8006998:	b2da      	uxtb	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d101      	bne.n	80069ac <HAL_PCD_EP_ClrStall+0x86>
 80069a8:	2302      	movs	r3, #2
 80069aa:	e00e      	b.n	80069ca <HAL_PCD_EP_ClrStall+0xa4>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68f9      	ldr	r1, [r7, #12]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f005 fccc 	bl	800c358 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b096      	sub	sp, #88	; 0x58
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80069da:	e3a9      	b.n	8007130 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80069e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80069e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	f003 030f 	and.w	r3, r3, #15
 80069f2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80069f6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f040 8169 	bne.w	8006cd2 <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006a00:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a04:	f003 0310 	and.w	r3, r3, #16
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d150      	bne.n	8006aae <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1c:	81fb      	strh	r3, [r7, #14]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	89fb      	ldrh	r3, [r7, #14]
 8006a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	332c      	adds	r3, #44	; 0x2c
 8006a34:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	461a      	mov	r2, r3
 8006a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	4413      	add	r3, r2
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	6812      	ldr	r2, [r2, #0]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a5c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a60:	695a      	ldr	r2, [r3, #20]
 8006a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	441a      	add	r2, r3
 8006a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a6a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f007 fc9b 	bl	800e3aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 8357 	beq.w	8007130 <PCD_EP_ISR_Handler+0x75e>
 8006a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f040 8352 	bne.w	8007130 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	b292      	uxth	r2, r2
 8006aa0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006aac:	e340      	b.n	8007130 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8006ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006ac0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d032      	beq.n	8006b32 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	4413      	add	r3, r2
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	6812      	ldr	r2, [r2, #0]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6818      	ldr	r0, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8006afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b00:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b04:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	f005 fd72 	bl	800c5f0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006b18:	4013      	ands	r3, r2
 8006b1a:	823b      	strh	r3, [r7, #16]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	8a3a      	ldrh	r2, [r7, #16]
 8006b22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b26:	b292      	uxth	r2, r2
 8006b28:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f007 fc10 	bl	800e350 <HAL_PCD_SetupStageCallback>
 8006b30:	e2fe      	b.n	8007130 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006b32:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f280 82fa 	bge.w	8007130 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006b48:	4013      	ands	r3, r2
 8006b4a:	83fb      	strh	r3, [r7, #30]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	8bfa      	ldrh	r2, [r7, #30]
 8006b52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b56:	b292      	uxth	r2, r2
 8006b58:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	461a      	mov	r2, r3
 8006b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	4413      	add	r3, r2
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6812      	ldr	r2, [r2, #0]
 8006b72:	4413      	add	r3, r2
 8006b74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b80:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d019      	beq.n	8006bbe <PCD_EP_ISR_Handler+0x1ec>
 8006b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d015      	beq.n	8006bbe <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6818      	ldr	r0, [r3, #0]
 8006b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b98:	6959      	ldr	r1, [r3, #20]
 8006b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b9c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	f005 fd24 	bl	800c5f0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006baa:	695a      	ldr	r2, [r3, #20]
 8006bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	441a      	add	r2, r3
 8006bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f007 fbdb 	bl	800e374 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006bc8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f040 82ad 	bne.w	8007130 <PCD_EP_ISR_Handler+0x75e>
 8006bd6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006bda:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006bde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006be2:	f000 82a5 	beq.w	8007130 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	61bb      	str	r3, [r7, #24]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	61bb      	str	r3, [r7, #24]
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c04:	617b      	str	r3, [r7, #20]
 8006c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	2b3e      	cmp	r3, #62	; 0x3e
 8006c0c:	d918      	bls.n	8006c40 <PCD_EP_ISR_Handler+0x26e>
 8006c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	095b      	lsrs	r3, r3, #5
 8006c14:	647b      	str	r3, [r7, #68]	; 0x44
 8006c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	f003 031f 	and.w	r3, r3, #31
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d102      	bne.n	8006c28 <PCD_EP_ISR_Handler+0x256>
 8006c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c24:	3b01      	subs	r3, #1
 8006c26:	647b      	str	r3, [r7, #68]	; 0x44
 8006c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	029b      	lsls	r3, r3, #10
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	801a      	strh	r2, [r3, #0]
 8006c3e:	e029      	b.n	8006c94 <PCD_EP_ISR_Handler+0x2c2>
 8006c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d112      	bne.n	8006c6e <PCD_EP_ISR_Handler+0x29c>
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	801a      	strh	r2, [r3, #0]
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	801a      	strh	r2, [r3, #0]
 8006c6c:	e012      	b.n	8006c94 <PCD_EP_ISR_Handler+0x2c2>
 8006c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	085b      	lsrs	r3, r3, #1
 8006c74:	647b      	str	r3, [r7, #68]	; 0x44
 8006c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <PCD_EP_ISR_Handler+0x2b6>
 8006c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c84:	3301      	adds	r3, #1
 8006c86:	647b      	str	r3, [r7, #68]	; 0x44
 8006c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	029b      	lsls	r3, r3, #10
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca4:	827b      	strh	r3, [r7, #18]
 8006ca6:	8a7b      	ldrh	r3, [r7, #18]
 8006ca8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006cac:	827b      	strh	r3, [r7, #18]
 8006cae:	8a7b      	ldrh	r3, [r7, #18]
 8006cb0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006cb4:	827b      	strh	r3, [r7, #18]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	8a7b      	ldrh	r3, [r7, #18]
 8006cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	8013      	strh	r3, [r2, #0]
 8006cd0:	e22e      	b.n	8007130 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006ce6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f280 80f7 	bge.w	8006ede <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006d06:	4013      	ands	r3, r2
 8006d08:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	461a      	mov	r2, r3
 8006d12:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8006d1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d22:	b292      	uxth	r2, r2
 8006d24:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006d26:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	00db      	lsls	r3, r3, #3
 8006d32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	4413      	add	r3, r2
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d40:	7b1b      	ldrb	r3, [r3, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d123      	bne.n	8006d8e <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	461a      	mov	r2, r3
 8006d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	4413      	add	r3, r2
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	6812      	ldr	r2, [r2, #0]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d6a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8006d6e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 808e 	beq.w	8006e94 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6818      	ldr	r0, [r3, #0]
 8006d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d7e:	6959      	ldr	r1, [r3, #20]
 8006d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d82:	88da      	ldrh	r2, [r3, #6]
 8006d84:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d88:	f005 fc32 	bl	800c5f0 <USB_ReadPMA>
 8006d8c:	e082      	b.n	8006e94 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d90:	78db      	ldrb	r3, [r3, #3]
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d10a      	bne.n	8006dac <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006d96:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f9d4 	bl	800714c <HAL_PCD_EP_DB_Receive>
 8006da4:	4603      	mov	r3, r0
 8006da6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006daa:	e073      	b.n	8006e94 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	461a      	mov	r2, r3
 8006db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	441a      	add	r2, r3
 8006dd8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006de8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	461a      	mov	r2, r3
 8006df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d022      	beq.n	8006e50 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	461a      	mov	r2, r3
 8006e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	4413      	add	r3, r2
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6812      	ldr	r2, [r2, #0]
 8006e22:	4413      	add	r3, r2
 8006e24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e2e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006e32:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d02c      	beq.n	8006e94 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6818      	ldr	r0, [r3, #0]
 8006e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e40:	6959      	ldr	r1, [r3, #20]
 8006e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e44:	891a      	ldrh	r2, [r3, #8]
 8006e46:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006e4a:	f005 fbd1 	bl	800c5f0 <USB_ReadPMA>
 8006e4e:	e021      	b.n	8006e94 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	00db      	lsls	r3, r3, #3
 8006e62:	4413      	add	r3, r2
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6812      	ldr	r2, [r2, #0]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e74:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006e78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d009      	beq.n	8006e94 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6818      	ldr	r0, [r3, #0]
 8006e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e86:	6959      	ldr	r1, [r3, #20]
 8006e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e8a:	895a      	ldrh	r2, [r3, #10]
 8006e8c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006e90:	f005 fbae 	bl	800c5f0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e96:	69da      	ldr	r2, [r3, #28]
 8006e98:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006e9c:	441a      	add	r2, r3
 8006e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea4:	695a      	ldr	r2, [r3, #20]
 8006ea6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006eaa:	441a      	add	r2, r3
 8006eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d005      	beq.n	8006ec4 <PCD_EP_ISR_Handler+0x4f2>
 8006eb8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d206      	bcs.n	8006ed2 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f007 fa52 	bl	800e374 <HAL_PCD_DataOutStageCallback>
 8006ed0:	e005      	b.n	8006ede <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f003 feb6 	bl	800ac4a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006ede:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 8122 	beq.w	8007130 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8006eec:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	00db      	lsls	r3, r3, #3
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	4413      	add	r3, r2
 8006efe:	3304      	adds	r3, #4
 8006f00:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	461a      	mov	r2, r3
 8006f08:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	441a      	add	r2, r3
 8006f2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f40:	78db      	ldrb	r3, [r3, #3]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	f040 80a2 	bne.w	800708c <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8006f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f50:	7b1b      	ldrb	r3, [r3, #12]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 8093 	beq.w	800707e <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006f58:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d046      	beq.n	8006ff2 <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f66:	785b      	ldrb	r3, [r3, #1]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d126      	bne.n	8006fba <PCD_EP_ISR_Handler+0x5e8>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	627b      	str	r3, [r7, #36]	; 0x24
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	4413      	add	r3, r2
 8006f82:	627b      	str	r3, [r7, #36]	; 0x24
 8006f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	00da      	lsls	r2, r3, #3
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f92:	623b      	str	r3, [r7, #32]
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	801a      	strh	r2, [r3, #0]
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	801a      	strh	r2, [r3, #0]
 8006fb8:	e061      	b.n	800707e <PCD_EP_ISR_Handler+0x6ac>
 8006fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fbc:	785b      	ldrb	r3, [r3, #1]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d15d      	bne.n	800707e <PCD_EP_ISR_Handler+0x6ac>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd6:	4413      	add	r3, r2
 8006fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	00da      	lsls	r2, r3, #3
 8006fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fec:	2200      	movs	r2, #0
 8006fee:	801a      	strh	r2, [r3, #0]
 8006ff0:	e045      	b.n	800707e <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ffa:	785b      	ldrb	r3, [r3, #1]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d126      	bne.n	800704e <PCD_EP_ISR_Handler+0x67c>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	637b      	str	r3, [r7, #52]	; 0x34
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800700e:	b29b      	uxth	r3, r3
 8007010:	461a      	mov	r2, r3
 8007012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007014:	4413      	add	r3, r2
 8007016:	637b      	str	r3, [r7, #52]	; 0x34
 8007018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	00da      	lsls	r2, r3, #3
 800701e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007020:	4413      	add	r3, r2
 8007022:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007026:	633b      	str	r3, [r7, #48]	; 0x30
 8007028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	b29b      	uxth	r3, r3
 800702e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007032:	b29a      	uxth	r2, r3
 8007034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007036:	801a      	strh	r2, [r3, #0]
 8007038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	b29b      	uxth	r3, r3
 800703e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007046:	b29a      	uxth	r2, r3
 8007048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704a:	801a      	strh	r2, [r3, #0]
 800704c:	e017      	b.n	800707e <PCD_EP_ISR_Handler+0x6ac>
 800704e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007050:	785b      	ldrb	r3, [r3, #1]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d113      	bne.n	800707e <PCD_EP_ISR_Handler+0x6ac>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705e:	b29b      	uxth	r3, r3
 8007060:	461a      	mov	r2, r3
 8007062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007064:	4413      	add	r3, r2
 8007066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	00da      	lsls	r2, r3, #3
 800706e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007070:	4413      	add	r3, r2
 8007072:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007076:	63bb      	str	r3, [r7, #56]	; 0x38
 8007078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707a:	2200      	movs	r2, #0
 800707c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800707e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f007 f990 	bl	800e3aa <HAL_PCD_DataInStageCallback>
 800708a:	e051      	b.n	8007130 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800708c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007094:	2b00      	cmp	r3, #0
 8007096:	d144      	bne.n	8007122 <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	461a      	mov	r2, r3
 80070a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	00db      	lsls	r3, r3, #3
 80070aa:	4413      	add	r3, r2
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6812      	ldr	r2, [r2, #0]
 80070b0:	4413      	add	r3, r2
 80070b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070bc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80070c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c2:	699a      	ldr	r2, [r3, #24]
 80070c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d907      	bls.n	80070dc <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 80070cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ce:	699a      	ldr	r2, [r3, #24]
 80070d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80070d4:	1ad2      	subs	r2, r2, r3
 80070d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d8:	619a      	str	r2, [r3, #24]
 80070da:	e002      	b.n	80070e2 <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 80070dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070de:	2200      	movs	r2, #0
 80070e0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80070e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d106      	bne.n	80070f8 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80070ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f007 f95a 	bl	800e3aa <HAL_PCD_DataInStageCallback>
 80070f6:	e01b      	b.n	8007130 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80070f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070fa:	695a      	ldr	r2, [r3, #20]
 80070fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007100:	441a      	add	r2, r3
 8007102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007104:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007108:	69da      	ldr	r2, [r3, #28]
 800710a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800710e:	441a      	add	r2, r3
 8007110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007112:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800711a:	4618      	mov	r0, r3
 800711c:	f003 fd95 	bl	800ac4a <USB_EPStartXfer>
 8007120:	e006      	b.n	8007130 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007122:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007126:	461a      	mov	r2, r3
 8007128:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f917 	bl	800735e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007138:	b29b      	uxth	r3, r3
 800713a:	b21b      	sxth	r3, r3
 800713c:	2b00      	cmp	r3, #0
 800713e:	f6ff ac4d 	blt.w	80069dc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3758      	adds	r7, #88	; 0x58
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b088      	sub	sp, #32
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	4613      	mov	r3, r2
 8007158:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800715a:	88fb      	ldrh	r3, [r7, #6]
 800715c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d07c      	beq.n	800725e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800716c:	b29b      	uxth	r3, r3
 800716e:	461a      	mov	r2, r3
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	00db      	lsls	r3, r3, #3
 8007176:	4413      	add	r3, r2
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	6812      	ldr	r2, [r2, #0]
 800717c:	4413      	add	r3, r2
 800717e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007188:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	699a      	ldr	r2, [r3, #24]
 800718e:	8b7b      	ldrh	r3, [r7, #26]
 8007190:	429a      	cmp	r2, r3
 8007192:	d306      	bcc.n	80071a2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	699a      	ldr	r2, [r3, #24]
 8007198:	8b7b      	ldrh	r3, [r7, #26]
 800719a:	1ad2      	subs	r2, r2, r3
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	619a      	str	r2, [r3, #24]
 80071a0:	e002      	b.n	80071a8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	2200      	movs	r2, #0
 80071a6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d123      	bne.n	80071f8 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	461a      	mov	r2, r3
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ca:	833b      	strh	r3, [r7, #24]
 80071cc:	8b3b      	ldrh	r3, [r7, #24]
 80071ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071d2:	833b      	strh	r3, [r7, #24]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	461a      	mov	r2, r3
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	441a      	add	r2, r3
 80071e2:	8b3b      	ldrh	r3, [r7, #24]
 80071e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80071f8:	88fb      	ldrh	r3, [r7, #6]
 80071fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d01f      	beq.n	8007242 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	b29b      	uxth	r3, r3
 8007214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800721c:	82fb      	strh	r3, [r7, #22]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	441a      	add	r2, r3
 800722c:	8afb      	ldrh	r3, [r7, #22]
 800722e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800723a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800723e:	b29b      	uxth	r3, r3
 8007240:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007242:	8b7b      	ldrh	r3, [r7, #26]
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 8085 	beq.w	8007354 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6818      	ldr	r0, [r3, #0]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	6959      	ldr	r1, [r3, #20]
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	891a      	ldrh	r2, [r3, #8]
 8007256:	8b7b      	ldrh	r3, [r7, #26]
 8007258:	f005 f9ca 	bl	800c5f0 <USB_ReadPMA>
 800725c:	e07a      	b.n	8007354 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007266:	b29b      	uxth	r3, r3
 8007268:	461a      	mov	r2, r3
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	00db      	lsls	r3, r3, #3
 8007270:	4413      	add	r3, r2
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	6812      	ldr	r2, [r2, #0]
 8007276:	4413      	add	r3, r2
 8007278:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007282:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	699a      	ldr	r2, [r3, #24]
 8007288:	8b7b      	ldrh	r3, [r7, #26]
 800728a:	429a      	cmp	r2, r3
 800728c:	d306      	bcc.n	800729c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	699a      	ldr	r2, [r3, #24]
 8007292:	8b7b      	ldrh	r3, [r7, #26]
 8007294:	1ad2      	subs	r2, r2, r3
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	619a      	str	r2, [r3, #24]
 800729a:	e002      	b.n	80072a2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2200      	movs	r2, #0
 80072a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d123      	bne.n	80072f2 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c4:	83fb      	strh	r3, [r7, #30]
 80072c6:	8bfb      	ldrh	r3, [r7, #30]
 80072c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80072cc:	83fb      	strh	r3, [r7, #30]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	441a      	add	r2, r3
 80072dc:	8bfb      	ldrh	r3, [r7, #30]
 80072de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80072f2:	88fb      	ldrh	r3, [r7, #6]
 80072f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d11f      	bne.n	800733c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	461a      	mov	r2, r3
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	b29b      	uxth	r3, r3
 800730e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007316:	83bb      	strh	r3, [r7, #28]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	461a      	mov	r2, r3
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	441a      	add	r2, r3
 8007326:	8bbb      	ldrh	r3, [r7, #28]
 8007328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800732c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007334:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007338:	b29b      	uxth	r3, r3
 800733a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800733c:	8b7b      	ldrh	r3, [r7, #26]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d008      	beq.n	8007354 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6818      	ldr	r0, [r3, #0]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	6959      	ldr	r1, [r3, #20]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	895a      	ldrh	r2, [r3, #10]
 800734e:	8b7b      	ldrh	r3, [r7, #26]
 8007350:	f005 f94e 	bl	800c5f0 <USB_ReadPMA>
    }
  }

  return count;
 8007354:	8b7b      	ldrh	r3, [r7, #26]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3720      	adds	r7, #32
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b0a2      	sub	sp, #136	; 0x88
 8007362:	af00      	add	r7, sp, #0
 8007364:	60f8      	str	r0, [r7, #12]
 8007366:	60b9      	str	r1, [r7, #8]
 8007368:	4613      	mov	r3, r2
 800736a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800736c:	88fb      	ldrh	r3, [r7, #6]
 800736e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 81c5 	beq.w	8007702 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007380:	b29b      	uxth	r3, r3
 8007382:	461a      	mov	r2, r3
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	00db      	lsls	r3, r3, #3
 800738a:	4413      	add	r3, r2
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	6812      	ldr	r2, [r2, #0]
 8007390:	4413      	add	r3, r2
 8007392:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800739c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	699a      	ldr	r2, [r3, #24]
 80073a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d907      	bls.n	80073bc <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	699a      	ldr	r2, [r3, #24]
 80073b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073b4:	1ad2      	subs	r2, r2, r3
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	619a      	str	r2, [r3, #24]
 80073ba:	e002      	b.n	80073c2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	2200      	movs	r2, #0
 80073c0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f040 80b9 	bne.w	800753e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	785b      	ldrb	r3, [r3, #1]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d126      	bne.n	8007422 <HAL_PCD_EP_DB_Transmit+0xc4>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	461a      	mov	r2, r3
 80073e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e8:	4413      	add	r3, r2
 80073ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	00da      	lsls	r2, r3, #3
 80073f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f4:	4413      	add	r3, r2
 80073f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073fa:	627b      	str	r3, [r7, #36]	; 0x24
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	b29b      	uxth	r3, r3
 8007402:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007406:	b29a      	uxth	r2, r3
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	801a      	strh	r2, [r3, #0]
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	b29b      	uxth	r3, r3
 8007412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800741a:	b29a      	uxth	r2, r3
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	801a      	strh	r2, [r3, #0]
 8007420:	e01a      	b.n	8007458 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	785b      	ldrb	r3, [r3, #1]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d116      	bne.n	8007458 <HAL_PCD_EP_DB_Transmit+0xfa>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	633b      	str	r3, [r7, #48]	; 0x30
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007438:	b29b      	uxth	r3, r3
 800743a:	461a      	mov	r2, r3
 800743c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743e:	4413      	add	r3, r2
 8007440:	633b      	str	r3, [r7, #48]	; 0x30
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	00da      	lsls	r2, r3, #3
 8007448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744a:	4413      	add	r3, r2
 800744c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007454:	2200      	movs	r2, #0
 8007456:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	623b      	str	r3, [r7, #32]
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	785b      	ldrb	r3, [r3, #1]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d126      	bne.n	80074b4 <HAL_PCD_EP_DB_Transmit+0x156>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	61bb      	str	r3, [r7, #24]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007474:	b29b      	uxth	r3, r3
 8007476:	461a      	mov	r2, r3
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	4413      	add	r3, r2
 800747c:	61bb      	str	r3, [r7, #24]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	00da      	lsls	r2, r3, #3
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	4413      	add	r3, r2
 8007488:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800748c:	617b      	str	r3, [r7, #20]
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	b29b      	uxth	r3, r3
 8007494:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007498:	b29a      	uxth	r2, r3
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	801a      	strh	r2, [r3, #0]
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	801a      	strh	r2, [r3, #0]
 80074b2:	e017      	b.n	80074e4 <HAL_PCD_EP_DB_Transmit+0x186>
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	785b      	ldrb	r3, [r3, #1]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d113      	bne.n	80074e4 <HAL_PCD_EP_DB_Transmit+0x186>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	461a      	mov	r2, r3
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	4413      	add	r3, r2
 80074cc:	623b      	str	r3, [r7, #32]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	00da      	lsls	r2, r3, #3
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	4413      	add	r3, r2
 80074d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074dc:	61fb      	str	r3, [r7, #28]
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	2200      	movs	r2, #0
 80074e2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	4619      	mov	r1, r3
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f006 ff5d 	bl	800e3aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80074f0:	88fb      	ldrh	r3, [r7, #6]
 80074f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f000 82d2 	beq.w	8007aa0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	b29b      	uxth	r3, r3
 800750e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007516:	827b      	strh	r3, [r7, #18]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	461a      	mov	r2, r3
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	441a      	add	r2, r3
 8007526:	8a7b      	ldrh	r3, [r7, #18]
 8007528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800752c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007530:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007538:	b29b      	uxth	r3, r3
 800753a:	8013      	strh	r3, [r2, #0]
 800753c:	e2b0      	b.n	8007aa0 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800753e:	88fb      	ldrh	r3, [r7, #6]
 8007540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d021      	beq.n	800758c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	461a      	mov	r2, r3
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	b29b      	uxth	r3, r3
 800755a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800755e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007562:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	441a      	add	r2, r3
 8007574:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800757c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007580:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007588:	b29b      	uxth	r3, r3
 800758a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007592:	2b01      	cmp	r3, #1
 8007594:	f040 8284 	bne.w	8007aa0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	695a      	ldr	r2, [r3, #20]
 800759c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075a0:	441a      	add	r2, r3
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	69da      	ldr	r2, [r3, #28]
 80075aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075ae:	441a      	add	r2, r3
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	6a1a      	ldr	r2, [r3, #32]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d309      	bcc.n	80075d4 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	6a1a      	ldr	r2, [r3, #32]
 80075ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075cc:	1ad2      	subs	r2, r2, r3
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	621a      	str	r2, [r3, #32]
 80075d2:	e015      	b.n	8007600 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d107      	bne.n	80075ec <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80075dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075e0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80075ea:	e009      	b.n	8007600 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2200      	movs	r2, #0
 80075fe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	785b      	ldrb	r3, [r3, #1]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d155      	bne.n	80076b4 <HAL_PCD_EP_DB_Transmit+0x356>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	63bb      	str	r3, [r7, #56]	; 0x38
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007616:	b29b      	uxth	r3, r3
 8007618:	461a      	mov	r2, r3
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	4413      	add	r3, r2
 800761e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	00da      	lsls	r2, r3, #3
 8007626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007628:	4413      	add	r3, r2
 800762a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800762e:	637b      	str	r3, [r7, #52]	; 0x34
 8007630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007632:	2b3e      	cmp	r3, #62	; 0x3e
 8007634:	d916      	bls.n	8007664 <HAL_PCD_EP_DB_Transmit+0x306>
 8007636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007638:	095b      	lsrs	r3, r3, #5
 800763a:	64bb      	str	r3, [r7, #72]	; 0x48
 800763c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800763e:	f003 031f 	and.w	r3, r3, #31
 8007642:	2b00      	cmp	r3, #0
 8007644:	d102      	bne.n	800764c <HAL_PCD_EP_DB_Transmit+0x2ee>
 8007646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007648:	3b01      	subs	r3, #1
 800764a:	64bb      	str	r3, [r7, #72]	; 0x48
 800764c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800764e:	b29b      	uxth	r3, r3
 8007650:	029b      	lsls	r3, r3, #10
 8007652:	b29b      	uxth	r3, r3
 8007654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800765c:	b29a      	uxth	r2, r3
 800765e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007660:	801a      	strh	r2, [r3, #0]
 8007662:	e043      	b.n	80076ec <HAL_PCD_EP_DB_Transmit+0x38e>
 8007664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007666:	2b00      	cmp	r3, #0
 8007668:	d112      	bne.n	8007690 <HAL_PCD_EP_DB_Transmit+0x332>
 800766a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b29b      	uxth	r3, r3
 8007670:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007674:	b29a      	uxth	r2, r3
 8007676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007678:	801a      	strh	r2, [r3, #0]
 800767a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	b29b      	uxth	r3, r3
 8007680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007688:	b29a      	uxth	r2, r3
 800768a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768c:	801a      	strh	r2, [r3, #0]
 800768e:	e02d      	b.n	80076ec <HAL_PCD_EP_DB_Transmit+0x38e>
 8007690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007692:	085b      	lsrs	r3, r3, #1
 8007694:	64bb      	str	r3, [r7, #72]	; 0x48
 8007696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <HAL_PCD_EP_DB_Transmit+0x348>
 80076a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076a2:	3301      	adds	r3, #1
 80076a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80076a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	029b      	lsls	r3, r3, #10
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b0:	801a      	strh	r2, [r3, #0]
 80076b2:	e01b      	b.n	80076ec <HAL_PCD_EP_DB_Transmit+0x38e>
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	785b      	ldrb	r3, [r3, #1]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d117      	bne.n	80076ec <HAL_PCD_EP_DB_Transmit+0x38e>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	643b      	str	r3, [r7, #64]	; 0x40
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	461a      	mov	r2, r3
 80076ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076d0:	4413      	add	r3, r2
 80076d2:	643b      	str	r3, [r7, #64]	; 0x40
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	00da      	lsls	r2, r3, #3
 80076da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076dc:	4413      	add	r3, r2
 80076de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ea:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6818      	ldr	r0, [r3, #0]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	6959      	ldr	r1, [r3, #20]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	891a      	ldrh	r2, [r3, #8]
 80076f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	f004 ff36 	bl	800c56c <USB_WritePMA>
 8007700:	e1ce      	b.n	8007aa0 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800770a:	b29b      	uxth	r3, r3
 800770c:	461a      	mov	r2, r3
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	4413      	add	r3, r2
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	6812      	ldr	r2, [r2, #0]
 800771a:	4413      	add	r3, r2
 800771c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007726:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	699a      	ldr	r2, [r3, #24]
 800772e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007732:	429a      	cmp	r2, r3
 8007734:	d307      	bcc.n	8007746 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	699a      	ldr	r2, [r3, #24]
 800773a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800773e:	1ad2      	subs	r2, r2, r3
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	619a      	str	r2, [r3, #24]
 8007744:	e002      	b.n	800774c <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2200      	movs	r2, #0
 800774a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	2b00      	cmp	r3, #0
 8007752:	f040 80c4 	bne.w	80078de <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	785b      	ldrb	r3, [r3, #1]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d126      	bne.n	80077ac <HAL_PCD_EP_DB_Transmit+0x44e>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	66bb      	str	r3, [r7, #104]	; 0x68
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800776c:	b29b      	uxth	r3, r3
 800776e:	461a      	mov	r2, r3
 8007770:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007772:	4413      	add	r3, r2
 8007774:	66bb      	str	r3, [r7, #104]	; 0x68
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	00da      	lsls	r2, r3, #3
 800777c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800777e:	4413      	add	r3, r2
 8007780:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007784:	667b      	str	r3, [r7, #100]	; 0x64
 8007786:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	b29b      	uxth	r3, r3
 800778c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007790:	b29a      	uxth	r2, r3
 8007792:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007794:	801a      	strh	r2, [r3, #0]
 8007796:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007798:	881b      	ldrh	r3, [r3, #0]
 800779a:	b29b      	uxth	r3, r3
 800779c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077a8:	801a      	strh	r2, [r3, #0]
 80077aa:	e01a      	b.n	80077e2 <HAL_PCD_EP_DB_Transmit+0x484>
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	785b      	ldrb	r3, [r3, #1]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d116      	bne.n	80077e2 <HAL_PCD_EP_DB_Transmit+0x484>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	673b      	str	r3, [r7, #112]	; 0x70
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	461a      	mov	r2, r3
 80077c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077c8:	4413      	add	r3, r2
 80077ca:	673b      	str	r3, [r7, #112]	; 0x70
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	00da      	lsls	r2, r3, #3
 80077d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077d4:	4413      	add	r3, r2
 80077d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077de:	2200      	movs	r2, #0
 80077e0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	785b      	ldrb	r3, [r3, #1]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d12f      	bne.n	8007850 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007800:	b29b      	uxth	r3, r3
 8007802:	461a      	mov	r2, r3
 8007804:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007808:	4413      	add	r3, r2
 800780a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	00da      	lsls	r2, r3, #3
 8007814:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007818:	4413      	add	r3, r2
 800781a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800781e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007822:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007826:	881b      	ldrh	r3, [r3, #0]
 8007828:	b29b      	uxth	r3, r3
 800782a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800782e:	b29a      	uxth	r2, r3
 8007830:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007834:	801a      	strh	r2, [r3, #0]
 8007836:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	b29b      	uxth	r3, r3
 800783e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007846:	b29a      	uxth	r2, r3
 8007848:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800784c:	801a      	strh	r2, [r3, #0]
 800784e:	e017      	b.n	8007880 <HAL_PCD_EP_DB_Transmit+0x522>
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	785b      	ldrb	r3, [r3, #1]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d113      	bne.n	8007880 <HAL_PCD_EP_DB_Transmit+0x522>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007860:	b29b      	uxth	r3, r3
 8007862:	461a      	mov	r2, r3
 8007864:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007866:	4413      	add	r3, r2
 8007868:	67fb      	str	r3, [r7, #124]	; 0x7c
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	00da      	lsls	r2, r3, #3
 8007870:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007872:	4413      	add	r3, r2
 8007874:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007878:	67bb      	str	r3, [r7, #120]	; 0x78
 800787a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800787c:	2200      	movs	r2, #0
 800787e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	4619      	mov	r1, r3
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f006 fd8f 	bl	800e3aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800788c:	88fb      	ldrh	r3, [r7, #6]
 800788e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007892:	2b00      	cmp	r3, #0
 8007894:	f040 8104 	bne.w	8007aa0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	881b      	ldrh	r3, [r3, #0]
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	441a      	add	r2, r3
 80078c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80078c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d8:	b29b      	uxth	r3, r3
 80078da:	8013      	strh	r3, [r2, #0]
 80078dc:	e0e0      	b.n	8007aa0 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80078de:	88fb      	ldrh	r3, [r7, #6]
 80078e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d121      	bne.n	800792c <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	461a      	mov	r2, r3
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	881b      	ldrh	r3, [r3, #0]
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007902:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	461a      	mov	r2, r3
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	441a      	add	r2, r3
 8007914:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800791c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007920:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007928:	b29b      	uxth	r3, r3
 800792a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007932:	2b01      	cmp	r3, #1
 8007934:	f040 80b4 	bne.w	8007aa0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	695a      	ldr	r2, [r3, #20]
 800793c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007940:	441a      	add	r2, r3
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	69da      	ldr	r2, [r3, #28]
 800794a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800794e:	441a      	add	r2, r3
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	6a1a      	ldr	r2, [r3, #32]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	429a      	cmp	r2, r3
 800795e:	d309      	bcc.n	8007974 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	6a1a      	ldr	r2, [r3, #32]
 800796a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800796c:	1ad2      	subs	r2, r2, r3
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	621a      	str	r2, [r3, #32]
 8007972:	e015      	b.n	80079a0 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d107      	bne.n	800798c <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800797c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007980:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800798a:	e009      	b.n	80079a0 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2200      	movs	r2, #0
 8007996:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	663b      	str	r3, [r7, #96]	; 0x60
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	785b      	ldrb	r3, [r3, #1]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d155      	bne.n	8007a5a <HAL_PCD_EP_DB_Transmit+0x6fc>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079bc:	b29b      	uxth	r3, r3
 80079be:	461a      	mov	r2, r3
 80079c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079c2:	4413      	add	r3, r2
 80079c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	00da      	lsls	r2, r3, #3
 80079cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079ce:	4413      	add	r3, r2
 80079d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079d4:	657b      	str	r3, [r7, #84]	; 0x54
 80079d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079d8:	2b3e      	cmp	r3, #62	; 0x3e
 80079da:	d916      	bls.n	8007a0a <HAL_PCD_EP_DB_Transmit+0x6ac>
 80079dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	677b      	str	r3, [r7, #116]	; 0x74
 80079e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079e4:	f003 031f 	and.w	r3, r3, #31
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d102      	bne.n	80079f2 <HAL_PCD_EP_DB_Transmit+0x694>
 80079ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079ee:	3b01      	subs	r3, #1
 80079f0:	677b      	str	r3, [r7, #116]	; 0x74
 80079f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	029b      	lsls	r3, r3, #10
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a06:	801a      	strh	r2, [r3, #0]
 8007a08:	e040      	b.n	8007a8c <HAL_PCD_EP_DB_Transmit+0x72e>
 8007a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d112      	bne.n	8007a36 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8007a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a12:	881b      	ldrh	r3, [r3, #0]
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a1e:	801a      	strh	r2, [r3, #0]
 8007a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a22:	881b      	ldrh	r3, [r3, #0]
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a32:	801a      	strh	r2, [r3, #0]
 8007a34:	e02a      	b.n	8007a8c <HAL_PCD_EP_DB_Transmit+0x72e>
 8007a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a38:	085b      	lsrs	r3, r3, #1
 8007a3a:	677b      	str	r3, [r7, #116]	; 0x74
 8007a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d002      	beq.n	8007a4c <HAL_PCD_EP_DB_Transmit+0x6ee>
 8007a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a48:	3301      	adds	r3, #1
 8007a4a:	677b      	str	r3, [r7, #116]	; 0x74
 8007a4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	029b      	lsls	r3, r3, #10
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a56:	801a      	strh	r2, [r3, #0]
 8007a58:	e018      	b.n	8007a8c <HAL_PCD_EP_DB_Transmit+0x72e>
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	785b      	ldrb	r3, [r3, #1]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d114      	bne.n	8007a8c <HAL_PCD_EP_DB_Transmit+0x72e>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a70:	4413      	add	r3, r2
 8007a72:	663b      	str	r3, [r7, #96]	; 0x60
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	00da      	lsls	r2, r3, #3
 8007a7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a8a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6818      	ldr	r0, [r3, #0]
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	6959      	ldr	r1, [r3, #20]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	895a      	ldrh	r2, [r3, #10]
 8007a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	f004 fd66 	bl	800c56c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aba:	823b      	strh	r3, [r7, #16]
 8007abc:	8a3b      	ldrh	r3, [r7, #16]
 8007abe:	f083 0310 	eor.w	r3, r3, #16
 8007ac2:	823b      	strh	r3, [r7, #16]
 8007ac4:	8a3b      	ldrh	r3, [r7, #16]
 8007ac6:	f083 0320 	eor.w	r3, r3, #32
 8007aca:	823b      	strh	r3, [r7, #16]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	441a      	add	r2, r3
 8007ada:	8a3b      	ldrh	r3, [r7, #16]
 8007adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3788      	adds	r7, #136	; 0x88
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b087      	sub	sp, #28
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	607b      	str	r3, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	817b      	strh	r3, [r7, #10]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007b0c:	897b      	ldrh	r3, [r7, #10]
 8007b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00c      	beq.n	8007b32 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b18:	897b      	ldrh	r3, [r7, #10]
 8007b1a:	f003 0307 	and.w	r3, r3, #7
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	4613      	mov	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	00db      	lsls	r3, r3, #3
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	617b      	str	r3, [r7, #20]
 8007b30:	e00a      	b.n	8007b48 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007b32:	897a      	ldrh	r2, [r7, #10]
 8007b34:	4613      	mov	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	00db      	lsls	r3, r3, #3
 8007b3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	4413      	add	r3, r2
 8007b44:	3304      	adds	r3, #4
 8007b46:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007b48:	893b      	ldrh	r3, [r7, #8]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d107      	bne.n	8007b5e <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2200      	movs	r2, #0
 8007b52:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	80da      	strh	r2, [r3, #6]
 8007b5c:	e00b      	b.n	8007b76 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	2201      	movs	r2, #1
 8007b62:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	0c1b      	lsrs	r3, r3, #16
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	371c      	adds	r7, #28
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	f043 0301 	orr.w	r3, r3, #1
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	f043 0302 	orr.w	r3, r3, #2
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	460b      	mov	r3, r1
 8007be2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007bf4:	4b04      	ldr	r3, [pc, #16]	; (8007c08 <HAL_PWREx_GetVoltageRange+0x18>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	40007000 	.word	0x40007000

08007c0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c1a:	d130      	bne.n	8007c7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c1c:	4b23      	ldr	r3, [pc, #140]	; (8007cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c28:	d038      	beq.n	8007c9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c2a:	4b20      	ldr	r3, [pc, #128]	; (8007cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007c32:	4a1e      	ldr	r2, [pc, #120]	; (8007cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c3a:	4b1d      	ldr	r3, [pc, #116]	; (8007cb0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2232      	movs	r2, #50	; 0x32
 8007c40:	fb02 f303 	mul.w	r3, r2, r3
 8007c44:	4a1b      	ldr	r2, [pc, #108]	; (8007cb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007c46:	fba2 2303 	umull	r2, r3, r2, r3
 8007c4a:	0c9b      	lsrs	r3, r3, #18
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c50:	e002      	b.n	8007c58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	3b01      	subs	r3, #1
 8007c56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c58:	4b14      	ldr	r3, [pc, #80]	; (8007cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c5a:	695b      	ldr	r3, [r3, #20]
 8007c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c64:	d102      	bne.n	8007c6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1f2      	bne.n	8007c52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c6c:	4b0f      	ldr	r3, [pc, #60]	; (8007cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c78:	d110      	bne.n	8007c9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e00f      	b.n	8007c9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c7e:	4b0b      	ldr	r3, [pc, #44]	; (8007cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c8a:	d007      	beq.n	8007c9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007c8c:	4b07      	ldr	r3, [pc, #28]	; (8007cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007c94:	4a05      	ldr	r2, [pc, #20]	; (8007cac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007c9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	40007000 	.word	0x40007000
 8007cb0:	20000000 	.word	0x20000000
 8007cb4:	431bde83 	.word	0x431bde83

08007cb8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007cbc:	4b05      	ldr	r3, [pc, #20]	; (8007cd4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	4a04      	ldr	r2, [pc, #16]	; (8007cd4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007cc6:	6053      	str	r3, [r2, #4]
}
 8007cc8:	bf00      	nop
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	40007000 	.word	0x40007000

08007cd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d102      	bne.n	8007cec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	f000 bc02 	b.w	80084f0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cec:	4b96      	ldr	r3, [pc, #600]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f003 030c 	and.w	r3, r3, #12
 8007cf4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007cf6:	4b94      	ldr	r3, [pc, #592]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	f003 0303 	and.w	r3, r3, #3
 8007cfe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0310 	and.w	r3, r3, #16
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f000 80e4 	beq.w	8007ed6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d007      	beq.n	8007d24 <HAL_RCC_OscConfig+0x4c>
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	2b0c      	cmp	r3, #12
 8007d18:	f040 808b 	bne.w	8007e32 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	f040 8087 	bne.w	8007e32 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007d24:	4b88      	ldr	r3, [pc, #544]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d005      	beq.n	8007d3c <HAL_RCC_OscConfig+0x64>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d101      	bne.n	8007d3c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e3d9      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a1a      	ldr	r2, [r3, #32]
 8007d40:	4b81      	ldr	r3, [pc, #516]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0308 	and.w	r3, r3, #8
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d004      	beq.n	8007d56 <HAL_RCC_OscConfig+0x7e>
 8007d4c:	4b7e      	ldr	r3, [pc, #504]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d54:	e005      	b.n	8007d62 <HAL_RCC_OscConfig+0x8a>
 8007d56:	4b7c      	ldr	r3, [pc, #496]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d5c:	091b      	lsrs	r3, r3, #4
 8007d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d223      	bcs.n	8007dae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 fd54 	bl	8008818 <RCC_SetFlashLatencyFromMSIRange>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e3ba      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007d7a:	4b73      	ldr	r3, [pc, #460]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a72      	ldr	r2, [pc, #456]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007d80:	f043 0308 	orr.w	r3, r3, #8
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	4b70      	ldr	r3, [pc, #448]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a1b      	ldr	r3, [r3, #32]
 8007d92:	496d      	ldr	r1, [pc, #436]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007d94:	4313      	orrs	r3, r2
 8007d96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007d98:	4b6b      	ldr	r3, [pc, #428]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	69db      	ldr	r3, [r3, #28]
 8007da4:	021b      	lsls	r3, r3, #8
 8007da6:	4968      	ldr	r1, [pc, #416]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007da8:	4313      	orrs	r3, r2
 8007daa:	604b      	str	r3, [r1, #4]
 8007dac:	e025      	b.n	8007dfa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007dae:	4b66      	ldr	r3, [pc, #408]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a65      	ldr	r2, [pc, #404]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007db4:	f043 0308 	orr.w	r3, r3, #8
 8007db8:	6013      	str	r3, [r2, #0]
 8007dba:	4b63      	ldr	r3, [pc, #396]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	4960      	ldr	r1, [pc, #384]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007dcc:	4b5e      	ldr	r3, [pc, #376]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	69db      	ldr	r3, [r3, #28]
 8007dd8:	021b      	lsls	r3, r3, #8
 8007dda:	495b      	ldr	r1, [pc, #364]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d109      	bne.n	8007dfa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 fd14 	bl	8008818 <RCC_SetFlashLatencyFromMSIRange>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e37a      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007dfa:	f000 fc81 	bl	8008700 <HAL_RCC_GetSysClockFreq>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	4b51      	ldr	r3, [pc, #324]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	091b      	lsrs	r3, r3, #4
 8007e06:	f003 030f 	and.w	r3, r3, #15
 8007e0a:	4950      	ldr	r1, [pc, #320]	; (8007f4c <HAL_RCC_OscConfig+0x274>)
 8007e0c:	5ccb      	ldrb	r3, [r1, r3]
 8007e0e:	f003 031f 	and.w	r3, r3, #31
 8007e12:	fa22 f303 	lsr.w	r3, r2, r3
 8007e16:	4a4e      	ldr	r2, [pc, #312]	; (8007f50 <HAL_RCC_OscConfig+0x278>)
 8007e18:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007e1a:	4b4e      	ldr	r3, [pc, #312]	; (8007f54 <HAL_RCC_OscConfig+0x27c>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fc f93e 	bl	80040a0 <HAL_InitTick>
 8007e24:	4603      	mov	r3, r0
 8007e26:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d052      	beq.n	8007ed4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007e2e:	7bfb      	ldrb	r3, [r7, #15]
 8007e30:	e35e      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d032      	beq.n	8007ea0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007e3a:	4b43      	ldr	r3, [pc, #268]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a42      	ldr	r2, [pc, #264]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007e40:	f043 0301 	orr.w	r3, r3, #1
 8007e44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007e46:	f7fc f97b 	bl	8004140 <HAL_GetTick>
 8007e4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007e4c:	e008      	b.n	8007e60 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007e4e:	f7fc f977 	bl	8004140 <HAL_GetTick>
 8007e52:	4602      	mov	r2, r0
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d901      	bls.n	8007e60 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e347      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007e60:	4b39      	ldr	r3, [pc, #228]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0302 	and.w	r3, r3, #2
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d0f0      	beq.n	8007e4e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007e6c:	4b36      	ldr	r3, [pc, #216]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a35      	ldr	r2, [pc, #212]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007e72:	f043 0308 	orr.w	r3, r3, #8
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	4b33      	ldr	r3, [pc, #204]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a1b      	ldr	r3, [r3, #32]
 8007e84:	4930      	ldr	r1, [pc, #192]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007e8a:	4b2f      	ldr	r3, [pc, #188]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	69db      	ldr	r3, [r3, #28]
 8007e96:	021b      	lsls	r3, r3, #8
 8007e98:	492b      	ldr	r1, [pc, #172]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	604b      	str	r3, [r1, #4]
 8007e9e:	e01a      	b.n	8007ed6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007ea0:	4b29      	ldr	r3, [pc, #164]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a28      	ldr	r2, [pc, #160]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007ea6:	f023 0301 	bic.w	r3, r3, #1
 8007eaa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007eac:	f7fc f948 	bl	8004140 <HAL_GetTick>
 8007eb0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007eb2:	e008      	b.n	8007ec6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007eb4:	f7fc f944 	bl	8004140 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d901      	bls.n	8007ec6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e314      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007ec6:	4b20      	ldr	r3, [pc, #128]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0302 	and.w	r3, r3, #2
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1f0      	bne.n	8007eb4 <HAL_RCC_OscConfig+0x1dc>
 8007ed2:	e000      	b.n	8007ed6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007ed4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d073      	beq.n	8007fca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	2b08      	cmp	r3, #8
 8007ee6:	d005      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x21c>
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	2b0c      	cmp	r3, #12
 8007eec:	d10e      	bne.n	8007f0c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2b03      	cmp	r3, #3
 8007ef2:	d10b      	bne.n	8007f0c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ef4:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d063      	beq.n	8007fc8 <HAL_RCC_OscConfig+0x2f0>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d15f      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e2f1      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f14:	d106      	bne.n	8007f24 <HAL_RCC_OscConfig+0x24c>
 8007f16:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a0b      	ldr	r2, [pc, #44]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f20:	6013      	str	r3, [r2, #0]
 8007f22:	e025      	b.n	8007f70 <HAL_RCC_OscConfig+0x298>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f2c:	d114      	bne.n	8007f58 <HAL_RCC_OscConfig+0x280>
 8007f2e:	4b06      	ldr	r3, [pc, #24]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a05      	ldr	r2, [pc, #20]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f38:	6013      	str	r3, [r2, #0]
 8007f3a:	4b03      	ldr	r3, [pc, #12]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a02      	ldr	r2, [pc, #8]	; (8007f48 <HAL_RCC_OscConfig+0x270>)
 8007f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f44:	6013      	str	r3, [r2, #0]
 8007f46:	e013      	b.n	8007f70 <HAL_RCC_OscConfig+0x298>
 8007f48:	40021000 	.word	0x40021000
 8007f4c:	0800ed2c 	.word	0x0800ed2c
 8007f50:	20000000 	.word	0x20000000
 8007f54:	20000004 	.word	0x20000004
 8007f58:	4ba0      	ldr	r3, [pc, #640]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a9f      	ldr	r2, [pc, #636]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 8007f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f62:	6013      	str	r3, [r2, #0]
 8007f64:	4b9d      	ldr	r3, [pc, #628]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a9c      	ldr	r2, [pc, #624]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 8007f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d013      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f78:	f7fc f8e2 	bl	8004140 <HAL_GetTick>
 8007f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f7e:	e008      	b.n	8007f92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f80:	f7fc f8de 	bl	8004140 <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	2b64      	cmp	r3, #100	; 0x64
 8007f8c:	d901      	bls.n	8007f92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e2ae      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f92:	4b92      	ldr	r3, [pc, #584]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d0f0      	beq.n	8007f80 <HAL_RCC_OscConfig+0x2a8>
 8007f9e:	e014      	b.n	8007fca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fa0:	f7fc f8ce 	bl	8004140 <HAL_GetTick>
 8007fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007fa6:	e008      	b.n	8007fba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fa8:	f7fc f8ca 	bl	8004140 <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	2b64      	cmp	r3, #100	; 0x64
 8007fb4:	d901      	bls.n	8007fba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e29a      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007fba:	4b88      	ldr	r3, [pc, #544]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1f0      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x2d0>
 8007fc6:	e000      	b.n	8007fca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0302 	and.w	r3, r3, #2
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d060      	beq.n	8008098 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	2b04      	cmp	r3, #4
 8007fda:	d005      	beq.n	8007fe8 <HAL_RCC_OscConfig+0x310>
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	2b0c      	cmp	r3, #12
 8007fe0:	d119      	bne.n	8008016 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d116      	bne.n	8008016 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fe8:	4b7c      	ldr	r3, [pc, #496]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d005      	beq.n	8008000 <HAL_RCC_OscConfig+0x328>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e277      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008000:	4b76      	ldr	r3, [pc, #472]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	061b      	lsls	r3, r3, #24
 800800e:	4973      	ldr	r1, [pc, #460]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 8008010:	4313      	orrs	r3, r2
 8008012:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008014:	e040      	b.n	8008098 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d023      	beq.n	8008066 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800801e:	4b6f      	ldr	r3, [pc, #444]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a6e      	ldr	r2, [pc, #440]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 8008024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800802a:	f7fc f889 	bl	8004140 <HAL_GetTick>
 800802e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008030:	e008      	b.n	8008044 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008032:	f7fc f885 	bl	8004140 <HAL_GetTick>
 8008036:	4602      	mov	r2, r0
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	2b02      	cmp	r3, #2
 800803e:	d901      	bls.n	8008044 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e255      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008044:	4b65      	ldr	r3, [pc, #404]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800804c:	2b00      	cmp	r3, #0
 800804e:	d0f0      	beq.n	8008032 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008050:	4b62      	ldr	r3, [pc, #392]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	061b      	lsls	r3, r3, #24
 800805e:	495f      	ldr	r1, [pc, #380]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 8008060:	4313      	orrs	r3, r2
 8008062:	604b      	str	r3, [r1, #4]
 8008064:	e018      	b.n	8008098 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008066:	4b5d      	ldr	r3, [pc, #372]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a5c      	ldr	r2, [pc, #368]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 800806c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008072:	f7fc f865 	bl	8004140 <HAL_GetTick>
 8008076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008078:	e008      	b.n	800808c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800807a:	f7fc f861 	bl	8004140 <HAL_GetTick>
 800807e:	4602      	mov	r2, r0
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	2b02      	cmp	r3, #2
 8008086:	d901      	bls.n	800808c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e231      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800808c:	4b53      	ldr	r3, [pc, #332]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1f0      	bne.n	800807a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0308 	and.w	r3, r3, #8
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d03c      	beq.n	800811e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d01c      	beq.n	80080e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080ac:	4b4b      	ldr	r3, [pc, #300]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 80080ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080b2:	4a4a      	ldr	r2, [pc, #296]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 80080b4:	f043 0301 	orr.w	r3, r3, #1
 80080b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080bc:	f7fc f840 	bl	8004140 <HAL_GetTick>
 80080c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080c2:	e008      	b.n	80080d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080c4:	f7fc f83c 	bl	8004140 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d901      	bls.n	80080d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e20c      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080d6:	4b41      	ldr	r3, [pc, #260]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 80080d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080dc:	f003 0302 	and.w	r3, r3, #2
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d0ef      	beq.n	80080c4 <HAL_RCC_OscConfig+0x3ec>
 80080e4:	e01b      	b.n	800811e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080e6:	4b3d      	ldr	r3, [pc, #244]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 80080e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080ec:	4a3b      	ldr	r2, [pc, #236]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 80080ee:	f023 0301 	bic.w	r3, r3, #1
 80080f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080f6:	f7fc f823 	bl	8004140 <HAL_GetTick>
 80080fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080fc:	e008      	b.n	8008110 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080fe:	f7fc f81f 	bl	8004140 <HAL_GetTick>
 8008102:	4602      	mov	r2, r0
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	2b02      	cmp	r3, #2
 800810a:	d901      	bls.n	8008110 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e1ef      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008110:	4b32      	ldr	r3, [pc, #200]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 8008112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008116:	f003 0302 	and.w	r3, r3, #2
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1ef      	bne.n	80080fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0304 	and.w	r3, r3, #4
 8008126:	2b00      	cmp	r3, #0
 8008128:	f000 80a6 	beq.w	8008278 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800812c:	2300      	movs	r3, #0
 800812e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008130:	4b2a      	ldr	r3, [pc, #168]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 8008132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10d      	bne.n	8008158 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800813c:	4b27      	ldr	r3, [pc, #156]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 800813e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008140:	4a26      	ldr	r2, [pc, #152]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 8008142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008146:	6593      	str	r3, [r2, #88]	; 0x58
 8008148:	4b24      	ldr	r3, [pc, #144]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 800814a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800814c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008150:	60bb      	str	r3, [r7, #8]
 8008152:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008154:	2301      	movs	r3, #1
 8008156:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008158:	4b21      	ldr	r3, [pc, #132]	; (80081e0 <HAL_RCC_OscConfig+0x508>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008160:	2b00      	cmp	r3, #0
 8008162:	d118      	bne.n	8008196 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008164:	4b1e      	ldr	r3, [pc, #120]	; (80081e0 <HAL_RCC_OscConfig+0x508>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a1d      	ldr	r2, [pc, #116]	; (80081e0 <HAL_RCC_OscConfig+0x508>)
 800816a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800816e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008170:	f7fb ffe6 	bl	8004140 <HAL_GetTick>
 8008174:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008176:	e008      	b.n	800818a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008178:	f7fb ffe2 	bl	8004140 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	2b02      	cmp	r3, #2
 8008184:	d901      	bls.n	800818a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e1b2      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800818a:	4b15      	ldr	r3, [pc, #84]	; (80081e0 <HAL_RCC_OscConfig+0x508>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008192:	2b00      	cmp	r3, #0
 8008194:	d0f0      	beq.n	8008178 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d108      	bne.n	80081b0 <HAL_RCC_OscConfig+0x4d8>
 800819e:	4b0f      	ldr	r3, [pc, #60]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 80081a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081a4:	4a0d      	ldr	r2, [pc, #52]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 80081a6:	f043 0301 	orr.w	r3, r3, #1
 80081aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80081ae:	e029      	b.n	8008204 <HAL_RCC_OscConfig+0x52c>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	2b05      	cmp	r3, #5
 80081b6:	d115      	bne.n	80081e4 <HAL_RCC_OscConfig+0x50c>
 80081b8:	4b08      	ldr	r3, [pc, #32]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 80081ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081be:	4a07      	ldr	r2, [pc, #28]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 80081c0:	f043 0304 	orr.w	r3, r3, #4
 80081c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80081c8:	4b04      	ldr	r3, [pc, #16]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 80081ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ce:	4a03      	ldr	r2, [pc, #12]	; (80081dc <HAL_RCC_OscConfig+0x504>)
 80081d0:	f043 0301 	orr.w	r3, r3, #1
 80081d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80081d8:	e014      	b.n	8008204 <HAL_RCC_OscConfig+0x52c>
 80081da:	bf00      	nop
 80081dc:	40021000 	.word	0x40021000
 80081e0:	40007000 	.word	0x40007000
 80081e4:	4b9a      	ldr	r3, [pc, #616]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 80081e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ea:	4a99      	ldr	r2, [pc, #612]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 80081ec:	f023 0301 	bic.w	r3, r3, #1
 80081f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80081f4:	4b96      	ldr	r3, [pc, #600]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 80081f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081fa:	4a95      	ldr	r2, [pc, #596]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 80081fc:	f023 0304 	bic.w	r3, r3, #4
 8008200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d016      	beq.n	800823a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800820c:	f7fb ff98 	bl	8004140 <HAL_GetTick>
 8008210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008212:	e00a      	b.n	800822a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008214:	f7fb ff94 	bl	8004140 <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008222:	4293      	cmp	r3, r2
 8008224:	d901      	bls.n	800822a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e162      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800822a:	4b89      	ldr	r3, [pc, #548]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 800822c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008230:	f003 0302 	and.w	r3, r3, #2
 8008234:	2b00      	cmp	r3, #0
 8008236:	d0ed      	beq.n	8008214 <HAL_RCC_OscConfig+0x53c>
 8008238:	e015      	b.n	8008266 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800823a:	f7fb ff81 	bl	8004140 <HAL_GetTick>
 800823e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008240:	e00a      	b.n	8008258 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008242:	f7fb ff7d 	bl	8004140 <HAL_GetTick>
 8008246:	4602      	mov	r2, r0
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008250:	4293      	cmp	r3, r2
 8008252:	d901      	bls.n	8008258 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e14b      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008258:	4b7d      	ldr	r3, [pc, #500]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 800825a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800825e:	f003 0302 	and.w	r3, r3, #2
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1ed      	bne.n	8008242 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008266:	7ffb      	ldrb	r3, [r7, #31]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d105      	bne.n	8008278 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800826c:	4b78      	ldr	r3, [pc, #480]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 800826e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008270:	4a77      	ldr	r2, [pc, #476]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 8008272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008276:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0320 	and.w	r3, r3, #32
 8008280:	2b00      	cmp	r3, #0
 8008282:	d03c      	beq.n	80082fe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	2b00      	cmp	r3, #0
 800828a:	d01c      	beq.n	80082c6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800828c:	4b70      	ldr	r3, [pc, #448]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 800828e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008292:	4a6f      	ldr	r2, [pc, #444]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 8008294:	f043 0301 	orr.w	r3, r3, #1
 8008298:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800829c:	f7fb ff50 	bl	8004140 <HAL_GetTick>
 80082a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80082a2:	e008      	b.n	80082b6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082a4:	f7fb ff4c 	bl	8004140 <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d901      	bls.n	80082b6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e11c      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80082b6:	4b66      	ldr	r3, [pc, #408]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 80082b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082bc:	f003 0302 	and.w	r3, r3, #2
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d0ef      	beq.n	80082a4 <HAL_RCC_OscConfig+0x5cc>
 80082c4:	e01b      	b.n	80082fe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80082c6:	4b62      	ldr	r3, [pc, #392]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 80082c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082cc:	4a60      	ldr	r2, [pc, #384]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 80082ce:	f023 0301 	bic.w	r3, r3, #1
 80082d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082d6:	f7fb ff33 	bl	8004140 <HAL_GetTick>
 80082da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80082dc:	e008      	b.n	80082f0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082de:	f7fb ff2f 	bl	8004140 <HAL_GetTick>
 80082e2:	4602      	mov	r2, r0
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d901      	bls.n	80082f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e0ff      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80082f0:	4b57      	ldr	r3, [pc, #348]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 80082f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082f6:	f003 0302 	and.w	r3, r3, #2
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1ef      	bne.n	80082de <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008302:	2b00      	cmp	r3, #0
 8008304:	f000 80f3 	beq.w	80084ee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830c:	2b02      	cmp	r3, #2
 800830e:	f040 80c9 	bne.w	80084a4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008312:	4b4f      	ldr	r3, [pc, #316]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	f003 0203 	and.w	r2, r3, #3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008322:	429a      	cmp	r2, r3
 8008324:	d12c      	bne.n	8008380 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008330:	3b01      	subs	r3, #1
 8008332:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008334:	429a      	cmp	r2, r3
 8008336:	d123      	bne.n	8008380 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008342:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008344:	429a      	cmp	r2, r3
 8008346:	d11b      	bne.n	8008380 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008352:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008354:	429a      	cmp	r2, r3
 8008356:	d113      	bne.n	8008380 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008362:	085b      	lsrs	r3, r3, #1
 8008364:	3b01      	subs	r3, #1
 8008366:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008368:	429a      	cmp	r2, r3
 800836a:	d109      	bne.n	8008380 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008376:	085b      	lsrs	r3, r3, #1
 8008378:	3b01      	subs	r3, #1
 800837a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800837c:	429a      	cmp	r2, r3
 800837e:	d06b      	beq.n	8008458 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	2b0c      	cmp	r3, #12
 8008384:	d062      	beq.n	800844c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008386:	4b32      	ldr	r3, [pc, #200]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e0ac      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008396:	4b2e      	ldr	r3, [pc, #184]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a2d      	ldr	r2, [pc, #180]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 800839c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80083a2:	f7fb fecd 	bl	8004140 <HAL_GetTick>
 80083a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083a8:	e008      	b.n	80083bc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083aa:	f7fb fec9 	bl	8004140 <HAL_GetTick>
 80083ae:	4602      	mov	r2, r0
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d901      	bls.n	80083bc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e099      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083bc:	4b24      	ldr	r3, [pc, #144]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1f0      	bne.n	80083aa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80083c8:	4b21      	ldr	r3, [pc, #132]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 80083ca:	68da      	ldr	r2, [r3, #12]
 80083cc:	4b21      	ldr	r3, [pc, #132]	; (8008454 <HAL_RCC_OscConfig+0x77c>)
 80083ce:	4013      	ands	r3, r2
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80083d8:	3a01      	subs	r2, #1
 80083da:	0112      	lsls	r2, r2, #4
 80083dc:	4311      	orrs	r1, r2
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80083e2:	0212      	lsls	r2, r2, #8
 80083e4:	4311      	orrs	r1, r2
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80083ea:	0852      	lsrs	r2, r2, #1
 80083ec:	3a01      	subs	r2, #1
 80083ee:	0552      	lsls	r2, r2, #21
 80083f0:	4311      	orrs	r1, r2
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80083f6:	0852      	lsrs	r2, r2, #1
 80083f8:	3a01      	subs	r2, #1
 80083fa:	0652      	lsls	r2, r2, #25
 80083fc:	4311      	orrs	r1, r2
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008402:	06d2      	lsls	r2, r2, #27
 8008404:	430a      	orrs	r2, r1
 8008406:	4912      	ldr	r1, [pc, #72]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 8008408:	4313      	orrs	r3, r2
 800840a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800840c:	4b10      	ldr	r3, [pc, #64]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a0f      	ldr	r2, [pc, #60]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 8008412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008416:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008418:	4b0d      	ldr	r3, [pc, #52]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	4a0c      	ldr	r2, [pc, #48]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 800841e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008422:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008424:	f7fb fe8c 	bl	8004140 <HAL_GetTick>
 8008428:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800842a:	e008      	b.n	800843e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800842c:	f7fb fe88 	bl	8004140 <HAL_GetTick>
 8008430:	4602      	mov	r2, r0
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	2b02      	cmp	r3, #2
 8008438:	d901      	bls.n	800843e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800843a:	2303      	movs	r3, #3
 800843c:	e058      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800843e:	4b04      	ldr	r3, [pc, #16]	; (8008450 <HAL_RCC_OscConfig+0x778>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d0f0      	beq.n	800842c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800844a:	e050      	b.n	80084ee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	e04f      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
 8008450:	40021000 	.word	0x40021000
 8008454:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008458:	4b27      	ldr	r3, [pc, #156]	; (80084f8 <HAL_RCC_OscConfig+0x820>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d144      	bne.n	80084ee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008464:	4b24      	ldr	r3, [pc, #144]	; (80084f8 <HAL_RCC_OscConfig+0x820>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a23      	ldr	r2, [pc, #140]	; (80084f8 <HAL_RCC_OscConfig+0x820>)
 800846a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800846e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008470:	4b21      	ldr	r3, [pc, #132]	; (80084f8 <HAL_RCC_OscConfig+0x820>)
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	4a20      	ldr	r2, [pc, #128]	; (80084f8 <HAL_RCC_OscConfig+0x820>)
 8008476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800847a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800847c:	f7fb fe60 	bl	8004140 <HAL_GetTick>
 8008480:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008482:	e008      	b.n	8008496 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008484:	f7fb fe5c 	bl	8004140 <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	2b02      	cmp	r3, #2
 8008490:	d901      	bls.n	8008496 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e02c      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008496:	4b18      	ldr	r3, [pc, #96]	; (80084f8 <HAL_RCC_OscConfig+0x820>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d0f0      	beq.n	8008484 <HAL_RCC_OscConfig+0x7ac>
 80084a2:	e024      	b.n	80084ee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	2b0c      	cmp	r3, #12
 80084a8:	d01f      	beq.n	80084ea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084aa:	4b13      	ldr	r3, [pc, #76]	; (80084f8 <HAL_RCC_OscConfig+0x820>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a12      	ldr	r2, [pc, #72]	; (80084f8 <HAL_RCC_OscConfig+0x820>)
 80084b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084b6:	f7fb fe43 	bl	8004140 <HAL_GetTick>
 80084ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084bc:	e008      	b.n	80084d0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084be:	f7fb fe3f 	bl	8004140 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d901      	bls.n	80084d0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e00f      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084d0:	4b09      	ldr	r3, [pc, #36]	; (80084f8 <HAL_RCC_OscConfig+0x820>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1f0      	bne.n	80084be <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80084dc:	4b06      	ldr	r3, [pc, #24]	; (80084f8 <HAL_RCC_OscConfig+0x820>)
 80084de:	68da      	ldr	r2, [r3, #12]
 80084e0:	4905      	ldr	r1, [pc, #20]	; (80084f8 <HAL_RCC_OscConfig+0x820>)
 80084e2:	4b06      	ldr	r3, [pc, #24]	; (80084fc <HAL_RCC_OscConfig+0x824>)
 80084e4:	4013      	ands	r3, r2
 80084e6:	60cb      	str	r3, [r1, #12]
 80084e8:	e001      	b.n	80084ee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e000      	b.n	80084f0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3720      	adds	r7, #32
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	40021000 	.word	0x40021000
 80084fc:	feeefffc 	.word	0xfeeefffc

08008500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	e0e7      	b.n	80086e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008514:	4b75      	ldr	r3, [pc, #468]	; (80086ec <HAL_RCC_ClockConfig+0x1ec>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0307 	and.w	r3, r3, #7
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	429a      	cmp	r2, r3
 8008520:	d910      	bls.n	8008544 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008522:	4b72      	ldr	r3, [pc, #456]	; (80086ec <HAL_RCC_ClockConfig+0x1ec>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f023 0207 	bic.w	r2, r3, #7
 800852a:	4970      	ldr	r1, [pc, #448]	; (80086ec <HAL_RCC_ClockConfig+0x1ec>)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	4313      	orrs	r3, r2
 8008530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008532:	4b6e      	ldr	r3, [pc, #440]	; (80086ec <HAL_RCC_ClockConfig+0x1ec>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0307 	and.w	r3, r3, #7
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	429a      	cmp	r2, r3
 800853e:	d001      	beq.n	8008544 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e0cf      	b.n	80086e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 0302 	and.w	r3, r3, #2
 800854c:	2b00      	cmp	r3, #0
 800854e:	d010      	beq.n	8008572 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	4b66      	ldr	r3, [pc, #408]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800855c:	429a      	cmp	r2, r3
 800855e:	d908      	bls.n	8008572 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008560:	4b63      	ldr	r3, [pc, #396]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	4960      	ldr	r1, [pc, #384]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 800856e:	4313      	orrs	r3, r2
 8008570:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	2b00      	cmp	r3, #0
 800857c:	d04c      	beq.n	8008618 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	2b03      	cmp	r3, #3
 8008584:	d107      	bne.n	8008596 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008586:	4b5a      	ldr	r3, [pc, #360]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d121      	bne.n	80085d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e0a6      	b.n	80086e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	2b02      	cmp	r3, #2
 800859c:	d107      	bne.n	80085ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800859e:	4b54      	ldr	r3, [pc, #336]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d115      	bne.n	80085d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e09a      	b.n	80086e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d107      	bne.n	80085c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80085b6:	4b4e      	ldr	r3, [pc, #312]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0302 	and.w	r3, r3, #2
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d109      	bne.n	80085d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e08e      	b.n	80086e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80085c6:	4b4a      	ldr	r3, [pc, #296]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d101      	bne.n	80085d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e086      	b.n	80086e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80085d6:	4b46      	ldr	r3, [pc, #280]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f023 0203 	bic.w	r2, r3, #3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	4943      	ldr	r1, [pc, #268]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 80085e4:	4313      	orrs	r3, r2
 80085e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085e8:	f7fb fdaa 	bl	8004140 <HAL_GetTick>
 80085ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085ee:	e00a      	b.n	8008606 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085f0:	f7fb fda6 	bl	8004140 <HAL_GetTick>
 80085f4:	4602      	mov	r2, r0
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80085fe:	4293      	cmp	r3, r2
 8008600:	d901      	bls.n	8008606 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e06e      	b.n	80086e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008606:	4b3a      	ldr	r3, [pc, #232]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f003 020c 	and.w	r2, r3, #12
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	429a      	cmp	r2, r3
 8008616:	d1eb      	bne.n	80085f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0302 	and.w	r3, r3, #2
 8008620:	2b00      	cmp	r3, #0
 8008622:	d010      	beq.n	8008646 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	689a      	ldr	r2, [r3, #8]
 8008628:	4b31      	ldr	r3, [pc, #196]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008630:	429a      	cmp	r2, r3
 8008632:	d208      	bcs.n	8008646 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008634:	4b2e      	ldr	r3, [pc, #184]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	492b      	ldr	r1, [pc, #172]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008642:	4313      	orrs	r3, r2
 8008644:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008646:	4b29      	ldr	r3, [pc, #164]	; (80086ec <HAL_RCC_ClockConfig+0x1ec>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 0307 	and.w	r3, r3, #7
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	429a      	cmp	r2, r3
 8008652:	d210      	bcs.n	8008676 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008654:	4b25      	ldr	r3, [pc, #148]	; (80086ec <HAL_RCC_ClockConfig+0x1ec>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f023 0207 	bic.w	r2, r3, #7
 800865c:	4923      	ldr	r1, [pc, #140]	; (80086ec <HAL_RCC_ClockConfig+0x1ec>)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	4313      	orrs	r3, r2
 8008662:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008664:	4b21      	ldr	r3, [pc, #132]	; (80086ec <HAL_RCC_ClockConfig+0x1ec>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 0307 	and.w	r3, r3, #7
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	429a      	cmp	r2, r3
 8008670:	d001      	beq.n	8008676 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e036      	b.n	80086e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0304 	and.w	r3, r3, #4
 800867e:	2b00      	cmp	r3, #0
 8008680:	d008      	beq.n	8008694 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008682:	4b1b      	ldr	r3, [pc, #108]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	4918      	ldr	r1, [pc, #96]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008690:	4313      	orrs	r3, r2
 8008692:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0308 	and.w	r3, r3, #8
 800869c:	2b00      	cmp	r3, #0
 800869e:	d009      	beq.n	80086b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80086a0:	4b13      	ldr	r3, [pc, #76]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	00db      	lsls	r3, r3, #3
 80086ae:	4910      	ldr	r1, [pc, #64]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 80086b0:	4313      	orrs	r3, r2
 80086b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80086b4:	f000 f824 	bl	8008700 <HAL_RCC_GetSysClockFreq>
 80086b8:	4602      	mov	r2, r0
 80086ba:	4b0d      	ldr	r3, [pc, #52]	; (80086f0 <HAL_RCC_ClockConfig+0x1f0>)
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	091b      	lsrs	r3, r3, #4
 80086c0:	f003 030f 	and.w	r3, r3, #15
 80086c4:	490b      	ldr	r1, [pc, #44]	; (80086f4 <HAL_RCC_ClockConfig+0x1f4>)
 80086c6:	5ccb      	ldrb	r3, [r1, r3]
 80086c8:	f003 031f 	and.w	r3, r3, #31
 80086cc:	fa22 f303 	lsr.w	r3, r2, r3
 80086d0:	4a09      	ldr	r2, [pc, #36]	; (80086f8 <HAL_RCC_ClockConfig+0x1f8>)
 80086d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80086d4:	4b09      	ldr	r3, [pc, #36]	; (80086fc <HAL_RCC_ClockConfig+0x1fc>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fb fce1 	bl	80040a0 <HAL_InitTick>
 80086de:	4603      	mov	r3, r0
 80086e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80086e2:	7afb      	ldrb	r3, [r7, #11]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	40022000 	.word	0x40022000
 80086f0:	40021000 	.word	0x40021000
 80086f4:	0800ed2c 	.word	0x0800ed2c
 80086f8:	20000000 	.word	0x20000000
 80086fc:	20000004 	.word	0x20000004

08008700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008700:	b480      	push	{r7}
 8008702:	b089      	sub	sp, #36	; 0x24
 8008704:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008706:	2300      	movs	r3, #0
 8008708:	61fb      	str	r3, [r7, #28]
 800870a:	2300      	movs	r3, #0
 800870c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800870e:	4b3e      	ldr	r3, [pc, #248]	; (8008808 <HAL_RCC_GetSysClockFreq+0x108>)
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f003 030c 	and.w	r3, r3, #12
 8008716:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008718:	4b3b      	ldr	r3, [pc, #236]	; (8008808 <HAL_RCC_GetSysClockFreq+0x108>)
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	f003 0303 	and.w	r3, r3, #3
 8008720:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d005      	beq.n	8008734 <HAL_RCC_GetSysClockFreq+0x34>
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	2b0c      	cmp	r3, #12
 800872c:	d121      	bne.n	8008772 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d11e      	bne.n	8008772 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008734:	4b34      	ldr	r3, [pc, #208]	; (8008808 <HAL_RCC_GetSysClockFreq+0x108>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 0308 	and.w	r3, r3, #8
 800873c:	2b00      	cmp	r3, #0
 800873e:	d107      	bne.n	8008750 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008740:	4b31      	ldr	r3, [pc, #196]	; (8008808 <HAL_RCC_GetSysClockFreq+0x108>)
 8008742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008746:	0a1b      	lsrs	r3, r3, #8
 8008748:	f003 030f 	and.w	r3, r3, #15
 800874c:	61fb      	str	r3, [r7, #28]
 800874e:	e005      	b.n	800875c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008750:	4b2d      	ldr	r3, [pc, #180]	; (8008808 <HAL_RCC_GetSysClockFreq+0x108>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	091b      	lsrs	r3, r3, #4
 8008756:	f003 030f 	and.w	r3, r3, #15
 800875a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800875c:	4a2b      	ldr	r2, [pc, #172]	; (800880c <HAL_RCC_GetSysClockFreq+0x10c>)
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008764:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10d      	bne.n	8008788 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008770:	e00a      	b.n	8008788 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	2b04      	cmp	r3, #4
 8008776:	d102      	bne.n	800877e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008778:	4b25      	ldr	r3, [pc, #148]	; (8008810 <HAL_RCC_GetSysClockFreq+0x110>)
 800877a:	61bb      	str	r3, [r7, #24]
 800877c:	e004      	b.n	8008788 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	2b08      	cmp	r3, #8
 8008782:	d101      	bne.n	8008788 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008784:	4b23      	ldr	r3, [pc, #140]	; (8008814 <HAL_RCC_GetSysClockFreq+0x114>)
 8008786:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	2b0c      	cmp	r3, #12
 800878c:	d134      	bne.n	80087f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800878e:	4b1e      	ldr	r3, [pc, #120]	; (8008808 <HAL_RCC_GetSysClockFreq+0x108>)
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	2b02      	cmp	r3, #2
 800879c:	d003      	beq.n	80087a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d003      	beq.n	80087ac <HAL_RCC_GetSysClockFreq+0xac>
 80087a4:	e005      	b.n	80087b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80087a6:	4b1a      	ldr	r3, [pc, #104]	; (8008810 <HAL_RCC_GetSysClockFreq+0x110>)
 80087a8:	617b      	str	r3, [r7, #20]
      break;
 80087aa:	e005      	b.n	80087b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80087ac:	4b19      	ldr	r3, [pc, #100]	; (8008814 <HAL_RCC_GetSysClockFreq+0x114>)
 80087ae:	617b      	str	r3, [r7, #20]
      break;
 80087b0:	e002      	b.n	80087b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	617b      	str	r3, [r7, #20]
      break;
 80087b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80087b8:	4b13      	ldr	r3, [pc, #76]	; (8008808 <HAL_RCC_GetSysClockFreq+0x108>)
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	091b      	lsrs	r3, r3, #4
 80087be:	f003 0307 	and.w	r3, r3, #7
 80087c2:	3301      	adds	r3, #1
 80087c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80087c6:	4b10      	ldr	r3, [pc, #64]	; (8008808 <HAL_RCC_GetSysClockFreq+0x108>)
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	0a1b      	lsrs	r3, r3, #8
 80087cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	fb03 f202 	mul.w	r2, r3, r2
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80087de:	4b0a      	ldr	r3, [pc, #40]	; (8008808 <HAL_RCC_GetSysClockFreq+0x108>)
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	0e5b      	lsrs	r3, r3, #25
 80087e4:	f003 0303 	and.w	r3, r3, #3
 80087e8:	3301      	adds	r3, #1
 80087ea:	005b      	lsls	r3, r3, #1
 80087ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80087f8:	69bb      	ldr	r3, [r7, #24]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3724      	adds	r7, #36	; 0x24
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	40021000 	.word	0x40021000
 800880c:	0800ed3c 	.word	0x0800ed3c
 8008810:	00f42400 	.word	0x00f42400
 8008814:	007a1200 	.word	0x007a1200

08008818 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008820:	2300      	movs	r3, #0
 8008822:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008824:	4b2a      	ldr	r3, [pc, #168]	; (80088d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d003      	beq.n	8008838 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008830:	f7ff f9de 	bl	8007bf0 <HAL_PWREx_GetVoltageRange>
 8008834:	6178      	str	r0, [r7, #20]
 8008836:	e014      	b.n	8008862 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008838:	4b25      	ldr	r3, [pc, #148]	; (80088d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800883a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800883c:	4a24      	ldr	r2, [pc, #144]	; (80088d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800883e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008842:	6593      	str	r3, [r2, #88]	; 0x58
 8008844:	4b22      	ldr	r3, [pc, #136]	; (80088d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800884c:	60fb      	str	r3, [r7, #12]
 800884e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008850:	f7ff f9ce 	bl	8007bf0 <HAL_PWREx_GetVoltageRange>
 8008854:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008856:	4b1e      	ldr	r3, [pc, #120]	; (80088d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800885a:	4a1d      	ldr	r2, [pc, #116]	; (80088d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800885c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008860:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008868:	d10b      	bne.n	8008882 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b80      	cmp	r3, #128	; 0x80
 800886e:	d919      	bls.n	80088a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2ba0      	cmp	r3, #160	; 0xa0
 8008874:	d902      	bls.n	800887c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008876:	2302      	movs	r3, #2
 8008878:	613b      	str	r3, [r7, #16]
 800887a:	e013      	b.n	80088a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800887c:	2301      	movs	r3, #1
 800887e:	613b      	str	r3, [r7, #16]
 8008880:	e010      	b.n	80088a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b80      	cmp	r3, #128	; 0x80
 8008886:	d902      	bls.n	800888e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008888:	2303      	movs	r3, #3
 800888a:	613b      	str	r3, [r7, #16]
 800888c:	e00a      	b.n	80088a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b80      	cmp	r3, #128	; 0x80
 8008892:	d102      	bne.n	800889a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008894:	2302      	movs	r3, #2
 8008896:	613b      	str	r3, [r7, #16]
 8008898:	e004      	b.n	80088a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b70      	cmp	r3, #112	; 0x70
 800889e:	d101      	bne.n	80088a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80088a0:	2301      	movs	r3, #1
 80088a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80088a4:	4b0b      	ldr	r3, [pc, #44]	; (80088d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f023 0207 	bic.w	r2, r3, #7
 80088ac:	4909      	ldr	r1, [pc, #36]	; (80088d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80088b4:	4b07      	ldr	r3, [pc, #28]	; (80088d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 0307 	and.w	r3, r3, #7
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d001      	beq.n	80088c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e000      	b.n	80088c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3718      	adds	r7, #24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	40021000 	.word	0x40021000
 80088d4:	40022000 	.word	0x40022000

080088d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80088e0:	2300      	movs	r3, #0
 80088e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80088e4:	2300      	movs	r3, #0
 80088e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d031      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80088fc:	d01a      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80088fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008902:	d814      	bhi.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008904:	2b00      	cmp	r3, #0
 8008906:	d009      	beq.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008908:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800890c:	d10f      	bne.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800890e:	4b5d      	ldr	r3, [pc, #372]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	4a5c      	ldr	r2, [pc, #368]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008918:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800891a:	e00c      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	3304      	adds	r3, #4
 8008920:	2100      	movs	r1, #0
 8008922:	4618      	mov	r0, r3
 8008924:	f000 fa22 	bl	8008d6c <RCCEx_PLLSAI1_Config>
 8008928:	4603      	mov	r3, r0
 800892a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800892c:	e003      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	74fb      	strb	r3, [r7, #19]
      break;
 8008932:	e000      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8008934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008936:	7cfb      	ldrb	r3, [r7, #19]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d10b      	bne.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800893c:	4b51      	ldr	r3, [pc, #324]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800893e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008942:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800894a:	494e      	ldr	r1, [pc, #312]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800894c:	4313      	orrs	r3, r2
 800894e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008952:	e001      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008954:	7cfb      	ldrb	r3, [r7, #19]
 8008956:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008960:	2b00      	cmp	r3, #0
 8008962:	f000 809e 	beq.w	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008966:	2300      	movs	r3, #0
 8008968:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800896a:	4b46      	ldr	r3, [pc, #280]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800896c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800896e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8008976:	2301      	movs	r3, #1
 8008978:	e000      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800897a:	2300      	movs	r3, #0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00d      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008980:	4b40      	ldr	r3, [pc, #256]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008984:	4a3f      	ldr	r2, [pc, #252]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800898a:	6593      	str	r3, [r2, #88]	; 0x58
 800898c:	4b3d      	ldr	r3, [pc, #244]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800898e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008994:	60bb      	str	r3, [r7, #8]
 8008996:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008998:	2301      	movs	r3, #1
 800899a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800899c:	4b3a      	ldr	r3, [pc, #232]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a39      	ldr	r2, [pc, #228]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80089a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80089a8:	f7fb fbca 	bl	8004140 <HAL_GetTick>
 80089ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80089ae:	e009      	b.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089b0:	f7fb fbc6 	bl	8004140 <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d902      	bls.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80089be:	2303      	movs	r3, #3
 80089c0:	74fb      	strb	r3, [r7, #19]
        break;
 80089c2:	e005      	b.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80089c4:	4b30      	ldr	r3, [pc, #192]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d0ef      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80089d0:	7cfb      	ldrb	r3, [r7, #19]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d15a      	bne.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80089d6:	4b2b      	ldr	r3, [pc, #172]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80089d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d01e      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d019      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80089f2:	4b24      	ldr	r3, [pc, #144]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80089f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089fe:	4b21      	ldr	r3, [pc, #132]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a04:	4a1f      	ldr	r2, [pc, #124]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008a0e:	4b1d      	ldr	r3, [pc, #116]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a14:	4a1b      	ldr	r2, [pc, #108]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008a1e:	4a19      	ldr	r2, [pc, #100]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f003 0301 	and.w	r3, r3, #1
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d016      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a30:	f7fb fb86 	bl	8004140 <HAL_GetTick>
 8008a34:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a36:	e00b      	b.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a38:	f7fb fb82 	bl	8004140 <HAL_GetTick>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d902      	bls.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	74fb      	strb	r3, [r7, #19]
            break;
 8008a4e:	e006      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a50:	4b0c      	ldr	r3, [pc, #48]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a56:	f003 0302 	and.w	r3, r3, #2
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d0ec      	beq.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008a5e:	7cfb      	ldrb	r3, [r7, #19]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10b      	bne.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a64:	4b07      	ldr	r3, [pc, #28]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a72:	4904      	ldr	r1, [pc, #16]	; (8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008a74:	4313      	orrs	r3, r2
 8008a76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008a7a:	e009      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a7c:	7cfb      	ldrb	r3, [r7, #19]
 8008a7e:	74bb      	strb	r3, [r7, #18]
 8008a80:	e006      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008a82:	bf00      	nop
 8008a84:	40021000 	.word	0x40021000
 8008a88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a8c:	7cfb      	ldrb	r3, [r7, #19]
 8008a8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a90:	7c7b      	ldrb	r3, [r7, #17]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d105      	bne.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a96:	4b8d      	ldr	r3, [pc, #564]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a9a:	4a8c      	ldr	r2, [pc, #560]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008aa0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 0301 	and.w	r3, r3, #1
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00a      	beq.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008aae:	4b87      	ldr	r3, [pc, #540]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ab4:	f023 0203 	bic.w	r2, r3, #3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a1b      	ldr	r3, [r3, #32]
 8008abc:	4983      	ldr	r1, [pc, #524]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0302 	and.w	r3, r3, #2
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00a      	beq.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008ad0:	4b7e      	ldr	r3, [pc, #504]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ad6:	f023 020c 	bic.w	r2, r3, #12
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ade:	497b      	ldr	r1, [pc, #492]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f003 0304 	and.w	r3, r3, #4
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00a      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008af2:	4b76      	ldr	r3, [pc, #472]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008af8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b00:	4972      	ldr	r1, [pc, #456]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b02:	4313      	orrs	r3, r2
 8008b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0320 	and.w	r3, r3, #32
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00a      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b14:	4b6d      	ldr	r3, [pc, #436]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b22:	496a      	ldr	r1, [pc, #424]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b24:	4313      	orrs	r3, r2
 8008b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00a      	beq.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b36:	4b65      	ldr	r3, [pc, #404]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b44:	4961      	ldr	r1, [pc, #388]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00a      	beq.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008b58:	4b5c      	ldr	r3, [pc, #368]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b66:	4959      	ldr	r1, [pc, #356]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b7a:	4b54      	ldr	r3, [pc, #336]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b88:	4950      	ldr	r1, [pc, #320]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00a      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008b9c:	4b4b      	ldr	r3, [pc, #300]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ba2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008baa:	4948      	ldr	r1, [pc, #288]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008bac:	4313      	orrs	r3, r2
 8008bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00a      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008bbe:	4b43      	ldr	r3, [pc, #268]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bcc:	493f      	ldr	r1, [pc, #252]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d028      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008be0:	4b3a      	ldr	r3, [pc, #232]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008be6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bee:	4937      	ldr	r1, [pc, #220]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bfe:	d106      	bne.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c00:	4b32      	ldr	r3, [pc, #200]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	4a31      	ldr	r2, [pc, #196]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c0a:	60d3      	str	r3, [r2, #12]
 8008c0c:	e011      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c16:	d10c      	bne.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 f8a4 	bl	8008d6c <RCCEx_PLLSAI1_Config>
 8008c24:	4603      	mov	r3, r0
 8008c26:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008c28:	7cfb      	ldrb	r3, [r7, #19]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d001      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8008c2e:	7cfb      	ldrb	r3, [r7, #19]
 8008c30:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d028      	beq.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008c3e:	4b23      	ldr	r3, [pc, #140]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c4c:	491f      	ldr	r1, [pc, #124]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c5c:	d106      	bne.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c5e:	4b1b      	ldr	r3, [pc, #108]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	4a1a      	ldr	r2, [pc, #104]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008c64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c68:	60d3      	str	r3, [r2, #12]
 8008c6a:	e011      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c74:	d10c      	bne.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	3304      	adds	r3, #4
 8008c7a:	2101      	movs	r1, #1
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f000 f875 	bl	8008d6c <RCCEx_PLLSAI1_Config>
 8008c82:	4603      	mov	r3, r0
 8008c84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008c86:	7cfb      	ldrb	r3, [r7, #19]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8008c8c:	7cfb      	ldrb	r3, [r7, #19]
 8008c8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d02b      	beq.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c9c:	4b0b      	ldr	r3, [pc, #44]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ca2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008caa:	4908      	ldr	r1, [pc, #32]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008cac:	4313      	orrs	r3, r2
 8008cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cba:	d109      	bne.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008cbc:	4b03      	ldr	r3, [pc, #12]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	4a02      	ldr	r2, [pc, #8]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8008cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cc6:	60d3      	str	r3, [r2, #12]
 8008cc8:	e014      	b.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008cca:	bf00      	nop
 8008ccc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008cd8:	d10c      	bne.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	3304      	adds	r3, #4
 8008cde:	2101      	movs	r1, #1
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f000 f843 	bl	8008d6c <RCCEx_PLLSAI1_Config>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008cea:	7cfb      	ldrb	r3, [r7, #19]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d001      	beq.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8008cf0:	7cfb      	ldrb	r3, [r7, #19]
 8008cf2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d01c      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008d00:	4b19      	ldr	r3, [pc, #100]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d0e:	4916      	ldr	r1, [pc, #88]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d10:	4313      	orrs	r3, r2
 8008d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d1e:	d10c      	bne.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	3304      	adds	r3, #4
 8008d24:	2102      	movs	r1, #2
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 f820 	bl	8008d6c <RCCEx_PLLSAI1_Config>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008d30:	7cfb      	ldrb	r3, [r7, #19]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d001      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8008d36:	7cfb      	ldrb	r3, [r7, #19]
 8008d38:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00a      	beq.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008d46:	4b08      	ldr	r3, [pc, #32]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d4c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d54:	4904      	ldr	r1, [pc, #16]	; (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d56:	4313      	orrs	r3, r2
 8008d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008d5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3718      	adds	r7, #24
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	40021000 	.word	0x40021000

08008d6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008d7a:	4b74      	ldr	r3, [pc, #464]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	f003 0303 	and.w	r3, r3, #3
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d018      	beq.n	8008db8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008d86:	4b71      	ldr	r3, [pc, #452]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	f003 0203 	and.w	r2, r3, #3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d10d      	bne.n	8008db2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
       ||
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d009      	beq.n	8008db2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008d9e:	4b6b      	ldr	r3, [pc, #428]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	091b      	lsrs	r3, r3, #4
 8008da4:	f003 0307 	and.w	r3, r3, #7
 8008da8:	1c5a      	adds	r2, r3, #1
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685b      	ldr	r3, [r3, #4]
       ||
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d047      	beq.n	8008e42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	73fb      	strb	r3, [r7, #15]
 8008db6:	e044      	b.n	8008e42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2b03      	cmp	r3, #3
 8008dbe:	d018      	beq.n	8008df2 <RCCEx_PLLSAI1_Config+0x86>
 8008dc0:	2b03      	cmp	r3, #3
 8008dc2:	d825      	bhi.n	8008e10 <RCCEx_PLLSAI1_Config+0xa4>
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d002      	beq.n	8008dce <RCCEx_PLLSAI1_Config+0x62>
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d009      	beq.n	8008de0 <RCCEx_PLLSAI1_Config+0x74>
 8008dcc:	e020      	b.n	8008e10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008dce:	4b5f      	ldr	r3, [pc, #380]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0302 	and.w	r3, r3, #2
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d11d      	bne.n	8008e16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008dde:	e01a      	b.n	8008e16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008de0:	4b5a      	ldr	r3, [pc, #360]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d116      	bne.n	8008e1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008df0:	e013      	b.n	8008e1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008df2:	4b56      	ldr	r3, [pc, #344]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10f      	bne.n	8008e1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008dfe:	4b53      	ldr	r3, [pc, #332]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d109      	bne.n	8008e1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008e0e:	e006      	b.n	8008e1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	73fb      	strb	r3, [r7, #15]
      break;
 8008e14:	e004      	b.n	8008e20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008e16:	bf00      	nop
 8008e18:	e002      	b.n	8008e20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008e1a:	bf00      	nop
 8008e1c:	e000      	b.n	8008e20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008e1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10d      	bne.n	8008e42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008e26:	4b49      	ldr	r3, [pc, #292]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6819      	ldr	r1, [r3, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	011b      	lsls	r3, r3, #4
 8008e3a:	430b      	orrs	r3, r1
 8008e3c:	4943      	ldr	r1, [pc, #268]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008e42:	7bfb      	ldrb	r3, [r7, #15]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d17c      	bne.n	8008f42 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008e48:	4b40      	ldr	r3, [pc, #256]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a3f      	ldr	r2, [pc, #252]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e54:	f7fb f974 	bl	8004140 <HAL_GetTick>
 8008e58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008e5a:	e009      	b.n	8008e70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008e5c:	f7fb f970 	bl	8004140 <HAL_GetTick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d902      	bls.n	8008e70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	73fb      	strb	r3, [r7, #15]
        break;
 8008e6e:	e005      	b.n	8008e7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008e70:	4b36      	ldr	r3, [pc, #216]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1ef      	bne.n	8008e5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d15f      	bne.n	8008f42 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d110      	bne.n	8008eaa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008e88:	4b30      	ldr	r3, [pc, #192]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008e90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	6892      	ldr	r2, [r2, #8]
 8008e98:	0211      	lsls	r1, r2, #8
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	68d2      	ldr	r2, [r2, #12]
 8008e9e:	06d2      	lsls	r2, r2, #27
 8008ea0:	430a      	orrs	r2, r1
 8008ea2:	492a      	ldr	r1, [pc, #168]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	610b      	str	r3, [r1, #16]
 8008ea8:	e027      	b.n	8008efa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d112      	bne.n	8008ed6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008eb0:	4b26      	ldr	r3, [pc, #152]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008eb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	6892      	ldr	r2, [r2, #8]
 8008ec0:	0211      	lsls	r1, r2, #8
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	6912      	ldr	r2, [r2, #16]
 8008ec6:	0852      	lsrs	r2, r2, #1
 8008ec8:	3a01      	subs	r2, #1
 8008eca:	0552      	lsls	r2, r2, #21
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	491f      	ldr	r1, [pc, #124]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	610b      	str	r3, [r1, #16]
 8008ed4:	e011      	b.n	8008efa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008ed6:	4b1d      	ldr	r3, [pc, #116]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008ede:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	6892      	ldr	r2, [r2, #8]
 8008ee6:	0211      	lsls	r1, r2, #8
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	6952      	ldr	r2, [r2, #20]
 8008eec:	0852      	lsrs	r2, r2, #1
 8008eee:	3a01      	subs	r2, #1
 8008ef0:	0652      	lsls	r2, r2, #25
 8008ef2:	430a      	orrs	r2, r1
 8008ef4:	4915      	ldr	r1, [pc, #84]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008efa:	4b14      	ldr	r3, [pc, #80]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a13      	ldr	r2, [pc, #76]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f04:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f06:	f7fb f91b 	bl	8004140 <HAL_GetTick>
 8008f0a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008f0c:	e009      	b.n	8008f22 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008f0e:	f7fb f917 	bl	8004140 <HAL_GetTick>
 8008f12:	4602      	mov	r2, r0
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	1ad3      	subs	r3, r2, r3
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d902      	bls.n	8008f22 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	73fb      	strb	r3, [r7, #15]
          break;
 8008f20:	e005      	b.n	8008f2e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008f22:	4b0a      	ldr	r3, [pc, #40]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d0ef      	beq.n	8008f0e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d106      	bne.n	8008f42 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008f34:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f36:	691a      	ldr	r2, [r3, #16]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	4903      	ldr	r1, [pc, #12]	; (8008f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	40021000 	.word	0x40021000

08008f50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e095      	b.n	800908e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d108      	bne.n	8008f7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f72:	d009      	beq.n	8008f88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	61da      	str	r2, [r3, #28]
 8008f7a:	e005      	b.n	8008f88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d106      	bne.n	8008fa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7fa fe66 	bl	8003c74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2202      	movs	r2, #2
 8008fac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008fc8:	d902      	bls.n	8008fd0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	60fb      	str	r3, [r7, #12]
 8008fce:	e002      	b.n	8008fd6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fd4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008fde:	d007      	beq.n	8008ff0 <HAL_SPI_Init+0xa0>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008fe8:	d002      	beq.n	8008ff0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009000:	431a      	orrs	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	f003 0302 	and.w	r3, r3, #2
 800900a:	431a      	orrs	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	695b      	ldr	r3, [r3, #20]
 8009010:	f003 0301 	and.w	r3, r3, #1
 8009014:	431a      	orrs	r2, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800901e:	431a      	orrs	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	69db      	ldr	r3, [r3, #28]
 8009024:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009028:	431a      	orrs	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a1b      	ldr	r3, [r3, #32]
 800902e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009032:	ea42 0103 	orr.w	r1, r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800903a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	430a      	orrs	r2, r1
 8009044:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	0c1b      	lsrs	r3, r3, #16
 800904c:	f003 0204 	and.w	r2, r3, #4
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009054:	f003 0310 	and.w	r3, r3, #16
 8009058:	431a      	orrs	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800905e:	f003 0308 	and.w	r3, r3, #8
 8009062:	431a      	orrs	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800906c:	ea42 0103 	orr.w	r1, r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	430a      	orrs	r2, r1
 800907c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b088      	sub	sp, #32
 800909a:	af00      	add	r7, sp, #0
 800909c:	60f8      	str	r0, [r7, #12]
 800909e:	60b9      	str	r1, [r7, #8]
 80090a0:	603b      	str	r3, [r7, #0]
 80090a2:	4613      	mov	r3, r2
 80090a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d101      	bne.n	80090b8 <HAL_SPI_Transmit+0x22>
 80090b4:	2302      	movs	r3, #2
 80090b6:	e158      	b.n	800936a <HAL_SPI_Transmit+0x2d4>
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090c0:	f7fb f83e 	bl	8004140 <HAL_GetTick>
 80090c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80090c6:	88fb      	ldrh	r3, [r7, #6]
 80090c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d002      	beq.n	80090dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80090d6:	2302      	movs	r3, #2
 80090d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090da:	e13d      	b.n	8009358 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d002      	beq.n	80090e8 <HAL_SPI_Transmit+0x52>
 80090e2:	88fb      	ldrh	r3, [r7, #6]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d102      	bne.n	80090ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090ec:	e134      	b.n	8009358 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2203      	movs	r2, #3
 80090f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2200      	movs	r2, #0
 80090fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	88fa      	ldrh	r2, [r7, #6]
 8009106:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	88fa      	ldrh	r2, [r7, #6]
 800910c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2200      	movs	r2, #0
 8009112:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2200      	movs	r2, #0
 8009118:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2200      	movs	r2, #0
 8009120:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2200      	movs	r2, #0
 800912e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009138:	d10f      	bne.n	800915a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009148:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009158:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009164:	2b40      	cmp	r3, #64	; 0x40
 8009166:	d007      	beq.n	8009178 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009176:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009180:	d94b      	bls.n	800921a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d002      	beq.n	8009190 <HAL_SPI_Transmit+0xfa>
 800918a:	8afb      	ldrh	r3, [r7, #22]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d13e      	bne.n	800920e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009194:	881a      	ldrh	r2, [r3, #0]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a0:	1c9a      	adds	r2, r3, #2
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	3b01      	subs	r3, #1
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80091b4:	e02b      	b.n	800920e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	f003 0302 	and.w	r3, r3, #2
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d112      	bne.n	80091ea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c8:	881a      	ldrh	r2, [r3, #0]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d4:	1c9a      	adds	r2, r3, #2
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091de:	b29b      	uxth	r3, r3
 80091e0:	3b01      	subs	r3, #1
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80091e8:	e011      	b.n	800920e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091ea:	f7fa ffa9 	bl	8004140 <HAL_GetTick>
 80091ee:	4602      	mov	r2, r0
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	683a      	ldr	r2, [r7, #0]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d803      	bhi.n	8009202 <HAL_SPI_Transmit+0x16c>
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009200:	d102      	bne.n	8009208 <HAL_SPI_Transmit+0x172>
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d102      	bne.n	800920e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8009208:	2303      	movs	r3, #3
 800920a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800920c:	e0a4      	b.n	8009358 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009212:	b29b      	uxth	r3, r3
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1ce      	bne.n	80091b6 <HAL_SPI_Transmit+0x120>
 8009218:	e07c      	b.n	8009314 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d002      	beq.n	8009228 <HAL_SPI_Transmit+0x192>
 8009222:	8afb      	ldrh	r3, [r7, #22]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d170      	bne.n	800930a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800922c:	b29b      	uxth	r3, r3
 800922e:	2b01      	cmp	r3, #1
 8009230:	d912      	bls.n	8009258 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009236:	881a      	ldrh	r2, [r3, #0]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009242:	1c9a      	adds	r2, r3, #2
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800924c:	b29b      	uxth	r3, r3
 800924e:	3b02      	subs	r3, #2
 8009250:	b29a      	uxth	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009256:	e058      	b.n	800930a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	330c      	adds	r3, #12
 8009262:	7812      	ldrb	r2, [r2, #0]
 8009264:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926a:	1c5a      	adds	r2, r3, #1
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009274:	b29b      	uxth	r3, r3
 8009276:	3b01      	subs	r3, #1
 8009278:	b29a      	uxth	r2, r3
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800927e:	e044      	b.n	800930a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	f003 0302 	and.w	r3, r3, #2
 800928a:	2b02      	cmp	r3, #2
 800928c:	d12b      	bne.n	80092e6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009292:	b29b      	uxth	r3, r3
 8009294:	2b01      	cmp	r3, #1
 8009296:	d912      	bls.n	80092be <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929c:	881a      	ldrh	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a8:	1c9a      	adds	r2, r3, #2
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	3b02      	subs	r3, #2
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80092bc:	e025      	b.n	800930a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	330c      	adds	r3, #12
 80092c8:	7812      	ldrb	r2, [r2, #0]
 80092ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d0:	1c5a      	adds	r2, r3, #1
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092da:	b29b      	uxth	r3, r3
 80092dc:	3b01      	subs	r3, #1
 80092de:	b29a      	uxth	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80092e4:	e011      	b.n	800930a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092e6:	f7fa ff2b 	bl	8004140 <HAL_GetTick>
 80092ea:	4602      	mov	r2, r0
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d803      	bhi.n	80092fe <HAL_SPI_Transmit+0x268>
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092fc:	d102      	bne.n	8009304 <HAL_SPI_Transmit+0x26e>
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d102      	bne.n	800930a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8009304:	2303      	movs	r3, #3
 8009306:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009308:	e026      	b.n	8009358 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800930e:	b29b      	uxth	r3, r3
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1b5      	bne.n	8009280 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009314:	69ba      	ldr	r2, [r7, #24]
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f000 fb5b 	bl	80099d4 <SPI_EndRxTxTransaction>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2220      	movs	r2, #32
 8009328:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10a      	bne.n	8009348 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009332:	2300      	movs	r3, #0
 8009334:	613b      	str	r3, [r7, #16]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	613b      	str	r3, [r7, #16]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	613b      	str	r3, [r7, #16]
 8009346:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	77fb      	strb	r3, [r7, #31]
 8009354:	e000      	b.n	8009358 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8009356:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009368:	7ffb      	ldrb	r3, [r7, #31]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3720      	adds	r7, #32
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b08a      	sub	sp, #40	; 0x28
 8009376:	af00      	add	r7, sp, #0
 8009378:	60f8      	str	r0, [r7, #12]
 800937a:	60b9      	str	r1, [r7, #8]
 800937c:	607a      	str	r2, [r7, #4]
 800937e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009380:	2301      	movs	r3, #1
 8009382:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009390:	2b01      	cmp	r3, #1
 8009392:	d101      	bne.n	8009398 <HAL_SPI_TransmitReceive+0x26>
 8009394:	2302      	movs	r3, #2
 8009396:	e1fb      	b.n	8009790 <HAL_SPI_TransmitReceive+0x41e>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093a0:	f7fa fece 	bl	8004140 <HAL_GetTick>
 80093a4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80093ac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80093b4:	887b      	ldrh	r3, [r7, #2]
 80093b6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80093b8:	887b      	ldrh	r3, [r7, #2]
 80093ba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80093bc:	7efb      	ldrb	r3, [r7, #27]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d00e      	beq.n	80093e0 <HAL_SPI_TransmitReceive+0x6e>
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093c8:	d106      	bne.n	80093d8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d102      	bne.n	80093d8 <HAL_SPI_TransmitReceive+0x66>
 80093d2:	7efb      	ldrb	r3, [r7, #27]
 80093d4:	2b04      	cmp	r3, #4
 80093d6:	d003      	beq.n	80093e0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80093d8:	2302      	movs	r3, #2
 80093da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80093de:	e1cd      	b.n	800977c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d005      	beq.n	80093f2 <HAL_SPI_TransmitReceive+0x80>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d002      	beq.n	80093f2 <HAL_SPI_TransmitReceive+0x80>
 80093ec:	887b      	ldrh	r3, [r7, #2]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d103      	bne.n	80093fa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80093f8:	e1c0      	b.n	800977c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009400:	b2db      	uxtb	r3, r3
 8009402:	2b04      	cmp	r3, #4
 8009404:	d003      	beq.n	800940e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2205      	movs	r2, #5
 800940a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	887a      	ldrh	r2, [r7, #2]
 800941e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	887a      	ldrh	r2, [r7, #2]
 8009426:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	887a      	ldrh	r2, [r7, #2]
 8009434:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	887a      	ldrh	r2, [r7, #2]
 800943a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009450:	d802      	bhi.n	8009458 <HAL_SPI_TransmitReceive+0xe6>
 8009452:	8a3b      	ldrh	r3, [r7, #16]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d908      	bls.n	800946a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	685a      	ldr	r2, [r3, #4]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009466:	605a      	str	r2, [r3, #4]
 8009468:	e007      	b.n	800947a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009478:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009484:	2b40      	cmp	r3, #64	; 0x40
 8009486:	d007      	beq.n	8009498 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009496:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80094a0:	d97c      	bls.n	800959c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d002      	beq.n	80094b0 <HAL_SPI_TransmitReceive+0x13e>
 80094aa:	8a7b      	ldrh	r3, [r7, #18]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d169      	bne.n	8009584 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b4:	881a      	ldrh	r2, [r3, #0]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c0:	1c9a      	adds	r2, r3, #2
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	3b01      	subs	r3, #1
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094d4:	e056      	b.n	8009584 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	f003 0302 	and.w	r3, r3, #2
 80094e0:	2b02      	cmp	r3, #2
 80094e2:	d11b      	bne.n	800951c <HAL_SPI_TransmitReceive+0x1aa>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d016      	beq.n	800951c <HAL_SPI_TransmitReceive+0x1aa>
 80094ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d113      	bne.n	800951c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f8:	881a      	ldrh	r2, [r3, #0]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009504:	1c9a      	adds	r2, r3, #2
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800950e:	b29b      	uxth	r3, r3
 8009510:	3b01      	subs	r3, #1
 8009512:	b29a      	uxth	r2, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009518:	2300      	movs	r3, #0
 800951a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	2b01      	cmp	r3, #1
 8009528:	d11c      	bne.n	8009564 <HAL_SPI_TransmitReceive+0x1f2>
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009530:	b29b      	uxth	r3, r3
 8009532:	2b00      	cmp	r3, #0
 8009534:	d016      	beq.n	8009564 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009540:	b292      	uxth	r2, r2
 8009542:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009548:	1c9a      	adds	r2, r3, #2
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009554:	b29b      	uxth	r3, r3
 8009556:	3b01      	subs	r3, #1
 8009558:	b29a      	uxth	r2, r3
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009560:	2301      	movs	r3, #1
 8009562:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009564:	f7fa fdec 	bl	8004140 <HAL_GetTick>
 8009568:	4602      	mov	r2, r0
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	1ad3      	subs	r3, r2, r3
 800956e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009570:	429a      	cmp	r2, r3
 8009572:	d807      	bhi.n	8009584 <HAL_SPI_TransmitReceive+0x212>
 8009574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957a:	d003      	beq.n	8009584 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800957c:	2303      	movs	r3, #3
 800957e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009582:	e0fb      	b.n	800977c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009588:	b29b      	uxth	r3, r3
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1a3      	bne.n	80094d6 <HAL_SPI_TransmitReceive+0x164>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009594:	b29b      	uxth	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d19d      	bne.n	80094d6 <HAL_SPI_TransmitReceive+0x164>
 800959a:	e0df      	b.n	800975c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d003      	beq.n	80095ac <HAL_SPI_TransmitReceive+0x23a>
 80095a4:	8a7b      	ldrh	r3, [r7, #18]
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	f040 80cb 	bne.w	8009742 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d912      	bls.n	80095dc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ba:	881a      	ldrh	r2, [r3, #0]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c6:	1c9a      	adds	r2, r3, #2
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	3b02      	subs	r3, #2
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095da:	e0b2      	b.n	8009742 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	330c      	adds	r3, #12
 80095e6:	7812      	ldrb	r2, [r2, #0]
 80095e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	3b01      	subs	r3, #1
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009602:	e09e      	b.n	8009742 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f003 0302 	and.w	r3, r3, #2
 800960e:	2b02      	cmp	r3, #2
 8009610:	d134      	bne.n	800967c <HAL_SPI_TransmitReceive+0x30a>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009616:	b29b      	uxth	r3, r3
 8009618:	2b00      	cmp	r3, #0
 800961a:	d02f      	beq.n	800967c <HAL_SPI_TransmitReceive+0x30a>
 800961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961e:	2b01      	cmp	r3, #1
 8009620:	d12c      	bne.n	800967c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009626:	b29b      	uxth	r3, r3
 8009628:	2b01      	cmp	r3, #1
 800962a:	d912      	bls.n	8009652 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009630:	881a      	ldrh	r2, [r3, #0]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963c:	1c9a      	adds	r2, r3, #2
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009646:	b29b      	uxth	r3, r3
 8009648:	3b02      	subs	r3, #2
 800964a:	b29a      	uxth	r2, r3
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009650:	e012      	b.n	8009678 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	330c      	adds	r3, #12
 800965c:	7812      	ldrb	r2, [r2, #0]
 800965e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009664:	1c5a      	adds	r2, r3, #1
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800966e:	b29b      	uxth	r3, r3
 8009670:	3b01      	subs	r3, #1
 8009672:	b29a      	uxth	r2, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009678:	2300      	movs	r3, #0
 800967a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	f003 0301 	and.w	r3, r3, #1
 8009686:	2b01      	cmp	r3, #1
 8009688:	d148      	bne.n	800971c <HAL_SPI_TransmitReceive+0x3aa>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009690:	b29b      	uxth	r3, r3
 8009692:	2b00      	cmp	r3, #0
 8009694:	d042      	beq.n	800971c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800969c:	b29b      	uxth	r3, r3
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d923      	bls.n	80096ea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68da      	ldr	r2, [r3, #12]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ac:	b292      	uxth	r2, r2
 80096ae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b4:	1c9a      	adds	r2, r3, #2
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	3b02      	subs	r3, #2
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d81f      	bhi.n	8009718 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	685a      	ldr	r2, [r3, #4]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80096e6:	605a      	str	r2, [r3, #4]
 80096e8:	e016      	b.n	8009718 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f103 020c 	add.w	r2, r3, #12
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f6:	7812      	ldrb	r2, [r2, #0]
 80096f8:	b2d2      	uxtb	r2, r2
 80096fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009700:	1c5a      	adds	r2, r3, #1
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800970c:	b29b      	uxth	r3, r3
 800970e:	3b01      	subs	r3, #1
 8009710:	b29a      	uxth	r2, r3
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009718:	2301      	movs	r3, #1
 800971a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800971c:	f7fa fd10 	bl	8004140 <HAL_GetTick>
 8009720:	4602      	mov	r2, r0
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	1ad3      	subs	r3, r2, r3
 8009726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009728:	429a      	cmp	r2, r3
 800972a:	d803      	bhi.n	8009734 <HAL_SPI_TransmitReceive+0x3c2>
 800972c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009732:	d102      	bne.n	800973a <HAL_SPI_TransmitReceive+0x3c8>
 8009734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009736:	2b00      	cmp	r3, #0
 8009738:	d103      	bne.n	8009742 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800973a:	2303      	movs	r3, #3
 800973c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009740:	e01c      	b.n	800977c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009746:	b29b      	uxth	r3, r3
 8009748:	2b00      	cmp	r3, #0
 800974a:	f47f af5b 	bne.w	8009604 <HAL_SPI_TransmitReceive+0x292>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009754:	b29b      	uxth	r3, r3
 8009756:	2b00      	cmp	r3, #0
 8009758:	f47f af54 	bne.w	8009604 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800975c:	69fa      	ldr	r2, [r7, #28]
 800975e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f000 f937 	bl	80099d4 <SPI_EndRxTxTransaction>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d006      	beq.n	800977a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2220      	movs	r2, #32
 8009776:	661a      	str	r2, [r3, #96]	; 0x60
 8009778:	e000      	b.n	800977c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800977a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800978c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009790:	4618      	mov	r0, r3
 8009792:	3728      	adds	r7, #40	; 0x28
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b088      	sub	sp, #32
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	603b      	str	r3, [r7, #0]
 80097a4:	4613      	mov	r3, r2
 80097a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80097a8:	f7fa fcca 	bl	8004140 <HAL_GetTick>
 80097ac:	4602      	mov	r2, r0
 80097ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b0:	1a9b      	subs	r3, r3, r2
 80097b2:	683a      	ldr	r2, [r7, #0]
 80097b4:	4413      	add	r3, r2
 80097b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80097b8:	f7fa fcc2 	bl	8004140 <HAL_GetTick>
 80097bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80097be:	4b39      	ldr	r3, [pc, #228]	; (80098a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	015b      	lsls	r3, r3, #5
 80097c4:	0d1b      	lsrs	r3, r3, #20
 80097c6:	69fa      	ldr	r2, [r7, #28]
 80097c8:	fb02 f303 	mul.w	r3, r2, r3
 80097cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097ce:	e054      	b.n	800987a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d6:	d050      	beq.n	800987a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80097d8:	f7fa fcb2 	bl	8004140 <HAL_GetTick>
 80097dc:	4602      	mov	r2, r0
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	69fa      	ldr	r2, [r7, #28]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d902      	bls.n	80097ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d13d      	bne.n	800986a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	685a      	ldr	r2, [r3, #4]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80097fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009806:	d111      	bne.n	800982c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009810:	d004      	beq.n	800981c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800981a:	d107      	bne.n	800982c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800982a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009834:	d10f      	bne.n	8009856 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009844:	601a      	str	r2, [r3, #0]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009854:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2201      	movs	r2, #1
 800985a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009866:	2303      	movs	r3, #3
 8009868:	e017      	b.n	800989a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d101      	bne.n	8009874 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009870:	2300      	movs	r3, #0
 8009872:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	3b01      	subs	r3, #1
 8009878:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	689a      	ldr	r2, [r3, #8]
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	4013      	ands	r3, r2
 8009884:	68ba      	ldr	r2, [r7, #8]
 8009886:	429a      	cmp	r2, r3
 8009888:	bf0c      	ite	eq
 800988a:	2301      	moveq	r3, #1
 800988c:	2300      	movne	r3, #0
 800988e:	b2db      	uxtb	r3, r3
 8009890:	461a      	mov	r2, r3
 8009892:	79fb      	ldrb	r3, [r7, #7]
 8009894:	429a      	cmp	r2, r3
 8009896:	d19b      	bne.n	80097d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3720      	adds	r7, #32
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	20000000 	.word	0x20000000

080098a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08a      	sub	sp, #40	; 0x28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]
 80098b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80098ba:	f7fa fc41 	bl	8004140 <HAL_GetTick>
 80098be:	4602      	mov	r2, r0
 80098c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c2:	1a9b      	subs	r3, r3, r2
 80098c4:	683a      	ldr	r2, [r7, #0]
 80098c6:	4413      	add	r3, r2
 80098c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80098ca:	f7fa fc39 	bl	8004140 <HAL_GetTick>
 80098ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	330c      	adds	r3, #12
 80098d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80098d8:	4b3d      	ldr	r3, [pc, #244]	; (80099d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	4613      	mov	r3, r2
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	4413      	add	r3, r2
 80098e2:	00da      	lsls	r2, r3, #3
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	0d1b      	lsrs	r3, r3, #20
 80098e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ea:	fb02 f303 	mul.w	r3, r2, r3
 80098ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80098f0:	e060      	b.n	80099b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80098f8:	d107      	bne.n	800990a <SPI_WaitFifoStateUntilTimeout+0x62>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d104      	bne.n	800990a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	b2db      	uxtb	r3, r3
 8009906:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009908:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009910:	d050      	beq.n	80099b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009912:	f7fa fc15 	bl	8004140 <HAL_GetTick>
 8009916:	4602      	mov	r2, r0
 8009918:	6a3b      	ldr	r3, [r7, #32]
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800991e:	429a      	cmp	r2, r3
 8009920:	d902      	bls.n	8009928 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009924:	2b00      	cmp	r3, #0
 8009926:	d13d      	bne.n	80099a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	685a      	ldr	r2, [r3, #4]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009936:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009940:	d111      	bne.n	8009966 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800994a:	d004      	beq.n	8009956 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009954:	d107      	bne.n	8009966 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009964:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800996a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800996e:	d10f      	bne.n	8009990 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800997e:	601a      	str	r2, [r3, #0]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800998e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2200      	movs	r2, #0
 800999c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80099a0:	2303      	movs	r3, #3
 80099a2:	e010      	b.n	80099c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d101      	bne.n	80099ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80099aa:	2300      	movs	r3, #0
 80099ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	3b01      	subs	r3, #1
 80099b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	689a      	ldr	r2, [r3, #8]
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	4013      	ands	r3, r2
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d196      	bne.n	80098f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3728      	adds	r7, #40	; 0x28
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	20000000 	.word	0x20000000

080099d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af02      	add	r7, sp, #8
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f7ff ff5b 	bl	80098a8 <SPI_WaitFifoStateUntilTimeout>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d007      	beq.n	8009a08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099fc:	f043 0220 	orr.w	r2, r3, #32
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e027      	b.n	8009a58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	2180      	movs	r1, #128	; 0x80
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f7ff fec0 	bl	8009798 <SPI_WaitFlagStateUntilTimeout>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d007      	beq.n	8009a2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a22:	f043 0220 	orr.w	r2, r3, #32
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e014      	b.n	8009a58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	9300      	str	r3, [sp, #0]
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2200      	movs	r2, #0
 8009a36:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f7ff ff34 	bl	80098a8 <SPI_WaitFifoStateUntilTimeout>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d007      	beq.n	8009a56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a4a:	f043 0220 	orr.w	r2, r3, #32
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a52:	2303      	movs	r3, #3
 8009a54:	e000      	b.n	8009a58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d101      	bne.n	8009a72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e049      	b.n	8009b06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d106      	bne.n	8009a8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7fa fa8e 	bl	8003fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2202      	movs	r2, #2
 8009a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	4610      	mov	r0, r2
 8009aa0:	f000 f9d2 	bl	8009e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
	...

08009b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d001      	beq.n	8009b28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	e03b      	b.n	8009ba0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2202      	movs	r2, #2
 8009b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68da      	ldr	r2, [r3, #12]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f042 0201 	orr.w	r2, r2, #1
 8009b3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a19      	ldr	r2, [pc, #100]	; (8009bac <HAL_TIM_Base_Start_IT+0x9c>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d009      	beq.n	8009b5e <HAL_TIM_Base_Start_IT+0x4e>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b52:	d004      	beq.n	8009b5e <HAL_TIM_Base_Start_IT+0x4e>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a15      	ldr	r2, [pc, #84]	; (8009bb0 <HAL_TIM_Base_Start_IT+0xa0>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d115      	bne.n	8009b8a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	689a      	ldr	r2, [r3, #8]
 8009b64:	4b13      	ldr	r3, [pc, #76]	; (8009bb4 <HAL_TIM_Base_Start_IT+0xa4>)
 8009b66:	4013      	ands	r3, r2
 8009b68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2b06      	cmp	r3, #6
 8009b6e:	d015      	beq.n	8009b9c <HAL_TIM_Base_Start_IT+0x8c>
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b76:	d011      	beq.n	8009b9c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f042 0201 	orr.w	r2, r2, #1
 8009b86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b88:	e008      	b.n	8009b9c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f042 0201 	orr.w	r2, r2, #1
 8009b98:	601a      	str	r2, [r3, #0]
 8009b9a:	e000      	b.n	8009b9e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3714      	adds	r7, #20
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	40012c00 	.word	0x40012c00
 8009bb0:	40014000 	.word	0x40014000
 8009bb4:	00010007 	.word	0x00010007

08009bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	f003 0302 	and.w	r3, r3, #2
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d122      	bne.n	8009c14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	f003 0302 	and.w	r3, r3, #2
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d11b      	bne.n	8009c14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f06f 0202 	mvn.w	r2, #2
 8009be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2201      	movs	r2, #1
 8009bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	699b      	ldr	r3, [r3, #24]
 8009bf2:	f003 0303 	and.w	r3, r3, #3
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d003      	beq.n	8009c02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 f905 	bl	8009e0a <HAL_TIM_IC_CaptureCallback>
 8009c00:	e005      	b.n	8009c0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f8f7 	bl	8009df6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f908 	bl	8009e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	f003 0304 	and.w	r3, r3, #4
 8009c1e:	2b04      	cmp	r3, #4
 8009c20:	d122      	bne.n	8009c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	f003 0304 	and.w	r3, r3, #4
 8009c2c:	2b04      	cmp	r3, #4
 8009c2e:	d11b      	bne.n	8009c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f06f 0204 	mvn.w	r2, #4
 8009c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d003      	beq.n	8009c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f8db 	bl	8009e0a <HAL_TIM_IC_CaptureCallback>
 8009c54:	e005      	b.n	8009c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f8cd 	bl	8009df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f8de 	bl	8009e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	f003 0308 	and.w	r3, r3, #8
 8009c72:	2b08      	cmp	r3, #8
 8009c74:	d122      	bne.n	8009cbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	f003 0308 	and.w	r3, r3, #8
 8009c80:	2b08      	cmp	r3, #8
 8009c82:	d11b      	bne.n	8009cbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f06f 0208 	mvn.w	r2, #8
 8009c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2204      	movs	r2, #4
 8009c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	69db      	ldr	r3, [r3, #28]
 8009c9a:	f003 0303 	and.w	r3, r3, #3
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d003      	beq.n	8009caa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f8b1 	bl	8009e0a <HAL_TIM_IC_CaptureCallback>
 8009ca8:	e005      	b.n	8009cb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f8a3 	bl	8009df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 f8b4 	bl	8009e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	f003 0310 	and.w	r3, r3, #16
 8009cc6:	2b10      	cmp	r3, #16
 8009cc8:	d122      	bne.n	8009d10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	f003 0310 	and.w	r3, r3, #16
 8009cd4:	2b10      	cmp	r3, #16
 8009cd6:	d11b      	bne.n	8009d10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f06f 0210 	mvn.w	r2, #16
 8009ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2208      	movs	r2, #8
 8009ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	69db      	ldr	r3, [r3, #28]
 8009cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d003      	beq.n	8009cfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 f887 	bl	8009e0a <HAL_TIM_IC_CaptureCallback>
 8009cfc:	e005      	b.n	8009d0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 f879 	bl	8009df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 f88a 	bl	8009e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	f003 0301 	and.w	r3, r3, #1
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d10e      	bne.n	8009d3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	f003 0301 	and.w	r3, r3, #1
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d107      	bne.n	8009d3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f06f 0201 	mvn.w	r2, #1
 8009d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f7f9 ff10 	bl	8003b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d46:	2b80      	cmp	r3, #128	; 0x80
 8009d48:	d10e      	bne.n	8009d68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d54:	2b80      	cmp	r3, #128	; 0x80
 8009d56:	d107      	bne.n	8009d68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f944 	bl	8009ff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d76:	d10e      	bne.n	8009d96 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d82:	2b80      	cmp	r3, #128	; 0x80
 8009d84:	d107      	bne.n	8009d96 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f937 	bl	800a004 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009da0:	2b40      	cmp	r3, #64	; 0x40
 8009da2:	d10e      	bne.n	8009dc2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dae:	2b40      	cmp	r3, #64	; 0x40
 8009db0:	d107      	bne.n	8009dc2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 f838 	bl	8009e32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	f003 0320 	and.w	r3, r3, #32
 8009dcc:	2b20      	cmp	r3, #32
 8009dce:	d10e      	bne.n	8009dee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	f003 0320 	and.w	r3, r3, #32
 8009dda:	2b20      	cmp	r3, #32
 8009ddc:	d107      	bne.n	8009dee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f06f 0220 	mvn.w	r2, #32
 8009de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 f8f7 	bl	8009fdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009dee:	bf00      	nop
 8009df0:	3708      	adds	r7, #8
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009df6:	b480      	push	{r7}
 8009df8:	b083      	sub	sp, #12
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009dfe:	bf00      	nop
 8009e00:	370c      	adds	r7, #12
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr

08009e0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e0a:	b480      	push	{r7}
 8009e0c:	b083      	sub	sp, #12
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e12:	bf00      	nop
 8009e14:	370c      	adds	r7, #12
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e1e:	b480      	push	{r7}
 8009e20:	b083      	sub	sp, #12
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e26:	bf00      	nop
 8009e28:	370c      	adds	r7, #12
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b083      	sub	sp, #12
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e3a:	bf00      	nop
 8009e3c:	370c      	adds	r7, #12
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
	...

08009e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4a2a      	ldr	r2, [pc, #168]	; (8009f04 <TIM_Base_SetConfig+0xbc>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d003      	beq.n	8009e68 <TIM_Base_SetConfig+0x20>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e66:	d108      	bne.n	8009e7a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a21      	ldr	r2, [pc, #132]	; (8009f04 <TIM_Base_SetConfig+0xbc>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d00b      	beq.n	8009e9a <TIM_Base_SetConfig+0x52>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e88:	d007      	beq.n	8009e9a <TIM_Base_SetConfig+0x52>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a1e      	ldr	r2, [pc, #120]	; (8009f08 <TIM_Base_SetConfig+0xc0>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d003      	beq.n	8009e9a <TIM_Base_SetConfig+0x52>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4a1d      	ldr	r2, [pc, #116]	; (8009f0c <TIM_Base_SetConfig+0xc4>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d108      	bne.n	8009eac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	695b      	ldr	r3, [r3, #20]
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	689a      	ldr	r2, [r3, #8]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a0c      	ldr	r2, [pc, #48]	; (8009f04 <TIM_Base_SetConfig+0xbc>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d007      	beq.n	8009ee8 <TIM_Base_SetConfig+0xa0>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a0b      	ldr	r2, [pc, #44]	; (8009f08 <TIM_Base_SetConfig+0xc0>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d003      	beq.n	8009ee8 <TIM_Base_SetConfig+0xa0>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a0a      	ldr	r2, [pc, #40]	; (8009f0c <TIM_Base_SetConfig+0xc4>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d103      	bne.n	8009ef0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	691a      	ldr	r2, [r3, #16]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	615a      	str	r2, [r3, #20]
}
 8009ef6:	bf00      	nop
 8009ef8:	3714      	adds	r7, #20
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	40012c00 	.word	0x40012c00
 8009f08:	40014000 	.word	0x40014000
 8009f0c:	40014400 	.word	0x40014400

08009f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d101      	bne.n	8009f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f24:	2302      	movs	r3, #2
 8009f26:	e04f      	b.n	8009fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2202      	movs	r2, #2
 8009f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a21      	ldr	r2, [pc, #132]	; (8009fd4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d108      	bne.n	8009f64 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009f58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a14      	ldr	r2, [pc, #80]	; (8009fd4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d009      	beq.n	8009f9c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f90:	d004      	beq.n	8009f9c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a10      	ldr	r2, [pc, #64]	; (8009fd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d10c      	bne.n	8009fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fa2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68ba      	ldr	r2, [r7, #8]
 8009fb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3714      	adds	r7, #20
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr
 8009fd4:	40012c00 	.word	0x40012c00
 8009fd8:	40014000 	.word	0x40014000

08009fdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ff8:	bf00      	nop
 8009ffa:	370c      	adds	r7, #12
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a00c:	bf00      	nop
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a018:	b084      	sub	sp, #16
 800a01a:	b480      	push	{r7}
 800a01c:	b083      	sub	sp, #12
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	f107 0014 	add.w	r0, r7, #20
 800a026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	b004      	add	sp, #16
 800a038:	4770      	bx	lr

0800a03a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a03a:	b480      	push	{r7}
 800a03c:	b085      	sub	sp, #20
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a04a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a04e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	b29a      	uxth	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a070:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a074:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a07c:	b29a      	uxth	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	b29b      	uxth	r3, r3
 800a082:	43db      	mvns	r3, r3
 800a084:	b29b      	uxth	r3, r3
 800a086:	4013      	ands	r3, r2
 800a088:	b29a      	uxth	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3714      	adds	r7, #20
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b083      	sub	sp, #12
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a0aa:	2300      	movs	r3, #0
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a0b8:	b084      	sub	sp, #16
 800a0ba:	b480      	push	{r7}
 800a0bc:	b083      	sub	sp, #12
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	f107 0014 	add.w	r0, r7, #20
 800a0c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	b004      	add	sp, #16
 800a0f8:	4770      	bx	lr
	...

0800a0fc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b09d      	sub	sp, #116	; 0x74
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4413      	add	r3, r2
 800a116:	881b      	ldrh	r3, [r3, #0]
 800a118:	b29b      	uxth	r3, r3
 800a11a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a11e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a122:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	78db      	ldrb	r3, [r3, #3]
 800a12a:	2b03      	cmp	r3, #3
 800a12c:	d81f      	bhi.n	800a16e <USB_ActivateEndpoint+0x72>
 800a12e:	a201      	add	r2, pc, #4	; (adr r2, 800a134 <USB_ActivateEndpoint+0x38>)
 800a130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a134:	0800a145 	.word	0x0800a145
 800a138:	0800a161 	.word	0x0800a161
 800a13c:	0800a177 	.word	0x0800a177
 800a140:	0800a153 	.word	0x0800a153
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a144:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a148:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a14c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a150:	e012      	b.n	800a178 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a152:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a156:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a15a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a15e:	e00b      	b.n	800a178 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a160:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a164:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a168:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a16c:	e004      	b.n	800a178 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a174:	e000      	b.n	800a178 <USB_ActivateEndpoint+0x7c>
      break;
 800a176:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	441a      	add	r2, r3
 800a182:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a18a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a18e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a196:	b29b      	uxth	r3, r3
 800a198:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4413      	add	r3, r2
 800a1a4:	881b      	ldrh	r3, [r3, #0]
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	b21b      	sxth	r3, r3
 800a1aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1b2:	b21a      	sxth	r2, r3
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	b21b      	sxth	r3, r3
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	b21b      	sxth	r3, r3
 800a1be:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	441a      	add	r2, r3
 800a1cc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a1d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	7b1b      	ldrb	r3, [r3, #12]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f040 816e 	bne.w	800a4ca <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	785b      	ldrb	r3, [r3, #1]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f000 8084 	beq.w	800a300 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	61bb      	str	r3, [r7, #24]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a202:	b29b      	uxth	r3, r3
 800a204:	461a      	mov	r2, r3
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	4413      	add	r3, r2
 800a20a:	61bb      	str	r3, [r7, #24]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	00da      	lsls	r2, r3, #3
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	4413      	add	r3, r2
 800a216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a21a:	617b      	str	r3, [r7, #20]
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	88db      	ldrh	r3, [r3, #6]
 800a220:	085b      	lsrs	r3, r3, #1
 800a222:	b29b      	uxth	r3, r3
 800a224:	005b      	lsls	r3, r3, #1
 800a226:	b29a      	uxth	r2, r3
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4413      	add	r3, r2
 800a236:	881b      	ldrh	r3, [r3, #0]
 800a238:	827b      	strh	r3, [r7, #18]
 800a23a:	8a7b      	ldrh	r3, [r7, #18]
 800a23c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a240:	2b00      	cmp	r3, #0
 800a242:	d01b      	beq.n	800a27c <USB_ActivateEndpoint+0x180>
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	4413      	add	r3, r2
 800a24e:	881b      	ldrh	r3, [r3, #0]
 800a250:	b29b      	uxth	r3, r3
 800a252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a25a:	823b      	strh	r3, [r7, #16]
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	441a      	add	r2, r3
 800a266:	8a3b      	ldrh	r3, [r7, #16]
 800a268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a26c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a274:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a278:	b29b      	uxth	r3, r3
 800a27a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	78db      	ldrb	r3, [r3, #3]
 800a280:	2b01      	cmp	r3, #1
 800a282:	d020      	beq.n	800a2c6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	4413      	add	r3, r2
 800a28e:	881b      	ldrh	r3, [r3, #0]
 800a290:	b29b      	uxth	r3, r3
 800a292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a29a:	81bb      	strh	r3, [r7, #12]
 800a29c:	89bb      	ldrh	r3, [r7, #12]
 800a29e:	f083 0320 	eor.w	r3, r3, #32
 800a2a2:	81bb      	strh	r3, [r7, #12]
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	441a      	add	r2, r3
 800a2ae:	89bb      	ldrh	r3, [r7, #12]
 800a2b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	8013      	strh	r3, [r2, #0]
 800a2c4:	e2cb      	b.n	800a85e <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	4413      	add	r3, r2
 800a2d0:	881b      	ldrh	r3, [r3, #0]
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2dc:	81fb      	strh	r3, [r7, #14]
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	441a      	add	r2, r3
 800a2e8:	89fb      	ldrh	r3, [r7, #14]
 800a2ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	8013      	strh	r3, [r2, #0]
 800a2fe:	e2ae      	b.n	800a85e <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	633b      	str	r3, [r7, #48]	; 0x30
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	461a      	mov	r2, r3
 800a30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a310:	4413      	add	r3, r2
 800a312:	633b      	str	r3, [r7, #48]	; 0x30
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	00da      	lsls	r2, r3, #3
 800a31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31c:	4413      	add	r3, r2
 800a31e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a322:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	88db      	ldrh	r3, [r3, #6]
 800a328:	085b      	lsrs	r3, r3, #1
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	005b      	lsls	r3, r3, #1
 800a32e:	b29a      	uxth	r2, r3
 800a330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a332:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	62bb      	str	r3, [r7, #40]	; 0x28
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a33e:	b29b      	uxth	r3, r3
 800a340:	461a      	mov	r2, r3
 800a342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a344:	4413      	add	r3, r2
 800a346:	62bb      	str	r3, [r7, #40]	; 0x28
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	00da      	lsls	r2, r3, #3
 800a34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a350:	4413      	add	r3, r2
 800a352:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a356:	627b      	str	r3, [r7, #36]	; 0x24
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	2b3e      	cmp	r3, #62	; 0x3e
 800a35e:	d918      	bls.n	800a392 <USB_ActivateEndpoint+0x296>
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	095b      	lsrs	r3, r3, #5
 800a366:	66bb      	str	r3, [r7, #104]	; 0x68
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	691b      	ldr	r3, [r3, #16]
 800a36c:	f003 031f 	and.w	r3, r3, #31
 800a370:	2b00      	cmp	r3, #0
 800a372:	d102      	bne.n	800a37a <USB_ActivateEndpoint+0x27e>
 800a374:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a376:	3b01      	subs	r3, #1
 800a378:	66bb      	str	r3, [r7, #104]	; 0x68
 800a37a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	029b      	lsls	r3, r3, #10
 800a380:	b29b      	uxth	r3, r3
 800a382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a38a:	b29a      	uxth	r2, r3
 800a38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38e:	801a      	strh	r2, [r3, #0]
 800a390:	e029      	b.n	800a3e6 <USB_ActivateEndpoint+0x2ea>
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d112      	bne.n	800a3c0 <USB_ActivateEndpoint+0x2c4>
 800a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39c:	881b      	ldrh	r3, [r3, #0]
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a8:	801a      	strh	r2, [r3, #0]
 800a3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ac:	881b      	ldrh	r3, [r3, #0]
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3b8:	b29a      	uxth	r2, r3
 800a3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3bc:	801a      	strh	r2, [r3, #0]
 800a3be:	e012      	b.n	800a3e6 <USB_ActivateEndpoint+0x2ea>
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	085b      	lsrs	r3, r3, #1
 800a3c6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	691b      	ldr	r3, [r3, #16]
 800a3cc:	f003 0301 	and.w	r3, r3, #1
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d002      	beq.n	800a3da <USB_ActivateEndpoint+0x2de>
 800a3d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	029b      	lsls	r3, r3, #10
 800a3e0:	b29a      	uxth	r2, r3
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	4413      	add	r3, r2
 800a3f0:	881b      	ldrh	r3, [r3, #0]
 800a3f2:	847b      	strh	r3, [r7, #34]	; 0x22
 800a3f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a3f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d01b      	beq.n	800a436 <USB_ActivateEndpoint+0x33a>
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	4413      	add	r3, r2
 800a408:	881b      	ldrh	r3, [r3, #0]
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a414:	843b      	strh	r3, [r7, #32]
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	441a      	add	r2, r3
 800a420:	8c3b      	ldrh	r3, [r7, #32]
 800a422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a42a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a42e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a432:	b29b      	uxth	r3, r3
 800a434:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d124      	bne.n	800a488 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	4413      	add	r3, r2
 800a448:	881b      	ldrh	r3, [r3, #0]
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a454:	83bb      	strh	r3, [r7, #28]
 800a456:	8bbb      	ldrh	r3, [r7, #28]
 800a458:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a45c:	83bb      	strh	r3, [r7, #28]
 800a45e:	8bbb      	ldrh	r3, [r7, #28]
 800a460:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a464:	83bb      	strh	r3, [r7, #28]
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	441a      	add	r2, r3
 800a470:	8bbb      	ldrh	r3, [r7, #28]
 800a472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a47a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a47e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a482:	b29b      	uxth	r3, r3
 800a484:	8013      	strh	r3, [r2, #0]
 800a486:	e1ea      	b.n	800a85e <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	4413      	add	r3, r2
 800a492:	881b      	ldrh	r3, [r3, #0]
 800a494:	b29b      	uxth	r3, r3
 800a496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a49a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a49e:	83fb      	strh	r3, [r7, #30]
 800a4a0:	8bfb      	ldrh	r3, [r7, #30]
 800a4a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a4a6:	83fb      	strh	r3, [r7, #30]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	441a      	add	r2, r3
 800a4b2:	8bfb      	ldrh	r3, [r7, #30]
 800a4b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	8013      	strh	r3, [r2, #0]
 800a4c8:	e1c9      	b.n	800a85e <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	78db      	ldrb	r3, [r3, #3]
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	d11e      	bne.n	800a510 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	4413      	add	r3, r2
 800a4dc:	881b      	ldrh	r3, [r3, #0]
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4e8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	441a      	add	r2, r3
 800a4f6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a4fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a502:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	8013      	strh	r3, [r2, #0]
 800a50e:	e01d      	b.n	800a54c <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	4413      	add	r3, r2
 800a51a:	881b      	ldrh	r3, [r3, #0]
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a526:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	441a      	add	r2, r3
 800a534:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a53c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a548:	b29b      	uxth	r3, r3
 800a54a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a556:	b29b      	uxth	r3, r3
 800a558:	461a      	mov	r2, r3
 800a55a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a55c:	4413      	add	r3, r2
 800a55e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	00da      	lsls	r2, r3, #3
 800a566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a568:	4413      	add	r3, r2
 800a56a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a56e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	891b      	ldrh	r3, [r3, #8]
 800a574:	085b      	lsrs	r3, r3, #1
 800a576:	b29b      	uxth	r3, r3
 800a578:	005b      	lsls	r3, r3, #1
 800a57a:	b29a      	uxth	r2, r3
 800a57c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a57e:	801a      	strh	r2, [r3, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	657b      	str	r3, [r7, #84]	; 0x54
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	461a      	mov	r2, r3
 800a58e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a590:	4413      	add	r3, r2
 800a592:	657b      	str	r3, [r7, #84]	; 0x54
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	00da      	lsls	r2, r3, #3
 800a59a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a59c:	4413      	add	r3, r2
 800a59e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a5a2:	653b      	str	r3, [r7, #80]	; 0x50
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	895b      	ldrh	r3, [r3, #10]
 800a5a8:	085b      	lsrs	r3, r3, #1
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	005b      	lsls	r3, r3, #1
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5b2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	785b      	ldrb	r3, [r3, #1]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f040 8093 	bne.w	800a6e4 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	4413      	add	r3, r2
 800a5c8:	881b      	ldrh	r3, [r3, #0]
 800a5ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a5ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a5d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d01b      	beq.n	800a612 <USB_ActivateEndpoint+0x516>
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	4413      	add	r3, r2
 800a5e4:	881b      	ldrh	r3, [r3, #0]
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	441a      	add	r2, r3
 800a5fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a5fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a60a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a60e:	b29b      	uxth	r3, r3
 800a610:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	4413      	add	r3, r2
 800a61c:	881b      	ldrh	r3, [r3, #0]
 800a61e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a620:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a626:	2b00      	cmp	r3, #0
 800a628:	d01b      	beq.n	800a662 <USB_ActivateEndpoint+0x566>
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	009b      	lsls	r3, r3, #2
 800a632:	4413      	add	r3, r2
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	b29b      	uxth	r3, r3
 800a638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a63c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a640:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	441a      	add	r2, r3
 800a64c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a64e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a65a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a65e:	b29b      	uxth	r3, r3
 800a660:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	4413      	add	r3, r2
 800a66c:	881b      	ldrh	r3, [r3, #0]
 800a66e:	b29b      	uxth	r3, r3
 800a670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a678:	873b      	strh	r3, [r7, #56]	; 0x38
 800a67a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a67c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a680:	873b      	strh	r3, [r7, #56]	; 0x38
 800a682:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a684:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a688:	873b      	strh	r3, [r7, #56]	; 0x38
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	441a      	add	r2, r3
 800a694:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a69a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a69e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	4413      	add	r3, r2
 800a6b4:	881b      	ldrh	r3, [r3, #0]
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6c0:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	441a      	add	r2, r3
 800a6cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a6ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	8013      	strh	r3, [r2, #0]
 800a6e2:	e0bc      	b.n	800a85e <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	4413      	add	r3, r2
 800a6ee:	881b      	ldrh	r3, [r3, #0]
 800a6f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a6f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a6f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d01d      	beq.n	800a73c <USB_ActivateEndpoint+0x640>
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	4413      	add	r3, r2
 800a70a:	881b      	ldrh	r3, [r3, #0]
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a716:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	441a      	add	r2, r3
 800a724:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a72c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a738:	b29b      	uxth	r3, r3
 800a73a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	4413      	add	r3, r2
 800a746:	881b      	ldrh	r3, [r3, #0]
 800a748:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a74c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a754:	2b00      	cmp	r3, #0
 800a756:	d01d      	beq.n	800a794 <USB_ActivateEndpoint+0x698>
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	4413      	add	r3, r2
 800a762:	881b      	ldrh	r3, [r3, #0]
 800a764:	b29b      	uxth	r3, r3
 800a766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a76a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a76e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	441a      	add	r2, r3
 800a77c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a78c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a790:	b29b      	uxth	r3, r3
 800a792:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	78db      	ldrb	r3, [r3, #3]
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d024      	beq.n	800a7e6 <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	4413      	add	r3, r2
 800a7a6:	881b      	ldrh	r3, [r3, #0]
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a7b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a7ba:	f083 0320 	eor.w	r3, r3, #32
 800a7be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	441a      	add	r2, r3
 800a7cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a7d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	8013      	strh	r3, [r2, #0]
 800a7e4:	e01d      	b.n	800a822 <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4413      	add	r3, r2
 800a7f0:	881b      	ldrh	r3, [r3, #0]
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7fc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	441a      	add	r2, r3
 800a80a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a80e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a812:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a81a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a81e:	b29b      	uxth	r3, r3
 800a820:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	4413      	add	r3, r2
 800a82c:	881b      	ldrh	r3, [r3, #0]
 800a82e:	b29b      	uxth	r3, r3
 800a830:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a838:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	441a      	add	r2, r3
 800a846:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a84a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a84e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a85e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a862:	4618      	mov	r0, r3
 800a864:	3774      	adds	r7, #116	; 0x74
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop

0800a870 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a870:	b480      	push	{r7}
 800a872:	b08d      	sub	sp, #52	; 0x34
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	7b1b      	ldrb	r3, [r3, #12]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	f040 808e 	bne.w	800a9a0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	785b      	ldrb	r3, [r3, #1]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d044      	beq.n	800a916 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	4413      	add	r3, r2
 800a896:	881b      	ldrh	r3, [r3, #0]
 800a898:	81bb      	strh	r3, [r7, #12]
 800a89a:	89bb      	ldrh	r3, [r7, #12]
 800a89c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d01b      	beq.n	800a8dc <USB_DeactivateEndpoint+0x6c>
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	4413      	add	r3, r2
 800a8ae:	881b      	ldrh	r3, [r3, #0]
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ba:	817b      	strh	r3, [r7, #10]
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	441a      	add	r2, r3
 800a8c6:	897b      	ldrh	r3, [r7, #10]
 800a8c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	4413      	add	r3, r2
 800a8e6:	881b      	ldrh	r3, [r3, #0]
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8f2:	813b      	strh	r3, [r7, #8]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	441a      	add	r2, r3
 800a8fe:	893b      	ldrh	r3, [r7, #8]
 800a900:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a904:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a90c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a910:	b29b      	uxth	r3, r3
 800a912:	8013      	strh	r3, [r2, #0]
 800a914:	e192      	b.n	800ac3c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4413      	add	r3, r2
 800a920:	881b      	ldrh	r3, [r3, #0]
 800a922:	827b      	strh	r3, [r7, #18]
 800a924:	8a7b      	ldrh	r3, [r7, #18]
 800a926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d01b      	beq.n	800a966 <USB_DeactivateEndpoint+0xf6>
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4413      	add	r3, r2
 800a938:	881b      	ldrh	r3, [r3, #0]
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a944:	823b      	strh	r3, [r7, #16]
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	441a      	add	r2, r3
 800a950:	8a3b      	ldrh	r3, [r7, #16]
 800a952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a95a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a95e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a962:	b29b      	uxth	r3, r3
 800a964:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	4413      	add	r3, r2
 800a970:	881b      	ldrh	r3, [r3, #0]
 800a972:	b29b      	uxth	r3, r3
 800a974:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a97c:	81fb      	strh	r3, [r7, #14]
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	441a      	add	r2, r3
 800a988:	89fb      	ldrh	r3, [r7, #14]
 800a98a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a98e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	8013      	strh	r3, [r2, #0]
 800a99e:	e14d      	b.n	800ac3c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	785b      	ldrb	r3, [r3, #1]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f040 80a5 	bne.w	800aaf4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4413      	add	r3, r2
 800a9b4:	881b      	ldrh	r3, [r3, #0]
 800a9b6:	843b      	strh	r3, [r7, #32]
 800a9b8:	8c3b      	ldrh	r3, [r7, #32]
 800a9ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d01b      	beq.n	800a9fa <USB_DeactivateEndpoint+0x18a>
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	4413      	add	r3, r2
 800a9cc:	881b      	ldrh	r3, [r3, #0]
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9d8:	83fb      	strh	r3, [r7, #30]
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	441a      	add	r2, r3
 800a9e4:	8bfb      	ldrh	r3, [r7, #30]
 800a9e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a9f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	4413      	add	r3, r2
 800aa04:	881b      	ldrh	r3, [r3, #0]
 800aa06:	83bb      	strh	r3, [r7, #28]
 800aa08:	8bbb      	ldrh	r3, [r7, #28]
 800aa0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d01b      	beq.n	800aa4a <USB_DeactivateEndpoint+0x1da>
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	4413      	add	r3, r2
 800aa1c:	881b      	ldrh	r3, [r3, #0]
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa28:	837b      	strh	r3, [r7, #26]
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	441a      	add	r2, r3
 800aa34:	8b7b      	ldrh	r3, [r7, #26]
 800aa36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4413      	add	r3, r2
 800aa54:	881b      	ldrh	r3, [r3, #0]
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa60:	833b      	strh	r3, [r7, #24]
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	441a      	add	r2, r3
 800aa6c:	8b3b      	ldrh	r3, [r7, #24]
 800aa6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	4413      	add	r3, r2
 800aa8c:	881b      	ldrh	r3, [r3, #0]
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa98:	82fb      	strh	r3, [r7, #22]
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	441a      	add	r2, r3
 800aaa4:	8afb      	ldrh	r3, [r7, #22]
 800aaa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	4413      	add	r3, r2
 800aac4:	881b      	ldrh	r3, [r3, #0]
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aacc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aad0:	82bb      	strh	r3, [r7, #20]
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	441a      	add	r2, r3
 800aadc:	8abb      	ldrh	r3, [r7, #20]
 800aade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	8013      	strh	r3, [r2, #0]
 800aaf2:	e0a3      	b.n	800ac3c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4413      	add	r3, r2
 800aafe:	881b      	ldrh	r3, [r3, #0]
 800ab00:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ab02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ab04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d01b      	beq.n	800ab44 <USB_DeactivateEndpoint+0x2d4>
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	4413      	add	r3, r2
 800ab16:	881b      	ldrh	r3, [r3, #0]
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab22:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	441a      	add	r2, r3
 800ab2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ab30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4413      	add	r3, r2
 800ab4e:	881b      	ldrh	r3, [r3, #0]
 800ab50:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ab52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ab54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d01b      	beq.n	800ab94 <USB_DeactivateEndpoint+0x324>
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	4413      	add	r3, r2
 800ab66:	881b      	ldrh	r3, [r3, #0]
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab72:	853b      	strh	r3, [r7, #40]	; 0x28
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	441a      	add	r2, r3
 800ab7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ab80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	4413      	add	r3, r2
 800ab9e:	881b      	ldrh	r3, [r3, #0]
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abaa:	84fb      	strh	r3, [r7, #38]	; 0x26
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	441a      	add	r2, r3
 800abb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800abb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800abc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abc8:	b29b      	uxth	r3, r3
 800abca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	4413      	add	r3, r2
 800abd6:	881b      	ldrh	r3, [r3, #0]
 800abd8:	b29b      	uxth	r3, r3
 800abda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abe2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	441a      	add	r2, r3
 800abee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4413      	add	r3, r2
 800ac0e:	881b      	ldrh	r3, [r3, #0]
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac1a:	847b      	strh	r3, [r7, #34]	; 0x22
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	441a      	add	r2, r3
 800ac26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3734      	adds	r7, #52	; 0x34
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b0c2      	sub	sp, #264	; 0x108
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac58:	6018      	str	r0, [r3, #0]
 800ac5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac62:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ac64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	785b      	ldrb	r3, [r3, #1]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	f040 867b 	bne.w	800b96c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ac76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	699a      	ldr	r2, [r3, #24]
 800ac82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	691b      	ldr	r3, [r3, #16]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d908      	bls.n	800aca4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800ac92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800aca2:	e007      	b.n	800acb4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800aca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	699b      	ldr	r3, [r3, #24]
 800acb0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800acb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	7b1b      	ldrb	r3, [r3, #12]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d13a      	bne.n	800ad3a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800acc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	6959      	ldr	r1, [r3, #20]
 800acd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	88da      	ldrh	r2, [r3, #6]
 800acdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ace6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800acea:	6800      	ldr	r0, [r0, #0]
 800acec:	f001 fc3e 	bl	800c56c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800acf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	613b      	str	r3, [r7, #16]
 800acfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	4413      	add	r3, r2
 800ad12:	613b      	str	r3, [r7, #16]
 800ad14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	00da      	lsls	r2, r3, #3
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	4413      	add	r3, r2
 800ad26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ad2a:	60fb      	str	r3, [r7, #12]
 800ad2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad30:	b29a      	uxth	r2, r3
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	801a      	strh	r2, [r3, #0]
 800ad36:	f000 bde3 	b.w	800b900 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ad3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	78db      	ldrb	r3, [r3, #3]
 800ad46:	2b02      	cmp	r3, #2
 800ad48:	f040 843a 	bne.w	800b5c0 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ad4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	6a1a      	ldr	r2, [r3, #32]
 800ad58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	f240 83b7 	bls.w	800b4d8 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ad6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	4413      	add	r3, r2
 800ad84:	881b      	ldrh	r3, [r3, #0]
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad90:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800ad94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ada2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	441a      	add	r2, r3
 800adae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800adb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800adbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800adc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	6a1a      	ldr	r2, [r3, #32]
 800add2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add6:	1ad2      	subs	r2, r2, r3
 800add8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800addc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ade4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ade8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	4413      	add	r3, r2
 800adfe:	881b      	ldrh	r3, [r3, #0]
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f000 81b3 	beq.w	800b172 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ae0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	633b      	str	r3, [r7, #48]	; 0x30
 800ae18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	785b      	ldrb	r3, [r3, #1]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d16d      	bne.n	800af04 <USB_EPStartXfer+0x2ba>
 800ae28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	461a      	mov	r2, r3
 800ae46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae48:	4413      	add	r3, r2
 800ae4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	00da      	lsls	r2, r3, #3
 800ae5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5c:	4413      	add	r3, r2
 800ae5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae62:	627b      	str	r3, [r7, #36]	; 0x24
 800ae64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae68:	2b3e      	cmp	r3, #62	; 0x3e
 800ae6a:	d91c      	bls.n	800aea6 <USB_EPStartXfer+0x25c>
 800ae6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae70:	095b      	lsrs	r3, r3, #5
 800ae72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ae76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae7a:	f003 031f 	and.w	r3, r3, #31
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d104      	bne.n	800ae8c <USB_EPStartXfer+0x242>
 800ae82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ae86:	3b01      	subs	r3, #1
 800ae88:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ae8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	029b      	lsls	r3, r3, #10
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea2:	801a      	strh	r2, [r3, #0]
 800aea4:	e053      	b.n	800af4e <USB_EPStartXfer+0x304>
 800aea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d112      	bne.n	800aed4 <USB_EPStartXfer+0x28a>
 800aeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb0:	881b      	ldrh	r3, [r3, #0]
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aeb8:	b29a      	uxth	r2, r3
 800aeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebc:	801a      	strh	r2, [r3, #0]
 800aebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec0:	881b      	ldrh	r3, [r3, #0]
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aecc:	b29a      	uxth	r2, r3
 800aece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed0:	801a      	strh	r2, [r3, #0]
 800aed2:	e03c      	b.n	800af4e <USB_EPStartXfer+0x304>
 800aed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aed8:	085b      	lsrs	r3, r3, #1
 800aeda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee2:	f003 0301 	and.w	r3, r3, #1
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d004      	beq.n	800aef4 <USB_EPStartXfer+0x2aa>
 800aeea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800aeee:	3301      	adds	r3, #1
 800aef0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aef4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	029b      	lsls	r3, r3, #10
 800aefc:	b29a      	uxth	r2, r3
 800aefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af00:	801a      	strh	r2, [r3, #0]
 800af02:	e024      	b.n	800af4e <USB_EPStartXfer+0x304>
 800af04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	785b      	ldrb	r3, [r3, #1]
 800af10:	2b01      	cmp	r3, #1
 800af12:	d11c      	bne.n	800af4e <USB_EPStartXfer+0x304>
 800af14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af22:	b29b      	uxth	r3, r3
 800af24:	461a      	mov	r2, r3
 800af26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af28:	4413      	add	r3, r2
 800af2a:	633b      	str	r3, [r7, #48]	; 0x30
 800af2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	00da      	lsls	r2, r3, #3
 800af3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3c:	4413      	add	r3, r2
 800af3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af48:	b29a      	uxth	r2, r3
 800af4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800af4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	895b      	ldrh	r3, [r3, #10]
 800af5a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	6959      	ldr	r1, [r3, #20]
 800af6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af6e:	b29b      	uxth	r3, r3
 800af70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800af74:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800af78:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800af7c:	6800      	ldr	r0, [r0, #0]
 800af7e:	f001 faf5 	bl	800c56c <USB_WritePMA>
            ep->xfer_buff += len;
 800af82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	695a      	ldr	r2, [r3, #20]
 800af8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af92:	441a      	add	r2, r3
 800af94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800afa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	6a1a      	ldr	r2, [r3, #32]
 800afac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d90f      	bls.n	800afdc <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800afbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	6a1a      	ldr	r2, [r3, #32]
 800afc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afcc:	1ad2      	subs	r2, r2, r3
 800afce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	621a      	str	r2, [r3, #32]
 800afda:	e00e      	b.n	800affa <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800afdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	6a1b      	ldr	r3, [r3, #32]
 800afe8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800afec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	2200      	movs	r2, #0
 800aff8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800affa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800affe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	785b      	ldrb	r3, [r3, #1]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d16d      	bne.n	800b0e6 <USB_EPStartXfer+0x49c>
 800b00a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b00e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	61bb      	str	r3, [r7, #24]
 800b016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b01a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b024:	b29b      	uxth	r3, r3
 800b026:	461a      	mov	r2, r3
 800b028:	69bb      	ldr	r3, [r7, #24]
 800b02a:	4413      	add	r3, r2
 800b02c:	61bb      	str	r3, [r7, #24]
 800b02e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	00da      	lsls	r2, r3, #3
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	4413      	add	r3, r2
 800b040:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b044:	617b      	str	r3, [r7, #20]
 800b046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b04a:	2b3e      	cmp	r3, #62	; 0x3e
 800b04c:	d91c      	bls.n	800b088 <USB_EPStartXfer+0x43e>
 800b04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b052:	095b      	lsrs	r3, r3, #5
 800b054:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b05c:	f003 031f 	and.w	r3, r3, #31
 800b060:	2b00      	cmp	r3, #0
 800b062:	d104      	bne.n	800b06e <USB_EPStartXfer+0x424>
 800b064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b068:	3b01      	subs	r3, #1
 800b06a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b06e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b072:	b29b      	uxth	r3, r3
 800b074:	029b      	lsls	r3, r3, #10
 800b076:	b29b      	uxth	r3, r3
 800b078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b07c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b080:	b29a      	uxth	r2, r3
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	801a      	strh	r2, [r3, #0]
 800b086:	e059      	b.n	800b13c <USB_EPStartXfer+0x4f2>
 800b088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d112      	bne.n	800b0b6 <USB_EPStartXfer+0x46c>
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	881b      	ldrh	r3, [r3, #0]
 800b094:	b29b      	uxth	r3, r3
 800b096:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b09a:	b29a      	uxth	r2, r3
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	801a      	strh	r2, [r3, #0]
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	881b      	ldrh	r3, [r3, #0]
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0ae:	b29a      	uxth	r2, r3
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	801a      	strh	r2, [r3, #0]
 800b0b4:	e042      	b.n	800b13c <USB_EPStartXfer+0x4f2>
 800b0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ba:	085b      	lsrs	r3, r3, #1
 800b0bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0c4:	f003 0301 	and.w	r3, r3, #1
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d004      	beq.n	800b0d6 <USB_EPStartXfer+0x48c>
 800b0cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b0d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	029b      	lsls	r3, r3, #10
 800b0de:	b29a      	uxth	r2, r3
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	801a      	strh	r2, [r3, #0]
 800b0e4:	e02a      	b.n	800b13c <USB_EPStartXfer+0x4f2>
 800b0e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	785b      	ldrb	r3, [r3, #1]
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d122      	bne.n	800b13c <USB_EPStartXfer+0x4f2>
 800b0f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	623b      	str	r3, [r7, #32]
 800b102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b110:	b29b      	uxth	r3, r3
 800b112:	461a      	mov	r2, r3
 800b114:	6a3b      	ldr	r3, [r7, #32]
 800b116:	4413      	add	r3, r2
 800b118:	623b      	str	r3, [r7, #32]
 800b11a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b11e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	00da      	lsls	r2, r3, #3
 800b128:	6a3b      	ldr	r3, [r7, #32]
 800b12a:	4413      	add	r3, r2
 800b12c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b130:	61fb      	str	r3, [r7, #28]
 800b132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b136:	b29a      	uxth	r2, r3
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b13c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	891b      	ldrh	r3, [r3, #8]
 800b148:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b14c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	6959      	ldr	r1, [r3, #20]
 800b158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b162:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b166:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b16a:	6800      	ldr	r0, [r0, #0]
 800b16c:	f001 f9fe 	bl	800c56c <USB_WritePMA>
 800b170:	e3c6      	b.n	800b900 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	785b      	ldrb	r3, [r3, #1]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d16d      	bne.n	800b25e <USB_EPStartXfer+0x614>
 800b182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b186:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b18e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b192:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	461a      	mov	r2, r3
 800b1a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1a2:	4413      	add	r3, r2
 800b1a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	00da      	lsls	r2, r3, #3
 800b1b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1b6:	4413      	add	r3, r2
 800b1b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b1bc:	647b      	str	r3, [r7, #68]	; 0x44
 800b1be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1c2:	2b3e      	cmp	r3, #62	; 0x3e
 800b1c4:	d91c      	bls.n	800b200 <USB_EPStartXfer+0x5b6>
 800b1c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1ca:	095b      	lsrs	r3, r3, #5
 800b1cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b1d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1d4:	f003 031f 	and.w	r3, r3, #31
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d104      	bne.n	800b1e6 <USB_EPStartXfer+0x59c>
 800b1dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b1e0:	3b01      	subs	r3, #1
 800b1e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b1e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	029b      	lsls	r3, r3, #10
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1fc:	801a      	strh	r2, [r3, #0]
 800b1fe:	e059      	b.n	800b2b4 <USB_EPStartXfer+0x66a>
 800b200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b204:	2b00      	cmp	r3, #0
 800b206:	d112      	bne.n	800b22e <USB_EPStartXfer+0x5e4>
 800b208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b20a:	881b      	ldrh	r3, [r3, #0]
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b212:	b29a      	uxth	r2, r3
 800b214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b216:	801a      	strh	r2, [r3, #0]
 800b218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b21a:	881b      	ldrh	r3, [r3, #0]
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b226:	b29a      	uxth	r2, r3
 800b228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b22a:	801a      	strh	r2, [r3, #0]
 800b22c:	e042      	b.n	800b2b4 <USB_EPStartXfer+0x66a>
 800b22e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b232:	085b      	lsrs	r3, r3, #1
 800b234:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b23c:	f003 0301 	and.w	r3, r3, #1
 800b240:	2b00      	cmp	r3, #0
 800b242:	d004      	beq.n	800b24e <USB_EPStartXfer+0x604>
 800b244:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b248:	3301      	adds	r3, #1
 800b24a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b24e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b252:	b29b      	uxth	r3, r3
 800b254:	029b      	lsls	r3, r3, #10
 800b256:	b29a      	uxth	r2, r3
 800b258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b25a:	801a      	strh	r2, [r3, #0]
 800b25c:	e02a      	b.n	800b2b4 <USB_EPStartXfer+0x66a>
 800b25e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	785b      	ldrb	r3, [r3, #1]
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d122      	bne.n	800b2b4 <USB_EPStartXfer+0x66a>
 800b26e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b272:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	653b      	str	r3, [r7, #80]	; 0x50
 800b27a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b27e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b288:	b29b      	uxth	r3, r3
 800b28a:	461a      	mov	r2, r3
 800b28c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b28e:	4413      	add	r3, r2
 800b290:	653b      	str	r3, [r7, #80]	; 0x50
 800b292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	00da      	lsls	r2, r3, #3
 800b2a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2a2:	4413      	add	r3, r2
 800b2a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b2a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ae:	b29a      	uxth	r2, r3
 800b2b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b2b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	891b      	ldrh	r3, [r3, #8]
 800b2c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b2c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	6959      	ldr	r1, [r3, #20]
 800b2d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b2da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b2de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b2e2:	6800      	ldr	r0, [r0, #0]
 800b2e4:	f001 f942 	bl	800c56c <USB_WritePMA>
            ep->xfer_buff += len;
 800b2e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	695a      	ldr	r2, [r3, #20]
 800b2f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f8:	441a      	add	r2, r3
 800b2fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b30a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	6a1a      	ldr	r2, [r3, #32]
 800b312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	691b      	ldr	r3, [r3, #16]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d90f      	bls.n	800b342 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800b322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	6a1a      	ldr	r2, [r3, #32]
 800b32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b332:	1ad2      	subs	r2, r2, r3
 800b334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b338:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	621a      	str	r2, [r3, #32]
 800b340:	e00e      	b.n	800b360 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800b342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	6a1b      	ldr	r3, [r3, #32]
 800b34e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2200      	movs	r2, #0
 800b35e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b364:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	643b      	str	r3, [r7, #64]	; 0x40
 800b36c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	785b      	ldrb	r3, [r3, #1]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d16d      	bne.n	800b458 <USB_EPStartXfer+0x80e>
 800b37c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b380:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	63bb      	str	r3, [r7, #56]	; 0x38
 800b388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b38c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b396:	b29b      	uxth	r3, r3
 800b398:	461a      	mov	r2, r3
 800b39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39c:	4413      	add	r3, r2
 800b39e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b3a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	00da      	lsls	r2, r3, #3
 800b3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b0:	4413      	add	r3, r2
 800b3b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b3b6:	637b      	str	r3, [r7, #52]	; 0x34
 800b3b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3bc:	2b3e      	cmp	r3, #62	; 0x3e
 800b3be:	d91c      	bls.n	800b3fa <USB_EPStartXfer+0x7b0>
 800b3c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3c4:	095b      	lsrs	r3, r3, #5
 800b3c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b3ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ce:	f003 031f 	and.w	r3, r3, #31
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d104      	bne.n	800b3e0 <USB_EPStartXfer+0x796>
 800b3d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b3e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	029b      	lsls	r3, r3, #10
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3f6:	801a      	strh	r2, [r3, #0]
 800b3f8:	e053      	b.n	800b4a2 <USB_EPStartXfer+0x858>
 800b3fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d112      	bne.n	800b428 <USB_EPStartXfer+0x7de>
 800b402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b404:	881b      	ldrh	r3, [r3, #0]
 800b406:	b29b      	uxth	r3, r3
 800b408:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b40c:	b29a      	uxth	r2, r3
 800b40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b410:	801a      	strh	r2, [r3, #0]
 800b412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b414:	881b      	ldrh	r3, [r3, #0]
 800b416:	b29b      	uxth	r3, r3
 800b418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b41c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b420:	b29a      	uxth	r2, r3
 800b422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b424:	801a      	strh	r2, [r3, #0]
 800b426:	e03c      	b.n	800b4a2 <USB_EPStartXfer+0x858>
 800b428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b42c:	085b      	lsrs	r3, r3, #1
 800b42e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b436:	f003 0301 	and.w	r3, r3, #1
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d004      	beq.n	800b448 <USB_EPStartXfer+0x7fe>
 800b43e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b442:	3301      	adds	r3, #1
 800b444:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	029b      	lsls	r3, r3, #10
 800b450:	b29a      	uxth	r2, r3
 800b452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b454:	801a      	strh	r2, [r3, #0]
 800b456:	e024      	b.n	800b4a2 <USB_EPStartXfer+0x858>
 800b458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b45c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	785b      	ldrb	r3, [r3, #1]
 800b464:	2b01      	cmp	r3, #1
 800b466:	d11c      	bne.n	800b4a2 <USB_EPStartXfer+0x858>
 800b468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b46c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b476:	b29b      	uxth	r3, r3
 800b478:	461a      	mov	r2, r3
 800b47a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b47c:	4413      	add	r3, r2
 800b47e:	643b      	str	r3, [r7, #64]	; 0x40
 800b480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	00da      	lsls	r2, r3, #3
 800b48e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b490:	4413      	add	r3, r2
 800b492:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b496:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b49c:	b29a      	uxth	r2, r3
 800b49e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b4a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	895b      	ldrh	r3, [r3, #10]
 800b4ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b4b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	6959      	ldr	r1, [r3, #20]
 800b4be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b4c8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b4cc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b4d0:	6800      	ldr	r0, [r0, #0]
 800b4d2:	f001 f84b 	bl	800c56c <USB_WritePMA>
 800b4d6:	e213      	b.n	800b900 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b4d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	6a1b      	ldr	r3, [r3, #32]
 800b4e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	4413      	add	r3, r2
 800b502:	881b      	ldrh	r3, [r3, #0]
 800b504:	b29b      	uxth	r3, r3
 800b506:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b50a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b50e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b516:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	441a      	add	r2, r3
 800b52c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b53c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b540:	b29b      	uxth	r3, r3
 800b542:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b548:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b554:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b55e:	b29b      	uxth	r3, r3
 800b560:	461a      	mov	r2, r3
 800b562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b564:	4413      	add	r3, r2
 800b566:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b56c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	00da      	lsls	r2, r3, #3
 800b576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b578:	4413      	add	r3, r2
 800b57a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b57e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b584:	b29a      	uxth	r2, r3
 800b586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b588:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b58a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b58e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	891b      	ldrh	r3, [r3, #8]
 800b596:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b59a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b59e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	6959      	ldr	r1, [r3, #20]
 800b5a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b5b0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b5b4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b5b8:	6800      	ldr	r0, [r0, #0]
 800b5ba:	f000 ffd7 	bl	800c56c <USB_WritePMA>
 800b5be:	e19f      	b.n	800b900 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b5c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	6a1a      	ldr	r2, [r3, #32]
 800b5cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d0:	1ad2      	subs	r2, r2, r3
 800b5d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b5de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	4413      	add	r3, r2
 800b5f8:	881b      	ldrh	r3, [r3, #0]
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b600:	2b00      	cmp	r3, #0
 800b602:	f000 80bc 	beq.w	800b77e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b60a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	673b      	str	r3, [r7, #112]	; 0x70
 800b612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	785b      	ldrb	r3, [r3, #1]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d16d      	bne.n	800b6fe <USB_EPStartXfer+0xab4>
 800b622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b62e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	461a      	mov	r2, r3
 800b640:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b642:	4413      	add	r3, r2
 800b644:	66bb      	str	r3, [r7, #104]	; 0x68
 800b646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b64a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	00da      	lsls	r2, r3, #3
 800b654:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b656:	4413      	add	r3, r2
 800b658:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b65c:	667b      	str	r3, [r7, #100]	; 0x64
 800b65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b662:	2b3e      	cmp	r3, #62	; 0x3e
 800b664:	d91c      	bls.n	800b6a0 <USB_EPStartXfer+0xa56>
 800b666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b66a:	095b      	lsrs	r3, r3, #5
 800b66c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b674:	f003 031f 	and.w	r3, r3, #31
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d104      	bne.n	800b686 <USB_EPStartXfer+0xa3c>
 800b67c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b680:	3b01      	subs	r3, #1
 800b682:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b686:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	029b      	lsls	r3, r3, #10
 800b68e:	b29b      	uxth	r3, r3
 800b690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b698:	b29a      	uxth	r2, r3
 800b69a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b69c:	801a      	strh	r2, [r3, #0]
 800b69e:	e053      	b.n	800b748 <USB_EPStartXfer+0xafe>
 800b6a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d112      	bne.n	800b6ce <USB_EPStartXfer+0xa84>
 800b6a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6aa:	881b      	ldrh	r3, [r3, #0]
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b6b2:	b29a      	uxth	r2, r3
 800b6b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6b6:	801a      	strh	r2, [r3, #0]
 800b6b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6ba:	881b      	ldrh	r3, [r3, #0]
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6c6:	b29a      	uxth	r2, r3
 800b6c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6ca:	801a      	strh	r2, [r3, #0]
 800b6cc:	e03c      	b.n	800b748 <USB_EPStartXfer+0xafe>
 800b6ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d2:	085b      	lsrs	r3, r3, #1
 800b6d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b6d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6dc:	f003 0301 	and.w	r3, r3, #1
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d004      	beq.n	800b6ee <USB_EPStartXfer+0xaa4>
 800b6e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b6ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	029b      	lsls	r3, r3, #10
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6fa:	801a      	strh	r2, [r3, #0]
 800b6fc:	e024      	b.n	800b748 <USB_EPStartXfer+0xafe>
 800b6fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	785b      	ldrb	r3, [r3, #1]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d11c      	bne.n	800b748 <USB_EPStartXfer+0xafe>
 800b70e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b712:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	461a      	mov	r2, r3
 800b720:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b722:	4413      	add	r3, r2
 800b724:	673b      	str	r3, [r7, #112]	; 0x70
 800b726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b72a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	00da      	lsls	r2, r3, #3
 800b734:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b736:	4413      	add	r3, r2
 800b738:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b73c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b73e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b742:	b29a      	uxth	r2, r3
 800b744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b746:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b74c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	895b      	ldrh	r3, [r3, #10]
 800b754:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b75c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	6959      	ldr	r1, [r3, #20]
 800b764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b768:	b29b      	uxth	r3, r3
 800b76a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b76e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b772:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b776:	6800      	ldr	r0, [r0, #0]
 800b778:	f000 fef8 	bl	800c56c <USB_WritePMA>
 800b77c:	e0c0      	b.n	800b900 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b77e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	785b      	ldrb	r3, [r3, #1]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d16d      	bne.n	800b86a <USB_EPStartXfer+0xc20>
 800b78e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b792:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b79a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b79e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b7ae:	4413      	add	r3, r2
 800b7b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b7b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	00da      	lsls	r2, r3, #3
 800b7c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b7c2:	4413      	add	r3, r2
 800b7c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b7c8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ce:	2b3e      	cmp	r3, #62	; 0x3e
 800b7d0:	d91c      	bls.n	800b80c <USB_EPStartXfer+0xbc2>
 800b7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7d6:	095b      	lsrs	r3, r3, #5
 800b7d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7e0:	f003 031f 	and.w	r3, r3, #31
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d104      	bne.n	800b7f2 <USB_EPStartXfer+0xba8>
 800b7e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b7f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	029b      	lsls	r3, r3, #10
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b804:	b29a      	uxth	r2, r3
 800b806:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b808:	801a      	strh	r2, [r3, #0]
 800b80a:	e05f      	b.n	800b8cc <USB_EPStartXfer+0xc82>
 800b80c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b810:	2b00      	cmp	r3, #0
 800b812:	d112      	bne.n	800b83a <USB_EPStartXfer+0xbf0>
 800b814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b816:	881b      	ldrh	r3, [r3, #0]
 800b818:	b29b      	uxth	r3, r3
 800b81a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b81e:	b29a      	uxth	r2, r3
 800b820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b822:	801a      	strh	r2, [r3, #0]
 800b824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b826:	881b      	ldrh	r3, [r3, #0]
 800b828:	b29b      	uxth	r3, r3
 800b82a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b82e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b832:	b29a      	uxth	r2, r3
 800b834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b836:	801a      	strh	r2, [r3, #0]
 800b838:	e048      	b.n	800b8cc <USB_EPStartXfer+0xc82>
 800b83a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b83e:	085b      	lsrs	r3, r3, #1
 800b840:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b848:	f003 0301 	and.w	r3, r3, #1
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d004      	beq.n	800b85a <USB_EPStartXfer+0xc10>
 800b850:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b854:	3301      	adds	r3, #1
 800b856:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b85a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b85e:	b29b      	uxth	r3, r3
 800b860:	029b      	lsls	r3, r3, #10
 800b862:	b29a      	uxth	r2, r3
 800b864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b866:	801a      	strh	r2, [r3, #0]
 800b868:	e030      	b.n	800b8cc <USB_EPStartXfer+0xc82>
 800b86a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b86e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	785b      	ldrb	r3, [r3, #1]
 800b876:	2b01      	cmp	r3, #1
 800b878:	d128      	bne.n	800b8cc <USB_EPStartXfer+0xc82>
 800b87a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b87e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b88c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b896:	b29b      	uxth	r3, r3
 800b898:	461a      	mov	r2, r3
 800b89a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b89e:	4413      	add	r3, r2
 800b8a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b8a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	00da      	lsls	r2, r3, #3
 800b8b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b8b6:	4413      	add	r3, r2
 800b8b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b8bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c4:	b29a      	uxth	r2, r3
 800b8c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b8ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b8cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	891b      	ldrh	r3, [r3, #8]
 800b8d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b8dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	6959      	ldr	r1, [r3, #20]
 800b8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b8f2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b8f6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b8fa:	6800      	ldr	r0, [r0, #0]
 800b8fc:	f000 fe36 	bl	800c56c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b904:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b90e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	009b      	lsls	r3, r3, #2
 800b918:	4413      	add	r3, r2
 800b91a:	881b      	ldrh	r3, [r3, #0]
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b926:	817b      	strh	r3, [r7, #10]
 800b928:	897b      	ldrh	r3, [r7, #10]
 800b92a:	f083 0310 	eor.w	r3, r3, #16
 800b92e:	817b      	strh	r3, [r7, #10]
 800b930:	897b      	ldrh	r3, [r7, #10]
 800b932:	f083 0320 	eor.w	r3, r3, #32
 800b936:	817b      	strh	r3, [r7, #10]
 800b938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b93c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	441a      	add	r2, r3
 800b952:	897b      	ldrh	r3, [r7, #10]
 800b954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b95c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b964:	b29b      	uxth	r3, r3
 800b966:	8013      	strh	r3, [r2, #0]
 800b968:	f000 bc9f 	b.w	800c2aa <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b96c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	7b1b      	ldrb	r3, [r3, #12]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f040 80ae 	bne.w	800bada <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b97e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	699a      	ldr	r2, [r3, #24]
 800b98a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b98e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	691b      	ldr	r3, [r3, #16]
 800b996:	429a      	cmp	r2, r3
 800b998:	d917      	bls.n	800b9ca <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800b99a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b99e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	691b      	ldr	r3, [r3, #16]
 800b9a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800b9aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	699a      	ldr	r2, [r3, #24]
 800b9b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ba:	1ad2      	subs	r2, r2, r3
 800b9bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	619a      	str	r2, [r3, #24]
 800b9c8:	e00e      	b.n	800b9e8 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800b9ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	699b      	ldr	r3, [r3, #24]
 800b9d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800b9da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b9e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b9f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	461a      	mov	r2, r3
 800ba08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba0c:	4413      	add	r3, r2
 800ba0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ba12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	00da      	lsls	r2, r3, #3
 800ba20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba24:	4413      	add	r3, r2
 800ba26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ba2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba32:	2b3e      	cmp	r3, #62	; 0x3e
 800ba34:	d91d      	bls.n	800ba72 <USB_EPStartXfer+0xe28>
 800ba36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba3a:	095b      	lsrs	r3, r3, #5
 800ba3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ba40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba44:	f003 031f 	and.w	r3, r3, #31
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d104      	bne.n	800ba56 <USB_EPStartXfer+0xe0c>
 800ba4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ba50:	3b01      	subs	r3, #1
 800ba52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ba56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	029b      	lsls	r3, r3, #10
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba68:	b29a      	uxth	r2, r3
 800ba6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba6e:	801a      	strh	r2, [r3, #0]
 800ba70:	e3e1      	b.n	800c236 <USB_EPStartXfer+0x15ec>
 800ba72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d116      	bne.n	800baa8 <USB_EPStartXfer+0xe5e>
 800ba7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba7e:	881b      	ldrh	r3, [r3, #0]
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba8c:	801a      	strh	r2, [r3, #0]
 800ba8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba92:	881b      	ldrh	r3, [r3, #0]
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800baa4:	801a      	strh	r2, [r3, #0]
 800baa6:	e3c6      	b.n	800c236 <USB_EPStartXfer+0x15ec>
 800baa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baac:	085b      	lsrs	r3, r3, #1
 800baae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab6:	f003 0301 	and.w	r3, r3, #1
 800baba:	2b00      	cmp	r3, #0
 800babc:	d004      	beq.n	800bac8 <USB_EPStartXfer+0xe7e>
 800babe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bac2:	3301      	adds	r3, #1
 800bac4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bac8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bacc:	b29b      	uxth	r3, r3
 800bace:	029b      	lsls	r3, r3, #10
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bad6:	801a      	strh	r2, [r3, #0]
 800bad8:	e3ad      	b.n	800c236 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800bada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	78db      	ldrb	r3, [r3, #3]
 800bae6:	2b02      	cmp	r3, #2
 800bae8:	f040 8200 	bne.w	800beec <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800baec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	785b      	ldrb	r3, [r3, #1]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	f040 8091 	bne.w	800bc20 <USB_EPStartXfer+0xfd6>
 800bafe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bb22:	4413      	add	r3, r2
 800bb24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	00da      	lsls	r2, r3, #3
 800bb36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bb3a:	4413      	add	r3, r2
 800bb3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bb40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bb44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	691b      	ldr	r3, [r3, #16]
 800bb50:	2b3e      	cmp	r3, #62	; 0x3e
 800bb52:	d925      	bls.n	800bba0 <USB_EPStartXfer+0xf56>
 800bb54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	095b      	lsrs	r3, r3, #5
 800bb62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bb66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	f003 031f 	and.w	r3, r3, #31
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d104      	bne.n	800bb84 <USB_EPStartXfer+0xf3a>
 800bb7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb7e:	3b01      	subs	r3, #1
 800bb80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bb84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb88:	b29b      	uxth	r3, r3
 800bb8a:	029b      	lsls	r3, r3, #10
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb9c:	801a      	strh	r2, [r3, #0]
 800bb9e:	e074      	b.n	800bc8a <USB_EPStartXfer+0x1040>
 800bba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	691b      	ldr	r3, [r3, #16]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d116      	bne.n	800bbde <USB_EPStartXfer+0xf94>
 800bbb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bbb4:	881b      	ldrh	r3, [r3, #0]
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bbbc:	b29a      	uxth	r2, r3
 800bbbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bbc2:	801a      	strh	r2, [r3, #0]
 800bbc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bbc8:	881b      	ldrh	r3, [r3, #0]
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bbda:	801a      	strh	r2, [r3, #0]
 800bbdc:	e055      	b.n	800bc8a <USB_EPStartXfer+0x1040>
 800bbde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	691b      	ldr	r3, [r3, #16]
 800bbea:	085b      	lsrs	r3, r3, #1
 800bbec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bbf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	691b      	ldr	r3, [r3, #16]
 800bbfc:	f003 0301 	and.w	r3, r3, #1
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d004      	beq.n	800bc0e <USB_EPStartXfer+0xfc4>
 800bc04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc08:	3301      	adds	r3, #1
 800bc0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bc0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	029b      	lsls	r3, r3, #10
 800bc16:	b29a      	uxth	r2, r3
 800bc18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bc1c:	801a      	strh	r2, [r3, #0]
 800bc1e:	e034      	b.n	800bc8a <USB_EPStartXfer+0x1040>
 800bc20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	785b      	ldrb	r3, [r3, #1]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d12c      	bne.n	800bc8a <USB_EPStartXfer+0x1040>
 800bc30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	461a      	mov	r2, r3
 800bc50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bc54:	4413      	add	r3, r2
 800bc56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	00da      	lsls	r2, r3, #3
 800bc68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bc6c:	4413      	add	r3, r2
 800bc6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	691b      	ldr	r3, [r3, #16]
 800bc82:	b29a      	uxth	r2, r3
 800bc84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bc88:	801a      	strh	r2, [r3, #0]
 800bc8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bc98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	785b      	ldrb	r3, [r3, #1]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	f040 8091 	bne.w	800bdcc <USB_EPStartXfer+0x1182>
 800bcaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bcb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	461a      	mov	r2, r3
 800bcca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bcce:	4413      	add	r3, r2
 800bcd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bcd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	00da      	lsls	r2, r3, #3
 800bce2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bce6:	4413      	add	r3, r2
 800bce8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bcec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bcf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	691b      	ldr	r3, [r3, #16]
 800bcfc:	2b3e      	cmp	r3, #62	; 0x3e
 800bcfe:	d925      	bls.n	800bd4c <USB_EPStartXfer+0x1102>
 800bd00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	691b      	ldr	r3, [r3, #16]
 800bd0c:	095b      	lsrs	r3, r3, #5
 800bd0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bd12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	691b      	ldr	r3, [r3, #16]
 800bd1e:	f003 031f 	and.w	r3, r3, #31
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d104      	bne.n	800bd30 <USB_EPStartXfer+0x10e6>
 800bd26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bd30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	029b      	lsls	r3, r3, #10
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd42:	b29a      	uxth	r2, r3
 800bd44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd48:	801a      	strh	r2, [r3, #0]
 800bd4a:	e06d      	b.n	800be28 <USB_EPStartXfer+0x11de>
 800bd4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	691b      	ldr	r3, [r3, #16]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d116      	bne.n	800bd8a <USB_EPStartXfer+0x1140>
 800bd5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd60:	881b      	ldrh	r3, [r3, #0]
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd6e:	801a      	strh	r2, [r3, #0]
 800bd70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd74:	881b      	ldrh	r3, [r3, #0]
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd80:	b29a      	uxth	r2, r3
 800bd82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd86:	801a      	strh	r2, [r3, #0]
 800bd88:	e04e      	b.n	800be28 <USB_EPStartXfer+0x11de>
 800bd8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	691b      	ldr	r3, [r3, #16]
 800bd96:	085b      	lsrs	r3, r3, #1
 800bd98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bd9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bda0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	f003 0301 	and.w	r3, r3, #1
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d004      	beq.n	800bdba <USB_EPStartXfer+0x1170>
 800bdb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bdba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	029b      	lsls	r3, r3, #10
 800bdc2:	b29a      	uxth	r2, r3
 800bdc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bdc8:	801a      	strh	r2, [r3, #0]
 800bdca:	e02d      	b.n	800be28 <USB_EPStartXfer+0x11de>
 800bdcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	785b      	ldrb	r3, [r3, #1]
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d125      	bne.n	800be28 <USB_EPStartXfer+0x11de>
 800bddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bde0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	461a      	mov	r2, r3
 800bdee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bdf2:	4413      	add	r3, r2
 800bdf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bdf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	00da      	lsls	r2, r3, #3
 800be06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800be0a:	4413      	add	r3, r2
 800be0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800be10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800be14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	691b      	ldr	r3, [r3, #16]
 800be20:	b29a      	uxth	r2, r3
 800be22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be26:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800be28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	69db      	ldr	r3, [r3, #28]
 800be34:	2b00      	cmp	r3, #0
 800be36:	f000 81fe 	beq.w	800c236 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800be3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	009b      	lsls	r3, r3, #2
 800be52:	4413      	add	r3, r2
 800be54:	881b      	ldrh	r3, [r3, #0]
 800be56:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800be5a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800be5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be62:	2b00      	cmp	r3, #0
 800be64:	d005      	beq.n	800be72 <USB_EPStartXfer+0x1228>
 800be66:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800be6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d10d      	bne.n	800be8e <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800be72:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800be76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f040 81db 	bne.w	800c236 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800be80:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800be84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f040 81d4 	bne.w	800c236 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800be8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	4413      	add	r3, r2
 800bea8:	881b      	ldrh	r3, [r3, #0]
 800beaa:	b29b      	uxth	r3, r3
 800beac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800beb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800beb4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800beb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bebc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	441a      	add	r2, r3
 800bed2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800bed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800beda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bee2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	8013      	strh	r3, [r2, #0]
 800beea:	e1a4      	b.n	800c236 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800beec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	78db      	ldrb	r3, [r3, #3]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	f040 819a 	bne.w	800c232 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800befe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	699a      	ldr	r2, [r3, #24]
 800bf0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d917      	bls.n	800bf4a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800bf1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800bf2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	699a      	ldr	r2, [r3, #24]
 800bf36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf3a:	1ad2      	subs	r2, r2, r3
 800bf3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	619a      	str	r2, [r3, #24]
 800bf48:	e00e      	b.n	800bf68 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800bf4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	699b      	ldr	r3, [r3, #24]
 800bf56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800bf5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2200      	movs	r2, #0
 800bf66:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bf68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	785b      	ldrb	r3, [r3, #1]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d178      	bne.n	800c06a <USB_EPStartXfer+0x1420>
 800bf78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bf86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	461a      	mov	r2, r3
 800bf98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bf9c:	4413      	add	r3, r2
 800bf9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bfa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	00da      	lsls	r2, r3, #3
 800bfb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bfb4:	4413      	add	r3, r2
 800bfb6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bfba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bfbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfc2:	2b3e      	cmp	r3, #62	; 0x3e
 800bfc4:	d91d      	bls.n	800c002 <USB_EPStartXfer+0x13b8>
 800bfc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfca:	095b      	lsrs	r3, r3, #5
 800bfcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bfd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfd4:	f003 031f 	and.w	r3, r3, #31
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d104      	bne.n	800bfe6 <USB_EPStartXfer+0x139c>
 800bfdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfe0:	3b01      	subs	r3, #1
 800bfe2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bfe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	029b      	lsls	r3, r3, #10
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bff8:	b29a      	uxth	r2, r3
 800bffa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bffe:	801a      	strh	r2, [r3, #0]
 800c000:	e064      	b.n	800c0cc <USB_EPStartXfer+0x1482>
 800c002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c006:	2b00      	cmp	r3, #0
 800c008:	d116      	bne.n	800c038 <USB_EPStartXfer+0x13ee>
 800c00a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c00e:	881b      	ldrh	r3, [r3, #0]
 800c010:	b29b      	uxth	r3, r3
 800c012:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c016:	b29a      	uxth	r2, r3
 800c018:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c01c:	801a      	strh	r2, [r3, #0]
 800c01e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c022:	881b      	ldrh	r3, [r3, #0]
 800c024:	b29b      	uxth	r3, r3
 800c026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c02a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c02e:	b29a      	uxth	r2, r3
 800c030:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c034:	801a      	strh	r2, [r3, #0]
 800c036:	e049      	b.n	800c0cc <USB_EPStartXfer+0x1482>
 800c038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c03c:	085b      	lsrs	r3, r3, #1
 800c03e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c046:	f003 0301 	and.w	r3, r3, #1
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d004      	beq.n	800c058 <USB_EPStartXfer+0x140e>
 800c04e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c052:	3301      	adds	r3, #1
 800c054:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	029b      	lsls	r3, r3, #10
 800c060:	b29a      	uxth	r2, r3
 800c062:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c066:	801a      	strh	r2, [r3, #0]
 800c068:	e030      	b.n	800c0cc <USB_EPStartXfer+0x1482>
 800c06a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c06e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	785b      	ldrb	r3, [r3, #1]
 800c076:	2b01      	cmp	r3, #1
 800c078:	d128      	bne.n	800c0cc <USB_EPStartXfer+0x1482>
 800c07a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c07e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c08c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c096:	b29b      	uxth	r3, r3
 800c098:	461a      	mov	r2, r3
 800c09a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c09e:	4413      	add	r3, r2
 800c0a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c0a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	00da      	lsls	r2, r3, #3
 800c0b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c0b6:	4413      	add	r3, r2
 800c0b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c0bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0c4:	b29a      	uxth	r2, r3
 800c0c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c0ca:	801a      	strh	r2, [r3, #0]
 800c0cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c0da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	785b      	ldrb	r3, [r3, #1]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d178      	bne.n	800c1dc <USB_EPStartXfer+0x1592>
 800c0ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c0f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c106:	b29b      	uxth	r3, r3
 800c108:	461a      	mov	r2, r3
 800c10a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c10e:	4413      	add	r3, r2
 800c110:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	00da      	lsls	r2, r3, #3
 800c122:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c126:	4413      	add	r3, r2
 800c128:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c12c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c134:	2b3e      	cmp	r3, #62	; 0x3e
 800c136:	d91d      	bls.n	800c174 <USB_EPStartXfer+0x152a>
 800c138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c13c:	095b      	lsrs	r3, r3, #5
 800c13e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c146:	f003 031f 	and.w	r3, r3, #31
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d104      	bne.n	800c158 <USB_EPStartXfer+0x150e>
 800c14e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c152:	3b01      	subs	r3, #1
 800c154:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c158:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	029b      	lsls	r3, r3, #10
 800c160:	b29b      	uxth	r3, r3
 800c162:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c166:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c16a:	b29a      	uxth	r2, r3
 800c16c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c170:	801a      	strh	r2, [r3, #0]
 800c172:	e060      	b.n	800c236 <USB_EPStartXfer+0x15ec>
 800c174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d116      	bne.n	800c1aa <USB_EPStartXfer+0x1560>
 800c17c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c180:	881b      	ldrh	r3, [r3, #0]
 800c182:	b29b      	uxth	r3, r3
 800c184:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c188:	b29a      	uxth	r2, r3
 800c18a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c18e:	801a      	strh	r2, [r3, #0]
 800c190:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c194:	881b      	ldrh	r3, [r3, #0]
 800c196:	b29b      	uxth	r3, r3
 800c198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c19c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1a0:	b29a      	uxth	r2, r3
 800c1a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c1a6:	801a      	strh	r2, [r3, #0]
 800c1a8:	e045      	b.n	800c236 <USB_EPStartXfer+0x15ec>
 800c1aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1ae:	085b      	lsrs	r3, r3, #1
 800c1b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c1b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1b8:	f003 0301 	and.w	r3, r3, #1
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d004      	beq.n	800c1ca <USB_EPStartXfer+0x1580>
 800c1c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c1ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	029b      	lsls	r3, r3, #10
 800c1d2:	b29a      	uxth	r2, r3
 800c1d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c1d8:	801a      	strh	r2, [r3, #0]
 800c1da:	e02c      	b.n	800c236 <USB_EPStartXfer+0x15ec>
 800c1dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	785b      	ldrb	r3, [r3, #1]
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d124      	bne.n	800c236 <USB_EPStartXfer+0x15ec>
 800c1ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c202:	4413      	add	r3, r2
 800c204:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c20c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	00da      	lsls	r2, r3, #3
 800c216:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c21a:	4413      	add	r3, r2
 800c21c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c220:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c228:	b29a      	uxth	r2, r3
 800c22a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c22e:	801a      	strh	r2, [r3, #0]
 800c230:	e001      	b.n	800c236 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800c232:	2301      	movs	r3, #1
 800c234:	e03a      	b.n	800c2ac <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c23a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	4413      	add	r3, r2
 800c250:	881b      	ldrh	r3, [r3, #0]
 800c252:	b29b      	uxth	r3, r3
 800c254:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c25c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c260:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c264:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c268:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c26c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c270:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c274:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c27c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c280:	681a      	ldr	r2, [r3, #0]
 800c282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	441a      	add	r2, r3
 800c292:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c29a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c29e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c2aa:	2300      	movs	r3, #0
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c2b6:	b480      	push	{r7}
 800c2b8:	b085      	sub	sp, #20
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
 800c2be:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	785b      	ldrb	r3, [r3, #1]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d020      	beq.n	800c30a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	4413      	add	r3, r2
 800c2d2:	881b      	ldrh	r3, [r3, #0]
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c2da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2de:	81bb      	strh	r3, [r7, #12]
 800c2e0:	89bb      	ldrh	r3, [r7, #12]
 800c2e2:	f083 0310 	eor.w	r3, r3, #16
 800c2e6:	81bb      	strh	r3, [r7, #12]
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	441a      	add	r2, r3
 800c2f2:	89bb      	ldrh	r3, [r7, #12]
 800c2f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c304:	b29b      	uxth	r3, r3
 800c306:	8013      	strh	r3, [r2, #0]
 800c308:	e01f      	b.n	800c34a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	4413      	add	r3, r2
 800c314:	881b      	ldrh	r3, [r3, #0]
 800c316:	b29b      	uxth	r3, r3
 800c318:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c31c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c320:	81fb      	strh	r3, [r7, #14]
 800c322:	89fb      	ldrh	r3, [r7, #14]
 800c324:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c328:	81fb      	strh	r3, [r7, #14]
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	009b      	lsls	r3, r3, #2
 800c332:	441a      	add	r2, r3
 800c334:	89fb      	ldrh	r3, [r7, #14]
 800c336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c33a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c33e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c346:	b29b      	uxth	r3, r3
 800c348:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c34a:	2300      	movs	r3, #0
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3714      	adds	r7, #20
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c358:	b480      	push	{r7}
 800c35a:	b087      	sub	sp, #28
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	7b1b      	ldrb	r3, [r3, #12]
 800c366:	2b00      	cmp	r3, #0
 800c368:	f040 809d 	bne.w	800c4a6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	785b      	ldrb	r3, [r3, #1]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d04c      	beq.n	800c40e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	4413      	add	r3, r2
 800c37e:	881b      	ldrh	r3, [r3, #0]
 800c380:	823b      	strh	r3, [r7, #16]
 800c382:	8a3b      	ldrh	r3, [r7, #16]
 800c384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d01b      	beq.n	800c3c4 <USB_EPClearStall+0x6c>
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	4413      	add	r3, r2
 800c396:	881b      	ldrh	r3, [r3, #0]
 800c398:	b29b      	uxth	r3, r3
 800c39a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c39e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3a2:	81fb      	strh	r3, [r7, #14]
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	441a      	add	r2, r3
 800c3ae:	89fb      	ldrh	r3, [r7, #14]
 800c3b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	78db      	ldrb	r3, [r3, #3]
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d06c      	beq.n	800c4a6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	4413      	add	r3, r2
 800c3d6:	881b      	ldrh	r3, [r3, #0]
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3e2:	81bb      	strh	r3, [r7, #12]
 800c3e4:	89bb      	ldrh	r3, [r7, #12]
 800c3e6:	f083 0320 	eor.w	r3, r3, #32
 800c3ea:	81bb      	strh	r3, [r7, #12]
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	009b      	lsls	r3, r3, #2
 800c3f4:	441a      	add	r2, r3
 800c3f6:	89bb      	ldrh	r3, [r7, #12]
 800c3f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c408:	b29b      	uxth	r3, r3
 800c40a:	8013      	strh	r3, [r2, #0]
 800c40c:	e04b      	b.n	800c4a6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	4413      	add	r3, r2
 800c418:	881b      	ldrh	r3, [r3, #0]
 800c41a:	82fb      	strh	r3, [r7, #22]
 800c41c:	8afb      	ldrh	r3, [r7, #22]
 800c41e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c422:	2b00      	cmp	r3, #0
 800c424:	d01b      	beq.n	800c45e <USB_EPClearStall+0x106>
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	009b      	lsls	r3, r3, #2
 800c42e:	4413      	add	r3, r2
 800c430:	881b      	ldrh	r3, [r3, #0]
 800c432:	b29b      	uxth	r3, r3
 800c434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c43c:	82bb      	strh	r3, [r7, #20]
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	441a      	add	r2, r3
 800c448:	8abb      	ldrh	r3, [r7, #20]
 800c44a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c44e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c452:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	4413      	add	r3, r2
 800c468:	881b      	ldrh	r3, [r3, #0]
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c474:	827b      	strh	r3, [r7, #18]
 800c476:	8a7b      	ldrh	r3, [r7, #18]
 800c478:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c47c:	827b      	strh	r3, [r7, #18]
 800c47e:	8a7b      	ldrh	r3, [r7, #18]
 800c480:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c484:	827b      	strh	r3, [r7, #18]
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	441a      	add	r2, r3
 800c490:	8a7b      	ldrh	r3, [r7, #18]
 800c492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c49a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c49e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c4a6:	2300      	movs	r3, #0
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	371c      	adds	r7, #28
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	460b      	mov	r3, r1
 800c4be:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c4c0:	78fb      	ldrb	r3, [r7, #3]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d103      	bne.n	800c4ce <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2280      	movs	r2, #128	; 0x80
 800c4ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c4ce:	2300      	movs	r3, #0
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c4ea:	b29b      	uxth	r3, r3
 800c4ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	370c      	adds	r7, #12
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr

0800c50a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800c50a:	b480      	push	{r7}
 800c50c:	b083      	sub	sp, #12
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c518:	b29b      	uxth	r3, r3
 800c51a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c51e:	b29a      	uxth	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c526:	2300      	movs	r3, #0
}
 800c528:	4618      	mov	r0, r3
 800c52a:	370c      	adds	r7, #12
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr

0800c534 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c542:	b29b      	uxth	r3, r3
 800c544:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c546:	68fb      	ldr	r3, [r7, #12]
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3714      	adds	r7, #20
 800c54c:	46bd      	mov	sp, r7
 800c54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c552:	4770      	bx	lr

0800c554 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800c554:	b480      	push	{r7}
 800c556:	b083      	sub	sp, #12
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c55e:	2300      	movs	r3, #0
}
 800c560:	4618      	mov	r0, r3
 800c562:	370c      	adds	r7, #12
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b08b      	sub	sp, #44	; 0x2c
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	4611      	mov	r1, r2
 800c578:	461a      	mov	r2, r3
 800c57a:	460b      	mov	r3, r1
 800c57c:	80fb      	strh	r3, [r7, #6]
 800c57e:	4613      	mov	r3, r2
 800c580:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c582:	88bb      	ldrh	r3, [r7, #4]
 800c584:	3301      	adds	r3, #1
 800c586:	085b      	lsrs	r3, r3, #1
 800c588:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c592:	88fa      	ldrh	r2, [r7, #6]
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	4413      	add	r3, r2
 800c598:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c59c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	627b      	str	r3, [r7, #36]	; 0x24
 800c5a2:	e01b      	b.n	800c5dc <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800c5a4:	69fb      	ldr	r3, [r7, #28]
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c5aa:	69fb      	ldr	r3, [r7, #28]
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	021b      	lsls	r3, r3, #8
 800c5b2:	b21a      	sxth	r2, r3
 800c5b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	b21b      	sxth	r3, r3
 800c5bc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c5be:	6a3b      	ldr	r3, [r7, #32]
 800c5c0:	8a7a      	ldrh	r2, [r7, #18]
 800c5c2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c5c4:	6a3b      	ldr	r3, [r7, #32]
 800c5c6:	3302      	adds	r3, #2
 800c5c8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c5d0:	69fb      	ldr	r3, [r7, #28]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d8:	3b01      	subs	r3, #1
 800c5da:	627b      	str	r3, [r7, #36]	; 0x24
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1e0      	bne.n	800c5a4 <USB_WritePMA+0x38>
  }
}
 800c5e2:	bf00      	nop
 800c5e4:	bf00      	nop
 800c5e6:	372c      	adds	r7, #44	; 0x2c
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr

0800c5f0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b08b      	sub	sp, #44	; 0x2c
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	4611      	mov	r1, r2
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	460b      	mov	r3, r1
 800c600:	80fb      	strh	r3, [r7, #6]
 800c602:	4613      	mov	r3, r2
 800c604:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c606:	88bb      	ldrh	r3, [r7, #4]
 800c608:	085b      	lsrs	r3, r3, #1
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c616:	88fa      	ldrh	r2, [r7, #6]
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	4413      	add	r3, r2
 800c61c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c620:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c622:	69bb      	ldr	r3, [r7, #24]
 800c624:	627b      	str	r3, [r7, #36]	; 0x24
 800c626:	e018      	b.n	800c65a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c628:	6a3b      	ldr	r3, [r7, #32]
 800c62a:	881b      	ldrh	r3, [r3, #0]
 800c62c:	b29b      	uxth	r3, r3
 800c62e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c630:	6a3b      	ldr	r3, [r7, #32]
 800c632:	3302      	adds	r3, #2
 800c634:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	b2da      	uxtb	r2, r3
 800c63a:	69fb      	ldr	r3, [r7, #28]
 800c63c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	3301      	adds	r3, #1
 800c642:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	0a1b      	lsrs	r3, r3, #8
 800c648:	b2da      	uxtb	r2, r3
 800c64a:	69fb      	ldr	r3, [r7, #28]
 800c64c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c64e:	69fb      	ldr	r3, [r7, #28]
 800c650:	3301      	adds	r3, #1
 800c652:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c656:	3b01      	subs	r3, #1
 800c658:	627b      	str	r3, [r7, #36]	; 0x24
 800c65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d1e3      	bne.n	800c628 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c660:	88bb      	ldrh	r3, [r7, #4]
 800c662:	f003 0301 	and.w	r3, r3, #1
 800c666:	b29b      	uxth	r3, r3
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d007      	beq.n	800c67c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800c66c:	6a3b      	ldr	r3, [r7, #32]
 800c66e:	881b      	ldrh	r3, [r3, #0]
 800c670:	b29b      	uxth	r3, r3
 800c672:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	b2da      	uxtb	r2, r3
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	701a      	strb	r2, [r3, #0]
  }
}
 800c67c:	bf00      	nop
 800c67e:	372c      	adds	r7, #44	; 0x2c
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	460b      	mov	r3, r1
 800c692:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c694:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c698:	f002 f960 	bl	800e95c <USBD_static_malloc>
 800c69c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d105      	bne.n	800c6b0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c6ac:	2302      	movs	r3, #2
 800c6ae:	e066      	b.n	800c77e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	68fa      	ldr	r2, [r7, #12]
 800c6b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	7c1b      	ldrb	r3, [r3, #16]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d119      	bne.n	800c6f4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c6c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6c4:	2202      	movs	r2, #2
 800c6c6:	2181      	movs	r1, #129	; 0x81
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f001 ff7f 	bl	800e5cc <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c6d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6d8:	2202      	movs	r2, #2
 800c6da:	2101      	movs	r1, #1
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f001 ff75 	bl	800e5cc <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2210      	movs	r2, #16
 800c6ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800c6f2:	e016      	b.n	800c722 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c6f4:	2340      	movs	r3, #64	; 0x40
 800c6f6:	2202      	movs	r2, #2
 800c6f8:	2181      	movs	r1, #129	; 0x81
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f001 ff66 	bl	800e5cc <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2201      	movs	r2, #1
 800c704:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c706:	2340      	movs	r3, #64	; 0x40
 800c708:	2202      	movs	r2, #2
 800c70a:	2101      	movs	r1, #1
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f001 ff5d 	bl	800e5cc <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2201      	movs	r2, #1
 800c716:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2210      	movs	r2, #16
 800c71e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c722:	2308      	movs	r3, #8
 800c724:	2203      	movs	r2, #3
 800c726:	2182      	movs	r1, #130	; 0x82
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f001 ff4f 	bl	800e5cc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2201      	movs	r2, #1
 800c732:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2200      	movs	r2, #0
 800c744:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2200      	movs	r2, #0
 800c74c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	7c1b      	ldrb	r3, [r3, #16]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d109      	bne.n	800c76c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c75e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c762:	2101      	movs	r1, #1
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f002 f8ad 	bl	800e8c4 <USBD_LL_PrepareReceive>
 800c76a:	e007      	b.n	800c77c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c772:	2340      	movs	r3, #64	; 0x40
 800c774:	2101      	movs	r1, #1
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f002 f8a4 	bl	800e8c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c77c:	2300      	movs	r3, #0
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3710      	adds	r7, #16
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c786:	b580      	push	{r7, lr}
 800c788:	b082      	sub	sp, #8
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
 800c78e:	460b      	mov	r3, r1
 800c790:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c792:	2181      	movs	r1, #129	; 0x81
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f001 ff57 	bl	800e648 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c7a0:	2101      	movs	r1, #1
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f001 ff50 	bl	800e648 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c7b0:	2182      	movs	r1, #130	; 0x82
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f001 ff48 	bl	800e648 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d00e      	beq.n	800c7f0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f002 f8c8 	bl	800e978 <USBD_static_free>
    pdev->pClassData = NULL;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c7f0:	2300      	movs	r3, #0
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
	...

0800c7fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b086      	sub	sp, #24
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c80c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c80e:	2300      	movs	r3, #0
 800c810:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c812:	2300      	movs	r3, #0
 800c814:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c816:	2300      	movs	r3, #0
 800c818:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d101      	bne.n	800c824 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c820:	2303      	movs	r3, #3
 800c822:	e0af      	b.n	800c984 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d03f      	beq.n	800c8b0 <USBD_CDC_Setup+0xb4>
 800c830:	2b20      	cmp	r3, #32
 800c832:	f040 809f 	bne.w	800c974 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	88db      	ldrh	r3, [r3, #6]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d02e      	beq.n	800c89c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	b25b      	sxtb	r3, r3
 800c844:	2b00      	cmp	r3, #0
 800c846:	da16      	bge.n	800c876 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	683a      	ldr	r2, [r7, #0]
 800c852:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c854:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c856:	683a      	ldr	r2, [r7, #0]
 800c858:	88d2      	ldrh	r2, [r2, #6]
 800c85a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	88db      	ldrh	r3, [r3, #6]
 800c860:	2b07      	cmp	r3, #7
 800c862:	bf28      	it	cs
 800c864:	2307      	movcs	r3, #7
 800c866:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	89fa      	ldrh	r2, [r7, #14]
 800c86c:	4619      	mov	r1, r3
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f001 faa5 	bl	800ddbe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c874:	e085      	b.n	800c982 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	785a      	ldrb	r2, [r3, #1]
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	88db      	ldrh	r3, [r3, #6]
 800c884:	b2da      	uxtb	r2, r3
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c88c:	6939      	ldr	r1, [r7, #16]
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	88db      	ldrh	r3, [r3, #6]
 800c892:	461a      	mov	r2, r3
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f001 fabe 	bl	800de16 <USBD_CtlPrepareRx>
      break;
 800c89a:	e072      	b.n	800c982 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8a2:	689b      	ldr	r3, [r3, #8]
 800c8a4:	683a      	ldr	r2, [r7, #0]
 800c8a6:	7850      	ldrb	r0, [r2, #1]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	6839      	ldr	r1, [r7, #0]
 800c8ac:	4798      	blx	r3
      break;
 800c8ae:	e068      	b.n	800c982 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	785b      	ldrb	r3, [r3, #1]
 800c8b4:	2b0b      	cmp	r3, #11
 800c8b6:	d852      	bhi.n	800c95e <USBD_CDC_Setup+0x162>
 800c8b8:	a201      	add	r2, pc, #4	; (adr r2, 800c8c0 <USBD_CDC_Setup+0xc4>)
 800c8ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8be:	bf00      	nop
 800c8c0:	0800c8f1 	.word	0x0800c8f1
 800c8c4:	0800c96d 	.word	0x0800c96d
 800c8c8:	0800c95f 	.word	0x0800c95f
 800c8cc:	0800c95f 	.word	0x0800c95f
 800c8d0:	0800c95f 	.word	0x0800c95f
 800c8d4:	0800c95f 	.word	0x0800c95f
 800c8d8:	0800c95f 	.word	0x0800c95f
 800c8dc:	0800c95f 	.word	0x0800c95f
 800c8e0:	0800c95f 	.word	0x0800c95f
 800c8e4:	0800c95f 	.word	0x0800c95f
 800c8e8:	0800c91b 	.word	0x0800c91b
 800c8ec:	0800c945 	.word	0x0800c945
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	2b03      	cmp	r3, #3
 800c8fa:	d107      	bne.n	800c90c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c8fc:	f107 030a 	add.w	r3, r7, #10
 800c900:	2202      	movs	r2, #2
 800c902:	4619      	mov	r1, r3
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f001 fa5a 	bl	800ddbe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c90a:	e032      	b.n	800c972 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c90c:	6839      	ldr	r1, [r7, #0]
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f001 f9e4 	bl	800dcdc <USBD_CtlError>
            ret = USBD_FAIL;
 800c914:	2303      	movs	r3, #3
 800c916:	75fb      	strb	r3, [r7, #23]
          break;
 800c918:	e02b      	b.n	800c972 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c920:	b2db      	uxtb	r3, r3
 800c922:	2b03      	cmp	r3, #3
 800c924:	d107      	bne.n	800c936 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c926:	f107 030d 	add.w	r3, r7, #13
 800c92a:	2201      	movs	r2, #1
 800c92c:	4619      	mov	r1, r3
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f001 fa45 	bl	800ddbe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c934:	e01d      	b.n	800c972 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c936:	6839      	ldr	r1, [r7, #0]
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f001 f9cf 	bl	800dcdc <USBD_CtlError>
            ret = USBD_FAIL;
 800c93e:	2303      	movs	r3, #3
 800c940:	75fb      	strb	r3, [r7, #23]
          break;
 800c942:	e016      	b.n	800c972 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c94a:	b2db      	uxtb	r3, r3
 800c94c:	2b03      	cmp	r3, #3
 800c94e:	d00f      	beq.n	800c970 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c950:	6839      	ldr	r1, [r7, #0]
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f001 f9c2 	bl	800dcdc <USBD_CtlError>
            ret = USBD_FAIL;
 800c958:	2303      	movs	r3, #3
 800c95a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c95c:	e008      	b.n	800c970 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c95e:	6839      	ldr	r1, [r7, #0]
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f001 f9bb 	bl	800dcdc <USBD_CtlError>
          ret = USBD_FAIL;
 800c966:	2303      	movs	r3, #3
 800c968:	75fb      	strb	r3, [r7, #23]
          break;
 800c96a:	e002      	b.n	800c972 <USBD_CDC_Setup+0x176>
          break;
 800c96c:	bf00      	nop
 800c96e:	e008      	b.n	800c982 <USBD_CDC_Setup+0x186>
          break;
 800c970:	bf00      	nop
      }
      break;
 800c972:	e006      	b.n	800c982 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c974:	6839      	ldr	r1, [r7, #0]
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f001 f9b0 	bl	800dcdc <USBD_CtlError>
      ret = USBD_FAIL;
 800c97c:	2303      	movs	r3, #3
 800c97e:	75fb      	strb	r3, [r7, #23]
      break;
 800c980:	bf00      	nop
  }

  return (uint8_t)ret;
 800c982:	7dfb      	ldrb	r3, [r7, #23]
}
 800c984:	4618      	mov	r0, r3
 800c986:	3718      	adds	r7, #24
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	460b      	mov	r3, r1
 800c996:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c99e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d101      	bne.n	800c9ae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c9aa:	2303      	movs	r3, #3
 800c9ac:	e04f      	b.n	800ca4e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c9b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c9b6:	78fa      	ldrb	r2, [r7, #3]
 800c9b8:	6879      	ldr	r1, [r7, #4]
 800c9ba:	4613      	mov	r3, r2
 800c9bc:	009b      	lsls	r3, r3, #2
 800c9be:	4413      	add	r3, r2
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	440b      	add	r3, r1
 800c9c4:	3318      	adds	r3, #24
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d029      	beq.n	800ca20 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c9cc:	78fa      	ldrb	r2, [r7, #3]
 800c9ce:	6879      	ldr	r1, [r7, #4]
 800c9d0:	4613      	mov	r3, r2
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	4413      	add	r3, r2
 800c9d6:	009b      	lsls	r3, r3, #2
 800c9d8:	440b      	add	r3, r1
 800c9da:	3318      	adds	r3, #24
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	78f9      	ldrb	r1, [r7, #3]
 800c9e0:	68f8      	ldr	r0, [r7, #12]
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	009b      	lsls	r3, r3, #2
 800c9e6:	440b      	add	r3, r1
 800c9e8:	00db      	lsls	r3, r3, #3
 800c9ea:	4403      	add	r3, r0
 800c9ec:	333c      	adds	r3, #60	; 0x3c
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	fbb2 f1f3 	udiv	r1, r2, r3
 800c9f4:	fb01 f303 	mul.w	r3, r1, r3
 800c9f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d110      	bne.n	800ca20 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c9fe:	78fa      	ldrb	r2, [r7, #3]
 800ca00:	6879      	ldr	r1, [r7, #4]
 800ca02:	4613      	mov	r3, r2
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	4413      	add	r3, r2
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	440b      	add	r3, r1
 800ca0c:	3318      	adds	r3, #24
 800ca0e:	2200      	movs	r2, #0
 800ca10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ca12:	78f9      	ldrb	r1, [r7, #3]
 800ca14:	2300      	movs	r3, #0
 800ca16:	2200      	movs	r2, #0
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f001 ff1b 	bl	800e854 <USBD_LL_Transmit>
 800ca1e:	e015      	b.n	800ca4c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca2e:	691b      	ldr	r3, [r3, #16]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d00b      	beq.n	800ca4c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca3a:	691b      	ldr	r3, [r3, #16]
 800ca3c:	68ba      	ldr	r2, [r7, #8]
 800ca3e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ca42:	68ba      	ldr	r2, [r7, #8]
 800ca44:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ca48:	78fa      	ldrb	r2, [r7, #3]
 800ca4a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ca4c:	2300      	movs	r3, #0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b084      	sub	sp, #16
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
 800ca5e:	460b      	mov	r3, r1
 800ca60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d101      	bne.n	800ca78 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ca74:	2303      	movs	r3, #3
 800ca76:	e015      	b.n	800caa4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ca78:	78fb      	ldrb	r3, [r7, #3]
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f001 ff59 	bl	800e934 <USBD_LL_GetRxDataSize>
 800ca82:	4602      	mov	r2, r0
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca90:	68db      	ldr	r3, [r3, #12]
 800ca92:	68fa      	ldr	r2, [r7, #12]
 800ca94:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ca98:	68fa      	ldr	r2, [r7, #12]
 800ca9a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ca9e:	4611      	mov	r1, r2
 800caa0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800caa2:	2300      	movs	r3, #0
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b084      	sub	sp, #16
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800caba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d101      	bne.n	800cac6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800cac2:	2303      	movs	r3, #3
 800cac4:	e01b      	b.n	800cafe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d015      	beq.n	800cafc <USBD_CDC_EP0_RxReady+0x50>
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cad6:	2bff      	cmp	r3, #255	; 0xff
 800cad8:	d010      	beq.n	800cafc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	68fa      	ldr	r2, [r7, #12]
 800cae4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800cae8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800caea:	68fa      	ldr	r2, [r7, #12]
 800caec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800caf0:	b292      	uxth	r2, r2
 800caf2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	22ff      	movs	r2, #255	; 0xff
 800caf8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800cafc:	2300      	movs	r3, #0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3710      	adds	r7, #16
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
	...

0800cb08 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2243      	movs	r2, #67	; 0x43
 800cb14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800cb16:	4b03      	ldr	r3, [pc, #12]	; (800cb24 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	370c      	adds	r7, #12
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr
 800cb24:	200000b4 	.word	0x200000b4

0800cb28 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2243      	movs	r2, #67	; 0x43
 800cb34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800cb36:	4b03      	ldr	r3, [pc, #12]	; (800cb44 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr
 800cb44:	20000070 	.word	0x20000070

0800cb48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b083      	sub	sp, #12
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2243      	movs	r2, #67	; 0x43
 800cb54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800cb56:	4b03      	ldr	r3, [pc, #12]	; (800cb64 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr
 800cb64:	200000f8 	.word	0x200000f8

0800cb68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	220a      	movs	r2, #10
 800cb74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cb76:	4b03      	ldr	r3, [pc, #12]	; (800cb84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	370c      	adds	r7, #12
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr
 800cb84:	2000002c 	.word	0x2000002c

0800cb88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b083      	sub	sp, #12
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d101      	bne.n	800cb9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cb98:	2303      	movs	r3, #3
 800cb9a:	e004      	b.n	800cba6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	683a      	ldr	r2, [r7, #0]
 800cba0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800cba4:	2300      	movs	r3, #0
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	370c      	adds	r7, #12
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr

0800cbb2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cbb2:	b480      	push	{r7}
 800cbb4:	b087      	sub	sp, #28
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	60f8      	str	r0, [r7, #12]
 800cbba:	60b9      	str	r1, [r7, #8]
 800cbbc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cbc4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d101      	bne.n	800cbd0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800cbcc:	2303      	movs	r3, #3
 800cbce:	e008      	b.n	800cbe2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	68ba      	ldr	r2, [r7, #8]
 800cbd4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cbe0:	2300      	movs	r3, #0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	371c      	adds	r7, #28
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbec:	4770      	bx	lr

0800cbee <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cbee:	b480      	push	{r7}
 800cbf0:	b085      	sub	sp, #20
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
 800cbf6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cbfe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d101      	bne.n	800cc0a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800cc06:	2303      	movs	r3, #3
 800cc08:	e004      	b.n	800cc14 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	683a      	ldr	r2, [r7, #0]
 800cc0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cc12:	2300      	movs	r3, #0
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3714      	adds	r7, #20
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr

0800cc20 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc2e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cc30:	2301      	movs	r3, #1
 800cc32:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d101      	bne.n	800cc42 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cc3e:	2303      	movs	r3, #3
 800cc40:	e01a      	b.n	800cc78 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d114      	bne.n	800cc76 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800cc6a:	2181      	movs	r1, #129	; 0x81
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f001 fdf1 	bl	800e854 <USBD_LL_Transmit>

    ret = USBD_OK;
 800cc72:	2300      	movs	r3, #0
 800cc74:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cc76:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3710      	adds	r7, #16
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d101      	bne.n	800cc9e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800cc9a:	2303      	movs	r3, #3
 800cc9c:	e016      	b.n	800cccc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	7c1b      	ldrb	r3, [r3, #16]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d109      	bne.n	800ccba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ccac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ccb0:	2101      	movs	r1, #1
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f001 fe06 	bl	800e8c4 <USBD_LL_PrepareReceive>
 800ccb8:	e007      	b.n	800ccca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ccc0:	2340      	movs	r3, #64	; 0x40
 800ccc2:	2101      	movs	r1, #1
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f001 fdfd 	bl	800e8c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ccca:	2300      	movs	r3, #0
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3710      	adds	r7, #16
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b086      	sub	sp, #24
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	4613      	mov	r3, r2
 800cce0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d101      	bne.n	800ccec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cce8:	2303      	movs	r3, #3
 800ccea:	e01f      	b.n	800cd2c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d003      	beq.n	800cd12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	68ba      	ldr	r2, [r7, #8]
 800cd0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2201      	movs	r2, #1
 800cd16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	79fa      	ldrb	r2, [r7, #7]
 800cd1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cd20:	68f8      	ldr	r0, [r7, #12]
 800cd22:	f001 fbbf 	bl	800e4a4 <USBD_LL_Init>
 800cd26:	4603      	mov	r3, r0
 800cd28:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cd2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3718      	adds	r7, #24
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d101      	bne.n	800cd4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cd48:	2303      	movs	r3, #3
 800cd4a:	e016      	b.n	800cd7a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	683a      	ldr	r2, [r7, #0]
 800cd50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d00b      	beq.n	800cd78 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd68:	f107 020e 	add.w	r2, r7, #14
 800cd6c:	4610      	mov	r0, r2
 800cd6e:	4798      	blx	r3
 800cd70:	4602      	mov	r2, r0
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800cd78:	2300      	movs	r3, #0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}

0800cd82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cd82:	b580      	push	{r7, lr}
 800cd84:	b082      	sub	sp, #8
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f001 fbec 	bl	800e568 <USBD_LL_Start>
 800cd90:	4603      	mov	r3, r0
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3708      	adds	r7, #8
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cd9a:	b480      	push	{r7}
 800cd9c:	b083      	sub	sp, #12
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cda2:	2300      	movs	r3, #0
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	370c      	adds	r7, #12
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	460b      	mov	r3, r1
 800cdba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cdbc:	2303      	movs	r3, #3
 800cdbe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d009      	beq.n	800cdde <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	78fa      	ldrb	r2, [r7, #3]
 800cdd4:	4611      	mov	r1, r2
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	4798      	blx	r3
 800cdda:	4603      	mov	r3, r0
 800cddc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cdde:	7bfb      	ldrb	r3, [r7, #15]
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3710      	adds	r7, #16
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d007      	beq.n	800ce0e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	78fa      	ldrb	r2, [r7, #3]
 800ce08:	4611      	mov	r1, r2
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	4798      	blx	r3
  }

  return USBD_OK;
 800ce0e:	2300      	movs	r3, #0
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3708      	adds	r7, #8
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce28:	6839      	ldr	r1, [r7, #0]
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f000 ff1c 	bl	800dc68 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2201      	movs	r2, #1
 800ce34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ce3e:	461a      	mov	r2, r3
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ce4c:	f003 031f 	and.w	r3, r3, #31
 800ce50:	2b02      	cmp	r3, #2
 800ce52:	d01a      	beq.n	800ce8a <USBD_LL_SetupStage+0x72>
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d822      	bhi.n	800ce9e <USBD_LL_SetupStage+0x86>
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d002      	beq.n	800ce62 <USBD_LL_SetupStage+0x4a>
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d00a      	beq.n	800ce76 <USBD_LL_SetupStage+0x5e>
 800ce60:	e01d      	b.n	800ce9e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce68:	4619      	mov	r1, r3
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f000 f9ee 	bl	800d24c <USBD_StdDevReq>
 800ce70:	4603      	mov	r3, r0
 800ce72:	73fb      	strb	r3, [r7, #15]
      break;
 800ce74:	e020      	b.n	800ceb8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 fa52 	bl	800d328 <USBD_StdItfReq>
 800ce84:	4603      	mov	r3, r0
 800ce86:	73fb      	strb	r3, [r7, #15]
      break;
 800ce88:	e016      	b.n	800ceb8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce90:	4619      	mov	r1, r3
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 fa91 	bl	800d3ba <USBD_StdEPReq>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	73fb      	strb	r3, [r7, #15]
      break;
 800ce9c:	e00c      	b.n	800ceb8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cea4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	4619      	mov	r1, r3
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f001 fc01 	bl	800e6b4 <USBD_LL_StallEP>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	73fb      	strb	r3, [r7, #15]
      break;
 800ceb6:	bf00      	nop
  }

  return ret;
 800ceb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cec2:	b580      	push	{r7, lr}
 800cec4:	b086      	sub	sp, #24
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	60f8      	str	r0, [r7, #12]
 800ceca:	460b      	mov	r3, r1
 800cecc:	607a      	str	r2, [r7, #4]
 800cece:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ced0:	7afb      	ldrb	r3, [r7, #11]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d138      	bne.n	800cf48 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cedc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cee4:	2b03      	cmp	r3, #3
 800cee6:	d14a      	bne.n	800cf7e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	689a      	ldr	r2, [r3, #8]
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d913      	bls.n	800cf1c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	689a      	ldr	r2, [r3, #8]
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	68db      	ldr	r3, [r3, #12]
 800cefc:	1ad2      	subs	r2, r2, r3
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	68da      	ldr	r2, [r3, #12]
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	bf28      	it	cs
 800cf0e:	4613      	movcs	r3, r2
 800cf10:	461a      	mov	r2, r3
 800cf12:	6879      	ldr	r1, [r7, #4]
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f000 ff9b 	bl	800de50 <USBD_CtlContinueRx>
 800cf1a:	e030      	b.n	800cf7e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf22:	b2db      	uxtb	r3, r3
 800cf24:	2b03      	cmp	r3, #3
 800cf26:	d10b      	bne.n	800cf40 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf2e:	691b      	ldr	r3, [r3, #16]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d005      	beq.n	800cf40 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf3a:	691b      	ldr	r3, [r3, #16]
 800cf3c:	68f8      	ldr	r0, [r7, #12]
 800cf3e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cf40:	68f8      	ldr	r0, [r7, #12]
 800cf42:	f000 ff96 	bl	800de72 <USBD_CtlSendStatus>
 800cf46:	e01a      	b.n	800cf7e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	2b03      	cmp	r3, #3
 800cf52:	d114      	bne.n	800cf7e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf5a:	699b      	ldr	r3, [r3, #24]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d00e      	beq.n	800cf7e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf66:	699b      	ldr	r3, [r3, #24]
 800cf68:	7afa      	ldrb	r2, [r7, #11]
 800cf6a:	4611      	mov	r1, r2
 800cf6c:	68f8      	ldr	r0, [r7, #12]
 800cf6e:	4798      	blx	r3
 800cf70:	4603      	mov	r3, r0
 800cf72:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cf74:	7dfb      	ldrb	r3, [r7, #23]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d001      	beq.n	800cf7e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800cf7a:	7dfb      	ldrb	r3, [r7, #23]
 800cf7c:	e000      	b.n	800cf80 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800cf7e:	2300      	movs	r3, #0
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3718      	adds	r7, #24
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}

0800cf88 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b086      	sub	sp, #24
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	460b      	mov	r3, r1
 800cf92:	607a      	str	r2, [r7, #4]
 800cf94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cf96:	7afb      	ldrb	r3, [r7, #11]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d16b      	bne.n	800d074 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	3314      	adds	r3, #20
 800cfa0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cfa8:	2b02      	cmp	r3, #2
 800cfaa:	d156      	bne.n	800d05a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	689a      	ldr	r2, [r3, #8]
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	68db      	ldr	r3, [r3, #12]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d914      	bls.n	800cfe2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	689a      	ldr	r2, [r3, #8]
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	68db      	ldr	r3, [r3, #12]
 800cfc0:	1ad2      	subs	r2, r2, r3
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	461a      	mov	r2, r3
 800cfcc:	6879      	ldr	r1, [r7, #4]
 800cfce:	68f8      	ldr	r0, [r7, #12]
 800cfd0:	f000 ff10 	bl	800ddf4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	2100      	movs	r1, #0
 800cfda:	68f8      	ldr	r0, [r7, #12]
 800cfdc:	f001 fc72 	bl	800e8c4 <USBD_LL_PrepareReceive>
 800cfe0:	e03b      	b.n	800d05a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	68da      	ldr	r2, [r3, #12]
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	689b      	ldr	r3, [r3, #8]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d11c      	bne.n	800d028 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	685a      	ldr	r2, [r3, #4]
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d316      	bcc.n	800d028 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	685a      	ldr	r2, [r3, #4]
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d004:	429a      	cmp	r2, r3
 800d006:	d20f      	bcs.n	800d028 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d008:	2200      	movs	r2, #0
 800d00a:	2100      	movs	r1, #0
 800d00c:	68f8      	ldr	r0, [r7, #12]
 800d00e:	f000 fef1 	bl	800ddf4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	2200      	movs	r2, #0
 800d016:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d01a:	2300      	movs	r3, #0
 800d01c:	2200      	movs	r2, #0
 800d01e:	2100      	movs	r1, #0
 800d020:	68f8      	ldr	r0, [r7, #12]
 800d022:	f001 fc4f 	bl	800e8c4 <USBD_LL_PrepareReceive>
 800d026:	e018      	b.n	800d05a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d02e:	b2db      	uxtb	r3, r3
 800d030:	2b03      	cmp	r3, #3
 800d032:	d10b      	bne.n	800d04c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d03a:	68db      	ldr	r3, [r3, #12]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d005      	beq.n	800d04c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	68f8      	ldr	r0, [r7, #12]
 800d04a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d04c:	2180      	movs	r1, #128	; 0x80
 800d04e:	68f8      	ldr	r0, [r7, #12]
 800d050:	f001 fb30 	bl	800e6b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d054:	68f8      	ldr	r0, [r7, #12]
 800d056:	f000 ff1f 	bl	800de98 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d060:	2b01      	cmp	r3, #1
 800d062:	d122      	bne.n	800d0aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d064:	68f8      	ldr	r0, [r7, #12]
 800d066:	f7ff fe98 	bl	800cd9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2200      	movs	r2, #0
 800d06e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d072:	e01a      	b.n	800d0aa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	2b03      	cmp	r3, #3
 800d07e:	d114      	bne.n	800d0aa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d086:	695b      	ldr	r3, [r3, #20]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d00e      	beq.n	800d0aa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d092:	695b      	ldr	r3, [r3, #20]
 800d094:	7afa      	ldrb	r2, [r7, #11]
 800d096:	4611      	mov	r1, r2
 800d098:	68f8      	ldr	r0, [r7, #12]
 800d09a:	4798      	blx	r3
 800d09c:	4603      	mov	r3, r0
 800d09e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d0a0:	7dfb      	ldrb	r3, [r7, #23]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d001      	beq.n	800d0aa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d0a6:	7dfb      	ldrb	r3, [r7, #23]
 800d0a8:	e000      	b.n	800d0ac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d0aa:	2300      	movs	r3, #0
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3718      	adds	r7, #24
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2201      	movs	r2, #1
 800d0c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d101      	bne.n	800d0e8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d0e4:	2303      	movs	r3, #3
 800d0e6:	e02f      	b.n	800d148 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d00f      	beq.n	800d112 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d009      	beq.n	800d112 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	6852      	ldr	r2, [r2, #4]
 800d10a:	b2d2      	uxtb	r2, r2
 800d10c:	4611      	mov	r1, r2
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d112:	2340      	movs	r3, #64	; 0x40
 800d114:	2200      	movs	r2, #0
 800d116:	2100      	movs	r1, #0
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f001 fa57 	bl	800e5cc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2201      	movs	r2, #1
 800d122:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2240      	movs	r2, #64	; 0x40
 800d12a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d12e:	2340      	movs	r3, #64	; 0x40
 800d130:	2200      	movs	r2, #0
 800d132:	2180      	movs	r1, #128	; 0x80
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f001 fa49 	bl	800e5cc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2201      	movs	r2, #1
 800d13e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2240      	movs	r2, #64	; 0x40
 800d144:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d146:	2300      	movs	r3, #0
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3708      	adds	r7, #8
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d150:	b480      	push	{r7}
 800d152:	b083      	sub	sp, #12
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	460b      	mov	r3, r1
 800d15a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	78fa      	ldrb	r2, [r7, #3]
 800d160:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d162:	2300      	movs	r3, #0
}
 800d164:	4618      	mov	r0, r3
 800d166:	370c      	adds	r7, #12
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr

0800d170 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d170:	b480      	push	{r7}
 800d172:	b083      	sub	sp, #12
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d17e:	b2da      	uxtb	r2, r3
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2204      	movs	r2, #4
 800d18a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d18e:	2300      	movs	r3, #0
}
 800d190:	4618      	mov	r0, r3
 800d192:	370c      	adds	r7, #12
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr

0800d19c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	2b04      	cmp	r3, #4
 800d1ae:	d106      	bne.n	800d1be <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d1b6:	b2da      	uxtb	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d1be:	2300      	movs	r3, #0
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	370c      	adds	r7, #12
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr

0800d1cc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d101      	bne.n	800d1e2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d1de:	2303      	movs	r3, #3
 800d1e0:	e012      	b.n	800d208 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	2b03      	cmp	r3, #3
 800d1ec:	d10b      	bne.n	800d206 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1f4:	69db      	ldr	r3, [r3, #28]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d005      	beq.n	800d206 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d200:	69db      	ldr	r3, [r3, #28]
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d206:	2300      	movs	r3, #0
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3708      	adds	r7, #8
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d210:	b480      	push	{r7}
 800d212:	b087      	sub	sp, #28
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	3301      	adds	r3, #1
 800d226:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d22e:	8a3b      	ldrh	r3, [r7, #16]
 800d230:	021b      	lsls	r3, r3, #8
 800d232:	b21a      	sxth	r2, r3
 800d234:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d238:	4313      	orrs	r3, r2
 800d23a:	b21b      	sxth	r3, r3
 800d23c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d23e:	89fb      	ldrh	r3, [r7, #14]
}
 800d240:	4618      	mov	r0, r3
 800d242:	371c      	adds	r7, #28
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr

0800d24c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d256:	2300      	movs	r3, #0
 800d258:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d262:	2b40      	cmp	r3, #64	; 0x40
 800d264:	d005      	beq.n	800d272 <USBD_StdDevReq+0x26>
 800d266:	2b40      	cmp	r3, #64	; 0x40
 800d268:	d853      	bhi.n	800d312 <USBD_StdDevReq+0xc6>
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d00b      	beq.n	800d286 <USBD_StdDevReq+0x3a>
 800d26e:	2b20      	cmp	r3, #32
 800d270:	d14f      	bne.n	800d312 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d278:	689b      	ldr	r3, [r3, #8]
 800d27a:	6839      	ldr	r1, [r7, #0]
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	4798      	blx	r3
 800d280:	4603      	mov	r3, r0
 800d282:	73fb      	strb	r3, [r7, #15]
      break;
 800d284:	e04a      	b.n	800d31c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	785b      	ldrb	r3, [r3, #1]
 800d28a:	2b09      	cmp	r3, #9
 800d28c:	d83b      	bhi.n	800d306 <USBD_StdDevReq+0xba>
 800d28e:	a201      	add	r2, pc, #4	; (adr r2, 800d294 <USBD_StdDevReq+0x48>)
 800d290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d294:	0800d2e9 	.word	0x0800d2e9
 800d298:	0800d2fd 	.word	0x0800d2fd
 800d29c:	0800d307 	.word	0x0800d307
 800d2a0:	0800d2f3 	.word	0x0800d2f3
 800d2a4:	0800d307 	.word	0x0800d307
 800d2a8:	0800d2c7 	.word	0x0800d2c7
 800d2ac:	0800d2bd 	.word	0x0800d2bd
 800d2b0:	0800d307 	.word	0x0800d307
 800d2b4:	0800d2df 	.word	0x0800d2df
 800d2b8:	0800d2d1 	.word	0x0800d2d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d2bc:	6839      	ldr	r1, [r7, #0]
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 f9de 	bl	800d680 <USBD_GetDescriptor>
          break;
 800d2c4:	e024      	b.n	800d310 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d2c6:	6839      	ldr	r1, [r7, #0]
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f000 fb43 	bl	800d954 <USBD_SetAddress>
          break;
 800d2ce:	e01f      	b.n	800d310 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d2d0:	6839      	ldr	r1, [r7, #0]
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f000 fb82 	bl	800d9dc <USBD_SetConfig>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	73fb      	strb	r3, [r7, #15]
          break;
 800d2dc:	e018      	b.n	800d310 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d2de:	6839      	ldr	r1, [r7, #0]
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f000 fc21 	bl	800db28 <USBD_GetConfig>
          break;
 800d2e6:	e013      	b.n	800d310 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d2e8:	6839      	ldr	r1, [r7, #0]
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 fc52 	bl	800db94 <USBD_GetStatus>
          break;
 800d2f0:	e00e      	b.n	800d310 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d2f2:	6839      	ldr	r1, [r7, #0]
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f000 fc81 	bl	800dbfc <USBD_SetFeature>
          break;
 800d2fa:	e009      	b.n	800d310 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d2fc:	6839      	ldr	r1, [r7, #0]
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 fc90 	bl	800dc24 <USBD_ClrFeature>
          break;
 800d304:	e004      	b.n	800d310 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d306:	6839      	ldr	r1, [r7, #0]
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 fce7 	bl	800dcdc <USBD_CtlError>
          break;
 800d30e:	bf00      	nop
      }
      break;
 800d310:	e004      	b.n	800d31c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d312:	6839      	ldr	r1, [r7, #0]
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 fce1 	bl	800dcdc <USBD_CtlError>
      break;
 800d31a:	bf00      	nop
  }

  return ret;
 800d31c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3710      	adds	r7, #16
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop

0800d328 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d332:	2300      	movs	r3, #0
 800d334:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	781b      	ldrb	r3, [r3, #0]
 800d33a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d33e:	2b40      	cmp	r3, #64	; 0x40
 800d340:	d005      	beq.n	800d34e <USBD_StdItfReq+0x26>
 800d342:	2b40      	cmp	r3, #64	; 0x40
 800d344:	d82f      	bhi.n	800d3a6 <USBD_StdItfReq+0x7e>
 800d346:	2b00      	cmp	r3, #0
 800d348:	d001      	beq.n	800d34e <USBD_StdItfReq+0x26>
 800d34a:	2b20      	cmp	r3, #32
 800d34c:	d12b      	bne.n	800d3a6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d354:	b2db      	uxtb	r3, r3
 800d356:	3b01      	subs	r3, #1
 800d358:	2b02      	cmp	r3, #2
 800d35a:	d81d      	bhi.n	800d398 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	889b      	ldrh	r3, [r3, #4]
 800d360:	b2db      	uxtb	r3, r3
 800d362:	2b01      	cmp	r3, #1
 800d364:	d813      	bhi.n	800d38e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d36c:	689b      	ldr	r3, [r3, #8]
 800d36e:	6839      	ldr	r1, [r7, #0]
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	4798      	blx	r3
 800d374:	4603      	mov	r3, r0
 800d376:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	88db      	ldrh	r3, [r3, #6]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d110      	bne.n	800d3a2 <USBD_StdItfReq+0x7a>
 800d380:	7bfb      	ldrb	r3, [r7, #15]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d10d      	bne.n	800d3a2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 fd73 	bl	800de72 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d38c:	e009      	b.n	800d3a2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d38e:	6839      	ldr	r1, [r7, #0]
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f000 fca3 	bl	800dcdc <USBD_CtlError>
          break;
 800d396:	e004      	b.n	800d3a2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d398:	6839      	ldr	r1, [r7, #0]
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f000 fc9e 	bl	800dcdc <USBD_CtlError>
          break;
 800d3a0:	e000      	b.n	800d3a4 <USBD_StdItfReq+0x7c>
          break;
 800d3a2:	bf00      	nop
      }
      break;
 800d3a4:	e004      	b.n	800d3b0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d3a6:	6839      	ldr	r1, [r7, #0]
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f000 fc97 	bl	800dcdc <USBD_CtlError>
      break;
 800d3ae:	bf00      	nop
  }

  return ret;
 800d3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b084      	sub	sp, #16
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
 800d3c2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	889b      	ldrh	r3, [r3, #4]
 800d3cc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d3d6:	2b40      	cmp	r3, #64	; 0x40
 800d3d8:	d007      	beq.n	800d3ea <USBD_StdEPReq+0x30>
 800d3da:	2b40      	cmp	r3, #64	; 0x40
 800d3dc:	f200 8145 	bhi.w	800d66a <USBD_StdEPReq+0x2b0>
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d00c      	beq.n	800d3fe <USBD_StdEPReq+0x44>
 800d3e4:	2b20      	cmp	r3, #32
 800d3e6:	f040 8140 	bne.w	800d66a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3f0:	689b      	ldr	r3, [r3, #8]
 800d3f2:	6839      	ldr	r1, [r7, #0]
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	4798      	blx	r3
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	73fb      	strb	r3, [r7, #15]
      break;
 800d3fc:	e13a      	b.n	800d674 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	785b      	ldrb	r3, [r3, #1]
 800d402:	2b03      	cmp	r3, #3
 800d404:	d007      	beq.n	800d416 <USBD_StdEPReq+0x5c>
 800d406:	2b03      	cmp	r3, #3
 800d408:	f300 8129 	bgt.w	800d65e <USBD_StdEPReq+0x2a4>
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d07f      	beq.n	800d510 <USBD_StdEPReq+0x156>
 800d410:	2b01      	cmp	r3, #1
 800d412:	d03c      	beq.n	800d48e <USBD_StdEPReq+0xd4>
 800d414:	e123      	b.n	800d65e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	2b02      	cmp	r3, #2
 800d420:	d002      	beq.n	800d428 <USBD_StdEPReq+0x6e>
 800d422:	2b03      	cmp	r3, #3
 800d424:	d016      	beq.n	800d454 <USBD_StdEPReq+0x9a>
 800d426:	e02c      	b.n	800d482 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d428:	7bbb      	ldrb	r3, [r7, #14]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d00d      	beq.n	800d44a <USBD_StdEPReq+0x90>
 800d42e:	7bbb      	ldrb	r3, [r7, #14]
 800d430:	2b80      	cmp	r3, #128	; 0x80
 800d432:	d00a      	beq.n	800d44a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d434:	7bbb      	ldrb	r3, [r7, #14]
 800d436:	4619      	mov	r1, r3
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f001 f93b 	bl	800e6b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d43e:	2180      	movs	r1, #128	; 0x80
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f001 f937 	bl	800e6b4 <USBD_LL_StallEP>
 800d446:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d448:	e020      	b.n	800d48c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d44a:	6839      	ldr	r1, [r7, #0]
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f000 fc45 	bl	800dcdc <USBD_CtlError>
              break;
 800d452:	e01b      	b.n	800d48c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	885b      	ldrh	r3, [r3, #2]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d10e      	bne.n	800d47a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d45c:	7bbb      	ldrb	r3, [r7, #14]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d00b      	beq.n	800d47a <USBD_StdEPReq+0xc0>
 800d462:	7bbb      	ldrb	r3, [r7, #14]
 800d464:	2b80      	cmp	r3, #128	; 0x80
 800d466:	d008      	beq.n	800d47a <USBD_StdEPReq+0xc0>
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	88db      	ldrh	r3, [r3, #6]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d104      	bne.n	800d47a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d470:	7bbb      	ldrb	r3, [r7, #14]
 800d472:	4619      	mov	r1, r3
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f001 f91d 	bl	800e6b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f000 fcf9 	bl	800de72 <USBD_CtlSendStatus>

              break;
 800d480:	e004      	b.n	800d48c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d482:	6839      	ldr	r1, [r7, #0]
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 fc29 	bl	800dcdc <USBD_CtlError>
              break;
 800d48a:	bf00      	nop
          }
          break;
 800d48c:	e0ec      	b.n	800d668 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d494:	b2db      	uxtb	r3, r3
 800d496:	2b02      	cmp	r3, #2
 800d498:	d002      	beq.n	800d4a0 <USBD_StdEPReq+0xe6>
 800d49a:	2b03      	cmp	r3, #3
 800d49c:	d016      	beq.n	800d4cc <USBD_StdEPReq+0x112>
 800d49e:	e030      	b.n	800d502 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d4a0:	7bbb      	ldrb	r3, [r7, #14]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d00d      	beq.n	800d4c2 <USBD_StdEPReq+0x108>
 800d4a6:	7bbb      	ldrb	r3, [r7, #14]
 800d4a8:	2b80      	cmp	r3, #128	; 0x80
 800d4aa:	d00a      	beq.n	800d4c2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d4ac:	7bbb      	ldrb	r3, [r7, #14]
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f001 f8ff 	bl	800e6b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4b6:	2180      	movs	r1, #128	; 0x80
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f001 f8fb 	bl	800e6b4 <USBD_LL_StallEP>
 800d4be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d4c0:	e025      	b.n	800d50e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d4c2:	6839      	ldr	r1, [r7, #0]
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f000 fc09 	bl	800dcdc <USBD_CtlError>
              break;
 800d4ca:	e020      	b.n	800d50e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	885b      	ldrh	r3, [r3, #2]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d11b      	bne.n	800d50c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d4d4:	7bbb      	ldrb	r3, [r7, #14]
 800d4d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d004      	beq.n	800d4e8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d4de:	7bbb      	ldrb	r3, [r7, #14]
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f001 f91c 	bl	800e720 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 fcc2 	bl	800de72 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4f4:	689b      	ldr	r3, [r3, #8]
 800d4f6:	6839      	ldr	r1, [r7, #0]
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	4798      	blx	r3
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d500:	e004      	b.n	800d50c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d502:	6839      	ldr	r1, [r7, #0]
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f000 fbe9 	bl	800dcdc <USBD_CtlError>
              break;
 800d50a:	e000      	b.n	800d50e <USBD_StdEPReq+0x154>
              break;
 800d50c:	bf00      	nop
          }
          break;
 800d50e:	e0ab      	b.n	800d668 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d516:	b2db      	uxtb	r3, r3
 800d518:	2b02      	cmp	r3, #2
 800d51a:	d002      	beq.n	800d522 <USBD_StdEPReq+0x168>
 800d51c:	2b03      	cmp	r3, #3
 800d51e:	d032      	beq.n	800d586 <USBD_StdEPReq+0x1cc>
 800d520:	e097      	b.n	800d652 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d522:	7bbb      	ldrb	r3, [r7, #14]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d007      	beq.n	800d538 <USBD_StdEPReq+0x17e>
 800d528:	7bbb      	ldrb	r3, [r7, #14]
 800d52a:	2b80      	cmp	r3, #128	; 0x80
 800d52c:	d004      	beq.n	800d538 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d52e:	6839      	ldr	r1, [r7, #0]
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f000 fbd3 	bl	800dcdc <USBD_CtlError>
                break;
 800d536:	e091      	b.n	800d65c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d538:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	da0b      	bge.n	800d558 <USBD_StdEPReq+0x19e>
 800d540:	7bbb      	ldrb	r3, [r7, #14]
 800d542:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d546:	4613      	mov	r3, r2
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	4413      	add	r3, r2
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	3310      	adds	r3, #16
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	4413      	add	r3, r2
 800d554:	3304      	adds	r3, #4
 800d556:	e00b      	b.n	800d570 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d558:	7bbb      	ldrb	r3, [r7, #14]
 800d55a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d55e:	4613      	mov	r3, r2
 800d560:	009b      	lsls	r3, r3, #2
 800d562:	4413      	add	r3, r2
 800d564:	009b      	lsls	r3, r3, #2
 800d566:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	4413      	add	r3, r2
 800d56e:	3304      	adds	r3, #4
 800d570:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	2200      	movs	r2, #0
 800d576:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	2202      	movs	r2, #2
 800d57c:	4619      	mov	r1, r3
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 fc1d 	bl	800ddbe <USBD_CtlSendData>
              break;
 800d584:	e06a      	b.n	800d65c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d586:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	da11      	bge.n	800d5b2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d58e:	7bbb      	ldrb	r3, [r7, #14]
 800d590:	f003 020f 	and.w	r2, r3, #15
 800d594:	6879      	ldr	r1, [r7, #4]
 800d596:	4613      	mov	r3, r2
 800d598:	009b      	lsls	r3, r3, #2
 800d59a:	4413      	add	r3, r2
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	440b      	add	r3, r1
 800d5a0:	3324      	adds	r3, #36	; 0x24
 800d5a2:	881b      	ldrh	r3, [r3, #0]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d117      	bne.n	800d5d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d5a8:	6839      	ldr	r1, [r7, #0]
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 fb96 	bl	800dcdc <USBD_CtlError>
                  break;
 800d5b0:	e054      	b.n	800d65c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d5b2:	7bbb      	ldrb	r3, [r7, #14]
 800d5b4:	f003 020f 	and.w	r2, r3, #15
 800d5b8:	6879      	ldr	r1, [r7, #4]
 800d5ba:	4613      	mov	r3, r2
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	4413      	add	r3, r2
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	440b      	add	r3, r1
 800d5c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d5c8:	881b      	ldrh	r3, [r3, #0]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d104      	bne.n	800d5d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d5ce:	6839      	ldr	r1, [r7, #0]
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f000 fb83 	bl	800dcdc <USBD_CtlError>
                  break;
 800d5d6:	e041      	b.n	800d65c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d5d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	da0b      	bge.n	800d5f8 <USBD_StdEPReq+0x23e>
 800d5e0:	7bbb      	ldrb	r3, [r7, #14]
 800d5e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	009b      	lsls	r3, r3, #2
 800d5ea:	4413      	add	r3, r2
 800d5ec:	009b      	lsls	r3, r3, #2
 800d5ee:	3310      	adds	r3, #16
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	4413      	add	r3, r2
 800d5f4:	3304      	adds	r3, #4
 800d5f6:	e00b      	b.n	800d610 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d5f8:	7bbb      	ldrb	r3, [r7, #14]
 800d5fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d5fe:	4613      	mov	r3, r2
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	4413      	add	r3, r2
 800d604:	009b      	lsls	r3, r3, #2
 800d606:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	4413      	add	r3, r2
 800d60e:	3304      	adds	r3, #4
 800d610:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d612:	7bbb      	ldrb	r3, [r7, #14]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d002      	beq.n	800d61e <USBD_StdEPReq+0x264>
 800d618:	7bbb      	ldrb	r3, [r7, #14]
 800d61a:	2b80      	cmp	r3, #128	; 0x80
 800d61c:	d103      	bne.n	800d626 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	2200      	movs	r2, #0
 800d622:	601a      	str	r2, [r3, #0]
 800d624:	e00e      	b.n	800d644 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d626:	7bbb      	ldrb	r3, [r7, #14]
 800d628:	4619      	mov	r1, r3
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f001 f8ae 	bl	800e78c <USBD_LL_IsStallEP>
 800d630:	4603      	mov	r3, r0
 800d632:	2b00      	cmp	r3, #0
 800d634:	d003      	beq.n	800d63e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	2201      	movs	r2, #1
 800d63a:	601a      	str	r2, [r3, #0]
 800d63c:	e002      	b.n	800d644 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	2200      	movs	r2, #0
 800d642:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	2202      	movs	r2, #2
 800d648:	4619      	mov	r1, r3
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 fbb7 	bl	800ddbe <USBD_CtlSendData>
              break;
 800d650:	e004      	b.n	800d65c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d652:	6839      	ldr	r1, [r7, #0]
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f000 fb41 	bl	800dcdc <USBD_CtlError>
              break;
 800d65a:	bf00      	nop
          }
          break;
 800d65c:	e004      	b.n	800d668 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d65e:	6839      	ldr	r1, [r7, #0]
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f000 fb3b 	bl	800dcdc <USBD_CtlError>
          break;
 800d666:	bf00      	nop
      }
      break;
 800d668:	e004      	b.n	800d674 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d66a:	6839      	ldr	r1, [r7, #0]
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f000 fb35 	bl	800dcdc <USBD_CtlError>
      break;
 800d672:	bf00      	nop
  }

  return ret;
 800d674:	7bfb      	ldrb	r3, [r7, #15]
}
 800d676:	4618      	mov	r0, r3
 800d678:	3710      	adds	r7, #16
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}
	...

0800d680 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b084      	sub	sp, #16
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d68a:	2300      	movs	r3, #0
 800d68c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d68e:	2300      	movs	r3, #0
 800d690:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d692:	2300      	movs	r3, #0
 800d694:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	885b      	ldrh	r3, [r3, #2]
 800d69a:	0a1b      	lsrs	r3, r3, #8
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	2b06      	cmp	r3, #6
 800d6a2:	f200 8128 	bhi.w	800d8f6 <USBD_GetDescriptor+0x276>
 800d6a6:	a201      	add	r2, pc, #4	; (adr r2, 800d6ac <USBD_GetDescriptor+0x2c>)
 800d6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6ac:	0800d6c9 	.word	0x0800d6c9
 800d6b0:	0800d6e1 	.word	0x0800d6e1
 800d6b4:	0800d721 	.word	0x0800d721
 800d6b8:	0800d8f7 	.word	0x0800d8f7
 800d6bc:	0800d8f7 	.word	0x0800d8f7
 800d6c0:	0800d897 	.word	0x0800d897
 800d6c4:	0800d8c3 	.word	0x0800d8c3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	7c12      	ldrb	r2, [r2, #16]
 800d6d4:	f107 0108 	add.w	r1, r7, #8
 800d6d8:	4610      	mov	r0, r2
 800d6da:	4798      	blx	r3
 800d6dc:	60f8      	str	r0, [r7, #12]
      break;
 800d6de:	e112      	b.n	800d906 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	7c1b      	ldrb	r3, [r3, #16]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d10d      	bne.n	800d704 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6f0:	f107 0208 	add.w	r2, r7, #8
 800d6f4:	4610      	mov	r0, r2
 800d6f6:	4798      	blx	r3
 800d6f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	2202      	movs	r2, #2
 800d700:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d702:	e100      	b.n	800d906 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d70c:	f107 0208 	add.w	r2, r7, #8
 800d710:	4610      	mov	r0, r2
 800d712:	4798      	blx	r3
 800d714:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	3301      	adds	r3, #1
 800d71a:	2202      	movs	r2, #2
 800d71c:	701a      	strb	r2, [r3, #0]
      break;
 800d71e:	e0f2      	b.n	800d906 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	885b      	ldrh	r3, [r3, #2]
 800d724:	b2db      	uxtb	r3, r3
 800d726:	2b05      	cmp	r3, #5
 800d728:	f200 80ac 	bhi.w	800d884 <USBD_GetDescriptor+0x204>
 800d72c:	a201      	add	r2, pc, #4	; (adr r2, 800d734 <USBD_GetDescriptor+0xb4>)
 800d72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d732:	bf00      	nop
 800d734:	0800d74d 	.word	0x0800d74d
 800d738:	0800d781 	.word	0x0800d781
 800d73c:	0800d7b5 	.word	0x0800d7b5
 800d740:	0800d7e9 	.word	0x0800d7e9
 800d744:	0800d81d 	.word	0x0800d81d
 800d748:	0800d851 	.word	0x0800d851
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d00b      	beq.n	800d770 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	687a      	ldr	r2, [r7, #4]
 800d762:	7c12      	ldrb	r2, [r2, #16]
 800d764:	f107 0108 	add.w	r1, r7, #8
 800d768:	4610      	mov	r0, r2
 800d76a:	4798      	blx	r3
 800d76c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d76e:	e091      	b.n	800d894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d770:	6839      	ldr	r1, [r7, #0]
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f000 fab2 	bl	800dcdc <USBD_CtlError>
            err++;
 800d778:	7afb      	ldrb	r3, [r7, #11]
 800d77a:	3301      	adds	r3, #1
 800d77c:	72fb      	strb	r3, [r7, #11]
          break;
 800d77e:	e089      	b.n	800d894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d786:	689b      	ldr	r3, [r3, #8]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d00b      	beq.n	800d7a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d792:	689b      	ldr	r3, [r3, #8]
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	7c12      	ldrb	r2, [r2, #16]
 800d798:	f107 0108 	add.w	r1, r7, #8
 800d79c:	4610      	mov	r0, r2
 800d79e:	4798      	blx	r3
 800d7a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7a2:	e077      	b.n	800d894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7a4:	6839      	ldr	r1, [r7, #0]
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 fa98 	bl	800dcdc <USBD_CtlError>
            err++;
 800d7ac:	7afb      	ldrb	r3, [r7, #11]
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	72fb      	strb	r3, [r7, #11]
          break;
 800d7b2:	e06f      	b.n	800d894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7ba:	68db      	ldr	r3, [r3, #12]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d00b      	beq.n	800d7d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7c6:	68db      	ldr	r3, [r3, #12]
 800d7c8:	687a      	ldr	r2, [r7, #4]
 800d7ca:	7c12      	ldrb	r2, [r2, #16]
 800d7cc:	f107 0108 	add.w	r1, r7, #8
 800d7d0:	4610      	mov	r0, r2
 800d7d2:	4798      	blx	r3
 800d7d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7d6:	e05d      	b.n	800d894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7d8:	6839      	ldr	r1, [r7, #0]
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f000 fa7e 	bl	800dcdc <USBD_CtlError>
            err++;
 800d7e0:	7afb      	ldrb	r3, [r7, #11]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	72fb      	strb	r3, [r7, #11]
          break;
 800d7e6:	e055      	b.n	800d894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7ee:	691b      	ldr	r3, [r3, #16]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d00b      	beq.n	800d80c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7fa:	691b      	ldr	r3, [r3, #16]
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	7c12      	ldrb	r2, [r2, #16]
 800d800:	f107 0108 	add.w	r1, r7, #8
 800d804:	4610      	mov	r0, r2
 800d806:	4798      	blx	r3
 800d808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d80a:	e043      	b.n	800d894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d80c:	6839      	ldr	r1, [r7, #0]
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 fa64 	bl	800dcdc <USBD_CtlError>
            err++;
 800d814:	7afb      	ldrb	r3, [r7, #11]
 800d816:	3301      	adds	r3, #1
 800d818:	72fb      	strb	r3, [r7, #11]
          break;
 800d81a:	e03b      	b.n	800d894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d822:	695b      	ldr	r3, [r3, #20]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d00b      	beq.n	800d840 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d82e:	695b      	ldr	r3, [r3, #20]
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	7c12      	ldrb	r2, [r2, #16]
 800d834:	f107 0108 	add.w	r1, r7, #8
 800d838:	4610      	mov	r0, r2
 800d83a:	4798      	blx	r3
 800d83c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d83e:	e029      	b.n	800d894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d840:	6839      	ldr	r1, [r7, #0]
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f000 fa4a 	bl	800dcdc <USBD_CtlError>
            err++;
 800d848:	7afb      	ldrb	r3, [r7, #11]
 800d84a:	3301      	adds	r3, #1
 800d84c:	72fb      	strb	r3, [r7, #11]
          break;
 800d84e:	e021      	b.n	800d894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d856:	699b      	ldr	r3, [r3, #24]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d00b      	beq.n	800d874 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d862:	699b      	ldr	r3, [r3, #24]
 800d864:	687a      	ldr	r2, [r7, #4]
 800d866:	7c12      	ldrb	r2, [r2, #16]
 800d868:	f107 0108 	add.w	r1, r7, #8
 800d86c:	4610      	mov	r0, r2
 800d86e:	4798      	blx	r3
 800d870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d872:	e00f      	b.n	800d894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d874:	6839      	ldr	r1, [r7, #0]
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f000 fa30 	bl	800dcdc <USBD_CtlError>
            err++;
 800d87c:	7afb      	ldrb	r3, [r7, #11]
 800d87e:	3301      	adds	r3, #1
 800d880:	72fb      	strb	r3, [r7, #11]
          break;
 800d882:	e007      	b.n	800d894 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d884:	6839      	ldr	r1, [r7, #0]
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 fa28 	bl	800dcdc <USBD_CtlError>
          err++;
 800d88c:	7afb      	ldrb	r3, [r7, #11]
 800d88e:	3301      	adds	r3, #1
 800d890:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d892:	bf00      	nop
      }
      break;
 800d894:	e037      	b.n	800d906 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	7c1b      	ldrb	r3, [r3, #16]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d109      	bne.n	800d8b2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8a6:	f107 0208 	add.w	r2, r7, #8
 800d8aa:	4610      	mov	r0, r2
 800d8ac:	4798      	blx	r3
 800d8ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8b0:	e029      	b.n	800d906 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d8b2:	6839      	ldr	r1, [r7, #0]
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 fa11 	bl	800dcdc <USBD_CtlError>
        err++;
 800d8ba:	7afb      	ldrb	r3, [r7, #11]
 800d8bc:	3301      	adds	r3, #1
 800d8be:	72fb      	strb	r3, [r7, #11]
      break;
 800d8c0:	e021      	b.n	800d906 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	7c1b      	ldrb	r3, [r3, #16]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d10d      	bne.n	800d8e6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8d2:	f107 0208 	add.w	r2, r7, #8
 800d8d6:	4610      	mov	r0, r2
 800d8d8:	4798      	blx	r3
 800d8da:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	3301      	adds	r3, #1
 800d8e0:	2207      	movs	r2, #7
 800d8e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8e4:	e00f      	b.n	800d906 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d8e6:	6839      	ldr	r1, [r7, #0]
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f000 f9f7 	bl	800dcdc <USBD_CtlError>
        err++;
 800d8ee:	7afb      	ldrb	r3, [r7, #11]
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	72fb      	strb	r3, [r7, #11]
      break;
 800d8f4:	e007      	b.n	800d906 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d8f6:	6839      	ldr	r1, [r7, #0]
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 f9ef 	bl	800dcdc <USBD_CtlError>
      err++;
 800d8fe:	7afb      	ldrb	r3, [r7, #11]
 800d900:	3301      	adds	r3, #1
 800d902:	72fb      	strb	r3, [r7, #11]
      break;
 800d904:	bf00      	nop
  }

  if (err != 0U)
 800d906:	7afb      	ldrb	r3, [r7, #11]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d11e      	bne.n	800d94a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	88db      	ldrh	r3, [r3, #6]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d016      	beq.n	800d942 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d914:	893b      	ldrh	r3, [r7, #8]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d00e      	beq.n	800d938 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	88da      	ldrh	r2, [r3, #6]
 800d91e:	893b      	ldrh	r3, [r7, #8]
 800d920:	4293      	cmp	r3, r2
 800d922:	bf28      	it	cs
 800d924:	4613      	movcs	r3, r2
 800d926:	b29b      	uxth	r3, r3
 800d928:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d92a:	893b      	ldrh	r3, [r7, #8]
 800d92c:	461a      	mov	r2, r3
 800d92e:	68f9      	ldr	r1, [r7, #12]
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f000 fa44 	bl	800ddbe <USBD_CtlSendData>
 800d936:	e009      	b.n	800d94c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d938:	6839      	ldr	r1, [r7, #0]
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f000 f9ce 	bl	800dcdc <USBD_CtlError>
 800d940:	e004      	b.n	800d94c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f000 fa95 	bl	800de72 <USBD_CtlSendStatus>
 800d948:	e000      	b.n	800d94c <USBD_GetDescriptor+0x2cc>
    return;
 800d94a:	bf00      	nop
  }
}
 800d94c:	3710      	adds	r7, #16
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop

0800d954 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b084      	sub	sp, #16
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	889b      	ldrh	r3, [r3, #4]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d131      	bne.n	800d9ca <USBD_SetAddress+0x76>
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	88db      	ldrh	r3, [r3, #6]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d12d      	bne.n	800d9ca <USBD_SetAddress+0x76>
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	885b      	ldrh	r3, [r3, #2]
 800d972:	2b7f      	cmp	r3, #127	; 0x7f
 800d974:	d829      	bhi.n	800d9ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	885b      	ldrh	r3, [r3, #2]
 800d97a:	b2db      	uxtb	r3, r3
 800d97c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d980:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	2b03      	cmp	r3, #3
 800d98c:	d104      	bne.n	800d998 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d98e:	6839      	ldr	r1, [r7, #0]
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f000 f9a3 	bl	800dcdc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d996:	e01d      	b.n	800d9d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	7bfa      	ldrb	r2, [r7, #15]
 800d99c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d9a0:	7bfb      	ldrb	r3, [r7, #15]
 800d9a2:	4619      	mov	r1, r3
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f000 ff1f 	bl	800e7e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 fa61 	bl	800de72 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d9b0:	7bfb      	ldrb	r3, [r7, #15]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d004      	beq.n	800d9c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2202      	movs	r2, #2
 800d9ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9be:	e009      	b.n	800d9d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9c8:	e004      	b.n	800d9d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d9ca:	6839      	ldr	r1, [r7, #0]
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f000 f985 	bl	800dcdc <USBD_CtlError>
  }
}
 800d9d2:	bf00      	nop
 800d9d4:	bf00      	nop
 800d9d6:	3710      	adds	r7, #16
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	885b      	ldrh	r3, [r3, #2]
 800d9ee:	b2da      	uxtb	r2, r3
 800d9f0:	4b4c      	ldr	r3, [pc, #304]	; (800db24 <USBD_SetConfig+0x148>)
 800d9f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d9f4:	4b4b      	ldr	r3, [pc, #300]	; (800db24 <USBD_SetConfig+0x148>)
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	d905      	bls.n	800da08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d9fc:	6839      	ldr	r1, [r7, #0]
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 f96c 	bl	800dcdc <USBD_CtlError>
    return USBD_FAIL;
 800da04:	2303      	movs	r3, #3
 800da06:	e088      	b.n	800db1a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	2b02      	cmp	r3, #2
 800da12:	d002      	beq.n	800da1a <USBD_SetConfig+0x3e>
 800da14:	2b03      	cmp	r3, #3
 800da16:	d025      	beq.n	800da64 <USBD_SetConfig+0x88>
 800da18:	e071      	b.n	800dafe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800da1a:	4b42      	ldr	r3, [pc, #264]	; (800db24 <USBD_SetConfig+0x148>)
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d01c      	beq.n	800da5c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800da22:	4b40      	ldr	r3, [pc, #256]	; (800db24 <USBD_SetConfig+0x148>)
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	461a      	mov	r2, r3
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800da2c:	4b3d      	ldr	r3, [pc, #244]	; (800db24 <USBD_SetConfig+0x148>)
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	4619      	mov	r1, r3
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f7ff f9bc 	bl	800cdb0 <USBD_SetClassConfig>
 800da38:	4603      	mov	r3, r0
 800da3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800da3c:	7bfb      	ldrb	r3, [r7, #15]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d004      	beq.n	800da4c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800da42:	6839      	ldr	r1, [r7, #0]
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f000 f949 	bl	800dcdc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800da4a:	e065      	b.n	800db18 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 fa10 	bl	800de72 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2203      	movs	r2, #3
 800da56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800da5a:	e05d      	b.n	800db18 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f000 fa08 	bl	800de72 <USBD_CtlSendStatus>
      break;
 800da62:	e059      	b.n	800db18 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800da64:	4b2f      	ldr	r3, [pc, #188]	; (800db24 <USBD_SetConfig+0x148>)
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d112      	bne.n	800da92 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2202      	movs	r2, #2
 800da70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800da74:	4b2b      	ldr	r3, [pc, #172]	; (800db24 <USBD_SetConfig+0x148>)
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	461a      	mov	r2, r3
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800da7e:	4b29      	ldr	r3, [pc, #164]	; (800db24 <USBD_SetConfig+0x148>)
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	4619      	mov	r1, r3
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f7ff f9af 	bl	800cde8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f000 f9f1 	bl	800de72 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800da90:	e042      	b.n	800db18 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800da92:	4b24      	ldr	r3, [pc, #144]	; (800db24 <USBD_SetConfig+0x148>)
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	461a      	mov	r2, r3
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d02a      	beq.n	800daf6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	685b      	ldr	r3, [r3, #4]
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	4619      	mov	r1, r3
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f7ff f99d 	bl	800cde8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800daae:	4b1d      	ldr	r3, [pc, #116]	; (800db24 <USBD_SetConfig+0x148>)
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	461a      	mov	r2, r3
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dab8:	4b1a      	ldr	r3, [pc, #104]	; (800db24 <USBD_SetConfig+0x148>)
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	4619      	mov	r1, r3
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f7ff f976 	bl	800cdb0 <USBD_SetClassConfig>
 800dac4:	4603      	mov	r3, r0
 800dac6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dac8:	7bfb      	ldrb	r3, [r7, #15]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d00f      	beq.n	800daee <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800dace:	6839      	ldr	r1, [r7, #0]
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f000 f903 	bl	800dcdc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	4619      	mov	r1, r3
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f7ff f982 	bl	800cde8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2202      	movs	r2, #2
 800dae8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800daec:	e014      	b.n	800db18 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f000 f9bf 	bl	800de72 <USBD_CtlSendStatus>
      break;
 800daf4:	e010      	b.n	800db18 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f000 f9bb 	bl	800de72 <USBD_CtlSendStatus>
      break;
 800dafc:	e00c      	b.n	800db18 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800dafe:	6839      	ldr	r1, [r7, #0]
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 f8eb 	bl	800dcdc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db06:	4b07      	ldr	r3, [pc, #28]	; (800db24 <USBD_SetConfig+0x148>)
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	4619      	mov	r1, r3
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f7ff f96b 	bl	800cde8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800db12:	2303      	movs	r3, #3
 800db14:	73fb      	strb	r3, [r7, #15]
      break;
 800db16:	bf00      	nop
  }

  return ret;
 800db18:	7bfb      	ldrb	r3, [r7, #15]
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3710      	adds	r7, #16
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	200005c4 	.word	0x200005c4

0800db28 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	88db      	ldrh	r3, [r3, #6]
 800db36:	2b01      	cmp	r3, #1
 800db38:	d004      	beq.n	800db44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800db3a:	6839      	ldr	r1, [r7, #0]
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f000 f8cd 	bl	800dcdc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800db42:	e023      	b.n	800db8c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	2b02      	cmp	r3, #2
 800db4e:	dc02      	bgt.n	800db56 <USBD_GetConfig+0x2e>
 800db50:	2b00      	cmp	r3, #0
 800db52:	dc03      	bgt.n	800db5c <USBD_GetConfig+0x34>
 800db54:	e015      	b.n	800db82 <USBD_GetConfig+0x5a>
 800db56:	2b03      	cmp	r3, #3
 800db58:	d00b      	beq.n	800db72 <USBD_GetConfig+0x4a>
 800db5a:	e012      	b.n	800db82 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2200      	movs	r2, #0
 800db60:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	3308      	adds	r3, #8
 800db66:	2201      	movs	r2, #1
 800db68:	4619      	mov	r1, r3
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 f927 	bl	800ddbe <USBD_CtlSendData>
        break;
 800db70:	e00c      	b.n	800db8c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	3304      	adds	r3, #4
 800db76:	2201      	movs	r2, #1
 800db78:	4619      	mov	r1, r3
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 f91f 	bl	800ddbe <USBD_CtlSendData>
        break;
 800db80:	e004      	b.n	800db8c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800db82:	6839      	ldr	r1, [r7, #0]
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 f8a9 	bl	800dcdc <USBD_CtlError>
        break;
 800db8a:	bf00      	nop
}
 800db8c:	bf00      	nop
 800db8e:	3708      	adds	r7, #8
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	3b01      	subs	r3, #1
 800dba8:	2b02      	cmp	r3, #2
 800dbaa:	d81e      	bhi.n	800dbea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	88db      	ldrh	r3, [r3, #6]
 800dbb0:	2b02      	cmp	r3, #2
 800dbb2:	d004      	beq.n	800dbbe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dbb4:	6839      	ldr	r1, [r7, #0]
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f000 f890 	bl	800dcdc <USBD_CtlError>
        break;
 800dbbc:	e01a      	b.n	800dbf4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d005      	beq.n	800dbda <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	f043 0202 	orr.w	r2, r3, #2
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	330c      	adds	r3, #12
 800dbde:	2202      	movs	r2, #2
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f000 f8eb 	bl	800ddbe <USBD_CtlSendData>
      break;
 800dbe8:	e004      	b.n	800dbf4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dbea:	6839      	ldr	r1, [r7, #0]
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f000 f875 	bl	800dcdc <USBD_CtlError>
      break;
 800dbf2:	bf00      	nop
  }
}
 800dbf4:	bf00      	nop
 800dbf6:	3708      	adds	r7, #8
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	885b      	ldrh	r3, [r3, #2]
 800dc0a:	2b01      	cmp	r3, #1
 800dc0c:	d106      	bne.n	800dc1c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2201      	movs	r2, #1
 800dc12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f000 f92b 	bl	800de72 <USBD_CtlSendStatus>
  }
}
 800dc1c:	bf00      	nop
 800dc1e:	3708      	adds	r7, #8
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	3b01      	subs	r3, #1
 800dc38:	2b02      	cmp	r3, #2
 800dc3a:	d80b      	bhi.n	800dc54 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	885b      	ldrh	r3, [r3, #2]
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	d10c      	bne.n	800dc5e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2200      	movs	r2, #0
 800dc48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 f910 	bl	800de72 <USBD_CtlSendStatus>
      }
      break;
 800dc52:	e004      	b.n	800dc5e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dc54:	6839      	ldr	r1, [r7, #0]
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 f840 	bl	800dcdc <USBD_CtlError>
      break;
 800dc5c:	e000      	b.n	800dc60 <USBD_ClrFeature+0x3c>
      break;
 800dc5e:	bf00      	nop
  }
}
 800dc60:	bf00      	nop
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	781a      	ldrb	r2, [r3, #0]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	3301      	adds	r3, #1
 800dc82:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	781a      	ldrb	r2, [r3, #0]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	3301      	adds	r3, #1
 800dc90:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dc92:	68f8      	ldr	r0, [r7, #12]
 800dc94:	f7ff fabc 	bl	800d210 <SWAPBYTE>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	3301      	adds	r3, #1
 800dca4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	3301      	adds	r3, #1
 800dcaa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	f7ff faaf 	bl	800d210 <SWAPBYTE>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dcc6:	68f8      	ldr	r0, [r7, #12]
 800dcc8:	f7ff faa2 	bl	800d210 <SWAPBYTE>
 800dccc:	4603      	mov	r3, r0
 800dcce:	461a      	mov	r2, r3
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	80da      	strh	r2, [r3, #6]
}
 800dcd4:	bf00      	nop
 800dcd6:	3710      	adds	r7, #16
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dce6:	2180      	movs	r1, #128	; 0x80
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f000 fce3 	bl	800e6b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dcee:	2100      	movs	r1, #0
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f000 fcdf 	bl	800e6b4 <USBD_LL_StallEP>
}
 800dcf6:	bf00      	nop
 800dcf8:	3708      	adds	r7, #8
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}

0800dcfe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dcfe:	b580      	push	{r7, lr}
 800dd00:	b086      	sub	sp, #24
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	60f8      	str	r0, [r7, #12]
 800dd06:	60b9      	str	r1, [r7, #8]
 800dd08:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d036      	beq.n	800dd82 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dd18:	6938      	ldr	r0, [r7, #16]
 800dd1a:	f000 f836 	bl	800dd8a <USBD_GetLen>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	3301      	adds	r3, #1
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	005b      	lsls	r3, r3, #1
 800dd26:	b29a      	uxth	r2, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dd2c:	7dfb      	ldrb	r3, [r7, #23]
 800dd2e:	68ba      	ldr	r2, [r7, #8]
 800dd30:	4413      	add	r3, r2
 800dd32:	687a      	ldr	r2, [r7, #4]
 800dd34:	7812      	ldrb	r2, [r2, #0]
 800dd36:	701a      	strb	r2, [r3, #0]
  idx++;
 800dd38:	7dfb      	ldrb	r3, [r7, #23]
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dd3e:	7dfb      	ldrb	r3, [r7, #23]
 800dd40:	68ba      	ldr	r2, [r7, #8]
 800dd42:	4413      	add	r3, r2
 800dd44:	2203      	movs	r2, #3
 800dd46:	701a      	strb	r2, [r3, #0]
  idx++;
 800dd48:	7dfb      	ldrb	r3, [r7, #23]
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dd4e:	e013      	b.n	800dd78 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dd50:	7dfb      	ldrb	r3, [r7, #23]
 800dd52:	68ba      	ldr	r2, [r7, #8]
 800dd54:	4413      	add	r3, r2
 800dd56:	693a      	ldr	r2, [r7, #16]
 800dd58:	7812      	ldrb	r2, [r2, #0]
 800dd5a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	3301      	adds	r3, #1
 800dd60:	613b      	str	r3, [r7, #16]
    idx++;
 800dd62:	7dfb      	ldrb	r3, [r7, #23]
 800dd64:	3301      	adds	r3, #1
 800dd66:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dd68:	7dfb      	ldrb	r3, [r7, #23]
 800dd6a:	68ba      	ldr	r2, [r7, #8]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	2200      	movs	r2, #0
 800dd70:	701a      	strb	r2, [r3, #0]
    idx++;
 800dd72:	7dfb      	ldrb	r3, [r7, #23]
 800dd74:	3301      	adds	r3, #1
 800dd76:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d1e7      	bne.n	800dd50 <USBD_GetString+0x52>
 800dd80:	e000      	b.n	800dd84 <USBD_GetString+0x86>
    return;
 800dd82:	bf00      	nop
  }
}
 800dd84:	3718      	adds	r7, #24
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}

0800dd8a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dd8a:	b480      	push	{r7}
 800dd8c:	b085      	sub	sp, #20
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dd92:	2300      	movs	r3, #0
 800dd94:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dd9a:	e005      	b.n	800dda8 <USBD_GetLen+0x1e>
  {
    len++;
 800dd9c:	7bfb      	ldrb	r3, [r7, #15]
 800dd9e:	3301      	adds	r3, #1
 800dda0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	3301      	adds	r3, #1
 800dda6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d1f5      	bne.n	800dd9c <USBD_GetLen+0x12>
  }

  return len;
 800ddb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3714      	adds	r7, #20
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbc:	4770      	bx	lr

0800ddbe <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ddbe:	b580      	push	{r7, lr}
 800ddc0:	b084      	sub	sp, #16
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	60f8      	str	r0, [r7, #12]
 800ddc6:	60b9      	str	r1, [r7, #8]
 800ddc8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2202      	movs	r2, #2
 800ddce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	687a      	ldr	r2, [r7, #4]
 800ddd6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	687a      	ldr	r2, [r7, #4]
 800dddc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	68ba      	ldr	r2, [r7, #8]
 800dde2:	2100      	movs	r1, #0
 800dde4:	68f8      	ldr	r0, [r7, #12]
 800dde6:	f000 fd35 	bl	800e854 <USBD_LL_Transmit>

  return USBD_OK;
 800ddea:	2300      	movs	r3, #0
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3710      	adds	r7, #16
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b084      	sub	sp, #16
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	60f8      	str	r0, [r7, #12]
 800ddfc:	60b9      	str	r1, [r7, #8]
 800ddfe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	68ba      	ldr	r2, [r7, #8]
 800de04:	2100      	movs	r1, #0
 800de06:	68f8      	ldr	r0, [r7, #12]
 800de08:	f000 fd24 	bl	800e854 <USBD_LL_Transmit>

  return USBD_OK;
 800de0c:	2300      	movs	r3, #0
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3710      	adds	r7, #16
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800de16:	b580      	push	{r7, lr}
 800de18:	b084      	sub	sp, #16
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	60f8      	str	r0, [r7, #12]
 800de1e:	60b9      	str	r1, [r7, #8]
 800de20:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2203      	movs	r2, #3
 800de26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	68ba      	ldr	r2, [r7, #8]
 800de3e:	2100      	movs	r1, #0
 800de40:	68f8      	ldr	r0, [r7, #12]
 800de42:	f000 fd3f 	bl	800e8c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800de46:	2300      	movs	r3, #0
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3710      	adds	r7, #16
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}

0800de50 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	60f8      	str	r0, [r7, #12]
 800de58:	60b9      	str	r1, [r7, #8]
 800de5a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	68ba      	ldr	r2, [r7, #8]
 800de60:	2100      	movs	r1, #0
 800de62:	68f8      	ldr	r0, [r7, #12]
 800de64:	f000 fd2e 	bl	800e8c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800de68:	2300      	movs	r3, #0
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3710      	adds	r7, #16
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800de72:	b580      	push	{r7, lr}
 800de74:	b082      	sub	sp, #8
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2204      	movs	r2, #4
 800de7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800de82:	2300      	movs	r3, #0
 800de84:	2200      	movs	r2, #0
 800de86:	2100      	movs	r1, #0
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f000 fce3 	bl	800e854 <USBD_LL_Transmit>

  return USBD_OK;
 800de8e:	2300      	movs	r3, #0
}
 800de90:	4618      	mov	r0, r3
 800de92:	3708      	adds	r7, #8
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}

0800de98 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2205      	movs	r2, #5
 800dea4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dea8:	2300      	movs	r3, #0
 800deaa:	2200      	movs	r2, #0
 800deac:	2100      	movs	r1, #0
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f000 fd08 	bl	800e8c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800deb4:	2300      	movs	r3, #0
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3708      	adds	r7, #8
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
	...

0800dec0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dec4:	2200      	movs	r2, #0
 800dec6:	4912      	ldr	r1, [pc, #72]	; (800df10 <MX_USB_DEVICE_Init+0x50>)
 800dec8:	4812      	ldr	r0, [pc, #72]	; (800df14 <MX_USB_DEVICE_Init+0x54>)
 800deca:	f7fe ff03 	bl	800ccd4 <USBD_Init>
 800dece:	4603      	mov	r3, r0
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d001      	beq.n	800ded8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ded4:	f7f5 fe6c 	bl	8003bb0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ded8:	490f      	ldr	r1, [pc, #60]	; (800df18 <MX_USB_DEVICE_Init+0x58>)
 800deda:	480e      	ldr	r0, [pc, #56]	; (800df14 <MX_USB_DEVICE_Init+0x54>)
 800dedc:	f7fe ff2a 	bl	800cd34 <USBD_RegisterClass>
 800dee0:	4603      	mov	r3, r0
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d001      	beq.n	800deea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dee6:	f7f5 fe63 	bl	8003bb0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800deea:	490c      	ldr	r1, [pc, #48]	; (800df1c <MX_USB_DEVICE_Init+0x5c>)
 800deec:	4809      	ldr	r0, [pc, #36]	; (800df14 <MX_USB_DEVICE_Init+0x54>)
 800deee:	f7fe fe4b 	bl	800cb88 <USBD_CDC_RegisterInterface>
 800def2:	4603      	mov	r3, r0
 800def4:	2b00      	cmp	r3, #0
 800def6:	d001      	beq.n	800defc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800def8:	f7f5 fe5a 	bl	8003bb0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800defc:	4805      	ldr	r0, [pc, #20]	; (800df14 <MX_USB_DEVICE_Init+0x54>)
 800defe:	f7fe ff40 	bl	800cd82 <USBD_Start>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d001      	beq.n	800df0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800df08:	f7f5 fe52 	bl	8003bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800df0c:	bf00      	nop
 800df0e:	bd80      	pop	{r7, pc}
 800df10:	20000150 	.word	0x20000150
 800df14:	200005c8 	.word	0x200005c8
 800df18:	20000038 	.word	0x20000038
 800df1c:	2000013c 	.word	0x2000013c

0800df20 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800df24:	2200      	movs	r2, #0
 800df26:	4905      	ldr	r1, [pc, #20]	; (800df3c <CDC_Init_FS+0x1c>)
 800df28:	4805      	ldr	r0, [pc, #20]	; (800df40 <CDC_Init_FS+0x20>)
 800df2a:	f7fe fe42 	bl	800cbb2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800df2e:	4905      	ldr	r1, [pc, #20]	; (800df44 <CDC_Init_FS+0x24>)
 800df30:	4803      	ldr	r0, [pc, #12]	; (800df40 <CDC_Init_FS+0x20>)
 800df32:	f7fe fe5c 	bl	800cbee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800df36:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800df38:	4618      	mov	r0, r3
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	20000994 	.word	0x20000994
 800df40:	200005c8 	.word	0x200005c8
 800df44:	20000898 	.word	0x20000898

0800df48 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800df48:	b480      	push	{r7}
 800df4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800df4c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800df4e:	4618      	mov	r0, r3
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr

0800df58 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800df58:	b480      	push	{r7}
 800df5a:	b083      	sub	sp, #12
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	4603      	mov	r3, r0
 800df60:	6039      	str	r1, [r7, #0]
 800df62:	71fb      	strb	r3, [r7, #7]
 800df64:	4613      	mov	r3, r2
 800df66:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800df68:	79fb      	ldrb	r3, [r7, #7]
 800df6a:	2b23      	cmp	r3, #35	; 0x23
 800df6c:	d84a      	bhi.n	800e004 <CDC_Control_FS+0xac>
 800df6e:	a201      	add	r2, pc, #4	; (adr r2, 800df74 <CDC_Control_FS+0x1c>)
 800df70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df74:	0800e005 	.word	0x0800e005
 800df78:	0800e005 	.word	0x0800e005
 800df7c:	0800e005 	.word	0x0800e005
 800df80:	0800e005 	.word	0x0800e005
 800df84:	0800e005 	.word	0x0800e005
 800df88:	0800e005 	.word	0x0800e005
 800df8c:	0800e005 	.word	0x0800e005
 800df90:	0800e005 	.word	0x0800e005
 800df94:	0800e005 	.word	0x0800e005
 800df98:	0800e005 	.word	0x0800e005
 800df9c:	0800e005 	.word	0x0800e005
 800dfa0:	0800e005 	.word	0x0800e005
 800dfa4:	0800e005 	.word	0x0800e005
 800dfa8:	0800e005 	.word	0x0800e005
 800dfac:	0800e005 	.word	0x0800e005
 800dfb0:	0800e005 	.word	0x0800e005
 800dfb4:	0800e005 	.word	0x0800e005
 800dfb8:	0800e005 	.word	0x0800e005
 800dfbc:	0800e005 	.word	0x0800e005
 800dfc0:	0800e005 	.word	0x0800e005
 800dfc4:	0800e005 	.word	0x0800e005
 800dfc8:	0800e005 	.word	0x0800e005
 800dfcc:	0800e005 	.word	0x0800e005
 800dfd0:	0800e005 	.word	0x0800e005
 800dfd4:	0800e005 	.word	0x0800e005
 800dfd8:	0800e005 	.word	0x0800e005
 800dfdc:	0800e005 	.word	0x0800e005
 800dfe0:	0800e005 	.word	0x0800e005
 800dfe4:	0800e005 	.word	0x0800e005
 800dfe8:	0800e005 	.word	0x0800e005
 800dfec:	0800e005 	.word	0x0800e005
 800dff0:	0800e005 	.word	0x0800e005
 800dff4:	0800e005 	.word	0x0800e005
 800dff8:	0800e005 	.word	0x0800e005
 800dffc:	0800e005 	.word	0x0800e005
 800e000:	0800e005 	.word	0x0800e005
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e004:	bf00      	nop
  }

  return (USBD_OK);
 800e006:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e008:	4618      	mov	r0, r3
 800e00a:	370c      	adds	r7, #12
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr

0800e014 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e01e:	6879      	ldr	r1, [r7, #4]
 800e020:	4808      	ldr	r0, [pc, #32]	; (800e044 <CDC_Receive_FS+0x30>)
 800e022:	f7fe fde4 	bl	800cbee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e026:	4807      	ldr	r0, [pc, #28]	; (800e044 <CDC_Receive_FS+0x30>)
 800e028:	f7fe fe2a 	bl	800cc80 <USBD_CDC_ReceivePacket>
  USB_CDC_RX_Interrupt(Buf, *Len);
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4619      	mov	r1, r3
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f7f5 fda6 	bl	8003b84 <USB_CDC_RX_Interrupt>
  return (USBD_OK);
 800e038:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3708      	adds	r7, #8
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	200005c8 	.word	0x200005c8

0800e048 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b084      	sub	sp, #16
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	460b      	mov	r3, r1
 800e052:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e054:	2300      	movs	r3, #0
 800e056:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e058:	4b0d      	ldr	r3, [pc, #52]	; (800e090 <CDC_Transmit_FS+0x48>)
 800e05a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e05e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e066:	2b00      	cmp	r3, #0
 800e068:	d001      	beq.n	800e06e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e06a:	2301      	movs	r3, #1
 800e06c:	e00b      	b.n	800e086 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e06e:	887b      	ldrh	r3, [r7, #2]
 800e070:	461a      	mov	r2, r3
 800e072:	6879      	ldr	r1, [r7, #4]
 800e074:	4806      	ldr	r0, [pc, #24]	; (800e090 <CDC_Transmit_FS+0x48>)
 800e076:	f7fe fd9c 	bl	800cbb2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e07a:	4805      	ldr	r0, [pc, #20]	; (800e090 <CDC_Transmit_FS+0x48>)
 800e07c:	f7fe fdd0 	bl	800cc20 <USBD_CDC_TransmitPacket>
 800e080:	4603      	mov	r3, r0
 800e082:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e084:	7bfb      	ldrb	r3, [r7, #15]
}
 800e086:	4618      	mov	r0, r3
 800e088:	3710      	adds	r7, #16
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	bf00      	nop
 800e090:	200005c8 	.word	0x200005c8

0800e094 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e094:	b480      	push	{r7}
 800e096:	b087      	sub	sp, #28
 800e098:	af00      	add	r7, sp, #0
 800e09a:	60f8      	str	r0, [r7, #12]
 800e09c:	60b9      	str	r1, [r7, #8]
 800e09e:	4613      	mov	r3, r2
 800e0a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e0a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	371c      	adds	r7, #28
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b4:	4770      	bx	lr
	...

0800e0b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b083      	sub	sp, #12
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	4603      	mov	r3, r0
 800e0c0:	6039      	str	r1, [r7, #0]
 800e0c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	2212      	movs	r2, #18
 800e0c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e0ca:	4b03      	ldr	r3, [pc, #12]	; (800e0d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	370c      	adds	r7, #12
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr
 800e0d8:	2000016c 	.word	0x2000016c

0800e0dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b083      	sub	sp, #12
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	6039      	str	r1, [r7, #0]
 800e0e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	2204      	movs	r2, #4
 800e0ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e0ee:	4b03      	ldr	r3, [pc, #12]	; (800e0fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	370c      	adds	r7, #12
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr
 800e0fc:	20000180 	.word	0x20000180

0800e100 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b082      	sub	sp, #8
 800e104:	af00      	add	r7, sp, #0
 800e106:	4603      	mov	r3, r0
 800e108:	6039      	str	r1, [r7, #0]
 800e10a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e10c:	79fb      	ldrb	r3, [r7, #7]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d105      	bne.n	800e11e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e112:	683a      	ldr	r2, [r7, #0]
 800e114:	4907      	ldr	r1, [pc, #28]	; (800e134 <USBD_FS_ProductStrDescriptor+0x34>)
 800e116:	4808      	ldr	r0, [pc, #32]	; (800e138 <USBD_FS_ProductStrDescriptor+0x38>)
 800e118:	f7ff fdf1 	bl	800dcfe <USBD_GetString>
 800e11c:	e004      	b.n	800e128 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e11e:	683a      	ldr	r2, [r7, #0]
 800e120:	4904      	ldr	r1, [pc, #16]	; (800e134 <USBD_FS_ProductStrDescriptor+0x34>)
 800e122:	4805      	ldr	r0, [pc, #20]	; (800e138 <USBD_FS_ProductStrDescriptor+0x38>)
 800e124:	f7ff fdeb 	bl	800dcfe <USBD_GetString>
  }
  return USBD_StrDesc;
 800e128:	4b02      	ldr	r3, [pc, #8]	; (800e134 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3708      	adds	r7, #8
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	20000a90 	.word	0x20000a90
 800e138:	0800ec88 	.word	0x0800ec88

0800e13c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b082      	sub	sp, #8
 800e140:	af00      	add	r7, sp, #0
 800e142:	4603      	mov	r3, r0
 800e144:	6039      	str	r1, [r7, #0]
 800e146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e148:	683a      	ldr	r2, [r7, #0]
 800e14a:	4904      	ldr	r1, [pc, #16]	; (800e15c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e14c:	4804      	ldr	r0, [pc, #16]	; (800e160 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e14e:	f7ff fdd6 	bl	800dcfe <USBD_GetString>
  return USBD_StrDesc;
 800e152:	4b02      	ldr	r3, [pc, #8]	; (800e15c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e154:	4618      	mov	r0, r3
 800e156:	3708      	adds	r7, #8
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}
 800e15c:	20000a90 	.word	0x20000a90
 800e160:	0800eca0 	.word	0x0800eca0

0800e164 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	4603      	mov	r3, r0
 800e16c:	6039      	str	r1, [r7, #0]
 800e16e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	221a      	movs	r2, #26
 800e174:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e176:	f000 f843 	bl	800e200 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e17a:	4b02      	ldr	r3, [pc, #8]	; (800e184 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3708      	adds	r7, #8
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	20000184 	.word	0x20000184

0800e188 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	4603      	mov	r3, r0
 800e190:	6039      	str	r1, [r7, #0]
 800e192:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e194:	79fb      	ldrb	r3, [r7, #7]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d105      	bne.n	800e1a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e19a:	683a      	ldr	r2, [r7, #0]
 800e19c:	4907      	ldr	r1, [pc, #28]	; (800e1bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800e19e:	4808      	ldr	r0, [pc, #32]	; (800e1c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e1a0:	f7ff fdad 	bl	800dcfe <USBD_GetString>
 800e1a4:	e004      	b.n	800e1b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e1a6:	683a      	ldr	r2, [r7, #0]
 800e1a8:	4904      	ldr	r1, [pc, #16]	; (800e1bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800e1aa:	4805      	ldr	r0, [pc, #20]	; (800e1c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e1ac:	f7ff fda7 	bl	800dcfe <USBD_GetString>
  }
  return USBD_StrDesc;
 800e1b0:	4b02      	ldr	r3, [pc, #8]	; (800e1bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3708      	adds	r7, #8
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
 800e1ba:	bf00      	nop
 800e1bc:	20000a90 	.word	0x20000a90
 800e1c0:	0800ecb4 	.word	0x0800ecb4

0800e1c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b082      	sub	sp, #8
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	6039      	str	r1, [r7, #0]
 800e1ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e1d0:	79fb      	ldrb	r3, [r7, #7]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d105      	bne.n	800e1e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e1d6:	683a      	ldr	r2, [r7, #0]
 800e1d8:	4907      	ldr	r1, [pc, #28]	; (800e1f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e1da:	4808      	ldr	r0, [pc, #32]	; (800e1fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e1dc:	f7ff fd8f 	bl	800dcfe <USBD_GetString>
 800e1e0:	e004      	b.n	800e1ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e1e2:	683a      	ldr	r2, [r7, #0]
 800e1e4:	4904      	ldr	r1, [pc, #16]	; (800e1f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e1e6:	4805      	ldr	r0, [pc, #20]	; (800e1fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e1e8:	f7ff fd89 	bl	800dcfe <USBD_GetString>
  }
  return USBD_StrDesc;
 800e1ec:	4b02      	ldr	r3, [pc, #8]	; (800e1f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3708      	adds	r7, #8
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	20000a90 	.word	0x20000a90
 800e1fc:	0800ecc0 	.word	0x0800ecc0

0800e200 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b084      	sub	sp, #16
 800e204:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e206:	4b0f      	ldr	r3, [pc, #60]	; (800e244 <Get_SerialNum+0x44>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e20c:	4b0e      	ldr	r3, [pc, #56]	; (800e248 <Get_SerialNum+0x48>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e212:	4b0e      	ldr	r3, [pc, #56]	; (800e24c <Get_SerialNum+0x4c>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e218:	68fa      	ldr	r2, [r7, #12]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	4413      	add	r3, r2
 800e21e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d009      	beq.n	800e23a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e226:	2208      	movs	r2, #8
 800e228:	4909      	ldr	r1, [pc, #36]	; (800e250 <Get_SerialNum+0x50>)
 800e22a:	68f8      	ldr	r0, [r7, #12]
 800e22c:	f000 f814 	bl	800e258 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e230:	2204      	movs	r2, #4
 800e232:	4908      	ldr	r1, [pc, #32]	; (800e254 <Get_SerialNum+0x54>)
 800e234:	68b8      	ldr	r0, [r7, #8]
 800e236:	f000 f80f 	bl	800e258 <IntToUnicode>
  }
}
 800e23a:	bf00      	nop
 800e23c:	3710      	adds	r7, #16
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
 800e242:	bf00      	nop
 800e244:	1fff7590 	.word	0x1fff7590
 800e248:	1fff7594 	.word	0x1fff7594
 800e24c:	1fff7598 	.word	0x1fff7598
 800e250:	20000186 	.word	0x20000186
 800e254:	20000196 	.word	0x20000196

0800e258 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e258:	b480      	push	{r7}
 800e25a:	b087      	sub	sp, #28
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	60f8      	str	r0, [r7, #12]
 800e260:	60b9      	str	r1, [r7, #8]
 800e262:	4613      	mov	r3, r2
 800e264:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e266:	2300      	movs	r3, #0
 800e268:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e26a:	2300      	movs	r3, #0
 800e26c:	75fb      	strb	r3, [r7, #23]
 800e26e:	e027      	b.n	800e2c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	0f1b      	lsrs	r3, r3, #28
 800e274:	2b09      	cmp	r3, #9
 800e276:	d80b      	bhi.n	800e290 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	0f1b      	lsrs	r3, r3, #28
 800e27c:	b2da      	uxtb	r2, r3
 800e27e:	7dfb      	ldrb	r3, [r7, #23]
 800e280:	005b      	lsls	r3, r3, #1
 800e282:	4619      	mov	r1, r3
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	440b      	add	r3, r1
 800e288:	3230      	adds	r2, #48	; 0x30
 800e28a:	b2d2      	uxtb	r2, r2
 800e28c:	701a      	strb	r2, [r3, #0]
 800e28e:	e00a      	b.n	800e2a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	0f1b      	lsrs	r3, r3, #28
 800e294:	b2da      	uxtb	r2, r3
 800e296:	7dfb      	ldrb	r3, [r7, #23]
 800e298:	005b      	lsls	r3, r3, #1
 800e29a:	4619      	mov	r1, r3
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	440b      	add	r3, r1
 800e2a0:	3237      	adds	r2, #55	; 0x37
 800e2a2:	b2d2      	uxtb	r2, r2
 800e2a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	011b      	lsls	r3, r3, #4
 800e2aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e2ac:	7dfb      	ldrb	r3, [r7, #23]
 800e2ae:	005b      	lsls	r3, r3, #1
 800e2b0:	3301      	adds	r3, #1
 800e2b2:	68ba      	ldr	r2, [r7, #8]
 800e2b4:	4413      	add	r3, r2
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e2ba:	7dfb      	ldrb	r3, [r7, #23]
 800e2bc:	3301      	adds	r3, #1
 800e2be:	75fb      	strb	r3, [r7, #23]
 800e2c0:	7dfa      	ldrb	r2, [r7, #23]
 800e2c2:	79fb      	ldrb	r3, [r7, #7]
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d3d3      	bcc.n	800e270 <IntToUnicode+0x18>
  }
}
 800e2c8:	bf00      	nop
 800e2ca:	bf00      	nop
 800e2cc:	371c      	adds	r7, #28
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d4:	4770      	bx	lr
	...

0800e2d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b09c      	sub	sp, #112	; 0x70
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e2e0:	f107 0310 	add.w	r3, r7, #16
 800e2e4:	2260      	movs	r2, #96	; 0x60
 800e2e6:	2100      	movs	r1, #0
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f000 fbbf 	bl	800ea6c <memset>
  if(pcdHandle->Instance==USB)
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	4a15      	ldr	r2, [pc, #84]	; (800e348 <HAL_PCD_MspInit+0x70>)
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	d122      	bne.n	800e33e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e2f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e2fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e2fe:	2300      	movs	r3, #0
 800e300:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e302:	f107 0310 	add.w	r3, r7, #16
 800e306:	4618      	mov	r0, r3
 800e308:	f7fa fae6 	bl	80088d8 <HAL_RCCEx_PeriphCLKConfig>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d001      	beq.n	800e316 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800e312:	f7f5 fc4d 	bl	8003bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e316:	4b0d      	ldr	r3, [pc, #52]	; (800e34c <HAL_PCD_MspInit+0x74>)
 800e318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e31a:	4a0c      	ldr	r2, [pc, #48]	; (800e34c <HAL_PCD_MspInit+0x74>)
 800e31c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e320:	6593      	str	r3, [r2, #88]	; 0x58
 800e322:	4b0a      	ldr	r3, [pc, #40]	; (800e34c <HAL_PCD_MspInit+0x74>)
 800e324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e326:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e32a:	60fb      	str	r3, [r7, #12]
 800e32c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800e32e:	2200      	movs	r2, #0
 800e330:	2100      	movs	r1, #0
 800e332:	2043      	movs	r0, #67	; 0x43
 800e334:	f7f6 fec3 	bl	80050be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800e338:	2043      	movs	r0, #67	; 0x43
 800e33a:	f7f6 fedc 	bl	80050f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e33e:	bf00      	nop
 800e340:	3770      	adds	r7, #112	; 0x70
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	40006800 	.word	0x40006800
 800e34c:	40021000 	.word	0x40021000

0800e350 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b082      	sub	sp, #8
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800e364:	4619      	mov	r1, r3
 800e366:	4610      	mov	r0, r2
 800e368:	f7fe fd56 	bl	800ce18 <USBD_LL_SetupStage>
}
 800e36c:	bf00      	nop
 800e36e:	3708      	adds	r7, #8
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}

0800e374 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	460b      	mov	r3, r1
 800e37e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800e386:	78fa      	ldrb	r2, [r7, #3]
 800e388:	6879      	ldr	r1, [r7, #4]
 800e38a:	4613      	mov	r3, r2
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	4413      	add	r3, r2
 800e390:	00db      	lsls	r3, r3, #3
 800e392:	440b      	add	r3, r1
 800e394:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800e398:	681a      	ldr	r2, [r3, #0]
 800e39a:	78fb      	ldrb	r3, [r7, #3]
 800e39c:	4619      	mov	r1, r3
 800e39e:	f7fe fd90 	bl	800cec2 <USBD_LL_DataOutStage>
}
 800e3a2:	bf00      	nop
 800e3a4:	3708      	adds	r7, #8
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}

0800e3aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3aa:	b580      	push	{r7, lr}
 800e3ac:	b082      	sub	sp, #8
 800e3ae:	af00      	add	r7, sp, #0
 800e3b0:	6078      	str	r0, [r7, #4]
 800e3b2:	460b      	mov	r3, r1
 800e3b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800e3bc:	78fa      	ldrb	r2, [r7, #3]
 800e3be:	6879      	ldr	r1, [r7, #4]
 800e3c0:	4613      	mov	r3, r2
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	4413      	add	r3, r2
 800e3c6:	00db      	lsls	r3, r3, #3
 800e3c8:	440b      	add	r3, r1
 800e3ca:	3340      	adds	r3, #64	; 0x40
 800e3cc:	681a      	ldr	r2, [r3, #0]
 800e3ce:	78fb      	ldrb	r3, [r7, #3]
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	f7fe fdd9 	bl	800cf88 <USBD_LL_DataInStage>
}
 800e3d6:	bf00      	nop
 800e3d8:	3708      	adds	r7, #8
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}

0800e3de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3de:	b580      	push	{r7, lr}
 800e3e0:	b082      	sub	sp, #8
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f7fe feed 	bl	800d1cc <USBD_LL_SOF>
}
 800e3f2:	bf00      	nop
 800e3f4:	3708      	adds	r7, #8
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}

0800e3fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3fa:	b580      	push	{r7, lr}
 800e3fc:	b084      	sub	sp, #16
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e402:	2301      	movs	r3, #1
 800e404:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	689b      	ldr	r3, [r3, #8]
 800e40a:	2b02      	cmp	r3, #2
 800e40c:	d001      	beq.n	800e412 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e40e:	f7f5 fbcf 	bl	8003bb0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e418:	7bfa      	ldrb	r2, [r7, #15]
 800e41a:	4611      	mov	r1, r2
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7fe fe97 	bl	800d150 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e428:	4618      	mov	r0, r3
 800e42a:	f7fe fe43 	bl	800d0b4 <USBD_LL_Reset>
}
 800e42e:	bf00      	nop
 800e430:	3710      	adds	r7, #16
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
	...

0800e438 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e446:	4618      	mov	r0, r3
 800e448:	f7fe fe92 	bl	800d170 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	699b      	ldr	r3, [r3, #24]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d005      	beq.n	800e460 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e454:	4b04      	ldr	r3, [pc, #16]	; (800e468 <HAL_PCD_SuspendCallback+0x30>)
 800e456:	691b      	ldr	r3, [r3, #16]
 800e458:	4a03      	ldr	r2, [pc, #12]	; (800e468 <HAL_PCD_SuspendCallback+0x30>)
 800e45a:	f043 0306 	orr.w	r3, r3, #6
 800e45e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e460:	bf00      	nop
 800e462:	3708      	adds	r7, #8
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	e000ed00 	.word	0xe000ed00

0800e46c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	699b      	ldr	r3, [r3, #24]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d007      	beq.n	800e48c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e47c:	4b08      	ldr	r3, [pc, #32]	; (800e4a0 <HAL_PCD_ResumeCallback+0x34>)
 800e47e:	691b      	ldr	r3, [r3, #16]
 800e480:	4a07      	ldr	r2, [pc, #28]	; (800e4a0 <HAL_PCD_ResumeCallback+0x34>)
 800e482:	f023 0306 	bic.w	r3, r3, #6
 800e486:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e488:	f000 fa80 	bl	800e98c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800e492:	4618      	mov	r0, r3
 800e494:	f7fe fe82 	bl	800d19c <USBD_LL_Resume>
}
 800e498:	bf00      	nop
 800e49a:	3708      	adds	r7, #8
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	e000ed00 	.word	0xe000ed00

0800e4a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800e4ac:	f7f9 fc04 	bl	8007cb8 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e4b0:	4a2b      	ldr	r2, [pc, #172]	; (800e560 <USBD_LL_Init+0xbc>)
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	4a29      	ldr	r2, [pc, #164]	; (800e560 <USBD_LL_Init+0xbc>)
 800e4bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800e4c0:	4b27      	ldr	r3, [pc, #156]	; (800e560 <USBD_LL_Init+0xbc>)
 800e4c2:	4a28      	ldr	r2, [pc, #160]	; (800e564 <USBD_LL_Init+0xc0>)
 800e4c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e4c6:	4b26      	ldr	r3, [pc, #152]	; (800e560 <USBD_LL_Init+0xbc>)
 800e4c8:	2208      	movs	r2, #8
 800e4ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e4cc:	4b24      	ldr	r3, [pc, #144]	; (800e560 <USBD_LL_Init+0xbc>)
 800e4ce:	2202      	movs	r2, #2
 800e4d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e4d2:	4b23      	ldr	r3, [pc, #140]	; (800e560 <USBD_LL_Init+0xbc>)
 800e4d4:	2202      	movs	r2, #2
 800e4d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e4d8:	4b21      	ldr	r3, [pc, #132]	; (800e560 <USBD_LL_Init+0xbc>)
 800e4da:	2200      	movs	r2, #0
 800e4dc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e4de:	4b20      	ldr	r3, [pc, #128]	; (800e560 <USBD_LL_Init+0xbc>)
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e4e4:	4b1e      	ldr	r3, [pc, #120]	; (800e560 <USBD_LL_Init+0xbc>)
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e4ea:	4b1d      	ldr	r3, [pc, #116]	; (800e560 <USBD_LL_Init+0xbc>)
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e4f0:	481b      	ldr	r0, [pc, #108]	; (800e560 <USBD_LL_Init+0xbc>)
 800e4f2:	f7f7 fde5 	bl	80060c0 <HAL_PCD_Init>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d001      	beq.n	800e500 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800e4fc:	f7f5 fb58 	bl	8003bb0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e506:	2318      	movs	r3, #24
 800e508:	2200      	movs	r2, #0
 800e50a:	2100      	movs	r1, #0
 800e50c:	f7f9 faf5 	bl	8007afa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e516:	2358      	movs	r3, #88	; 0x58
 800e518:	2200      	movs	r2, #0
 800e51a:	2180      	movs	r1, #128	; 0x80
 800e51c:	f7f9 faed 	bl	8007afa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e526:	23c0      	movs	r3, #192	; 0xc0
 800e528:	2200      	movs	r2, #0
 800e52a:	2181      	movs	r1, #129	; 0x81
 800e52c:	f7f9 fae5 	bl	8007afa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e536:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e53a:	2200      	movs	r2, #0
 800e53c:	2101      	movs	r1, #1
 800e53e:	f7f9 fadc 	bl	8007afa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e54c:	2200      	movs	r2, #0
 800e54e:	2182      	movs	r1, #130	; 0x82
 800e550:	f7f9 fad3 	bl	8007afa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e554:	2300      	movs	r3, #0
}
 800e556:	4618      	mov	r0, r3
 800e558:	3708      	adds	r7, #8
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop
 800e560:	20000c90 	.word	0x20000c90
 800e564:	40006800 	.word	0x40006800

0800e568 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b084      	sub	sp, #16
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e570:	2300      	movs	r3, #0
 800e572:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e574:	2300      	movs	r3, #0
 800e576:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e57e:	4618      	mov	r0, r3
 800e580:	f7f7 feb5 	bl	80062ee <HAL_PCD_Start>
 800e584:	4603      	mov	r3, r0
 800e586:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e588:	7bbb      	ldrb	r3, [r7, #14]
 800e58a:	2b03      	cmp	r3, #3
 800e58c:	d816      	bhi.n	800e5bc <USBD_LL_Start+0x54>
 800e58e:	a201      	add	r2, pc, #4	; (adr r2, 800e594 <USBD_LL_Start+0x2c>)
 800e590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e594:	0800e5a5 	.word	0x0800e5a5
 800e598:	0800e5ab 	.word	0x0800e5ab
 800e59c:	0800e5b1 	.word	0x0800e5b1
 800e5a0:	0800e5b7 	.word	0x0800e5b7
    case HAL_OK :
      usb_status = USBD_OK;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	73fb      	strb	r3, [r7, #15]
    break;
 800e5a8:	e00b      	b.n	800e5c2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e5aa:	2303      	movs	r3, #3
 800e5ac:	73fb      	strb	r3, [r7, #15]
    break;
 800e5ae:	e008      	b.n	800e5c2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	73fb      	strb	r3, [r7, #15]
    break;
 800e5b4:	e005      	b.n	800e5c2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e5b6:	2303      	movs	r3, #3
 800e5b8:	73fb      	strb	r3, [r7, #15]
    break;
 800e5ba:	e002      	b.n	800e5c2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800e5bc:	2303      	movs	r3, #3
 800e5be:	73fb      	strb	r3, [r7, #15]
    break;
 800e5c0:	bf00      	nop
  }
  return usb_status;
 800e5c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3710      	adds	r7, #16
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	4608      	mov	r0, r1
 800e5d6:	4611      	mov	r1, r2
 800e5d8:	461a      	mov	r2, r3
 800e5da:	4603      	mov	r3, r0
 800e5dc:	70fb      	strb	r3, [r7, #3]
 800e5de:	460b      	mov	r3, r1
 800e5e0:	70bb      	strb	r3, [r7, #2]
 800e5e2:	4613      	mov	r3, r2
 800e5e4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e5f4:	78bb      	ldrb	r3, [r7, #2]
 800e5f6:	883a      	ldrh	r2, [r7, #0]
 800e5f8:	78f9      	ldrb	r1, [r7, #3]
 800e5fa:	f7f7 ffe6 	bl	80065ca <HAL_PCD_EP_Open>
 800e5fe:	4603      	mov	r3, r0
 800e600:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e602:	7bbb      	ldrb	r3, [r7, #14]
 800e604:	2b03      	cmp	r3, #3
 800e606:	d817      	bhi.n	800e638 <USBD_LL_OpenEP+0x6c>
 800e608:	a201      	add	r2, pc, #4	; (adr r2, 800e610 <USBD_LL_OpenEP+0x44>)
 800e60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e60e:	bf00      	nop
 800e610:	0800e621 	.word	0x0800e621
 800e614:	0800e627 	.word	0x0800e627
 800e618:	0800e62d 	.word	0x0800e62d
 800e61c:	0800e633 	.word	0x0800e633
    case HAL_OK :
      usb_status = USBD_OK;
 800e620:	2300      	movs	r3, #0
 800e622:	73fb      	strb	r3, [r7, #15]
    break;
 800e624:	e00b      	b.n	800e63e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e626:	2303      	movs	r3, #3
 800e628:	73fb      	strb	r3, [r7, #15]
    break;
 800e62a:	e008      	b.n	800e63e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e62c:	2301      	movs	r3, #1
 800e62e:	73fb      	strb	r3, [r7, #15]
    break;
 800e630:	e005      	b.n	800e63e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e632:	2303      	movs	r3, #3
 800e634:	73fb      	strb	r3, [r7, #15]
    break;
 800e636:	e002      	b.n	800e63e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800e638:	2303      	movs	r3, #3
 800e63a:	73fb      	strb	r3, [r7, #15]
    break;
 800e63c:	bf00      	nop
  }
  return usb_status;
 800e63e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e640:	4618      	mov	r0, r3
 800e642:	3710      	adds	r7, #16
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}

0800e648 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	460b      	mov	r3, r1
 800e652:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e654:	2300      	movs	r3, #0
 800e656:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e658:	2300      	movs	r3, #0
 800e65a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e662:	78fa      	ldrb	r2, [r7, #3]
 800e664:	4611      	mov	r1, r2
 800e666:	4618      	mov	r0, r3
 800e668:	f7f8 f817 	bl	800669a <HAL_PCD_EP_Close>
 800e66c:	4603      	mov	r3, r0
 800e66e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e670:	7bbb      	ldrb	r3, [r7, #14]
 800e672:	2b03      	cmp	r3, #3
 800e674:	d816      	bhi.n	800e6a4 <USBD_LL_CloseEP+0x5c>
 800e676:	a201      	add	r2, pc, #4	; (adr r2, 800e67c <USBD_LL_CloseEP+0x34>)
 800e678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e67c:	0800e68d 	.word	0x0800e68d
 800e680:	0800e693 	.word	0x0800e693
 800e684:	0800e699 	.word	0x0800e699
 800e688:	0800e69f 	.word	0x0800e69f
    case HAL_OK :
      usb_status = USBD_OK;
 800e68c:	2300      	movs	r3, #0
 800e68e:	73fb      	strb	r3, [r7, #15]
    break;
 800e690:	e00b      	b.n	800e6aa <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e692:	2303      	movs	r3, #3
 800e694:	73fb      	strb	r3, [r7, #15]
    break;
 800e696:	e008      	b.n	800e6aa <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e698:	2301      	movs	r3, #1
 800e69a:	73fb      	strb	r3, [r7, #15]
    break;
 800e69c:	e005      	b.n	800e6aa <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e69e:	2303      	movs	r3, #3
 800e6a0:	73fb      	strb	r3, [r7, #15]
    break;
 800e6a2:	e002      	b.n	800e6aa <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e6a4:	2303      	movs	r3, #3
 800e6a6:	73fb      	strb	r3, [r7, #15]
    break;
 800e6a8:	bf00      	nop
  }
  return usb_status;
 800e6aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3710      	adds	r7, #16
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	460b      	mov	r3, r1
 800e6be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e6ce:	78fa      	ldrb	r2, [r7, #3]
 800e6d0:	4611      	mov	r1, r2
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7f8 f8c5 	bl	8006862 <HAL_PCD_EP_SetStall>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e6dc:	7bbb      	ldrb	r3, [r7, #14]
 800e6de:	2b03      	cmp	r3, #3
 800e6e0:	d816      	bhi.n	800e710 <USBD_LL_StallEP+0x5c>
 800e6e2:	a201      	add	r2, pc, #4	; (adr r2, 800e6e8 <USBD_LL_StallEP+0x34>)
 800e6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6e8:	0800e6f9 	.word	0x0800e6f9
 800e6ec:	0800e6ff 	.word	0x0800e6ff
 800e6f0:	0800e705 	.word	0x0800e705
 800e6f4:	0800e70b 	.word	0x0800e70b
    case HAL_OK :
      usb_status = USBD_OK;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	73fb      	strb	r3, [r7, #15]
    break;
 800e6fc:	e00b      	b.n	800e716 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e6fe:	2303      	movs	r3, #3
 800e700:	73fb      	strb	r3, [r7, #15]
    break;
 800e702:	e008      	b.n	800e716 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e704:	2301      	movs	r3, #1
 800e706:	73fb      	strb	r3, [r7, #15]
    break;
 800e708:	e005      	b.n	800e716 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e70a:	2303      	movs	r3, #3
 800e70c:	73fb      	strb	r3, [r7, #15]
    break;
 800e70e:	e002      	b.n	800e716 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e710:	2303      	movs	r3, #3
 800e712:	73fb      	strb	r3, [r7, #15]
    break;
 800e714:	bf00      	nop
  }
  return usb_status;
 800e716:	7bfb      	ldrb	r3, [r7, #15]
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3710      	adds	r7, #16
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	460b      	mov	r3, r1
 800e72a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e72c:	2300      	movs	r3, #0
 800e72e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e730:	2300      	movs	r3, #0
 800e732:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e73a:	78fa      	ldrb	r2, [r7, #3]
 800e73c:	4611      	mov	r1, r2
 800e73e:	4618      	mov	r0, r3
 800e740:	f7f8 f8f1 	bl	8006926 <HAL_PCD_EP_ClrStall>
 800e744:	4603      	mov	r3, r0
 800e746:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e748:	7bbb      	ldrb	r3, [r7, #14]
 800e74a:	2b03      	cmp	r3, #3
 800e74c:	d816      	bhi.n	800e77c <USBD_LL_ClearStallEP+0x5c>
 800e74e:	a201      	add	r2, pc, #4	; (adr r2, 800e754 <USBD_LL_ClearStallEP+0x34>)
 800e750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e754:	0800e765 	.word	0x0800e765
 800e758:	0800e76b 	.word	0x0800e76b
 800e75c:	0800e771 	.word	0x0800e771
 800e760:	0800e777 	.word	0x0800e777
    case HAL_OK :
      usb_status = USBD_OK;
 800e764:	2300      	movs	r3, #0
 800e766:	73fb      	strb	r3, [r7, #15]
    break;
 800e768:	e00b      	b.n	800e782 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e76a:	2303      	movs	r3, #3
 800e76c:	73fb      	strb	r3, [r7, #15]
    break;
 800e76e:	e008      	b.n	800e782 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e770:	2301      	movs	r3, #1
 800e772:	73fb      	strb	r3, [r7, #15]
    break;
 800e774:	e005      	b.n	800e782 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e776:	2303      	movs	r3, #3
 800e778:	73fb      	strb	r3, [r7, #15]
    break;
 800e77a:	e002      	b.n	800e782 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e77c:	2303      	movs	r3, #3
 800e77e:	73fb      	strb	r3, [r7, #15]
    break;
 800e780:	bf00      	nop
  }
  return usb_status;
 800e782:	7bfb      	ldrb	r3, [r7, #15]
}
 800e784:	4618      	mov	r0, r3
 800e786:	3710      	adds	r7, #16
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}

0800e78c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e78c:	b480      	push	{r7}
 800e78e:	b085      	sub	sp, #20
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	460b      	mov	r3, r1
 800e796:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e79e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e7a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	da0c      	bge.n	800e7c2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e7a8:	78fb      	ldrb	r3, [r7, #3]
 800e7aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7ae:	68f9      	ldr	r1, [r7, #12]
 800e7b0:	1c5a      	adds	r2, r3, #1
 800e7b2:	4613      	mov	r3, r2
 800e7b4:	009b      	lsls	r3, r3, #2
 800e7b6:	4413      	add	r3, r2
 800e7b8:	00db      	lsls	r3, r3, #3
 800e7ba:	440b      	add	r3, r1
 800e7bc:	3306      	adds	r3, #6
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	e00b      	b.n	800e7da <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e7c2:	78fb      	ldrb	r3, [r7, #3]
 800e7c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7c8:	68f9      	ldr	r1, [r7, #12]
 800e7ca:	4613      	mov	r3, r2
 800e7cc:	009b      	lsls	r3, r3, #2
 800e7ce:	4413      	add	r3, r2
 800e7d0:	00db      	lsls	r3, r3, #3
 800e7d2:	440b      	add	r3, r1
 800e7d4:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800e7d8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3714      	adds	r7, #20
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr
	...

0800e7e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	460b      	mov	r3, r1
 800e7f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e802:	78fa      	ldrb	r2, [r7, #3]
 800e804:	4611      	mov	r1, r2
 800e806:	4618      	mov	r0, r3
 800e808:	f7f7 feba 	bl	8006580 <HAL_PCD_SetAddress>
 800e80c:	4603      	mov	r3, r0
 800e80e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e810:	7bbb      	ldrb	r3, [r7, #14]
 800e812:	2b03      	cmp	r3, #3
 800e814:	d816      	bhi.n	800e844 <USBD_LL_SetUSBAddress+0x5c>
 800e816:	a201      	add	r2, pc, #4	; (adr r2, 800e81c <USBD_LL_SetUSBAddress+0x34>)
 800e818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e81c:	0800e82d 	.word	0x0800e82d
 800e820:	0800e833 	.word	0x0800e833
 800e824:	0800e839 	.word	0x0800e839
 800e828:	0800e83f 	.word	0x0800e83f
    case HAL_OK :
      usb_status = USBD_OK;
 800e82c:	2300      	movs	r3, #0
 800e82e:	73fb      	strb	r3, [r7, #15]
    break;
 800e830:	e00b      	b.n	800e84a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e832:	2303      	movs	r3, #3
 800e834:	73fb      	strb	r3, [r7, #15]
    break;
 800e836:	e008      	b.n	800e84a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e838:	2301      	movs	r3, #1
 800e83a:	73fb      	strb	r3, [r7, #15]
    break;
 800e83c:	e005      	b.n	800e84a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e83e:	2303      	movs	r3, #3
 800e840:	73fb      	strb	r3, [r7, #15]
    break;
 800e842:	e002      	b.n	800e84a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800e844:	2303      	movs	r3, #3
 800e846:	73fb      	strb	r3, [r7, #15]
    break;
 800e848:	bf00      	nop
  }
  return usb_status;
 800e84a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e84c:	4618      	mov	r0, r3
 800e84e:	3710      	adds	r7, #16
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}

0800e854 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b086      	sub	sp, #24
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	607a      	str	r2, [r7, #4]
 800e85e:	603b      	str	r3, [r7, #0]
 800e860:	460b      	mov	r3, r1
 800e862:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e864:	2300      	movs	r3, #0
 800e866:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e868:	2300      	movs	r3, #0
 800e86a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e872:	7af9      	ldrb	r1, [r7, #11]
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	f7f7 ffaf 	bl	80067da <HAL_PCD_EP_Transmit>
 800e87c:	4603      	mov	r3, r0
 800e87e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e880:	7dbb      	ldrb	r3, [r7, #22]
 800e882:	2b03      	cmp	r3, #3
 800e884:	d816      	bhi.n	800e8b4 <USBD_LL_Transmit+0x60>
 800e886:	a201      	add	r2, pc, #4	; (adr r2, 800e88c <USBD_LL_Transmit+0x38>)
 800e888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e88c:	0800e89d 	.word	0x0800e89d
 800e890:	0800e8a3 	.word	0x0800e8a3
 800e894:	0800e8a9 	.word	0x0800e8a9
 800e898:	0800e8af 	.word	0x0800e8af
    case HAL_OK :
      usb_status = USBD_OK;
 800e89c:	2300      	movs	r3, #0
 800e89e:	75fb      	strb	r3, [r7, #23]
    break;
 800e8a0:	e00b      	b.n	800e8ba <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e8a2:	2303      	movs	r3, #3
 800e8a4:	75fb      	strb	r3, [r7, #23]
    break;
 800e8a6:	e008      	b.n	800e8ba <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	75fb      	strb	r3, [r7, #23]
    break;
 800e8ac:	e005      	b.n	800e8ba <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e8ae:	2303      	movs	r3, #3
 800e8b0:	75fb      	strb	r3, [r7, #23]
    break;
 800e8b2:	e002      	b.n	800e8ba <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800e8b4:	2303      	movs	r3, #3
 800e8b6:	75fb      	strb	r3, [r7, #23]
    break;
 800e8b8:	bf00      	nop
  }
  return usb_status;
 800e8ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3718      	adds	r7, #24
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}

0800e8c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b086      	sub	sp, #24
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	60f8      	str	r0, [r7, #12]
 800e8cc:	607a      	str	r2, [r7, #4]
 800e8ce:	603b      	str	r3, [r7, #0]
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e8e2:	7af9      	ldrb	r1, [r7, #11]
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	687a      	ldr	r2, [r7, #4]
 800e8e8:	f7f7 ff21 	bl	800672e <HAL_PCD_EP_Receive>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e8f0:	7dbb      	ldrb	r3, [r7, #22]
 800e8f2:	2b03      	cmp	r3, #3
 800e8f4:	d816      	bhi.n	800e924 <USBD_LL_PrepareReceive+0x60>
 800e8f6:	a201      	add	r2, pc, #4	; (adr r2, 800e8fc <USBD_LL_PrepareReceive+0x38>)
 800e8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8fc:	0800e90d 	.word	0x0800e90d
 800e900:	0800e913 	.word	0x0800e913
 800e904:	0800e919 	.word	0x0800e919
 800e908:	0800e91f 	.word	0x0800e91f
    case HAL_OK :
      usb_status = USBD_OK;
 800e90c:	2300      	movs	r3, #0
 800e90e:	75fb      	strb	r3, [r7, #23]
    break;
 800e910:	e00b      	b.n	800e92a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e912:	2303      	movs	r3, #3
 800e914:	75fb      	strb	r3, [r7, #23]
    break;
 800e916:	e008      	b.n	800e92a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e918:	2301      	movs	r3, #1
 800e91a:	75fb      	strb	r3, [r7, #23]
    break;
 800e91c:	e005      	b.n	800e92a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e91e:	2303      	movs	r3, #3
 800e920:	75fb      	strb	r3, [r7, #23]
    break;
 800e922:	e002      	b.n	800e92a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800e924:	2303      	movs	r3, #3
 800e926:	75fb      	strb	r3, [r7, #23]
    break;
 800e928:	bf00      	nop
  }
  return usb_status;
 800e92a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3718      	adds	r7, #24
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	460b      	mov	r3, r1
 800e93e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e946:	78fa      	ldrb	r2, [r7, #3]
 800e948:	4611      	mov	r1, r2
 800e94a:	4618      	mov	r0, r3
 800e94c:	f7f7 ff2d 	bl	80067aa <HAL_PCD_EP_GetRxCount>
 800e950:	4603      	mov	r3, r0
}
 800e952:	4618      	mov	r0, r3
 800e954:	3708      	adds	r7, #8
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
	...

0800e95c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e95c:	b480      	push	{r7}
 800e95e:	b083      	sub	sp, #12
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e964:	4b03      	ldr	r3, [pc, #12]	; (800e974 <USBD_static_malloc+0x18>)
}
 800e966:	4618      	mov	r0, r3
 800e968:	370c      	adds	r7, #12
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr
 800e972:	bf00      	nop
 800e974:	20000f8c 	.word	0x20000f8c

0800e978 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e978:	b480      	push	{r7}
 800e97a:	b083      	sub	sp, #12
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]

}
 800e980:	bf00      	nop
 800e982:	370c      	adds	r7, #12
 800e984:	46bd      	mov	sp, r7
 800e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98a:	4770      	bx	lr

0800e98c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e98c:	b480      	push	{r7}
 800e98e:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800e990:	bf00      	nop
 800e992:	46bd      	mov	sp, r7
 800e994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e998:	4770      	bx	lr

0800e99a <_Znwj>:
 800e99a:	2801      	cmp	r0, #1
 800e99c:	bf38      	it	cc
 800e99e:	2001      	movcc	r0, #1
 800e9a0:	b510      	push	{r4, lr}
 800e9a2:	4604      	mov	r4, r0
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	f000 f859 	bl	800ea5c <malloc>
 800e9aa:	b930      	cbnz	r0, 800e9ba <_Znwj+0x20>
 800e9ac:	f000 f81c 	bl	800e9e8 <_ZSt15get_new_handlerv>
 800e9b0:	b908      	cbnz	r0, 800e9b6 <_Znwj+0x1c>
 800e9b2:	f000 f821 	bl	800e9f8 <abort>
 800e9b6:	4780      	blx	r0
 800e9b8:	e7f4      	b.n	800e9a4 <_Znwj+0xa>
 800e9ba:	bd10      	pop	{r4, pc}

0800e9bc <__cxa_pure_virtual>:
 800e9bc:	b508      	push	{r3, lr}
 800e9be:	f000 f80d 	bl	800e9dc <_ZSt9terminatev>

0800e9c2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e9c2:	b508      	push	{r3, lr}
 800e9c4:	4780      	blx	r0
 800e9c6:	f000 f817 	bl	800e9f8 <abort>
	...

0800e9cc <_ZSt13get_terminatev>:
 800e9cc:	4b02      	ldr	r3, [pc, #8]	; (800e9d8 <_ZSt13get_terminatev+0xc>)
 800e9ce:	6818      	ldr	r0, [r3, #0]
 800e9d0:	f3bf 8f5b 	dmb	ish
 800e9d4:	4770      	bx	lr
 800e9d6:	bf00      	nop
 800e9d8:	200001a0 	.word	0x200001a0

0800e9dc <_ZSt9terminatev>:
 800e9dc:	b508      	push	{r3, lr}
 800e9de:	f7ff fff5 	bl	800e9cc <_ZSt13get_terminatev>
 800e9e2:	f7ff ffee 	bl	800e9c2 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800e9e8 <_ZSt15get_new_handlerv>:
 800e9e8:	4b02      	ldr	r3, [pc, #8]	; (800e9f4 <_ZSt15get_new_handlerv+0xc>)
 800e9ea:	6818      	ldr	r0, [r3, #0]
 800e9ec:	f3bf 8f5b 	dmb	ish
 800e9f0:	4770      	bx	lr
 800e9f2:	bf00      	nop
 800e9f4:	200011ac 	.word	0x200011ac

0800e9f8 <abort>:
 800e9f8:	b508      	push	{r3, lr}
 800e9fa:	2006      	movs	r0, #6
 800e9fc:	f000 f90a 	bl	800ec14 <raise>
 800ea00:	2001      	movs	r0, #1
 800ea02:	f7f5 fa13 	bl	8003e2c <_exit>
	...

0800ea08 <__errno>:
 800ea08:	4b01      	ldr	r3, [pc, #4]	; (800ea10 <__errno+0x8>)
 800ea0a:	6818      	ldr	r0, [r3, #0]
 800ea0c:	4770      	bx	lr
 800ea0e:	bf00      	nop
 800ea10:	200001a4 	.word	0x200001a4

0800ea14 <__libc_init_array>:
 800ea14:	b570      	push	{r4, r5, r6, lr}
 800ea16:	4d0d      	ldr	r5, [pc, #52]	; (800ea4c <__libc_init_array+0x38>)
 800ea18:	4c0d      	ldr	r4, [pc, #52]	; (800ea50 <__libc_init_array+0x3c>)
 800ea1a:	1b64      	subs	r4, r4, r5
 800ea1c:	10a4      	asrs	r4, r4, #2
 800ea1e:	2600      	movs	r6, #0
 800ea20:	42a6      	cmp	r6, r4
 800ea22:	d109      	bne.n	800ea38 <__libc_init_array+0x24>
 800ea24:	4d0b      	ldr	r5, [pc, #44]	; (800ea54 <__libc_init_array+0x40>)
 800ea26:	4c0c      	ldr	r4, [pc, #48]	; (800ea58 <__libc_init_array+0x44>)
 800ea28:	f000 f91e 	bl	800ec68 <_init>
 800ea2c:	1b64      	subs	r4, r4, r5
 800ea2e:	10a4      	asrs	r4, r4, #2
 800ea30:	2600      	movs	r6, #0
 800ea32:	42a6      	cmp	r6, r4
 800ea34:	d105      	bne.n	800ea42 <__libc_init_array+0x2e>
 800ea36:	bd70      	pop	{r4, r5, r6, pc}
 800ea38:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea3c:	4798      	blx	r3
 800ea3e:	3601      	adds	r6, #1
 800ea40:	e7ee      	b.n	800ea20 <__libc_init_array+0xc>
 800ea42:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea46:	4798      	blx	r3
 800ea48:	3601      	adds	r6, #1
 800ea4a:	e7f2      	b.n	800ea32 <__libc_init_array+0x1e>
 800ea4c:	0800ed74 	.word	0x0800ed74
 800ea50:	0800ed74 	.word	0x0800ed74
 800ea54:	0800ed74 	.word	0x0800ed74
 800ea58:	0800ed7c 	.word	0x0800ed7c

0800ea5c <malloc>:
 800ea5c:	4b02      	ldr	r3, [pc, #8]	; (800ea68 <malloc+0xc>)
 800ea5e:	4601      	mov	r1, r0
 800ea60:	6818      	ldr	r0, [r3, #0]
 800ea62:	f000 b82b 	b.w	800eabc <_malloc_r>
 800ea66:	bf00      	nop
 800ea68:	200001a4 	.word	0x200001a4

0800ea6c <memset>:
 800ea6c:	4402      	add	r2, r0
 800ea6e:	4603      	mov	r3, r0
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d100      	bne.n	800ea76 <memset+0xa>
 800ea74:	4770      	bx	lr
 800ea76:	f803 1b01 	strb.w	r1, [r3], #1
 800ea7a:	e7f9      	b.n	800ea70 <memset+0x4>

0800ea7c <sbrk_aligned>:
 800ea7c:	b570      	push	{r4, r5, r6, lr}
 800ea7e:	4e0e      	ldr	r6, [pc, #56]	; (800eab8 <sbrk_aligned+0x3c>)
 800ea80:	460c      	mov	r4, r1
 800ea82:	6831      	ldr	r1, [r6, #0]
 800ea84:	4605      	mov	r5, r0
 800ea86:	b911      	cbnz	r1, 800ea8e <sbrk_aligned+0x12>
 800ea88:	f000 f88c 	bl	800eba4 <_sbrk_r>
 800ea8c:	6030      	str	r0, [r6, #0]
 800ea8e:	4621      	mov	r1, r4
 800ea90:	4628      	mov	r0, r5
 800ea92:	f000 f887 	bl	800eba4 <_sbrk_r>
 800ea96:	1c43      	adds	r3, r0, #1
 800ea98:	d00a      	beq.n	800eab0 <sbrk_aligned+0x34>
 800ea9a:	1cc4      	adds	r4, r0, #3
 800ea9c:	f024 0403 	bic.w	r4, r4, #3
 800eaa0:	42a0      	cmp	r0, r4
 800eaa2:	d007      	beq.n	800eab4 <sbrk_aligned+0x38>
 800eaa4:	1a21      	subs	r1, r4, r0
 800eaa6:	4628      	mov	r0, r5
 800eaa8:	f000 f87c 	bl	800eba4 <_sbrk_r>
 800eaac:	3001      	adds	r0, #1
 800eaae:	d101      	bne.n	800eab4 <sbrk_aligned+0x38>
 800eab0:	f04f 34ff 	mov.w	r4, #4294967295
 800eab4:	4620      	mov	r0, r4
 800eab6:	bd70      	pop	{r4, r5, r6, pc}
 800eab8:	200011b4 	.word	0x200011b4

0800eabc <_malloc_r>:
 800eabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eac0:	1ccd      	adds	r5, r1, #3
 800eac2:	f025 0503 	bic.w	r5, r5, #3
 800eac6:	3508      	adds	r5, #8
 800eac8:	2d0c      	cmp	r5, #12
 800eaca:	bf38      	it	cc
 800eacc:	250c      	movcc	r5, #12
 800eace:	2d00      	cmp	r5, #0
 800ead0:	4607      	mov	r7, r0
 800ead2:	db01      	blt.n	800ead8 <_malloc_r+0x1c>
 800ead4:	42a9      	cmp	r1, r5
 800ead6:	d905      	bls.n	800eae4 <_malloc_r+0x28>
 800ead8:	230c      	movs	r3, #12
 800eada:	603b      	str	r3, [r7, #0]
 800eadc:	2600      	movs	r6, #0
 800eade:	4630      	mov	r0, r6
 800eae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eae4:	4e2e      	ldr	r6, [pc, #184]	; (800eba0 <_malloc_r+0xe4>)
 800eae6:	f000 f8b1 	bl	800ec4c <__malloc_lock>
 800eaea:	6833      	ldr	r3, [r6, #0]
 800eaec:	461c      	mov	r4, r3
 800eaee:	bb34      	cbnz	r4, 800eb3e <_malloc_r+0x82>
 800eaf0:	4629      	mov	r1, r5
 800eaf2:	4638      	mov	r0, r7
 800eaf4:	f7ff ffc2 	bl	800ea7c <sbrk_aligned>
 800eaf8:	1c43      	adds	r3, r0, #1
 800eafa:	4604      	mov	r4, r0
 800eafc:	d14d      	bne.n	800eb9a <_malloc_r+0xde>
 800eafe:	6834      	ldr	r4, [r6, #0]
 800eb00:	4626      	mov	r6, r4
 800eb02:	2e00      	cmp	r6, #0
 800eb04:	d140      	bne.n	800eb88 <_malloc_r+0xcc>
 800eb06:	6823      	ldr	r3, [r4, #0]
 800eb08:	4631      	mov	r1, r6
 800eb0a:	4638      	mov	r0, r7
 800eb0c:	eb04 0803 	add.w	r8, r4, r3
 800eb10:	f000 f848 	bl	800eba4 <_sbrk_r>
 800eb14:	4580      	cmp	r8, r0
 800eb16:	d13a      	bne.n	800eb8e <_malloc_r+0xd2>
 800eb18:	6821      	ldr	r1, [r4, #0]
 800eb1a:	3503      	adds	r5, #3
 800eb1c:	1a6d      	subs	r5, r5, r1
 800eb1e:	f025 0503 	bic.w	r5, r5, #3
 800eb22:	3508      	adds	r5, #8
 800eb24:	2d0c      	cmp	r5, #12
 800eb26:	bf38      	it	cc
 800eb28:	250c      	movcc	r5, #12
 800eb2a:	4629      	mov	r1, r5
 800eb2c:	4638      	mov	r0, r7
 800eb2e:	f7ff ffa5 	bl	800ea7c <sbrk_aligned>
 800eb32:	3001      	adds	r0, #1
 800eb34:	d02b      	beq.n	800eb8e <_malloc_r+0xd2>
 800eb36:	6823      	ldr	r3, [r4, #0]
 800eb38:	442b      	add	r3, r5
 800eb3a:	6023      	str	r3, [r4, #0]
 800eb3c:	e00e      	b.n	800eb5c <_malloc_r+0xa0>
 800eb3e:	6822      	ldr	r2, [r4, #0]
 800eb40:	1b52      	subs	r2, r2, r5
 800eb42:	d41e      	bmi.n	800eb82 <_malloc_r+0xc6>
 800eb44:	2a0b      	cmp	r2, #11
 800eb46:	d916      	bls.n	800eb76 <_malloc_r+0xba>
 800eb48:	1961      	adds	r1, r4, r5
 800eb4a:	42a3      	cmp	r3, r4
 800eb4c:	6025      	str	r5, [r4, #0]
 800eb4e:	bf18      	it	ne
 800eb50:	6059      	strne	r1, [r3, #4]
 800eb52:	6863      	ldr	r3, [r4, #4]
 800eb54:	bf08      	it	eq
 800eb56:	6031      	streq	r1, [r6, #0]
 800eb58:	5162      	str	r2, [r4, r5]
 800eb5a:	604b      	str	r3, [r1, #4]
 800eb5c:	4638      	mov	r0, r7
 800eb5e:	f104 060b 	add.w	r6, r4, #11
 800eb62:	f000 f879 	bl	800ec58 <__malloc_unlock>
 800eb66:	f026 0607 	bic.w	r6, r6, #7
 800eb6a:	1d23      	adds	r3, r4, #4
 800eb6c:	1af2      	subs	r2, r6, r3
 800eb6e:	d0b6      	beq.n	800eade <_malloc_r+0x22>
 800eb70:	1b9b      	subs	r3, r3, r6
 800eb72:	50a3      	str	r3, [r4, r2]
 800eb74:	e7b3      	b.n	800eade <_malloc_r+0x22>
 800eb76:	6862      	ldr	r2, [r4, #4]
 800eb78:	42a3      	cmp	r3, r4
 800eb7a:	bf0c      	ite	eq
 800eb7c:	6032      	streq	r2, [r6, #0]
 800eb7e:	605a      	strne	r2, [r3, #4]
 800eb80:	e7ec      	b.n	800eb5c <_malloc_r+0xa0>
 800eb82:	4623      	mov	r3, r4
 800eb84:	6864      	ldr	r4, [r4, #4]
 800eb86:	e7b2      	b.n	800eaee <_malloc_r+0x32>
 800eb88:	4634      	mov	r4, r6
 800eb8a:	6876      	ldr	r6, [r6, #4]
 800eb8c:	e7b9      	b.n	800eb02 <_malloc_r+0x46>
 800eb8e:	230c      	movs	r3, #12
 800eb90:	603b      	str	r3, [r7, #0]
 800eb92:	4638      	mov	r0, r7
 800eb94:	f000 f860 	bl	800ec58 <__malloc_unlock>
 800eb98:	e7a1      	b.n	800eade <_malloc_r+0x22>
 800eb9a:	6025      	str	r5, [r4, #0]
 800eb9c:	e7de      	b.n	800eb5c <_malloc_r+0xa0>
 800eb9e:	bf00      	nop
 800eba0:	200011b0 	.word	0x200011b0

0800eba4 <_sbrk_r>:
 800eba4:	b538      	push	{r3, r4, r5, lr}
 800eba6:	4d06      	ldr	r5, [pc, #24]	; (800ebc0 <_sbrk_r+0x1c>)
 800eba8:	2300      	movs	r3, #0
 800ebaa:	4604      	mov	r4, r0
 800ebac:	4608      	mov	r0, r1
 800ebae:	602b      	str	r3, [r5, #0]
 800ebb0:	f7f5 f946 	bl	8003e40 <_sbrk>
 800ebb4:	1c43      	adds	r3, r0, #1
 800ebb6:	d102      	bne.n	800ebbe <_sbrk_r+0x1a>
 800ebb8:	682b      	ldr	r3, [r5, #0]
 800ebba:	b103      	cbz	r3, 800ebbe <_sbrk_r+0x1a>
 800ebbc:	6023      	str	r3, [r4, #0]
 800ebbe:	bd38      	pop	{r3, r4, r5, pc}
 800ebc0:	200011b8 	.word	0x200011b8

0800ebc4 <_raise_r>:
 800ebc4:	291f      	cmp	r1, #31
 800ebc6:	b538      	push	{r3, r4, r5, lr}
 800ebc8:	4604      	mov	r4, r0
 800ebca:	460d      	mov	r5, r1
 800ebcc:	d904      	bls.n	800ebd8 <_raise_r+0x14>
 800ebce:	2316      	movs	r3, #22
 800ebd0:	6003      	str	r3, [r0, #0]
 800ebd2:	f04f 30ff 	mov.w	r0, #4294967295
 800ebd6:	bd38      	pop	{r3, r4, r5, pc}
 800ebd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ebda:	b112      	cbz	r2, 800ebe2 <_raise_r+0x1e>
 800ebdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ebe0:	b94b      	cbnz	r3, 800ebf6 <_raise_r+0x32>
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	f000 f830 	bl	800ec48 <_getpid_r>
 800ebe8:	462a      	mov	r2, r5
 800ebea:	4601      	mov	r1, r0
 800ebec:	4620      	mov	r0, r4
 800ebee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebf2:	f000 b817 	b.w	800ec24 <_kill_r>
 800ebf6:	2b01      	cmp	r3, #1
 800ebf8:	d00a      	beq.n	800ec10 <_raise_r+0x4c>
 800ebfa:	1c59      	adds	r1, r3, #1
 800ebfc:	d103      	bne.n	800ec06 <_raise_r+0x42>
 800ebfe:	2316      	movs	r3, #22
 800ec00:	6003      	str	r3, [r0, #0]
 800ec02:	2001      	movs	r0, #1
 800ec04:	e7e7      	b.n	800ebd6 <_raise_r+0x12>
 800ec06:	2400      	movs	r4, #0
 800ec08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ec0c:	4628      	mov	r0, r5
 800ec0e:	4798      	blx	r3
 800ec10:	2000      	movs	r0, #0
 800ec12:	e7e0      	b.n	800ebd6 <_raise_r+0x12>

0800ec14 <raise>:
 800ec14:	4b02      	ldr	r3, [pc, #8]	; (800ec20 <raise+0xc>)
 800ec16:	4601      	mov	r1, r0
 800ec18:	6818      	ldr	r0, [r3, #0]
 800ec1a:	f7ff bfd3 	b.w	800ebc4 <_raise_r>
 800ec1e:	bf00      	nop
 800ec20:	200001a4 	.word	0x200001a4

0800ec24 <_kill_r>:
 800ec24:	b538      	push	{r3, r4, r5, lr}
 800ec26:	4d07      	ldr	r5, [pc, #28]	; (800ec44 <_kill_r+0x20>)
 800ec28:	2300      	movs	r3, #0
 800ec2a:	4604      	mov	r4, r0
 800ec2c:	4608      	mov	r0, r1
 800ec2e:	4611      	mov	r1, r2
 800ec30:	602b      	str	r3, [r5, #0]
 800ec32:	f7f5 f8eb 	bl	8003e0c <_kill>
 800ec36:	1c43      	adds	r3, r0, #1
 800ec38:	d102      	bne.n	800ec40 <_kill_r+0x1c>
 800ec3a:	682b      	ldr	r3, [r5, #0]
 800ec3c:	b103      	cbz	r3, 800ec40 <_kill_r+0x1c>
 800ec3e:	6023      	str	r3, [r4, #0]
 800ec40:	bd38      	pop	{r3, r4, r5, pc}
 800ec42:	bf00      	nop
 800ec44:	200011b8 	.word	0x200011b8

0800ec48 <_getpid_r>:
 800ec48:	f7f5 b8d8 	b.w	8003dfc <_getpid>

0800ec4c <__malloc_lock>:
 800ec4c:	4801      	ldr	r0, [pc, #4]	; (800ec54 <__malloc_lock+0x8>)
 800ec4e:	f000 b809 	b.w	800ec64 <__retarget_lock_acquire_recursive>
 800ec52:	bf00      	nop
 800ec54:	200011bc 	.word	0x200011bc

0800ec58 <__malloc_unlock>:
 800ec58:	4801      	ldr	r0, [pc, #4]	; (800ec60 <__malloc_unlock+0x8>)
 800ec5a:	f000 b804 	b.w	800ec66 <__retarget_lock_release_recursive>
 800ec5e:	bf00      	nop
 800ec60:	200011bc 	.word	0x200011bc

0800ec64 <__retarget_lock_acquire_recursive>:
 800ec64:	4770      	bx	lr

0800ec66 <__retarget_lock_release_recursive>:
 800ec66:	4770      	bx	lr

0800ec68 <_init>:
 800ec68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec6a:	bf00      	nop
 800ec6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec6e:	bc08      	pop	{r3}
 800ec70:	469e      	mov	lr, r3
 800ec72:	4770      	bx	lr

0800ec74 <_fini>:
 800ec74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec76:	bf00      	nop
 800ec78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec7a:	bc08      	pop	{r3}
 800ec7c:	469e      	mov	lr, r3
 800ec7e:	4770      	bx	lr
