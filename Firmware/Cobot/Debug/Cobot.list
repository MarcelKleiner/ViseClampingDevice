
Cobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc78  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800de04  0800de04  0001de04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dea8  0800dea8  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800dea8  0800dea8  0001dea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800deb0  0800deb0  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800deb0  0800deb0  0001deb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800deb8  0800deb8  0001deb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800debc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000106c  20000190  0800e04c  00020190  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200011fc  0800e04c  000211fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037fa5  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007118  00000000  00000000  00058165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ff8  00000000  00000000  0005f280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cc0  00000000  00000000  00061278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002efce  00000000  00000000  00062f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c069  00000000  00000000  00091f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f22a1  00000000  00000000  000bdf6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b0210  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008260  00000000  00000000  001b0264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000190 	.word	0x20000190
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800ddec 	.word	0x0800ddec

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000194 	.word	0x20000194
 80001c8:	0800ddec 	.word	0x0800ddec

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <_ZN11TaskHandlerC1Ev>:


#include "stdint.h"


class TaskHandler{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2200      	movs	r2, #0
 80004d0:	701a      	strb	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2200      	movs	r2, #0
 80004d6:	705a      	strb	r2, [r3, #1]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2200      	movs	r2, #0
 80004dc:	709a      	strb	r2, [r3, #2]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2200      	movs	r2, #0
 80004e2:	70da      	strb	r2, [r3, #3]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2200      	movs	r2, #0
 80004e8:	711a      	strb	r2, [r3, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2201      	movs	r2, #1
 80004ee:	715a      	strb	r2, [r3, #5]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2201      	movs	r2, #1
 80004f4:	719a      	strb	r2, [r3, #6]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2201      	movs	r2, #1
 80004fa:	71da      	strb	r2, [r3, #7]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2201      	movs	r2, #1
 8000500:	721a      	strb	r2, [r3, #8]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2201      	movs	r2, #1
 8000506:	725a      	strb	r2, [r3, #9]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4618      	mov	r0, r3
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <_ZN13DriveSettingsC1Ev>:
#define SRC_SETTINGS_DRIVESETTINGS_H_

#include "stdint.h"
#include "main.h"

class DriveSettings{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	221f      	movs	r2, #31
 8000522:	701a      	strb	r2, [r3, #0]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	805a      	strh	r2, [r3, #2]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2200      	movs	r2, #0
 800052e:	809a      	strh	r2, [r3, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2200      	movs	r2, #0
 8000534:	80da      	strh	r2, [r3, #6]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	811a      	strh	r2, [r3, #8]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000542:	815a      	strh	r2, [r3, #10]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2214      	movs	r2, #20
 8000548:	819a      	strh	r2, [r3, #12]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2264      	movs	r2, #100	; 0x64
 800054e:	81da      	strh	r2, [r3, #14]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8000556:	821a      	strh	r2, [r3, #16]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800055e:	825a      	strh	r2, [r3, #18]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2232      	movs	r2, #50	; 0x32
 8000564:	829a      	strh	r2, [r3, #20]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2264      	movs	r2, #100	; 0x64
 800056a:	82da      	strh	r2, [r3, #22]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000572:	831a      	strh	r2, [r3, #24]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4618      	mov	r0, r3
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <_ZN7AppMainC1Ev>:
#include "AppMain.h"
#include "../Tools/Delay.h"

extern TIM_HandleTypeDef htim7;

AppMain::AppMain()
 8000582:	b5b0      	push	{r4, r5, r7, lr}
 8000584:	b084      	sub	sp, #16
 8000586:	af02      	add	r7, sp, #8
 8000588:	6078      	str	r0, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4618      	mov	r0, r3
 800058e:	f001 fa51 	bl	8001a34 <_ZN10RFM95_LoRaC1Ev>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3320      	adds	r3, #32
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3320      	adds	r3, #32
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff ff8e 	bl	80004c4 <_ZN11TaskHandlerC1Ev>
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80005ae:	2301      	movs	r3, #1
 80005b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005b4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005b8:	f000 ff32 	bl	8001420 <_ZN3LEDC1EP12GPIO_TypeDeftb>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80005c2:	2301      	movs	r3, #1
 80005c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005c8:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005cc:	f000 ff28 	bl	8001420 <_ZN3LEDC1EP12GPIO_TypeDeftb>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	333c      	adds	r3, #60	; 0x3c
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
 80005e0:	615a      	str	r2, [r3, #20]
 80005e2:	831a      	strh	r2, [r3, #24]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	333c      	adds	r3, #60	; 0x3c
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff ff94 	bl	8000516 <_ZN13DriveSettingsC1Ev>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3356      	adds	r3, #86	; 0x56
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 f84e 	bl	8002694 <_ZN11DriveStatusC1Ev>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	335e      	adds	r3, #94	; 0x5e
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 ff35 	bl	800246c <_ZN12DriveCommandC1Ev>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f103 0256 	add.w	r2, r3, #86	; 0x56
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	335e      	adds	r3, #94	; 0x5e
 8000618:	f000 f8da 	bl	80007d0 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f503 7088 	add.w	r0, r3, #272	; 0x110
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f103 0156 	add.w	r1, r3, #86	; 0x56
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800062e:	687d      	ldr	r5, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3368      	adds	r3, #104	; 0x68
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	325e      	adds	r2, #94	; 0x5e
 8000638:	9201      	str	r2, [sp, #4]
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	462b      	mov	r3, r5
 800063e:	4622      	mov	r2, r4
 8000640:	f000 ff36 	bl	80014b0 <_ZN13CommunicationC1EP11DriveStatusP13DriveSettingsP10RFM95_LoRaP14Digitll_IN_OUTP12DriveCommand>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f503 7098 	add.w	r0, r3, #304	; 0x130
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f103 0256 	add.w	r2, r3, #86	; 0x56
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	335e      	adds	r3, #94	; 0x5e
 800065a:	f002 fabe 	bl	8002bda <_ZN6USBComC1EP13DriveSettingsP11DriveStatusP12DriveCommand>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	3356      	adds	r3, #86	; 0x56
 800066e:	461a      	mov	r2, r3
 8000670:	f000 f864 	bl	800073c <_ZN5FlashC1EP13DriveSettingsP11DriveStatus>
{

}
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000680 <_ZN7AppMain7StartupEv>:

void AppMain::Startup()
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	Storage.ReadFlash();
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800068e:	4618      	mov	r0, r3
 8000690:	f000 f86a 	bl	8000768 <_ZN5Flash9ReadFlashEv>


	HAL_TIM_Base_Start_IT(&htim7);
 8000694:	480c      	ldr	r0, [pc, #48]	; (80006c8 <_ZN7AppMain7StartupEv+0x48>)
 8000696:	f008 fe33 	bl	8009300 <HAL_TIM_Base_Start_IT>

	LED_Green.OFF();
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	332c      	adds	r3, #44	; 0x2c
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fed9 	bl	8001456 <_ZN3LED3OFFEv>
	LED_Red.OFF();
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3334      	adds	r3, #52	; 0x34
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fed4 	bl	8001456 <_ZN3LED3OFFEv>

	if (rfm95.InitRFM())
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fd65 	bl	8002180 <_ZN10RFM95_LoRa7InitRFMEv>
	{

	}

	Delay::DWT_Init();
 80006b6:	f002 f97f 	bl	80029b8 <_ZN5Delay8DWT_InitEv>


	Main();
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f000 f806 	bl	80006cc <_ZN7AppMain4MainEv>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200007e8 	.word	0x200007e8

080006cc <_ZN7AppMain4MainEv>:

void AppMain::Main()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

	while (1)
	{

		if (taskStatus.isErrorTask())
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3320      	adds	r3, #32
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 f91c 	bl	8002916 <_ZN11TaskHandler11isErrorTaskEv>
		{

		}

		if (taskStatus.isLEDUpdateTask())
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3320      	adds	r3, #32
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 f94d 	bl	8002982 <_ZN11TaskHandler15isLEDUpdateTaskEv>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d004      	beq.n	80006f8 <_ZN7AppMain4MainEv+0x2c>
		{
			LED_Green.Toggle();
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	332c      	adds	r3, #44	; 0x2c
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 fecc 	bl	8001490 <_ZN3LED6ToggleEv>
		}

		if (taskStatus.isComTask())
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3320      	adds	r3, #32
 80006fc:	4618      	mov	r0, r3
 80006fe:	f002 f8ef 	bl	80028e0 <_ZN11TaskHandler9isComTaskEv>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d00b      	beq.n	8000720 <_ZN7AppMain4MainEv+0x54>
		{
			com.UpdateCom();
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fef1 	bl	80014f6 <_ZN13Communication9UpdateComEv>
			com.ReadData();
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800071a:	4618      	mov	r0, r3
 800071c:	f001 f8eb 	bl	80018f6 <_ZN13Communication8ReadDataEv>
		}

		if (taskStatus.isIoUpdateTask())
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3320      	adds	r3, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f002 f911 	bl	800294c <_ZN11TaskHandler14isIoUpdateTaskEv>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0d1      	beq.n	80006d4 <_ZN7AppMain4MainEv+0x8>
		{
			DigitalInOut.Read();
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3368      	adds	r3, #104	; 0x68
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f8db 	bl	80008f0 <_ZN14Digitll_IN_OUT4ReadEv>
		if (taskStatus.isErrorTask())
 800073a:	e7cb      	b.n	80006d4 <_ZN7AppMain4MainEv+0x8>

0800073c <_ZN5FlashC1EP13DriveSettingsP11DriveStatus>:
 */

#include "Flash.h"
#include "stm32l4xx_hal.h"

Flash::Flash(DriveSettings *driveSettings, DriveStatus *driveStatus)
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
{
	this->driveSettings = driveSettings;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	601a      	str	r2, [r3, #0]
	this->driveStatus = driveStatus;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	605a      	str	r2, [r3, #4]
	this->factoryResetFlag = false;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	2200      	movs	r2, #0
 8000758:	721a      	strb	r2, [r3, #8]
}
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	4618      	mov	r0, r3
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <_ZN5Flash9ReadFlashEv>:
 *
 * @param None
 * @return None
 */
void Flash::ReadFlash()
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < UFLASH_SIZE; i++)
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b13      	cmp	r3, #19
 8000778:	dc12      	bgt.n	80007a0 <_ZN5Flash9ReadFlashEv+0x38>
	{
		tmpFlashArray[i] = *(uint64_t*) (FLASH_STAR_PAGE_ADDR + 64 * i);
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8000780:	f503 637e 	add.w	r3, r3, #4064	; 0xfe0
 8000784:	019b      	lsls	r3, r3, #6
 8000786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	68f9      	ldr	r1, [r7, #12]
 800078e:	3102      	adds	r1, #2
 8000790:	00c9      	lsls	r1, r1, #3
 8000792:	4401      	add	r1, r0
 8000794:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < UFLASH_SIZE; i++)
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3301      	adds	r3, #1
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	e7e9      	b.n	8000774 <_ZN5Flash9ReadFlashEv+0xc>
	}
	//write flash to config and status file
}
 80007a0:	bf00      	nop
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <_ZN5QueueC1Ev>:

#include "stdint.h"

#define BUFFER_SIZE 10

class Queue{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2200      	movs	r2, #0
 80007be:	705a      	strb	r2, [r3, #1]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand>:
 *      Author: marce
 */

#include "DI.h"

Digitll_IN_OUT::Digitll_IN_OUT(DriveSettings *driveSettings, DriveStatus *driveStatus,DriveCommand *driveCommand)
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af02      	add	r7, sp, #8
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	68f8      	ldr	r0, [r7, #12]
 80007e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ee:	493e      	ldr	r1, [pc, #248]	; (80008e8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x118>)
 80007f0:	f000 fdbf 	bl	8001372 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f103 0010 	add.w	r0, r3, #16
 80007fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	4b3a      	ldr	r3, [pc, #232]	; (80008ec <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 8000802:	2204      	movs	r2, #4
 8000804:	4939      	ldr	r1, [pc, #228]	; (80008ec <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 8000806:	f000 fdb4 	bl	8001372 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	f103 0020 	add.w	r0, r3, #32
 8000810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x118>)
 8000818:	2280      	movs	r2, #128	; 0x80
 800081a:	4933      	ldr	r1, [pc, #204]	; (80008e8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x118>)
 800081c:	f000 fda9 	bl	8001372 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000826:	2301      	movs	r3, #1
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	4b30      	ldr	r3, [pc, #192]	; (80008ec <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 800082c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000830:	492e      	ldr	r1, [pc, #184]	; (80008ec <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 8000832:	f000 fd9e 	bl	8001372 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800083c:	2340      	movs	r3, #64	; 0x40
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x118>)
 8000842:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000846:	4929      	ldr	r1, [pc, #164]	; (80008ec <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 8000848:	f000 fd93 	bl	8001372 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8000852:	2302      	movs	r3, #2
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	4b25      	ldr	r3, [pc, #148]	; (80008ec <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 8000858:	2210      	movs	r2, #16
 800085a:	4923      	ldr	r1, [pc, #140]	; (80008e8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x118>)
 800085c:	f000 fd89 	bl	8001372 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8000866:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 800086e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000872:	491e      	ldr	r1, [pc, #120]	; (80008ec <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x11c>)
 8000874:	f000 fd7d 	bl	8001372 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800087e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x118>)
 8000886:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800088a:	4917      	ldr	r1, [pc, #92]	; (80008e8 <_ZN14Digitll_IN_OUTC1EP13DriveSettingsP11DriveStatusP12DriveCommand+0x118>)
 800088c:	f000 fd71 	bl	8001372 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2200      	movs	r2, #0
 800089c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2200      	movs	r2, #0
 80008a4:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	338a      	adds	r3, #138	; 0x8a
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	338a      	adds	r3, #138	; 0x8a
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff77 	bl	80007ac <_ZN5QueueC1Ev>
{
	this->driveSettings = driveSettings;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	68ba      	ldr	r2, [r7, #8]
 80008c2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	this->driveStatus = driveStatus;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	this->driveCommand = driveCommand;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	683a      	ldr	r2, [r7, #0]
 80008d2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	timeoutCounter = 0;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	2200      	movs	r2, #0
 80008da:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85

}
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	4618      	mov	r0, r3
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	48000800 	.word	0x48000800
 80008ec:	48000400 	.word	0x48000400

080008f0 <_ZN14Digitll_IN_OUT4ReadEv>:

void Digitll_IN_OUT::Read()
{
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

	configeWriteStatus = CONFIG_WRITE;
 80008f8:	2102      	movs	r1, #2
 80008fa:	485d      	ldr	r0, [pc, #372]	; (8000a70 <_ZN14Digitll_IN_OUT4ReadEv+0x180>)
 80008fc:	f004 ff94 	bl	8005828 <HAL_GPIO_ReadPin>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	bf0c      	ite	eq
 8000906:	2301      	moveq	r3, #1
 8000908:	2300      	movne	r3, #0
 800090a:	b2da      	uxtb	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	if (configeWriteStatus && !previousConfigeWriteStatus)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000918:	2b00      	cmp	r3, #0
 800091a:	f000 8084 	beq.w	8000a26 <_ZN14Digitll_IN_OUT4ReadEv+0x136>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000924:	f083 0301 	eor.w	r3, r3, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d07b      	beq.n	8000a26 <_ZN14Digitll_IN_OUT4ReadEv+0x136>
	{
		//read digial config
		uint8_t data = ((uint8_t) CONFIG_ADDR_7 << 7)
 800092e:	2104      	movs	r1, #4
 8000930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000934:	f004 ff78 	bl	8005828 <HAL_GPIO_ReadPin>
 8000938:	4603      	mov	r3, r0
 800093a:	2b80      	cmp	r3, #128	; 0x80
 800093c:	bf0c      	ite	eq
 800093e:	2301      	moveq	r3, #1
 8000940:	2300      	movne	r3, #0
 8000942:	b2db      	uxtb	r3, r3
 8000944:	461c      	mov	r4, r3
				+ (((uint8_t) CONFIG_ADDR_6) << 6)
 8000946:	2102      	movs	r1, #2
 8000948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094c:	f004 ff6c 	bl	8005828 <HAL_GPIO_ReadPin>
 8000950:	4603      	mov	r3, r0
 8000952:	2b01      	cmp	r3, #1
 8000954:	d101      	bne.n	800095a <_ZN14Digitll_IN_OUT4ReadEv+0x6a>
 8000956:	2340      	movs	r3, #64	; 0x40
 8000958:	e000      	b.n	800095c <_ZN14Digitll_IN_OUT4ReadEv+0x6c>
 800095a:	2300      	movs	r3, #0
 800095c:	4423      	add	r3, r4
 800095e:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_5) << 5)
 8000960:	2101      	movs	r1, #1
 8000962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000966:	f004 ff5f 	bl	8005828 <HAL_GPIO_ReadPin>
 800096a:	4603      	mov	r3, r0
 800096c:	2b01      	cmp	r3, #1
 800096e:	d101      	bne.n	8000974 <_ZN14Digitll_IN_OUT4ReadEv+0x84>
 8000970:	2320      	movs	r3, #32
 8000972:	e000      	b.n	8000976 <_ZN14Digitll_IN_OUT4ReadEv+0x86>
 8000974:	2300      	movs	r3, #0
 8000976:	4423      	add	r3, r4
 8000978:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_4) << 4)
 800097a:	2108      	movs	r1, #8
 800097c:	483d      	ldr	r0, [pc, #244]	; (8000a74 <_ZN14Digitll_IN_OUT4ReadEv+0x184>)
 800097e:	f004 ff53 	bl	8005828 <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	2b01      	cmp	r3, #1
 8000986:	d101      	bne.n	800098c <_ZN14Digitll_IN_OUT4ReadEv+0x9c>
 8000988:	2310      	movs	r3, #16
 800098a:	e000      	b.n	800098e <_ZN14Digitll_IN_OUT4ReadEv+0x9e>
 800098c:	2300      	movs	r3, #0
 800098e:	4423      	add	r3, r4
 8000990:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_3) << 3)
 8000992:	2104      	movs	r1, #4
 8000994:	4837      	ldr	r0, [pc, #220]	; (8000a74 <_ZN14Digitll_IN_OUT4ReadEv+0x184>)
 8000996:	f004 ff47 	bl	8005828 <HAL_GPIO_ReadPin>
 800099a:	4603      	mov	r3, r0
 800099c:	2b01      	cmp	r3, #1
 800099e:	d101      	bne.n	80009a4 <_ZN14Digitll_IN_OUT4ReadEv+0xb4>
 80009a0:	2308      	movs	r3, #8
 80009a2:	e000      	b.n	80009a6 <_ZN14Digitll_IN_OUT4ReadEv+0xb6>
 80009a4:	2300      	movs	r3, #0
 80009a6:	4423      	add	r3, r4
 80009a8:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_2) << 2)
 80009aa:	2102      	movs	r1, #2
 80009ac:	4831      	ldr	r0, [pc, #196]	; (8000a74 <_ZN14Digitll_IN_OUT4ReadEv+0x184>)
 80009ae:	f004 ff3b 	bl	8005828 <HAL_GPIO_ReadPin>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d101      	bne.n	80009bc <_ZN14Digitll_IN_OUT4ReadEv+0xcc>
 80009b8:	2304      	movs	r3, #4
 80009ba:	e000      	b.n	80009be <_ZN14Digitll_IN_OUT4ReadEv+0xce>
 80009bc:	2300      	movs	r3, #0
 80009be:	4423      	add	r3, r4
 80009c0:	b2dc      	uxtb	r4, r3
				+ (((uint8_t) CONFIG_ADDR_1) << 1);
 80009c2:	2101      	movs	r1, #1
 80009c4:	482b      	ldr	r0, [pc, #172]	; (8000a74 <_ZN14Digitll_IN_OUT4ReadEv+0x184>)
 80009c6:	f004 ff2f 	bl	8005828 <HAL_GPIO_ReadPin>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d101      	bne.n	80009d4 <_ZN14Digitll_IN_OUT4ReadEv+0xe4>
 80009d0:	2302      	movs	r3, #2
 80009d2:	e000      	b.n	80009d6 <_ZN14Digitll_IN_OUT4ReadEv+0xe6>
 80009d4:	2300      	movs	r3, #0
 80009d6:	4423      	add	r3, r4
 80009d8:	73fb      	strb	r3, [r7, #15]

		//Data/Adress check
		if (isAddressReceived)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d017      	beq.n	8000a14 <_ZN14Digitll_IN_OUT4ReadEv+0x124>
		{
			queue.Enqueue(data);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	338a      	adds	r3, #138	; 0x8a
 80009e8:	7bfa      	ldrb	r2, [r7, #15]
 80009ea:	4611      	mov	r1, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f002 f825 	bl	8002a3c <_ZN5Queue7EnqueueEh>
			expectedDataSize--;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 80009f8:	3b01      	subs	r3, #1
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			if (expectedDataSize == 0)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d108      	bne.n	8000a1e <_ZN14Digitll_IN_OUT4ReadEv+0x12e>
			{
				CheckData();
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 f895 	bl	8000b3c <_ZN14Digitll_IN_OUT9CheckDataEv>
 8000a12:	e004      	b.n	8000a1e <_ZN14Digitll_IN_OUT4ReadEv+0x12e>
			}
		}
		else
		{
			CheckAddress(data);
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	4619      	mov	r1, r3
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f000 f82d 	bl	8000a78 <_ZN14Digitll_IN_OUT12CheckAddressEh>
		}
		timeoutCounter = 0;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	}

	//Timeoutcounter handling
	if (timeoutCounter >= READ_TIMEOUT)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8000a2c:	2b63      	cmp	r3, #99	; 0x63
 8000a2e:	d90c      	bls.n	8000a4a <_ZN14Digitll_IN_OUT4ReadEv+0x15a>
	{
		timeoutCounter = 0;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2200      	movs	r2, #0
 8000a34:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		isAddressReceived = false;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		expectedDataSize = 0;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8000a48:	e007      	b.n	8000a5a <_ZN14Digitll_IN_OUT4ReadEv+0x16a>
	}
	else
	{
		timeoutCounter++;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8000a50:	3301      	adds	r3, #1
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	}

	previousConfigeWriteStatus = configeWriteStatus;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd90      	pop	{r4, r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	48001c00 	.word	0x48001c00
 8000a74:	48000800 	.word	0x48000800

08000a78 <_ZN14Digitll_IN_OUT12CheckAddressEh>:

bool Digitll_IN_OUT::CheckAddress(uint8_t data)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	460b      	mov	r3, r1
 8000a82:	70fb      	strb	r3, [r7, #3]
	receivedAddress = data;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	78fa      	ldrb	r2, [r7, #3]
 8000a88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	switch (data)
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	2b19      	cmp	r3, #25
 8000a92:	d841      	bhi.n	8000b18 <_ZN14Digitll_IN_OUT12CheckAddressEh+0xa0>
 8000a94:	a201      	add	r2, pc, #4	; (adr r2, 8000a9c <_ZN14Digitll_IN_OUT12CheckAddressEh+0x24>)
 8000a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9a:	bf00      	nop
 8000a9c:	08000b05 	.word	0x08000b05
 8000aa0:	08000b05 	.word	0x08000b05
 8000aa4:	08000b05 	.word	0x08000b05
 8000aa8:	08000b05 	.word	0x08000b05
 8000aac:	08000b05 	.word	0x08000b05
 8000ab0:	08000b05 	.word	0x08000b05
 8000ab4:	08000b05 	.word	0x08000b05
 8000ab8:	08000b19 	.word	0x08000b19
 8000abc:	08000b19 	.word	0x08000b19
 8000ac0:	08000b19 	.word	0x08000b19
 8000ac4:	08000b19 	.word	0x08000b19
 8000ac8:	08000b19 	.word	0x08000b19
 8000acc:	08000b19 	.word	0x08000b19
 8000ad0:	08000b19 	.word	0x08000b19
 8000ad4:	08000b19 	.word	0x08000b19
 8000ad8:	08000b05 	.word	0x08000b05
 8000adc:	08000b05 	.word	0x08000b05
 8000ae0:	08000b05 	.word	0x08000b05
 8000ae4:	08000b05 	.word	0x08000b05
 8000ae8:	08000b0f 	.word	0x08000b0f
 8000aec:	08000b05 	.word	0x08000b05
 8000af0:	08000b05 	.word	0x08000b05
 8000af4:	08000b0f 	.word	0x08000b0f
 8000af8:	08000b0f 	.word	0x08000b0f
 8000afc:	08000b05 	.word	0x08000b05
 8000b00:	08000b05 	.word	0x08000b05
		case CLAMPING_SPEED:
		case IN_POS_DIFF:
		case OPENING_DISTANCE:
		case OVER_CURRENT_WARNING:
		case OVER_CURRENT_ERROR:
			expectedDataSize = 1;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2201      	movs	r2, #1
 8000b08:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			break;
 8000b0c:	e00e      	b.n	8000b2c <_ZN14Digitll_IN_OUT12CheckAddressEh+0xb4>
		case SELF_SHUTDOWN_DELAY:
		case UNDERVOLTAGE_WARNING:
		case UNDERVOLTAGE_ERROR:
			expectedDataSize = 2;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2202      	movs	r2, #2
 8000b12:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			break;
 8000b16:	e009      	b.n	8000b2c <_ZN14Digitll_IN_OUT12CheckAddressEh+0xb4>
		default:
			receivedAddress = 0;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			expectedDataSize = 0;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			return false;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e000      	b.n	8000b2e <_ZN14Digitll_IN_OUT12CheckAddressEh+0xb6>
			break;
	}
	return true;
 8000b2c:	2301      	movs	r3, #1
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <_ZN14Digitll_IN_OUT9CheckDataEv>:

void Digitll_IN_OUT::CheckData()
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	switch (receivedAddress)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	2b19      	cmp	r3, #25
 8000b4e:	f200 8339 	bhi.w	80011c4 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
 8000b52:	a201      	add	r2, pc, #4	; (adr r2, 8000b58 <_ZN14Digitll_IN_OUT9CheckDataEv+0x1c>)
 8000b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b58:	08000bc1 	.word	0x08000bc1
 8000b5c:	08000bef 	.word	0x08000bef
 8000b60:	08000c25 	.word	0x08000c25
 8000b64:	08000c53 	.word	0x08000c53
 8000b68:	08000c81 	.word	0x08000c81
 8000b6c:	08000caf 	.word	0x08000caf
 8000b70:	08000cdd 	.word	0x08000cdd
 8000b74:	080011c5 	.word	0x080011c5
 8000b78:	080011c5 	.word	0x080011c5
 8000b7c:	080011c5 	.word	0x080011c5
 8000b80:	080011c5 	.word	0x080011c5
 8000b84:	080011c5 	.word	0x080011c5
 8000b88:	080011c5 	.word	0x080011c5
 8000b8c:	080011c5 	.word	0x080011c5
 8000b90:	080011c5 	.word	0x080011c5
 8000b94:	08000d0b 	.word	0x08000d0b
 8000b98:	08000d79 	.word	0x08000d79
 8000b9c:	08000de7 	.word	0x08000de7
 8000ba0:	08000e55 	.word	0x08000e55
 8000ba4:	0800107b 	.word	0x0800107b
 8000ba8:	08000ec3 	.word	0x08000ec3
 8000bac:	08000f31 	.word	0x08000f31
 8000bb0:	080010e9 	.word	0x080010e9
 8000bb4:	08001157 	.word	0x08001157
 8000bb8:	08000f9f 	.word	0x08000f9f
 8000bbc:	0800100d 	.word	0x0800100d
	{
		case CLOSE:
			driveCommand->setClose(queue.Dequeue() == 0x01);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	338a      	adds	r3, #138	; 0x8a
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f001 ff94 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	bf0c      	ite	eq
 8000bd6:	2301      	moveq	r3, #1
 8000bd8:	2300      	movne	r3, #0
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4620      	mov	r0, r4
 8000be0:	f001 fc78 	bl	80024d4 <_ZN12DriveCommand8setCloseEb>
			statusChangedReg = true;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2201      	movs	r2, #1
 8000be8:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 8000bec:	e2ea      	b.n	80011c4 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case OPEN:
			driveCommand->setOpen(queue.Dequeue() == 0x01);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	338a      	adds	r3, #138	; 0x8a
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f001 ff7d 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	bf0c      	ite	eq
 8000c04:	2301      	moveq	r3, #1
 8000c06:	2300      	movne	r3, #0
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	f001 fc81 	bl	8002514 <_ZN12DriveCommand7setOpenEb>
			statusChangedReg = true;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2201      	movs	r2, #1
 8000c16:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			statusChangedReg = true;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 8000c22:	e2cf      	b.n	80011c4 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case TEACH:
			driveCommand->setTeach(queue.Dequeue() == 0x01);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	338a      	adds	r3, #138	; 0x8a
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 ff62 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	bf0c      	ite	eq
 8000c3a:	2301      	moveq	r3, #1
 8000c3c:	2300      	movne	r3, #0
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	4619      	mov	r1, r3
 8000c42:	4620      	mov	r0, r4
 8000c44:	f001 fd06 	bl	8002654 <_ZN12DriveCommand8setTeachEb>
			statusChangedReg = true;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 8000c50:	e2b8      	b.n	80011c4 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case RESET:
			driveCommand->setReset(queue.Dequeue() == 0x01);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	338a      	adds	r3, #138	; 0x8a
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f001 ff4b 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	bf0c      	ite	eq
 8000c68:	2301      	moveq	r3, #1
 8000c6a:	2300      	movne	r3, #0
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4620      	mov	r0, r4
 8000c72:	f001 fcaf 	bl	80025d4 <_ZN12DriveCommand8setResetEb>
			statusChangedReg = true;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 8000c7e:	e2a1      	b.n	80011c4 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case ENABLE:
			driveCommand->setEnable(queue.Dequeue() == 0x01);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	338a      	adds	r3, #138	; 0x8a
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 ff34 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	bf0c      	ite	eq
 8000c96:	2301      	moveq	r3, #1
 8000c98:	2300      	movne	r3, #0
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	f001 fc78 	bl	8002594 <_ZN12DriveCommand9setEnableEb>
			statusChangedReg = true;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 8000cac:	e28a      	b.n	80011c4 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case DISABLE:
			driveCommand->setDisable(queue.Dequeue() == 0x01);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	338a      	adds	r3, #138	; 0x8a
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f001 ff1d 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	bf0c      	ite	eq
 8000cc4:	2301      	moveq	r3, #1
 8000cc6:	2300      	movne	r3, #0
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f001 fc41 	bl	8002554 <_ZN12DriveCommand10setDisableEb>
			statusChangedReg = true;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 8000cda:	e273      	b.n	80011c4 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case STOP:
			driveCommand->setStop(queue.Dequeue() == 0x01);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	338a      	adds	r3, #138	; 0x8a
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 ff06 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	bf0c      	ite	eq
 8000cf2:	2301      	moveq	r3, #1
 8000cf4:	2300      	movne	r3, #0
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f001 fc8a 	bl	8002614 <_ZN12DriveCommand7setStopEb>
			statusChangedReg = true;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2201      	movs	r2, #1
 8000d04:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 8000d08:	e25c      	b.n	80011c4 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case TEACH_TORQUE:
			dataTemp[0] = queue.Dequeue();
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	338a      	adds	r3, #138	; 0x8a
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 fef2 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8000d14:	4603      	mov	r3, r0
 8000d16:	461a      	mov	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	338a      	adds	r3, #138	; 0x8a
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 fee8 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000d38:	01db      	lsls	r3, r3, #7
 8000d3a:	b21a      	sxth	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000d42:	b21b      	sxth	r3, r3
 8000d44:	4313      	orrs	r3, r2
 8000d46:	b21b      	sxth	r3, r3
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setTeachTroque(value);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4610      	mov	r0, r2
 8000d60:	f001 fb09 	bl	8002376 <_ZN13DriveSettings14setTeachTroqueEt>
			settingsChangedReg |= TEACH_TORQUE_CHANGE;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8000d76:	e225      	b.n	80011c4 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case TEACH_SPEED:
			dataTemp[0] = queue.Dequeue();
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	338a      	adds	r3, #138	; 0x8a
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f001 febb 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8000d82:	4603      	mov	r3, r0
 8000d84:	461a      	mov	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	338a      	adds	r3, #138	; 0x8a
 8000d90:	4618      	mov	r0, r3
 8000d92:	f001 feb1 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8000d96:	4603      	mov	r3, r0
 8000d98:	461a      	mov	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000da6:	01db      	lsls	r3, r3, #7
 8000da8:	b21a      	sxth	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000db0:	b21b      	sxth	r3, r3
 8000db2:	4313      	orrs	r3, r2
 8000db4:	b21b      	sxth	r3, r3
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setTeachSpeed(value);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4610      	mov	r0, r2
 8000dce:	f001 fab7 	bl	8002340 <_ZN13DriveSettings13setTeachSpeedEt>
			settingsChangedReg |= TEACH_SPEED_CHANGE;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8000de4:	e1ee      	b.n	80011c4 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case CLAMPING_TORQUE:
			dataTemp[0] = queue.Dequeue();
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	338a      	adds	r3, #138	; 0x8a
 8000dea:	4618      	mov	r0, r3
 8000dec:	f001 fe84 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8000df0:	4603      	mov	r3, r0
 8000df2:	461a      	mov	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	338a      	adds	r3, #138	; 0x8a
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 fe7a 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000e14:	01db      	lsls	r3, r3, #7
 8000e16:	b21a      	sxth	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setClampingTorque(value);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	f001 f9f9 	bl	8002232 <_ZN13DriveSettings17setClampingTorqueEt>
			settingsChangedReg |= CLAMPING_TORQUE_CHANGE;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8000e52:	e1b7      	b.n	80011c4 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case CLAMPING_SPEED:
			dataTemp[0] = queue.Dequeue();
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	338a      	adds	r3, #138	; 0x8a
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f001 fe4d 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	461a      	mov	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	338a      	adds	r3, #138	; 0x8a
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 fe43 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000e82:	01db      	lsls	r3, r3, #7
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000e8c:	b21b      	sxth	r3, r3
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setClampingSpeed(value);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	f001 f9a7 	bl	80021fc <_ZN13DriveSettings16setClampingSpeedEt>
			settingsChangedReg |= CLAMPING_SPEED_CHANGE;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8000eb4:	f043 0308 	orr.w	r3, r3, #8
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8000ec0:	e180      	b.n	80011c4 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case IN_POS_DIFF:
			dataTemp[0] = queue.Dequeue();
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	338a      	adds	r3, #138	; 0x8a
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 fe16 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	338a      	adds	r3, #138	; 0x8a
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 fe0c 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000ef0:	01db      	lsls	r3, r3, #7
 8000ef2:	b21a      	sxth	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000efa:	b21b      	sxth	r3, r3
 8000efc:	4313      	orrs	r3, r2
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setInPosDiff(value);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000f14:	4619      	mov	r1, r3
 8000f16:	4610      	mov	r0, r2
 8000f18:	f001 f9a6 	bl	8002268 <_ZN13DriveSettings12setInPosDiffEt>
			settingsChangedReg |= IN_POS_DIFF_CHANGE;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8000f22:	f043 0320 	orr.w	r3, r3, #32
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8000f2e:	e149      	b.n	80011c4 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case OPENING_DISTANCE:
			dataTemp[0] = queue.Dequeue();
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	338a      	adds	r3, #138	; 0x8a
 8000f34:	4618      	mov	r0, r3
 8000f36:	f001 fddf 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	338a      	adds	r3, #138	; 0x8a
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f001 fdd5 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	461a      	mov	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000f5e:	01db      	lsls	r3, r3, #7
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	b21b      	sxth	r3, r3
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setOpeningDistance(value);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000f82:	4619      	mov	r1, r3
 8000f84:	4610      	mov	r0, r2
 8000f86:	f001 f98a 	bl	800229e <_ZN13DriveSettings18setOpeningDistanceEt>
			settingsChangedReg |= OPENING_DISTANCE_CHANGE;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8000f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8000f9c:	e112      	b.n	80011c4 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case OVER_CURRENT_WARNING:
			dataTemp[0] = queue.Dequeue();
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	338a      	adds	r3, #138	; 0x8a
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 fda8 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461a      	mov	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	338a      	adds	r3, #138	; 0x8a
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fd9e 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000fcc:	01db      	lsls	r3, r3, #7
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setOverCurrentWarning(value);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	f001 f96e 	bl	80022d4 <_ZN13DriveSettings21setOverCurrentWarningEt>
			settingsChangedReg |= OVER_CURRENT_WARNING_CHANGE;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	b29a      	uxth	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 800100a:	e0db      	b.n	80011c4 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case OVER_CURRENT_ERROR:
			dataTemp[0] = queue.Dequeue();
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	338a      	adds	r3, #138	; 0x8a
 8001010:	4618      	mov	r0, r3
 8001012:	f001 fd71 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	338a      	adds	r3, #138	; 0x8a
 8001024:	4618      	mov	r0, r3
 8001026:	f001 fd67 	bl	8002af8 <_ZN5Queue7DequeueEv>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800103a:	01db      	lsls	r3, r3, #7
 800103c:	b21a      	sxth	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21b      	sxth	r3, r3
 800104a:	b29a      	uxth	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setOverCurrentError(value);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800105e:	4619      	mov	r1, r3
 8001060:	4610      	mov	r0, r2
 8001062:	f001 f9d9 	bl	8002418 <_ZN13DriveSettings19setOverCurrentErrorEt>
			settingsChangedReg |= OVER_CURRENT_ERROR_CHANGE;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800106c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001070:	b29a      	uxth	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8001078:	e0a4      	b.n	80011c4 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case SELF_SHUTDOWN_DELAY:
			dataTemp[0] = queue.Dequeue();
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	338a      	adds	r3, #138	; 0x8a
 800107e:	4618      	mov	r0, r3
 8001080:	f001 fd3a 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8001084:	4603      	mov	r3, r0
 8001086:	461a      	mov	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	338a      	adds	r3, #138	; 0x8a
 8001092:	4618      	mov	r0, r3
 8001094:	f001 fd30 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80010a8:	01db      	lsls	r3, r3, #7
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setSelfShutdownDelay(value);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80010cc:	4619      	mov	r1, r3
 80010ce:	4610      	mov	r0, r2
 80010d0:	f001 f91b 	bl	800230a <_ZN13DriveSettings20setSelfShutdownDelayEt>
			settingsChangedReg |= SELF_SHUTDOWN_DELAY_CHANGE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80010da:	f043 0310 	orr.w	r3, r3, #16
 80010de:	b29a      	uxth	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 80010e6:	e06d      	b.n	80011c4 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case UNDERVOLTAGE_WARNING:
			dataTemp[0] = queue.Dequeue();
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	338a      	adds	r3, #138	; 0x8a
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fd03 	bl	8002af8 <_ZN5Queue7DequeueEv>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	338a      	adds	r3, #138	; 0x8a
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fcf9 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8001106:	4603      	mov	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8001116:	01db      	lsls	r3, r3, #7
 8001118:	b21a      	sxth	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001120:	b21b      	sxth	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b21b      	sxth	r3, r3
 8001126:	b29a      	uxth	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setUnderVoltageWarning(value);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800113a:	4619      	mov	r1, r3
 800113c:	4610      	mov	r0, r2
 800113e:	f001 f950 	bl	80023e2 <_ZN13DriveSettings22setUnderVoltageWarningEt>
			settingsChangedReg |= UNDERVOLTAGE_WARNING_CHANGE;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8001148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800114c:	b29a      	uxth	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 8001154:	e036      	b.n	80011c4 <_ZN14Digitll_IN_OUT9CheckDataEv+0x688>
		case UNDERVOLTAGE_ERROR:
			dataTemp[0] = queue.Dequeue();
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	338a      	adds	r3, #138	; 0x8a
 800115a:	4618      	mov	r0, r3
 800115c:	f001 fccc 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			dataTemp[1] = queue.Dequeue();
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	338a      	adds	r3, #138	; 0x8a
 800116e:	4618      	mov	r0, r3
 8001170:	f001 fcc2 	bl	8002af8 <_ZN5Queue7DequeueEv>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
			value = ((uint16_t) dataTemp[1]) << 7 | dataTemp[0];
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8001184:	01db      	lsls	r3, r3, #7
 8001186:	b21a      	sxth	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800118e:	b21b      	sxth	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b21b      	sxth	r3, r3
 8001194:	b29a      	uxth	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
			driveSettings->setUnderVoltageError(value);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80011a8:	4619      	mov	r1, r3
 80011aa:	4610      	mov	r0, r2
 80011ac:	f001 f8fe 	bl	80023ac <_ZN13DriveSettings20setUnderVoltageErrorEt>
			settingsChangedReg |= UNDERVOLTAGE_ERROR_CHANGE;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80011b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			break;
 80011c2:	bf00      	nop
	}
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd90      	pop	{r4, r7, pc}

080011cc <_ZN14Digitll_IN_OUT17isSettingsChangedEv>:


uint16_t Digitll_IN_OUT::isSettingsChanged(){
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	settingsChangedReg |= UNDERVOLTAGE_ERROR_CHANGE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80011da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011de:	b29a      	uxth	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	settingsChangedReg |= UNDERVOLTAGE_WARNING_CHANGE;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80011ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	return settingsChangedReg;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>:

void Digitll_IN_OUT::ResetSettingsChanged(uint16_t bit){
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	460b      	mov	r3, r1
 8001214:	807b      	strh	r3, [r7, #2]
	settingsChangedReg &= ~bit;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800121c:	b21a      	sxth	r2, r3
 800121e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001222:	43db      	mvns	r3, r3
 8001224:	b21b      	sxth	r3, r3
 8001226:	4013      	ands	r3, r2
 8001228:	b21b      	sxth	r3, r3
 800122a:	b29a      	uxth	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <_ZN14Digitll_IN_OUT15isStatusChangedEv>:

bool Digitll_IN_OUT::isStatusChanged(){
 800123e:	b480      	push	{r7}
 8001240:	b085      	sub	sp, #20
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
	bool statusChangedRegTemp = statusChangedReg;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800124c:	73fb      	strb	r3, [r7, #15]
	statusChangedReg = false;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	return statusChangedRegTemp;
 8001256:	7bfb      	ldrb	r3, [r7, #15]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <_ZN14Digitll_IN_OUT11WriteOutputEh>:





void Digitll_IN_OUT::WriteOutput(uint8_t data){
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	70fb      	strb	r3, [r7, #3]

	data & 0x01 ? Out1.Set() : Out1.Reset();
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d004      	beq.n	8001284 <_ZN14Digitll_IN_OUT11WriteOutputEh+0x20>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f893 	bl	80013a8 <_ZN10DigitalOut3SetEv>
 8001282:	e003      	b.n	800128c <_ZN14Digitll_IN_OUT11WriteOutputEh+0x28>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f8ac 	bl	80013e4 <_ZN10DigitalOut5ResetEv>
	data & 0x02 ? Out2.Set() : Out2.Reset();
 800128c:	78fb      	ldrb	r3, [r7, #3]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <_ZN14Digitll_IN_OUT11WriteOutputEh+0x3e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3310      	adds	r3, #16
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f884 	bl	80013a8 <_ZN10DigitalOut3SetEv>
 80012a0:	e004      	b.n	80012ac <_ZN14Digitll_IN_OUT11WriteOutputEh+0x48>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3310      	adds	r3, #16
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f89c 	bl	80013e4 <_ZN10DigitalOut5ResetEv>
	data & 0x04 ? Out3.Set() : Out3.Reset();
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <_ZN14Digitll_IN_OUT11WriteOutputEh+0x5e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3320      	adds	r3, #32
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f874 	bl	80013a8 <_ZN10DigitalOut3SetEv>
 80012c0:	e004      	b.n	80012cc <_ZN14Digitll_IN_OUT11WriteOutputEh+0x68>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3320      	adds	r3, #32
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f88c 	bl	80013e4 <_ZN10DigitalOut5ResetEv>
	data & 0x08 ? Out4.Set() : Out4.Reset();
 80012cc:	78fb      	ldrb	r3, [r7, #3]
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d005      	beq.n	80012e2 <_ZN14Digitll_IN_OUT11WriteOutputEh+0x7e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3330      	adds	r3, #48	; 0x30
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f864 	bl	80013a8 <_ZN10DigitalOut3SetEv>
 80012e0:	e004      	b.n	80012ec <_ZN14Digitll_IN_OUT11WriteOutputEh+0x88>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3330      	adds	r3, #48	; 0x30
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f87c 	bl	80013e4 <_ZN10DigitalOut5ResetEv>
	data & 0x10 ? Out5.Set() : Out5.Reset();
 80012ec:	78fb      	ldrb	r3, [r7, #3]
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <_ZN14Digitll_IN_OUT11WriteOutputEh+0x9e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3340      	adds	r3, #64	; 0x40
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f854 	bl	80013a8 <_ZN10DigitalOut3SetEv>
 8001300:	e004      	b.n	800130c <_ZN14Digitll_IN_OUT11WriteOutputEh+0xa8>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3340      	adds	r3, #64	; 0x40
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f86c 	bl	80013e4 <_ZN10DigitalOut5ResetEv>
	data & 0x20 ? Out6.Set() : Out6.Reset();
 800130c:	78fb      	ldrb	r3, [r7, #3]
 800130e:	f003 0320 	and.w	r3, r3, #32
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <_ZN14Digitll_IN_OUT11WriteOutputEh+0xbe>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3350      	adds	r3, #80	; 0x50
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f844 	bl	80013a8 <_ZN10DigitalOut3SetEv>
 8001320:	e004      	b.n	800132c <_ZN14Digitll_IN_OUT11WriteOutputEh+0xc8>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3350      	adds	r3, #80	; 0x50
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f85c 	bl	80013e4 <_ZN10DigitalOut5ResetEv>
	data & 0x40 ? Out7.Set() : Out7.Reset();
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001332:	2b00      	cmp	r3, #0
 8001334:	d005      	beq.n	8001342 <_ZN14Digitll_IN_OUT11WriteOutputEh+0xde>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3360      	adds	r3, #96	; 0x60
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f834 	bl	80013a8 <_ZN10DigitalOut3SetEv>
 8001340:	e004      	b.n	800134c <_ZN14Digitll_IN_OUT11WriteOutputEh+0xe8>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3360      	adds	r3, #96	; 0x60
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f84c 	bl	80013e4 <_ZN10DigitalOut5ResetEv>
	data & 0x80 ? Out8.Set() : Out7.Reset();
 800134c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001350:	2b00      	cmp	r3, #0
 8001352:	da05      	bge.n	8001360 <_ZN14Digitll_IN_OUT11WriteOutputEh+0xfc>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3370      	adds	r3, #112	; 0x70
 8001358:	4618      	mov	r0, r3
 800135a:	f000 f825 	bl	80013a8 <_ZN10DigitalOut3SetEv>
}
 800135e:	e004      	b.n	800136a <_ZN14Digitll_IN_OUT11WriteOutputEh+0x106>
	data & 0x80 ? Out8.Set() : Out7.Reset();
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3360      	adds	r3, #96	; 0x60
 8001364:	4618      	mov	r0, r3
 8001366:	f000 f83d 	bl	80013e4 <_ZN10DigitalOut5ResetEv>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <_ZN10DigitalOutC1EP12GPIO_TypeDeftS1_t>:
 */

#include "DO.h"
#include "../Tools/Delay.h"

DigitalOut::DigitalOut(GPIO_TypeDef* GPIOx_N, uint16_t GPIO_Pin_N, GPIO_TypeDef* GPIOx_P, uint16_t GPIO_Pin_P){
 8001372:	b480      	push	{r7}
 8001374:	b085      	sub	sp, #20
 8001376:	af00      	add	r7, sp, #0
 8001378:	60f8      	str	r0, [r7, #12]
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	4613      	mov	r3, r2
 8001380:	80fb      	strh	r3, [r7, #6]
	this->GPIO_Pin_N = GPIO_Pin_N;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	88fa      	ldrh	r2, [r7, #6]
 8001386:	809a      	strh	r2, [r3, #4]
	this->GPIOx_N = GPIOx_N;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	601a      	str	r2, [r3, #0]
	this->GPIO_Pin_N = GPIO_Pin_P;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	8b3a      	ldrh	r2, [r7, #24]
 8001392:	809a      	strh	r2, [r3, #4]
	this->GPIOx_N = GPIOx_P;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	601a      	str	r2, [r3, #0]
}
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <_ZN10DigitalOut3SetEv>:


/*
 *
 */
void DigitalOut::Set() {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	//P set, N reset
	HAL_GPIO_WritePin(GPIOx_N, GPIO_Pin_N, GPIO_PIN_RESET);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6818      	ldr	r0, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	889b      	ldrh	r3, [r3, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	4619      	mov	r1, r3
 80013bc:	f004 fa4c 	bl	8005858 <HAL_GPIO_WritePin>
	Delay::DWT_Delay_us(25);
 80013c0:	2019      	movs	r0, #25
 80013c2:	f001 fb13 	bl	80029ec <_ZN5Delay12DWT_Delay_usEm>
	HAL_GPIO_WritePin(GPIOx_P, GPIO_Pin_P, GPIO_PIN_SET);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6898      	ldr	r0, [r3, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	899b      	ldrh	r3, [r3, #12]
 80013ce:	2201      	movs	r2, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	f004 fa41 	bl	8005858 <HAL_GPIO_WritePin>
	status = true;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2201      	movs	r2, #1
 80013da:	739a      	strb	r2, [r3, #14]
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <_ZN10DigitalOut5ResetEv>:


/*
 *
 */
void DigitalOut::Reset() {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOx_P, GPIO_Pin_P, GPIO_PIN_RESET);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6898      	ldr	r0, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	899b      	ldrh	r3, [r3, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	4619      	mov	r1, r3
 80013f8:	f004 fa2e 	bl	8005858 <HAL_GPIO_WritePin>
	Delay::DWT_Delay_us(25);
 80013fc:	2019      	movs	r0, #25
 80013fe:	f001 faf5 	bl	80029ec <_ZN5Delay12DWT_Delay_usEm>
	HAL_GPIO_WritePin(GPIOx_N, GPIO_Pin_N, GPIO_PIN_SET);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	889b      	ldrh	r3, [r3, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	4619      	mov	r1, r3
 800140e:	f004 fa23 	bl	8005858 <HAL_GPIO_WritePin>
	status = false;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	739a      	strb	r2, [r3, #14]
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <_ZN3LEDC1EP12GPIO_TypeDeftb>:


#include "LED.h"


LED::LED(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, bool outputInverted) {
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	4611      	mov	r1, r2
 800142c:	461a      	mov	r2, r3
 800142e:	460b      	mov	r3, r1
 8001430:	80fb      	strh	r3, [r7, #6]
 8001432:	4613      	mov	r3, r2
 8001434:	717b      	strb	r3, [r7, #5]

	this->GPIO_Pin = GPIO_Pin;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	88fa      	ldrh	r2, [r7, #6]
 800143a:	809a      	strh	r2, [r3, #4]
	this->GPIOx = GPIOx;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	601a      	str	r2, [r3, #0]
	this->outputInverted = outputInverted;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	797a      	ldrb	r2, [r7, #5]
 8001446:	719a      	strb	r2, [r3, #6]
}
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4618      	mov	r0, r3
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <_ZN3LED3OFFEv>:
}

/*
 * LED OFF method
 */
void LED::OFF() {
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
	//check if output is inverted
	if(outputInverted){
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	799b      	ldrb	r3, [r3, #6]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d008      	beq.n	8001478 <_ZN3LED3OFFEv+0x22>
		//clear output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	889b      	ldrh	r3, [r3, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	4619      	mov	r1, r3
 8001472:	f004 f9f1 	bl	8005858 <HAL_GPIO_WritePin>
	}else{
		//write output
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
	}
}
 8001476:	e007      	b.n	8001488 <_ZN3LED3OFFEv+0x32>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	889b      	ldrh	r3, [r3, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	f004 f9e8 	bl	8005858 <HAL_GPIO_WritePin>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <_ZN3LED6ToggleEv>:

/*
 * LED Toggle method
 */
void LED::Toggle() {
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	889b      	ldrh	r3, [r3, #4]
 80014a0:	4619      	mov	r1, r3
 80014a2:	4610      	mov	r0, r2
 80014a4:	f004 f9f0 	bl	8005888 <HAL_GPIO_TogglePin>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_ZN13CommunicationC1EP11DriveStatusP13DriveSettingsP10RFM95_LoRaP14Digitll_IN_OUTP12DriveCommand>:
 *      Author: marce
 */

#include "Communication.h"

Communication::Communication(DriveStatus *driveStatus,
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
		DriveSettings *driveSettings, RFM95_LoRa *rfm95, Digitll_IN_OUT *digitalInOut, DriveCommand *driveCommand)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3314      	adds	r3, #20
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	811a      	strh	r2, [r3, #8]
{
	this->driveSettings = driveSettings;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	605a      	str	r2, [r3, #4]
	this->driveStatus = driveStatus;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	601a      	str	r2, [r3, #0]
	this->rfm95 = rfm95;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	60da      	str	r2, [r3, #12]
	this->digitalInOut = digitalInOut;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	611a      	str	r2, [r3, #16]
	this->driveCommand = driveCommand;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	609a      	str	r2, [r3, #8]
}
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <_ZN13Communication9UpdateComEv>:
 * 1. Priority -> write Status (
 *
 *
 */
bool Communication::UpdateCom()
{
 80014f6:	b590      	push	{r4, r7, lr}
 80014f8:	b08b      	sub	sp, #44	; 0x2c
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
	uint8_t data2send[6] =
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	2300      	movs	r3, #0
 8001504:	81bb      	strh	r3, [r7, #12]
	{ 0 };

	if (digitalInOut->isStatusChanged())
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fe97 	bl	800123e <_ZN14Digitll_IN_OUT15isStatusChangedEv>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d067      	beq.n	80015e6 <_ZN13Communication9UpdateComEv+0xf0>
	{
		uint8_t data = ((uint8_t) driveCommand->isClose() << 8)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	4618      	mov	r0, r3
 800151c:	f000 ffc9 	bl	80024b2 <_ZN12DriveCommand7isCloseEv>
 8001520:	4603      	mov	r3, r0
 8001522:	021b      	lsls	r3, r3, #8
				| ((uint8_t) driveCommand->isDisable() << 8)
 8001524:	b25c      	sxtb	r4, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	4618      	mov	r0, r3
 800152c:	f001 f801 	bl	8002532 <_ZN12DriveCommand9isDisableEv>
 8001530:	4603      	mov	r3, r0
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	b25b      	sxtb	r3, r3
 8001536:	4323      	orrs	r3, r4
 8001538:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveCommand->isEnable() << 8)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	4618      	mov	r0, r3
 8001540:	f001 f817 	bl	8002572 <_ZN12DriveCommand8isEnableEv>
 8001544:	4603      	mov	r3, r0
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b25b      	sxtb	r3, r3
 800154a:	4323      	orrs	r3, r4
 800154c:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveCommand->isOpen() << 8)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	4618      	mov	r0, r3
 8001554:	f000 ffcd 	bl	80024f2 <_ZN12DriveCommand6isOpenEv>
 8001558:	4603      	mov	r3, r0
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	b25b      	sxtb	r3, r3
 800155e:	4323      	orrs	r3, r4
 8001560:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveCommand->isReset() << 8)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	4618      	mov	r0, r3
 8001568:	f001 f823 	bl	80025b2 <_ZN12DriveCommand7isResetEv>
 800156c:	4603      	mov	r3, r0
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	b25b      	sxtb	r3, r3
 8001572:	4323      	orrs	r3, r4
 8001574:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveCommand->isStop() << 8)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	4618      	mov	r0, r3
 800157c:	f001 f839 	bl	80025f2 <_ZN12DriveCommand6isStopEv>
 8001580:	4603      	mov	r3, r0
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b25b      	sxtb	r3, r3
 8001586:	4323      	orrs	r3, r4
 8001588:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveCommand->isTeach() << 8)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	4618      	mov	r0, r3
 8001590:	f001 f84f 	bl	8002632 <_ZN12DriveCommand7isTeachEv>
 8001594:	4603      	mov	r3, r0
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b25b      	sxtb	r3, r3
 800159a:	4323      	orrs	r3, r4
 800159c:	b25c      	sxtb	r4, r3
				| ((uint8_t) driveCommand->isWriteConfig() << 8);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f001 f865 	bl	8002672 <_ZN12DriveCommand13isWriteConfigEv>
 80015a8:	4603      	mov	r3, r0
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	4323      	orrs	r3, r4
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	73fb      	strb	r3, [r7, #15]

		data2send[0] = driveSettings->getDeviceAddress();
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 ff3c 	bl	8002436 <_ZNK13DriveSettings16getDeviceAddressEv>
 80015be:	4603      	mov	r3, r0
 80015c0:	723b      	strb	r3, [r7, #8]
		data2send[1] = SEND_COMMAND;
 80015c2:	2302      	movs	r3, #2
 80015c4:	727b      	strb	r3, [r7, #9]
		data2send[2] = data;
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	72bb      	strb	r3, [r7, #10]
		data2send[3] = 5;
 80015ca:	2305      	movs	r3, #5
 80015cc:	72fb      	strb	r3, [r7, #11]
		data2send[4] = CRC8(data2send, data2send[3] - 1);
 80015ce:	7afb      	ldrb	r3, [r7, #11]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	f107 0308 	add.w	r3, r7, #8
 80015d8:	4619      	mov	r1, r3
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 f9f1 	bl	80019c2 <_ZN13Communication4CRC8EPhh>
 80015e0:	4603      	mov	r3, r0
 80015e2:	733b      	strb	r3, [r7, #12]
 80015e4:	e177      	b.n	80018d6 <_ZN13Communication9UpdateComEv+0x3e0>
	}
	else if (digitalInOut->isSettingsChanged() != 0)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fdee 	bl	80011cc <_ZN14Digitll_IN_OUT17isSettingsChangedEv>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	bf14      	ite	ne
 80015f6:	2301      	movne	r3, #1
 80015f8:	2300      	moveq	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8154 	beq.w	80018aa <_ZN13Communication9UpdateComEv+0x3b4>
	{
		uint16_t commands = digitalInOut->isSettingsChanged();
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fde0 	bl	80011cc <_ZN14Digitll_IN_OUT17isSettingsChangedEv>
 800160c:	4603      	mov	r3, r0
 800160e:	84fb      	strh	r3, [r7, #38]	; 0x26
		data2send[0] = driveSettings->getDeviceAddress();
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	f000 ff0e 	bl	8002436 <_ZNK13DriveSettings16getDeviceAddressEv>
 800161a:	4603      	mov	r3, r0
 800161c:	723b      	strb	r3, [r7, #8]
		data2send[1] = SEND_SETTINGS;
 800161e:	2301      	movs	r3, #1
 8001620:	727b      	strb	r3, [r7, #9]

		if (commands & TEACH_TORQUE_CHANGE)
 8001622:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d016      	beq.n	800165a <_ZN13Communication9UpdateComEv+0x164>
		{
			data2send[2] = TEACH_TORQUE;
 800162c:	2310      	movs	r3, #16
 800162e:	72bb      	strb	r3, [r7, #10]
			uint16_t value = driveSettings->getTeachTroque();
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4618      	mov	r0, r3
 8001636:	f000 fe92 	bl	800235e <_ZNK13DriveSettings14getTeachTroqueEv>
 800163a:	4603      	mov	r3, r0
 800163c:	823b      	strh	r3, [r7, #16]
			data2send[3] = value >> 8;
 800163e:	8a3b      	ldrh	r3, [r7, #16]
 8001640:	121b      	asrs	r3, r3, #8
 8001642:	b2db      	uxtb	r3, r3
 8001644:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8001646:	8a3b      	ldrh	r3, [r7, #16]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(TEACH_TORQUE_CHANGE);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	2101      	movs	r1, #1
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fdd9 	bl	800120a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8001658:	e119      	b.n	800188e <_ZN13Communication9UpdateComEv+0x398>
		}
		else if (commands & TEACH_SPEED_CHANGE)
 800165a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d016      	beq.n	8001692 <_ZN13Communication9UpdateComEv+0x19c>
		{
			uint16_t value = driveSettings->getTeachSpeed();
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fe5d 	bl	8002328 <_ZNK13DriveSettings13getTeachSpeedEv>
 800166e:	4603      	mov	r3, r0
 8001670:	827b      	strh	r3, [r7, #18]
			data2send[2] = TEACH_SPEED;
 8001672:	2311      	movs	r3, #17
 8001674:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 8001676:	8a7b      	ldrh	r3, [r7, #18]
 8001678:	121b      	asrs	r3, r3, #8
 800167a:	b2db      	uxtb	r3, r3
 800167c:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 800167e:	8a7b      	ldrh	r3, [r7, #18]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(TEACH_SPEED_CHANGE);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	2102      	movs	r1, #2
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fdbd 	bl	800120a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8001690:	e0fd      	b.n	800188e <_ZN13Communication9UpdateComEv+0x398>
		}
		else if (commands & CLAMPING_TORQUE_CHANGE)
 8001692:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d016      	beq.n	80016ca <_ZN13Communication9UpdateComEv+0x1d4>
		{
			uint16_t value = driveSettings->getClampingTorque();
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 fdba 	bl	800221a <_ZNK13DriveSettings17getClampingTorqueEv>
 80016a6:	4603      	mov	r3, r0
 80016a8:	82bb      	strh	r3, [r7, #20]
			data2send[2] = CLAMPING_TORQUE;
 80016aa:	2312      	movs	r3, #18
 80016ac:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 80016ae:	8abb      	ldrh	r3, [r7, #20]
 80016b0:	121b      	asrs	r3, r3, #8
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 80016b6:	8abb      	ldrh	r3, [r7, #20]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(CLAMPING_TORQUE_CHANGE);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	2104      	movs	r1, #4
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fda1 	bl	800120a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 80016c8:	e0e1      	b.n	800188e <_ZN13Communication9UpdateComEv+0x398>
		}
		else if (commands & CLAMPING_SPEED_CHANGE)
 80016ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d016      	beq.n	8001702 <_ZN13Communication9UpdateComEv+0x20c>
		{
			uint16_t value = driveSettings->getClampingSpeed();
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 fd83 	bl	80021e4 <_ZNK13DriveSettings16getClampingSpeedEv>
 80016de:	4603      	mov	r3, r0
 80016e0:	82fb      	strh	r3, [r7, #22]
			data2send[2] = CLAMPING_SPEED;
 80016e2:	2313      	movs	r3, #19
 80016e4:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 80016e6:	8afb      	ldrh	r3, [r7, #22]
 80016e8:	121b      	asrs	r3, r3, #8
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 80016ee:	8afb      	ldrh	r3, [r7, #22]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(CLAMPING_SPEED_CHANGE);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	2108      	movs	r1, #8
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fd85 	bl	800120a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8001700:	e0c5      	b.n	800188e <_ZN13Communication9UpdateComEv+0x398>
		}
		else if (commands & SELF_SHUTDOWN_DELAY_CHANGE)
 8001702:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001704:	f003 0310 	and.w	r3, r3, #16
 8001708:	2b00      	cmp	r3, #0
 800170a:	d016      	beq.n	800173a <_ZN13Communication9UpdateComEv+0x244>
		{
			uint16_t value = driveSettings->getSelfShutdownDelay();
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	4618      	mov	r0, r3
 8001712:	f000 fdee 	bl	80022f2 <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8001716:	4603      	mov	r3, r0
 8001718:	833b      	strh	r3, [r7, #24]
			data2send[2] = SELF_SHUTDOWN_DELAY;
 800171a:	2314      	movs	r3, #20
 800171c:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 800171e:	8b3b      	ldrh	r3, [r7, #24]
 8001720:	121b      	asrs	r3, r3, #8
 8001722:	b2db      	uxtb	r3, r3
 8001724:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8001726:	8b3b      	ldrh	r3, [r7, #24]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(SELF_SHUTDOWN_DELAY_CHANGE);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	2110      	movs	r1, #16
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fd69 	bl	800120a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8001738:	e0a9      	b.n	800188e <_ZN13Communication9UpdateComEv+0x398>
		}
		else if (commands & IN_POS_DIFF_CHANGE)
 800173a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800173c:	f003 0320 	and.w	r3, r3, #32
 8001740:	2b00      	cmp	r3, #0
 8001742:	d016      	beq.n	8001772 <_ZN13Communication9UpdateComEv+0x27c>
		{
			uint16_t value = driveSettings->getInPosDiff();
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4618      	mov	r0, r3
 800174a:	f000 fd81 	bl	8002250 <_ZNK13DriveSettings12getInPosDiffEv>
 800174e:	4603      	mov	r3, r0
 8001750:	837b      	strh	r3, [r7, #26]
			data2send[2] = IN_POS_DIFF;
 8001752:	2315      	movs	r3, #21
 8001754:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 8001756:	8b7b      	ldrh	r3, [r7, #26]
 8001758:	121b      	asrs	r3, r3, #8
 800175a:	b2db      	uxtb	r3, r3
 800175c:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 800175e:	8b7b      	ldrh	r3, [r7, #26]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(IN_POS_DIFF_CHANGE);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	2120      	movs	r1, #32
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fd4d 	bl	800120a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8001770:	e08d      	b.n	800188e <_ZN13Communication9UpdateComEv+0x398>
		}
		else if (commands & OPENING_DISTANCE_CHANGE)
 8001772:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001778:	2b00      	cmp	r3, #0
 800177a:	d016      	beq.n	80017aa <_ZN13Communication9UpdateComEv+0x2b4>
		{
			uint16_t value = driveSettings->getOpeningDistance();
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	4618      	mov	r0, r3
 8001782:	f000 fd80 	bl	8002286 <_ZNK13DriveSettings18getOpeningDistanceEv>
 8001786:	4603      	mov	r3, r0
 8001788:	83bb      	strh	r3, [r7, #28]
			data2send[2] = OPENING_DISTANCE;
 800178a:	2316      	movs	r3, #22
 800178c:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 800178e:	8bbb      	ldrh	r3, [r7, #28]
 8001790:	121b      	asrs	r3, r3, #8
 8001792:	b2db      	uxtb	r3, r3
 8001794:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8001796:	8bbb      	ldrh	r3, [r7, #28]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(OPENING_DISTANCE_CHANGE);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	2140      	movs	r1, #64	; 0x40
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fd31 	bl	800120a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 80017a8:	e071      	b.n	800188e <_ZN13Communication9UpdateComEv+0x398>
		}
		else if (commands & UNDERVOLTAGE_WARNING_CHANGE)
 80017aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d016      	beq.n	80017e2 <_ZN13Communication9UpdateComEv+0x2ec>
		{
			uint16_t value = driveSettings->getUnderVoltageWarning();
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fe06 	bl	80023ca <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 80017be:	4603      	mov	r3, r0
 80017c0:	83fb      	strh	r3, [r7, #30]
			data2send[2] = UNDERVOLTAGE_WARNING;
 80017c2:	2317      	movs	r3, #23
 80017c4:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 80017c6:	8bfb      	ldrh	r3, [r7, #30]
 80017c8:	121b      	asrs	r3, r3, #8
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 80017ce:	8bfb      	ldrh	r3, [r7, #30]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(UNDERVOLTAGE_WARNING_CHANGE);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	2180      	movs	r1, #128	; 0x80
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fd15 	bl	800120a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 80017e0:	e055      	b.n	800188e <_ZN13Communication9UpdateComEv+0x398>
		}
		else if (commands & UNDERVOLTAGE_ERROR_CHANGE)
 80017e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d017      	beq.n	800181c <_ZN13Communication9UpdateComEv+0x326>
		{
			uint16_t value = driveSettings->getUnderVoltageError();
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 fdcf 	bl	8002394 <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 80017f6:	4603      	mov	r3, r0
 80017f8:	843b      	strh	r3, [r7, #32]
			data2send[2] = UNDERVOLTAGE_ERROR;
 80017fa:	2318      	movs	r3, #24
 80017fc:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 80017fe:	8c3b      	ldrh	r3, [r7, #32]
 8001800:	121b      	asrs	r3, r3, #8
 8001802:	b2db      	uxtb	r3, r3
 8001804:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8001806:	8c3b      	ldrh	r3, [r7, #32]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(UNDERVOLTAGE_ERROR_CHANGE);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fcf8 	bl	800120a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 800181a:	e038      	b.n	800188e <_ZN13Communication9UpdateComEv+0x398>
		}
		else if (commands & OVER_CURRENT_WARNING_CHANGE)
 800181c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800181e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001822:	2b00      	cmp	r3, #0
 8001824:	d017      	beq.n	8001856 <_ZN13Communication9UpdateComEv+0x360>
		{
			uint16_t value = driveSettings->getOverCurrentWarning();
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4618      	mov	r0, r3
 800182c:	f000 fd46 	bl	80022bc <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8001830:	4603      	mov	r3, r0
 8001832:	847b      	strh	r3, [r7, #34]	; 0x22
			data2send[2] = OVER_CURRENT_WARNING;
 8001834:	2319      	movs	r3, #25
 8001836:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 8001838:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800183a:	121b      	asrs	r3, r3, #8
 800183c:	b2db      	uxtb	r3, r3
 800183e:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 8001840:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001842:	b2db      	uxtb	r3, r3
 8001844:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(OVER_CURRENT_WARNING_CHANGE);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fcdb 	bl	800120a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
 8001854:	e01b      	b.n	800188e <_ZN13Communication9UpdateComEv+0x398>
		}
		else if (commands & OVER_CURRENT_ERROR_CHANGE)
 8001856:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185c:	2b00      	cmp	r3, #0
 800185e:	d016      	beq.n	800188e <_ZN13Communication9UpdateComEv+0x398>
		{
			uint16_t value = driveSettings->getOverCurrentError();
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	4618      	mov	r0, r3
 8001866:	f000 fdcb 	bl	8002400 <_ZNK13DriveSettings19getOverCurrentErrorEv>
 800186a:	4603      	mov	r3, r0
 800186c:	84bb      	strh	r3, [r7, #36]	; 0x24
			data2send[2] = OVER_CURRENT_ERROR;
 800186e:	231a      	movs	r3, #26
 8001870:	72bb      	strb	r3, [r7, #10]
			data2send[3] = value >> 8;
 8001872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001874:	121b      	asrs	r3, r3, #8
 8001876:	b2db      	uxtb	r3, r3
 8001878:	72fb      	strb	r3, [r7, #11]
			data2send[4] = value;
 800187a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800187c:	b2db      	uxtb	r3, r3
 800187e:	733b      	strb	r3, [r7, #12]
			digitalInOut->ResetSettingsChanged(OVER_CURRENT_ERROR_CHANGE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fcbe 	bl	800120a <_ZN14Digitll_IN_OUT20ResetSettingsChangedEt>
		}

		data2send[4] = 6;
 800188e:	2306      	movs	r3, #6
 8001890:	733b      	strb	r3, [r7, #12]
		data2send[5] = CRC8(data2send, data2send[4]-1);
 8001892:	7b3b      	ldrb	r3, [r7, #12]
 8001894:	3b01      	subs	r3, #1
 8001896:	b2da      	uxtb	r2, r3
 8001898:	f107 0308 	add.w	r3, r7, #8
 800189c:	4619      	mov	r1, r3
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f88f 	bl	80019c2 <_ZN13Communication4CRC8EPhh>
 80018a4:	4603      	mov	r3, r0
 80018a6:	737b      	strb	r3, [r7, #13]
 80018a8:	e015      	b.n	80018d6 <_ZN13Communication9UpdateComEv+0x3e0>
	}
	else
	{
		data2send[0] = driveSettings->getDeviceAddress();
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fdc1 	bl	8002436 <_ZNK13DriveSettings16getDeviceAddressEv>
 80018b4:	4603      	mov	r3, r0
 80018b6:	723b      	strb	r3, [r7, #8]
		data2send[1] = SEND_STATUS_REQ;
 80018b8:	2303      	movs	r3, #3
 80018ba:	727b      	strb	r3, [r7, #9]
		data2send[2] = 4;
 80018bc:	2304      	movs	r3, #4
 80018be:	72bb      	strb	r3, [r7, #10]
		data2send[3] = CRC8(data2send, data2send[2]-1);
 80018c0:	7abb      	ldrb	r3, [r7, #10]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	f107 0308 	add.w	r3, r7, #8
 80018ca:	4619      	mov	r1, r3
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f878 	bl	80019c2 <_ZN13Communication4CRC8EPhh>
 80018d2:	4603      	mov	r3, r0
 80018d4:	72fb      	strb	r3, [r7, #11]
	}

	rfm95->write(data2send, 6);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68d8      	ldr	r0, [r3, #12]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	3304      	adds	r3, #4
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f107 0108 	add.w	r1, r7, #8
 80018e8:	2206      	movs	r2, #6
 80018ea:	4798      	blx	r3
	return true;
 80018ec:	2301      	movs	r3, #1
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	372c      	adds	r7, #44	; 0x2c
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd90      	pop	{r4, r7, pc}

080018f6 <_ZN13Communication8ReadDataEv>:


void Communication::ReadData(){
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b084      	sub	sp, #16
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]

	uint8_t packetSize = rfm95->parsePacket();
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f000 f980 	bl	8001c0a <_ZN10RFM95_LoRa11parsePacketEi>
 800190a:	4603      	mov	r3, r0
 800190c:	73fb      	strb	r3, [r7, #15]
	if(packetSize != 0){
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d053      	beq.n	80019bc <_ZN13Communication8ReadDataEv+0xc6>
		uint8_t counter = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	73bb      	strb	r3, [r7, #14]
		while(rfm95->available()){
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	3308      	adds	r3, #8
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4610      	mov	r0, r2
 8001928:	4798      	blx	r3
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf14      	ite	ne
 8001930:	2301      	movne	r3, #1
 8001932:	2300      	moveq	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d013      	beq.n	8001962 <_ZN13Communication8ReadDataEv+0x6c>
			rxData[counter] = rfm95->read();
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	330c      	adds	r3, #12
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4610      	mov	r0, r2
 800194a:	4798      	blx	r3
 800194c:	4602      	mov	r2, r0
 800194e:	7bbb      	ldrb	r3, [r7, #14]
 8001950:	b2d1      	uxtb	r1, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	460a      	mov	r2, r1
 8001958:	751a      	strb	r2, [r3, #20]
			if(counter > MAX_PACKET_2_RECEIVE){
 800195a:	7bbb      	ldrb	r3, [r7, #14]
 800195c:	2b0a      	cmp	r3, #10
 800195e:	d828      	bhi.n	80019b2 <_ZN13Communication8ReadDataEv+0xbc>
		while(rfm95->available()){
 8001960:	e7da      	b.n	8001918 <_ZN13Communication8ReadDataEv+0x22>
				return;
			}
		}

		//uint8_t addr = rxData[0];
		uint8_t command = rxData[1];
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	7d5b      	ldrb	r3, [r3, #21]
 8001966:	737b      	strb	r3, [r7, #13]
		//data = rxData[2...(counter-1)]
		//uint8_t size = rxData[counter-1];
		uint8_t crc8 = rxData[counter];
 8001968:	7bbb      	ldrb	r3, [r7, #14]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	7d1b      	ldrb	r3, [r3, #20]
 8001970:	733b      	strb	r3, [r7, #12]

		if(CRC8(rxData, counter-1) != crc8){
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f103 0114 	add.w	r1, r3, #20
 8001978:	7bbb      	ldrb	r3, [r7, #14]
 800197a:	3b01      	subs	r3, #1
 800197c:	b2db      	uxtb	r3, r3
 800197e:	461a      	mov	r2, r3
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f81e 	bl	80019c2 <_ZN13Communication4CRC8EPhh>
 8001986:	4603      	mov	r3, r0
 8001988:	461a      	mov	r2, r3
 800198a:	7b3b      	ldrb	r3, [r7, #12]
 800198c:	4293      	cmp	r3, r2
 800198e:	bf14      	ite	ne
 8001990:	2301      	movne	r3, #1
 8001992:	2300      	moveq	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10d      	bne.n	80019b6 <_ZN13Communication8ReadDataEv+0xc0>
			//error crc error //ToDO
			return;
		}

		switch (command) {
 800199a:	7b7b      	ldrb	r3, [r7, #13]
 800199c:	2b11      	cmp	r3, #17
 800199e:	d10c      	bne.n	80019ba <_ZN13Communication8ReadDataEv+0xc4>
			case RCV_STATUS:
				digitalInOut->WriteOutput(rxData[2]);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7d9b      	ldrb	r3, [r3, #22]
 80019a8:	4619      	mov	r1, r3
 80019aa:	4610      	mov	r0, r2
 80019ac:	f7ff fc5a 	bl	8001264 <_ZN14Digitll_IN_OUT11WriteOutputEh>
				break;
 80019b0:	e004      	b.n	80019bc <_ZN13Communication8ReadDataEv+0xc6>
				return;
 80019b2:	bf00      	nop
 80019b4:	e002      	b.n	80019bc <_ZN13Communication8ReadDataEv+0xc6>
			return;
 80019b6:	bf00      	nop
 80019b8:	e000      	b.n	80019bc <_ZN13Communication8ReadDataEv+0xc6>
			default:
				//error no supported command //ToDO
				break;
 80019ba:	bf00      	nop
		}
	}
}
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <_ZN13Communication4CRC8EPhh>:


uint8_t Communication::CRC8(uint8_t *data, uint8_t length)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b089      	sub	sp, #36	; 0x24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	4613      	mov	r3, r2
 80019ce:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0xff;
 80019d0:	23ff      	movs	r3, #255	; 0xff
 80019d2:	77fb      	strb	r3, [r7, #31]
	size_t i, j;
	for (i = 0; i < length; i++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	61bb      	str	r3, [r7, #24]
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d222      	bcs.n	8001a26 <_ZN13Communication4CRC8EPhh+0x64>
	{
		crc ^= data[i];
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	4413      	add	r3, r2
 80019e6:	781a      	ldrb	r2, [r3, #0]
 80019e8:	7ffb      	ldrb	r3, [r7, #31]
 80019ea:	4053      	eors	r3, r2
 80019ec:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2b07      	cmp	r3, #7
 80019f6:	d812      	bhi.n	8001a1e <_ZN13Communication4CRC8EPhh+0x5c>
		{
			if ((crc & 0x80) != 0)
 80019f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	da07      	bge.n	8001a10 <_ZN13Communication4CRC8EPhh+0x4e>
				crc = (uint8_t) ((crc << 1) ^ 0x31);
 8001a00:	7ffb      	ldrb	r3, [r7, #31]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	b25b      	sxtb	r3, r3
 8001a06:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001a0a:	b25b      	sxtb	r3, r3
 8001a0c:	77fb      	strb	r3, [r7, #31]
 8001a0e:	e002      	b.n	8001a16 <_ZN13Communication4CRC8EPhh+0x54>
			else
				crc <<= 1;
 8001a10:	7ffb      	ldrb	r3, [r7, #31]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	77fb      	strb	r3, [r7, #31]
		for (j = 0; j < 8; j++)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	e7e9      	b.n	80019f2 <_ZN13Communication4CRC8EPhh+0x30>
	for (i = 0; i < length; i++)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	3301      	adds	r3, #1
 8001a22:	61bb      	str	r3, [r7, #24]
 8001a24:	e7d8      	b.n	80019d8 <_ZN13Communication4CRC8EPhh+0x16>
		}
	}
	return crc;
 8001a26:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3724      	adds	r7, #36	; 0x24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <_ZN10RFM95_LoRaC1Ev>:
 */

#include "RFM95.h"
#include "../AppMain/AppMain.h"

RFM95_LoRa::RFM95_LoRa() :
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  _frequency(0),
  _packetIndex(0),
  _implicitHeaderMode(0),
  _onReceive(0)
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <_ZN10RFM95_LoRaC1Ev+0x34>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	615a      	str	r2, [r3, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
{

}
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	0800de54 	.word	0x0800de54

08001a6c <_ZN10RFM95_LoRa9selectRFMEv>:
 * @brief RFM95 chip select
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::selectRFM(){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2108      	movs	r1, #8
 8001a78:	4803      	ldr	r0, [pc, #12]	; (8001a88 <_ZN10RFM95_LoRa9selectRFMEv+0x1c>)
 8001a7a:	f003 feed 	bl	8005858 <HAL_GPIO_WritePin>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	48000400 	.word	0x48000400

08001a8c <_ZN10RFM95_LoRa11deselectRFMEv>:
 * @brief RFM95 chip deselect
 *
 * @param none
 * @return none
 */
void RFM95_LoRa::deselectRFM(){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_NSS_GPIO_Port,RFM_NSS_Pin, GPIO_PIN_SET);
 8001a94:	2201      	movs	r2, #1
 8001a96:	2108      	movs	r1, #8
 8001a98:	4803      	ldr	r0, [pc, #12]	; (8001aa8 <_ZN10RFM95_LoRa11deselectRFMEv+0x1c>)
 8001a9a:	f003 fedd 	bl	8005858 <HAL_GPIO_WritePin>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	48000400 	.word	0x48000400

08001aac <_ZN10RFM95_LoRa8resetRFMEv>:

void RFM95_LoRa::resetRFM(){
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2110      	movs	r1, #16
 8001ab8:	4808      	ldr	r0, [pc, #32]	; (8001adc <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 8001aba:	f003 fecd 	bl	8005858 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f002 f9c0 	bl	8003e44 <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	2110      	movs	r1, #16
 8001ac8:	4804      	ldr	r0, [pc, #16]	; (8001adc <_ZN10RFM95_LoRa8resetRFMEv+0x30>)
 8001aca:	f003 fec5 	bl	8005858 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001ace:	2005      	movs	r0, #5
 8001ad0:	f002 f9b8 	bl	8003e44 <HAL_Delay>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	48000400 	.word	0x48000400

08001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>:

bool RFM95_LoRa::writeRegister(uint8_t addr, uint8_t data){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	70fb      	strb	r3, [r7, #3]
 8001aec:	4613      	mov	r3, r2
 8001aee:	70bb      	strb	r3, [r7, #2]
	uint8_t buff[2] = {(uint8_t)(addr | 0x80), data};
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	733b      	strb	r3, [r7, #12]
 8001afa:	78bb      	ldrb	r3, [r7, #2]
 8001afc:	737b      	strb	r3, [r7, #13]
	selectRFM();
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ffb4 	bl	8001a6c <_ZN10RFM95_LoRa9selectRFMEv>
	if(HAL_SPI_Transmit(&hspi3, (uint8_t*)buff, 2, 100) != HAL_OK){
 8001b04:	f107 010c 	add.w	r1, r7, #12
 8001b08:	2364      	movs	r3, #100	; 0x64
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	480b      	ldr	r0, [pc, #44]	; (8001b3c <_ZN10RFM95_LoRa13writeRegisterEhh+0x5c>)
 8001b0e:	f006 feba 	bl	8008886 <HAL_SPI_Transmit>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bf14      	ite	ne
 8001b18:	2301      	movne	r3, #1
 8001b1a:	2300      	moveq	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d004      	beq.n	8001b2c <_ZN10RFM95_LoRa13writeRegisterEhh+0x4c>
		deselectRFM();
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffb2 	bl	8001a8c <_ZN10RFM95_LoRa11deselectRFMEv>
		return false;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	e003      	b.n	8001b34 <_ZN10RFM95_LoRa13writeRegisterEhh+0x54>
	}
	deselectRFM();
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ffad 	bl	8001a8c <_ZN10RFM95_LoRa11deselectRFMEv>
	return true;
 8001b32:	2301      	movs	r3, #1
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000738 	.word	0x20000738

08001b40 <_ZN10RFM95_LoRa12readRegisterEh>:

uint8_t RFM95_LoRa::readRegister(uint8_t addr){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af02      	add	r7, sp, #8
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	70fb      	strb	r3, [r7, #3]
	uint8_t rxData[2] = {0,0};
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	81bb      	strh	r3, [r7, #12]
	uint8_t txData[1] = {addr};
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	723b      	strb	r3, [r7, #8]

	selectRFM();
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ff89 	bl	8001a6c <_ZN10RFM95_LoRa9selectRFMEv>
		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)txData,(uint8_t*)rxData,2,100);
 8001b5a:	f107 020c 	add.w	r2, r7, #12
 8001b5e:	f107 0108 	add.w	r1, r7, #8
 8001b62:	2364      	movs	r3, #100	; 0x64
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	2302      	movs	r3, #2
 8001b68:	4805      	ldr	r0, [pc, #20]	; (8001b80 <_ZN10RFM95_LoRa12readRegisterEh+0x40>)
 8001b6a:	f006 fffa 	bl	8008b62 <HAL_SPI_TransmitReceive>
	deselectRFM();
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff ff8c 	bl	8001a8c <_ZN10RFM95_LoRa11deselectRFMEv>
	return rxData[1];
 8001b74:	7b7b      	ldrb	r3, [r7, #13]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000738 	.word	0x20000738

08001b84 <_ZN10RFM95_LoRa5beginEl>:


int RFM95_LoRa::begin(long frequency){
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
 resetRFM();
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ff8c 	bl	8001aac <_ZN10RFM95_LoRa8resetRFMEv>
  // check version
  uint8_t version = readRegister(REG_VERSION);
 8001b94:	2142      	movs	r1, #66	; 0x42
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ffd2 	bl	8001b40 <_ZN10RFM95_LoRa12readRegisterEh>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	73fb      	strb	r3, [r7, #15]
  if (version != 0x12) {
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	2b12      	cmp	r3, #18
 8001ba4:	d001      	beq.n	8001baa <_ZN10RFM95_LoRa5beginEl+0x26>
    return 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e02b      	b.n	8001c02 <_ZN10RFM95_LoRa5beginEl+0x7e>
  }
  // put in sleep mode
  sleep();
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f952 	bl	8001e54 <_ZN10RFM95_LoRa5sleepEv>
  // set frequency
  setFrequency(frequency);
 8001bb0:	6839      	ldr	r1, [r7, #0]
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f998 	bl	8001ee8 <_ZN10RFM95_LoRa12setFrequencyEl>
  // set base addresses
  writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	210e      	movs	r1, #14
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff8f 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	210f      	movs	r1, #15
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ff8a 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set LNA boost
  writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 8001bcc:	210c      	movs	r1, #12
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ffb6 	bl	8001b40 <_ZN10RFM95_LoRa12readRegisterEh>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f043 0303 	orr.w	r3, r3, #3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	210c      	movs	r1, #12
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ff7d 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set auto AGC
  writeRegister(REG_MODEM_CONFIG_3, 0x04);
 8001be6:	2204      	movs	r2, #4
 8001be8:	2126      	movs	r1, #38	; 0x26
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ff78 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  // set output power to 17 dBm
  setTxPower(20);
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	2114      	movs	r1, #20
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f93a 	bl	8001e6e <_ZN10RFM95_LoRa10setTxPowerEii>
  // put in standby mode
  idle();
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f91d 	bl	8001e3a <_ZN10RFM95_LoRa4idleEv>
  return 1;
 8001c00:	2301      	movs	r3, #1
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_ZN10RFM95_LoRa11parsePacketEi>:



int RFM95_LoRa::parsePacket(int size)

{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b084      	sub	sp, #16
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]
  int packetLength = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  int irqFlags = readRegister(REG_IRQ_FLAGS);
 8001c18:	2112      	movs	r1, #18
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ff90 	bl	8001b40 <_ZN10RFM95_LoRa12readRegisterEh>
 8001c20:	4603      	mov	r3, r0
 8001c22:	60bb      	str	r3, [r7, #8]
  if (size > 0) {
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	dd0a      	ble.n	8001c40 <_ZN10RFM95_LoRa11parsePacketEi+0x36>
    implicitHeaderMode();
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 fa8f 	bl	800214e <_ZN10RFM95_LoRa18implicitHeaderModeEv>
    writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	2122      	movs	r1, #34	; 0x22
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ff51 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001c3e:	e002      	b.n	8001c46 <_ZN10RFM95_LoRa11parsePacketEi+0x3c>
  } else {
    explicitHeaderMode();
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 fa6c 	bl	800211e <_ZN10RFM95_LoRa18explicitHeaderModeEv>
  }

  // clear IRQ's
  writeRegister(REG_IRQ_FLAGS, irqFlags);
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	2112      	movs	r1, #18
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ff46 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d026      	beq.n	8001cac <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d121      	bne.n	8001cac <_ZN10RFM95_LoRa11parsePacketEi+0xa2>
    // received a packet
    _packetIndex = 0;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	615a      	str	r2, [r3, #20]
    // read packet length
    if (_implicitHeaderMode) {
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <_ZN10RFM95_LoRa11parsePacketEi+0x7a>
      packetLength = readRegister(REG_PAYLOAD_LENGTH);
 8001c76:	2122      	movs	r1, #34	; 0x22
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ff61 	bl	8001b40 <_ZN10RFM95_LoRa12readRegisterEh>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	e005      	b.n	8001c90 <_ZN10RFM95_LoRa11parsePacketEi+0x86>
    } else {
      packetLength = readRegister(REG_RX_NB_BYTES);
 8001c84:	2113      	movs	r1, #19
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ff5a 	bl	8001b40 <_ZN10RFM95_LoRa12readRegisterEh>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	60fb      	str	r3, [r7, #12]
    }
    // set FIFO address to current RX address
    writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
 8001c90:	2110      	movs	r1, #16
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ff54 	bl	8001b40 <_ZN10RFM95_LoRa12readRegisterEh>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	210d      	movs	r1, #13
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ff1e 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in standby mode
    idle();
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f8c8 	bl	8001e3a <_ZN10RFM95_LoRa4idleEv>
 8001caa:	e015      	b.n	8001cd8 <_ZN10RFM95_LoRa11parsePacketEi+0xce>
  } else if (readRegister(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
 8001cac:	2101      	movs	r1, #1
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ff46 	bl	8001b40 <_ZN10RFM95_LoRa12readRegisterEh>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b86      	cmp	r3, #134	; 0x86
 8001cb8:	bf14      	ite	ne
 8001cba:	2301      	movne	r3, #1
 8001cbc:	2300      	moveq	r3, #0
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d009      	beq.n	8001cd8 <_ZN10RFM95_LoRa11parsePacketEi+0xce>
    // not currently in RX mode
    // reset FIFO address
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	210d      	movs	r1, #13
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff09 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
    // put in single RX mode
    writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001cce:	2286      	movs	r2, #134	; 0x86
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ff04 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  return packetLength;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_ZN10RFM95_LoRa5writeEh>:

float RFM95_LoRa::packetSnr(){
  return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
}

size_t RFM95_LoRa::write(uint8_t byte){
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	460b      	mov	r3, r1
 8001cec:	70fb      	strb	r3, [r7, #3]
  return write(&byte, sizeof(byte));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	1cf9      	adds	r1, r7, #3
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	4798      	blx	r3
 8001cfe:	4603      	mov	r3, r0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <_ZN10RFM95_LoRa5writeEPKhj>:



size_t RFM95_LoRa::write(const uint8_t *buffer, size_t size){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  int currentLength = readRegister(REG_PAYLOAD_LENGTH);
 8001d14:	2122      	movs	r1, #34	; 0x22
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f7ff ff12 	bl	8001b40 <_ZN10RFM95_LoRa12readRegisterEh>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	613b      	str	r3, [r7, #16]
  // check size
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	2bff      	cmp	r3, #255	; 0xff
 8001d28:	d903      	bls.n	8001d32 <_ZN10RFM95_LoRa5writeEPKhj+0x2a>
    size = MAX_PKT_LENGTH - currentLength;
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001d30:	607b      	str	r3, [r7, #4]
  }
  // write data
  for (size_t i = 0; i < size; i++) {
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d20c      	bcs.n	8001d58 <_ZN10RFM95_LoRa5writeEPKhj+0x50>
    writeRegister(REG_FIFO, buffer[i]);
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	4413      	add	r3, r2
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	2100      	movs	r1, #0
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f7ff fec8 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  for (size_t i = 0; i < size; i++) {
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	3301      	adds	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	e7ee      	b.n	8001d36 <_ZN10RFM95_LoRa5writeEPKhj+0x2e>
  }

  // update length
  writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	4413      	add	r3, r2
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	461a      	mov	r2, r3
 8001d66:	2122      	movs	r1, #34	; 0x22
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f7ff feb9 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return size;
 8001d6e:	687b      	ldr	r3, [r7, #4]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <_ZN10RFM95_LoRa9availableEv>:


int RFM95_LoRa::available()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8001d80:	2113      	movs	r1, #19
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fedc 	bl	8001b40 <_ZN10RFM95_LoRa12readRegisterEh>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	1ad3      	subs	r3, r2, r3
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <_ZN10RFM95_LoRa4readEv>:



int RFM95_LoRa::read(){
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	3308      	adds	r3, #8
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	4798      	blx	r3
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bf0c      	ite	eq
 8001db4:	2301      	moveq	r3, #1
 8001db6:	2300      	movne	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <_ZN10RFM95_LoRa4readEv+0x2a>
    return -1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	e009      	b.n	8001dd8 <_ZN10RFM95_LoRa4readEv+0x3e>
  }
  _packetIndex++;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	615a      	str	r2, [r3, #20]
  return readRegister(REG_FIFO);
 8001dce:	2100      	movs	r1, #0
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff feb5 	bl	8001b40 <_ZN10RFM95_LoRa12readRegisterEh>
 8001dd6:	4603      	mov	r3, r0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <_ZN10RFM95_LoRa4peekEv>:



int RFM95_LoRa::peek(){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if (!available()) {
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	3308      	adds	r3, #8
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	4798      	blx	r3
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	bf0c      	ite	eq
 8001dfa:	2301      	moveq	r3, #1
 8001dfc:	2300      	movne	r3, #0
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <_ZN10RFM95_LoRa4peekEv+0x2a>
    return -1;
 8001e04:	f04f 33ff 	mov.w	r3, #4294967295
 8001e08:	e013      	b.n	8001e32 <_ZN10RFM95_LoRa4peekEv+0x52>
  }
  // store current FIFO address
  int currentAddress = readRegister(REG_FIFO_ADDR_PTR);
 8001e0a:	210d      	movs	r1, #13
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff fe97 	bl	8001b40 <_ZN10RFM95_LoRa12readRegisterEh>
 8001e12:	4603      	mov	r3, r0
 8001e14:	60fb      	str	r3, [r7, #12]
  // read
  uint8_t b = readRegister(REG_FIFO);
 8001e16:	2100      	movs	r1, #0
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff fe91 	bl	8001b40 <_ZN10RFM95_LoRa12readRegisterEh>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	72fb      	strb	r3, [r7, #11]
  // restore FIFO address
  writeRegister(REG_FIFO_ADDR_PTR, currentAddress);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	210d      	movs	r1, #13
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff fe58 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  return b;
 8001e30:	7afb      	ldrb	r3, [r7, #11]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_ZN10RFM95_LoRa4idleEv>:
    explicitHeaderMode();
  }
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
}

void RFM95_LoRa::idle(){
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001e42:	2281      	movs	r2, #129	; 0x81
 8001e44:	2101      	movs	r1, #1
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff fe4a 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_ZN10RFM95_LoRa5sleepEv>:

void RFM95_LoRa::sleep(){
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8001e5c:	2280      	movs	r2, #128	; 0x80
 8001e5e:	2101      	movs	r1, #1
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff fe3d 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <_ZN10RFM95_LoRa10setTxPowerEii>:



void RFM95_LoRa::setTxPower(int level, int outputPin){
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b084      	sub	sp, #16
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
  if (PA_OUTPUT_RFO_PIN == outputPin) {
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d116      	bne.n	8001eae <_ZN10RFM95_LoRa10setTxPowerEii+0x40>
    // RFO
    if (level < 0) {
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	da02      	bge.n	8001e8c <_ZN10RFM95_LoRa10setTxPowerEii+0x1e>
      level = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	e004      	b.n	8001e96 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
    } else if (level > 14) {
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b0e      	cmp	r3, #14
 8001e90:	dd01      	ble.n	8001e96 <_ZN10RFM95_LoRa10setTxPowerEii+0x28>
      level = 14;
 8001e92:	230e      	movs	r3, #14
 8001e94:	60bb      	str	r3, [r7, #8]
    }
    writeRegister(REG_PA_CONFIG, 0x70 | level);
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	b25b      	sxtb	r3, r3
 8001e9a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001e9e:	b25b      	sxtb	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	2109      	movs	r1, #9
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f7ff fe1a 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
    } else if (level > 17) {
      level = 17;
    }
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
  }
}
 8001eac:	e018      	b.n	8001ee0 <_ZN10RFM95_LoRa10setTxPowerEii+0x72>
    if (level < 2) {
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	dc02      	bgt.n	8001eba <_ZN10RFM95_LoRa10setTxPowerEii+0x4c>
      level = 2;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	e004      	b.n	8001ec4 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
    } else if (level > 17) {
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2b11      	cmp	r3, #17
 8001ebe:	dd01      	ble.n	8001ec4 <_ZN10RFM95_LoRa10setTxPowerEii+0x56>
      level = 17;
 8001ec0:	2311      	movs	r3, #17
 8001ec2:	60bb      	str	r3, [r7, #8]
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	3b02      	subs	r3, #2
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	b25b      	sxtb	r3, r3
 8001ece:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ed2:	b25b      	sxtb	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	2109      	movs	r1, #9
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f7ff fe00 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001ee0:	bf00      	nop
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <_ZN10RFM95_LoRa12setFrequencyEl>:



void RFM95_LoRa::setFrequency(long frequency){
 8001ee8:	b5b0      	push	{r4, r5, r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  _frequency = frequency;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	611a      	str	r2, [r3, #16]
  uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001f00:	1355      	asrs	r5, r2, #13
 8001f02:	04d4      	lsls	r4, r2, #19
 8001f04:	4a1a      	ldr	r2, [pc, #104]	; (8001f70 <_ZN10RFM95_LoRa12setFrequencyEl+0x88>)
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	4629      	mov	r1, r5
 8001f0e:	f7fe f95d 	bl	80001cc <__aeabi_uldivmod>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	e9c7 2302 	strd	r2, r3, [r7, #8]
  writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8001f1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	0c02      	lsrs	r2, r0, #16
 8001f28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001f2c:	0c0b      	lsrs	r3, r1, #16
 8001f2e:	b2d3      	uxtb	r3, r2
 8001f30:	461a      	mov	r2, r3
 8001f32:	2106      	movs	r1, #6
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff fdd3 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8001f3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	0a02      	lsrs	r2, r0, #8
 8001f48:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001f4c:	0a0b      	lsrs	r3, r1, #8
 8001f4e:	b2d3      	uxtb	r3, r2
 8001f50:	461a      	mov	r2, r3
 8001f52:	2107      	movs	r1, #7
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff fdc3 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8001f5a:	7a3b      	ldrb	r3, [r7, #8]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	2108      	movs	r1, #8
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff fdbd 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	01e84800 	.word	0x01e84800

08001f74 <_ZN10RFM95_LoRa18setSpreadingFactorEi>:



void RFM95_LoRa::setSpreadingFactor(int sf){
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  if (sf < 6) {
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	dc02      	bgt.n	8001f8a <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x16>
    sf = 6;
 8001f84:	2306      	movs	r3, #6
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	e004      	b.n	8001f94 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
  } else if (sf > 12) {
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b0c      	cmp	r3, #12
 8001f8e:	dd01      	ble.n	8001f94 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x20>
    sf = 12;
 8001f90:	230c      	movs	r3, #12
 8001f92:	603b      	str	r3, [r7, #0]
  }

  if (sf == 6) {
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	2b06      	cmp	r3, #6
 8001f98:	d10a      	bne.n	8001fb0 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x3c>
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 8001f9a:	22c5      	movs	r2, #197	; 0xc5
 8001f9c:	2131      	movs	r1, #49	; 0x31
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff fd9e 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 8001fa4:	220c      	movs	r2, #12
 8001fa6:	2137      	movs	r1, #55	; 0x37
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff fd99 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
 8001fae:	e009      	b.n	8001fc4 <_ZN10RFM95_LoRa18setSpreadingFactorEi+0x50>
  } else {
    writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 8001fb0:	22c3      	movs	r2, #195	; 0xc3
 8001fb2:	2131      	movs	r1, #49	; 0x31
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff fd93 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
    writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 8001fba:	220a      	movs	r2, #10
 8001fbc:	2137      	movs	r1, #55	; 0x37
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fd8e 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
  }
  writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 8001fc4:	211e      	movs	r1, #30
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fdba 	bl	8001b40 <_ZN10RFM95_LoRa12readRegisterEh>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	b25b      	sxtb	r3, r3
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	b25a      	sxtb	r2, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	b25b      	sxtb	r3, r3
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	b25b      	sxtb	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	211e      	movs	r1, #30
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff fd7a 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <_ZN10RFM95_LoRa18setSignalBandwidthEl>:


void RFM95_LoRa::setSignalBandwidth(long sbw){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  int bw;
  if (sbw <= 7.8E3) {
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	f641 6278 	movw	r2, #7800	; 0x1e78
 8002004:	4293      	cmp	r3, r2
 8002006:	dc02      	bgt.n	800200e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x1a>
    bw = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	e03f      	b.n	800208e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 10.4E3) {
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8002014:	4293      	cmp	r3, r2
 8002016:	dc02      	bgt.n	800201e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x2a>
    bw = 1;
 8002018:	2301      	movs	r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	e037      	b.n	800208e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 15.6E3) {
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 8002024:	4293      	cmp	r3, r2
 8002026:	dc02      	bgt.n	800202e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x3a>
    bw = 2;
 8002028:	2302      	movs	r3, #2
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	e02f      	b.n	800208e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 20.8E3) {
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	f245 1240 	movw	r2, #20800	; 0x5140
 8002034:	4293      	cmp	r3, r2
 8002036:	dc02      	bgt.n	800203e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x4a>
    bw = 3;
 8002038:	2303      	movs	r3, #3
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	e027      	b.n	800208e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 31.25E3) {
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	f647 2212 	movw	r2, #31250	; 0x7a12
 8002044:	4293      	cmp	r3, r2
 8002046:	dc02      	bgt.n	800204e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x5a>
    bw = 4;
 8002048:	2304      	movs	r3, #4
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	e01f      	b.n	800208e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 41.7E3) {
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 8002054:	4293      	cmp	r3, r2
 8002056:	dc02      	bgt.n	800205e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x6a>
    bw = 5;
 8002058:	2305      	movs	r3, #5
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	e017      	b.n	800208e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 62.5E3) {
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002064:	4293      	cmp	r3, r2
 8002066:	dc02      	bgt.n	800206e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x7a>
    bw = 6;
 8002068:	2306      	movs	r3, #6
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	e00f      	b.n	800208e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 125E3) {
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	4a13      	ldr	r2, [pc, #76]	; (80020c0 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xcc>)
 8002072:	4293      	cmp	r3, r2
 8002074:	dc02      	bgt.n	800207c <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x88>
    bw = 7;
 8002076:	2307      	movs	r3, #7
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	e008      	b.n	800208e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else if (sbw <= 250E3) {
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	4a11      	ldr	r2, [pc, #68]	; (80020c4 <_ZN10RFM95_LoRa18setSignalBandwidthEl+0xd0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	dc02      	bgt.n	800208a <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x96>
    bw = 8;
 8002084:	2308      	movs	r3, #8
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	e001      	b.n	800208e <_ZN10RFM95_LoRa18setSignalBandwidthEl+0x9a>
  } else /*if (sbw <= 250E3)*/ {
    bw = 9;
 800208a:	2309      	movs	r3, #9
 800208c:	60fb      	str	r3, [r7, #12]
  }

  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 800208e:	211d      	movs	r1, #29
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff fd55 	bl	8001b40 <_ZN10RFM95_LoRa12readRegisterEh>
 8002096:	4603      	mov	r3, r0
 8002098:	b25b      	sxtb	r3, r3
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	b25a      	sxtb	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	b25b      	sxtb	r3, r3
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b25b      	sxtb	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	461a      	mov	r2, r3
 80020ae:	211d      	movs	r1, #29
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff fd15 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	0001e848 	.word	0x0001e848
 80020c4:	0003d090 	.word	0x0003d090

080020c8 <_ZN10RFM95_LoRa14setCodingRate4Ei>:



void RFM95_LoRa::setCodingRate4(int denominator){
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  if (denominator < 5) {
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	dc02      	bgt.n	80020de <_ZN10RFM95_LoRa14setCodingRate4Ei+0x16>
    denominator = 5;
 80020d8:	2305      	movs	r3, #5
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	e004      	b.n	80020e8 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
  } else if (denominator > 8) {
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	dd01      	ble.n	80020e8 <_ZN10RFM95_LoRa14setCodingRate4Ei+0x20>
	  denominator = 8;
 80020e4:	2308      	movs	r3, #8
 80020e6:	603b      	str	r3, [r7, #0]
  }
  int cr = denominator - 4;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	3b04      	subs	r3, #4
 80020ec:	60fb      	str	r3, [r7, #12]
  writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 80020ee:	211d      	movs	r1, #29
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff fd25 	bl	8001b40 <_ZN10RFM95_LoRa12readRegisterEh>
 80020f6:	4603      	mov	r3, r0
 80020f8:	b25b      	sxtb	r3, r3
 80020fa:	f023 030e 	bic.w	r3, r3, #14
 80020fe:	b25a      	sxtb	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	b25b      	sxtb	r3, r3
 8002106:	4313      	orrs	r3, r2
 8002108:	b25b      	sxtb	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	211d      	movs	r1, #29
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff fce5 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <_ZN10RFM95_LoRa18explicitHeaderModeEv>:
uint8_t RFM95_LoRa::random(){
  return readRegister(REG_RSSI_WIDEBAND);
}


void RFM95_LoRa::explicitHeaderMode(){
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 0;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 800212c:	211d      	movs	r1, #29
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff fd06 	bl	8001b40 <_ZN10RFM95_LoRa12readRegisterEh>
 8002134:	4603      	mov	r3, r0
 8002136:	f023 0301 	bic.w	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	211d      	movs	r1, #29
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff fccd 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <_ZN10RFM95_LoRa18implicitHeaderModeEv>:


void RFM95_LoRa::implicitHeaderMode(){
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  _implicitHeaderMode = 1;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	619a      	str	r2, [r3, #24]
  writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 800215c:	211d      	movs	r1, #29
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff fcee 	bl	8001b40 <_ZN10RFM95_LoRa12readRegisterEh>
 8002164:	4603      	mov	r3, r0
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	b2db      	uxtb	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	211d      	movs	r1, #29
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff fcb5 	bl	8001ae0 <_ZN10RFM95_LoRa13writeRegisterEhh>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <_ZN10RFM95_LoRa7InitRFMEv>:
    writeRegister(REG_FIFO_ADDR_PTR, 0);
  }
}


bool RFM95_LoRa::InitRFM(){
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]


	setFrequency(868000000);
 8002188:	4914      	ldr	r1, [pc, #80]	; (80021dc <_ZN10RFM95_LoRa7InitRFMEv+0x5c>)
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff feac 	bl	8001ee8 <_ZN10RFM95_LoRa12setFrequencyEl>
	setTxPower(17, PA_OUTPUT_PA_BOOST_PIN);
 8002190:	2201      	movs	r2, #1
 8002192:	2111      	movs	r1, #17
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff fe6a 	bl	8001e6e <_ZN10RFM95_LoRa10setTxPowerEii>
	setSignalBandwidth(31.25E3);
 800219a:	f647 2112 	movw	r1, #31250	; 0x7a12
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ff28 	bl	8001ff4 <_ZN10RFM95_LoRa18setSignalBandwidthEl>
	setSpreadingFactor(12);
 80021a4:	210c      	movs	r1, #12
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff fee4 	bl	8001f74 <_ZN10RFM95_LoRa18setSpreadingFactorEi>
	setCodingRate4(5);
 80021ac:	2105      	movs	r1, #5
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ff8a 	bl	80020c8 <_ZN10RFM95_LoRa14setCodingRate4Ei>
	if (!begin(866E6)) {
 80021b4:	490a      	ldr	r1, [pc, #40]	; (80021e0 <_ZN10RFM95_LoRa7InitRFMEv+0x60>)
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff fce4 	bl	8001b84 <_ZN10RFM95_LoRa5beginEl>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	bf0c      	ite	eq
 80021c2:	2301      	moveq	r3, #1
 80021c4:	2300      	movne	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <_ZN10RFM95_LoRa7InitRFMEv+0x50>
		return false;
 80021cc:	2300      	movs	r3, #0
 80021ce:	e000      	b.n	80021d2 <_ZN10RFM95_LoRa7InitRFMEv+0x52>
	}
	return true;
 80021d0:	2301      	movs	r3, #1
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	33bca100 	.word	0x33bca100
 80021e0:	339e1c80 	.word	0x339e1c80

080021e4 <_ZNK13DriveSettings16getClampingSpeedEv>:

/****************************************************************************************
 / * 	Clamping speed get/set
 ****************************************************************************************/
uint16_t DriveSettings::getClampingSpeed() const
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	return clampingSpeed;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	891b      	ldrh	r3, [r3, #8]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_ZN13DriveSettings16setClampingSpeedEt>:

void DriveSettings::setClampingSpeed(uint16_t clampingSpeed)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	807b      	strh	r3, [r7, #2]
	this->clampingSpeed = clampingSpeed;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	887a      	ldrh	r2, [r7, #2]
 800220c:	811a      	strh	r2, [r3, #8]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <_ZNK13DriveSettings17getClampingTorqueEv>:

/****************************************************************************************
 / * 	Clamping torque get/set
 ****************************************************************************************/
uint16_t DriveSettings::getClampingTorque() const
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
	return clampingTorque;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	889b      	ldrh	r3, [r3, #4]
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <_ZN13DriveSettings17setClampingTorqueEt>:

void DriveSettings::setClampingTorque(uint16_t clampingTorque)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	460b      	mov	r3, r1
 800223c:	807b      	strh	r3, [r7, #2]
	this->clampingTorque = clampingTorque;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	887a      	ldrh	r2, [r7, #2]
 8002242:	809a      	strh	r2, [r3, #4]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <_ZNK13DriveSettings12getInPosDiffEv>:

/****************************************************************************************
 / * 	clamping position difference get/set
 ****************************************************************************************/
uint16_t DriveSettings::getInPosDiff() const
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	return inPosDiff;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	899b      	ldrh	r3, [r3, #12]
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <_ZN13DriveSettings12setInPosDiffEt>:

void DriveSettings::setInPosDiff(uint16_t inPosDiff)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	807b      	strh	r3, [r7, #2]
	this->inPosDiff = inPosDiff;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	819a      	strh	r2, [r3, #12]
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <_ZNK13DriveSettings18getOpeningDistanceEv>:

/****************************************************************************************
 / * 	opening distance get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOpeningDistance() const
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
	return openingDistance;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	89db      	ldrh	r3, [r3, #14]
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <_ZN13DriveSettings18setOpeningDistanceEt>:

void DriveSettings::setOpeningDistance(uint16_t openingDistance)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	460b      	mov	r3, r1
 80022a8:	807b      	strh	r3, [r7, #2]
	this->openingDistance = openingDistance;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	887a      	ldrh	r2, [r7, #2]
 80022ae:	81da      	strh	r2, [r3, #14]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <_ZNK13DriveSettings21getOverCurrentWarningEv>:

/****************************************************************************************
 / * 	overcurrent warning get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentWarning() const
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	return overCurrentWarning;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	8a9b      	ldrh	r3, [r3, #20]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <_ZN13DriveSettings21setOverCurrentWarningEt>:

void DriveSettings::setOverCurrentWarning(uint16_t overCurrentWarning)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
	this->overCurrentWarning = overCurrentWarning;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	829a      	strh	r2, [r3, #20]
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <_ZNK13DriveSettings20getSelfShutdownDelayEv>:

/****************************************************************************************
 / * 	self shutdown delay get/set
 ****************************************************************************************/
uint16_t DriveSettings::getSelfShutdownDelay() const
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
	return selfShutdownDelay;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	895b      	ldrh	r3, [r3, #10]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <_ZN13DriveSettings20setSelfShutdownDelayEt>:

void DriveSettings::setSelfShutdownDelay(uint16_t selfShutdownDelay)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	460b      	mov	r3, r1
 8002314:	807b      	strh	r3, [r7, #2]
	this->selfShutdownDelay = selfShutdownDelay;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	887a      	ldrh	r2, [r7, #2]
 800231a:	815a      	strh	r2, [r3, #10]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <_ZNK13DriveSettings13getTeachSpeedEv>:

/****************************************************************************************
 / * 	teach speed get/set
 ****************************************************************************************/
uint16_t DriveSettings::getTeachSpeed() const
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	return teachSpeed;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	88db      	ldrh	r3, [r3, #6]
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <_ZN13DriveSettings13setTeachSpeedEt>:

void DriveSettings::setTeachSpeed(uint16_t teachSpeed)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
	this->teachSpeed = teachSpeed;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	80da      	strh	r2, [r3, #6]
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <_ZNK13DriveSettings14getTeachTroqueEv>:

/****************************************************************************************
 / * 	teach torque get/set
 ****************************************************************************************/
uint16_t DriveSettings::getTeachTroque() const
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
	return teachTroque;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	885b      	ldrh	r3, [r3, #2]
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <_ZN13DriveSettings14setTeachTroqueEt>:

void DriveSettings::setTeachTroque(uint16_t teachTroque)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	460b      	mov	r3, r1
 8002380:	807b      	strh	r3, [r7, #2]
	this->teachTroque = teachTroque;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	887a      	ldrh	r2, [r7, #2]
 8002386:	805a      	strh	r2, [r3, #2]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <_ZNK13DriveSettings20getUnderVoltageErrorEv>:

/****************************************************************************************
 / * 	undervoltage error get/set
 ****************************************************************************************/
uint16_t DriveSettings::getUnderVoltageError() const
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	return underVoltageError;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	8a5b      	ldrh	r3, [r3, #18]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_ZN13DriveSettings20setUnderVoltageErrorEt>:

void DriveSettings::setUnderVoltageError(uint16_t underVoltageError)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	807b      	strh	r3, [r7, #2]
	this->underVoltageError = underVoltageError;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	887a      	ldrh	r2, [r7, #2]
 80023bc:	825a      	strh	r2, [r3, #18]
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <_ZNK13DriveSettings22getUnderVoltageWarningEv>:

/****************************************************************************************
 / * 	undervoltage warning get/set
 ****************************************************************************************/
uint16_t DriveSettings::getUnderVoltageWarning() const
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
	return underVoltageWarning;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	8a1b      	ldrh	r3, [r3, #16]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <_ZN13DriveSettings22setUnderVoltageWarningEt>:

void DriveSettings::setUnderVoltageWarning(uint16_t underVoltageWarning)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	460b      	mov	r3, r1
 80023ec:	807b      	strh	r3, [r7, #2]
	this->underVoltageWarning = underVoltageWarning;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	887a      	ldrh	r2, [r7, #2]
 80023f2:	821a      	strh	r2, [r3, #16]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <_ZNK13DriveSettings19getOverCurrentErrorEv>:

/****************************************************************************************
 / * 	overcurrent error get/set
 ****************************************************************************************/
uint16_t DriveSettings::getOverCurrentError() const
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	return overCurrentError;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	8adb      	ldrh	r3, [r3, #22]
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <_ZN13DriveSettings19setOverCurrentErrorEt>:

void DriveSettings::setOverCurrentError(uint16_t overCurrentError)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
	this->overCurrentError = overCurrentError;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	887a      	ldrh	r2, [r7, #2]
 8002428:	82da      	strh	r2, [r3, #22]
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <_ZNK13DriveSettings16getDeviceAddressEv>:

/****************************************************************************************
 / * 	device address get/set
 ****************************************************************************************/
uint8_t DriveSettings::getDeviceAddress() const
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
	return deviceAddress;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	781b      	ldrb	r3, [r3, #0]
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <_ZN13DriveSettings16setDeviceAddressEh>:

void DriveSettings::setDeviceAddress(uint8_t deviceAddress = 0)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	460b      	mov	r3, r1
 8002458:	70fb      	strb	r3, [r7, #3]
	this->deviceAddress = deviceAddress;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	701a      	strb	r2, [r3, #0]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_ZN12DriveCommandC1Ev>:
 */

#include "DriveCommand.h"


DriveCommand::DriveCommand()
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	705a      	strb	r2, [r3, #1]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	709a      	strb	r2, [r3, #2]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	70da      	strb	r2, [r3, #3]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	711a      	strb	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	715a      	strb	r2, [r3, #5]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	719a      	strb	r2, [r3, #6]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	71da      	strb	r2, [r3, #7]
{
}
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <_ZN12DriveCommand7isCloseEv>:

/****************************************************************************************
 / * 	close get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isClose()
{
 80024b2:	b480      	push	{r7}
 80024b4:	b085      	sub	sp, #20
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
	bool closeTemp = close;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	73fb      	strb	r3, [r7, #15]
	close = false;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
	return closeTemp;
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <_ZN12DriveCommand8setCloseEb>:

void DriveCommand::setClose(bool close)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	70fb      	strb	r3, [r7, #3]
	this->close = close;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	701a      	strb	r2, [r3, #0]
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <_ZN12DriveCommand6isOpenEv>:

/****************************************************************************************
 / * 	open get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isOpen()
{
 80024f2:	b480      	push	{r7}
 80024f4:	b085      	sub	sp, #20
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
	bool openTemp = open;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	785b      	ldrb	r3, [r3, #1]
 80024fe:	73fb      	strb	r3, [r7, #15]
	open = false;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	705a      	strb	r2, [r3, #1]
	return openTemp;
 8002506:	7bfb      	ldrb	r3, [r7, #15]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <_ZN12DriveCommand7setOpenEb>:

void DriveCommand::setOpen(bool open)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	70fb      	strb	r3, [r7, #3]
	this->open = open;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	78fa      	ldrb	r2, [r7, #3]
 8002524:	705a      	strb	r2, [r3, #1]
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <_ZN12DriveCommand9isDisableEv>:

/****************************************************************************************
 / * 	disable get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isDisable()
{
 8002532:	b480      	push	{r7}
 8002534:	b085      	sub	sp, #20
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
	bool disableTemp = disable;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	799b      	ldrb	r3, [r3, #6]
 800253e:	73fb      	strb	r3, [r7, #15]
	disable = false;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	719a      	strb	r2, [r3, #6]
	return disableTemp;
 8002546:	7bfb      	ldrb	r3, [r7, #15]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <_ZN12DriveCommand10setDisableEb>:

void DriveCommand::setDisable(bool disable)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]
	this->disable = disable;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	78fa      	ldrb	r2, [r7, #3]
 8002564:	719a      	strb	r2, [r3, #6]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <_ZN12DriveCommand8isEnableEv>:

/****************************************************************************************
 / * 	enable get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isEnable()
{
 8002572:	b480      	push	{r7}
 8002574:	b085      	sub	sp, #20
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
	bool enableTemp = enable;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	791b      	ldrb	r3, [r3, #4]
 800257e:	73fb      	strb	r3, [r7, #15]
	enable = false;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	711a      	strb	r2, [r3, #4]
	return enableTemp;
 8002586:	7bfb      	ldrb	r3, [r7, #15]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <_ZN12DriveCommand9setEnableEb>:

void DriveCommand::setEnable(bool enable)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	70fb      	strb	r3, [r7, #3]
	this->enable = enable;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	711a      	strb	r2, [r3, #4]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <_ZN12DriveCommand7isResetEv>:

/****************************************************************************************
 / * 	reset get/set (read reset)
 ****************************************************************************************/
bool DriveCommand::isReset()
{
 80025b2:	b480      	push	{r7}
 80025b4:	b085      	sub	sp, #20
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
	bool resetTemp = reset;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	78db      	ldrb	r3, [r3, #3]
 80025be:	73fb      	strb	r3, [r7, #15]
	reset = false;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	70da      	strb	r2, [r3, #3]
	return resetTemp;
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <_ZN12DriveCommand8setResetEb>:

void DriveCommand::setReset(bool reset)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	70fb      	strb	r3, [r7, #3]
	this->reset = reset;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	78fa      	ldrb	r2, [r7, #3]
 80025e4:	70da      	strb	r2, [r3, #3]
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <_ZN12DriveCommand6isStopEv>:

/****************************************************************************************
* 	stop get/set (read reset)
****************************************************************************************/
bool DriveCommand::isStop()
{
 80025f2:	b480      	push	{r7}
 80025f4:	b085      	sub	sp, #20
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
	bool stopTemp = stop;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	795b      	ldrb	r3, [r3, #5]
 80025fe:	73fb      	strb	r3, [r7, #15]
	stop = false;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	715a      	strb	r2, [r3, #5]
	return stopTemp;
 8002606:	7bfb      	ldrb	r3, [r7, #15]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <_ZN12DriveCommand7setStopEb>:

void DriveCommand::setStop(bool stop)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	70fb      	strb	r3, [r7, #3]
	this->stop = stop;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	78fa      	ldrb	r2, [r7, #3]
 8002624:	715a      	strb	r2, [r3, #5]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <_ZN12DriveCommand7isTeachEv>:

/****************************************************************************************
* 	teach get/set (read reset)
****************************************************************************************/
bool DriveCommand::isTeach()
{
 8002632:	b480      	push	{r7}
 8002634:	b085      	sub	sp, #20
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
	bool teachTemp = teach;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	789b      	ldrb	r3, [r3, #2]
 800263e:	73fb      	strb	r3, [r7, #15]
	teach = false;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	709a      	strb	r2, [r3, #2]
	return teachTemp;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <_ZN12DriveCommand8setTeachEb>:

void DriveCommand::setTeach(bool teach)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	70fb      	strb	r3, [r7, #3]
	this->teach = teach;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	709a      	strb	r2, [r3, #2]
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <_ZN12DriveCommand13isWriteConfigEv>:

/****************************************************************************************
* 	write config get/set (read reset)
****************************************************************************************/
bool DriveCommand::isWriteConfig()
{
 8002672:	b480      	push	{r7}
 8002674:	b085      	sub	sp, #20
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
	bool writeConfigTemp = writeConfig;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	79db      	ldrb	r3, [r3, #7]
 800267e:	73fb      	strb	r3, [r7, #15]
	writeConfig = false;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	71da      	strb	r2, [r3, #7]
	return writeConfigTemp;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <_ZN11DriveStatusC1Ev>:
 *      Author: marce
 */

#include "DriveStatus.h"

DriveStatus::DriveStatus()
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
{
}
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <_ZN11DriveStatus7isCloseEv>:

/****************************************************************************************
 / * 	close get/set
 ****************************************************************************************/
bool DriveStatus::isClose()
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
	return close;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	785b      	ldrb	r3, [r3, #1]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <_ZN11DriveStatus8setCloseEb>:

void DriveStatus::setClose(bool close)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	460b      	mov	r3, r1
 80026cc:	70fb      	strb	r3, [r7, #3]
	this->close = close;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	705a      	strb	r2, [r3, #1]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <_ZN11DriveStatus6isOpenEv>:

/****************************************************************************************
 / * 	open get/set
 ****************************************************************************************/
bool DriveStatus::isOpen()
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
	return open;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	789b      	ldrb	r3, [r3, #2]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <_ZN11DriveStatus7setOpenEb>:

void DriveStatus::setOpen(bool open)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	70fb      	strb	r3, [r7, #3]
	this->open = open;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	78fa      	ldrb	r2, [r7, #3]
 8002708:	709a      	strb	r2, [r3, #2]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <_ZN11DriveStatus9isDisableEv>:

/****************************************************************************************
 / * 	disable get/set
 ****************************************************************************************/
bool DriveStatus::isDisable()
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
	return disable;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	79db      	ldrb	r3, [r3, #7]
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <_ZN11DriveStatus10setDisableEb>:

void DriveStatus::setDisable(bool disable)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	460b      	mov	r3, r1
 8002738:	70fb      	strb	r3, [r7, #3]
	this->disable = disable;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	78fa      	ldrb	r2, [r7, #3]
 800273e:	71da      	strb	r2, [r3, #7]
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <_ZN11DriveStatus8isEnableEv>:

/****************************************************************************************
 / * 	enable get/set
 ****************************************************************************************/
bool DriveStatus::isEnable()
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
	return enable;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	795b      	ldrb	r3, [r3, #5]
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <_ZN11DriveStatus9setEnableEb>:

void DriveStatus::setEnable(bool enable)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	70fb      	strb	r3, [r7, #3]
	this->enable = enable;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	78fa      	ldrb	r2, [r7, #3]
 8002774:	715a      	strb	r2, [r3, #5]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <_ZN11DriveStatus7isResetEv>:

/****************************************************************************************
 / * 	reset get/set
 ****************************************************************************************/
bool DriveStatus::isReset()
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
	return reset;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	791b      	ldrb	r3, [r3, #4]
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <_ZN11DriveStatus8setResetEb>:

void DriveStatus::setReset(bool reset)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	460b      	mov	r3, r1
 80027a4:	70fb      	strb	r3, [r7, #3]
	this->reset = reset;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	711a      	strb	r2, [r3, #4]
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <_ZN11DriveStatus6isStopEv>:

/****************************************************************************************
 / * 	stop get/set
 /****************************************************************************************/
bool DriveStatus::isStop()
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	return stop;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	799b      	ldrb	r3, [r3, #6]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <_ZN11DriveStatus7setStopEb>:

void DriveStatus::setStop(bool stop)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	70fb      	strb	r3, [r7, #3]
	this->stop = stop;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	719a      	strb	r2, [r3, #6]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <_ZN11DriveStatus7isTeachEv>:

/****************************************************************************************
 / * 	teach get/set
 /****************************************************************************************/
bool DriveStatus::isTeach()
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
	return teach;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	78db      	ldrb	r3, [r3, #3]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <_ZN11DriveStatus8setTeachEb>:

void DriveStatus::setTeach(bool teach)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	460b      	mov	r3, r1
 8002810:	70fb      	strb	r3, [r7, #3]
	this->teach = teach;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	78fa      	ldrb	r2, [r7, #3]
 8002816:	70da      	strb	r2, [r3, #3]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <_ZN11TaskHandler11UpdateTasksEv>:

#include "TaskHandler.h"
#include "gpio.h"

//update tasks, should be called every 1ms
void TaskHandler::UpdateTasks() {
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]

	//1ms

	//2ms
	if(counter % 2 == 0){
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	895b      	ldrh	r3, [r3, #10]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <_ZN11TaskHandler11UpdateTasksEv+0x1a>
		adcUpdateTask = true;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	70da      	strb	r2, [r3, #3]
	}


	//15ms
	if(counter % 15 == 0){
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	895a      	ldrh	r2, [r3, #10]
 8002842:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <_ZN11TaskHandler11UpdateTasksEv+0xb0>)
 8002844:	fba3 1302 	umull	r1, r3, r3, r2
 8002848:	08d9      	lsrs	r1, r3, #3
 800284a:	460b      	mov	r3, r1
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	1a5b      	subs	r3, r3, r1
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d102      	bne.n	800285e <_ZN11TaskHandler11UpdateTasksEv+0x3a>
		ioUpdateTask = true;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	709a      	strb	r2, [r3, #2]
	}



	//100ms
	if(counter % 100 == 0){
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	895b      	ldrh	r3, [r3, #10]
 8002862:	4a1d      	ldr	r2, [pc, #116]	; (80028d8 <_ZN11TaskHandler11UpdateTasksEv+0xb4>)
 8002864:	fba2 1203 	umull	r1, r2, r2, r3
 8002868:	0952      	lsrs	r2, r2, #5
 800286a:	2164      	movs	r1, #100	; 0x64
 800286c:	fb01 f202 	mul.w	r2, r1, r2
 8002870:	1a9b      	subs	r3, r3, r2
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d102      	bne.n	800287e <_ZN11TaskHandler11UpdateTasksEv+0x5a>
		errorTask = true;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
	}


	//500ms
	if(counter % 500 == 0){
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	895b      	ldrh	r3, [r3, #10]
 8002882:	4a16      	ldr	r2, [pc, #88]	; (80028dc <_ZN11TaskHandler11UpdateTasksEv+0xb8>)
 8002884:	fba2 1203 	umull	r1, r2, r2, r3
 8002888:	0952      	lsrs	r2, r2, #5
 800288a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800288e:	fb01 f202 	mul.w	r2, r1, r2
 8002892:	1a9b      	subs	r3, r3, r2
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d105      	bne.n	80028a6 <_ZN11TaskHandler11UpdateTasksEv+0x82>
		ledUpdateTask = true;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	711a      	strb	r2, [r3, #4]
		comTask = true;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	705a      	strb	r2, [r3, #1]
	}



	//increment counter
	if(counter > 2999){
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	895b      	ldrh	r3, [r3, #10]
 80028aa:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d903      	bls.n	80028ba <_ZN11TaskHandler11UpdateTasksEv+0x96>
		counter = 1;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	815a      	strh	r2, [r3, #10]
	}else{
		counter++;
	}

}
 80028b8:	e005      	b.n	80028c6 <_ZN11TaskHandler11UpdateTasksEv+0xa2>
		counter++;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	895b      	ldrh	r3, [r3, #10]
 80028be:	3301      	adds	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	815a      	strh	r2, [r3, #10]
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	88888889 	.word	0x88888889
 80028d8:	51eb851f 	.word	0x51eb851f
 80028dc:	10624dd3 	.word	0x10624dd3

080028e0 <_ZN11TaskHandler9isComTaskEv>:



bool TaskHandler::isComTask()  {
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	bool comTaskTemp = (comTask & comTaskEnable);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	785b      	ldrb	r3, [r3, #1]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	799b      	ldrb	r3, [r3, #6]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf14      	ite	ne
 80028fc:	2301      	movne	r3, #1
 80028fe:	2300      	moveq	r3, #0
 8002900:	73fb      	strb	r3, [r7, #15]
	comTask = false;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	705a      	strb	r2, [r3, #1]
	return comTaskTemp;
 8002908:	7bfb      	ldrb	r3, [r7, #15]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <_ZN11TaskHandler11isErrorTaskEv>:


bool TaskHandler::isErrorTask()  {
 8002916:	b480      	push	{r7}
 8002918:	b085      	sub	sp, #20
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
	bool errorTaskTemp = (errorTask & errorTaskEnable);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	795b      	ldrb	r3, [r3, #5]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	bf14      	ite	ne
 8002932:	2301      	movne	r3, #1
 8002934:	2300      	moveq	r3, #0
 8002936:	73fb      	strb	r3, [r7, #15]
	errorTask = false;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
	return errorTaskTemp;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <_ZN11TaskHandler14isIoUpdateTaskEv>:

bool TaskHandler::isIoUpdateTask()  {
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	bool ioUpdateTaskTemp = (ioUpdateTask & ioUpdateTaskEnable);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	789b      	ldrb	r3, [r3, #2]
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	79db      	ldrb	r3, [r3, #7]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	4013      	ands	r3, r2
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf14      	ite	ne
 8002968:	2301      	movne	r3, #1
 800296a:	2300      	moveq	r3, #0
 800296c:	73fb      	strb	r3, [r7, #15]
	ioUpdateTask = false;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	709a      	strb	r2, [r3, #2]
	return ioUpdateTaskTemp;
 8002974:	7bfb      	ldrb	r3, [r7, #15]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <_ZN11TaskHandler15isLEDUpdateTaskEv>:
	adcUpdateTask = false;
	return adcUpdateTaskTemp;
}


bool TaskHandler::isLEDUpdateTask(){
 8002982:	b480      	push	{r7}
 8002984:	b085      	sub	sp, #20
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
	bool ledUpdateTaskTemp = (ledUpdateTask & ledUpdateTaskEnable);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	791b      	ldrb	r3, [r3, #4]
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7a5b      	ldrb	r3, [r3, #9]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	bf14      	ite	ne
 800299e:	2301      	movne	r3, #1
 80029a0:	2300      	moveq	r3, #0
 80029a2:	73fb      	strb	r3, [r7, #15]
	ledUpdateTask = false;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	711a      	strb	r2, [r3, #4]
	return ledUpdateTaskTemp;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <_ZN5Delay8DWT_InitEv>:


/*
 * Mikrosenkunden delay Initialisieren
 */
void Delay::DWT_Init(void) {
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <_ZN5Delay8DWT_InitEv+0x2c>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4a08      	ldr	r2, [pc, #32]	; (80029e4 <_ZN5Delay8DWT_InitEv+0x2c>)
 80029c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029c6:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 80029c8:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <_ZN5Delay8DWT_InitEv+0x30>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <_ZN5Delay8DWT_InitEv+0x30>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a05      	ldr	r2, [pc, #20]	; (80029e8 <_ZN5Delay8DWT_InitEv+0x30>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6013      	str	r3, [r2, #0]
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	e000edf0 	.word	0xe000edf0
 80029e8:	e0001000 	.word	0xe0001000

080029ec <_ZN5Delay12DWT_Delay_usEm>:

/*
 * Mikrosenkunden delay für Push-Pull ansteuerung
 */
void Delay::DWT_Delay_us(volatile uint32_t microseconds) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 80029f4:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <_ZN5Delay12DWT_Delay_usEm+0x48>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	60fb      	str	r3, [r7, #12]
	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80029fa:	f005 fafd 	bl	8007ff8 <HAL_RCC_GetHCLKFreq>
 80029fe:	4603      	mov	r3, r0
 8002a00:	4a0d      	ldr	r2, [pc, #52]	; (8002a38 <_ZN5Delay12DWT_Delay_usEm+0x4c>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	0c9b      	lsrs	r3, r3, #18
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	607b      	str	r3, [r7, #4]
	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002a10:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <_ZN5Delay12DWT_Delay_usEm+0x48>)
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1ad2      	subs	r2, r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	bf34      	ite	cc
 8002a1e:	2301      	movcc	r3, #1
 8002a20:	2300      	movcs	r3, #0
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d000      	beq.n	8002a2a <_ZN5Delay12DWT_Delay_usEm+0x3e>
 8002a28:	e7f2      	b.n	8002a10 <_ZN5Delay12DWT_Delay_usEm+0x24>
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	e0001000 	.word	0xe0001000
 8002a38:	431bde83 	.word	0x431bde83

08002a3c <_ZN5Queue7EnqueueEh>:
 *
 * @param data to push in queue
 * @return none
 */
void Queue::Enqueue(uint8_t data)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	70fb      	strb	r3, [r7, #3]
	//push data to buffer
	buffer[enqueuePointer] = data;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	78fa      	ldrb	r2, [r7, #3]
 8002a54:	709a      	strb	r2, [r3, #2]

	if (dequeuePointer == 0 && enqueuePointer == BUFFER_SIZE - 1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	785b      	ldrb	r3, [r3, #1]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10d      	bne.n	8002a7a <_ZN5Queue7EnqueueEh+0x3e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b09      	cmp	r3, #9
 8002a64:	d109      	bne.n	8002a7a <_ZN5Queue7EnqueueEh+0x3e>
	{
		dequeuePointer++;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	785b      	ldrb	r3, [r3, #1]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	705a      	strb	r2, [r3, #1]
		enqueuePointer = 0;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
 8002a78:	e038      	b.n	8002aec <_ZN5Queue7EnqueueEh+0xb0>
	}
	else if (dequeuePointer == BUFFER_SIZE - 1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	785b      	ldrb	r3, [r3, #1]
 8002a7e:	2b09      	cmp	r3, #9
 8002a80:	d111      	bne.n	8002aa6 <_ZN5Queue7EnqueueEh+0x6a>
			&& enqueuePointer == dequeuePointer - 1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	785b      	ldrb	r3, [r3, #1]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d109      	bne.n	8002aa6 <_ZN5Queue7EnqueueEh+0x6a>
	{
		dequeuePointer = 0;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	705a      	strb	r2, [r3, #1]
		enqueuePointer++;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	701a      	strb	r2, [r3, #0]
 8002aa4:	e022      	b.n	8002aec <_ZN5Queue7EnqueueEh+0xb0>
	}
	else if (enqueuePointer + 1 == dequeuePointer)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	7852      	ldrb	r2, [r2, #1]
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d10c      	bne.n	8002ace <_ZN5Queue7EnqueueEh+0x92>
	{
		dequeuePointer++;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	785b      	ldrb	r3, [r3, #1]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	705a      	strb	r2, [r3, #1]
		enqueuePointer++;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		enqueuePointer++;
	}
}
 8002acc:	e00e      	b.n	8002aec <_ZN5Queue7EnqueueEh+0xb0>
	else if (enqueuePointer == BUFFER_SIZE - 1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b09      	cmp	r3, #9
 8002ad4:	d103      	bne.n	8002ade <_ZN5Queue7EnqueueEh+0xa2>
		enqueuePointer = 0;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
}
 8002adc:	e006      	b.n	8002aec <_ZN5Queue7EnqueueEh+0xb0>
		enqueuePointer++;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	701a      	strb	r2, [r3, #0]
}
 8002aea:	e7ff      	b.n	8002aec <_ZN5Queue7EnqueueEh+0xb0>
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <_ZN5Queue7DequeueEv>:
 *
 * @param none
 * @return data at actual dequeue position
 */
uint8_t Queue::Dequeue()
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	//return 0 if queue is empty
	if (IsEmpty())
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f81e 	bl	8002b42 <_ZN5Queue7IsEmptyEv>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <_ZN5Queue7DequeueEv+0x18>
	{
		return 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e014      	b.n	8002b3a <_ZN5Queue7DequeueEv+0x42>
	}
	//get acutal dequeue pointer
	uint8_t dequeuePointerTemp = dequeuePointer;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	785b      	ldrb	r3, [r3, #1]
 8002b14:	73fb      	strb	r3, [r7, #15]

	//incfement dequeuePointer, set to 0 if queue overflow occures
	if (dequeuePointer == BUFFER_SIZE - 1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	785b      	ldrb	r3, [r3, #1]
 8002b1a:	2b09      	cmp	r3, #9
 8002b1c:	d103      	bne.n	8002b26 <_ZN5Queue7DequeueEv+0x2e>
	{
		dequeuePointer = 0;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	705a      	strb	r2, [r3, #1]
 8002b24:	e005      	b.n	8002b32 <_ZN5Queue7DequeueEv+0x3a>
	}
	else
	{
		dequeuePointer++;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	785b      	ldrb	r3, [r3, #1]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	705a      	strb	r2, [r3, #1]
	}
	//return queue data
	return buffer[dequeuePointerTemp];
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	4413      	add	r3, r2
 8002b38:	789b      	ldrb	r3, [r3, #2]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <_ZN5Queue7IsEmptyEv>:
 *
 * @param none
 * @return true if queue is empty otherwise false
 */
bool Queue::IsEmpty()
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
	return (enqueuePointer == dequeuePointer);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	785b      	ldrb	r3, [r3, #1]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	bf0c      	ite	eq
 8002b56:	2301      	moveq	r3, #1
 8002b58:	2300      	movne	r3, #0
 8002b5a:	b2db      	uxtb	r3, r3
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <_ZN13TypeConverter12uint16ToByteEPhth>:
	int16_t byte2 = byteArray[1]<<8;
	return(byte1 + byte2);
}


void TypeConverter::uint16ToByte(uint8_t* byteArray, uint16_t data, uint8_t offset){
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	807b      	strh	r3, [r7, #2]
 8002b74:	4613      	mov	r3, r2
 8002b76:	707b      	strb	r3, [r7, #1]
	byteArray[offset] = data;
 8002b78:	787b      	ldrb	r3, [r7, #1]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	701a      	strb	r2, [r3, #0]
	byteArray[offset+1] = data>>8;
 8002b84:	887b      	ldrh	r3, [r7, #2]
 8002b86:	1219      	asrs	r1, r3, #8
 8002b88:	787b      	ldrb	r3, [r7, #1]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	4413      	add	r3, r2
 8002b90:	b2ca      	uxtb	r2, r1
 8002b92:	701a      	strb	r2, [r3, #0]
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <_ZN13TypeConverter12byteToUint16EPhh>:




uint16_t TypeConverter::byteToUint16(uint8_t* byteArray, uint8_t offset){
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	70fb      	strb	r3, [r7, #3]
	uint16_t byte1 = byteArray[offset];
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	81fb      	strh	r3, [r7, #14]
	uint16_t byte2 = byteArray[offset+1]<<8;
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	81bb      	strh	r3, [r7, #12]
	return(byte1 + byte2);
 8002bc6:	89fa      	ldrh	r2, [r7, #14]
 8002bc8:	89bb      	ldrh	r3, [r7, #12]
 8002bca:	4413      	add	r3, r2
 8002bcc:	b29b      	uxth	r3, r3
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <_ZN6USBComC1EP13DriveSettingsP11DriveStatusP12DriveCommand>:
#include "USB.h"
#include "usb_device.h"
#include "usbd_cdc_if.h"
#include "../Tools/TypeConverter.h"

USBCom::USBCom(DriveSettings *driveSettings, DriveStatus *driveStatus,
 8002bda:	b480      	push	{r7}
 8002bdc:	b085      	sub	sp, #20
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	603b      	str	r3, [r7, #0]
		DriveCommand *driveCommand)
{
	this->driveSettings = driveSettings;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	605a      	str	r2, [r3, #4]
	this->driveStatus = driveStatus;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
	this->driveCommand = driveCommand;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	60da      	str	r2, [r3, #12]
}
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <_ZN6USBCom12USB_TransmitEPhh>:

bool USBCom::USB_Transmit(uint8_t *data, uint8_t length)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	4613      	mov	r3, r2
 8002c14:	71fb      	strb	r3, [r7, #7]
	uint16_t counter = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	82fb      	strh	r3, [r7, #22]
	while (CDC_Transmit_FS((uint8_t*) data, length) != USBD_OK)
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	4619      	mov	r1, r3
 8002c20:	68b8      	ldr	r0, [r7, #8]
 8002c22:	f00a fbc5 	bl	800d3b0 <CDC_Transmit_FS>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf14      	ite	ne
 8002c2c:	2301      	movne	r3, #1
 8002c2e:	2300      	moveq	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d008      	beq.n	8002c48 <_ZN6USBCom12USB_TransmitEPhh+0x40>
	{
		counter++;
 8002c36:	8afb      	ldrh	r3, [r7, #22]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	82fb      	strh	r3, [r7, #22]
		if (counter >= 1000)
 8002c3c:	8afb      	ldrh	r3, [r7, #22]
 8002c3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c42:	d3ea      	bcc.n	8002c1a <_ZN6USBCom12USB_TransmitEPhh+0x12>
		{
			//ToDo USB Error
			return false;	//Trasmit faild
 8002c44:	2300      	movs	r3, #0
 8002c46:	e000      	b.n	8002c4a <_ZN6USBCom12USB_TransmitEPhh+0x42>
		}
	}
	return true;	//Transmit successful
 8002c48:	2301      	movs	r3, #1
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <_ZN6USBCom11USB_ReceiveEPhm>:

void USBCom::USB_Receive(uint8_t *data, uint32_t length)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]



	if (length == 0)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 829b 	beq.w	800319e <_ZN6USBCom11USB_ReceiveEPhm+0x54a>
	{
		return;
	}

	uint8_t data2send[5];
	uint16_t convertedData = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	83fb      	strh	r3, [r7, #30]
	uint8_t readWrite = data[0];
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	777b      	strb	r3, [r7, #29]
	uint8_t command = data[1];
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	785b      	ldrb	r3, [r3, #1]
 8002c76:	773b      	strb	r3, [r7, #28]

	if (readWrite)
 8002c78:	7f7b      	ldrb	r3, [r7, #29]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 812a 	beq.w	8002ed4 <_ZN6USBCom11USB_ReceiveEPhm+0x280>
	{
		//usb read
		data2send[0] = 0x1D;	//random preamble
 8002c80:	231d      	movs	r3, #29
 8002c82:	753b      	strb	r3, [r7, #20]
		data2send[1] = command;
 8002c84:	7f3b      	ldrb	r3, [r7, #28]
 8002c86:	757b      	strb	r3, [r7, #21]
		switch (command)
 8002c88:	7f3b      	ldrb	r3, [r7, #28]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	2b1f      	cmp	r3, #31
 8002c8e:	f200 811c 	bhi.w	8002eca <_ZN6USBCom11USB_ReceiveEPhm+0x276>
 8002c92:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <_ZN6USBCom11USB_ReceiveEPhm+0x44>)
 8002c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c98:	08002d19 	.word	0x08002d19
 8002c9c:	08002d29 	.word	0x08002d29
 8002ca0:	08002d39 	.word	0x08002d39
 8002ca4:	08002d49 	.word	0x08002d49
 8002ca8:	08002d59 	.word	0x08002d59
 8002cac:	08002d69 	.word	0x08002d69
 8002cb0:	08002d79 	.word	0x08002d79
 8002cb4:	08002ecb 	.word	0x08002ecb
 8002cb8:	08002ecb 	.word	0x08002ecb
 8002cbc:	08002ecb 	.word	0x08002ecb
 8002cc0:	08002ecb 	.word	0x08002ecb
 8002cc4:	08002ecb 	.word	0x08002ecb
 8002cc8:	08002ecb 	.word	0x08002ecb
 8002ccc:	08002ecb 	.word	0x08002ecb
 8002cd0:	08002ecb 	.word	0x08002ecb
 8002cd4:	08002d89 	.word	0x08002d89
 8002cd8:	08002da5 	.word	0x08002da5
 8002cdc:	08002dc1 	.word	0x08002dc1
 8002ce0:	08002ddd 	.word	0x08002ddd
 8002ce4:	08002df9 	.word	0x08002df9
 8002ce8:	08002e15 	.word	0x08002e15
 8002cec:	08002e2f 	.word	0x08002e2f
 8002cf0:	08002e4b 	.word	0x08002e4b
 8002cf4:	08002e67 	.word	0x08002e67
 8002cf8:	08002e83 	.word	0x08002e83
 8002cfc:	08002e9f 	.word	0x08002e9f
 8002d00:	08002ecb 	.word	0x08002ecb
 8002d04:	08002ecb 	.word	0x08002ecb
 8002d08:	08002ecb 	.word	0x08002ecb
 8002d0c:	08002ecb 	.word	0x08002ecb
 8002d10:	08002ecb 	.word	0x08002ecb
 8002d14:	08002ebb 	.word	0x08002ebb
		{
			case CLOSE:
				data2send[2] = driveStatus->isClose();
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fcc4 	bl	80026aa <_ZN11DriveStatus7isCloseEv>
 8002d22:	4603      	mov	r3, r0
 8002d24:	75bb      	strb	r3, [r7, #22]
				break;
 8002d26:	e230      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case OPEN:
				data2send[2] = driveStatus->isOpen();
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fcd7 	bl	80026e0 <_ZN11DriveStatus6isOpenEv>
 8002d32:	4603      	mov	r3, r0
 8002d34:	75bb      	strb	r3, [r7, #22]
				break;
 8002d36:	e228      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case TEACH:
				data2send[2] = driveStatus->isTeach();
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fd56 	bl	80027ee <_ZN11DriveStatus7isTeachEv>
 8002d42:	4603      	mov	r3, r0
 8002d44:	75bb      	strb	r3, [r7, #22]
				break;
 8002d46:	e220      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case RESET:
				data2send[2] = driveStatus->isReset();
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fd18 	bl	8002782 <_ZN11DriveStatus7isResetEv>
 8002d52:	4603      	mov	r3, r0
 8002d54:	75bb      	strb	r3, [r7, #22]
				break;
 8002d56:	e218      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case ENABLE:
				data2send[2] = driveStatus->isEnable();
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fcf5 	bl	800274c <_ZN11DriveStatus8isEnableEv>
 8002d62:	4603      	mov	r3, r0
 8002d64:	75bb      	strb	r3, [r7, #22]
				break;
 8002d66:	e210      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case DISABLE:
				data2send[2] = driveStatus->isDisable();
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fcd2 	bl	8002716 <_ZN11DriveStatus9isDisableEv>
 8002d72:	4603      	mov	r3, r0
 8002d74:	75bb      	strb	r3, [r7, #22]
				break;
 8002d76:	e208      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case STOP:
				data2send[2] = driveStatus->isStop();
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fd1b 	bl	80027b8 <_ZN11DriveStatus6isStopEv>
 8002d82:	4603      	mov	r3, r0
 8002d84:	75bb      	strb	r3, [r7, #22]
				break;
 8002d86:	e200      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case TEACH_TORQUE:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getTeachTroque(), 2);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fae6 	bl	800235e <_ZNK13DriveSettings14getTeachTroqueEv>
 8002d92:	4603      	mov	r3, r0
 8002d94:	4619      	mov	r1, r3
 8002d96:	f107 0314 	add.w	r3, r7, #20
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fee3 	bl	8002b68 <_ZN13TypeConverter12uint16ToByteEPhth>
				break;
 8002da2:	e1f2      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case TEACH_SPEED:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getTeachSpeed(), 2);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff fabd 	bl	8002328 <_ZNK13DriveSettings13getTeachSpeedEv>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4619      	mov	r1, r3
 8002db2:	f107 0314 	add.w	r3, r7, #20
 8002db6:	2202      	movs	r2, #2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fed5 	bl	8002b68 <_ZN13TypeConverter12uint16ToByteEPhth>
				break;
 8002dbe:	e1e4      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case CLAMPING_TORQUE:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getClampingTorque(), 2);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fa28 	bl	800221a <_ZNK13DriveSettings17getClampingTorqueEv>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f107 0314 	add.w	r3, r7, #20
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fec7 	bl	8002b68 <_ZN13TypeConverter12uint16ToByteEPhth>
				break;
 8002dda:	e1d6      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case CLAMPING_SPEED:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getClampingSpeed(), 2);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff f9ff 	bl	80021e4 <_ZNK13DriveSettings16getClampingSpeedEv>
 8002de6:	4603      	mov	r3, r0
 8002de8:	4619      	mov	r1, r3
 8002dea:	f107 0314 	add.w	r3, r7, #20
 8002dee:	2202      	movs	r2, #2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff feb9 	bl	8002b68 <_ZN13TypeConverter12uint16ToByteEPhth>
				break;
 8002df6:	e1c8      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case SELF_SHUTDOWN_DELAY:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getSelfShutdownDelay(), 2);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fa78 	bl	80022f2 <_ZNK13DriveSettings20getSelfShutdownDelayEv>
 8002e02:	4603      	mov	r3, r0
 8002e04:	4619      	mov	r1, r3
 8002e06:	f107 0314 	add.w	r3, r7, #20
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff feab 	bl	8002b68 <_ZN13TypeConverter12uint16ToByteEPhth>
				break;
 8002e12:	e1ba      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case IN_POS_DIFF:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getInPosDiff(), 2);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fa19 	bl	8002250 <_ZNK13DriveSettings12getInPosDiffEv>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4619      	mov	r1, r3
 8002e22:	f107 0314 	add.w	r3, r7, #20
 8002e26:	2202      	movs	r2, #2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff fe9d 	bl	8002b68 <_ZN13TypeConverter12uint16ToByteEPhth>
			case OPENING_DISTANCE:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getOpeningDistance(), 2);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fa27 	bl	8002286 <_ZNK13DriveSettings18getOpeningDistanceEv>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f107 0314 	add.w	r3, r7, #20
 8002e40:	2202      	movs	r2, #2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fe90 	bl	8002b68 <_ZN13TypeConverter12uint16ToByteEPhth>
				break;
 8002e48:	e19f      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case UNDERVOLTAGE_WARNING:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getUnderVoltageWarning(),2);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fabb 	bl	80023ca <_ZNK13DriveSettings22getUnderVoltageWarningEv>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4619      	mov	r1, r3
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fe82 	bl	8002b68 <_ZN13TypeConverter12uint16ToByteEPhth>
				break;
 8002e64:	e191      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case UNDERVOLTAGE_ERROR:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getUnderVoltageError(), 2);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fa92 	bl	8002394 <_ZNK13DriveSettings20getUnderVoltageErrorEv>
 8002e70:	4603      	mov	r3, r0
 8002e72:	4619      	mov	r1, r3
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	2202      	movs	r2, #2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fe74 	bl	8002b68 <_ZN13TypeConverter12uint16ToByteEPhth>
				break;
 8002e80:	e183      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case OVER_CURRENT_WARNING:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getOverCurrentWarning(), 2);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff fa18 	bl	80022bc <_ZNK13DriveSettings21getOverCurrentWarningEv>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	4619      	mov	r1, r3
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	2202      	movs	r2, #2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fe66 	bl	8002b68 <_ZN13TypeConverter12uint16ToByteEPhth>
				break;
 8002e9c:	e175      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case OVER_CURRENT_ERROR:
				TypeConverter::uint16ToByte(data2send,
						driveSettings->getOverCurrentError(), 2);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	685b      	ldr	r3, [r3, #4]
				TypeConverter::uint16ToByte(data2send,
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff faac 	bl	8002400 <_ZNK13DriveSettings19getOverCurrentErrorEv>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4619      	mov	r1, r3
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fe58 	bl	8002b68 <_ZN13TypeConverter12uint16ToByteEPhth>
				break;
 8002eb8:	e167      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case DEVICE_ADDRESS:
				data2send[2] = driveSettings->getDeviceAddress();
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fab9 	bl	8002436 <_ZNK13DriveSettings16getDeviceAddressEv>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	75bb      	strb	r3, [r7, #22]
				break;
 8002ec8:	e15f      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			default:
				data2send[1] = 0x1F;
 8002eca:	231f      	movs	r3, #31
 8002ecc:	757b      	strb	r3, [r7, #21]
				data2send[2] = 0xAA;
 8002ece:	23aa      	movs	r3, #170	; 0xaa
 8002ed0:	75bb      	strb	r3, [r7, #22]
				break;
 8002ed2:	e15a      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
		}
	}
	else
	{
		data2send[0] = command;
 8002ed4:	7f3b      	ldrb	r3, [r7, #28]
 8002ed6:	753b      	strb	r3, [r7, #20]
		//usb write
		switch (command)
 8002ed8:	7f3b      	ldrb	r3, [r7, #28]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	2b1f      	cmp	r3, #31
 8002ede:	f200 814f 	bhi.w	8003180 <_ZN6USBCom11USB_ReceiveEPhm+0x52c>
 8002ee2:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <_ZN6USBCom11USB_ReceiveEPhm+0x294>)
 8002ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee8:	08002f69 	.word	0x08002f69
 8002eec:	08002f87 	.word	0x08002f87
 8002ef0:	08002fa5 	.word	0x08002fa5
 8002ef4:	08002fc3 	.word	0x08002fc3
 8002ef8:	08002fe1 	.word	0x08002fe1
 8002efc:	08002fff 	.word	0x08002fff
 8002f00:	0800301d 	.word	0x0800301d
 8002f04:	08003181 	.word	0x08003181
 8002f08:	08003181 	.word	0x08003181
 8002f0c:	08003181 	.word	0x08003181
 8002f10:	08003181 	.word	0x08003181
 8002f14:	08003181 	.word	0x08003181
 8002f18:	08003181 	.word	0x08003181
 8002f1c:	08003181 	.word	0x08003181
 8002f20:	08003181 	.word	0x08003181
 8002f24:	0800303b 	.word	0x0800303b
 8002f28:	08003057 	.word	0x08003057
 8002f2c:	08003073 	.word	0x08003073
 8002f30:	0800308f 	.word	0x0800308f
 8002f34:	080030ab 	.word	0x080030ab
 8002f38:	080030c7 	.word	0x080030c7
 8002f3c:	080030e3 	.word	0x080030e3
 8002f40:	080030ff 	.word	0x080030ff
 8002f44:	0800311b 	.word	0x0800311b
 8002f48:	08003137 	.word	0x08003137
 8002f4c:	08003153 	.word	0x08003153
 8002f50:	08003181 	.word	0x08003181
 8002f54:	08003181 	.word	0x08003181
 8002f58:	08003181 	.word	0x08003181
 8002f5c:	08003181 	.word	0x08003181
 8002f60:	08003181 	.word	0x08003181
 8002f64:	0800316f 	.word	0x0800316f
		{
			case CLOSE:
				driveStatus->setClose(data[2]);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	3302      	adds	r3, #2
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	bf14      	ite	ne
 8002f76:	2301      	movne	r3, #1
 8002f78:	2300      	moveq	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	f7ff fb9f 	bl	80026c2 <_ZN11DriveStatus8setCloseEb>
				break;
 8002f84:	e101      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case OPEN:
				driveStatus->setOpen(data[2]);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf14      	ite	ne
 8002f94:	2301      	movne	r3, #1
 8002f96:	2300      	moveq	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	f7ff fbab 	bl	80026f8 <_ZN11DriveStatus7setOpenEb>
				break;
 8002fa2:	e0f2      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case TEACH:
				driveStatus->setTeach(data[2]);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	3302      	adds	r3, #2
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	bf14      	ite	ne
 8002fb2:	2301      	movne	r3, #1
 8002fb4:	2300      	moveq	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4610      	mov	r0, r2
 8002fbc:	f7ff fc23 	bl	8002806 <_ZN11DriveStatus8setTeachEb>
				break;
 8002fc0:	e0e3      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case RESET:
				driveStatus->setReset(data[2]);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	3302      	adds	r3, #2
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	bf14      	ite	ne
 8002fd0:	2301      	movne	r3, #1
 8002fd2:	2300      	moveq	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4610      	mov	r0, r2
 8002fda:	f7ff fbde 	bl	800279a <_ZN11DriveStatus8setResetEb>
				break;
 8002fde:	e0d4      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case ENABLE:
				driveStatus->setEnable(data[2]);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	3302      	adds	r3, #2
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bf14      	ite	ne
 8002fee:	2301      	movne	r3, #1
 8002ff0:	2300      	moveq	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	f7ff fbb4 	bl	8002764 <_ZN11DriveStatus9setEnableEb>
				break;
 8002ffc:	e0c5      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case DISABLE:
				driveStatus->setDisable(data[2]);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	3302      	adds	r3, #2
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf14      	ite	ne
 800300c:	2301      	movne	r3, #1
 800300e:	2300      	moveq	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	4619      	mov	r1, r3
 8003014:	4610      	mov	r0, r2
 8003016:	f7ff fb8a 	bl	800272e <_ZN11DriveStatus10setDisableEb>
				break;
 800301a:	e0b6      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case STOP:
				driveStatus->setStop(data[2]);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	3302      	adds	r3, #2
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	bf14      	ite	ne
 800302a:	2301      	movne	r3, #1
 800302c:	2300      	moveq	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	4619      	mov	r1, r3
 8003032:	4610      	mov	r0, r2
 8003034:	f7ff fbcc 	bl	80027d0 <_ZN11DriveStatus7setStopEb>
				break;
 8003038:	e0a7      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case TEACH_TORQUE:
				convertedData = TypeConverter::byteToUint16(data, 2);
 800303a:	2102      	movs	r1, #2
 800303c:	68b8      	ldr	r0, [r7, #8]
 800303e:	f7ff fdaf 	bl	8002ba0 <_ZN13TypeConverter12byteToUint16EPhh>
 8003042:	4603      	mov	r3, r0
 8003044:	83fb      	strh	r3, [r7, #30]
				driveSettings->setTeachTroque(convertedData);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	8bfa      	ldrh	r2, [r7, #30]
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff f991 	bl	8002376 <_ZN13DriveSettings14setTeachTroqueEt>
				break;
 8003054:	e099      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case TEACH_SPEED:
				convertedData = TypeConverter::byteToUint16(data, 2);
 8003056:	2102      	movs	r1, #2
 8003058:	68b8      	ldr	r0, [r7, #8]
 800305a:	f7ff fda1 	bl	8002ba0 <_ZN13TypeConverter12byteToUint16EPhh>
 800305e:	4603      	mov	r3, r0
 8003060:	83fb      	strh	r3, [r7, #30]
				driveSettings->setTeachSpeed(convertedData);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	8bfa      	ldrh	r2, [r7, #30]
 8003068:	4611      	mov	r1, r2
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff f968 	bl	8002340 <_ZN13DriveSettings13setTeachSpeedEt>
				break;
 8003070:	e08b      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case CLAMPING_TORQUE:
				convertedData = TypeConverter::byteToUint16(data, 2);
 8003072:	2102      	movs	r1, #2
 8003074:	68b8      	ldr	r0, [r7, #8]
 8003076:	f7ff fd93 	bl	8002ba0 <_ZN13TypeConverter12byteToUint16EPhh>
 800307a:	4603      	mov	r3, r0
 800307c:	83fb      	strh	r3, [r7, #30]
				driveSettings->setClampingTorque(convertedData);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	8bfa      	ldrh	r2, [r7, #30]
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff f8d3 	bl	8002232 <_ZN13DriveSettings17setClampingTorqueEt>
				break;
 800308c:	e07d      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case CLAMPING_SPEED:
				convertedData = TypeConverter::byteToUint16(data, 2);
 800308e:	2102      	movs	r1, #2
 8003090:	68b8      	ldr	r0, [r7, #8]
 8003092:	f7ff fd85 	bl	8002ba0 <_ZN13TypeConverter12byteToUint16EPhh>
 8003096:	4603      	mov	r3, r0
 8003098:	83fb      	strh	r3, [r7, #30]
				driveSettings->setClampingSpeed(convertedData);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	8bfa      	ldrh	r2, [r7, #30]
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff f8aa 	bl	80021fc <_ZN13DriveSettings16setClampingSpeedEt>
				break;
 80030a8:	e06f      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case SELF_SHUTDOWN_DELAY:
				convertedData = TypeConverter::byteToUint16(data, 2);
 80030aa:	2102      	movs	r1, #2
 80030ac:	68b8      	ldr	r0, [r7, #8]
 80030ae:	f7ff fd77 	bl	8002ba0 <_ZN13TypeConverter12byteToUint16EPhh>
 80030b2:	4603      	mov	r3, r0
 80030b4:	83fb      	strh	r3, [r7, #30]
				driveSettings->setSelfShutdownDelay(convertedData);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	8bfa      	ldrh	r2, [r7, #30]
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff f923 	bl	800230a <_ZN13DriveSettings20setSelfShutdownDelayEt>
				break;
 80030c4:	e061      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case IN_POS_DIFF:
				convertedData = TypeConverter::byteToUint16(data, 2);
 80030c6:	2102      	movs	r1, #2
 80030c8:	68b8      	ldr	r0, [r7, #8]
 80030ca:	f7ff fd69 	bl	8002ba0 <_ZN13TypeConverter12byteToUint16EPhh>
 80030ce:	4603      	mov	r3, r0
 80030d0:	83fb      	strh	r3, [r7, #30]
				driveSettings->setInPosDiff(convertedData);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	8bfa      	ldrh	r2, [r7, #30]
 80030d8:	4611      	mov	r1, r2
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff f8c4 	bl	8002268 <_ZN13DriveSettings12setInPosDiffEt>
				break;
 80030e0:	e053      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case OPENING_DISTANCE:
				convertedData = TypeConverter::byteToUint16(data, 2);
 80030e2:	2102      	movs	r1, #2
 80030e4:	68b8      	ldr	r0, [r7, #8]
 80030e6:	f7ff fd5b 	bl	8002ba0 <_ZN13TypeConverter12byteToUint16EPhh>
 80030ea:	4603      	mov	r3, r0
 80030ec:	83fb      	strh	r3, [r7, #30]
				driveSettings->setOpeningDistance(convertedData);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	8bfa      	ldrh	r2, [r7, #30]
 80030f4:	4611      	mov	r1, r2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff f8d1 	bl	800229e <_ZN13DriveSettings18setOpeningDistanceEt>
				break;
 80030fc:	e045      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case UNDERVOLTAGE_WARNING:
				convertedData = TypeConverter::byteToUint16(data, 2);
 80030fe:	2102      	movs	r1, #2
 8003100:	68b8      	ldr	r0, [r7, #8]
 8003102:	f7ff fd4d 	bl	8002ba0 <_ZN13TypeConverter12byteToUint16EPhh>
 8003106:	4603      	mov	r3, r0
 8003108:	83fb      	strh	r3, [r7, #30]
				driveSettings->setUnderVoltageWarning(convertedData);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	8bfa      	ldrh	r2, [r7, #30]
 8003110:	4611      	mov	r1, r2
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff f965 	bl	80023e2 <_ZN13DriveSettings22setUnderVoltageWarningEt>
				break;
 8003118:	e037      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case UNDERVOLTAGE_ERROR:
				convertedData = TypeConverter::byteToUint16(data, 2);
 800311a:	2102      	movs	r1, #2
 800311c:	68b8      	ldr	r0, [r7, #8]
 800311e:	f7ff fd3f 	bl	8002ba0 <_ZN13TypeConverter12byteToUint16EPhh>
 8003122:	4603      	mov	r3, r0
 8003124:	83fb      	strh	r3, [r7, #30]
				driveSettings->setUnderVoltageError(convertedData);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	8bfa      	ldrh	r2, [r7, #30]
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff f93c 	bl	80023ac <_ZN13DriveSettings20setUnderVoltageErrorEt>
				break;
 8003134:	e029      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case OVER_CURRENT_WARNING:
				convertedData = TypeConverter::byteToUint16(data, 2);
 8003136:	2102      	movs	r1, #2
 8003138:	68b8      	ldr	r0, [r7, #8]
 800313a:	f7ff fd31 	bl	8002ba0 <_ZN13TypeConverter12byteToUint16EPhh>
 800313e:	4603      	mov	r3, r0
 8003140:	83fb      	strh	r3, [r7, #30]
				driveSettings->setOverCurrentWarning(convertedData);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	8bfa      	ldrh	r2, [r7, #30]
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff f8c2 	bl	80022d4 <_ZN13DriveSettings21setOverCurrentWarningEt>
				break;
 8003150:	e01b      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case OVER_CURRENT_ERROR:
				convertedData = TypeConverter::byteToUint16(data, 2);
 8003152:	2102      	movs	r1, #2
 8003154:	68b8      	ldr	r0, [r7, #8]
 8003156:	f7ff fd23 	bl	8002ba0 <_ZN13TypeConverter12byteToUint16EPhh>
 800315a:	4603      	mov	r3, r0
 800315c:	83fb      	strh	r3, [r7, #30]
				driveSettings->setOverCurrentError(convertedData);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	8bfa      	ldrh	r2, [r7, #30]
 8003164:	4611      	mov	r1, r2
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff f956 	bl	8002418 <_ZN13DriveSettings19setOverCurrentErrorEt>
				break;
 800316c:	e00d      	b.n	800318a <_ZN6USBCom11USB_ReceiveEPhm+0x536>
			case DEVICE_ADDRESS:
				driveSettings->setDeviceAddress(data[2]);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	3302      	adds	r3, #2
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f7ff f967 	bl	800244e <_ZN13DriveSettings16setDeviceAddressEh>
			default:
				data2send[0] = 0x1F;
 8003180:	231f      	movs	r3, #31
 8003182:	753b      	strb	r3, [r7, #20]
				data2send[1] = 0xAA;
 8003184:	23aa      	movs	r3, #170	; 0xaa
 8003186:	757b      	strb	r3, [r7, #21]
				break;
 8003188:	bf00      	nop
		}
	}

	data2send[4] = 0x0A;
 800318a:	230a      	movs	r3, #10
 800318c:	763b      	strb	r3, [r7, #24]
	USB_Transmit(data2send, 5);
 800318e:	f107 0314 	add.w	r3, r7, #20
 8003192:	2205      	movs	r2, #5
 8003194:	4619      	mov	r1, r3
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f7ff fd36 	bl	8002c08 <_ZN6USBCom12USB_TransmitEPhh>
 800319c:	e000      	b.n	80031a0 <_ZN6USBCom11USB_ReceiveEPhm+0x54c>
		return;
 800319e:	bf00      	nop
}
 80031a0:	3720      	adds	r7, #32
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop

080031a8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80031ae:	463b      	mov	r3, r7
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	611a      	str	r2, [r3, #16]
 80031bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80031be:	4b29      	ldr	r3, [pc, #164]	; (8003264 <MX_ADC1_Init+0xbc>)
 80031c0:	4a29      	ldr	r2, [pc, #164]	; (8003268 <MX_ADC1_Init+0xc0>)
 80031c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80031c4:	4b27      	ldr	r3, [pc, #156]	; (8003264 <MX_ADC1_Init+0xbc>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031ca:	4b26      	ldr	r3, [pc, #152]	; (8003264 <MX_ADC1_Init+0xbc>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031d0:	4b24      	ldr	r3, [pc, #144]	; (8003264 <MX_ADC1_Init+0xbc>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80031d6:	4b23      	ldr	r3, [pc, #140]	; (8003264 <MX_ADC1_Init+0xbc>)
 80031d8:	2200      	movs	r2, #0
 80031da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031dc:	4b21      	ldr	r3, [pc, #132]	; (8003264 <MX_ADC1_Init+0xbc>)
 80031de:	2204      	movs	r2, #4
 80031e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80031e2:	4b20      	ldr	r3, [pc, #128]	; (8003264 <MX_ADC1_Init+0xbc>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80031e8:	4b1e      	ldr	r3, [pc, #120]	; (8003264 <MX_ADC1_Init+0xbc>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80031ee:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <MX_ADC1_Init+0xbc>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031f4:	4b1b      	ldr	r3, [pc, #108]	; (8003264 <MX_ADC1_Init+0xbc>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031fc:	4b19      	ldr	r3, [pc, #100]	; (8003264 <MX_ADC1_Init+0xbc>)
 80031fe:	2200      	movs	r2, #0
 8003200:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003202:	4b18      	ldr	r3, [pc, #96]	; (8003264 <MX_ADC1_Init+0xbc>)
 8003204:	2200      	movs	r2, #0
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003208:	4b16      	ldr	r3, [pc, #88]	; (8003264 <MX_ADC1_Init+0xbc>)
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003210:	4b14      	ldr	r3, [pc, #80]	; (8003264 <MX_ADC1_Init+0xbc>)
 8003212:	2200      	movs	r2, #0
 8003214:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003216:	4b13      	ldr	r3, [pc, #76]	; (8003264 <MX_ADC1_Init+0xbc>)
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800321e:	4811      	ldr	r0, [pc, #68]	; (8003264 <MX_ADC1_Init+0xbc>)
 8003220:	f000 ffc0 	bl	80041a4 <HAL_ADC_Init>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800322a:	f000 fb8f 	bl	800394c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800322e:	4b0f      	ldr	r3, [pc, #60]	; (800326c <MX_ADC1_Init+0xc4>)
 8003230:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003232:	2306      	movs	r3, #6
 8003234:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003236:	2300      	movs	r3, #0
 8003238:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800323a:	237f      	movs	r3, #127	; 0x7f
 800323c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800323e:	2304      	movs	r3, #4
 8003240:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003246:	463b      	mov	r3, r7
 8003248:	4619      	mov	r1, r3
 800324a:	4806      	ldr	r0, [pc, #24]	; (8003264 <MX_ADC1_Init+0xbc>)
 800324c:	f001 f8f2 	bl	8004434 <HAL_ADC_ConfigChannel>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003256:	f000 fb79 	bl	800394c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800325a:	bf00      	nop
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	200005c4 	.word	0x200005c4
 8003268:	50040000 	.word	0x50040000
 800326c:	2e300800 	.word	0x2e300800

08003270 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b0a2      	sub	sp, #136	; 0x88
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003288:	f107 0314 	add.w	r3, r7, #20
 800328c:	2260      	movs	r2, #96	; 0x60
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f00a fda3 	bl	800dddc <memset>
  if(adcHandle->Instance==ADC1)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a3b      	ldr	r2, [pc, #236]	; (8003388 <HAL_ADC_MspInit+0x118>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d16e      	bne.n	800337e <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80032a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032a4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80032a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80032aa:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80032ac:	2301      	movs	r3, #1
 80032ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80032b0:	2301      	movs	r3, #1
 80032b2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80032b4:	2310      	movs	r3, #16
 80032b6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80032b8:	2307      	movs	r3, #7
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80032bc:	2302      	movs	r3, #2
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80032c0:	2302      	movs	r3, #2
 80032c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80032c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032c8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032ca:	f107 0314 	add.w	r3, r7, #20
 80032ce:	4618      	mov	r0, r3
 80032d0:	f004 fefe 	bl	80080d0 <HAL_RCCEx_PeriphCLKConfig>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80032da:	f000 fb37 	bl	800394c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80032de:	4b2b      	ldr	r3, [pc, #172]	; (800338c <HAL_ADC_MspInit+0x11c>)
 80032e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e2:	4a2a      	ldr	r2, [pc, #168]	; (800338c <HAL_ADC_MspInit+0x11c>)
 80032e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032ea:	4b28      	ldr	r3, [pc, #160]	; (800338c <HAL_ADC_MspInit+0x11c>)
 80032ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f6:	4b25      	ldr	r3, [pc, #148]	; (800338c <HAL_ADC_MspInit+0x11c>)
 80032f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fa:	4a24      	ldr	r2, [pc, #144]	; (800338c <HAL_ADC_MspInit+0x11c>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003302:	4b22      	ldr	r3, [pc, #136]	; (800338c <HAL_ADC_MspInit+0x11c>)
 8003304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800330e:	23c0      	movs	r3, #192	; 0xc0
 8003310:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003312:	230b      	movs	r3, #11
 8003314:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003316:	2300      	movs	r3, #0
 8003318:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800331a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800331e:	4619      	mov	r1, r3
 8003320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003324:	f002 f906 	bl	8005534 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <HAL_ADC_MspInit+0x120>)
 800332a:	4a1a      	ldr	r2, [pc, #104]	; (8003394 <HAL_ADC_MspInit+0x124>)
 800332c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800332e:	4b18      	ldr	r3, [pc, #96]	; (8003390 <HAL_ADC_MspInit+0x120>)
 8003330:	2200      	movs	r2, #0
 8003332:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003334:	4b16      	ldr	r3, [pc, #88]	; (8003390 <HAL_ADC_MspInit+0x120>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800333a:	4b15      	ldr	r3, [pc, #84]	; (8003390 <HAL_ADC_MspInit+0x120>)
 800333c:	2200      	movs	r2, #0
 800333e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003340:	4b13      	ldr	r3, [pc, #76]	; (8003390 <HAL_ADC_MspInit+0x120>)
 8003342:	2280      	movs	r2, #128	; 0x80
 8003344:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003346:	4b12      	ldr	r3, [pc, #72]	; (8003390 <HAL_ADC_MspInit+0x120>)
 8003348:	f44f 7280 	mov.w	r2, #256	; 0x100
 800334c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <HAL_ADC_MspInit+0x120>)
 8003350:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003354:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003356:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <HAL_ADC_MspInit+0x120>)
 8003358:	2200      	movs	r2, #0
 800335a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800335c:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <HAL_ADC_MspInit+0x120>)
 800335e:	2200      	movs	r2, #0
 8003360:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003362:	480b      	ldr	r0, [pc, #44]	; (8003390 <HAL_ADC_MspInit+0x120>)
 8003364:	f001 ff7e 	bl	8005264 <HAL_DMA_Init>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 800336e:	f000 faed 	bl	800394c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a06      	ldr	r2, [pc, #24]	; (8003390 <HAL_ADC_MspInit+0x120>)
 8003376:	64da      	str	r2, [r3, #76]	; 0x4c
 8003378:	4a05      	ldr	r2, [pc, #20]	; (8003390 <HAL_ADC_MspInit+0x120>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800337e:	bf00      	nop
 8003380:	3788      	adds	r7, #136	; 0x88
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	50040000 	.word	0x50040000
 800338c:	40021000 	.word	0x40021000
 8003390:	20000628 	.word	0x20000628
 8003394:	40020008 	.word	0x40020008

08003398 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800339c:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <MX_CRC_Init+0x3c>)
 800339e:	4a0e      	ldr	r2, [pc, #56]	; (80033d8 <MX_CRC_Init+0x40>)
 80033a0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80033a2:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <MX_CRC_Init+0x3c>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80033a8:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <MX_CRC_Init+0x3c>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <MX_CRC_Init+0x3c>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80033b4:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <MX_CRC_Init+0x3c>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <MX_CRC_Init+0x3c>)
 80033bc:	2201      	movs	r2, #1
 80033be:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80033c0:	4804      	ldr	r0, [pc, #16]	; (80033d4 <MX_CRC_Init+0x3c>)
 80033c2:	f001 fd29 	bl	8004e18 <HAL_CRC_Init>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80033cc:	f000 fabe 	bl	800394c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80033d0:	bf00      	nop
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	20000670 	.word	0x20000670
 80033d8:	40023000 	.word	0x40023000

080033dc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a0a      	ldr	r2, [pc, #40]	; (8003414 <HAL_CRC_MspInit+0x38>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d10b      	bne.n	8003406 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80033ee:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <HAL_CRC_MspInit+0x3c>)
 80033f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f2:	4a09      	ldr	r2, [pc, #36]	; (8003418 <HAL_CRC_MspInit+0x3c>)
 80033f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033f8:	6493      	str	r3, [r2, #72]	; 0x48
 80033fa:	4b07      	ldr	r3, [pc, #28]	; (8003418 <HAL_CRC_MspInit+0x3c>)
 80033fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003406:	bf00      	nop
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40023000 	.word	0x40023000
 8003418:	40021000 	.word	0x40021000

0800341c <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08a      	sub	sp, #40	; 0x28
 8003420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	2224      	movs	r2, #36	; 0x24
 8003426:	2100      	movs	r1, #0
 8003428:	4618      	mov	r0, r3
 800342a:	f00a fcd7 	bl	800dddc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800342e:	4b17      	ldr	r3, [pc, #92]	; (800348c <MX_DAC1_Init+0x70>)
 8003430:	4a17      	ldr	r2, [pc, #92]	; (8003490 <MX_DAC1_Init+0x74>)
 8003432:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003434:	4815      	ldr	r0, [pc, #84]	; (800348c <MX_DAC1_Init+0x70>)
 8003436:	f001 fdd9 	bl	8004fec <HAL_DAC_Init>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8003440:	f000 fa84 	bl	800394c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003444:	2300      	movs	r3, #0
 8003446:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003448:	2300      	movs	r3, #0
 800344a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003450:	2300      	movs	r3, #0
 8003452:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003458:	1d3b      	adds	r3, r7, #4
 800345a:	2200      	movs	r2, #0
 800345c:	4619      	mov	r1, r3
 800345e:	480b      	ldr	r0, [pc, #44]	; (800348c <MX_DAC1_Init+0x70>)
 8003460:	f001 fde6 	bl	8005030 <HAL_DAC_ConfigChannel>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800346a:	f000 fa6f 	bl	800394c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800346e:	1d3b      	adds	r3, r7, #4
 8003470:	2210      	movs	r2, #16
 8003472:	4619      	mov	r1, r3
 8003474:	4805      	ldr	r0, [pc, #20]	; (800348c <MX_DAC1_Init+0x70>)
 8003476:	f001 fddb 	bl	8005030 <HAL_DAC_ConfigChannel>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8003480:	f000 fa64 	bl	800394c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003484:	bf00      	nop
 8003486:	3728      	adds	r7, #40	; 0x28
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20000694 	.word	0x20000694
 8003490:	40007400 	.word	0x40007400

08003494 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08a      	sub	sp, #40	; 0x28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349c:	f107 0314 	add.w	r3, r7, #20
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	60da      	str	r2, [r3, #12]
 80034aa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a40      	ldr	r2, [pc, #256]	; (80035b4 <HAL_DAC_MspInit+0x120>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d17a      	bne.n	80035ac <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80034b6:	4b40      	ldr	r3, [pc, #256]	; (80035b8 <HAL_DAC_MspInit+0x124>)
 80034b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ba:	4a3f      	ldr	r2, [pc, #252]	; (80035b8 <HAL_DAC_MspInit+0x124>)
 80034bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034c0:	6593      	str	r3, [r2, #88]	; 0x58
 80034c2:	4b3d      	ldr	r3, [pc, #244]	; (80035b8 <HAL_DAC_MspInit+0x124>)
 80034c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ce:	4b3a      	ldr	r3, [pc, #232]	; (80035b8 <HAL_DAC_MspInit+0x124>)
 80034d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d2:	4a39      	ldr	r2, [pc, #228]	; (80035b8 <HAL_DAC_MspInit+0x124>)
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034da:	4b37      	ldr	r3, [pc, #220]	; (80035b8 <HAL_DAC_MspInit+0x124>)
 80034dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80034e6:	2330      	movs	r3, #48	; 0x30
 80034e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ea:	2303      	movs	r3, #3
 80034ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f2:	f107 0314 	add.w	r3, r7, #20
 80034f6:	4619      	mov	r1, r3
 80034f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034fc:	f002 f81a 	bl	8005534 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8003500:	4b2e      	ldr	r3, [pc, #184]	; (80035bc <HAL_DAC_MspInit+0x128>)
 8003502:	4a2f      	ldr	r2, [pc, #188]	; (80035c0 <HAL_DAC_MspInit+0x12c>)
 8003504:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8003506:	4b2d      	ldr	r3, [pc, #180]	; (80035bc <HAL_DAC_MspInit+0x128>)
 8003508:	2206      	movs	r2, #6
 800350a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800350c:	4b2b      	ldr	r3, [pc, #172]	; (80035bc <HAL_DAC_MspInit+0x128>)
 800350e:	2210      	movs	r2, #16
 8003510:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003512:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <HAL_DAC_MspInit+0x128>)
 8003514:	2200      	movs	r2, #0
 8003516:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003518:	4b28      	ldr	r3, [pc, #160]	; (80035bc <HAL_DAC_MspInit+0x128>)
 800351a:	2280      	movs	r2, #128	; 0x80
 800351c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800351e:	4b27      	ldr	r3, [pc, #156]	; (80035bc <HAL_DAC_MspInit+0x128>)
 8003520:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003524:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003526:	4b25      	ldr	r3, [pc, #148]	; (80035bc <HAL_DAC_MspInit+0x128>)
 8003528:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800352c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 800352e:	4b23      	ldr	r3, [pc, #140]	; (80035bc <HAL_DAC_MspInit+0x128>)
 8003530:	2200      	movs	r2, #0
 8003532:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003534:	4b21      	ldr	r3, [pc, #132]	; (80035bc <HAL_DAC_MspInit+0x128>)
 8003536:	2200      	movs	r2, #0
 8003538:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 800353a:	4820      	ldr	r0, [pc, #128]	; (80035bc <HAL_DAC_MspInit+0x128>)
 800353c:	f001 fe92 	bl	8005264 <HAL_DMA_Init>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8003546:	f000 fa01 	bl	800394c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a1b      	ldr	r2, [pc, #108]	; (80035bc <HAL_DAC_MspInit+0x128>)
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	4a1a      	ldr	r2, [pc, #104]	; (80035bc <HAL_DAC_MspInit+0x128>)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8003556:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <HAL_DAC_MspInit+0x130>)
 8003558:	4a1b      	ldr	r2, [pc, #108]	; (80035c8 <HAL_DAC_MspInit+0x134>)
 800355a:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 800355c:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <HAL_DAC_MspInit+0x130>)
 800355e:	2205      	movs	r2, #5
 8003560:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003562:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <HAL_DAC_MspInit+0x130>)
 8003564:	2210      	movs	r2, #16
 8003566:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003568:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <HAL_DAC_MspInit+0x130>)
 800356a:	2200      	movs	r2, #0
 800356c:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800356e:	4b15      	ldr	r3, [pc, #84]	; (80035c4 <HAL_DAC_MspInit+0x130>)
 8003570:	2280      	movs	r2, #128	; 0x80
 8003572:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003574:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <HAL_DAC_MspInit+0x130>)
 8003576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800357a:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800357c:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <HAL_DAC_MspInit+0x130>)
 800357e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003582:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_NORMAL;
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <HAL_DAC_MspInit+0x130>)
 8003586:	2200      	movs	r2, #0
 8003588:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <HAL_DAC_MspInit+0x130>)
 800358c:	2200      	movs	r2, #0
 800358e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8003590:	480c      	ldr	r0, [pc, #48]	; (80035c4 <HAL_DAC_MspInit+0x130>)
 8003592:	f001 fe67 	bl	8005264 <HAL_DMA_Init>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 800359c:	f000 f9d6 	bl	800394c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a08      	ldr	r2, [pc, #32]	; (80035c4 <HAL_DAC_MspInit+0x130>)
 80035a4:	60da      	str	r2, [r3, #12]
 80035a6:	4a07      	ldr	r2, [pc, #28]	; (80035c4 <HAL_DAC_MspInit+0x130>)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80035ac:	bf00      	nop
 80035ae:	3728      	adds	r7, #40	; 0x28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40007400 	.word	0x40007400
 80035b8:	40021000 	.word	0x40021000
 80035bc:	200006a8 	.word	0x200006a8
 80035c0:	40020030 	.word	0x40020030
 80035c4:	200006f0 	.word	0x200006f0
 80035c8:	40020044 	.word	0x40020044

080035cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035d2:	4b14      	ldr	r3, [pc, #80]	; (8003624 <MX_DMA_Init+0x58>)
 80035d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d6:	4a13      	ldr	r2, [pc, #76]	; (8003624 <MX_DMA_Init+0x58>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6493      	str	r3, [r2, #72]	; 0x48
 80035de:	4b11      	ldr	r3, [pc, #68]	; (8003624 <MX_DMA_Init+0x58>)
 80035e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	607b      	str	r3, [r7, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80035ea:	2200      	movs	r2, #0
 80035ec:	2100      	movs	r1, #0
 80035ee:	200b      	movs	r0, #11
 80035f0:	f001 fbdb 	bl	8004daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80035f4:	200b      	movs	r0, #11
 80035f6:	f001 fbf4 	bl	8004de2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80035fa:	2200      	movs	r2, #0
 80035fc:	2100      	movs	r1, #0
 80035fe:	200d      	movs	r0, #13
 8003600:	f001 fbd3 	bl	8004daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003604:	200d      	movs	r0, #13
 8003606:	f001 fbec 	bl	8004de2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800360a:	2200      	movs	r2, #0
 800360c:	2100      	movs	r1, #0
 800360e:	200e      	movs	r0, #14
 8003610:	f001 fbcb 	bl	8004daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003614:	200e      	movs	r0, #14
 8003616:	f001 fbe4 	bl	8004de2 <HAL_NVIC_EnableIRQ>

}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40021000 	.word	0x40021000

08003628 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	; 0x28
 800362c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800362e:	f107 0314 	add.w	r3, r7, #20
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	605a      	str	r2, [r3, #4]
 8003638:	609a      	str	r2, [r3, #8]
 800363a:	60da      	str	r2, [r3, #12]
 800363c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800363e:	4b67      	ldr	r3, [pc, #412]	; (80037dc <MX_GPIO_Init+0x1b4>)
 8003640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003642:	4a66      	ldr	r2, [pc, #408]	; (80037dc <MX_GPIO_Init+0x1b4>)
 8003644:	f043 0304 	orr.w	r3, r3, #4
 8003648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800364a:	4b64      	ldr	r3, [pc, #400]	; (80037dc <MX_GPIO_Init+0x1b4>)
 800364c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003656:	4b61      	ldr	r3, [pc, #388]	; (80037dc <MX_GPIO_Init+0x1b4>)
 8003658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365a:	4a60      	ldr	r2, [pc, #384]	; (80037dc <MX_GPIO_Init+0x1b4>)
 800365c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003662:	4b5e      	ldr	r3, [pc, #376]	; (80037dc <MX_GPIO_Init+0x1b4>)
 8003664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800366e:	4b5b      	ldr	r3, [pc, #364]	; (80037dc <MX_GPIO_Init+0x1b4>)
 8003670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003672:	4a5a      	ldr	r2, [pc, #360]	; (80037dc <MX_GPIO_Init+0x1b4>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800367a:	4b58      	ldr	r3, [pc, #352]	; (80037dc <MX_GPIO_Init+0x1b4>)
 800367c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003686:	4b55      	ldr	r3, [pc, #340]	; (80037dc <MX_GPIO_Init+0x1b4>)
 8003688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368a:	4a54      	ldr	r2, [pc, #336]	; (80037dc <MX_GPIO_Init+0x1b4>)
 800368c:	f043 0302 	orr.w	r3, r3, #2
 8003690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003692:	4b52      	ldr	r3, [pc, #328]	; (80037dc <MX_GPIO_Init+0x1b4>)
 8003694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 800369e:	2200      	movs	r2, #0
 80036a0:	f24c 31d0 	movw	r1, #50128	; 0xc3d0
 80036a4:	484e      	ldr	r0, [pc, #312]	; (80037e0 <MX_GPIO_Init+0x1b8>)
 80036a6:	f002 f8d7 	bl	8005858 <HAL_GPIO_WritePin>
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 80036aa:	2200      	movs	r2, #0
 80036ac:	f64e 41ff 	movw	r1, #60671	; 0xecff
 80036b0:	484c      	ldr	r0, [pc, #304]	; (80037e4 <MX_GPIO_Init+0x1bc>)
 80036b2:	f002 f8d1 	bl	8005858 <HAL_GPIO_WritePin>
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DI_OUT_1_P_Pin|LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 80036b6:	2200      	movs	r2, #0
 80036b8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80036bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036c0:	f002 f8ca 	bl	8005858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80036c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036ca:	2303      	movs	r3, #3
 80036cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036d2:	f107 0314 	add.w	r3, r7, #20
 80036d6:	4619      	mov	r1, r3
 80036d8:	4841      	ldr	r0, [pc, #260]	; (80037e0 <MX_GPIO_Init+0x1b8>)
 80036da:	f001 ff2b 	bl	8005534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_OUT_8_P_Pin|DI_OUT_8_N_Pin|DI_OUT_6_N_Pin|DI_OUT_5_P_Pin
 80036de:	f24c 33d0 	movw	r3, #50128	; 0xc3d0
 80036e2:	617b      	str	r3, [r7, #20]
                          |DI_OUT_3_N_Pin|DI_OUT_3_P_Pin|DI_OUT_1_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036e4:	2301      	movs	r3, #1
 80036e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ec:	2300      	movs	r3, #0
 80036ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036f0:	f107 0314 	add.w	r3, r7, #20
 80036f4:	4619      	mov	r1, r3
 80036f6:	483a      	ldr	r0, [pc, #232]	; (80037e0 <MX_GPIO_Init+0x1b8>)
 80036f8:	f001 ff1c 	bl	8005534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80036fc:	2309      	movs	r3, #9
 80036fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003700:	2303      	movs	r3, #3
 8003702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003704:	2300      	movs	r3, #0
 8003706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003708:	f107 0314 	add.w	r3, r7, #20
 800370c:	4619      	mov	r1, r3
 800370e:	4836      	ldr	r0, [pc, #216]	; (80037e8 <MX_GPIO_Init+0x1c0>)
 8003710:	f001 ff10 	bl	8005534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DI_1_Pin;
 8003714:	2302      	movs	r3, #2
 8003716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003718:	2300      	movs	r3, #0
 800371a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371c:	2300      	movs	r3, #0
 800371e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DI_1_GPIO_Port, &GPIO_InitStruct);
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	4619      	mov	r1, r3
 8003726:	4830      	ldr	r0, [pc, #192]	; (80037e8 <MX_GPIO_Init+0x1c0>)
 8003728:	f001 ff04 	bl	8005534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DI_2_Pin|DI_3_Pin|DI_4_Pin|DI_5_Pin;
 800372c:	230f      	movs	r3, #15
 800372e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003730:	2300      	movs	r3, #0
 8003732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003734:	2300      	movs	r3, #0
 8003736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003738:	f107 0314 	add.w	r3, r7, #20
 800373c:	4619      	mov	r1, r3
 800373e:	4828      	ldr	r0, [pc, #160]	; (80037e0 <MX_GPIO_Init+0x1b8>)
 8003740:	f001 fef8 	bl	8005534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DI_6_Pin|DI_7_Pin|DI_8_Pin;
 8003744:	2307      	movs	r3, #7
 8003746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003748:	2300      	movs	r3, #0
 800374a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374c:	2300      	movs	r3, #0
 800374e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003750:	f107 0314 	add.w	r3, r7, #20
 8003754:	4619      	mov	r1, r3
 8003756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800375a:	f001 feeb 	bl	8005534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_15;
 800375e:	f248 0308 	movw	r3, #32776	; 0x8008
 8003762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003764:	2303      	movs	r3, #3
 8003766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	2300      	movs	r3, #0
 800376a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800376c:	f107 0314 	add.w	r3, r7, #20
 8003770:	4619      	mov	r1, r3
 8003772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003776:	f001 fedd 	bl	8005534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DI_OUT_4_P_Pin|DI_OUT_6_P_Pin|DI_OUT_2_N_Pin|DI_OUT_4_N_Pin
 800377a:	f64e 43ff 	movw	r3, #60671	; 0xecff
 800377e:	617b      	str	r3, [r7, #20]
                          |DI_OUT_2_P_Pin|DI_OUT_7_N_Pin|DI_OUT_7_P_Pin|DI_OUT_5_N_Pin
                          |RFM_NSS_Pin|RFM_RST_Pin|RFM_DI_3_Pin|RFM_DI_0_Pin
                          |RFM_DI_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003780:	2301      	movs	r3, #1
 8003782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003784:	2300      	movs	r3, #0
 8003786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003788:	2300      	movs	r3, #0
 800378a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800378c:	f107 0314 	add.w	r3, r7, #20
 8003790:	4619      	mov	r1, r3
 8003792:	4814      	ldr	r0, [pc, #80]	; (80037e4 <MX_GPIO_Init+0x1bc>)
 8003794:	f001 fece 	bl	8005534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 8003798:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 800379c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800379e:	2303      	movs	r3, #3
 80037a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a6:	f107 0314 	add.w	r3, r7, #20
 80037aa:	4619      	mov	r1, r3
 80037ac:	480d      	ldr	r0, [pc, #52]	; (80037e4 <MX_GPIO_Init+0x1bc>)
 80037ae:	f001 fec1 	bl	8005534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DI_OUT_1_P_Pin|LED_R_Pin|LED_G_Pin;
 80037b2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80037b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037b8:	2301      	movs	r3, #1
 80037ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037bc:	2300      	movs	r3, #0
 80037be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c0:	2300      	movs	r3, #0
 80037c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c4:	f107 0314 	add.w	r3, r7, #20
 80037c8:	4619      	mov	r1, r3
 80037ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037ce:	f001 feb1 	bl	8005534 <HAL_GPIO_Init>

}
 80037d2:	bf00      	nop
 80037d4:	3728      	adds	r7, #40	; 0x28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000
 80037e0:	48000800 	.word	0x48000800
 80037e4:	48000400 	.word	0x48000400
 80037e8:	48001c00 	.word	0x48001c00

080037ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037f0:	f000 fab3 	bl	8003d5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037f4:	f000 f818 	bl	8003828 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037f8:	f7ff ff16 	bl	8003628 <MX_GPIO_Init>
  MX_DMA_Init();
 80037fc:	f7ff fee6 	bl	80035cc <MX_DMA_Init>
  MX_ADC1_Init();
 8003800:	f7ff fcd2 	bl	80031a8 <MX_ADC1_Init>
  MX_DAC1_Init();
 8003804:	f7ff fe0a 	bl	800341c <MX_DAC1_Init>
  MX_SPI3_Init();
 8003808:	f000 f8c4 	bl	8003994 <MX_SPI3_Init>
  MX_CRC_Init();
 800380c:	f7ff fdc4 	bl	8003398 <MX_CRC_Init>
  MX_TIM6_Init();
 8003810:	f000 f9d4 	bl	8003bbc <MX_TIM6_Init>
  MX_TIM7_Init();
 8003814:	f000 fa08 	bl	8003c28 <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 8003818:	f009 fd06 	bl	800d228 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  appMain.Startup();
 800381c:	4801      	ldr	r0, [pc, #4]	; (8003824 <main+0x38>)
 800381e:	f7fc ff2f 	bl	8000680 <_ZN7AppMain7StartupEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003822:	e7fe      	b.n	8003822 <main+0x36>
 8003824:	200001b0 	.word	0x200001b0

08003828 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b096      	sub	sp, #88	; 0x58
 800382c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800382e:	f107 0314 	add.w	r3, r7, #20
 8003832:	2244      	movs	r2, #68	; 0x44
 8003834:	2100      	movs	r1, #0
 8003836:	4618      	mov	r0, r3
 8003838:	f00a fad0 	bl	800dddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800383c:	463b      	mov	r3, r7
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	605a      	str	r2, [r3, #4]
 8003844:	609a      	str	r2, [r3, #8]
 8003846:	60da      	str	r2, [r3, #12]
 8003848:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800384a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800384e:	f003 fdcf 	bl	80073f0 <HAL_PWREx_ControlVoltageScaling>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	bf14      	ite	ne
 8003858:	2301      	movne	r3, #1
 800385a:	2300      	moveq	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8003862:	f000 f873 	bl	800394c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8003866:	2330      	movs	r3, #48	; 0x30
 8003868:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800386a:	2301      	movs	r3, #1
 800386c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800386e:	2301      	movs	r3, #1
 8003870:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003872:	2300      	movs	r3, #0
 8003874:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003876:	2360      	movs	r3, #96	; 0x60
 8003878:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800387a:	2302      	movs	r3, #2
 800387c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800387e:	2301      	movs	r3, #1
 8003880:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003882:	2301      	movs	r3, #1
 8003884:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8003886:	2324      	movs	r3, #36	; 0x24
 8003888:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800388a:	2307      	movs	r3, #7
 800388c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800388e:	2302      	movs	r3, #2
 8003890:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003892:	2302      	movs	r3, #2
 8003894:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003896:	f107 0314 	add.w	r3, r7, #20
 800389a:	4618      	mov	r0, r3
 800389c:	f003 fe0e 	bl	80074bc <HAL_RCC_OscConfig>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bf14      	ite	ne
 80038a6:	2301      	movne	r3, #1
 80038a8:	2300      	moveq	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 80038b0:	f000 f84c 	bl	800394c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038b4:	230f      	movs	r3, #15
 80038b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038b8:	2303      	movs	r3, #3
 80038ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038bc:	2300      	movs	r3, #0
 80038be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038c4:	2300      	movs	r3, #0
 80038c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80038c8:	463b      	mov	r3, r7
 80038ca:	2104      	movs	r1, #4
 80038cc:	4618      	mov	r0, r3
 80038ce:	f004 fa07 	bl	8007ce0 <HAL_RCC_ClockConfig>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	bf14      	ite	ne
 80038d8:	2301      	movne	r3, #1
 80038da:	2300      	moveq	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 80038e2:	f000 f833 	bl	800394c <Error_Handler>
  }
}
 80038e6:	bf00      	nop
 80038e8:	3758      	adds	r7, #88	; 0x58
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <HAL_TIM_PeriodElapsedCallback>:


/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM7){
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a04      	ldr	r2, [pc, #16]	; (8003910 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d102      	bne.n	8003908 <HAL_TIM_PeriodElapsedCallback+0x18>
		appMain.taskStatus.UpdateTasks();
 8003902:	4804      	ldr	r0, [pc, #16]	; (8003914 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003904:	f7fe ff8e 	bl	8002824 <_ZN11TaskHandler11UpdateTasksEv>
	}



}
 8003908:	bf00      	nop
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40001400 	.word	0x40001400
 8003914:	200001d0 	.word	0x200001d0

08003918 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]

}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <USB_CDC_RX_Interrupt>:
}




void USB_CDC_RX_Interrupt(uint8_t *data, uint32_t length){
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
	appMain.USBCDC.USB_Receive(data, length);
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4803      	ldr	r0, [pc, #12]	; (8003948 <USB_CDC_RX_Interrupt+0x1c>)
 800393c:	f7ff f98a 	bl	8002c54 <_ZN6USBCom11USB_ReceiveEPhm>
}
 8003940:	bf00      	nop
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	200002e0 	.word	0x200002e0

0800394c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003950:	b672      	cpsid	i
}
 8003952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003954:	e7fe      	b.n	8003954 <Error_Handler+0x8>
	...

08003958 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d107      	bne.n	8003978 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800396e:	4293      	cmp	r3, r2
 8003970:	d102      	bne.n	8003978 <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain;
 8003972:	4803      	ldr	r0, [pc, #12]	; (8003980 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003974:	f7fc fe05 	bl	8000582 <_ZN7AppMainC1Ev>
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	200001b0 	.word	0x200001b0

08003984 <_GLOBAL__sub_I_appMain>:
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
 8003988:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800398c:	2001      	movs	r0, #1
 800398e:	f7ff ffe3 	bl	8003958 <_Z41__static_initialization_and_destruction_0ii>
 8003992:	bd80      	pop	{r7, pc}

08003994 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003998:	4b1b      	ldr	r3, [pc, #108]	; (8003a08 <MX_SPI3_Init+0x74>)
 800399a:	4a1c      	ldr	r2, [pc, #112]	; (8003a0c <MX_SPI3_Init+0x78>)
 800399c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800399e:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <MX_SPI3_Init+0x74>)
 80039a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80039a6:	4b18      	ldr	r3, [pc, #96]	; (8003a08 <MX_SPI3_Init+0x74>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80039ac:	4b16      	ldr	r3, [pc, #88]	; (8003a08 <MX_SPI3_Init+0x74>)
 80039ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80039b2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039b4:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <MX_SPI3_Init+0x74>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039ba:	4b13      	ldr	r3, [pc, #76]	; (8003a08 <MX_SPI3_Init+0x74>)
 80039bc:	2200      	movs	r2, #0
 80039be:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80039c0:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <MX_SPI3_Init+0x74>)
 80039c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039c6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80039c8:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <MX_SPI3_Init+0x74>)
 80039ca:	2218      	movs	r2, #24
 80039cc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039ce:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <MX_SPI3_Init+0x74>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80039d4:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <MX_SPI3_Init+0x74>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039da:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <MX_SPI3_Init+0x74>)
 80039dc:	2200      	movs	r2, #0
 80039de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <MX_SPI3_Init+0x74>)
 80039e2:	2207      	movs	r2, #7
 80039e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80039e6:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <MX_SPI3_Init+0x74>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <MX_SPI3_Init+0x74>)
 80039ee:	2208      	movs	r2, #8
 80039f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80039f2:	4805      	ldr	r0, [pc, #20]	; (8003a08 <MX_SPI3_Init+0x74>)
 80039f4:	f004 fea4 	bl	8008740 <HAL_SPI_Init>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80039fe:	f7ff ffa5 	bl	800394c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003a02:	bf00      	nop
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20000738 	.word	0x20000738
 8003a0c:	40003c00 	.word	0x40003c00

08003a10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08a      	sub	sp, #40	; 0x28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a18:	f107 0314 	add.w	r3, r7, #20
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	60da      	str	r2, [r3, #12]
 8003a26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a17      	ldr	r2, [pc, #92]	; (8003a8c <HAL_SPI_MspInit+0x7c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d128      	bne.n	8003a84 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003a32:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <HAL_SPI_MspInit+0x80>)
 8003a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a36:	4a16      	ldr	r2, [pc, #88]	; (8003a90 <HAL_SPI_MspInit+0x80>)
 8003a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a3e:	4b14      	ldr	r3, [pc, #80]	; (8003a90 <HAL_SPI_MspInit+0x80>)
 8003a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a4a:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <HAL_SPI_MspInit+0x80>)
 8003a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4e:	4a10      	ldr	r2, [pc, #64]	; (8003a90 <HAL_SPI_MspInit+0x80>)
 8003a50:	f043 0304 	orr.w	r3, r3, #4
 8003a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a56:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <HAL_SPI_MspInit+0x80>)
 8003a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003a62:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a70:	2303      	movs	r3, #3
 8003a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003a74:	2306      	movs	r3, #6
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a78:	f107 0314 	add.w	r3, r7, #20
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4805      	ldr	r0, [pc, #20]	; (8003a94 <HAL_SPI_MspInit+0x84>)
 8003a80:	f001 fd58 	bl	8005534 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003a84:	bf00      	nop
 8003a86:	3728      	adds	r7, #40	; 0x28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40003c00 	.word	0x40003c00
 8003a90:	40021000 	.word	0x40021000
 8003a94:	48000800 	.word	0x48000800

08003a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a9e:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <HAL_MspInit+0x44>)
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa2:	4a0e      	ldr	r2, [pc, #56]	; (8003adc <HAL_MspInit+0x44>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	6613      	str	r3, [r2, #96]	; 0x60
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <HAL_MspInit+0x44>)
 8003aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	607b      	str	r3, [r7, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ab6:	4b09      	ldr	r3, [pc, #36]	; (8003adc <HAL_MspInit+0x44>)
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aba:	4a08      	ldr	r2, [pc, #32]	; (8003adc <HAL_MspInit+0x44>)
 8003abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ac2:	4b06      	ldr	r3, [pc, #24]	; (8003adc <HAL_MspInit+0x44>)
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000

08003ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ae4:	e7fe      	b.n	8003ae4 <NMI_Handler+0x4>

08003ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003aea:	e7fe      	b.n	8003aea <HardFault_Handler+0x4>

08003aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003af0:	e7fe      	b.n	8003af0 <MemManage_Handler+0x4>

08003af2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003af2:	b480      	push	{r7}
 8003af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003af6:	e7fe      	b.n	8003af6 <BusFault_Handler+0x4>

08003af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003afc:	e7fe      	b.n	8003afc <UsageFault_Handler+0x4>

08003afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003afe:	b480      	push	{r7}
 8003b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b10:	bf00      	nop
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b2c:	f000 f96a 	bl	8003e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b30:	bf00      	nop
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b38:	4802      	ldr	r0, [pc, #8]	; (8003b44 <DMA1_Channel1_IRQHandler+0x10>)
 8003b3a:	f001 fc4b 	bl	80053d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000628 	.word	0x20000628

08003b48 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8003b4c:	4802      	ldr	r0, [pc, #8]	; (8003b58 <DMA1_Channel3_IRQHandler+0x10>)
 8003b4e:	f001 fc41 	bl	80053d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	200006a8 	.word	0x200006a8

08003b5c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8003b60:	4802      	ldr	r0, [pc, #8]	; (8003b6c <DMA1_Channel4_IRQHandler+0x10>)
 8003b62:	f001 fc37 	bl	80053d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003b66:	bf00      	nop
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	200006f0 	.word	0x200006f0

08003b70 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003b74:	4802      	ldr	r0, [pc, #8]	; (8003b80 <TIM7_IRQHandler+0x10>)
 8003b76:	f005 fc17 	bl	80093a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	200007e8 	.word	0x200007e8

08003b84 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003b88:	4802      	ldr	r0, [pc, #8]	; (8003b94 <USB_IRQHandler+0x10>)
 8003b8a:	f001 ffd0 	bl	8005b2e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8003b8e:	bf00      	nop
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000f00 	.word	0x20000f00

08003b98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003b9c:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <SystemInit+0x20>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba2:	4a05      	ldr	r2, [pc, #20]	; (8003bb8 <SystemInit+0x20>)
 8003ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003bac:	bf00      	nop
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bc2:	1d3b      	adds	r3, r7, #4
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	605a      	str	r2, [r3, #4]
 8003bca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003bcc:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <MX_TIM6_Init+0x64>)
 8003bce:	4a15      	ldr	r2, [pc, #84]	; (8003c24 <MX_TIM6_Init+0x68>)
 8003bd0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8003bd2:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <MX_TIM6_Init+0x64>)
 8003bd4:	220a      	movs	r2, #10
 8003bd6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bd8:	4b11      	ldr	r3, [pc, #68]	; (8003c20 <MX_TIM6_Init+0x64>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16000;
 8003bde:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <MX_TIM6_Init+0x64>)
 8003be0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003be4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003be6:	4b0e      	ldr	r3, [pc, #56]	; (8003c20 <MX_TIM6_Init+0x64>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003bec:	480c      	ldr	r0, [pc, #48]	; (8003c20 <MX_TIM6_Init+0x64>)
 8003bee:	f005 fb2f 	bl	8009250 <HAL_TIM_Base_Init>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003bf8:	f7ff fea8 	bl	800394c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003c04:	1d3b      	adds	r3, r7, #4
 8003c06:	4619      	mov	r1, r3
 8003c08:	4805      	ldr	r0, [pc, #20]	; (8003c20 <MX_TIM6_Init+0x64>)
 8003c0a:	f005 fd6f 	bl	80096ec <HAL_TIMEx_MasterConfigSynchronization>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003c14:	f7ff fe9a 	bl	800394c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003c18:	bf00      	nop
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	2000079c 	.word	0x2000079c
 8003c24:	40001000 	.word	0x40001000

08003c28 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c2e:	1d3b      	adds	r3, r7, #4
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	605a      	str	r2, [r3, #4]
 8003c36:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003c38:	4b14      	ldr	r3, [pc, #80]	; (8003c8c <MX_TIM7_Init+0x64>)
 8003c3a:	4a15      	ldr	r2, [pc, #84]	; (8003c90 <MX_TIM7_Init+0x68>)
 8003c3c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10;
 8003c3e:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <MX_TIM7_Init+0x64>)
 8003c40:	220a      	movs	r2, #10
 8003c42:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c44:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <MX_TIM7_Init+0x64>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7199;
 8003c4a:	4b10      	ldr	r3, [pc, #64]	; (8003c8c <MX_TIM7_Init+0x64>)
 8003c4c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003c50:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c52:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <MX_TIM7_Init+0x64>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003c58:	480c      	ldr	r0, [pc, #48]	; (8003c8c <MX_TIM7_Init+0x64>)
 8003c5a:	f005 faf9 	bl	8009250 <HAL_TIM_Base_Init>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003c64:	f7ff fe72 	bl	800394c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003c68:	2320      	movs	r3, #32
 8003c6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003c70:	1d3b      	adds	r3, r7, #4
 8003c72:	4619      	mov	r1, r3
 8003c74:	4805      	ldr	r0, [pc, #20]	; (8003c8c <MX_TIM7_Init+0x64>)
 8003c76:	f005 fd39 	bl	80096ec <HAL_TIMEx_MasterConfigSynchronization>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003c80:	f7ff fe64 	bl	800394c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003c84:	bf00      	nop
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	200007e8 	.word	0x200007e8
 8003c90:	40001400 	.word	0x40001400

08003c94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a16      	ldr	r2, [pc, #88]	; (8003cfc <HAL_TIM_Base_MspInit+0x68>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003ca6:	4b16      	ldr	r3, [pc, #88]	; (8003d00 <HAL_TIM_Base_MspInit+0x6c>)
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003caa:	4a15      	ldr	r2, [pc, #84]	; (8003d00 <HAL_TIM_Base_MspInit+0x6c>)
 8003cac:	f043 0310 	orr.w	r3, r3, #16
 8003cb0:	6593      	str	r3, [r2, #88]	; 0x58
 8003cb2:	4b13      	ldr	r3, [pc, #76]	; (8003d00 <HAL_TIM_Base_MspInit+0x6c>)
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003cbe:	e018      	b.n	8003cf2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a0f      	ldr	r2, [pc, #60]	; (8003d04 <HAL_TIM_Base_MspInit+0x70>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d113      	bne.n	8003cf2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003cca:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <HAL_TIM_Base_MspInit+0x6c>)
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cce:	4a0c      	ldr	r2, [pc, #48]	; (8003d00 <HAL_TIM_Base_MspInit+0x6c>)
 8003cd0:	f043 0320 	orr.w	r3, r3, #32
 8003cd4:	6593      	str	r3, [r2, #88]	; 0x58
 8003cd6:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <HAL_TIM_Base_MspInit+0x6c>)
 8003cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	60bb      	str	r3, [r7, #8]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	2037      	movs	r0, #55	; 0x37
 8003ce8:	f001 f85f 	bl	8004daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003cec:	2037      	movs	r0, #55	; 0x37
 8003cee:	f001 f878 	bl	8004de2 <HAL_NVIC_EnableIRQ>
}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40001000 	.word	0x40001000
 8003d00:	40021000 	.word	0x40021000
 8003d04:	40001400 	.word	0x40001400

08003d08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d0c:	f7ff ff44 	bl	8003b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d10:	480c      	ldr	r0, [pc, #48]	; (8003d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8003d12:	490d      	ldr	r1, [pc, #52]	; (8003d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d14:	4a0d      	ldr	r2, [pc, #52]	; (8003d4c <LoopForever+0xe>)
  movs r3, #0
 8003d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d18:	e002      	b.n	8003d20 <LoopCopyDataInit>

08003d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d1e:	3304      	adds	r3, #4

08003d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d24:	d3f9      	bcc.n	8003d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d26:	4a0a      	ldr	r2, [pc, #40]	; (8003d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d28:	4c0a      	ldr	r4, [pc, #40]	; (8003d54 <LoopForever+0x16>)
  movs r3, #0
 8003d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d2c:	e001      	b.n	8003d32 <LoopFillZerobss>

08003d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d30:	3204      	adds	r2, #4

08003d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d34:	d3fb      	bcc.n	8003d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d36:	f00a f82d 	bl	800dd94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d3a:	f7ff fd57 	bl	80037ec <main>

08003d3e <LoopForever>:

LoopForever:
    b LoopForever
 8003d3e:	e7fe      	b.n	8003d3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003d40:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d48:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8003d4c:	0800debc 	.word	0x0800debc
  ldr r2, =_sbss
 8003d50:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8003d54:	200011fc 	.word	0x200011fc

08003d58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d58:	e7fe      	b.n	8003d58 <ADC1_IRQHandler>

08003d5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d64:	2003      	movs	r0, #3
 8003d66:	f001 f815 	bl	8004d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d6a:	200f      	movs	r0, #15
 8003d6c:	f000 f80e 	bl	8003d8c <HAL_InitTick>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	71fb      	strb	r3, [r7, #7]
 8003d7a:	e001      	b.n	8003d80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d7c:	f7ff fe8c 	bl	8003a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d80:	79fb      	ldrb	r3, [r7, #7]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003d98:	4b17      	ldr	r3, [pc, #92]	; (8003df8 <HAL_InitTick+0x6c>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d023      	beq.n	8003de8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003da0:	4b16      	ldr	r3, [pc, #88]	; (8003dfc <HAL_InitTick+0x70>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4b14      	ldr	r3, [pc, #80]	; (8003df8 <HAL_InitTick+0x6c>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	4619      	mov	r1, r3
 8003daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8003db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db6:	4618      	mov	r0, r3
 8003db8:	f001 f821 	bl	8004dfe <HAL_SYSTICK_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10f      	bne.n	8003de2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b0f      	cmp	r3, #15
 8003dc6:	d809      	bhi.n	8003ddc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dc8:	2200      	movs	r2, #0
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd0:	f000 ffeb 	bl	8004daa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003dd4:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <HAL_InitTick+0x74>)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e007      	b.n	8003dec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
 8003de0:	e004      	b.n	8003dec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	73fb      	strb	r3, [r7, #15]
 8003de6:	e001      	b.n	8003dec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000008 	.word	0x20000008
 8003dfc:	20000000 	.word	0x20000000
 8003e00:	20000004 	.word	0x20000004

08003e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e08:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <HAL_IncTick+0x20>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <HAL_IncTick+0x24>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4413      	add	r3, r2
 8003e14:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <HAL_IncTick+0x24>)
 8003e16:	6013      	str	r3, [r2, #0]
}
 8003e18:	bf00      	nop
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	20000008 	.word	0x20000008
 8003e28:	20000834 	.word	0x20000834

08003e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e30:	4b03      	ldr	r3, [pc, #12]	; (8003e40 <HAL_GetTick+0x14>)
 8003e32:	681b      	ldr	r3, [r3, #0]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20000834 	.word	0x20000834

08003e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e4c:	f7ff ffee 	bl	8003e2c <HAL_GetTick>
 8003e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d005      	beq.n	8003e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <HAL_Delay+0x44>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4413      	add	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e6a:	bf00      	nop
 8003e6c:	f7ff ffde 	bl	8003e2c <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d8f7      	bhi.n	8003e6c <HAL_Delay+0x28>
  {
  }
}
 8003e7c:	bf00      	nop
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20000008 	.word	0x20000008

08003e8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	609a      	str	r2, [r3, #8]
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	609a      	str	r2, [r3, #8]
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	3360      	adds	r3, #96	; 0x60
 8003f06:	461a      	mov	r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	4b08      	ldr	r3, [pc, #32]	; (8003f38 <LL_ADC_SetOffset+0x44>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003f2c:	bf00      	nop
 8003f2e:	371c      	adds	r7, #28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	03fff000 	.word	0x03fff000

08003f3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3360      	adds	r3, #96	; 0x60
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	3360      	adds	r3, #96	; 0x60
 8003f78:	461a      	mov	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003f92:	bf00      	nop
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b087      	sub	sp, #28
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3330      	adds	r3, #48	; 0x30
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	0a1b      	lsrs	r3, r3, #8
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	f003 030c 	and.w	r3, r3, #12
 8003fba:	4413      	add	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	211f      	movs	r1, #31
 8003fca:	fa01 f303 	lsl.w	r3, r1, r3
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	401a      	ands	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	0e9b      	lsrs	r3, r3, #26
 8003fd6:	f003 011f 	and.w	r1, r3, #31
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b087      	sub	sp, #28
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3314      	adds	r3, #20
 8004006:	461a      	mov	r2, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	0e5b      	lsrs	r3, r3, #25
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	4413      	add	r3, r2
 8004014:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	0d1b      	lsrs	r3, r3, #20
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	2107      	movs	r1, #7
 8004024:	fa01 f303 	lsl.w	r3, r1, r3
 8004028:	43db      	mvns	r3, r3
 800402a:	401a      	ands	r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	0d1b      	lsrs	r3, r3, #20
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	fa01 f303 	lsl.w	r3, r1, r3
 800403a:	431a      	orrs	r2, r3
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004040:	bf00      	nop
 8004042:	371c      	adds	r7, #28
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004064:	43db      	mvns	r3, r3
 8004066:	401a      	ands	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f003 0318 	and.w	r3, r3, #24
 800406e:	4908      	ldr	r1, [pc, #32]	; (8004090 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004070:	40d9      	lsrs	r1, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	400b      	ands	r3, r1
 8004076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800407a:	431a      	orrs	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004082:	bf00      	nop
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	0007ffff 	.word	0x0007ffff

08004094 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80040a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6093      	str	r3, [r2, #8]
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040cc:	d101      	bne.n	80040d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80040f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004118:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800411c:	d101      	bne.n	8004122 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <LL_ADC_IsEnabled+0x18>
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <LL_ADC_IsEnabled+0x1a>
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	2b04      	cmp	r3, #4
 8004168:	d101      	bne.n	800416e <LL_ADC_REG_IsConversionOngoing+0x18>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b08      	cmp	r3, #8
 800418e:	d101      	bne.n	8004194 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
	...

080041a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e12c      	b.n	8004418 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d109      	bne.n	80041e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff f84f 	bl	8003270 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff ff67 	bl	80040b8 <LL_ADC_IsDeepPowerDownEnabled>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d004      	beq.n	80041fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff ff4d 	bl	8004094 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff ff82 	bl	8004108 <LL_ADC_IsInternalRegulatorEnabled>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d115      	bne.n	8004236 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff ff66 	bl	80040e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004214:	4b82      	ldr	r3, [pc, #520]	; (8004420 <HAL_ADC_Init+0x27c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	099b      	lsrs	r3, r3, #6
 800421a:	4a82      	ldr	r2, [pc, #520]	; (8004424 <HAL_ADC_Init+0x280>)
 800421c:	fba2 2303 	umull	r2, r3, r2, r3
 8004220:	099b      	lsrs	r3, r3, #6
 8004222:	3301      	adds	r3, #1
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004228:	e002      	b.n	8004230 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	3b01      	subs	r3, #1
 800422e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f9      	bne.n	800422a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff ff64 	bl	8004108 <LL_ADC_IsInternalRegulatorEnabled>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10d      	bne.n	8004262 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	f043 0210 	orr.w	r2, r3, #16
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004256:	f043 0201 	orr.w	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff ff75 	bl	8004156 <LL_ADC_REG_IsConversionOngoing>
 800426c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	2b00      	cmp	r3, #0
 8004278:	f040 80c5 	bne.w	8004406 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2b00      	cmp	r3, #0
 8004280:	f040 80c1 	bne.w	8004406 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004288:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800428c:	f043 0202 	orr.w	r2, r3, #2
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff ff49 	bl	8004130 <LL_ADC_IsEnabled>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10b      	bne.n	80042bc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042a4:	4860      	ldr	r0, [pc, #384]	; (8004428 <HAL_ADC_Init+0x284>)
 80042a6:	f7ff ff43 	bl	8004130 <LL_ADC_IsEnabled>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d105      	bne.n	80042bc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4619      	mov	r1, r3
 80042b6:	485d      	ldr	r0, [pc, #372]	; (800442c <HAL_ADC_Init+0x288>)
 80042b8:	f7ff fde8 	bl	8003e8c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	7e5b      	ldrb	r3, [r3, #25]
 80042c0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042c6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80042cc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80042d2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042da:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042dc:	4313      	orrs	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d106      	bne.n	80042f8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	3b01      	subs	r3, #1
 80042f0:	045b      	lsls	r3, r3, #17
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d009      	beq.n	8004314 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	4313      	orrs	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	4b45      	ldr	r3, [pc, #276]	; (8004430 <HAL_ADC_Init+0x28c>)
 800431c:	4013      	ands	r3, r2
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6812      	ldr	r2, [r2, #0]
 8004322:	69b9      	ldr	r1, [r7, #24]
 8004324:	430b      	orrs	r3, r1
 8004326:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff ff12 	bl	8004156 <LL_ADC_REG_IsConversionOngoing>
 8004332:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff ff1f 	bl	800417c <LL_ADC_INJ_IsConversionOngoing>
 800433e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d13d      	bne.n	80043c2 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d13a      	bne.n	80043c2 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004350:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004358:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800435a:	4313      	orrs	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004368:	f023 0302 	bic.w	r3, r3, #2
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	69b9      	ldr	r1, [r7, #24]
 8004372:	430b      	orrs	r3, r1
 8004374:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800437c:	2b01      	cmp	r3, #1
 800437e:	d118      	bne.n	80043b2 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800438a:	f023 0304 	bic.w	r3, r3, #4
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004396:	4311      	orrs	r1, r2
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800439c:	4311      	orrs	r1, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80043a2:	430a      	orrs	r2, r1
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0201 	orr.w	r2, r2, #1
 80043ae:	611a      	str	r2, [r3, #16]
 80043b0:	e007      	b.n	80043c2 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0201 	bic.w	r2, r2, #1
 80043c0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d10c      	bne.n	80043e4 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	f023 010f 	bic.w	r1, r3, #15
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	1e5a      	subs	r2, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	631a      	str	r2, [r3, #48]	; 0x30
 80043e2:	e007      	b.n	80043f4 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 020f 	bic.w	r2, r2, #15
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f8:	f023 0303 	bic.w	r3, r3, #3
 80043fc:	f043 0201 	orr.w	r2, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	655a      	str	r2, [r3, #84]	; 0x54
 8004404:	e007      	b.n	8004416 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	f043 0210 	orr.w	r2, r3, #16
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004416:	7ffb      	ldrb	r3, [r7, #31]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3720      	adds	r7, #32
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000000 	.word	0x20000000
 8004424:	053e2d63 	.word	0x053e2d63
 8004428:	50040000 	.word	0x50040000
 800442c:	50040300 	.word	0x50040300
 8004430:	fff0c007 	.word	0xfff0c007

08004434 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b0b6      	sub	sp, #216	; 0xd8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_ADC_ConfigChannel+0x22>
 8004452:	2302      	movs	r3, #2
 8004454:	e3b9      	b.n	8004bca <HAL_ADC_ConfigChannel+0x796>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff fe77 	bl	8004156 <LL_ADC_REG_IsConversionOngoing>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	f040 839e 	bne.w	8004bac <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b05      	cmp	r3, #5
 8004476:	d824      	bhi.n	80044c2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	3b02      	subs	r3, #2
 800447e:	2b03      	cmp	r3, #3
 8004480:	d81b      	bhi.n	80044ba <HAL_ADC_ConfigChannel+0x86>
 8004482:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <HAL_ADC_ConfigChannel+0x54>)
 8004484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004488:	08004499 	.word	0x08004499
 800448c:	080044a1 	.word	0x080044a1
 8004490:	080044a9 	.word	0x080044a9
 8004494:	080044b1 	.word	0x080044b1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	220c      	movs	r2, #12
 800449c:	605a      	str	r2, [r3, #4]
          break;
 800449e:	e011      	b.n	80044c4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2212      	movs	r2, #18
 80044a4:	605a      	str	r2, [r3, #4]
          break;
 80044a6:	e00d      	b.n	80044c4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2218      	movs	r2, #24
 80044ac:	605a      	str	r2, [r3, #4]
          break;
 80044ae:	e009      	b.n	80044c4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044b6:	605a      	str	r2, [r3, #4]
          break;
 80044b8:	e004      	b.n	80044c4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2206      	movs	r2, #6
 80044be:	605a      	str	r2, [r3, #4]
          break;
 80044c0:	e000      	b.n	80044c4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80044c2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	6859      	ldr	r1, [r3, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	461a      	mov	r2, r3
 80044d2:	f7ff fd64 	bl	8003f9e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff fe3b 	bl	8004156 <LL_ADC_REG_IsConversionOngoing>
 80044e0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff fe47 	bl	800417c <LL_ADC_INJ_IsConversionOngoing>
 80044ee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f040 81a6 	bne.w	8004848 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004500:	2b00      	cmp	r3, #0
 8004502:	f040 81a1 	bne.w	8004848 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	6819      	ldr	r1, [r3, #0]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	461a      	mov	r2, r3
 8004514:	f7ff fd6f 	bl	8003ff6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	695a      	ldr	r2, [r3, #20]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	08db      	lsrs	r3, r3, #3
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	2b04      	cmp	r3, #4
 8004538:	d00a      	beq.n	8004550 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	6919      	ldr	r1, [r3, #16]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800454a:	f7ff fcd3 	bl	8003ef4 <LL_ADC_SetOffset>
 800454e:	e17b      	b.n	8004848 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2100      	movs	r1, #0
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff fcf0 	bl	8003f3c <LL_ADC_GetOffsetChannel>
 800455c:	4603      	mov	r3, r0
 800455e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10a      	bne.n	800457c <HAL_ADC_ConfigChannel+0x148>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2100      	movs	r1, #0
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff fce5 	bl	8003f3c <LL_ADC_GetOffsetChannel>
 8004572:	4603      	mov	r3, r0
 8004574:	0e9b      	lsrs	r3, r3, #26
 8004576:	f003 021f 	and.w	r2, r3, #31
 800457a:	e01e      	b.n	80045ba <HAL_ADC_ConfigChannel+0x186>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2100      	movs	r1, #0
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fcda 	bl	8003f3c <LL_ADC_GetOffsetChannel>
 8004588:	4603      	mov	r3, r0
 800458a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004592:	fa93 f3a3 	rbit	r3, r3
 8004596:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800459a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800459e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80045a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80045aa:	2320      	movs	r3, #32
 80045ac:	e004      	b.n	80045b8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80045ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045b2:	fab3 f383 	clz	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d105      	bne.n	80045d2 <HAL_ADC_ConfigChannel+0x19e>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	0e9b      	lsrs	r3, r3, #26
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	e018      	b.n	8004604 <HAL_ADC_ConfigChannel+0x1d0>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80045de:	fa93 f3a3 	rbit	r3, r3
 80045e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80045e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80045ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80045f6:	2320      	movs	r3, #32
 80045f8:	e004      	b.n	8004604 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80045fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80045fe:	fab3 f383 	clz	r3, r3
 8004602:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004604:	429a      	cmp	r2, r3
 8004606:	d106      	bne.n	8004616 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2200      	movs	r2, #0
 800460e:	2100      	movs	r1, #0
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff fca9 	bl	8003f68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2101      	movs	r1, #1
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fc8d 	bl	8003f3c <LL_ADC_GetOffsetChannel>
 8004622:	4603      	mov	r3, r0
 8004624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10a      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x20e>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2101      	movs	r1, #1
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff fc82 	bl	8003f3c <LL_ADC_GetOffsetChannel>
 8004638:	4603      	mov	r3, r0
 800463a:	0e9b      	lsrs	r3, r3, #26
 800463c:	f003 021f 	and.w	r2, r3, #31
 8004640:	e01e      	b.n	8004680 <HAL_ADC_ConfigChannel+0x24c>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2101      	movs	r1, #1
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff fc77 	bl	8003f3c <LL_ADC_GetOffsetChannel>
 800464e:	4603      	mov	r3, r0
 8004650:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004654:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004658:	fa93 f3a3 	rbit	r3, r3
 800465c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004660:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004664:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004668:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004670:	2320      	movs	r3, #32
 8004672:	e004      	b.n	800467e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004674:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004678:	fab3 f383 	clz	r3, r3
 800467c:	b2db      	uxtb	r3, r3
 800467e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004688:	2b00      	cmp	r3, #0
 800468a:	d105      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x264>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	0e9b      	lsrs	r3, r3, #26
 8004692:	f003 031f 	and.w	r3, r3, #31
 8004696:	e018      	b.n	80046ca <HAL_ADC_ConfigChannel+0x296>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046a4:	fa93 f3a3 	rbit	r3, r3
 80046a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80046ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80046b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80046b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80046bc:	2320      	movs	r3, #32
 80046be:	e004      	b.n	80046ca <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80046c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046c4:	fab3 f383 	clz	r3, r3
 80046c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d106      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2200      	movs	r2, #0
 80046d4:	2101      	movs	r1, #1
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff fc46 	bl	8003f68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2102      	movs	r1, #2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fc2a 	bl	8003f3c <LL_ADC_GetOffsetChannel>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10a      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x2d4>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2102      	movs	r1, #2
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff fc1f 	bl	8003f3c <LL_ADC_GetOffsetChannel>
 80046fe:	4603      	mov	r3, r0
 8004700:	0e9b      	lsrs	r3, r3, #26
 8004702:	f003 021f 	and.w	r2, r3, #31
 8004706:	e01e      	b.n	8004746 <HAL_ADC_ConfigChannel+0x312>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2102      	movs	r1, #2
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff fc14 	bl	8003f3c <LL_ADC_GetOffsetChannel>
 8004714:	4603      	mov	r3, r0
 8004716:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800471e:	fa93 f3a3 	rbit	r3, r3
 8004722:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004726:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800472a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800472e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004736:	2320      	movs	r3, #32
 8004738:	e004      	b.n	8004744 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800473a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800473e:	fab3 f383 	clz	r3, r3
 8004742:	b2db      	uxtb	r3, r3
 8004744:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800474e:	2b00      	cmp	r3, #0
 8004750:	d105      	bne.n	800475e <HAL_ADC_ConfigChannel+0x32a>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	0e9b      	lsrs	r3, r3, #26
 8004758:	f003 031f 	and.w	r3, r3, #31
 800475c:	e016      	b.n	800478c <HAL_ADC_ConfigChannel+0x358>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004766:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800476a:	fa93 f3a3 	rbit	r3, r3
 800476e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004770:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004772:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004776:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800477e:	2320      	movs	r3, #32
 8004780:	e004      	b.n	800478c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004782:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004786:	fab3 f383 	clz	r3, r3
 800478a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800478c:	429a      	cmp	r2, r3
 800478e:	d106      	bne.n	800479e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2200      	movs	r2, #0
 8004796:	2102      	movs	r1, #2
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fbe5 	bl	8003f68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2103      	movs	r1, #3
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff fbc9 	bl	8003f3c <LL_ADC_GetOffsetChannel>
 80047aa:	4603      	mov	r3, r0
 80047ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10a      	bne.n	80047ca <HAL_ADC_ConfigChannel+0x396>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2103      	movs	r1, #3
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fbbe 	bl	8003f3c <LL_ADC_GetOffsetChannel>
 80047c0:	4603      	mov	r3, r0
 80047c2:	0e9b      	lsrs	r3, r3, #26
 80047c4:	f003 021f 	and.w	r2, r3, #31
 80047c8:	e017      	b.n	80047fa <HAL_ADC_ConfigChannel+0x3c6>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2103      	movs	r1, #3
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff fbb3 	bl	8003f3c <LL_ADC_GetOffsetChannel>
 80047d6:	4603      	mov	r3, r0
 80047d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047dc:	fa93 f3a3 	rbit	r3, r3
 80047e0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80047e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047e4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80047e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80047ec:	2320      	movs	r3, #32
 80047ee:	e003      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80047f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047f2:	fab3 f383 	clz	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004802:	2b00      	cmp	r3, #0
 8004804:	d105      	bne.n	8004812 <HAL_ADC_ConfigChannel+0x3de>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	0e9b      	lsrs	r3, r3, #26
 800480c:	f003 031f 	and.w	r3, r3, #31
 8004810:	e011      	b.n	8004836 <HAL_ADC_ConfigChannel+0x402>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004818:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800481a:	fa93 f3a3 	rbit	r3, r3
 800481e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004822:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800482a:	2320      	movs	r3, #32
 800482c:	e003      	b.n	8004836 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800482e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004830:	fab3 f383 	clz	r3, r3
 8004834:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004836:	429a      	cmp	r2, r3
 8004838:	d106      	bne.n	8004848 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2200      	movs	r2, #0
 8004840:	2103      	movs	r1, #3
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff fb90 	bl	8003f68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff fc6f 	bl	8004130 <LL_ADC_IsEnabled>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	f040 813f 	bne.w	8004ad8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6819      	ldr	r1, [r3, #0]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	461a      	mov	r2, r3
 8004868:	f7ff fbf0 	bl	800404c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	4a8e      	ldr	r2, [pc, #568]	; (8004aac <HAL_ADC_ConfigChannel+0x678>)
 8004872:	4293      	cmp	r3, r2
 8004874:	f040 8130 	bne.w	8004ad8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10b      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x46c>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	0e9b      	lsrs	r3, r3, #26
 800488e:	3301      	adds	r3, #1
 8004890:	f003 031f 	and.w	r3, r3, #31
 8004894:	2b09      	cmp	r3, #9
 8004896:	bf94      	ite	ls
 8004898:	2301      	movls	r3, #1
 800489a:	2300      	movhi	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	e019      	b.n	80048d4 <HAL_ADC_ConfigChannel+0x4a0>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a8:	fa93 f3a3 	rbit	r3, r3
 80048ac:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80048ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048b0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80048b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80048b8:	2320      	movs	r3, #32
 80048ba:	e003      	b.n	80048c4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80048bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048be:	fab3 f383 	clz	r3, r3
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	3301      	adds	r3, #1
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	2b09      	cmp	r3, #9
 80048cc:	bf94      	ite	ls
 80048ce:	2301      	movls	r3, #1
 80048d0:	2300      	movhi	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d079      	beq.n	80049cc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d107      	bne.n	80048f4 <HAL_ADC_ConfigChannel+0x4c0>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	0e9b      	lsrs	r3, r3, #26
 80048ea:	3301      	adds	r3, #1
 80048ec:	069b      	lsls	r3, r3, #26
 80048ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048f2:	e015      	b.n	8004920 <HAL_ADC_ConfigChannel+0x4ec>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048fc:	fa93 f3a3 	rbit	r3, r3
 8004900:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004904:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800490c:	2320      	movs	r3, #32
 800490e:	e003      	b.n	8004918 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004912:	fab3 f383 	clz	r3, r3
 8004916:	b2db      	uxtb	r3, r3
 8004918:	3301      	adds	r3, #1
 800491a:	069b      	lsls	r3, r3, #26
 800491c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004928:	2b00      	cmp	r3, #0
 800492a:	d109      	bne.n	8004940 <HAL_ADC_ConfigChannel+0x50c>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	0e9b      	lsrs	r3, r3, #26
 8004932:	3301      	adds	r3, #1
 8004934:	f003 031f 	and.w	r3, r3, #31
 8004938:	2101      	movs	r1, #1
 800493a:	fa01 f303 	lsl.w	r3, r1, r3
 800493e:	e017      	b.n	8004970 <HAL_ADC_ConfigChannel+0x53c>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004948:	fa93 f3a3 	rbit	r3, r3
 800494c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800494e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004950:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004958:	2320      	movs	r3, #32
 800495a:	e003      	b.n	8004964 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800495c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800495e:	fab3 f383 	clz	r3, r3
 8004962:	b2db      	uxtb	r3, r3
 8004964:	3301      	adds	r3, #1
 8004966:	f003 031f 	and.w	r3, r3, #31
 800496a:	2101      	movs	r1, #1
 800496c:	fa01 f303 	lsl.w	r3, r1, r3
 8004970:	ea42 0103 	orr.w	r1, r2, r3
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10a      	bne.n	8004996 <HAL_ADC_ConfigChannel+0x562>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	0e9b      	lsrs	r3, r3, #26
 8004986:	3301      	adds	r3, #1
 8004988:	f003 021f 	and.w	r2, r3, #31
 800498c:	4613      	mov	r3, r2
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	4413      	add	r3, r2
 8004992:	051b      	lsls	r3, r3, #20
 8004994:	e018      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x594>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499e:	fa93 f3a3 	rbit	r3, r3
 80049a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80049a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80049a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80049ae:	2320      	movs	r3, #32
 80049b0:	e003      	b.n	80049ba <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80049b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b4:	fab3 f383 	clz	r3, r3
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	3301      	adds	r3, #1
 80049bc:	f003 021f 	and.w	r2, r3, #31
 80049c0:	4613      	mov	r3, r2
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	4413      	add	r3, r2
 80049c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049c8:	430b      	orrs	r3, r1
 80049ca:	e080      	b.n	8004ace <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d107      	bne.n	80049e8 <HAL_ADC_ConfigChannel+0x5b4>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	0e9b      	lsrs	r3, r3, #26
 80049de:	3301      	adds	r3, #1
 80049e0:	069b      	lsls	r3, r3, #26
 80049e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049e6:	e015      	b.n	8004a14 <HAL_ADC_ConfigChannel+0x5e0>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f0:	fa93 f3a3 	rbit	r3, r3
 80049f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80049f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80049fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004a00:	2320      	movs	r3, #32
 8004a02:	e003      	b.n	8004a0c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a06:	fab3 f383 	clz	r3, r3
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	069b      	lsls	r3, r3, #26
 8004a10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d109      	bne.n	8004a34 <HAL_ADC_ConfigChannel+0x600>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	0e9b      	lsrs	r3, r3, #26
 8004a26:	3301      	adds	r3, #1
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a32:	e017      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x630>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	fa93 f3a3 	rbit	r3, r3
 8004a40:	61fb      	str	r3, [r7, #28]
  return result;
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004a4c:	2320      	movs	r3, #32
 8004a4e:	e003      	b.n	8004a58 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	fab3 f383 	clz	r3, r3
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	3301      	adds	r3, #1
 8004a5a:	f003 031f 	and.w	r3, r3, #31
 8004a5e:	2101      	movs	r1, #1
 8004a60:	fa01 f303 	lsl.w	r3, r1, r3
 8004a64:	ea42 0103 	orr.w	r1, r2, r3
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10d      	bne.n	8004a90 <HAL_ADC_ConfigChannel+0x65c>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	0e9b      	lsrs	r3, r3, #26
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	f003 021f 	and.w	r2, r3, #31
 8004a80:	4613      	mov	r3, r2
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	4413      	add	r3, r2
 8004a86:	3b1e      	subs	r3, #30
 8004a88:	051b      	lsls	r3, r3, #20
 8004a8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a8e:	e01d      	b.n	8004acc <HAL_ADC_ConfigChannel+0x698>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	fa93 f3a3 	rbit	r3, r3
 8004a9c:	613b      	str	r3, [r7, #16]
  return result;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d103      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004aa8:	2320      	movs	r3, #32
 8004aaa:	e005      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0x684>
 8004aac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	fab3 f383 	clz	r3, r3
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	3301      	adds	r3, #1
 8004aba:	f003 021f 	and.w	r2, r3, #31
 8004abe:	4613      	mov	r3, r2
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3b1e      	subs	r3, #30
 8004ac6:	051b      	lsls	r3, r3, #20
 8004ac8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004acc:	430b      	orrs	r3, r1
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	6892      	ldr	r2, [r2, #8]
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	f7ff fa8f 	bl	8003ff6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	4b3d      	ldr	r3, [pc, #244]	; (8004bd4 <HAL_ADC_ConfigChannel+0x7a0>)
 8004ade:	4013      	ands	r3, r2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d06c      	beq.n	8004bbe <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ae4:	483c      	ldr	r0, [pc, #240]	; (8004bd8 <HAL_ADC_ConfigChannel+0x7a4>)
 8004ae6:	f7ff f9f7 	bl	8003ed8 <LL_ADC_GetCommonPathInternalCh>
 8004aea:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a3a      	ldr	r2, [pc, #232]	; (8004bdc <HAL_ADC_ConfigChannel+0x7a8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d127      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004af8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004afc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d121      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a35      	ldr	r2, [pc, #212]	; (8004be0 <HAL_ADC_ConfigChannel+0x7ac>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d157      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b16:	4619      	mov	r1, r3
 8004b18:	482f      	ldr	r0, [pc, #188]	; (8004bd8 <HAL_ADC_ConfigChannel+0x7a4>)
 8004b1a:	f7ff f9ca 	bl	8003eb2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b1e:	4b31      	ldr	r3, [pc, #196]	; (8004be4 <HAL_ADC_ConfigChannel+0x7b0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	099b      	lsrs	r3, r3, #6
 8004b24:	4a30      	ldr	r2, [pc, #192]	; (8004be8 <HAL_ADC_ConfigChannel+0x7b4>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	099b      	lsrs	r3, r3, #6
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	4613      	mov	r3, r2
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	4413      	add	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004b38:	e002      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f9      	bne.n	8004b3a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b46:	e03a      	b.n	8004bbe <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a27      	ldr	r2, [pc, #156]	; (8004bec <HAL_ADC_ConfigChannel+0x7b8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d113      	bne.n	8004b7a <HAL_ADC_ConfigChannel+0x746>
 8004b52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10d      	bne.n	8004b7a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1f      	ldr	r2, [pc, #124]	; (8004be0 <HAL_ADC_ConfigChannel+0x7ac>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d12a      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b70:	4619      	mov	r1, r3
 8004b72:	4819      	ldr	r0, [pc, #100]	; (8004bd8 <HAL_ADC_ConfigChannel+0x7a4>)
 8004b74:	f7ff f99d 	bl	8003eb2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b78:	e021      	b.n	8004bbe <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1c      	ldr	r2, [pc, #112]	; (8004bf0 <HAL_ADC_ConfigChannel+0x7bc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d11c      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d116      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a12      	ldr	r2, [pc, #72]	; (8004be0 <HAL_ADC_ConfigChannel+0x7ac>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d111      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	480c      	ldr	r0, [pc, #48]	; (8004bd8 <HAL_ADC_ConfigChannel+0x7a4>)
 8004ba6:	f7ff f984 	bl	8003eb2 <LL_ADC_SetCommonPathInternalCh>
 8004baa:	e008      	b.n	8004bbe <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb0:	f043 0220 	orr.w	r2, r3, #32
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004bc6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	37d8      	adds	r7, #216	; 0xd8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	80080000 	.word	0x80080000
 8004bd8:	50040300 	.word	0x50040300
 8004bdc:	c7520000 	.word	0xc7520000
 8004be0:	50040000 	.word	0x50040000
 8004be4:	20000000 	.word	0x20000000
 8004be8:	053e2d63 	.word	0x053e2d63
 8004bec:	cb840000 	.word	0xcb840000
 8004bf0:	80000001 	.word	0x80000001

08004bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c04:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <__NVIC_SetPriorityGrouping+0x44>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c10:	4013      	ands	r3, r2
 8004c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c26:	4a04      	ldr	r2, [pc, #16]	; (8004c38 <__NVIC_SetPriorityGrouping+0x44>)
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	60d3      	str	r3, [r2, #12]
}
 8004c2c:	bf00      	nop
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	e000ed00 	.word	0xe000ed00

08004c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c40:	4b04      	ldr	r3, [pc, #16]	; (8004c54 <__NVIC_GetPriorityGrouping+0x18>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	0a1b      	lsrs	r3, r3, #8
 8004c46:	f003 0307 	and.w	r3, r3, #7
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	e000ed00 	.word	0xe000ed00

08004c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	db0b      	blt.n	8004c82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c6a:	79fb      	ldrb	r3, [r7, #7]
 8004c6c:	f003 021f 	and.w	r2, r3, #31
 8004c70:	4907      	ldr	r1, [pc, #28]	; (8004c90 <__NVIC_EnableIRQ+0x38>)
 8004c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	2001      	movs	r0, #1
 8004c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	e000e100 	.word	0xe000e100

08004c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	6039      	str	r1, [r7, #0]
 8004c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	db0a      	blt.n	8004cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	490c      	ldr	r1, [pc, #48]	; (8004ce0 <__NVIC_SetPriority+0x4c>)
 8004cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cb2:	0112      	lsls	r2, r2, #4
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cbc:	e00a      	b.n	8004cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	4908      	ldr	r1, [pc, #32]	; (8004ce4 <__NVIC_SetPriority+0x50>)
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	3b04      	subs	r3, #4
 8004ccc:	0112      	lsls	r2, r2, #4
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	761a      	strb	r2, [r3, #24]
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	e000e100 	.word	0xe000e100
 8004ce4:	e000ed00 	.word	0xe000ed00

08004ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b089      	sub	sp, #36	; 0x24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	f1c3 0307 	rsb	r3, r3, #7
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	bf28      	it	cs
 8004d06:	2304      	movcs	r3, #4
 8004d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	2b06      	cmp	r3, #6
 8004d10:	d902      	bls.n	8004d18 <NVIC_EncodePriority+0x30>
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	3b03      	subs	r3, #3
 8004d16:	e000      	b.n	8004d1a <NVIC_EncodePriority+0x32>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	43da      	mvns	r2, r3
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	401a      	ands	r2, r3
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d30:	f04f 31ff 	mov.w	r1, #4294967295
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3a:	43d9      	mvns	r1, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d40:	4313      	orrs	r3, r2
         );
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3724      	adds	r7, #36	; 0x24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
	...

08004d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d60:	d301      	bcc.n	8004d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d62:	2301      	movs	r3, #1
 8004d64:	e00f      	b.n	8004d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d66:	4a0a      	ldr	r2, [pc, #40]	; (8004d90 <SysTick_Config+0x40>)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d6e:	210f      	movs	r1, #15
 8004d70:	f04f 30ff 	mov.w	r0, #4294967295
 8004d74:	f7ff ff8e 	bl	8004c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d78:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <SysTick_Config+0x40>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d7e:	4b04      	ldr	r3, [pc, #16]	; (8004d90 <SysTick_Config+0x40>)
 8004d80:	2207      	movs	r2, #7
 8004d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	e000e010 	.word	0xe000e010

08004d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7ff ff29 	bl	8004bf4 <__NVIC_SetPriorityGrouping>
}
 8004da2:	bf00      	nop
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b086      	sub	sp, #24
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	4603      	mov	r3, r0
 8004db2:	60b9      	str	r1, [r7, #8]
 8004db4:	607a      	str	r2, [r7, #4]
 8004db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004dbc:	f7ff ff3e 	bl	8004c3c <__NVIC_GetPriorityGrouping>
 8004dc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	6978      	ldr	r0, [r7, #20]
 8004dc8:	f7ff ff8e 	bl	8004ce8 <NVIC_EncodePriority>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff ff5d 	bl	8004c94 <__NVIC_SetPriority>
}
 8004dda:	bf00      	nop
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b082      	sub	sp, #8
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	4603      	mov	r3, r0
 8004dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff ff31 	bl	8004c58 <__NVIC_EnableIRQ>
}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7ff ffa2 	bl	8004d50 <SysTick_Config>
 8004e0c:	4603      	mov	r3, r0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e054      	b.n	8004ed4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	7f5b      	ldrb	r3, [r3, #29]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d105      	bne.n	8004e40 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7fe face 	bl	80033dc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	791b      	ldrb	r3, [r3, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10c      	bne.n	8004e68 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a22      	ldr	r2, [pc, #136]	; (8004edc <HAL_CRC_Init+0xc4>)
 8004e54:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0218 	bic.w	r2, r2, #24
 8004e64:	609a      	str	r2, [r3, #8]
 8004e66:	e00c      	b.n	8004e82 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6899      	ldr	r1, [r3, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	461a      	mov	r2, r3
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f834 	bl	8004ee0 <HAL_CRCEx_Polynomial_Set>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e028      	b.n	8004ed4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	795b      	ldrb	r3, [r3, #5]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d105      	bne.n	8004e96 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e92:	611a      	str	r2, [r3, #16]
 8004e94:	e004      	b.n	8004ea0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6912      	ldr	r2, [r2, #16]
 8004e9e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695a      	ldr	r2, [r3, #20]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699a      	ldr	r2, [r3, #24]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	04c11db7 	.word	0x04c11db7

08004ee0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eec:	2300      	movs	r3, #0
 8004eee:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004ef0:	231f      	movs	r3, #31
 8004ef2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004ef4:	bf00      	nop
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1e5a      	subs	r2, r3, #1
 8004efa:	613a      	str	r2, [r7, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d009      	beq.n	8004f14 <HAL_CRCEx_Polynomial_Set+0x34>
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0f0      	beq.n	8004ef6 <HAL_CRCEx_Polynomial_Set+0x16>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b18      	cmp	r3, #24
 8004f18:	d846      	bhi.n	8004fa8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004f1a:	a201      	add	r2, pc, #4	; (adr r2, 8004f20 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f20:	08004faf 	.word	0x08004faf
 8004f24:	08004fa9 	.word	0x08004fa9
 8004f28:	08004fa9 	.word	0x08004fa9
 8004f2c:	08004fa9 	.word	0x08004fa9
 8004f30:	08004fa9 	.word	0x08004fa9
 8004f34:	08004fa9 	.word	0x08004fa9
 8004f38:	08004fa9 	.word	0x08004fa9
 8004f3c:	08004fa9 	.word	0x08004fa9
 8004f40:	08004f9d 	.word	0x08004f9d
 8004f44:	08004fa9 	.word	0x08004fa9
 8004f48:	08004fa9 	.word	0x08004fa9
 8004f4c:	08004fa9 	.word	0x08004fa9
 8004f50:	08004fa9 	.word	0x08004fa9
 8004f54:	08004fa9 	.word	0x08004fa9
 8004f58:	08004fa9 	.word	0x08004fa9
 8004f5c:	08004fa9 	.word	0x08004fa9
 8004f60:	08004f91 	.word	0x08004f91
 8004f64:	08004fa9 	.word	0x08004fa9
 8004f68:	08004fa9 	.word	0x08004fa9
 8004f6c:	08004fa9 	.word	0x08004fa9
 8004f70:	08004fa9 	.word	0x08004fa9
 8004f74:	08004fa9 	.word	0x08004fa9
 8004f78:	08004fa9 	.word	0x08004fa9
 8004f7c:	08004fa9 	.word	0x08004fa9
 8004f80:	08004f85 	.word	0x08004f85
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	2b06      	cmp	r3, #6
 8004f88:	d913      	bls.n	8004fb2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004f8e:	e010      	b.n	8004fb2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	2b07      	cmp	r3, #7
 8004f94:	d90f      	bls.n	8004fb6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004f9a:	e00c      	b.n	8004fb6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	2b0f      	cmp	r3, #15
 8004fa0:	d90b      	bls.n	8004fba <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004fa6:	e008      	b.n	8004fba <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	75fb      	strb	r3, [r7, #23]
      break;
 8004fac:	e006      	b.n	8004fbc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004fae:	bf00      	nop
 8004fb0:	e004      	b.n	8004fbc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004fb2:	bf00      	nop
 8004fb4:	e002      	b.n	8004fbc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004fb6:	bf00      	nop
 8004fb8:	e000      	b.n	8004fbc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004fba:	bf00      	nop
  }
  if (status == HAL_OK)
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10d      	bne.n	8004fde <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f023 0118 	bic.w	r1, r3, #24
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	371c      	adds	r7, #28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e014      	b.n	8005028 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	791b      	ldrb	r3, [r3, #4]
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d105      	bne.n	8005014 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7fe fa40 	bl	8003494 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	795b      	ldrb	r3, [r3, #5]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_DAC_ConfigChannel+0x1c>
 8005048:	2302      	movs	r3, #2
 800504a:	e107      	b.n	800525c <HAL_DAC_ConfigChannel+0x22c>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2202      	movs	r2, #2
 8005056:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b04      	cmp	r3, #4
 800505e:	d174      	bne.n	800514a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005060:	f7fe fee4 	bl	8003e2c <HAL_GetTick>
 8005064:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d134      	bne.n	80050d6 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800506c:	e011      	b.n	8005092 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800506e:	f7fe fedd 	bl	8003e2c <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b01      	cmp	r3, #1
 800507a:	d90a      	bls.n	8005092 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f043 0208 	orr.w	r2, r3, #8
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2203      	movs	r2, #3
 800508c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e0e4      	b.n	800525c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e6      	bne.n	800506e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80050a0:	2001      	movs	r0, #1
 80050a2:	f7fe fecf 	bl	8003e44 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	6992      	ldr	r2, [r2, #24]
 80050ae:	641a      	str	r2, [r3, #64]	; 0x40
 80050b0:	e01e      	b.n	80050f0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80050b2:	f7fe febb 	bl	8003e2c <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d90a      	bls.n	80050d6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	f043 0208 	orr.w	r2, r3, #8
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2203      	movs	r2, #3
 80050d0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e0c2      	b.n	800525c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050dc:	2b00      	cmp	r3, #0
 80050de:	dbe8      	blt.n	80050b2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80050e0:	2001      	movs	r0, #1
 80050e2:	f7fe feaf 	bl	8003e44 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	6992      	ldr	r2, [r2, #24]
 80050ee:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005100:	fa01 f303 	lsl.w	r3, r1, r3
 8005104:	43db      	mvns	r3, r3
 8005106:	ea02 0103 	and.w	r1, r2, r3
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	69da      	ldr	r2, [r3, #28]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f003 0310 	and.w	r3, r3, #16
 8005114:	409a      	lsls	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f003 0310 	and.w	r3, r3, #16
 800512a:	21ff      	movs	r1, #255	; 0xff
 800512c:	fa01 f303 	lsl.w	r3, r1, r3
 8005130:	43db      	mvns	r3, r3
 8005132:	ea02 0103 	and.w	r1, r2, r3
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	6a1a      	ldr	r2, [r3, #32]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f003 0310 	and.w	r3, r3, #16
 8005140:	409a      	lsls	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d11d      	bne.n	800518e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005158:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	221f      	movs	r2, #31
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	43db      	mvns	r3, r3
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	4013      	ands	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f003 0310 	and.w	r3, r3, #16
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	4313      	orrs	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005194:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f003 0310 	and.w	r3, r3, #16
 800519c:	2207      	movs	r2, #7
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	43db      	mvns	r3, r3
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	4013      	ands	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	431a      	orrs	r2, r3
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f003 0310 	and.w	r3, r3, #16
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6819      	ldr	r1, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f003 0310 	and.w	r3, r3, #16
 80051e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	43da      	mvns	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	400a      	ands	r2, r1
 80051f2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f003 0310 	and.w	r3, r3, #16
 8005202:	f640 72fc 	movw	r2, #4092	; 0xffc
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	43db      	mvns	r3, r3
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	4013      	ands	r3, r2
 8005210:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f003 0310 	and.w	r3, r3, #16
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	4313      	orrs	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6819      	ldr	r1, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	22c0      	movs	r2, #192	; 0xc0
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	43da      	mvns	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	400a      	ands	r2, r1
 800524c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3720      	adds	r7, #32
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e098      	b.n	80053a8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	4b4d      	ldr	r3, [pc, #308]	; (80053b4 <HAL_DMA_Init+0x150>)
 800527e:	429a      	cmp	r2, r3
 8005280:	d80f      	bhi.n	80052a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	4b4b      	ldr	r3, [pc, #300]	; (80053b8 <HAL_DMA_Init+0x154>)
 800528a:	4413      	add	r3, r2
 800528c:	4a4b      	ldr	r2, [pc, #300]	; (80053bc <HAL_DMA_Init+0x158>)
 800528e:	fba2 2303 	umull	r2, r3, r2, r3
 8005292:	091b      	lsrs	r3, r3, #4
 8005294:	009a      	lsls	r2, r3, #2
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a48      	ldr	r2, [pc, #288]	; (80053c0 <HAL_DMA_Init+0x15c>)
 800529e:	641a      	str	r2, [r3, #64]	; 0x40
 80052a0:	e00e      	b.n	80052c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	4b46      	ldr	r3, [pc, #280]	; (80053c4 <HAL_DMA_Init+0x160>)
 80052aa:	4413      	add	r3, r2
 80052ac:	4a43      	ldr	r2, [pc, #268]	; (80053bc <HAL_DMA_Init+0x158>)
 80052ae:	fba2 2303 	umull	r2, r3, r2, r3
 80052b2:	091b      	lsrs	r3, r3, #4
 80052b4:	009a      	lsls	r2, r3, #2
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a42      	ldr	r2, [pc, #264]	; (80053c8 <HAL_DMA_Init+0x164>)
 80052be:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80052d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80052e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800531a:	d039      	beq.n	8005390 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005320:	4a27      	ldr	r2, [pc, #156]	; (80053c0 <HAL_DMA_Init+0x15c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d11a      	bne.n	800535c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005326:	4b29      	ldr	r3, [pc, #164]	; (80053cc <HAL_DMA_Init+0x168>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532e:	f003 031c 	and.w	r3, r3, #28
 8005332:	210f      	movs	r1, #15
 8005334:	fa01 f303 	lsl.w	r3, r1, r3
 8005338:	43db      	mvns	r3, r3
 800533a:	4924      	ldr	r1, [pc, #144]	; (80053cc <HAL_DMA_Init+0x168>)
 800533c:	4013      	ands	r3, r2
 800533e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005340:	4b22      	ldr	r3, [pc, #136]	; (80053cc <HAL_DMA_Init+0x168>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6859      	ldr	r1, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534c:	f003 031c 	and.w	r3, r3, #28
 8005350:	fa01 f303 	lsl.w	r3, r1, r3
 8005354:	491d      	ldr	r1, [pc, #116]	; (80053cc <HAL_DMA_Init+0x168>)
 8005356:	4313      	orrs	r3, r2
 8005358:	600b      	str	r3, [r1, #0]
 800535a:	e019      	b.n	8005390 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800535c:	4b1c      	ldr	r3, [pc, #112]	; (80053d0 <HAL_DMA_Init+0x16c>)
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005364:	f003 031c 	and.w	r3, r3, #28
 8005368:	210f      	movs	r1, #15
 800536a:	fa01 f303 	lsl.w	r3, r1, r3
 800536e:	43db      	mvns	r3, r3
 8005370:	4917      	ldr	r1, [pc, #92]	; (80053d0 <HAL_DMA_Init+0x16c>)
 8005372:	4013      	ands	r3, r2
 8005374:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005376:	4b16      	ldr	r3, [pc, #88]	; (80053d0 <HAL_DMA_Init+0x16c>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6859      	ldr	r1, [r3, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005382:	f003 031c 	and.w	r3, r3, #28
 8005386:	fa01 f303 	lsl.w	r3, r1, r3
 800538a:	4911      	ldr	r1, [pc, #68]	; (80053d0 <HAL_DMA_Init+0x16c>)
 800538c:	4313      	orrs	r3, r2
 800538e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	40020407 	.word	0x40020407
 80053b8:	bffdfff8 	.word	0xbffdfff8
 80053bc:	cccccccd 	.word	0xcccccccd
 80053c0:	40020000 	.word	0x40020000
 80053c4:	bffdfbf8 	.word	0xbffdfbf8
 80053c8:	40020400 	.word	0x40020400
 80053cc:	400200a8 	.word	0x400200a8
 80053d0:	400204a8 	.word	0x400204a8

080053d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f0:	f003 031c 	and.w	r3, r3, #28
 80053f4:	2204      	movs	r2, #4
 80053f6:	409a      	lsls	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d026      	beq.n	800544e <HAL_DMA_IRQHandler+0x7a>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	d021      	beq.n	800544e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b00      	cmp	r3, #0
 8005416:	d107      	bne.n	8005428 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0204 	bic.w	r2, r2, #4
 8005426:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542c:	f003 021c 	and.w	r2, r3, #28
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	2104      	movs	r1, #4
 8005436:	fa01 f202 	lsl.w	r2, r1, r2
 800543a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005440:	2b00      	cmp	r3, #0
 8005442:	d071      	beq.n	8005528 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800544c:	e06c      	b.n	8005528 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005452:	f003 031c 	and.w	r3, r3, #28
 8005456:	2202      	movs	r2, #2
 8005458:	409a      	lsls	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4013      	ands	r3, r2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d02e      	beq.n	80054c0 <HAL_DMA_IRQHandler+0xec>
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d029      	beq.n	80054c0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0320 	and.w	r3, r3, #32
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10b      	bne.n	8005492 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 020a 	bic.w	r2, r2, #10
 8005488:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005496:	f003 021c 	and.w	r2, r3, #28
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	2102      	movs	r1, #2
 80054a0:	fa01 f202 	lsl.w	r2, r1, r2
 80054a4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d038      	beq.n	8005528 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80054be:	e033      	b.n	8005528 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c4:	f003 031c 	and.w	r3, r3, #28
 80054c8:	2208      	movs	r2, #8
 80054ca:	409a      	lsls	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4013      	ands	r3, r2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d02a      	beq.n	800552a <HAL_DMA_IRQHandler+0x156>
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f003 0308 	and.w	r3, r3, #8
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d025      	beq.n	800552a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 020e 	bic.w	r2, r2, #14
 80054ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f2:	f003 021c 	and.w	r2, r3, #28
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	2101      	movs	r1, #1
 80054fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005500:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551c:	2b00      	cmp	r3, #0
 800551e:	d004      	beq.n	800552a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005528:	bf00      	nop
 800552a:	bf00      	nop
}
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800553e:	2300      	movs	r3, #0
 8005540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005542:	e154      	b.n	80057ee <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	2101      	movs	r1, #1
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	fa01 f303 	lsl.w	r3, r1, r3
 8005550:	4013      	ands	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 8146 	beq.w	80057e8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	2b01      	cmp	r3, #1
 8005566:	d005      	beq.n	8005574 <HAL_GPIO_Init+0x40>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f003 0303 	and.w	r3, r3, #3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d130      	bne.n	80055d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	2203      	movs	r2, #3
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	43db      	mvns	r3, r3
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	4013      	ands	r3, r2
 800558a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	fa02 f303 	lsl.w	r3, r2, r3
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4313      	orrs	r3, r2
 800559c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055aa:	2201      	movs	r2, #1
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	fa02 f303 	lsl.w	r3, r2, r3
 80055b2:	43db      	mvns	r3, r3
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4013      	ands	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	091b      	lsrs	r3, r3, #4
 80055c0:	f003 0201 	and.w	r2, r3, #1
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d017      	beq.n	8005612 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	2203      	movs	r2, #3
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	43db      	mvns	r3, r3
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4013      	ands	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	fa02 f303 	lsl.w	r3, r2, r3
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d123      	bne.n	8005666 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	08da      	lsrs	r2, r3, #3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3208      	adds	r2, #8
 8005626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800562a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	220f      	movs	r2, #15
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	43db      	mvns	r3, r3
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4013      	ands	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	4313      	orrs	r3, r2
 8005656:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	08da      	lsrs	r2, r3, #3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3208      	adds	r2, #8
 8005660:	6939      	ldr	r1, [r7, #16]
 8005662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	2203      	movs	r2, #3
 8005672:	fa02 f303 	lsl.w	r3, r2, r3
 8005676:	43db      	mvns	r3, r3
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4013      	ands	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f003 0203 	and.w	r2, r3, #3
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	fa02 f303 	lsl.w	r3, r2, r3
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 80a0 	beq.w	80057e8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056a8:	4b58      	ldr	r3, [pc, #352]	; (800580c <HAL_GPIO_Init+0x2d8>)
 80056aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ac:	4a57      	ldr	r2, [pc, #348]	; (800580c <HAL_GPIO_Init+0x2d8>)
 80056ae:	f043 0301 	orr.w	r3, r3, #1
 80056b2:	6613      	str	r3, [r2, #96]	; 0x60
 80056b4:	4b55      	ldr	r3, [pc, #340]	; (800580c <HAL_GPIO_Init+0x2d8>)
 80056b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	60bb      	str	r3, [r7, #8]
 80056be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80056c0:	4a53      	ldr	r2, [pc, #332]	; (8005810 <HAL_GPIO_Init+0x2dc>)
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	089b      	lsrs	r3, r3, #2
 80056c6:	3302      	adds	r3, #2
 80056c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f003 0303 	and.w	r3, r3, #3
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	220f      	movs	r2, #15
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	43db      	mvns	r3, r3
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4013      	ands	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80056ea:	d019      	beq.n	8005720 <HAL_GPIO_Init+0x1ec>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a49      	ldr	r2, [pc, #292]	; (8005814 <HAL_GPIO_Init+0x2e0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d013      	beq.n	800571c <HAL_GPIO_Init+0x1e8>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a48      	ldr	r2, [pc, #288]	; (8005818 <HAL_GPIO_Init+0x2e4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00d      	beq.n	8005718 <HAL_GPIO_Init+0x1e4>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a47      	ldr	r2, [pc, #284]	; (800581c <HAL_GPIO_Init+0x2e8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d007      	beq.n	8005714 <HAL_GPIO_Init+0x1e0>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a46      	ldr	r2, [pc, #280]	; (8005820 <HAL_GPIO_Init+0x2ec>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d101      	bne.n	8005710 <HAL_GPIO_Init+0x1dc>
 800570c:	2304      	movs	r3, #4
 800570e:	e008      	b.n	8005722 <HAL_GPIO_Init+0x1ee>
 8005710:	2307      	movs	r3, #7
 8005712:	e006      	b.n	8005722 <HAL_GPIO_Init+0x1ee>
 8005714:	2303      	movs	r3, #3
 8005716:	e004      	b.n	8005722 <HAL_GPIO_Init+0x1ee>
 8005718:	2302      	movs	r3, #2
 800571a:	e002      	b.n	8005722 <HAL_GPIO_Init+0x1ee>
 800571c:	2301      	movs	r3, #1
 800571e:	e000      	b.n	8005722 <HAL_GPIO_Init+0x1ee>
 8005720:	2300      	movs	r3, #0
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	f002 0203 	and.w	r2, r2, #3
 8005728:	0092      	lsls	r2, r2, #2
 800572a:	4093      	lsls	r3, r2
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005732:	4937      	ldr	r1, [pc, #220]	; (8005810 <HAL_GPIO_Init+0x2dc>)
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	089b      	lsrs	r3, r3, #2
 8005738:	3302      	adds	r3, #2
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005740:	4b38      	ldr	r3, [pc, #224]	; (8005824 <HAL_GPIO_Init+0x2f0>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	43db      	mvns	r3, r3
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	4013      	ands	r3, r2
 800574e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005764:	4a2f      	ldr	r2, [pc, #188]	; (8005824 <HAL_GPIO_Init+0x2f0>)
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800576a:	4b2e      	ldr	r3, [pc, #184]	; (8005824 <HAL_GPIO_Init+0x2f0>)
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	43db      	mvns	r3, r3
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4013      	ands	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800578e:	4a25      	ldr	r2, [pc, #148]	; (8005824 <HAL_GPIO_Init+0x2f0>)
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005794:	4b23      	ldr	r3, [pc, #140]	; (8005824 <HAL_GPIO_Init+0x2f0>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	43db      	mvns	r3, r3
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	4013      	ands	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80057b8:	4a1a      	ldr	r2, [pc, #104]	; (8005824 <HAL_GPIO_Init+0x2f0>)
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80057be:	4b19      	ldr	r3, [pc, #100]	; (8005824 <HAL_GPIO_Init+0x2f0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	43db      	mvns	r3, r3
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	4013      	ands	r3, r2
 80057cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80057e2:	4a10      	ldr	r2, [pc, #64]	; (8005824 <HAL_GPIO_Init+0x2f0>)
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	3301      	adds	r3, #1
 80057ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	fa22 f303 	lsr.w	r3, r2, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f47f aea3 	bne.w	8005544 <HAL_GPIO_Init+0x10>
  }
}
 80057fe:	bf00      	nop
 8005800:	bf00      	nop
 8005802:	371c      	adds	r7, #28
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	40021000 	.word	0x40021000
 8005810:	40010000 	.word	0x40010000
 8005814:	48000400 	.word	0x48000400
 8005818:	48000800 	.word	0x48000800
 800581c:	48000c00 	.word	0x48000c00
 8005820:	48001000 	.word	0x48001000
 8005824:	40010400 	.word	0x40010400

08005828 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691a      	ldr	r2, [r3, #16]
 8005838:	887b      	ldrh	r3, [r7, #2]
 800583a:	4013      	ands	r3, r2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005840:	2301      	movs	r3, #1
 8005842:	73fb      	strb	r3, [r7, #15]
 8005844:	e001      	b.n	800584a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005846:	2300      	movs	r3, #0
 8005848:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800584a:	7bfb      	ldrb	r3, [r7, #15]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	460b      	mov	r3, r1
 8005862:	807b      	strh	r3, [r7, #2]
 8005864:	4613      	mov	r3, r2
 8005866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005868:	787b      	ldrb	r3, [r7, #1]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800586e:	887a      	ldrh	r2, [r7, #2]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005874:	e002      	b.n	800587c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005876:	887a      	ldrh	r2, [r7, #2]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800589a:	887a      	ldrh	r2, [r7, #2]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4013      	ands	r3, r2
 80058a0:	041a      	lsls	r2, r3, #16
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	43d9      	mvns	r1, r3
 80058a6:	887b      	ldrh	r3, [r7, #2]
 80058a8:	400b      	ands	r3, r1
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	619a      	str	r2, [r3, #24]
}
 80058b0:	bf00      	nop
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80058bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058be:	b08b      	sub	sp, #44	; 0x2c
 80058c0:	af06      	add	r7, sp, #24
 80058c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e109      	b.n	8005ae2 <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d106      	bne.n	80058e8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f007 febe 	bl	800d664 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2203      	movs	r2, #3
 80058ec:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f003 ffa5 	bl	8009844 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	687e      	ldr	r6, [r7, #4]
 8005902:	466d      	mov	r5, sp
 8005904:	f106 0410 	add.w	r4, r6, #16
 8005908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800590a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800590c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005910:	e885 0003 	stmia.w	r5, {r0, r1}
 8005914:	1d33      	adds	r3, r6, #4
 8005916:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005918:	6838      	ldr	r0, [r7, #0]
 800591a:	f003 ff6b 	bl	80097f4 <USB_CoreInit>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d005      	beq.n	8005930 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e0d8      	b.n	8005ae2 <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2100      	movs	r1, #0
 8005936:	4618      	mov	r0, r3
 8005938:	f003 ff9f 	bl	800987a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800593c:	2300      	movs	r3, #0
 800593e:	73fb      	strb	r3, [r7, #15]
 8005940:	e04d      	b.n	80059de <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005942:	7bfb      	ldrb	r3, [r7, #15]
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	4613      	mov	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	440b      	add	r3, r1
 8005952:	3305      	adds	r3, #5
 8005954:	2201      	movs	r2, #1
 8005956:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005958:	7bfb      	ldrb	r3, [r7, #15]
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	4613      	mov	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	440b      	add	r3, r1
 8005968:	3304      	adds	r3, #4
 800596a:	7bfa      	ldrb	r2, [r7, #15]
 800596c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800596e:	7bfa      	ldrb	r2, [r7, #15]
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	b298      	uxth	r0, r3
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	440b      	add	r3, r1
 8005980:	333a      	adds	r3, #58	; 0x3a
 8005982:	4602      	mov	r2, r0
 8005984:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	1c5a      	adds	r2, r3, #1
 800598c:	4613      	mov	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	440b      	add	r3, r1
 8005996:	3307      	adds	r3, #7
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800599c:	7bfa      	ldrb	r2, [r7, #15]
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	4613      	mov	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	440b      	add	r3, r1
 80059aa:	333c      	adds	r3, #60	; 0x3c
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80059b0:	7bfa      	ldrb	r2, [r7, #15]
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	4613      	mov	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	440b      	add	r3, r1
 80059be:	3340      	adds	r3, #64	; 0x40
 80059c0:	2200      	movs	r2, #0
 80059c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80059c4:	7bfa      	ldrb	r2, [r7, #15]
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	4613      	mov	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	440b      	add	r3, r1
 80059d2:	3344      	adds	r3, #68	; 0x44
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
 80059da:	3301      	adds	r3, #1
 80059dc:	73fb      	strb	r3, [r7, #15]
 80059de:	7bfa      	ldrb	r2, [r7, #15]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d3ac      	bcc.n	8005942 <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059e8:	2300      	movs	r3, #0
 80059ea:	73fb      	strb	r3, [r7, #15]
 80059ec:	e044      	b.n	8005a78 <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80059ee:	7bfa      	ldrb	r2, [r7, #15]
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	440b      	add	r3, r1
 80059fc:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a04:	7bfa      	ldrb	r2, [r7, #15]
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	440b      	add	r3, r1
 8005a12:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8005a16:	7bfa      	ldrb	r2, [r7, #15]
 8005a18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a1a:	7bfa      	ldrb	r2, [r7, #15]
 8005a1c:	6879      	ldr	r1, [r7, #4]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	440b      	add	r3, r1
 8005a28:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a30:	7bfa      	ldrb	r2, [r7, #15]
 8005a32:	6879      	ldr	r1, [r7, #4]
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	440b      	add	r3, r1
 8005a3e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a46:	7bfa      	ldrb	r2, [r7, #15]
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	440b      	add	r3, r1
 8005a54:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a5c:	7bfa      	ldrb	r2, [r7, #15]
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	4613      	mov	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	440b      	add	r3, r1
 8005a6a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a72:	7bfb      	ldrb	r3, [r7, #15]
 8005a74:	3301      	adds	r3, #1
 8005a76:	73fb      	strb	r3, [r7, #15]
 8005a78:	7bfa      	ldrb	r2, [r7, #15]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d3b5      	bcc.n	80059ee <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	603b      	str	r3, [r7, #0]
 8005a88:	687e      	ldr	r6, [r7, #4]
 8005a8a:	466d      	mov	r5, sp
 8005a8c:	f106 0410 	add.w	r4, r6, #16
 8005a90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a98:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a9c:	1d33      	adds	r3, r6, #4
 8005a9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005aa0:	6838      	ldr	r0, [r7, #0]
 8005aa2:	f003 fef7 	bl	8009894 <USB_DevInit>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d005      	beq.n	8005ab8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e014      	b.n	8005ae2 <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d102      	bne.n	8005ad6 <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f001 fc55 	bl	8007380 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f005 fe9f 	bl	800b81e <USB_DevDisconnect>

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005aea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b082      	sub	sp, #8
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d101      	bne.n	8005b00 <HAL_PCD_Start+0x16>
 8005afc:	2302      	movs	r3, #2
 8005afe:	e012      	b.n	8005b26 <HAL_PCD_Start+0x3c>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f003 fe82 	bl	8009816 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f005 fe6a 	bl	800b7f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f005 fe84 	bl	800b848 <USB_ReadInterrupts>
 8005b40:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fb3e 	bl	80061ce <PCD_EP_ISR_Handler>

    return;
 8005b52:	e110      	b.n	8005d76 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d013      	beq.n	8005b86 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b70:	b292      	uxth	r2, r2
 8005b72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f007 fe05 	bl	800d786 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f8fc 	bl	8005d7c <HAL_PCD_SetAddress>

    return;
 8005b84:	e0f7      	b.n	8005d76 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00c      	beq.n	8005baa <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ba2:	b292      	uxth	r2, r2
 8005ba4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005ba8:	e0e5      	b.n	8005d76 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00c      	beq.n	8005bce <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bc6:	b292      	uxth	r2, r2
 8005bc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005bcc:	e0d3      	b.n	8005d76 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d034      	beq.n	8005c42 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0204 	bic.w	r2, r2, #4
 8005bea:	b292      	uxth	r2, r2
 8005bec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0208 	bic.w	r2, r2, #8
 8005c02:	b292      	uxth	r2, r2
 8005c04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d107      	bne.n	8005c22 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f008 f863 	bl	800dce8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f007 fde8 	bl	800d7f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c3a:	b292      	uxth	r2, r2
 8005c3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005c40:	e099      	b.n	8005d76 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d027      	beq.n	8005c9c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0208 	orr.w	r2, r2, #8
 8005c5e:	b292      	uxth	r2, r2
 8005c60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c76:	b292      	uxth	r2, r2
 8005c78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0204 	orr.w	r2, r2, #4
 8005c8e:	b292      	uxth	r2, r2
 8005c90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f007 fd95 	bl	800d7c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005c9a:	e06c      	b.n	8005d76 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d040      	beq.n	8005d28 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cb8:	b292      	uxth	r2, r2
 8005cba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d12b      	bne.n	8005d20 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f042 0204 	orr.w	r2, r2, #4
 8005cda:	b292      	uxth	r2, r2
 8005cdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0208 	orr.w	r2, r2, #8
 8005cf2:	b292      	uxth	r2, r2
 8005cf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	089b      	lsrs	r3, r3, #2
 8005d0c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005d16:	2101      	movs	r1, #1
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f007 ffe5 	bl	800dce8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005d1e:	e02a      	b.n	8005d76 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f007 fd4f 	bl	800d7c4 <HAL_PCD_SuspendCallback>
    return;
 8005d26:	e026      	b.n	8005d76 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00f      	beq.n	8005d52 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d44:	b292      	uxth	r2, r2
 8005d46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f007 fd0d 	bl	800d76a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005d50:	e011      	b.n	8005d76 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00c      	beq.n	8005d76 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d6e:	b292      	uxth	r2, r2
 8005d70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005d74:	bf00      	nop
  }
}
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d101      	bne.n	8005d96 <HAL_PCD_SetAddress+0x1a>
 8005d92:	2302      	movs	r3, #2
 8005d94:	e013      	b.n	8005dbe <HAL_PCD_SetAddress+0x42>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	78fa      	ldrb	r2, [r7, #3]
 8005da2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	78fa      	ldrb	r2, [r7, #3]
 8005dac:	4611      	mov	r1, r2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f005 fd0a 	bl	800b7c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b084      	sub	sp, #16
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	4608      	mov	r0, r1
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	70fb      	strb	r3, [r7, #3]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	803b      	strh	r3, [r7, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005de4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	da0f      	bge.n	8005e0c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dec:	78fb      	ldrb	r3, [r7, #3]
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	4413      	add	r3, r2
 8005e00:	3304      	adds	r3, #4
 8005e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2201      	movs	r2, #1
 8005e08:	705a      	strb	r2, [r3, #1]
 8005e0a:	e00f      	b.n	8005e2c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e0c:	78fb      	ldrb	r3, [r7, #3]
 8005e0e:	f003 0207 	and.w	r2, r3, #7
 8005e12:	4613      	mov	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	00db      	lsls	r3, r3, #3
 8005e1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	4413      	add	r3, r2
 8005e22:	3304      	adds	r3, #4
 8005e24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005e2c:	78fb      	ldrb	r3, [r7, #3]
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005e38:	883a      	ldrh	r2, [r7, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	78ba      	ldrb	r2, [r7, #2]
 8005e42:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	785b      	ldrb	r3, [r3, #1]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d004      	beq.n	8005e56 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e56:	78bb      	ldrb	r3, [r7, #2]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d102      	bne.n	8005e62 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d101      	bne.n	8005e70 <HAL_PCD_EP_Open+0xaa>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e00e      	b.n	8005e8e <HAL_PCD_EP_Open+0xc8>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68f9      	ldr	r1, [r7, #12]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f003 fd2a 	bl	80098d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8005e8c:	7afb      	ldrb	r3, [r7, #11]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ea2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	da0f      	bge.n	8005eca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	f003 0307 	and.w	r3, r3, #7
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	00db      	lsls	r3, r3, #3
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	705a      	strb	r2, [r3, #1]
 8005ec8:	e00f      	b.n	8005eea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005eca:	78fb      	ldrb	r3, [r7, #3]
 8005ecc:	f003 0207 	and.w	r2, r3, #7
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	4413      	add	r3, r2
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005eea:	78fb      	ldrb	r3, [r7, #3]
 8005eec:	f003 0307 	and.w	r3, r3, #7
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d101      	bne.n	8005f04 <HAL_PCD_EP_Close+0x6e>
 8005f00:	2302      	movs	r3, #2
 8005f02:	e00e      	b.n	8005f22 <HAL_PCD_EP_Close+0x8c>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68f9      	ldr	r1, [r7, #12]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f004 f89a 	bl	800a04c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b086      	sub	sp, #24
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	60f8      	str	r0, [r7, #12]
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	603b      	str	r3, [r7, #0]
 8005f36:	460b      	mov	r3, r1
 8005f38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f3a:	7afb      	ldrb	r3, [r7, #11]
 8005f3c:	f003 0207 	and.w	r2, r3, #7
 8005f40:	4613      	mov	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	3304      	adds	r3, #4
 8005f52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2200      	movs	r2, #0
 8005f64:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f6c:	7afb      	ldrb	r3, [r7, #11]
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f78:	7afb      	ldrb	r3, [r7, #11]
 8005f7a:	f003 0307 	and.w	r3, r3, #7
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6979      	ldr	r1, [r7, #20]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f004 fa4c 	bl	800a426 <USB_EPStartXfer>
 8005f8e:	e005      	b.n	8005f9c <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6979      	ldr	r1, [r7, #20]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f004 fa45 	bl	800a426 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	460b      	mov	r3, r1
 8005fb0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005fb2:	78fb      	ldrb	r3, [r7, #3]
 8005fb4:	f003 0207 	and.w	r2, r3, #7
 8005fb8:	6879      	ldr	r1, [r7, #4]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	440b      	add	r3, r1
 8005fc4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005fc8:	681b      	ldr	r3, [r3, #0]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b086      	sub	sp, #24
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	607a      	str	r2, [r7, #4]
 8005fe0:	603b      	str	r3, [r7, #0]
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fe6:	7afb      	ldrb	r3, [r7, #11]
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	4613      	mov	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4413      	add	r3, r2
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2200      	movs	r2, #0
 800601c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2201      	movs	r2, #1
 8006022:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006024:	7afb      	ldrb	r3, [r7, #11]
 8006026:	f003 0307 	and.w	r3, r3, #7
 800602a:	b2da      	uxtb	r2, r3
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006030:	7afb      	ldrb	r3, [r7, #11]
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	2b00      	cmp	r3, #0
 8006038:	d106      	bne.n	8006048 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6979      	ldr	r1, [r7, #20]
 8006040:	4618      	mov	r0, r3
 8006042:	f004 f9f0 	bl	800a426 <USB_EPStartXfer>
 8006046:	e005      	b.n	8006054 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6979      	ldr	r1, [r7, #20]
 800604e:	4618      	mov	r0, r3
 8006050:	f004 f9e9 	bl	800a426 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	460b      	mov	r3, r1
 8006068:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800606a:	78fb      	ldrb	r3, [r7, #3]
 800606c:	f003 0207 	and.w	r2, r3, #7
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	429a      	cmp	r2, r3
 8006076:	d901      	bls.n	800607c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e04e      	b.n	800611a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800607c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006080:	2b00      	cmp	r3, #0
 8006082:	da0f      	bge.n	80060a4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	4613      	mov	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	4413      	add	r3, r2
 8006098:	3304      	adds	r3, #4
 800609a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2201      	movs	r2, #1
 80060a0:	705a      	strb	r2, [r3, #1]
 80060a2:	e00d      	b.n	80060c0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80060a4:	78fa      	ldrb	r2, [r7, #3]
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	4413      	add	r3, r2
 80060b6:	3304      	adds	r3, #4
 80060b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2201      	movs	r2, #1
 80060c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060c6:	78fb      	ldrb	r3, [r7, #3]
 80060c8:	f003 0307 	and.w	r3, r3, #7
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d101      	bne.n	80060e0 <HAL_PCD_EP_SetStall+0x82>
 80060dc:	2302      	movs	r3, #2
 80060de:	e01c      	b.n	800611a <HAL_PCD_EP_SetStall+0xbc>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68f9      	ldr	r1, [r7, #12]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f005 fa6b 	bl	800b5ca <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060f4:	78fb      	ldrb	r3, [r7, #3]
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d108      	bne.n	8006110 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8006108:	4619      	mov	r1, r3
 800610a:	4610      	mov	r0, r2
 800610c:	f005 fbac 	bl	800b868 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b084      	sub	sp, #16
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	460b      	mov	r3, r1
 800612c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800612e:	78fb      	ldrb	r3, [r7, #3]
 8006130:	f003 020f 	and.w	r2, r3, #15
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	429a      	cmp	r2, r3
 800613a:	d901      	bls.n	8006140 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e042      	b.n	80061c6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006144:	2b00      	cmp	r3, #0
 8006146:	da0f      	bge.n	8006168 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006148:	78fb      	ldrb	r3, [r7, #3]
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	4413      	add	r3, r2
 800615c:	3304      	adds	r3, #4
 800615e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2201      	movs	r2, #1
 8006164:	705a      	strb	r2, [r3, #1]
 8006166:	e00f      	b.n	8006188 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	f003 0207 	and.w	r2, r3, #7
 800616e:	4613      	mov	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	4413      	add	r3, r2
 800617e:	3304      	adds	r3, #4
 8006180:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800618e:	78fb      	ldrb	r3, [r7, #3]
 8006190:	f003 0307 	and.w	r3, r3, #7
 8006194:	b2da      	uxtb	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d101      	bne.n	80061a8 <HAL_PCD_EP_ClrStall+0x86>
 80061a4:	2302      	movs	r3, #2
 80061a6:	e00e      	b.n	80061c6 <HAL_PCD_EP_ClrStall+0xa4>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68f9      	ldr	r1, [r7, #12]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f005 fa58 	bl	800b66c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b096      	sub	sp, #88	; 0x58
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80061d6:	e3a9      	b.n	800692c <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80061e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80061f2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f040 8169 	bne.w	80064ce <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80061fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006200:	f003 0310 	and.w	r3, r3, #16
 8006204:	2b00      	cmp	r3, #0
 8006206:	d150      	bne.n	80062aa <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	b29b      	uxth	r3, r3
 8006210:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006218:	81fb      	strh	r3, [r7, #14]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	89fb      	ldrh	r3, [r7, #14]
 8006220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006228:	b29b      	uxth	r3, r3
 800622a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	332c      	adds	r3, #44	; 0x2c
 8006230:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800623a:	b29b      	uxth	r3, r3
 800623c:	461a      	mov	r2, r3
 800623e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	4413      	add	r3, r2
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6812      	ldr	r2, [r2, #0]
 800624a:	4413      	add	r3, r2
 800624c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006258:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800625a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800625c:	695a      	ldr	r2, [r3, #20]
 800625e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	441a      	add	r2, r3
 8006264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006266:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006268:	2100      	movs	r1, #0
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f007 fa63 	bl	800d736 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 8357 	beq.w	800692c <PCD_EP_ISR_Handler+0x75e>
 800627e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	2b00      	cmp	r3, #0
 8006284:	f040 8352 	bne.w	800692c <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800628e:	b2db      	uxtb	r3, r3
 8006290:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006294:	b2da      	uxtb	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	b292      	uxth	r2, r2
 800629c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80062a8:	e340      	b.n	800692c <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80062b0:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	881b      	ldrh	r3, [r3, #0]
 80062b8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80062bc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80062c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d032      	beq.n	800632e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	461a      	mov	r2, r3
 80062d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	00db      	lsls	r3, r3, #3
 80062da:	4413      	add	r3, r2
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6812      	ldr	r2, [r2, #0]
 80062e0:	4413      	add	r3, r2
 80062e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80062ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ee:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 80062fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062fc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80062fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006300:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006302:	b29b      	uxth	r3, r3
 8006304:	f005 fafe 	bl	800b904 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	b29a      	uxth	r2, r3
 8006310:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006314:	4013      	ands	r3, r2
 8006316:	823b      	strh	r3, [r7, #16]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	8a3a      	ldrh	r2, [r7, #16]
 800631e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006322:	b292      	uxth	r2, r2
 8006324:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f007 f9d8 	bl	800d6dc <HAL_PCD_SetupStageCallback>
 800632c:	e2fe      	b.n	800692c <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800632e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006332:	2b00      	cmp	r3, #0
 8006334:	f280 82fa 	bge.w	800692c <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	b29a      	uxth	r2, r3
 8006340:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006344:	4013      	ands	r3, r2
 8006346:	83fb      	strh	r3, [r7, #30]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	8bfa      	ldrh	r2, [r7, #30]
 800634e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006352:	b292      	uxth	r2, r2
 8006354:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800635e:	b29b      	uxth	r3, r3
 8006360:	461a      	mov	r2, r3
 8006362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	4413      	add	r3, r2
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	6812      	ldr	r2, [r2, #0]
 800636e:	4413      	add	r3, r2
 8006370:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800637a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800637c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800637e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d019      	beq.n	80063ba <PCD_EP_ISR_Handler+0x1ec>
 8006386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d015      	beq.n	80063ba <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006394:	6959      	ldr	r1, [r3, #20]
 8006396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006398:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800639a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800639c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800639e:	b29b      	uxth	r3, r3
 80063a0:	f005 fab0 	bl	800b904 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80063a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a6:	695a      	ldr	r2, [r3, #20]
 80063a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	441a      	add	r2, r3
 80063ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80063b2:	2100      	movs	r1, #0
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f007 f9a3 	bl	800d700 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80063c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80063c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f040 82ad 	bne.w	800692c <PCD_EP_ISR_Handler+0x75e>
 80063d2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80063d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80063da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063de:	f000 82a5 	beq.w	800692c <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	61bb      	str	r3, [r7, #24]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	461a      	mov	r2, r3
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	4413      	add	r3, r2
 80063f8:	61bb      	str	r3, [r7, #24]
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006400:	617b      	str	r3, [r7, #20]
 8006402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b3e      	cmp	r3, #62	; 0x3e
 8006408:	d918      	bls.n	800643c <PCD_EP_ISR_Handler+0x26e>
 800640a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	095b      	lsrs	r3, r3, #5
 8006410:	647b      	str	r3, [r7, #68]	; 0x44
 8006412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f003 031f 	and.w	r3, r3, #31
 800641a:	2b00      	cmp	r3, #0
 800641c:	d102      	bne.n	8006424 <PCD_EP_ISR_Handler+0x256>
 800641e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006420:	3b01      	subs	r3, #1
 8006422:	647b      	str	r3, [r7, #68]	; 0x44
 8006424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006426:	b29b      	uxth	r3, r3
 8006428:	029b      	lsls	r3, r3, #10
 800642a:	b29b      	uxth	r3, r3
 800642c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006434:	b29a      	uxth	r2, r3
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	801a      	strh	r2, [r3, #0]
 800643a:	e029      	b.n	8006490 <PCD_EP_ISR_Handler+0x2c2>
 800643c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d112      	bne.n	800646a <PCD_EP_ISR_Handler+0x29c>
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	b29b      	uxth	r3, r3
 800644a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800644e:	b29a      	uxth	r2, r3
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	801a      	strh	r2, [r3, #0]
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	b29b      	uxth	r3, r3
 800645a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800645e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006462:	b29a      	uxth	r2, r3
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	801a      	strh	r2, [r3, #0]
 8006468:	e012      	b.n	8006490 <PCD_EP_ISR_Handler+0x2c2>
 800646a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	085b      	lsrs	r3, r3, #1
 8006470:	647b      	str	r3, [r7, #68]	; 0x44
 8006472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <PCD_EP_ISR_Handler+0x2b6>
 800647e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006480:	3301      	adds	r3, #1
 8006482:	647b      	str	r3, [r7, #68]	; 0x44
 8006484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006486:	b29b      	uxth	r3, r3
 8006488:	029b      	lsls	r3, r3, #10
 800648a:	b29a      	uxth	r2, r3
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	b29b      	uxth	r3, r3
 8006498:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800649c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a0:	827b      	strh	r3, [r7, #18]
 80064a2:	8a7b      	ldrh	r3, [r7, #18]
 80064a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064a8:	827b      	strh	r3, [r7, #18]
 80064aa:	8a7b      	ldrh	r3, [r7, #18]
 80064ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064b0:	827b      	strh	r3, [r7, #18]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	8a7b      	ldrh	r3, [r7, #18]
 80064b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	8013      	strh	r3, [r2, #0]
 80064cc:	e22e      	b.n	800692c <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	461a      	mov	r2, r3
 80064d4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80064e2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f280 80f7 	bge.w	80066da <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	461a      	mov	r2, r3
 80064f2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006502:	4013      	ands	r3, r2
 8006504:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800651a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800651e:	b292      	uxth	r2, r2
 8006520:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006522:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	4413      	add	r3, r2
 8006536:	3304      	adds	r3, #4
 8006538:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800653a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800653c:	7b1b      	ldrb	r3, [r3, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d123      	bne.n	800658a <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800654a:	b29b      	uxth	r3, r3
 800654c:	461a      	mov	r2, r3
 800654e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	4413      	add	r3, r2
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	6812      	ldr	r2, [r2, #0]
 800655a:	4413      	add	r3, r2
 800655c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006566:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800656a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 808e 	beq.w	8006690 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6818      	ldr	r0, [r3, #0]
 8006578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800657a:	6959      	ldr	r1, [r3, #20]
 800657c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800657e:	88da      	ldrh	r2, [r3, #6]
 8006580:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006584:	f005 f9be 	bl	800b904 <USB_ReadPMA>
 8006588:	e082      	b.n	8006690 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800658a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800658c:	78db      	ldrb	r3, [r3, #3]
 800658e:	2b02      	cmp	r3, #2
 8006590:	d10a      	bne.n	80065a8 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006592:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006596:	461a      	mov	r2, r3
 8006598:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f9d4 	bl	8006948 <HAL_PCD_EP_DB_Receive>
 80065a0:	4603      	mov	r3, r0
 80065a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80065a6:	e073      	b.n	8006690 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	461a      	mov	r2, r3
 80065ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	461a      	mov	r2, r3
 80065cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	441a      	add	r2, r3
 80065d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80065d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
 80065f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	881b      	ldrh	r3, [r3, #0]
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d022      	beq.n	800664c <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800660e:	b29b      	uxth	r3, r3
 8006610:	461a      	mov	r2, r3
 8006612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	4413      	add	r3, r2
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	6812      	ldr	r2, [r2, #0]
 800661e:	4413      	add	r3, r2
 8006620:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800662a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800662e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006632:	2b00      	cmp	r3, #0
 8006634:	d02c      	beq.n	8006690 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6818      	ldr	r0, [r3, #0]
 800663a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800663c:	6959      	ldr	r1, [r3, #20]
 800663e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006640:	891a      	ldrh	r2, [r3, #8]
 8006642:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006646:	f005 f95d 	bl	800b904 <USB_ReadPMA>
 800664a:	e021      	b.n	8006690 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006654:	b29b      	uxth	r3, r3
 8006656:	461a      	mov	r2, r3
 8006658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	00db      	lsls	r3, r3, #3
 800665e:	4413      	add	r3, r2
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	6812      	ldr	r2, [r2, #0]
 8006664:	4413      	add	r3, r2
 8006666:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006670:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006674:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006678:	2b00      	cmp	r3, #0
 800667a:	d009      	beq.n	8006690 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6818      	ldr	r0, [r3, #0]
 8006680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006682:	6959      	ldr	r1, [r3, #20]
 8006684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006686:	895a      	ldrh	r2, [r3, #10]
 8006688:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800668c:	f005 f93a 	bl	800b904 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006692:	69da      	ldr	r2, [r3, #28]
 8006694:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006698:	441a      	add	r2, r3
 800669a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800669c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800669e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066a0:	695a      	ldr	r2, [r3, #20]
 80066a2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80066a6:	441a      	add	r2, r3
 80066a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066aa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80066ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d005      	beq.n	80066c0 <PCD_EP_ISR_Handler+0x4f2>
 80066b4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80066b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d206      	bcs.n	80066ce <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80066c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	4619      	mov	r1, r3
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f007 f81a 	bl	800d700 <HAL_PCD_DataOutStageCallback>
 80066cc:	e005      	b.n	80066da <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80066d4:	4618      	mov	r0, r3
 80066d6:	f003 fea6 	bl	800a426 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80066da:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80066de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 8122 	beq.w	800692c <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 80066e8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	4613      	mov	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	4413      	add	r3, r2
 80066fa:	3304      	adds	r3, #4
 80066fc:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	461a      	mov	r2, r3
 8006704:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	b29b      	uxth	r3, r3
 8006710:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006718:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	461a      	mov	r2, r3
 8006722:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	441a      	add	r2, r3
 800672a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800672e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006736:	b29b      	uxth	r3, r3
 8006738:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800673a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800673c:	78db      	ldrb	r3, [r3, #3]
 800673e:	2b01      	cmp	r3, #1
 8006740:	f040 80a2 	bne.w	8006888 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8006744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006746:	2200      	movs	r2, #0
 8006748:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800674a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674c:	7b1b      	ldrb	r3, [r3, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 8093 	beq.w	800687a <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006754:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675c:	2b00      	cmp	r3, #0
 800675e:	d046      	beq.n	80067ee <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006762:	785b      	ldrb	r3, [r3, #1]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d126      	bne.n	80067b6 <PCD_EP_ISR_Handler+0x5e8>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	627b      	str	r3, [r7, #36]	; 0x24
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006776:	b29b      	uxth	r3, r3
 8006778:	461a      	mov	r2, r3
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	4413      	add	r3, r2
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
 8006780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	00da      	lsls	r2, r3, #3
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	4413      	add	r3, r2
 800678a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800678e:	623b      	str	r3, [r7, #32]
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	b29b      	uxth	r3, r3
 8006796:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800679a:	b29a      	uxth	r2, r3
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	801a      	strh	r2, [r3, #0]
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	801a      	strh	r2, [r3, #0]
 80067b4:	e061      	b.n	800687a <PCD_EP_ISR_Handler+0x6ac>
 80067b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b8:	785b      	ldrb	r3, [r3, #1]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d15d      	bne.n	800687a <PCD_EP_ISR_Handler+0x6ac>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	461a      	mov	r2, r3
 80067d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d2:	4413      	add	r3, r2
 80067d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	00da      	lsls	r2, r3, #3
 80067dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067de:	4413      	add	r3, r2
 80067e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80067e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e8:	2200      	movs	r2, #0
 80067ea:	801a      	strh	r2, [r3, #0]
 80067ec:	e045      	b.n	800687a <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f6:	785b      	ldrb	r3, [r3, #1]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d126      	bne.n	800684a <PCD_EP_ISR_Handler+0x67c>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800680a:	b29b      	uxth	r3, r3
 800680c:	461a      	mov	r2, r3
 800680e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006810:	4413      	add	r3, r2
 8006812:	637b      	str	r3, [r7, #52]	; 0x34
 8006814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	00da      	lsls	r2, r3, #3
 800681a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681c:	4413      	add	r3, r2
 800681e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006822:	633b      	str	r3, [r7, #48]	; 0x30
 8006824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	b29b      	uxth	r3, r3
 800682a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800682e:	b29a      	uxth	r2, r3
 8006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006832:	801a      	strh	r2, [r3, #0]
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	b29b      	uxth	r3, r3
 800683a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800683e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006842:	b29a      	uxth	r2, r3
 8006844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006846:	801a      	strh	r2, [r3, #0]
 8006848:	e017      	b.n	800687a <PCD_EP_ISR_Handler+0x6ac>
 800684a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800684c:	785b      	ldrb	r3, [r3, #1]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d113      	bne.n	800687a <PCD_EP_ISR_Handler+0x6ac>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800685a:	b29b      	uxth	r3, r3
 800685c:	461a      	mov	r2, r3
 800685e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006860:	4413      	add	r3, r2
 8006862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	00da      	lsls	r2, r3, #3
 800686a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800686c:	4413      	add	r3, r2
 800686e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006872:	63bb      	str	r3, [r7, #56]	; 0x38
 8006874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006876:	2200      	movs	r2, #0
 8006878:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800687a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f006 ff58 	bl	800d736 <HAL_PCD_DataInStageCallback>
 8006886:	e051      	b.n	800692c <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006888:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800688c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006890:	2b00      	cmp	r3, #0
 8006892:	d144      	bne.n	800691e <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800689c:	b29b      	uxth	r3, r3
 800689e:	461a      	mov	r2, r3
 80068a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	00db      	lsls	r3, r3, #3
 80068a6:	4413      	add	r3, r2
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	6812      	ldr	r2, [r2, #0]
 80068ac:	4413      	add	r3, r2
 80068ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068b8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80068bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068be:	699a      	ldr	r2, [r3, #24]
 80068c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d907      	bls.n	80068d8 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 80068c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ca:	699a      	ldr	r2, [r3, #24]
 80068cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80068d0:	1ad2      	subs	r2, r2, r3
 80068d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d4:	619a      	str	r2, [r3, #24]
 80068d6:	e002      	b.n	80068de <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 80068d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068da:	2200      	movs	r2, #0
 80068dc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80068de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d106      	bne.n	80068f4 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80068e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f006 ff22 	bl	800d736 <HAL_PCD_DataInStageCallback>
 80068f2:	e01b      	b.n	800692c <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80068f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f6:	695a      	ldr	r2, [r3, #20]
 80068f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80068fc:	441a      	add	r2, r3
 80068fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006900:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006904:	69da      	ldr	r2, [r3, #28]
 8006906:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800690a:	441a      	add	r2, r3
 800690c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800690e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006916:	4618      	mov	r0, r3
 8006918:	f003 fd85 	bl	800a426 <USB_EPStartXfer>
 800691c:	e006      	b.n	800692c <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800691e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006922:	461a      	mov	r2, r3
 8006924:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f917 	bl	8006b5a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006934:	b29b      	uxth	r3, r3
 8006936:	b21b      	sxth	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	f6ff ac4d 	blt.w	80061d8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3758      	adds	r7, #88	; 0x58
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b088      	sub	sp, #32
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	4613      	mov	r3, r2
 8006954:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006956:	88fb      	ldrh	r3, [r7, #6]
 8006958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d07c      	beq.n	8006a5a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006968:	b29b      	uxth	r3, r3
 800696a:	461a      	mov	r2, r3
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	4413      	add	r3, r2
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	6812      	ldr	r2, [r2, #0]
 8006978:	4413      	add	r3, r2
 800697a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006984:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	699a      	ldr	r2, [r3, #24]
 800698a:	8b7b      	ldrh	r3, [r7, #26]
 800698c:	429a      	cmp	r2, r3
 800698e:	d306      	bcc.n	800699e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	699a      	ldr	r2, [r3, #24]
 8006994:	8b7b      	ldrh	r3, [r7, #26]
 8006996:	1ad2      	subs	r2, r2, r3
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	619a      	str	r2, [r3, #24]
 800699c:	e002      	b.n	80069a4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2200      	movs	r2, #0
 80069a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d123      	bne.n	80069f4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c6:	833b      	strh	r3, [r7, #24]
 80069c8:	8b3b      	ldrh	r3, [r7, #24]
 80069ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069ce:	833b      	strh	r3, [r7, #24]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	461a      	mov	r2, r3
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	441a      	add	r2, r3
 80069de:	8b3b      	ldrh	r3, [r7, #24]
 80069e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80069f4:	88fb      	ldrh	r3, [r7, #6]
 80069f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d01f      	beq.n	8006a3e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a18:	82fb      	strh	r3, [r7, #22]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	441a      	add	r2, r3
 8006a28:	8afb      	ldrh	r3, [r7, #22]
 8006a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006a3e:	8b7b      	ldrh	r3, [r7, #26]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 8085 	beq.w	8006b50 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	6959      	ldr	r1, [r3, #20]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	891a      	ldrh	r2, [r3, #8]
 8006a52:	8b7b      	ldrh	r3, [r7, #26]
 8006a54:	f004 ff56 	bl	800b904 <USB_ReadPMA>
 8006a58:	e07a      	b.n	8006b50 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	461a      	mov	r2, r3
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	4413      	add	r3, r2
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	6812      	ldr	r2, [r2, #0]
 8006a72:	4413      	add	r3, r2
 8006a74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a7e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	699a      	ldr	r2, [r3, #24]
 8006a84:	8b7b      	ldrh	r3, [r7, #26]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d306      	bcc.n	8006a98 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	699a      	ldr	r2, [r3, #24]
 8006a8e:	8b7b      	ldrh	r3, [r7, #26]
 8006a90:	1ad2      	subs	r2, r2, r3
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	619a      	str	r2, [r3, #24]
 8006a96:	e002      	b.n	8006a9e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d123      	bne.n	8006aee <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac0:	83fb      	strh	r3, [r7, #30]
 8006ac2:	8bfb      	ldrh	r3, [r7, #30]
 8006ac4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ac8:	83fb      	strh	r3, [r7, #30]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	441a      	add	r2, r3
 8006ad8:	8bfb      	ldrh	r3, [r7, #30]
 8006ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006aee:	88fb      	ldrh	r3, [r7, #6]
 8006af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d11f      	bne.n	8006b38 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b12:	83bb      	strh	r3, [r7, #28]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	441a      	add	r2, r3
 8006b22:	8bbb      	ldrh	r3, [r7, #28]
 8006b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006b38:	8b7b      	ldrh	r3, [r7, #26]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d008      	beq.n	8006b50 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6818      	ldr	r0, [r3, #0]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	6959      	ldr	r1, [r3, #20]
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	895a      	ldrh	r2, [r3, #10]
 8006b4a:	8b7b      	ldrh	r3, [r7, #26]
 8006b4c:	f004 feda 	bl	800b904 <USB_ReadPMA>
    }
  }

  return count;
 8006b50:	8b7b      	ldrh	r3, [r7, #26]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3720      	adds	r7, #32
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b0a2      	sub	sp, #136	; 0x88
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	4613      	mov	r3, r2
 8006b66:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006b68:	88fb      	ldrh	r3, [r7, #6]
 8006b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 81c5 	beq.w	8006efe <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	461a      	mov	r2, r3
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	4413      	add	r3, r2
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	6812      	ldr	r2, [r2, #0]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b92:	881b      	ldrh	r3, [r3, #0]
 8006b94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	699a      	ldr	r2, [r3, #24]
 8006ba0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d907      	bls.n	8006bb8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	699a      	ldr	r2, [r3, #24]
 8006bac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006bb0:	1ad2      	subs	r2, r2, r3
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	619a      	str	r2, [r3, #24]
 8006bb6:	e002      	b.n	8006bbe <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f040 80b9 	bne.w	8006d3a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	785b      	ldrb	r3, [r3, #1]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d126      	bne.n	8006c1e <HAL_PCD_EP_DB_Transmit+0xc4>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	461a      	mov	r2, r3
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	4413      	add	r3, r2
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	00da      	lsls	r2, r3, #3
 8006bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	801a      	strh	r2, [r3, #0]
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	801a      	strh	r2, [r3, #0]
 8006c1c:	e01a      	b.n	8006c54 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	785b      	ldrb	r3, [r3, #1]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d116      	bne.n	8006c54 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	461a      	mov	r2, r3
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	4413      	add	r3, r2
 8006c3c:	633b      	str	r3, [r7, #48]	; 0x30
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	00da      	lsls	r2, r3, #3
 8006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c46:	4413      	add	r3, r2
 8006c48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	2200      	movs	r2, #0
 8006c52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	623b      	str	r3, [r7, #32]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	785b      	ldrb	r3, [r3, #1]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d126      	bne.n	8006cb0 <HAL_PCD_EP_DB_Transmit+0x156>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	61bb      	str	r3, [r7, #24]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	461a      	mov	r2, r3
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	4413      	add	r3, r2
 8006c78:	61bb      	str	r3, [r7, #24]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	00da      	lsls	r2, r3, #3
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	4413      	add	r3, r2
 8006c84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c88:	617b      	str	r3, [r7, #20]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	801a      	strh	r2, [r3, #0]
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	881b      	ldrh	r3, [r3, #0]
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	801a      	strh	r2, [r3, #0]
 8006cae:	e017      	b.n	8006ce0 <HAL_PCD_EP_DB_Transmit+0x186>
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	785b      	ldrb	r3, [r3, #1]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d113      	bne.n	8006ce0 <HAL_PCD_EP_DB_Transmit+0x186>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	623b      	str	r3, [r7, #32]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	00da      	lsls	r2, r3, #3
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006cd8:	61fb      	str	r3, [r7, #28]
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f006 fd25 	bl	800d736 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006cec:	88fb      	ldrh	r3, [r7, #6]
 8006cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 82d2 	beq.w	800729c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d12:	827b      	strh	r3, [r7, #18]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	441a      	add	r2, r3
 8006d22:	8a7b      	ldrh	r3, [r7, #18]
 8006d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	8013      	strh	r3, [r2, #0]
 8006d38:	e2b0      	b.n	800729c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006d3a:	88fb      	ldrh	r3, [r7, #6]
 8006d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d021      	beq.n	8006d88 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	881b      	ldrh	r3, [r3, #0]
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	461a      	mov	r2, r3
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	441a      	add	r2, r3
 8006d70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	f040 8284 	bne.w	800729c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	695a      	ldr	r2, [r3, #20]
 8006d98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006d9c:	441a      	add	r2, r3
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	69da      	ldr	r2, [r3, #28]
 8006da6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006daa:	441a      	add	r2, r3
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	6a1a      	ldr	r2, [r3, #32]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d309      	bcc.n	8006dd0 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	6a1a      	ldr	r2, [r3, #32]
 8006dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc8:	1ad2      	subs	r2, r2, r3
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	621a      	str	r2, [r3, #32]
 8006dce:	e015      	b.n	8006dfc <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d107      	bne.n	8006de8 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8006dd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006ddc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006de6:	e009      	b.n	8006dfc <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	785b      	ldrb	r3, [r3, #1]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d155      	bne.n	8006eb0 <HAL_PCD_EP_DB_Transmit+0x356>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	461a      	mov	r2, r3
 8006e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e18:	4413      	add	r3, r2
 8006e1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	00da      	lsls	r2, r3, #3
 8006e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e24:	4413      	add	r3, r2
 8006e26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e2e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e30:	d916      	bls.n	8006e60 <HAL_PCD_EP_DB_Transmit+0x306>
 8006e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e34:	095b      	lsrs	r3, r3, #5
 8006e36:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e3a:	f003 031f 	and.w	r3, r3, #31
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d102      	bne.n	8006e48 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8006e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e44:	3b01      	subs	r3, #1
 8006e46:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	029b      	lsls	r3, r3, #10
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5c:	801a      	strh	r2, [r3, #0]
 8006e5e:	e043      	b.n	8006ee8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8006e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d112      	bne.n	8006e8c <HAL_PCD_EP_DB_Transmit+0x332>
 8006e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e74:	801a      	strh	r2, [r3, #0]
 8006e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e78:	881b      	ldrh	r3, [r3, #0]
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e88:	801a      	strh	r2, [r3, #0]
 8006e8a:	e02d      	b.n	8006ee8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8006e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e8e:	085b      	lsrs	r3, r3, #1
 8006e90:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <HAL_PCD_EP_DB_Transmit+0x348>
 8006e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	029b      	lsls	r3, r3, #10
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eac:	801a      	strh	r2, [r3, #0]
 8006eae:	e01b      	b.n	8006ee8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	785b      	ldrb	r3, [r3, #1]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d117      	bne.n	8006ee8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	643b      	str	r3, [r7, #64]	; 0x40
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	461a      	mov	r2, r3
 8006eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ecc:	4413      	add	r3, r2
 8006ece:	643b      	str	r3, [r7, #64]	; 0x40
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	00da      	lsls	r2, r3, #3
 8006ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed8:	4413      	add	r3, r2
 8006eda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6818      	ldr	r0, [r3, #0]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	6959      	ldr	r1, [r3, #20]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	891a      	ldrh	r2, [r3, #8]
 8006ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	f004 fcc2 	bl	800b880 <USB_WritePMA>
 8006efc:	e1ce      	b.n	800729c <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	461a      	mov	r2, r3
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	4413      	add	r3, r2
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	6812      	ldr	r2, [r2, #0]
 8006f16:	4413      	add	r3, r2
 8006f18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	699a      	ldr	r2, [r3, #24]
 8006f2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d307      	bcc.n	8006f42 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	699a      	ldr	r2, [r3, #24]
 8006f36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f3a:	1ad2      	subs	r2, r2, r3
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	619a      	str	r2, [r3, #24]
 8006f40:	e002      	b.n	8006f48 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2200      	movs	r2, #0
 8006f46:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f040 80c4 	bne.w	80070da <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	785b      	ldrb	r3, [r3, #1]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d126      	bne.n	8006fa8 <HAL_PCD_EP_DB_Transmit+0x44e>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f6e:	4413      	add	r3, r2
 8006f70:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	00da      	lsls	r2, r3, #3
 8006f78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f80:	667b      	str	r3, [r7, #100]	; 0x64
 8006f82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f90:	801a      	strh	r2, [r3, #0]
 8006f92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fa4:	801a      	strh	r2, [r3, #0]
 8006fa6:	e01a      	b.n	8006fde <HAL_PCD_EP_DB_Transmit+0x484>
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	785b      	ldrb	r3, [r3, #1]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d116      	bne.n	8006fde <HAL_PCD_EP_DB_Transmit+0x484>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	673b      	str	r3, [r7, #112]	; 0x70
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fc4:	4413      	add	r3, r2
 8006fc6:	673b      	str	r3, [r7, #112]	; 0x70
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	00da      	lsls	r2, r3, #3
 8006fce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fda:	2200      	movs	r2, #0
 8006fdc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	785b      	ldrb	r3, [r3, #1]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d12f      	bne.n	800704c <HAL_PCD_EP_DB_Transmit+0x4f2>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	461a      	mov	r2, r3
 8007000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007004:	4413      	add	r3, r2
 8007006:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	00da      	lsls	r2, r3, #3
 8007010:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007014:	4413      	add	r3, r2
 8007016:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800701a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800701e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	b29b      	uxth	r3, r3
 8007026:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800702a:	b29a      	uxth	r2, r3
 800702c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007030:	801a      	strh	r2, [r3, #0]
 8007032:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007036:	881b      	ldrh	r3, [r3, #0]
 8007038:	b29b      	uxth	r3, r3
 800703a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800703e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007042:	b29a      	uxth	r2, r3
 8007044:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007048:	801a      	strh	r2, [r3, #0]
 800704a:	e017      	b.n	800707c <HAL_PCD_EP_DB_Transmit+0x522>
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	785b      	ldrb	r3, [r3, #1]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d113      	bne.n	800707c <HAL_PCD_EP_DB_Transmit+0x522>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705c:	b29b      	uxth	r3, r3
 800705e:	461a      	mov	r2, r3
 8007060:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007062:	4413      	add	r3, r2
 8007064:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	00da      	lsls	r2, r3, #3
 800706c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800706e:	4413      	add	r3, r2
 8007070:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007074:	67bb      	str	r3, [r7, #120]	; 0x78
 8007076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007078:	2200      	movs	r2, #0
 800707a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	4619      	mov	r1, r3
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f006 fb57 	bl	800d736 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007088:	88fb      	ldrh	r3, [r7, #6]
 800708a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800708e:	2b00      	cmp	r3, #0
 8007090:	f040 8104 	bne.w	800729c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	461a      	mov	r2, r3
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	441a      	add	r2, r3
 80070c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80070c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	8013      	strh	r3, [r2, #0]
 80070d8:	e0e0      	b.n	800729c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80070da:	88fb      	ldrh	r3, [r7, #6]
 80070dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d121      	bne.n	8007128 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	461a      	mov	r2, r3
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	441a      	add	r2, r3
 8007110:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800711c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007124:	b29b      	uxth	r3, r3
 8007126:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800712e:	2b01      	cmp	r3, #1
 8007130:	f040 80b4 	bne.w	800729c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	695a      	ldr	r2, [r3, #20]
 8007138:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800713c:	441a      	add	r2, r3
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	69da      	ldr	r2, [r3, #28]
 8007146:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800714a:	441a      	add	r2, r3
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	6a1a      	ldr	r2, [r3, #32]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	429a      	cmp	r2, r3
 800715a:	d309      	bcc.n	8007170 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	6a1a      	ldr	r2, [r3, #32]
 8007166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007168:	1ad2      	subs	r2, r2, r3
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	621a      	str	r2, [r3, #32]
 800716e:	e015      	b.n	800719c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d107      	bne.n	8007188 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8007178:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800717c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007186:	e009      	b.n	800719c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2200      	movs	r2, #0
 8007192:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	663b      	str	r3, [r7, #96]	; 0x60
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	785b      	ldrb	r3, [r3, #1]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d155      	bne.n	8007256 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	461a      	mov	r2, r3
 80071bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071be:	4413      	add	r3, r2
 80071c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	00da      	lsls	r2, r3, #3
 80071c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071ca:	4413      	add	r3, r2
 80071cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071d0:	657b      	str	r3, [r7, #84]	; 0x54
 80071d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071d4:	2b3e      	cmp	r3, #62	; 0x3e
 80071d6:	d916      	bls.n	8007206 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80071d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	677b      	str	r3, [r7, #116]	; 0x74
 80071de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e0:	f003 031f 	and.w	r3, r3, #31
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d102      	bne.n	80071ee <HAL_PCD_EP_DB_Transmit+0x694>
 80071e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071ea:	3b01      	subs	r3, #1
 80071ec:	677b      	str	r3, [r7, #116]	; 0x74
 80071ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	029b      	lsls	r3, r3, #10
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071fe:	b29a      	uxth	r2, r3
 8007200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007202:	801a      	strh	r2, [r3, #0]
 8007204:	e040      	b.n	8007288 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007208:	2b00      	cmp	r3, #0
 800720a:	d112      	bne.n	8007232 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800720c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	b29b      	uxth	r3, r3
 8007212:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007216:	b29a      	uxth	r2, r3
 8007218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800721a:	801a      	strh	r2, [r3, #0]
 800721c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800721e:	881b      	ldrh	r3, [r3, #0]
 8007220:	b29b      	uxth	r3, r3
 8007222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800722a:	b29a      	uxth	r2, r3
 800722c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800722e:	801a      	strh	r2, [r3, #0]
 8007230:	e02a      	b.n	8007288 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007234:	085b      	lsrs	r3, r3, #1
 8007236:	677b      	str	r3, [r7, #116]	; 0x74
 8007238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	d002      	beq.n	8007248 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8007242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007244:	3301      	adds	r3, #1
 8007246:	677b      	str	r3, [r7, #116]	; 0x74
 8007248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800724a:	b29b      	uxth	r3, r3
 800724c:	029b      	lsls	r3, r3, #10
 800724e:	b29a      	uxth	r2, r3
 8007250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007252:	801a      	strh	r2, [r3, #0]
 8007254:	e018      	b.n	8007288 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	785b      	ldrb	r3, [r3, #1]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d114      	bne.n	8007288 <HAL_PCD_EP_DB_Transmit+0x72e>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007266:	b29b      	uxth	r3, r3
 8007268:	461a      	mov	r2, r3
 800726a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800726c:	4413      	add	r3, r2
 800726e:	663b      	str	r3, [r7, #96]	; 0x60
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	00da      	lsls	r2, r3, #3
 8007276:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007278:	4413      	add	r3, r2
 800727a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800727e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007282:	b29a      	uxth	r2, r3
 8007284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007286:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6818      	ldr	r0, [r3, #0]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	6959      	ldr	r1, [r3, #20]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	895a      	ldrh	r2, [r3, #10]
 8007294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007296:	b29b      	uxth	r3, r3
 8007298:	f004 faf2 	bl	800b880 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	461a      	mov	r2, r3
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072b6:	823b      	strh	r3, [r7, #16]
 80072b8:	8a3b      	ldrh	r3, [r7, #16]
 80072ba:	f083 0310 	eor.w	r3, r3, #16
 80072be:	823b      	strh	r3, [r7, #16]
 80072c0:	8a3b      	ldrh	r3, [r7, #16]
 80072c2:	f083 0320 	eor.w	r3, r3, #32
 80072c6:	823b      	strh	r3, [r7, #16]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	461a      	mov	r2, r3
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	441a      	add	r2, r3
 80072d6:	8a3b      	ldrh	r3, [r7, #16]
 80072d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3788      	adds	r7, #136	; 0x88
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b087      	sub	sp, #28
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	60f8      	str	r0, [r7, #12]
 80072fe:	607b      	str	r3, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	817b      	strh	r3, [r7, #10]
 8007304:	4613      	mov	r3, r2
 8007306:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007308:	897b      	ldrh	r3, [r7, #10]
 800730a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730e:	b29b      	uxth	r3, r3
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00c      	beq.n	800732e <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007314:	897b      	ldrh	r3, [r7, #10]
 8007316:	f003 0307 	and.w	r3, r3, #7
 800731a:	1c5a      	adds	r2, r3, #1
 800731c:	4613      	mov	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	4413      	add	r3, r2
 8007322:	00db      	lsls	r3, r3, #3
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4413      	add	r3, r2
 8007328:	3304      	adds	r3, #4
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	e00a      	b.n	8007344 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800732e:	897a      	ldrh	r2, [r7, #10]
 8007330:	4613      	mov	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	00db      	lsls	r3, r3, #3
 8007338:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	4413      	add	r3, r2
 8007340:	3304      	adds	r3, #4
 8007342:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007344:	893b      	ldrh	r3, [r7, #8]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d107      	bne.n	800735a <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2200      	movs	r2, #0
 800734e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	b29a      	uxth	r2, r3
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	80da      	strh	r2, [r3, #6]
 8007358:	e00b      	b.n	8007372 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2201      	movs	r2, #1
 800735e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	b29a      	uxth	r2, r3
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	0c1b      	lsrs	r3, r3, #16
 800736c:	b29a      	uxth	r2, r3
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	371c      	adds	r7, #28
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	f043 0301 	orr.w	r3, r3, #1
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	f043 0302 	orr.w	r3, r3, #2
 80073be:	b29a      	uxth	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80073d4:	b480      	push	{r7}
 80073d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80073d8:	4b04      	ldr	r3, [pc, #16]	; (80073ec <HAL_PWREx_GetVoltageRange+0x18>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	40007000 	.word	0x40007000

080073f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073fe:	d130      	bne.n	8007462 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007400:	4b23      	ldr	r3, [pc, #140]	; (8007490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800740c:	d038      	beq.n	8007480 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800740e:	4b20      	ldr	r3, [pc, #128]	; (8007490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007416:	4a1e      	ldr	r2, [pc, #120]	; (8007490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007418:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800741c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800741e:	4b1d      	ldr	r3, [pc, #116]	; (8007494 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2232      	movs	r2, #50	; 0x32
 8007424:	fb02 f303 	mul.w	r3, r2, r3
 8007428:	4a1b      	ldr	r2, [pc, #108]	; (8007498 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800742a:	fba2 2303 	umull	r2, r3, r2, r3
 800742e:	0c9b      	lsrs	r3, r3, #18
 8007430:	3301      	adds	r3, #1
 8007432:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007434:	e002      	b.n	800743c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3b01      	subs	r3, #1
 800743a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800743c:	4b14      	ldr	r3, [pc, #80]	; (8007490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007448:	d102      	bne.n	8007450 <HAL_PWREx_ControlVoltageScaling+0x60>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1f2      	bne.n	8007436 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007450:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800745c:	d110      	bne.n	8007480 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e00f      	b.n	8007482 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007462:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800746a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800746e:	d007      	beq.n	8007480 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007470:	4b07      	ldr	r3, [pc, #28]	; (8007490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007478:	4a05      	ldr	r2, [pc, #20]	; (8007490 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800747a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800747e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	40007000 	.word	0x40007000
 8007494:	20000000 	.word	0x20000000
 8007498:	431bde83 	.word	0x431bde83

0800749c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80074a0:	4b05      	ldr	r3, [pc, #20]	; (80074b8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	4a04      	ldr	r2, [pc, #16]	; (80074b8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80074a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80074aa:	6053      	str	r3, [r2, #4]
}
 80074ac:	bf00      	nop
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	40007000 	.word	0x40007000

080074bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b088      	sub	sp, #32
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e3fe      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074ce:	4ba1      	ldr	r3, [pc, #644]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f003 030c 	and.w	r3, r3, #12
 80074d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074d8:	4b9e      	ldr	r3, [pc, #632]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f003 0303 	and.w	r3, r3, #3
 80074e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0310 	and.w	r3, r3, #16
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 80e4 	beq.w	80076b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d007      	beq.n	8007506 <HAL_RCC_OscConfig+0x4a>
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	2b0c      	cmp	r3, #12
 80074fa:	f040 808b 	bne.w	8007614 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	2b01      	cmp	r3, #1
 8007502:	f040 8087 	bne.w	8007614 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007506:	4b93      	ldr	r3, [pc, #588]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0302 	and.w	r3, r3, #2
 800750e:	2b00      	cmp	r3, #0
 8007510:	d005      	beq.n	800751e <HAL_RCC_OscConfig+0x62>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e3d6      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a1a      	ldr	r2, [r3, #32]
 8007522:	4b8c      	ldr	r3, [pc, #560]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0308 	and.w	r3, r3, #8
 800752a:	2b00      	cmp	r3, #0
 800752c:	d004      	beq.n	8007538 <HAL_RCC_OscConfig+0x7c>
 800752e:	4b89      	ldr	r3, [pc, #548]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007536:	e005      	b.n	8007544 <HAL_RCC_OscConfig+0x88>
 8007538:	4b86      	ldr	r3, [pc, #536]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 800753a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800753e:	091b      	lsrs	r3, r3, #4
 8007540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007544:	4293      	cmp	r3, r2
 8007546:	d223      	bcs.n	8007590 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a1b      	ldr	r3, [r3, #32]
 800754c:	4618      	mov	r0, r3
 800754e:	f000 fd5f 	bl	8008010 <RCC_SetFlashLatencyFromMSIRange>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e3b7      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800755c:	4b7d      	ldr	r3, [pc, #500]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a7c      	ldr	r2, [pc, #496]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 8007562:	f043 0308 	orr.w	r3, r3, #8
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	4b7a      	ldr	r3, [pc, #488]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a1b      	ldr	r3, [r3, #32]
 8007574:	4977      	ldr	r1, [pc, #476]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 8007576:	4313      	orrs	r3, r2
 8007578:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800757a:	4b76      	ldr	r3, [pc, #472]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	69db      	ldr	r3, [r3, #28]
 8007586:	021b      	lsls	r3, r3, #8
 8007588:	4972      	ldr	r1, [pc, #456]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 800758a:	4313      	orrs	r3, r2
 800758c:	604b      	str	r3, [r1, #4]
 800758e:	e025      	b.n	80075dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007590:	4b70      	ldr	r3, [pc, #448]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a6f      	ldr	r2, [pc, #444]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 8007596:	f043 0308 	orr.w	r3, r3, #8
 800759a:	6013      	str	r3, [r2, #0]
 800759c:	4b6d      	ldr	r3, [pc, #436]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a1b      	ldr	r3, [r3, #32]
 80075a8:	496a      	ldr	r1, [pc, #424]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80075ae:	4b69      	ldr	r3, [pc, #420]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	021b      	lsls	r3, r3, #8
 80075bc:	4965      	ldr	r1, [pc, #404]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d109      	bne.n	80075dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a1b      	ldr	r3, [r3, #32]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f000 fd1f 	bl	8008010 <RCC_SetFlashLatencyFromMSIRange>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e377      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80075dc:	f000 fc80 	bl	8007ee0 <HAL_RCC_GetSysClockFreq>
 80075e0:	4602      	mov	r2, r0
 80075e2:	4b5c      	ldr	r3, [pc, #368]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	091b      	lsrs	r3, r3, #4
 80075e8:	f003 030f 	and.w	r3, r3, #15
 80075ec:	495a      	ldr	r1, [pc, #360]	; (8007758 <HAL_RCC_OscConfig+0x29c>)
 80075ee:	5ccb      	ldrb	r3, [r1, r3]
 80075f0:	f003 031f 	and.w	r3, r3, #31
 80075f4:	fa22 f303 	lsr.w	r3, r2, r3
 80075f8:	4a58      	ldr	r2, [pc, #352]	; (800775c <HAL_RCC_OscConfig+0x2a0>)
 80075fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80075fc:	4b58      	ldr	r3, [pc, #352]	; (8007760 <HAL_RCC_OscConfig+0x2a4>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4618      	mov	r0, r3
 8007602:	f7fc fbc3 	bl	8003d8c <HAL_InitTick>
 8007606:	4603      	mov	r3, r0
 8007608:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800760a:	7bfb      	ldrb	r3, [r7, #15]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d052      	beq.n	80076b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	e35b      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d032      	beq.n	8007682 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800761c:	4b4d      	ldr	r3, [pc, #308]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a4c      	ldr	r2, [pc, #304]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 8007622:	f043 0301 	orr.w	r3, r3, #1
 8007626:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007628:	f7fc fc00 	bl	8003e2c <HAL_GetTick>
 800762c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800762e:	e008      	b.n	8007642 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007630:	f7fc fbfc 	bl	8003e2c <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	2b02      	cmp	r3, #2
 800763c:	d901      	bls.n	8007642 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e344      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007642:	4b44      	ldr	r3, [pc, #272]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0302 	and.w	r3, r3, #2
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0f0      	beq.n	8007630 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800764e:	4b41      	ldr	r3, [pc, #260]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a40      	ldr	r2, [pc, #256]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 8007654:	f043 0308 	orr.w	r3, r3, #8
 8007658:	6013      	str	r3, [r2, #0]
 800765a:	4b3e      	ldr	r3, [pc, #248]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	493b      	ldr	r1, [pc, #236]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 8007668:	4313      	orrs	r3, r2
 800766a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800766c:	4b39      	ldr	r3, [pc, #228]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	69db      	ldr	r3, [r3, #28]
 8007678:	021b      	lsls	r3, r3, #8
 800767a:	4936      	ldr	r1, [pc, #216]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 800767c:	4313      	orrs	r3, r2
 800767e:	604b      	str	r3, [r1, #4]
 8007680:	e01a      	b.n	80076b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007682:	4b34      	ldr	r3, [pc, #208]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a33      	ldr	r2, [pc, #204]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 8007688:	f023 0301 	bic.w	r3, r3, #1
 800768c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800768e:	f7fc fbcd 	bl	8003e2c <HAL_GetTick>
 8007692:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007694:	e008      	b.n	80076a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007696:	f7fc fbc9 	bl	8003e2c <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d901      	bls.n	80076a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e311      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80076a8:	4b2a      	ldr	r3, [pc, #168]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0302 	and.w	r3, r3, #2
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1f0      	bne.n	8007696 <HAL_RCC_OscConfig+0x1da>
 80076b4:	e000      	b.n	80076b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80076b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d074      	beq.n	80077ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	2b08      	cmp	r3, #8
 80076c8:	d005      	beq.n	80076d6 <HAL_RCC_OscConfig+0x21a>
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	2b0c      	cmp	r3, #12
 80076ce:	d10e      	bne.n	80076ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d10b      	bne.n	80076ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076d6:	4b1f      	ldr	r3, [pc, #124]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d064      	beq.n	80077ac <HAL_RCC_OscConfig+0x2f0>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d160      	bne.n	80077ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e2ee      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076f6:	d106      	bne.n	8007706 <HAL_RCC_OscConfig+0x24a>
 80076f8:	4b16      	ldr	r3, [pc, #88]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a15      	ldr	r2, [pc, #84]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 80076fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007702:	6013      	str	r3, [r2, #0]
 8007704:	e01d      	b.n	8007742 <HAL_RCC_OscConfig+0x286>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800770e:	d10c      	bne.n	800772a <HAL_RCC_OscConfig+0x26e>
 8007710:	4b10      	ldr	r3, [pc, #64]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a0f      	ldr	r2, [pc, #60]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 8007716:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800771a:	6013      	str	r3, [r2, #0]
 800771c:	4b0d      	ldr	r3, [pc, #52]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a0c      	ldr	r2, [pc, #48]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 8007722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007726:	6013      	str	r3, [r2, #0]
 8007728:	e00b      	b.n	8007742 <HAL_RCC_OscConfig+0x286>
 800772a:	4b0a      	ldr	r3, [pc, #40]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a09      	ldr	r2, [pc, #36]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 8007730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007734:	6013      	str	r3, [r2, #0]
 8007736:	4b07      	ldr	r3, [pc, #28]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a06      	ldr	r2, [pc, #24]	; (8007754 <HAL_RCC_OscConfig+0x298>)
 800773c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007740:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d01c      	beq.n	8007784 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800774a:	f7fc fb6f 	bl	8003e2c <HAL_GetTick>
 800774e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007750:	e011      	b.n	8007776 <HAL_RCC_OscConfig+0x2ba>
 8007752:	bf00      	nop
 8007754:	40021000 	.word	0x40021000
 8007758:	0800de68 	.word	0x0800de68
 800775c:	20000000 	.word	0x20000000
 8007760:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007764:	f7fc fb62 	bl	8003e2c <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b64      	cmp	r3, #100	; 0x64
 8007770:	d901      	bls.n	8007776 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e2aa      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007776:	4baf      	ldr	r3, [pc, #700]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0f0      	beq.n	8007764 <HAL_RCC_OscConfig+0x2a8>
 8007782:	e014      	b.n	80077ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007784:	f7fc fb52 	bl	8003e2c <HAL_GetTick>
 8007788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800778a:	e008      	b.n	800779e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800778c:	f7fc fb4e 	bl	8003e2c <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2b64      	cmp	r3, #100	; 0x64
 8007798:	d901      	bls.n	800779e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e296      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800779e:	4ba5      	ldr	r3, [pc, #660]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1f0      	bne.n	800778c <HAL_RCC_OscConfig+0x2d0>
 80077aa:	e000      	b.n	80077ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d060      	beq.n	800787c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	2b04      	cmp	r3, #4
 80077be:	d005      	beq.n	80077cc <HAL_RCC_OscConfig+0x310>
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	2b0c      	cmp	r3, #12
 80077c4:	d119      	bne.n	80077fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d116      	bne.n	80077fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077cc:	4b99      	ldr	r3, [pc, #612]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d005      	beq.n	80077e4 <HAL_RCC_OscConfig+0x328>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e273      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077e4:	4b93      	ldr	r3, [pc, #588]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	061b      	lsls	r3, r3, #24
 80077f2:	4990      	ldr	r1, [pc, #576]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 80077f4:	4313      	orrs	r3, r2
 80077f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077f8:	e040      	b.n	800787c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d023      	beq.n	800784a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007802:	4b8c      	ldr	r3, [pc, #560]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a8b      	ldr	r2, [pc, #556]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 8007808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800780c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800780e:	f7fc fb0d 	bl	8003e2c <HAL_GetTick>
 8007812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007814:	e008      	b.n	8007828 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007816:	f7fc fb09 	bl	8003e2c <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	2b02      	cmp	r3, #2
 8007822:	d901      	bls.n	8007828 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e251      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007828:	4b82      	ldr	r3, [pc, #520]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007830:	2b00      	cmp	r3, #0
 8007832:	d0f0      	beq.n	8007816 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007834:	4b7f      	ldr	r3, [pc, #508]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	061b      	lsls	r3, r3, #24
 8007842:	497c      	ldr	r1, [pc, #496]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 8007844:	4313      	orrs	r3, r2
 8007846:	604b      	str	r3, [r1, #4]
 8007848:	e018      	b.n	800787c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800784a:	4b7a      	ldr	r3, [pc, #488]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a79      	ldr	r2, [pc, #484]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 8007850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007856:	f7fc fae9 	bl	8003e2c <HAL_GetTick>
 800785a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800785c:	e008      	b.n	8007870 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800785e:	f7fc fae5 	bl	8003e2c <HAL_GetTick>
 8007862:	4602      	mov	r2, r0
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	2b02      	cmp	r3, #2
 800786a:	d901      	bls.n	8007870 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e22d      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007870:	4b70      	ldr	r3, [pc, #448]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1f0      	bne.n	800785e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0308 	and.w	r3, r3, #8
 8007884:	2b00      	cmp	r3, #0
 8007886:	d03c      	beq.n	8007902 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d01c      	beq.n	80078ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007890:	4b68      	ldr	r3, [pc, #416]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 8007892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007896:	4a67      	ldr	r2, [pc, #412]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 8007898:	f043 0301 	orr.w	r3, r3, #1
 800789c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078a0:	f7fc fac4 	bl	8003e2c <HAL_GetTick>
 80078a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80078a6:	e008      	b.n	80078ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078a8:	f7fc fac0 	bl	8003e2c <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d901      	bls.n	80078ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e208      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80078ba:	4b5e      	ldr	r3, [pc, #376]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 80078bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078c0:	f003 0302 	and.w	r3, r3, #2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d0ef      	beq.n	80078a8 <HAL_RCC_OscConfig+0x3ec>
 80078c8:	e01b      	b.n	8007902 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078ca:	4b5a      	ldr	r3, [pc, #360]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 80078cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078d0:	4a58      	ldr	r2, [pc, #352]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 80078d2:	f023 0301 	bic.w	r3, r3, #1
 80078d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078da:	f7fc faa7 	bl	8003e2c <HAL_GetTick>
 80078de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80078e0:	e008      	b.n	80078f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078e2:	f7fc faa3 	bl	8003e2c <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d901      	bls.n	80078f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e1eb      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80078f4:	4b4f      	ldr	r3, [pc, #316]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 80078f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1ef      	bne.n	80078e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0304 	and.w	r3, r3, #4
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 80a6 	beq.w	8007a5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007910:	2300      	movs	r3, #0
 8007912:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007914:	4b47      	ldr	r3, [pc, #284]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 8007916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10d      	bne.n	800793c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007920:	4b44      	ldr	r3, [pc, #272]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 8007922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007924:	4a43      	ldr	r2, [pc, #268]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 8007926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800792a:	6593      	str	r3, [r2, #88]	; 0x58
 800792c:	4b41      	ldr	r3, [pc, #260]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 800792e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007934:	60bb      	str	r3, [r7, #8]
 8007936:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007938:	2301      	movs	r3, #1
 800793a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800793c:	4b3e      	ldr	r3, [pc, #248]	; (8007a38 <HAL_RCC_OscConfig+0x57c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007944:	2b00      	cmp	r3, #0
 8007946:	d118      	bne.n	800797a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007948:	4b3b      	ldr	r3, [pc, #236]	; (8007a38 <HAL_RCC_OscConfig+0x57c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a3a      	ldr	r2, [pc, #232]	; (8007a38 <HAL_RCC_OscConfig+0x57c>)
 800794e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007952:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007954:	f7fc fa6a 	bl	8003e2c <HAL_GetTick>
 8007958:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800795a:	e008      	b.n	800796e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800795c:	f7fc fa66 	bl	8003e2c <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	2b02      	cmp	r3, #2
 8007968:	d901      	bls.n	800796e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e1ae      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800796e:	4b32      	ldr	r3, [pc, #200]	; (8007a38 <HAL_RCC_OscConfig+0x57c>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007976:	2b00      	cmp	r3, #0
 8007978:	d0f0      	beq.n	800795c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d108      	bne.n	8007994 <HAL_RCC_OscConfig+0x4d8>
 8007982:	4b2c      	ldr	r3, [pc, #176]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 8007984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007988:	4a2a      	ldr	r2, [pc, #168]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 800798a:	f043 0301 	orr.w	r3, r3, #1
 800798e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007992:	e024      	b.n	80079de <HAL_RCC_OscConfig+0x522>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	2b05      	cmp	r3, #5
 800799a:	d110      	bne.n	80079be <HAL_RCC_OscConfig+0x502>
 800799c:	4b25      	ldr	r3, [pc, #148]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 800799e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a2:	4a24      	ldr	r2, [pc, #144]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 80079a4:	f043 0304 	orr.w	r3, r3, #4
 80079a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80079ac:	4b21      	ldr	r3, [pc, #132]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 80079ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b2:	4a20      	ldr	r2, [pc, #128]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 80079b4:	f043 0301 	orr.w	r3, r3, #1
 80079b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80079bc:	e00f      	b.n	80079de <HAL_RCC_OscConfig+0x522>
 80079be:	4b1d      	ldr	r3, [pc, #116]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 80079c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079c4:	4a1b      	ldr	r2, [pc, #108]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 80079c6:	f023 0301 	bic.w	r3, r3, #1
 80079ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80079ce:	4b19      	ldr	r3, [pc, #100]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 80079d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d4:	4a17      	ldr	r2, [pc, #92]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 80079d6:	f023 0304 	bic.w	r3, r3, #4
 80079da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d016      	beq.n	8007a14 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079e6:	f7fc fa21 	bl	8003e2c <HAL_GetTick>
 80079ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079ec:	e00a      	b.n	8007a04 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079ee:	f7fc fa1d 	bl	8003e2c <HAL_GetTick>
 80079f2:	4602      	mov	r2, r0
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d901      	bls.n	8007a04 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e163      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a04:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <HAL_RCC_OscConfig+0x578>)
 8007a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a0a:	f003 0302 	and.w	r3, r3, #2
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d0ed      	beq.n	80079ee <HAL_RCC_OscConfig+0x532>
 8007a12:	e01a      	b.n	8007a4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a14:	f7fc fa0a 	bl	8003e2c <HAL_GetTick>
 8007a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a1a:	e00f      	b.n	8007a3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a1c:	f7fc fa06 	bl	8003e2c <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d906      	bls.n	8007a3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e14c      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
 8007a32:	bf00      	nop
 8007a34:	40021000 	.word	0x40021000
 8007a38:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a3c:	4ba5      	ldr	r3, [pc, #660]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a42:	f003 0302 	and.w	r3, r3, #2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e8      	bne.n	8007a1c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a4a:	7ffb      	ldrb	r3, [r7, #31]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d105      	bne.n	8007a5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a50:	4ba0      	ldr	r3, [pc, #640]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a54:	4a9f      	ldr	r2, [pc, #636]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0320 	and.w	r3, r3, #32
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d03c      	beq.n	8007ae2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d01c      	beq.n	8007aaa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007a70:	4b98      	ldr	r3, [pc, #608]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a76:	4a97      	ldr	r2, [pc, #604]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007a78:	f043 0301 	orr.w	r3, r3, #1
 8007a7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a80:	f7fc f9d4 	bl	8003e2c <HAL_GetTick>
 8007a84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007a86:	e008      	b.n	8007a9a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a88:	f7fc f9d0 	bl	8003e2c <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d901      	bls.n	8007a9a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	e118      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007a9a:	4b8e      	ldr	r3, [pc, #568]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007a9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007aa0:	f003 0302 	and.w	r3, r3, #2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d0ef      	beq.n	8007a88 <HAL_RCC_OscConfig+0x5cc>
 8007aa8:	e01b      	b.n	8007ae2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007aaa:	4b8a      	ldr	r3, [pc, #552]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007aac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ab0:	4a88      	ldr	r2, [pc, #544]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007ab2:	f023 0301 	bic.w	r3, r3, #1
 8007ab6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aba:	f7fc f9b7 	bl	8003e2c <HAL_GetTick>
 8007abe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ac0:	e008      	b.n	8007ad4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ac2:	f7fc f9b3 	bl	8003e2c <HAL_GetTick>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d901      	bls.n	8007ad4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e0fb      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ad4:	4b7f      	ldr	r3, [pc, #508]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007ad6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ada:	f003 0302 	and.w	r3, r3, #2
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1ef      	bne.n	8007ac2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f000 80ef 	beq.w	8007cca <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	f040 80c5 	bne.w	8007c80 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007af6:	4b77      	ldr	r3, [pc, #476]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f003 0203 	and.w	r2, r3, #3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d12c      	bne.n	8007b64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b14:	3b01      	subs	r3, #1
 8007b16:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d123      	bne.n	8007b64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b26:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d11b      	bne.n	8007b64 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b36:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d113      	bne.n	8007b64 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b46:	085b      	lsrs	r3, r3, #1
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d109      	bne.n	8007b64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5a:	085b      	lsrs	r3, r3, #1
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d067      	beq.n	8007c34 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	2b0c      	cmp	r3, #12
 8007b68:	d062      	beq.n	8007c30 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007b6a:	4b5a      	ldr	r3, [pc, #360]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e0a8      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007b7a:	4b56      	ldr	r3, [pc, #344]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a55      	ldr	r2, [pc, #340]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007b80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b84:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007b86:	f7fc f951 	bl	8003e2c <HAL_GetTick>
 8007b8a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b8c:	e008      	b.n	8007ba0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b8e:	f7fc f94d 	bl	8003e2c <HAL_GetTick>
 8007b92:	4602      	mov	r2, r0
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d901      	bls.n	8007ba0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e095      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ba0:	4b4c      	ldr	r3, [pc, #304]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1f0      	bne.n	8007b8e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007bac:	4b49      	ldr	r3, [pc, #292]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007bae:	68da      	ldr	r2, [r3, #12]
 8007bb0:	4b49      	ldr	r3, [pc, #292]	; (8007cd8 <HAL_RCC_OscConfig+0x81c>)
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007bbc:	3a01      	subs	r2, #1
 8007bbe:	0112      	lsls	r2, r2, #4
 8007bc0:	4311      	orrs	r1, r2
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007bc6:	0212      	lsls	r2, r2, #8
 8007bc8:	4311      	orrs	r1, r2
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007bce:	0852      	lsrs	r2, r2, #1
 8007bd0:	3a01      	subs	r2, #1
 8007bd2:	0552      	lsls	r2, r2, #21
 8007bd4:	4311      	orrs	r1, r2
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007bda:	0852      	lsrs	r2, r2, #1
 8007bdc:	3a01      	subs	r2, #1
 8007bde:	0652      	lsls	r2, r2, #25
 8007be0:	4311      	orrs	r1, r2
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007be6:	06d2      	lsls	r2, r2, #27
 8007be8:	430a      	orrs	r2, r1
 8007bea:	493a      	ldr	r1, [pc, #232]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007bf0:	4b38      	ldr	r3, [pc, #224]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a37      	ldr	r2, [pc, #220]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bfa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007bfc:	4b35      	ldr	r3, [pc, #212]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	4a34      	ldr	r2, [pc, #208]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007c08:	f7fc f910 	bl	8003e2c <HAL_GetTick>
 8007c0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c0e:	e008      	b.n	8007c22 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c10:	f7fc f90c 	bl	8003e2c <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d901      	bls.n	8007c22 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e054      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c22:	4b2c      	ldr	r3, [pc, #176]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d0f0      	beq.n	8007c10 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007c2e:	e04c      	b.n	8007cca <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e04b      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c34:	4b27      	ldr	r3, [pc, #156]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d144      	bne.n	8007cca <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007c40:	4b24      	ldr	r3, [pc, #144]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a23      	ldr	r2, [pc, #140]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007c4c:	4b21      	ldr	r3, [pc, #132]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	4a20      	ldr	r2, [pc, #128]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007c58:	f7fc f8e8 	bl	8003e2c <HAL_GetTick>
 8007c5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c5e:	e008      	b.n	8007c72 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c60:	f7fc f8e4 	bl	8003e2c <HAL_GetTick>
 8007c64:	4602      	mov	r2, r0
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d901      	bls.n	8007c72 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e02c      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c72:	4b18      	ldr	r3, [pc, #96]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d0f0      	beq.n	8007c60 <HAL_RCC_OscConfig+0x7a4>
 8007c7e:	e024      	b.n	8007cca <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	2b0c      	cmp	r3, #12
 8007c84:	d01f      	beq.n	8007cc6 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c86:	4b13      	ldr	r3, [pc, #76]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a12      	ldr	r2, [pc, #72]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007c8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c92:	f7fc f8cb 	bl	8003e2c <HAL_GetTick>
 8007c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c98:	e008      	b.n	8007cac <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c9a:	f7fc f8c7 	bl	8003e2c <HAL_GetTick>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d901      	bls.n	8007cac <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e00f      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007cac:	4b09      	ldr	r3, [pc, #36]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1f0      	bne.n	8007c9a <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007cb8:	4b06      	ldr	r3, [pc, #24]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007cba:	68da      	ldr	r2, [r3, #12]
 8007cbc:	4905      	ldr	r1, [pc, #20]	; (8007cd4 <HAL_RCC_OscConfig+0x818>)
 8007cbe:	4b07      	ldr	r3, [pc, #28]	; (8007cdc <HAL_RCC_OscConfig+0x820>)
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	60cb      	str	r3, [r1, #12]
 8007cc4:	e001      	b.n	8007cca <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e000      	b.n	8007ccc <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3720      	adds	r7, #32
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	40021000 	.word	0x40021000
 8007cd8:	019d808c 	.word	0x019d808c
 8007cdc:	feeefffc 	.word	0xfeeefffc

08007ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e0e7      	b.n	8007ec4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cf4:	4b75      	ldr	r3, [pc, #468]	; (8007ecc <HAL_RCC_ClockConfig+0x1ec>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0307 	and.w	r3, r3, #7
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d910      	bls.n	8007d24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d02:	4b72      	ldr	r3, [pc, #456]	; (8007ecc <HAL_RCC_ClockConfig+0x1ec>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f023 0207 	bic.w	r2, r3, #7
 8007d0a:	4970      	ldr	r1, [pc, #448]	; (8007ecc <HAL_RCC_ClockConfig+0x1ec>)
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d12:	4b6e      	ldr	r3, [pc, #440]	; (8007ecc <HAL_RCC_ClockConfig+0x1ec>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0307 	and.w	r3, r3, #7
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d001      	beq.n	8007d24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e0cf      	b.n	8007ec4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d010      	beq.n	8007d52 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689a      	ldr	r2, [r3, #8]
 8007d34:	4b66      	ldr	r3, [pc, #408]	; (8007ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d908      	bls.n	8007d52 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d40:	4b63      	ldr	r3, [pc, #396]	; (8007ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	4960      	ldr	r1, [pc, #384]	; (8007ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d04c      	beq.n	8007df8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d107      	bne.n	8007d76 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d66:	4b5a      	ldr	r3, [pc, #360]	; (8007ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d121      	bne.n	8007db6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e0a6      	b.n	8007ec4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d107      	bne.n	8007d8e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d7e:	4b54      	ldr	r3, [pc, #336]	; (8007ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d115      	bne.n	8007db6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e09a      	b.n	8007ec4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d107      	bne.n	8007da6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007d96:	4b4e      	ldr	r3, [pc, #312]	; (8007ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d109      	bne.n	8007db6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e08e      	b.n	8007ec4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007da6:	4b4a      	ldr	r3, [pc, #296]	; (8007ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e086      	b.n	8007ec4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007db6:	4b46      	ldr	r3, [pc, #280]	; (8007ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f023 0203 	bic.w	r2, r3, #3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	4943      	ldr	r1, [pc, #268]	; (8007ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dc8:	f7fc f830 	bl	8003e2c <HAL_GetTick>
 8007dcc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dce:	e00a      	b.n	8007de6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dd0:	f7fc f82c 	bl	8003e2c <HAL_GetTick>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d901      	bls.n	8007de6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e06e      	b.n	8007ec4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007de6:	4b3a      	ldr	r3, [pc, #232]	; (8007ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f003 020c 	and.w	r2, r3, #12
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d1eb      	bne.n	8007dd0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0302 	and.w	r3, r3, #2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d010      	beq.n	8007e26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689a      	ldr	r2, [r3, #8]
 8007e08:	4b31      	ldr	r3, [pc, #196]	; (8007ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d208      	bcs.n	8007e26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e14:	4b2e      	ldr	r3, [pc, #184]	; (8007ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	492b      	ldr	r1, [pc, #172]	; (8007ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e26:	4b29      	ldr	r3, [pc, #164]	; (8007ecc <HAL_RCC_ClockConfig+0x1ec>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0307 	and.w	r3, r3, #7
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d210      	bcs.n	8007e56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e34:	4b25      	ldr	r3, [pc, #148]	; (8007ecc <HAL_RCC_ClockConfig+0x1ec>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f023 0207 	bic.w	r2, r3, #7
 8007e3c:	4923      	ldr	r1, [pc, #140]	; (8007ecc <HAL_RCC_ClockConfig+0x1ec>)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e44:	4b21      	ldr	r3, [pc, #132]	; (8007ecc <HAL_RCC_ClockConfig+0x1ec>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0307 	and.w	r3, r3, #7
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d001      	beq.n	8007e56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e036      	b.n	8007ec4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0304 	and.w	r3, r3, #4
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d008      	beq.n	8007e74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e62:	4b1b      	ldr	r3, [pc, #108]	; (8007ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	4918      	ldr	r1, [pc, #96]	; (8007ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0308 	and.w	r3, r3, #8
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d009      	beq.n	8007e94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e80:	4b13      	ldr	r3, [pc, #76]	; (8007ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	4910      	ldr	r1, [pc, #64]	; (8007ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007e94:	f000 f824 	bl	8007ee0 <HAL_RCC_GetSysClockFreq>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	4b0d      	ldr	r3, [pc, #52]	; (8007ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	091b      	lsrs	r3, r3, #4
 8007ea0:	f003 030f 	and.w	r3, r3, #15
 8007ea4:	490b      	ldr	r1, [pc, #44]	; (8007ed4 <HAL_RCC_ClockConfig+0x1f4>)
 8007ea6:	5ccb      	ldrb	r3, [r1, r3]
 8007ea8:	f003 031f 	and.w	r3, r3, #31
 8007eac:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb0:	4a09      	ldr	r2, [pc, #36]	; (8007ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8007eb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007eb4:	4b09      	ldr	r3, [pc, #36]	; (8007edc <HAL_RCC_ClockConfig+0x1fc>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fb ff67 	bl	8003d8c <HAL_InitTick>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	72fb      	strb	r3, [r7, #11]

  return status;
 8007ec2:	7afb      	ldrb	r3, [r7, #11]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	40022000 	.word	0x40022000
 8007ed0:	40021000 	.word	0x40021000
 8007ed4:	0800de68 	.word	0x0800de68
 8007ed8:	20000000 	.word	0x20000000
 8007edc:	20000004 	.word	0x20000004

08007ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b089      	sub	sp, #36	; 0x24
 8007ee4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	61fb      	str	r3, [r7, #28]
 8007eea:	2300      	movs	r3, #0
 8007eec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007eee:	4b3e      	ldr	r3, [pc, #248]	; (8007fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f003 030c 	and.w	r3, r3, #12
 8007ef6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ef8:	4b3b      	ldr	r3, [pc, #236]	; (8007fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	f003 0303 	and.w	r3, r3, #3
 8007f00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d005      	beq.n	8007f14 <HAL_RCC_GetSysClockFreq+0x34>
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	2b0c      	cmp	r3, #12
 8007f0c:	d121      	bne.n	8007f52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d11e      	bne.n	8007f52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007f14:	4b34      	ldr	r3, [pc, #208]	; (8007fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0308 	and.w	r3, r3, #8
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d107      	bne.n	8007f30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007f20:	4b31      	ldr	r3, [pc, #196]	; (8007fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f26:	0a1b      	lsrs	r3, r3, #8
 8007f28:	f003 030f 	and.w	r3, r3, #15
 8007f2c:	61fb      	str	r3, [r7, #28]
 8007f2e:	e005      	b.n	8007f3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007f30:	4b2d      	ldr	r3, [pc, #180]	; (8007fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	091b      	lsrs	r3, r3, #4
 8007f36:	f003 030f 	and.w	r3, r3, #15
 8007f3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007f3c:	4a2b      	ldr	r2, [pc, #172]	; (8007fec <HAL_RCC_GetSysClockFreq+0x10c>)
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10d      	bne.n	8007f68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007f50:	e00a      	b.n	8007f68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	2b04      	cmp	r3, #4
 8007f56:	d102      	bne.n	8007f5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007f58:	4b25      	ldr	r3, [pc, #148]	; (8007ff0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007f5a:	61bb      	str	r3, [r7, #24]
 8007f5c:	e004      	b.n	8007f68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2b08      	cmp	r3, #8
 8007f62:	d101      	bne.n	8007f68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007f64:	4b23      	ldr	r3, [pc, #140]	; (8007ff4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007f66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	2b0c      	cmp	r3, #12
 8007f6c:	d134      	bne.n	8007fd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f6e:	4b1e      	ldr	r3, [pc, #120]	; (8007fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	f003 0303 	and.w	r3, r3, #3
 8007f76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d003      	beq.n	8007f86 <HAL_RCC_GetSysClockFreq+0xa6>
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	2b03      	cmp	r3, #3
 8007f82:	d003      	beq.n	8007f8c <HAL_RCC_GetSysClockFreq+0xac>
 8007f84:	e005      	b.n	8007f92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007f86:	4b1a      	ldr	r3, [pc, #104]	; (8007ff0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007f88:	617b      	str	r3, [r7, #20]
      break;
 8007f8a:	e005      	b.n	8007f98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007f8c:	4b19      	ldr	r3, [pc, #100]	; (8007ff4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007f8e:	617b      	str	r3, [r7, #20]
      break;
 8007f90:	e002      	b.n	8007f98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	617b      	str	r3, [r7, #20]
      break;
 8007f96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f98:	4b13      	ldr	r3, [pc, #76]	; (8007fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	091b      	lsrs	r3, r3, #4
 8007f9e:	f003 0307 	and.w	r3, r3, #7
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007fa6:	4b10      	ldr	r3, [pc, #64]	; (8007fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	0a1b      	lsrs	r3, r3, #8
 8007fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	fb02 f203 	mul.w	r2, r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007fbe:	4b0a      	ldr	r3, [pc, #40]	; (8007fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	0e5b      	lsrs	r3, r3, #25
 8007fc4:	f003 0303 	and.w	r3, r3, #3
 8007fc8:	3301      	adds	r3, #1
 8007fca:	005b      	lsls	r3, r3, #1
 8007fcc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007fd8:	69bb      	ldr	r3, [r7, #24]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3724      	adds	r7, #36	; 0x24
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	40021000 	.word	0x40021000
 8007fec:	0800de78 	.word	0x0800de78
 8007ff0:	00f42400 	.word	0x00f42400
 8007ff4:	007a1200 	.word	0x007a1200

08007ff8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ffc:	4b03      	ldr	r3, [pc, #12]	; (800800c <HAL_RCC_GetHCLKFreq+0x14>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
}
 8008000:	4618      	mov	r0, r3
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	20000000 	.word	0x20000000

08008010 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008018:	2300      	movs	r3, #0
 800801a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800801c:	4b2a      	ldr	r3, [pc, #168]	; (80080c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800801e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d003      	beq.n	8008030 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008028:	f7ff f9d4 	bl	80073d4 <HAL_PWREx_GetVoltageRange>
 800802c:	6178      	str	r0, [r7, #20]
 800802e:	e014      	b.n	800805a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008030:	4b25      	ldr	r3, [pc, #148]	; (80080c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008034:	4a24      	ldr	r2, [pc, #144]	; (80080c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800803a:	6593      	str	r3, [r2, #88]	; 0x58
 800803c:	4b22      	ldr	r3, [pc, #136]	; (80080c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800803e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008044:	60fb      	str	r3, [r7, #12]
 8008046:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008048:	f7ff f9c4 	bl	80073d4 <HAL_PWREx_GetVoltageRange>
 800804c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800804e:	4b1e      	ldr	r3, [pc, #120]	; (80080c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008052:	4a1d      	ldr	r2, [pc, #116]	; (80080c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008058:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008060:	d10b      	bne.n	800807a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b80      	cmp	r3, #128	; 0x80
 8008066:	d919      	bls.n	800809c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2ba0      	cmp	r3, #160	; 0xa0
 800806c:	d902      	bls.n	8008074 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800806e:	2302      	movs	r3, #2
 8008070:	613b      	str	r3, [r7, #16]
 8008072:	e013      	b.n	800809c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008074:	2301      	movs	r3, #1
 8008076:	613b      	str	r3, [r7, #16]
 8008078:	e010      	b.n	800809c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b80      	cmp	r3, #128	; 0x80
 800807e:	d902      	bls.n	8008086 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008080:	2303      	movs	r3, #3
 8008082:	613b      	str	r3, [r7, #16]
 8008084:	e00a      	b.n	800809c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2b80      	cmp	r3, #128	; 0x80
 800808a:	d102      	bne.n	8008092 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800808c:	2302      	movs	r3, #2
 800808e:	613b      	str	r3, [r7, #16]
 8008090:	e004      	b.n	800809c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b70      	cmp	r3, #112	; 0x70
 8008096:	d101      	bne.n	800809c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008098:	2301      	movs	r3, #1
 800809a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800809c:	4b0b      	ldr	r3, [pc, #44]	; (80080cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f023 0207 	bic.w	r2, r3, #7
 80080a4:	4909      	ldr	r1, [pc, #36]	; (80080cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80080ac:	4b07      	ldr	r3, [pc, #28]	; (80080cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0307 	and.w	r3, r3, #7
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d001      	beq.n	80080be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e000      	b.n	80080c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3718      	adds	r7, #24
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	40021000 	.word	0x40021000
 80080cc:	40022000 	.word	0x40022000

080080d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80080d8:	2300      	movs	r3, #0
 80080da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80080dc:	2300      	movs	r3, #0
 80080de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d031      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80080f4:	d01a      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80080f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80080fa:	d814      	bhi.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d009      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008100:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008104:	d10f      	bne.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8008106:	4b5d      	ldr	r3, [pc, #372]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	4a5c      	ldr	r2, [pc, #368]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800810c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008110:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008112:	e00c      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	3304      	adds	r3, #4
 8008118:	2100      	movs	r1, #0
 800811a:	4618      	mov	r0, r3
 800811c:	f000 fa1e 	bl	800855c <RCCEx_PLLSAI1_Config>
 8008120:	4603      	mov	r3, r0
 8008122:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008124:	e003      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	74fb      	strb	r3, [r7, #19]
      break;
 800812a:	e000      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800812c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800812e:	7cfb      	ldrb	r3, [r7, #19]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10b      	bne.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008134:	4b51      	ldr	r3, [pc, #324]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800813a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008142:	494e      	ldr	r1, [pc, #312]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008144:	4313      	orrs	r3, r2
 8008146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800814a:	e001      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800814c:	7cfb      	ldrb	r3, [r7, #19]
 800814e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 809e 	beq.w	800829a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800815e:	2300      	movs	r3, #0
 8008160:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008162:	4b46      	ldr	r3, [pc, #280]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800816e:	2301      	movs	r3, #1
 8008170:	e000      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8008172:	2300      	movs	r3, #0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00d      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008178:	4b40      	ldr	r3, [pc, #256]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800817a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800817c:	4a3f      	ldr	r2, [pc, #252]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800817e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008182:	6593      	str	r3, [r2, #88]	; 0x58
 8008184:	4b3d      	ldr	r3, [pc, #244]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800818c:	60bb      	str	r3, [r7, #8]
 800818e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008190:	2301      	movs	r3, #1
 8008192:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008194:	4b3a      	ldr	r3, [pc, #232]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a39      	ldr	r2, [pc, #228]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800819a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800819e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081a0:	f7fb fe44 	bl	8003e2c <HAL_GetTick>
 80081a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80081a6:	e009      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081a8:	f7fb fe40 	bl	8003e2c <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d902      	bls.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	74fb      	strb	r3, [r7, #19]
        break;
 80081ba:	e005      	b.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80081bc:	4b30      	ldr	r3, [pc, #192]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d0ef      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80081c8:	7cfb      	ldrb	r3, [r7, #19]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d15a      	bne.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80081ce:	4b2b      	ldr	r3, [pc, #172]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d01e      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d019      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80081ea:	4b24      	ldr	r3, [pc, #144]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80081f6:	4b21      	ldr	r3, [pc, #132]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081fc:	4a1f      	ldr	r2, [pc, #124]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008202:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008206:	4b1d      	ldr	r3, [pc, #116]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800820c:	4a1b      	ldr	r2, [pc, #108]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800820e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008216:	4a19      	ldr	r2, [pc, #100]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	f003 0301 	and.w	r3, r3, #1
 8008224:	2b00      	cmp	r3, #0
 8008226:	d016      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008228:	f7fb fe00 	bl	8003e2c <HAL_GetTick>
 800822c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800822e:	e00b      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008230:	f7fb fdfc 	bl	8003e2c <HAL_GetTick>
 8008234:	4602      	mov	r2, r0
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	f241 3288 	movw	r2, #5000	; 0x1388
 800823e:	4293      	cmp	r3, r2
 8008240:	d902      	bls.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	74fb      	strb	r3, [r7, #19]
            break;
 8008246:	e006      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008248:	4b0c      	ldr	r3, [pc, #48]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800824a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0ec      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008256:	7cfb      	ldrb	r3, [r7, #19]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10b      	bne.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800825c:	4b07      	ldr	r3, [pc, #28]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800825e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008262:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800826a:	4904      	ldr	r1, [pc, #16]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800826c:	4313      	orrs	r3, r2
 800826e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008272:	e009      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008274:	7cfb      	ldrb	r3, [r7, #19]
 8008276:	74bb      	strb	r3, [r7, #18]
 8008278:	e006      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800827a:	bf00      	nop
 800827c:	40021000 	.word	0x40021000
 8008280:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008284:	7cfb      	ldrb	r3, [r7, #19]
 8008286:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008288:	7c7b      	ldrb	r3, [r7, #17]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d105      	bne.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800828e:	4bb2      	ldr	r3, [pc, #712]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008292:	4ab1      	ldr	r2, [pc, #708]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008298:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00a      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80082a6:	4bac      	ldr	r3, [pc, #688]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ac:	f023 0203 	bic.w	r2, r3, #3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a1b      	ldr	r3, [r3, #32]
 80082b4:	49a8      	ldr	r1, [pc, #672]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082b6:	4313      	orrs	r3, r2
 80082b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0302 	and.w	r3, r3, #2
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00a      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80082c8:	4ba3      	ldr	r3, [pc, #652]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ce:	f023 020c 	bic.w	r2, r3, #12
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d6:	49a0      	ldr	r1, [pc, #640]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082d8:	4313      	orrs	r3, r2
 80082da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0304 	and.w	r3, r3, #4
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00a      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80082ea:	4b9b      	ldr	r3, [pc, #620]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f8:	4997      	ldr	r1, [pc, #604]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0320 	and.w	r3, r3, #32
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00a      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800830c:	4b92      	ldr	r3, [pc, #584]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800830e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008312:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831a:	498f      	ldr	r1, [pc, #572]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800831c:	4313      	orrs	r3, r2
 800831e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00a      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800832e:	4b8a      	ldr	r3, [pc, #552]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008334:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833c:	4986      	ldr	r1, [pc, #536]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800833e:	4313      	orrs	r3, r2
 8008340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00a      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008350:	4b81      	ldr	r3, [pc, #516]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008356:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835e:	497e      	ldr	r1, [pc, #504]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008360:	4313      	orrs	r3, r2
 8008362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00a      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008372:	4b79      	ldr	r3, [pc, #484]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008378:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008380:	4975      	ldr	r1, [pc, #468]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008382:	4313      	orrs	r3, r2
 8008384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00a      	beq.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008394:	4b70      	ldr	r3, [pc, #448]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800839a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a2:	496d      	ldr	r1, [pc, #436]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083a4:	4313      	orrs	r3, r2
 80083a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00a      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80083b6:	4b68      	ldr	r3, [pc, #416]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c4:	4964      	ldr	r1, [pc, #400]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d028      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80083d8:	4b5f      	ldr	r3, [pc, #380]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083e6:	495c      	ldr	r1, [pc, #368]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083e8:	4313      	orrs	r3, r2
 80083ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083f6:	d106      	bne.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083f8:	4b57      	ldr	r3, [pc, #348]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	4a56      	ldr	r2, [pc, #344]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008402:	60d3      	str	r3, [r2, #12]
 8008404:	e011      	b.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800840a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800840e:	d10c      	bne.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	3304      	adds	r3, #4
 8008414:	2101      	movs	r1, #1
 8008416:	4618      	mov	r0, r3
 8008418:	f000 f8a0 	bl	800855c <RCCEx_PLLSAI1_Config>
 800841c:	4603      	mov	r3, r0
 800841e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008420:	7cfb      	ldrb	r3, [r7, #19]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8008426:	7cfb      	ldrb	r3, [r7, #19]
 8008428:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d028      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008436:	4b48      	ldr	r3, [pc, #288]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800843c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008444:	4944      	ldr	r1, [pc, #272]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008446:	4313      	orrs	r3, r2
 8008448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008454:	d106      	bne.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008456:	4b40      	ldr	r3, [pc, #256]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	4a3f      	ldr	r2, [pc, #252]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800845c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008460:	60d3      	str	r3, [r2, #12]
 8008462:	e011      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008468:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800846c:	d10c      	bne.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	3304      	adds	r3, #4
 8008472:	2101      	movs	r1, #1
 8008474:	4618      	mov	r0, r3
 8008476:	f000 f871 	bl	800855c <RCCEx_PLLSAI1_Config>
 800847a:	4603      	mov	r3, r0
 800847c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800847e:	7cfb      	ldrb	r3, [r7, #19]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8008484:	7cfb      	ldrb	r3, [r7, #19]
 8008486:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d028      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008494:	4b30      	ldr	r3, [pc, #192]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800849a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a2:	492d      	ldr	r1, [pc, #180]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084b2:	d106      	bne.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084b4:	4b28      	ldr	r3, [pc, #160]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	4a27      	ldr	r2, [pc, #156]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084be:	60d3      	str	r3, [r2, #12]
 80084c0:	e011      	b.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80084ca:	d10c      	bne.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3304      	adds	r3, #4
 80084d0:	2101      	movs	r1, #1
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 f842 	bl	800855c <RCCEx_PLLSAI1_Config>
 80084d8:	4603      	mov	r3, r0
 80084da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80084dc:	7cfb      	ldrb	r3, [r7, #19]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
      {
        /* set overall return value */
        status = ret;
 80084e2:	7cfb      	ldrb	r3, [r7, #19]
 80084e4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d01c      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80084f2:	4b19      	ldr	r3, [pc, #100]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008500:	4915      	ldr	r1, [pc, #84]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008502:	4313      	orrs	r3, r2
 8008504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800850c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008510:	d10c      	bne.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	3304      	adds	r3, #4
 8008516:	2102      	movs	r1, #2
 8008518:	4618      	mov	r0, r3
 800851a:	f000 f81f 	bl	800855c <RCCEx_PLLSAI1_Config>
 800851e:	4603      	mov	r3, r0
 8008520:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008522:	7cfb      	ldrb	r3, [r7, #19]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d001      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8008528:	7cfb      	ldrb	r3, [r7, #19]
 800852a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00a      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x47e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008538:	4b07      	ldr	r3, [pc, #28]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800853a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800853e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008546:	4904      	ldr	r1, [pc, #16]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008548:	4313      	orrs	r3, r2
 800854a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800854e:	7cbb      	ldrb	r3, [r7, #18]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3718      	adds	r7, #24
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	40021000 	.word	0x40021000

0800855c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008566:	2300      	movs	r3, #0
 8008568:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800856a:	4b74      	ldr	r3, [pc, #464]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	f003 0303 	and.w	r3, r3, #3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d018      	beq.n	80085a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008576:	4b71      	ldr	r3, [pc, #452]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	f003 0203 	and.w	r2, r3, #3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	429a      	cmp	r2, r3
 8008584:	d10d      	bne.n	80085a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
       ||
 800858a:	2b00      	cmp	r3, #0
 800858c:	d009      	beq.n	80085a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800858e:	4b6b      	ldr	r3, [pc, #428]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	091b      	lsrs	r3, r3, #4
 8008594:	f003 0307 	and.w	r3, r3, #7
 8008598:	1c5a      	adds	r2, r3, #1
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	685b      	ldr	r3, [r3, #4]
       ||
 800859e:	429a      	cmp	r2, r3
 80085a0:	d047      	beq.n	8008632 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	73fb      	strb	r3, [r7, #15]
 80085a6:	e044      	b.n	8008632 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b03      	cmp	r3, #3
 80085ae:	d018      	beq.n	80085e2 <RCCEx_PLLSAI1_Config+0x86>
 80085b0:	2b03      	cmp	r3, #3
 80085b2:	d825      	bhi.n	8008600 <RCCEx_PLLSAI1_Config+0xa4>
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d002      	beq.n	80085be <RCCEx_PLLSAI1_Config+0x62>
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d009      	beq.n	80085d0 <RCCEx_PLLSAI1_Config+0x74>
 80085bc:	e020      	b.n	8008600 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80085be:	4b5f      	ldr	r3, [pc, #380]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0302 	and.w	r3, r3, #2
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d11d      	bne.n	8008606 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085ce:	e01a      	b.n	8008606 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80085d0:	4b5a      	ldr	r3, [pc, #360]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d116      	bne.n	800860a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085e0:	e013      	b.n	800860a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80085e2:	4b56      	ldr	r3, [pc, #344]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10f      	bne.n	800860e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80085ee:	4b53      	ldr	r3, [pc, #332]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d109      	bne.n	800860e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80085fe:	e006      	b.n	800860e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	73fb      	strb	r3, [r7, #15]
      break;
 8008604:	e004      	b.n	8008610 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008606:	bf00      	nop
 8008608:	e002      	b.n	8008610 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800860a:	bf00      	nop
 800860c:	e000      	b.n	8008610 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800860e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008610:	7bfb      	ldrb	r3, [r7, #15]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d10d      	bne.n	8008632 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008616:	4b49      	ldr	r3, [pc, #292]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6819      	ldr	r1, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	3b01      	subs	r3, #1
 8008628:	011b      	lsls	r3, r3, #4
 800862a:	430b      	orrs	r3, r1
 800862c:	4943      	ldr	r1, [pc, #268]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 800862e:	4313      	orrs	r3, r2
 8008630:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d17c      	bne.n	8008732 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008638:	4b40      	ldr	r3, [pc, #256]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a3f      	ldr	r2, [pc, #252]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 800863e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008642:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008644:	f7fb fbf2 	bl	8003e2c <HAL_GetTick>
 8008648:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800864a:	e009      	b.n	8008660 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800864c:	f7fb fbee 	bl	8003e2c <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	2b02      	cmp	r3, #2
 8008658:	d902      	bls.n	8008660 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	73fb      	strb	r3, [r7, #15]
        break;
 800865e:	e005      	b.n	800866c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008660:	4b36      	ldr	r3, [pc, #216]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1ef      	bne.n	800864c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800866c:	7bfb      	ldrb	r3, [r7, #15]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d15f      	bne.n	8008732 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d110      	bne.n	800869a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008678:	4b30      	ldr	r3, [pc, #192]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008680:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	6892      	ldr	r2, [r2, #8]
 8008688:	0211      	lsls	r1, r2, #8
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	68d2      	ldr	r2, [r2, #12]
 800868e:	06d2      	lsls	r2, r2, #27
 8008690:	430a      	orrs	r2, r1
 8008692:	492a      	ldr	r1, [pc, #168]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008694:	4313      	orrs	r3, r2
 8008696:	610b      	str	r3, [r1, #16]
 8008698:	e027      	b.n	80086ea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d112      	bne.n	80086c6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80086a0:	4b26      	ldr	r3, [pc, #152]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80086a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	6892      	ldr	r2, [r2, #8]
 80086b0:	0211      	lsls	r1, r2, #8
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	6912      	ldr	r2, [r2, #16]
 80086b6:	0852      	lsrs	r2, r2, #1
 80086b8:	3a01      	subs	r2, #1
 80086ba:	0552      	lsls	r2, r2, #21
 80086bc:	430a      	orrs	r2, r1
 80086be:	491f      	ldr	r1, [pc, #124]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 80086c0:	4313      	orrs	r3, r2
 80086c2:	610b      	str	r3, [r1, #16]
 80086c4:	e011      	b.n	80086ea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80086c6:	4b1d      	ldr	r3, [pc, #116]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80086ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	6892      	ldr	r2, [r2, #8]
 80086d6:	0211      	lsls	r1, r2, #8
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	6952      	ldr	r2, [r2, #20]
 80086dc:	0852      	lsrs	r2, r2, #1
 80086de:	3a01      	subs	r2, #1
 80086e0:	0652      	lsls	r2, r2, #25
 80086e2:	430a      	orrs	r2, r1
 80086e4:	4915      	ldr	r1, [pc, #84]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80086ea:	4b14      	ldr	r3, [pc, #80]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a13      	ldr	r2, [pc, #76]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 80086f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80086f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086f6:	f7fb fb99 	bl	8003e2c <HAL_GetTick>
 80086fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80086fc:	e009      	b.n	8008712 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80086fe:	f7fb fb95 	bl	8003e2c <HAL_GetTick>
 8008702:	4602      	mov	r2, r0
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	2b02      	cmp	r3, #2
 800870a:	d902      	bls.n	8008712 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	73fb      	strb	r3, [r7, #15]
          break;
 8008710:	e005      	b.n	800871e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008712:	4b0a      	ldr	r3, [pc, #40]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d0ef      	beq.n	80086fe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800871e:	7bfb      	ldrb	r3, [r7, #15]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d106      	bne.n	8008732 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008724:	4b05      	ldr	r3, [pc, #20]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008726:	691a      	ldr	r2, [r3, #16]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	4903      	ldr	r1, [pc, #12]	; (800873c <RCCEx_PLLSAI1_Config+0x1e0>)
 800872e:	4313      	orrs	r3, r2
 8008730:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008732:	7bfb      	ldrb	r3, [r7, #15]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	40021000 	.word	0x40021000

08008740 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e095      	b.n	800887e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008756:	2b00      	cmp	r3, #0
 8008758:	d108      	bne.n	800876c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008762:	d009      	beq.n	8008778 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	61da      	str	r2, [r3, #28]
 800876a:	e005      	b.n	8008778 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	d106      	bne.n	8008798 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7fb f93c 	bl	8003a10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2202      	movs	r2, #2
 800879c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80087b8:	d902      	bls.n	80087c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80087ba:	2300      	movs	r3, #0
 80087bc:	60fb      	str	r3, [r7, #12]
 80087be:	e002      	b.n	80087c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80087c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80087ce:	d007      	beq.n	80087e0 <HAL_SPI_Init+0xa0>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80087d8:	d002      	beq.n	80087e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80087f0:	431a      	orrs	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	f003 0302 	and.w	r3, r3, #2
 80087fa:	431a      	orrs	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	695b      	ldr	r3, [r3, #20]
 8008800:	f003 0301 	and.w	r3, r3, #1
 8008804:	431a      	orrs	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800880e:	431a      	orrs	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	69db      	ldr	r3, [r3, #28]
 8008814:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008818:	431a      	orrs	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008822:	ea42 0103 	orr.w	r1, r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	430a      	orrs	r2, r1
 8008834:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	0c1b      	lsrs	r3, r3, #16
 800883c:	f003 0204 	and.w	r2, r3, #4
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008844:	f003 0310 	and.w	r3, r3, #16
 8008848:	431a      	orrs	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884e:	f003 0308 	and.w	r3, r3, #8
 8008852:	431a      	orrs	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800885c:	ea42 0103 	orr.w	r1, r2, r3
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	430a      	orrs	r2, r1
 800886c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b088      	sub	sp, #32
 800888a:	af00      	add	r7, sp, #0
 800888c:	60f8      	str	r0, [r7, #12]
 800888e:	60b9      	str	r1, [r7, #8]
 8008890:	603b      	str	r3, [r7, #0]
 8008892:	4613      	mov	r3, r2
 8008894:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d101      	bne.n	80088a8 <HAL_SPI_Transmit+0x22>
 80088a4:	2302      	movs	r3, #2
 80088a6:	e158      	b.n	8008b5a <HAL_SPI_Transmit+0x2d4>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088b0:	f7fb fabc 	bl	8003e2c <HAL_GetTick>
 80088b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80088b6:	88fb      	ldrh	r3, [r7, #6]
 80088b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d002      	beq.n	80088cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80088c6:	2302      	movs	r3, #2
 80088c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80088ca:	e13d      	b.n	8008b48 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d002      	beq.n	80088d8 <HAL_SPI_Transmit+0x52>
 80088d2:	88fb      	ldrh	r3, [r7, #6]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d102      	bne.n	80088de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80088dc:	e134      	b.n	8008b48 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2203      	movs	r2, #3
 80088e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	88fa      	ldrh	r2, [r7, #6]
 80088f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	88fa      	ldrh	r2, [r7, #6]
 80088fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008928:	d10f      	bne.n	800894a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008938:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008948:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008954:	2b40      	cmp	r3, #64	; 0x40
 8008956:	d007      	beq.n	8008968 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008966:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008970:	d94b      	bls.n	8008a0a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d002      	beq.n	8008980 <HAL_SPI_Transmit+0xfa>
 800897a:	8afb      	ldrh	r3, [r7, #22]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d13e      	bne.n	80089fe <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008984:	881a      	ldrh	r2, [r3, #0]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008990:	1c9a      	adds	r2, r3, #2
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800899a:	b29b      	uxth	r3, r3
 800899c:	3b01      	subs	r3, #1
 800899e:	b29a      	uxth	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80089a4:	e02b      	b.n	80089fe <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f003 0302 	and.w	r3, r3, #2
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d112      	bne.n	80089da <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b8:	881a      	ldrh	r2, [r3, #0]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c4:	1c9a      	adds	r2, r3, #2
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	3b01      	subs	r3, #1
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80089d8:	e011      	b.n	80089fe <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089da:	f7fb fa27 	bl	8003e2c <HAL_GetTick>
 80089de:	4602      	mov	r2, r0
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	683a      	ldr	r2, [r7, #0]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d803      	bhi.n	80089f2 <HAL_SPI_Transmit+0x16c>
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f0:	d102      	bne.n	80089f8 <HAL_SPI_Transmit+0x172>
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d102      	bne.n	80089fe <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80089fc:	e0a4      	b.n	8008b48 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1ce      	bne.n	80089a6 <HAL_SPI_Transmit+0x120>
 8008a08:	e07c      	b.n	8008b04 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d002      	beq.n	8008a18 <HAL_SPI_Transmit+0x192>
 8008a12:	8afb      	ldrh	r3, [r7, #22]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d170      	bne.n	8008afa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d912      	bls.n	8008a48 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a26:	881a      	ldrh	r2, [r3, #0]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a32:	1c9a      	adds	r2, r3, #2
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	3b02      	subs	r3, #2
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a46:	e058      	b.n	8008afa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	330c      	adds	r3, #12
 8008a52:	7812      	ldrb	r2, [r2, #0]
 8008a54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5a:	1c5a      	adds	r2, r3, #1
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	3b01      	subs	r3, #1
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008a6e:	e044      	b.n	8008afa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f003 0302 	and.w	r3, r3, #2
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d12b      	bne.n	8008ad6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d912      	bls.n	8008aae <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8c:	881a      	ldrh	r2, [r3, #0]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a98:	1c9a      	adds	r2, r3, #2
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	3b02      	subs	r3, #2
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008aac:	e025      	b.n	8008afa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	330c      	adds	r3, #12
 8008ab8:	7812      	ldrb	r2, [r2, #0]
 8008aba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac0:	1c5a      	adds	r2, r3, #1
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	3b01      	subs	r3, #1
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ad4:	e011      	b.n	8008afa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ad6:	f7fb f9a9 	bl	8003e2c <HAL_GetTick>
 8008ada:	4602      	mov	r2, r0
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d803      	bhi.n	8008aee <HAL_SPI_Transmit+0x268>
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aec:	d102      	bne.n	8008af4 <HAL_SPI_Transmit+0x26e>
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d102      	bne.n	8008afa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008af4:	2303      	movs	r3, #3
 8008af6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008af8:	e026      	b.n	8008b48 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1b5      	bne.n	8008a70 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b04:	69ba      	ldr	r2, [r7, #24]
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 fb5b 	bl	80091c4 <SPI_EndRxTxTransaction>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2220      	movs	r2, #32
 8008b18:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10a      	bne.n	8008b38 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b22:	2300      	movs	r3, #0
 8008b24:	613b      	str	r3, [r7, #16]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	613b      	str	r3, [r7, #16]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	613b      	str	r3, [r7, #16]
 8008b36:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d002      	beq.n	8008b46 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	77fb      	strb	r3, [r7, #31]
 8008b44:	e000      	b.n	8008b48 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008b46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008b58:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3720      	adds	r7, #32
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b08a      	sub	sp, #40	; 0x28
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	60f8      	str	r0, [r7, #12]
 8008b6a:	60b9      	str	r1, [r7, #8]
 8008b6c:	607a      	str	r2, [r7, #4]
 8008b6e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008b70:	2301      	movs	r3, #1
 8008b72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d101      	bne.n	8008b88 <HAL_SPI_TransmitReceive+0x26>
 8008b84:	2302      	movs	r3, #2
 8008b86:	e1fb      	b.n	8008f80 <HAL_SPI_TransmitReceive+0x41e>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b90:	f7fb f94c 	bl	8003e2c <HAL_GetTick>
 8008b94:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b9c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008ba4:	887b      	ldrh	r3, [r7, #2]
 8008ba6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008ba8:	887b      	ldrh	r3, [r7, #2]
 8008baa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008bac:	7efb      	ldrb	r3, [r7, #27]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d00e      	beq.n	8008bd0 <HAL_SPI_TransmitReceive+0x6e>
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bb8:	d106      	bne.n	8008bc8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d102      	bne.n	8008bc8 <HAL_SPI_TransmitReceive+0x66>
 8008bc2:	7efb      	ldrb	r3, [r7, #27]
 8008bc4:	2b04      	cmp	r3, #4
 8008bc6:	d003      	beq.n	8008bd0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008bc8:	2302      	movs	r3, #2
 8008bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008bce:	e1cd      	b.n	8008f6c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d005      	beq.n	8008be2 <HAL_SPI_TransmitReceive+0x80>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <HAL_SPI_TransmitReceive+0x80>
 8008bdc:	887b      	ldrh	r3, [r7, #2]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d103      	bne.n	8008bea <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008be8:	e1c0      	b.n	8008f6c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b04      	cmp	r3, #4
 8008bf4:	d003      	beq.n	8008bfe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2205      	movs	r2, #5
 8008bfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	887a      	ldrh	r2, [r7, #2]
 8008c0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	887a      	ldrh	r2, [r7, #2]
 8008c16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	887a      	ldrh	r2, [r7, #2]
 8008c24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	887a      	ldrh	r2, [r7, #2]
 8008c2a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c40:	d802      	bhi.n	8008c48 <HAL_SPI_TransmitReceive+0xe6>
 8008c42:	8a3b      	ldrh	r3, [r7, #16]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d908      	bls.n	8008c5a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685a      	ldr	r2, [r3, #4]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c56:	605a      	str	r2, [r3, #4]
 8008c58:	e007      	b.n	8008c6a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c68:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c74:	2b40      	cmp	r3, #64	; 0x40
 8008c76:	d007      	beq.n	8008c88 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c90:	d97c      	bls.n	8008d8c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d002      	beq.n	8008ca0 <HAL_SPI_TransmitReceive+0x13e>
 8008c9a:	8a7b      	ldrh	r3, [r7, #18]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d169      	bne.n	8008d74 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca4:	881a      	ldrh	r2, [r3, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb0:	1c9a      	adds	r2, r3, #2
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cc4:	e056      	b.n	8008d74 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	f003 0302 	and.w	r3, r3, #2
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d11b      	bne.n	8008d0c <HAL_SPI_TransmitReceive+0x1aa>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d016      	beq.n	8008d0c <HAL_SPI_TransmitReceive+0x1aa>
 8008cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d113      	bne.n	8008d0c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce8:	881a      	ldrh	r2, [r3, #0]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf4:	1c9a      	adds	r2, r3, #2
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	3b01      	subs	r3, #1
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	f003 0301 	and.w	r3, r3, #1
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d11c      	bne.n	8008d54 <HAL_SPI_TransmitReceive+0x1f2>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d016      	beq.n	8008d54 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68da      	ldr	r2, [r3, #12]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d30:	b292      	uxth	r2, r2
 8008d32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d38:	1c9a      	adds	r2, r3, #2
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	3b01      	subs	r3, #1
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d50:	2301      	movs	r3, #1
 8008d52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008d54:	f7fb f86a 	bl	8003e2c <HAL_GetTick>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d807      	bhi.n	8008d74 <HAL_SPI_TransmitReceive+0x212>
 8008d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6a:	d003      	beq.n	8008d74 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008d72:	e0fb      	b.n	8008f6c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1a3      	bne.n	8008cc6 <HAL_SPI_TransmitReceive+0x164>
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d19d      	bne.n	8008cc6 <HAL_SPI_TransmitReceive+0x164>
 8008d8a:	e0df      	b.n	8008f4c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d003      	beq.n	8008d9c <HAL_SPI_TransmitReceive+0x23a>
 8008d94:	8a7b      	ldrh	r3, [r7, #18]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	f040 80cb 	bne.w	8008f32 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d912      	bls.n	8008dcc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008daa:	881a      	ldrh	r2, [r3, #0]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db6:	1c9a      	adds	r2, r3, #2
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	3b02      	subs	r3, #2
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008dca:	e0b2      	b.n	8008f32 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	330c      	adds	r3, #12
 8008dd6:	7812      	ldrb	r2, [r2, #0]
 8008dd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dde:	1c5a      	adds	r2, r3, #1
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	3b01      	subs	r3, #1
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008df2:	e09e      	b.n	8008f32 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	f003 0302 	and.w	r3, r3, #2
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d134      	bne.n	8008e6c <HAL_SPI_TransmitReceive+0x30a>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d02f      	beq.n	8008e6c <HAL_SPI_TransmitReceive+0x30a>
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d12c      	bne.n	8008e6c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d912      	bls.n	8008e42 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e20:	881a      	ldrh	r2, [r3, #0]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2c:	1c9a      	adds	r2, r3, #2
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	3b02      	subs	r3, #2
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e40:	e012      	b.n	8008e68 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	330c      	adds	r3, #12
 8008e4c:	7812      	ldrb	r2, [r2, #0]
 8008e4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e54:	1c5a      	adds	r2, r3, #1
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	3b01      	subs	r3, #1
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d148      	bne.n	8008f0c <HAL_SPI_TransmitReceive+0x3aa>
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d042      	beq.n	8008f0c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d923      	bls.n	8008eda <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68da      	ldr	r2, [r3, #12]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9c:	b292      	uxth	r2, r2
 8008e9e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea4:	1c9a      	adds	r2, r3, #2
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	3b02      	subs	r3, #2
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d81f      	bhi.n	8008f08 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	685a      	ldr	r2, [r3, #4]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ed6:	605a      	str	r2, [r3, #4]
 8008ed8:	e016      	b.n	8008f08 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f103 020c 	add.w	r2, r3, #12
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee6:	7812      	ldrb	r2, [r2, #0]
 8008ee8:	b2d2      	uxtb	r2, r2
 8008eea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	3b01      	subs	r3, #1
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008f0c:	f7fa ff8e 	bl	8003e2c <HAL_GetTick>
 8008f10:	4602      	mov	r2, r0
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d803      	bhi.n	8008f24 <HAL_SPI_TransmitReceive+0x3c2>
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f22:	d102      	bne.n	8008f2a <HAL_SPI_TransmitReceive+0x3c8>
 8008f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d103      	bne.n	8008f32 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008f30:	e01c      	b.n	8008f6c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f47f af5b 	bne.w	8008df4 <HAL_SPI_TransmitReceive+0x292>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f47f af54 	bne.w	8008df4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f4c:	69fa      	ldr	r2, [r7, #28]
 8008f4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f000 f937 	bl	80091c4 <SPI_EndRxTxTransaction>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d006      	beq.n	8008f6a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2220      	movs	r2, #32
 8008f66:	661a      	str	r2, [r3, #96]	; 0x60
 8008f68:	e000      	b.n	8008f6c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008f6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008f7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3728      	adds	r7, #40	; 0x28
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b088      	sub	sp, #32
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	603b      	str	r3, [r7, #0]
 8008f94:	4613      	mov	r3, r2
 8008f96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008f98:	f7fa ff48 	bl	8003e2c <HAL_GetTick>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa0:	1a9b      	subs	r3, r3, r2
 8008fa2:	683a      	ldr	r2, [r7, #0]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008fa8:	f7fa ff40 	bl	8003e2c <HAL_GetTick>
 8008fac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008fae:	4b39      	ldr	r3, [pc, #228]	; (8009094 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	015b      	lsls	r3, r3, #5
 8008fb4:	0d1b      	lsrs	r3, r3, #20
 8008fb6:	69fa      	ldr	r2, [r7, #28]
 8008fb8:	fb02 f303 	mul.w	r3, r2, r3
 8008fbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008fbe:	e054      	b.n	800906a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc6:	d050      	beq.n	800906a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008fc8:	f7fa ff30 	bl	8003e2c <HAL_GetTick>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	69fa      	ldr	r2, [r7, #28]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d902      	bls.n	8008fde <SPI_WaitFlagStateUntilTimeout+0x56>
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d13d      	bne.n	800905a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008fec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ff6:	d111      	bne.n	800901c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009000:	d004      	beq.n	800900c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800900a:	d107      	bne.n	800901c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800901a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009024:	d10f      	bne.n	8009046 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009034:	601a      	str	r2, [r3, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009044:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2201      	movs	r2, #1
 800904a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009056:	2303      	movs	r3, #3
 8009058:	e017      	b.n	800908a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d101      	bne.n	8009064 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009060:	2300      	movs	r3, #0
 8009062:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	3b01      	subs	r3, #1
 8009068:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	689a      	ldr	r2, [r3, #8]
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	4013      	ands	r3, r2
 8009074:	68ba      	ldr	r2, [r7, #8]
 8009076:	429a      	cmp	r2, r3
 8009078:	bf0c      	ite	eq
 800907a:	2301      	moveq	r3, #1
 800907c:	2300      	movne	r3, #0
 800907e:	b2db      	uxtb	r3, r3
 8009080:	461a      	mov	r2, r3
 8009082:	79fb      	ldrb	r3, [r7, #7]
 8009084:	429a      	cmp	r2, r3
 8009086:	d19b      	bne.n	8008fc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3720      	adds	r7, #32
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	20000000 	.word	0x20000000

08009098 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b08a      	sub	sp, #40	; 0x28
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
 80090a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80090a6:	2300      	movs	r3, #0
 80090a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80090aa:	f7fa febf 	bl	8003e2c <HAL_GetTick>
 80090ae:	4602      	mov	r2, r0
 80090b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b2:	1a9b      	subs	r3, r3, r2
 80090b4:	683a      	ldr	r2, [r7, #0]
 80090b6:	4413      	add	r3, r2
 80090b8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80090ba:	f7fa feb7 	bl	8003e2c <HAL_GetTick>
 80090be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	330c      	adds	r3, #12
 80090c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80090c8:	4b3d      	ldr	r3, [pc, #244]	; (80091c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	4613      	mov	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	4413      	add	r3, r2
 80090d2:	00da      	lsls	r2, r3, #3
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	0d1b      	lsrs	r3, r3, #20
 80090d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090da:	fb02 f303 	mul.w	r3, r2, r3
 80090de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80090e0:	e060      	b.n	80091a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80090e8:	d107      	bne.n	80090fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d104      	bne.n	80090fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80090f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009100:	d050      	beq.n	80091a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009102:	f7fa fe93 	bl	8003e2c <HAL_GetTick>
 8009106:	4602      	mov	r2, r0
 8009108:	6a3b      	ldr	r3, [r7, #32]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800910e:	429a      	cmp	r2, r3
 8009110:	d902      	bls.n	8009118 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009114:	2b00      	cmp	r3, #0
 8009116:	d13d      	bne.n	8009194 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009126:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009130:	d111      	bne.n	8009156 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800913a:	d004      	beq.n	8009146 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009144:	d107      	bne.n	8009156 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009154:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800915e:	d10f      	bne.n	8009180 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800916e:	601a      	str	r2, [r3, #0]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800917e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e010      	b.n	80091b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d101      	bne.n	800919e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800919a:	2300      	movs	r3, #0
 800919c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	3b01      	subs	r3, #1
 80091a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	689a      	ldr	r2, [r3, #8]
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	4013      	ands	r3, r2
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d196      	bne.n	80090e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3728      	adds	r7, #40	; 0x28
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	20000000 	.word	0x20000000

080091c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af02      	add	r7, sp, #8
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	9300      	str	r3, [sp, #0]
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f7ff ff5b 	bl	8009098 <SPI_WaitFifoStateUntilTimeout>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d007      	beq.n	80091f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091ec:	f043 0220 	orr.w	r2, r3, #32
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e027      	b.n	8009248 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	2200      	movs	r2, #0
 8009200:	2180      	movs	r1, #128	; 0x80
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f7ff fec0 	bl	8008f88 <SPI_WaitFlagStateUntilTimeout>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d007      	beq.n	800921e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009212:	f043 0220 	orr.w	r2, r3, #32
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e014      	b.n	8009248 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	2200      	movs	r2, #0
 8009226:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f7ff ff34 	bl	8009098 <SPI_WaitFifoStateUntilTimeout>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d007      	beq.n	8009246 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800923a:	f043 0220 	orr.w	r2, r3, #32
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e000      	b.n	8009248 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d101      	bne.n	8009262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e049      	b.n	80092f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d106      	bne.n	800927c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f7fa fd0c 	bl	8003c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2202      	movs	r2, #2
 8009280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	3304      	adds	r3, #4
 800928c:	4619      	mov	r1, r3
 800928e:	4610      	mov	r0, r2
 8009290:	f000 f9c8 	bl	8009624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
	...

08009300 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800930e:	b2db      	uxtb	r3, r3
 8009310:	2b01      	cmp	r3, #1
 8009312:	d001      	beq.n	8009318 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e03b      	b.n	8009390 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2202      	movs	r2, #2
 800931c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68da      	ldr	r2, [r3, #12]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f042 0201 	orr.w	r2, r2, #1
 800932e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a19      	ldr	r2, [pc, #100]	; (800939c <HAL_TIM_Base_Start_IT+0x9c>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d009      	beq.n	800934e <HAL_TIM_Base_Start_IT+0x4e>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009342:	d004      	beq.n	800934e <HAL_TIM_Base_Start_IT+0x4e>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a15      	ldr	r2, [pc, #84]	; (80093a0 <HAL_TIM_Base_Start_IT+0xa0>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d115      	bne.n	800937a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	689a      	ldr	r2, [r3, #8]
 8009354:	4b13      	ldr	r3, [pc, #76]	; (80093a4 <HAL_TIM_Base_Start_IT+0xa4>)
 8009356:	4013      	ands	r3, r2
 8009358:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2b06      	cmp	r3, #6
 800935e:	d015      	beq.n	800938c <HAL_TIM_Base_Start_IT+0x8c>
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009366:	d011      	beq.n	800938c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f042 0201 	orr.w	r2, r2, #1
 8009376:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009378:	e008      	b.n	800938c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f042 0201 	orr.w	r2, r2, #1
 8009388:	601a      	str	r2, [r3, #0]
 800938a:	e000      	b.n	800938e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800938c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3714      	adds	r7, #20
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr
 800939c:	40012c00 	.word	0x40012c00
 80093a0:	40014000 	.word	0x40014000
 80093a4:	00010007 	.word	0x00010007

080093a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	f003 0302 	and.w	r3, r3, #2
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d122      	bne.n	8009404 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	f003 0302 	and.w	r3, r3, #2
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	d11b      	bne.n	8009404 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f06f 0202 	mvn.w	r2, #2
 80093d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2201      	movs	r2, #1
 80093da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	f003 0303 	and.w	r3, r3, #3
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d003      	beq.n	80093f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f905 	bl	80095fa <HAL_TIM_IC_CaptureCallback>
 80093f0:	e005      	b.n	80093fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f8f7 	bl	80095e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f7fa fa8d 	bl	8003918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	f003 0304 	and.w	r3, r3, #4
 800940e:	2b04      	cmp	r3, #4
 8009410:	d122      	bne.n	8009458 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	f003 0304 	and.w	r3, r3, #4
 800941c:	2b04      	cmp	r3, #4
 800941e:	d11b      	bne.n	8009458 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f06f 0204 	mvn.w	r2, #4
 8009428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2202      	movs	r2, #2
 800942e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	699b      	ldr	r3, [r3, #24]
 8009436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800943a:	2b00      	cmp	r3, #0
 800943c:	d003      	beq.n	8009446 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f8db 	bl	80095fa <HAL_TIM_IC_CaptureCallback>
 8009444:	e005      	b.n	8009452 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f8cd 	bl	80095e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f7fa fa63 	bl	8003918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	f003 0308 	and.w	r3, r3, #8
 8009462:	2b08      	cmp	r3, #8
 8009464:	d122      	bne.n	80094ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	f003 0308 	and.w	r3, r3, #8
 8009470:	2b08      	cmp	r3, #8
 8009472:	d11b      	bne.n	80094ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f06f 0208 	mvn.w	r2, #8
 800947c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2204      	movs	r2, #4
 8009482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	69db      	ldr	r3, [r3, #28]
 800948a:	f003 0303 	and.w	r3, r3, #3
 800948e:	2b00      	cmp	r3, #0
 8009490:	d003      	beq.n	800949a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f8b1 	bl	80095fa <HAL_TIM_IC_CaptureCallback>
 8009498:	e005      	b.n	80094a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f8a3 	bl	80095e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7fa fa39 	bl	8003918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	f003 0310 	and.w	r3, r3, #16
 80094b6:	2b10      	cmp	r3, #16
 80094b8:	d122      	bne.n	8009500 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	f003 0310 	and.w	r3, r3, #16
 80094c4:	2b10      	cmp	r3, #16
 80094c6:	d11b      	bne.n	8009500 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f06f 0210 	mvn.w	r2, #16
 80094d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2208      	movs	r2, #8
 80094d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	69db      	ldr	r3, [r3, #28]
 80094de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d003      	beq.n	80094ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f887 	bl	80095fa <HAL_TIM_IC_CaptureCallback>
 80094ec:	e005      	b.n	80094fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f879 	bl	80095e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7fa fa0f 	bl	8003918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	2b01      	cmp	r3, #1
 800950c:	d10e      	bne.n	800952c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	f003 0301 	and.w	r3, r3, #1
 8009518:	2b01      	cmp	r3, #1
 800951a:	d107      	bne.n	800952c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f06f 0201 	mvn.w	r2, #1
 8009524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f7fa f9e2 	bl	80038f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009536:	2b80      	cmp	r3, #128	; 0x80
 8009538:	d10e      	bne.n	8009558 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009544:	2b80      	cmp	r3, #128	; 0x80
 8009546:	d107      	bne.n	8009558 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f93a 	bl	80097cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009566:	d10e      	bne.n	8009586 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009572:	2b80      	cmp	r3, #128	; 0x80
 8009574:	d107      	bne.n	8009586 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800957e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f92d 	bl	80097e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009590:	2b40      	cmp	r3, #64	; 0x40
 8009592:	d10e      	bne.n	80095b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800959e:	2b40      	cmp	r3, #64	; 0x40
 80095a0:	d107      	bne.n	80095b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 f82e 	bl	800960e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	f003 0320 	and.w	r3, r3, #32
 80095bc:	2b20      	cmp	r3, #32
 80095be:	d10e      	bne.n	80095de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	f003 0320 	and.w	r3, r3, #32
 80095ca:	2b20      	cmp	r3, #32
 80095cc:	d107      	bne.n	80095de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f06f 0220 	mvn.w	r2, #32
 80095d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f8ed 	bl	80097b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095de:	bf00      	nop
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b083      	sub	sp, #12
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095ee:	bf00      	nop
 80095f0:	370c      	adds	r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80095fa:	b480      	push	{r7}
 80095fc:	b083      	sub	sp, #12
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009602:	bf00      	nop
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800960e:	b480      	push	{r7}
 8009610:	b083      	sub	sp, #12
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009616:	bf00      	nop
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
	...

08009624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a2a      	ldr	r2, [pc, #168]	; (80096e0 <TIM_Base_SetConfig+0xbc>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d003      	beq.n	8009644 <TIM_Base_SetConfig+0x20>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009642:	d108      	bne.n	8009656 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800964a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	4313      	orrs	r3, r2
 8009654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a21      	ldr	r2, [pc, #132]	; (80096e0 <TIM_Base_SetConfig+0xbc>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d00b      	beq.n	8009676 <TIM_Base_SetConfig+0x52>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009664:	d007      	beq.n	8009676 <TIM_Base_SetConfig+0x52>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a1e      	ldr	r2, [pc, #120]	; (80096e4 <TIM_Base_SetConfig+0xc0>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d003      	beq.n	8009676 <TIM_Base_SetConfig+0x52>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a1d      	ldr	r2, [pc, #116]	; (80096e8 <TIM_Base_SetConfig+0xc4>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d108      	bne.n	8009688 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800967c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	4313      	orrs	r3, r2
 8009686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	695b      	ldr	r3, [r3, #20]
 8009692:	4313      	orrs	r3, r2
 8009694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	689a      	ldr	r2, [r3, #8]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a0c      	ldr	r2, [pc, #48]	; (80096e0 <TIM_Base_SetConfig+0xbc>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d007      	beq.n	80096c4 <TIM_Base_SetConfig+0xa0>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a0b      	ldr	r2, [pc, #44]	; (80096e4 <TIM_Base_SetConfig+0xc0>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d003      	beq.n	80096c4 <TIM_Base_SetConfig+0xa0>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a0a      	ldr	r2, [pc, #40]	; (80096e8 <TIM_Base_SetConfig+0xc4>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d103      	bne.n	80096cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	691a      	ldr	r2, [r3, #16]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	615a      	str	r2, [r3, #20]
}
 80096d2:	bf00      	nop
 80096d4:	3714      	adds	r7, #20
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	40012c00 	.word	0x40012c00
 80096e4:	40014000 	.word	0x40014000
 80096e8:	40014400 	.word	0x40014400

080096ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d101      	bne.n	8009704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009700:	2302      	movs	r3, #2
 8009702:	e04f      	b.n	80097a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2202      	movs	r2, #2
 8009710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a21      	ldr	r2, [pc, #132]	; (80097b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d108      	bne.n	8009740 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009734:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	68fa      	ldr	r2, [r7, #12]
 800973c:	4313      	orrs	r3, r2
 800973e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	4313      	orrs	r3, r2
 8009750:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a14      	ldr	r2, [pc, #80]	; (80097b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d009      	beq.n	8009778 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800976c:	d004      	beq.n	8009778 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a10      	ldr	r2, [pc, #64]	; (80097b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d10c      	bne.n	8009792 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800977e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	4313      	orrs	r3, r2
 8009788:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr
 80097b0:	40012c00 	.word	0x40012c00
 80097b4:	40014000 	.word	0x40014000

080097b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80097f4:	b084      	sub	sp, #16
 80097f6:	b480      	push	{r7}
 80097f8:	b083      	sub	sp, #12
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	f107 0014 	add.w	r0, r7, #20
 8009802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	b004      	add	sp, #16
 8009814:	4770      	bx	lr

08009816 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009816:	b480      	push	{r7}
 8009818:	b085      	sub	sp, #20
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009826:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800982a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	b29a      	uxth	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3714      	adds	r7, #20
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800984c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009850:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009858:	b29a      	uxth	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	b29b      	uxth	r3, r3
 800985e:	43db      	mvns	r3, r3
 8009860:	b29b      	uxth	r3, r3
 8009862:	4013      	ands	r3, r2
 8009864:	b29a      	uxth	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3714      	adds	r7, #20
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800987a:	b480      	push	{r7}
 800987c:	b083      	sub	sp, #12
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	460b      	mov	r3, r1
 8009884:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009894:	b084      	sub	sp, #16
 8009896:	b480      	push	{r7}
 8009898:	b083      	sub	sp, #12
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	f107 0014 	add.w	r0, r7, #20
 80098a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	b004      	add	sp, #16
 80098d4:	4770      	bx	lr
	...

080098d8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098d8:	b480      	push	{r7}
 80098da:	b09d      	sub	sp, #116	; 0x74
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	4413      	add	r3, r2
 80098f2:	881b      	ldrh	r3, [r3, #0]
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80098fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098fe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	78db      	ldrb	r3, [r3, #3]
 8009906:	2b03      	cmp	r3, #3
 8009908:	d81f      	bhi.n	800994a <USB_ActivateEndpoint+0x72>
 800990a:	a201      	add	r2, pc, #4	; (adr r2, 8009910 <USB_ActivateEndpoint+0x38>)
 800990c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009910:	08009921 	.word	0x08009921
 8009914:	0800993d 	.word	0x0800993d
 8009918:	08009953 	.word	0x08009953
 800991c:	0800992f 	.word	0x0800992f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009920:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009924:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009928:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800992c:	e012      	b.n	8009954 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800992e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009932:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009936:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800993a:	e00b      	b.n	8009954 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800993c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009940:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009944:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009948:	e004      	b.n	8009954 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009950:	e000      	b.n	8009954 <USB_ActivateEndpoint+0x7c>
      break;
 8009952:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	441a      	add	r2, r3
 800995e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800996a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800996e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009972:	b29b      	uxth	r3, r3
 8009974:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4413      	add	r3, r2
 8009980:	881b      	ldrh	r3, [r3, #0]
 8009982:	b29b      	uxth	r3, r3
 8009984:	b21b      	sxth	r3, r3
 8009986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800998a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800998e:	b21a      	sxth	r2, r3
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	b21b      	sxth	r3, r3
 8009996:	4313      	orrs	r3, r2
 8009998:	b21b      	sxth	r3, r3
 800999a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	441a      	add	r2, r3
 80099a8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80099ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099bc:	b29b      	uxth	r3, r3
 80099be:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	7b1b      	ldrb	r3, [r3, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f040 816e 	bne.w	8009ca6 <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	785b      	ldrb	r3, [r3, #1]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f000 8084 	beq.w	8009adc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	61bb      	str	r3, [r7, #24]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099de:	b29b      	uxth	r3, r3
 80099e0:	461a      	mov	r2, r3
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	4413      	add	r3, r2
 80099e6:	61bb      	str	r3, [r7, #24]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	00da      	lsls	r2, r3, #3
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	4413      	add	r3, r2
 80099f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099f6:	617b      	str	r3, [r7, #20]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	88db      	ldrh	r3, [r3, #6]
 80099fc:	085b      	lsrs	r3, r3, #1
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	005b      	lsls	r3, r3, #1
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4413      	add	r3, r2
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	827b      	strh	r3, [r7, #18]
 8009a16:	8a7b      	ldrh	r3, [r7, #18]
 8009a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d01b      	beq.n	8009a58 <USB_ActivateEndpoint+0x180>
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4413      	add	r3, r2
 8009a2a:	881b      	ldrh	r3, [r3, #0]
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a36:	823b      	strh	r3, [r7, #16]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	441a      	add	r2, r3
 8009a42:	8a3b      	ldrh	r3, [r7, #16]
 8009a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	78db      	ldrb	r3, [r3, #3]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d020      	beq.n	8009aa2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	4413      	add	r3, r2
 8009a6a:	881b      	ldrh	r3, [r3, #0]
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a76:	81bb      	strh	r3, [r7, #12]
 8009a78:	89bb      	ldrh	r3, [r7, #12]
 8009a7a:	f083 0320 	eor.w	r3, r3, #32
 8009a7e:	81bb      	strh	r3, [r7, #12]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	441a      	add	r2, r3
 8009a8a:	89bb      	ldrh	r3, [r7, #12]
 8009a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	8013      	strh	r3, [r2, #0]
 8009aa0:	e2cb      	b.n	800a03a <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4413      	add	r3, r2
 8009aac:	881b      	ldrh	r3, [r3, #0]
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ab8:	81fb      	strh	r3, [r7, #14]
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	441a      	add	r2, r3
 8009ac4:	89fb      	ldrh	r3, [r7, #14]
 8009ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	8013      	strh	r3, [r2, #0]
 8009ada:	e2ae      	b.n	800a03a <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	633b      	str	r3, [r7, #48]	; 0x30
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	461a      	mov	r2, r3
 8009aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aec:	4413      	add	r3, r2
 8009aee:	633b      	str	r3, [r7, #48]	; 0x30
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	00da      	lsls	r2, r3, #3
 8009af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af8:	4413      	add	r3, r2
 8009afa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	88db      	ldrh	r3, [r3, #6]
 8009b04:	085b      	lsrs	r3, r3, #1
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	005b      	lsls	r3, r3, #1
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b20:	4413      	add	r3, r2
 8009b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	00da      	lsls	r2, r3, #3
 8009b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b32:	627b      	str	r3, [r7, #36]	; 0x24
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	2b3e      	cmp	r3, #62	; 0x3e
 8009b3a:	d918      	bls.n	8009b6e <USB_ActivateEndpoint+0x296>
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	691b      	ldr	r3, [r3, #16]
 8009b40:	095b      	lsrs	r3, r3, #5
 8009b42:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	f003 031f 	and.w	r3, r3, #31
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d102      	bne.n	8009b56 <USB_ActivateEndpoint+0x27e>
 8009b50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b52:	3b01      	subs	r3, #1
 8009b54:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	029b      	lsls	r3, r3, #10
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6a:	801a      	strh	r2, [r3, #0]
 8009b6c:	e029      	b.n	8009bc2 <USB_ActivateEndpoint+0x2ea>
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d112      	bne.n	8009b9c <USB_ActivateEndpoint+0x2c4>
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	881b      	ldrh	r3, [r3, #0]
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	801a      	strh	r2, [r3, #0]
 8009b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b88:	881b      	ldrh	r3, [r3, #0]
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b94:	b29a      	uxth	r2, r3
 8009b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b98:	801a      	strh	r2, [r3, #0]
 8009b9a:	e012      	b.n	8009bc2 <USB_ActivateEndpoint+0x2ea>
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	085b      	lsrs	r3, r3, #1
 8009ba2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	f003 0301 	and.w	r3, r3, #1
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d002      	beq.n	8009bb6 <USB_ActivateEndpoint+0x2de>
 8009bb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	029b      	lsls	r3, r3, #10
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	4413      	add	r3, r2
 8009bcc:	881b      	ldrh	r3, [r3, #0]
 8009bce:	847b      	strh	r3, [r7, #34]	; 0x22
 8009bd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d01b      	beq.n	8009c12 <USB_ActivateEndpoint+0x33a>
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4413      	add	r3, r2
 8009be4:	881b      	ldrh	r3, [r3, #0]
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bf0:	843b      	strh	r3, [r7, #32]
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	441a      	add	r2, r3
 8009bfc:	8c3b      	ldrh	r3, [r7, #32]
 8009bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d124      	bne.n	8009c64 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	4413      	add	r3, r2
 8009c24:	881b      	ldrh	r3, [r3, #0]
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c30:	83bb      	strh	r3, [r7, #28]
 8009c32:	8bbb      	ldrh	r3, [r7, #28]
 8009c34:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009c38:	83bb      	strh	r3, [r7, #28]
 8009c3a:	8bbb      	ldrh	r3, [r7, #28]
 8009c3c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c40:	83bb      	strh	r3, [r7, #28]
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	441a      	add	r2, r3
 8009c4c:	8bbb      	ldrh	r3, [r7, #28]
 8009c4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	8013      	strh	r3, [r2, #0]
 8009c62:	e1ea      	b.n	800a03a <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	4413      	add	r3, r2
 8009c6e:	881b      	ldrh	r3, [r3, #0]
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c7a:	83fb      	strh	r3, [r7, #30]
 8009c7c:	8bfb      	ldrh	r3, [r7, #30]
 8009c7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c82:	83fb      	strh	r3, [r7, #30]
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	441a      	add	r2, r3
 8009c8e:	8bfb      	ldrh	r3, [r7, #30]
 8009c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	8013      	strh	r3, [r2, #0]
 8009ca4:	e1c9      	b.n	800a03a <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	78db      	ldrb	r3, [r3, #3]
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d11e      	bne.n	8009cec <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4413      	add	r3, r2
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cc4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	441a      	add	r2, r3
 8009cd2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cde:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	8013      	strh	r3, [r2, #0]
 8009cea:	e01d      	b.n	8009d28 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4413      	add	r3, r2
 8009cf6:	881b      	ldrh	r3, [r3, #0]
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d02:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	441a      	add	r2, r3
 8009d10:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	461a      	mov	r2, r3
 8009d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d38:	4413      	add	r3, r2
 8009d3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	00da      	lsls	r2, r3, #3
 8009d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d44:	4413      	add	r3, r2
 8009d46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	891b      	ldrh	r3, [r3, #8]
 8009d50:	085b      	lsrs	r3, r3, #1
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	005b      	lsls	r3, r3, #1
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d5a:	801a      	strh	r2, [r3, #0]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	657b      	str	r3, [r7, #84]	; 0x54
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	461a      	mov	r2, r3
 8009d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d6c:	4413      	add	r3, r2
 8009d6e:	657b      	str	r3, [r7, #84]	; 0x54
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	00da      	lsls	r2, r3, #3
 8009d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d78:	4413      	add	r3, r2
 8009d7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d7e:	653b      	str	r3, [r7, #80]	; 0x50
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	895b      	ldrh	r3, [r3, #10]
 8009d84:	085b      	lsrs	r3, r3, #1
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	005b      	lsls	r3, r3, #1
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d8e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	785b      	ldrb	r3, [r3, #1]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f040 8093 	bne.w	8009ec0 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	4413      	add	r3, r2
 8009da4:	881b      	ldrh	r3, [r3, #0]
 8009da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009daa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d01b      	beq.n	8009dee <USB_ActivateEndpoint+0x516>
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	881b      	ldrh	r3, [r3, #0]
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dcc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	441a      	add	r2, r3
 8009dd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009de2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	4413      	add	r3, r2
 8009df8:	881b      	ldrh	r3, [r3, #0]
 8009dfa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009dfc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d01b      	beq.n	8009e3e <USB_ActivateEndpoint+0x566>
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	4413      	add	r3, r2
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e1c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	441a      	add	r2, r3
 8009e28:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e54:	873b      	strh	r3, [r7, #56]	; 0x38
 8009e56:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009e5c:	873b      	strh	r3, [r7, #56]	; 0x38
 8009e5e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009e64:	873b      	strh	r3, [r7, #56]	; 0x38
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	441a      	add	r2, r3
 8009e70:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	4413      	add	r3, r2
 8009e90:	881b      	ldrh	r3, [r3, #0]
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e9c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	441a      	add	r2, r3
 8009ea8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	8013      	strh	r3, [r2, #0]
 8009ebe:	e0bc      	b.n	800a03a <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	881b      	ldrh	r3, [r3, #0]
 8009ecc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009ed0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d01d      	beq.n	8009f18 <USB_ActivateEndpoint+0x640>
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	4413      	add	r3, r2
 8009ee6:	881b      	ldrh	r3, [r3, #0]
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ef2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	441a      	add	r2, r3
 8009f00:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009f04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	881b      	ldrh	r3, [r3, #0]
 8009f24:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009f28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d01d      	beq.n	8009f70 <USB_ActivateEndpoint+0x698>
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	4413      	add	r3, r2
 8009f3e:	881b      	ldrh	r3, [r3, #0]
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f4a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	441a      	add	r2, r3
 8009f58:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	78db      	ldrb	r3, [r3, #3]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d024      	beq.n	8009fc2 <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4413      	add	r3, r2
 8009f82:	881b      	ldrh	r3, [r3, #0]
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f8e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009f92:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009f96:	f083 0320 	eor.w	r3, r3, #32
 8009f9a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	441a      	add	r2, r3
 8009fa8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	8013      	strh	r3, [r2, #0]
 8009fc0:	e01d      	b.n	8009ffe <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	4413      	add	r3, r2
 8009fcc:	881b      	ldrh	r3, [r3, #0]
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fd8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	441a      	add	r2, r3
 8009fe6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	881b      	ldrh	r3, [r3, #0]
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a014:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	441a      	add	r2, r3
 800a022:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a02a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a02e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a036:	b29b      	uxth	r3, r3
 800a038:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a03a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3774      	adds	r7, #116	; 0x74
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop

0800a04c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b08d      	sub	sp, #52	; 0x34
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	7b1b      	ldrb	r3, [r3, #12]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f040 808e 	bne.w	800a17c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	785b      	ldrb	r3, [r3, #1]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d044      	beq.n	800a0f2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	4413      	add	r3, r2
 800a072:	881b      	ldrh	r3, [r3, #0]
 800a074:	81bb      	strh	r3, [r7, #12]
 800a076:	89bb      	ldrh	r3, [r7, #12]
 800a078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d01b      	beq.n	800a0b8 <USB_DeactivateEndpoint+0x6c>
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	881b      	ldrh	r3, [r3, #0]
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a096:	817b      	strh	r3, [r7, #10]
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	441a      	add	r2, r3
 800a0a2:	897b      	ldrh	r3, [r7, #10]
 800a0a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4413      	add	r3, r2
 800a0c2:	881b      	ldrh	r3, [r3, #0]
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0ce:	813b      	strh	r3, [r7, #8]
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	441a      	add	r2, r3
 800a0da:	893b      	ldrh	r3, [r7, #8]
 800a0dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	8013      	strh	r3, [r2, #0]
 800a0f0:	e192      	b.n	800a418 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	4413      	add	r3, r2
 800a0fc:	881b      	ldrh	r3, [r3, #0]
 800a0fe:	827b      	strh	r3, [r7, #18]
 800a100:	8a7b      	ldrh	r3, [r7, #18]
 800a102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a106:	2b00      	cmp	r3, #0
 800a108:	d01b      	beq.n	800a142 <USB_DeactivateEndpoint+0xf6>
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	4413      	add	r3, r2
 800a114:	881b      	ldrh	r3, [r3, #0]
 800a116:	b29b      	uxth	r3, r3
 800a118:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a11c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a120:	823b      	strh	r3, [r7, #16]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	441a      	add	r2, r3
 800a12c:	8a3b      	ldrh	r3, [r7, #16]
 800a12e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a136:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a13a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a13e:	b29b      	uxth	r3, r3
 800a140:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	4413      	add	r3, r2
 800a14c:	881b      	ldrh	r3, [r3, #0]
 800a14e:	b29b      	uxth	r3, r3
 800a150:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a158:	81fb      	strh	r3, [r7, #14]
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	441a      	add	r2, r3
 800a164:	89fb      	ldrh	r3, [r7, #14]
 800a166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a16a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a16e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a176:	b29b      	uxth	r3, r3
 800a178:	8013      	strh	r3, [r2, #0]
 800a17a:	e14d      	b.n	800a418 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	785b      	ldrb	r3, [r3, #1]
 800a180:	2b00      	cmp	r3, #0
 800a182:	f040 80a5 	bne.w	800a2d0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	4413      	add	r3, r2
 800a190:	881b      	ldrh	r3, [r3, #0]
 800a192:	843b      	strh	r3, [r7, #32]
 800a194:	8c3b      	ldrh	r3, [r7, #32]
 800a196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d01b      	beq.n	800a1d6 <USB_DeactivateEndpoint+0x18a>
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	4413      	add	r3, r2
 800a1a8:	881b      	ldrh	r3, [r3, #0]
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1b4:	83fb      	strh	r3, [r7, #30]
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	441a      	add	r2, r3
 800a1c0:	8bfb      	ldrh	r3, [r7, #30]
 800a1c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a1ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	881b      	ldrh	r3, [r3, #0]
 800a1e2:	83bb      	strh	r3, [r7, #28]
 800a1e4:	8bbb      	ldrh	r3, [r7, #28]
 800a1e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d01b      	beq.n	800a226 <USB_DeactivateEndpoint+0x1da>
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	009b      	lsls	r3, r3, #2
 800a1f6:	4413      	add	r3, r2
 800a1f8:	881b      	ldrh	r3, [r3, #0]
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a204:	837b      	strh	r3, [r7, #26]
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	441a      	add	r2, r3
 800a210:	8b7b      	ldrh	r3, [r7, #26]
 800a212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a21a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a21e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a222:	b29b      	uxth	r3, r3
 800a224:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4413      	add	r3, r2
 800a230:	881b      	ldrh	r3, [r3, #0]
 800a232:	b29b      	uxth	r3, r3
 800a234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a23c:	833b      	strh	r3, [r7, #24]
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	441a      	add	r2, r3
 800a248:	8b3b      	ldrh	r3, [r7, #24]
 800a24a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a24e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a256:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4413      	add	r3, r2
 800a268:	881b      	ldrh	r3, [r3, #0]
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a274:	82fb      	strh	r3, [r7, #22]
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	441a      	add	r2, r3
 800a280:	8afb      	ldrh	r3, [r7, #22]
 800a282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a28a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a28e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a292:	b29b      	uxth	r3, r3
 800a294:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	4413      	add	r3, r2
 800a2a0:	881b      	ldrh	r3, [r3, #0]
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2ac:	82bb      	strh	r3, [r7, #20]
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	441a      	add	r2, r3
 800a2b8:	8abb      	ldrh	r3, [r7, #20]
 800a2ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	8013      	strh	r3, [r2, #0]
 800a2ce:	e0a3      	b.n	800a418 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	4413      	add	r3, r2
 800a2da:	881b      	ldrh	r3, [r3, #0]
 800a2dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a2de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a2e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d01b      	beq.n	800a320 <USB_DeactivateEndpoint+0x2d4>
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	4413      	add	r3, r2
 800a2f2:	881b      	ldrh	r3, [r3, #0]
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	441a      	add	r2, r3
 800a30a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a30c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	4413      	add	r3, r2
 800a32a:	881b      	ldrh	r3, [r3, #0]
 800a32c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a32e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a334:	2b00      	cmp	r3, #0
 800a336:	d01b      	beq.n	800a370 <USB_DeactivateEndpoint+0x324>
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	4413      	add	r3, r2
 800a342:	881b      	ldrh	r3, [r3, #0]
 800a344:	b29b      	uxth	r3, r3
 800a346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a34a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a34e:	853b      	strh	r3, [r7, #40]	; 0x28
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	441a      	add	r2, r3
 800a35a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a35c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a368:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	4413      	add	r3, r2
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a386:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	441a      	add	r2, r3
 800a392:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a39c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a3a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4413      	add	r3, r2
 800a3b2:	881b      	ldrh	r3, [r3, #0]
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3be:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	441a      	add	r2, r3
 800a3ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a3cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	4413      	add	r3, r2
 800a3ea:	881b      	ldrh	r3, [r3, #0]
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3f6:	847b      	strh	r3, [r7, #34]	; 0x22
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	441a      	add	r2, r3
 800a402:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a40c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a414:	b29b      	uxth	r3, r3
 800a416:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3734      	adds	r7, #52	; 0x34
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr

0800a426 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b0c2      	sub	sp, #264	; 0x108
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	1d3b      	adds	r3, r7, #4
 800a42e:	6018      	str	r0, [r3, #0]
 800a430:	463b      	mov	r3, r7
 800a432:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a434:	463b      	mov	r3, r7
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	785b      	ldrb	r3, [r3, #1]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	f040 8509 	bne.w	800ae52 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a440:	463b      	mov	r3, r7
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	699a      	ldr	r2, [r3, #24]
 800a446:	463b      	mov	r3, r7
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d905      	bls.n	800a45c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800a450:	463b      	mov	r3, r7
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a45a:	e004      	b.n	800a466 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800a45c:	463b      	mov	r3, r7
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	699b      	ldr	r3, [r3, #24]
 800a462:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a466:	463b      	mov	r3, r7
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	7b1b      	ldrb	r3, [r3, #12]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d128      	bne.n	800a4c2 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a470:	463b      	mov	r3, r7
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6959      	ldr	r1, [r3, #20]
 800a476:	463b      	mov	r3, r7
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	88da      	ldrh	r2, [r3, #6]
 800a47c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a480:	b29b      	uxth	r3, r3
 800a482:	1d38      	adds	r0, r7, #4
 800a484:	6800      	ldr	r0, [r0, #0]
 800a486:	f001 f9fb 	bl	800b880 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a48a:	1d3b      	adds	r3, r7, #4
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	613b      	str	r3, [r7, #16]
 800a490:	1d3b      	adds	r3, r7, #4
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a498:	b29b      	uxth	r3, r3
 800a49a:	461a      	mov	r2, r3
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	4413      	add	r3, r2
 800a4a0:	613b      	str	r3, [r7, #16]
 800a4a2:	463b      	mov	r3, r7
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	00da      	lsls	r2, r3, #3
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a4b2:	60fb      	str	r3, [r7, #12]
 800a4b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4b8:	b29a      	uxth	r2, r3
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	801a      	strh	r2, [r3, #0]
 800a4be:	f000 bc9f 	b.w	800ae00 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a4c2:	463b      	mov	r3, r7
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	78db      	ldrb	r3, [r3, #3]
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	f040 8347 	bne.w	800ab5c <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a4ce:	463b      	mov	r3, r7
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	6a1a      	ldr	r2, [r3, #32]
 800a4d4:	463b      	mov	r3, r7
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	691b      	ldr	r3, [r3, #16]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	f240 82eb 	bls.w	800aab6 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a4e0:	1d3b      	adds	r3, r7, #4
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	463b      	mov	r3, r7
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	4413      	add	r3, r2
 800a4ee:	881b      	ldrh	r3, [r3, #0]
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4fa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a4fe:	1d3b      	adds	r3, r7, #4
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	463b      	mov	r3, r7
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	441a      	add	r2, r3
 800a50c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a518:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a51c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a520:	b29b      	uxth	r3, r3
 800a522:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a524:	463b      	mov	r3, r7
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	6a1a      	ldr	r2, [r3, #32]
 800a52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a52e:	1ad2      	subs	r2, r2, r3
 800a530:	463b      	mov	r3, r7
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a536:	1d3b      	adds	r3, r7, #4
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	463b      	mov	r3, r7
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	4413      	add	r3, r2
 800a544:	881b      	ldrh	r3, [r3, #0]
 800a546:	b29b      	uxth	r3, r3
 800a548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f000 8159 	beq.w	800a804 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a552:	1d3b      	adds	r3, r7, #4
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	633b      	str	r3, [r7, #48]	; 0x30
 800a558:	463b      	mov	r3, r7
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	785b      	ldrb	r3, [r3, #1]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d164      	bne.n	800a62c <USB_EPStartXfer+0x206>
 800a562:	1d3b      	adds	r3, r7, #4
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	62bb      	str	r3, [r7, #40]	; 0x28
 800a568:	1d3b      	adds	r3, r7, #4
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a570:	b29b      	uxth	r3, r3
 800a572:	461a      	mov	r2, r3
 800a574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a576:	4413      	add	r3, r2
 800a578:	62bb      	str	r3, [r7, #40]	; 0x28
 800a57a:	463b      	mov	r3, r7
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	00da      	lsls	r2, r3, #3
 800a582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a584:	4413      	add	r3, r2
 800a586:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a58a:	627b      	str	r3, [r7, #36]	; 0x24
 800a58c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a590:	2b3e      	cmp	r3, #62	; 0x3e
 800a592:	d91c      	bls.n	800a5ce <USB_EPStartXfer+0x1a8>
 800a594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a598:	095b      	lsrs	r3, r3, #5
 800a59a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a59e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5a2:	f003 031f 	and.w	r3, r3, #31
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d104      	bne.n	800a5b4 <USB_EPStartXfer+0x18e>
 800a5aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a5b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	029b      	lsls	r3, r3, #10
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ca:	801a      	strh	r2, [r3, #0]
 800a5cc:	e04a      	b.n	800a664 <USB_EPStartXfer+0x23e>
 800a5ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d112      	bne.n	800a5fc <USB_EPStartXfer+0x1d6>
 800a5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d8:	881b      	ldrh	r3, [r3, #0]
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e4:	801a      	strh	r2, [r3, #0]
 800a5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e8:	881b      	ldrh	r3, [r3, #0]
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f8:	801a      	strh	r2, [r3, #0]
 800a5fa:	e033      	b.n	800a664 <USB_EPStartXfer+0x23e>
 800a5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a600:	085b      	lsrs	r3, r3, #1
 800a602:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a60a:	f003 0301 	and.w	r3, r3, #1
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d004      	beq.n	800a61c <USB_EPStartXfer+0x1f6>
 800a612:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a616:	3301      	adds	r3, #1
 800a618:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a61c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a620:	b29b      	uxth	r3, r3
 800a622:	029b      	lsls	r3, r3, #10
 800a624:	b29a      	uxth	r2, r3
 800a626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a628:	801a      	strh	r2, [r3, #0]
 800a62a:	e01b      	b.n	800a664 <USB_EPStartXfer+0x23e>
 800a62c:	463b      	mov	r3, r7
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	785b      	ldrb	r3, [r3, #1]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d116      	bne.n	800a664 <USB_EPStartXfer+0x23e>
 800a636:	1d3b      	adds	r3, r7, #4
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a63e:	b29b      	uxth	r3, r3
 800a640:	461a      	mov	r2, r3
 800a642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a644:	4413      	add	r3, r2
 800a646:	633b      	str	r3, [r7, #48]	; 0x30
 800a648:	463b      	mov	r3, r7
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	00da      	lsls	r2, r3, #3
 800a650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a652:	4413      	add	r3, r2
 800a654:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a65a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a65e:	b29a      	uxth	r2, r3
 800a660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a662:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a664:	463b      	mov	r3, r7
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	895b      	ldrh	r3, [r3, #10]
 800a66a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a66e:	463b      	mov	r3, r7
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	6959      	ldr	r1, [r3, #20]
 800a674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a678:	b29b      	uxth	r3, r3
 800a67a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a67e:	1d38      	adds	r0, r7, #4
 800a680:	6800      	ldr	r0, [r0, #0]
 800a682:	f001 f8fd 	bl	800b880 <USB_WritePMA>
            ep->xfer_buff += len;
 800a686:	463b      	mov	r3, r7
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	695a      	ldr	r2, [r3, #20]
 800a68c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a690:	441a      	add	r2, r3
 800a692:	463b      	mov	r3, r7
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a698:	463b      	mov	r3, r7
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	6a1a      	ldr	r2, [r3, #32]
 800a69e:	463b      	mov	r3, r7
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d909      	bls.n	800a6bc <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 800a6a8:	463b      	mov	r3, r7
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	6a1a      	ldr	r2, [r3, #32]
 800a6ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6b2:	1ad2      	subs	r2, r2, r3
 800a6b4:	463b      	mov	r3, r7
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	621a      	str	r2, [r3, #32]
 800a6ba:	e008      	b.n	800a6ce <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 800a6bc:	463b      	mov	r3, r7
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	6a1b      	ldr	r3, [r3, #32]
 800a6c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a6c6:	463b      	mov	r3, r7
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a6ce:	463b      	mov	r3, r7
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	785b      	ldrb	r3, [r3, #1]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d164      	bne.n	800a7a2 <USB_EPStartXfer+0x37c>
 800a6d8:	1d3b      	adds	r3, r7, #4
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	61bb      	str	r3, [r7, #24]
 800a6de:	1d3b      	adds	r3, r7, #4
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	61bb      	str	r3, [r7, #24]
 800a6f0:	463b      	mov	r3, r7
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	00da      	lsls	r2, r3, #3
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a700:	617b      	str	r3, [r7, #20]
 800a702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a706:	2b3e      	cmp	r3, #62	; 0x3e
 800a708:	d91c      	bls.n	800a744 <USB_EPStartXfer+0x31e>
 800a70a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a70e:	095b      	lsrs	r3, r3, #5
 800a710:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a718:	f003 031f 	and.w	r3, r3, #31
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d104      	bne.n	800a72a <USB_EPStartXfer+0x304>
 800a720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a724:	3b01      	subs	r3, #1
 800a726:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a72a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a72e:	b29b      	uxth	r3, r3
 800a730:	029b      	lsls	r3, r3, #10
 800a732:	b29b      	uxth	r3, r3
 800a734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a73c:	b29a      	uxth	r2, r3
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	801a      	strh	r2, [r3, #0]
 800a742:	e04d      	b.n	800a7e0 <USB_EPStartXfer+0x3ba>
 800a744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d112      	bne.n	800a772 <USB_EPStartXfer+0x34c>
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	881b      	ldrh	r3, [r3, #0]
 800a750:	b29b      	uxth	r3, r3
 800a752:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a756:	b29a      	uxth	r2, r3
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	801a      	strh	r2, [r3, #0]
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	881b      	ldrh	r3, [r3, #0]
 800a760:	b29b      	uxth	r3, r3
 800a762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a76a:	b29a      	uxth	r2, r3
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	801a      	strh	r2, [r3, #0]
 800a770:	e036      	b.n	800a7e0 <USB_EPStartXfer+0x3ba>
 800a772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a776:	085b      	lsrs	r3, r3, #1
 800a778:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a77c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a780:	f003 0301 	and.w	r3, r3, #1
 800a784:	2b00      	cmp	r3, #0
 800a786:	d004      	beq.n	800a792 <USB_EPStartXfer+0x36c>
 800a788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a78c:	3301      	adds	r3, #1
 800a78e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a796:	b29b      	uxth	r3, r3
 800a798:	029b      	lsls	r3, r3, #10
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	801a      	strh	r2, [r3, #0]
 800a7a0:	e01e      	b.n	800a7e0 <USB_EPStartXfer+0x3ba>
 800a7a2:	463b      	mov	r3, r7
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	785b      	ldrb	r3, [r3, #1]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d119      	bne.n	800a7e0 <USB_EPStartXfer+0x3ba>
 800a7ac:	1d3b      	adds	r3, r7, #4
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	623b      	str	r3, [r7, #32]
 800a7b2:	1d3b      	adds	r3, r7, #4
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	461a      	mov	r2, r3
 800a7be:	6a3b      	ldr	r3, [r7, #32]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	623b      	str	r3, [r7, #32]
 800a7c4:	463b      	mov	r3, r7
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	00da      	lsls	r2, r3, #3
 800a7cc:	6a3b      	ldr	r3, [r7, #32]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7d4:	61fb      	str	r3, [r7, #28]
 800a7d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a7e0:	463b      	mov	r3, r7
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	891b      	ldrh	r3, [r3, #8]
 800a7e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7ea:	463b      	mov	r3, r7
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	6959      	ldr	r1, [r3, #20]
 800a7f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a7fa:	1d38      	adds	r0, r7, #4
 800a7fc:	6800      	ldr	r0, [r0, #0]
 800a7fe:	f001 f83f 	bl	800b880 <USB_WritePMA>
 800a802:	e2fd      	b.n	800ae00 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a804:	463b      	mov	r3, r7
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	785b      	ldrb	r3, [r3, #1]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d164      	bne.n	800a8d8 <USB_EPStartXfer+0x4b2>
 800a80e:	1d3b      	adds	r3, r7, #4
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	64bb      	str	r3, [r7, #72]	; 0x48
 800a814:	1d3b      	adds	r3, r7, #4
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	461a      	mov	r2, r3
 800a820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a822:	4413      	add	r3, r2
 800a824:	64bb      	str	r3, [r7, #72]	; 0x48
 800a826:	463b      	mov	r3, r7
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	00da      	lsls	r2, r3, #3
 800a82e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a830:	4413      	add	r3, r2
 800a832:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a836:	647b      	str	r3, [r7, #68]	; 0x44
 800a838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a83c:	2b3e      	cmp	r3, #62	; 0x3e
 800a83e:	d91c      	bls.n	800a87a <USB_EPStartXfer+0x454>
 800a840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a844:	095b      	lsrs	r3, r3, #5
 800a846:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a84a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a84e:	f003 031f 	and.w	r3, r3, #31
 800a852:	2b00      	cmp	r3, #0
 800a854:	d104      	bne.n	800a860 <USB_EPStartXfer+0x43a>
 800a856:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a85a:	3b01      	subs	r3, #1
 800a85c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a860:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a864:	b29b      	uxth	r3, r3
 800a866:	029b      	lsls	r3, r3, #10
 800a868:	b29b      	uxth	r3, r3
 800a86a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a86e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a872:	b29a      	uxth	r2, r3
 800a874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a876:	801a      	strh	r2, [r3, #0]
 800a878:	e04d      	b.n	800a916 <USB_EPStartXfer+0x4f0>
 800a87a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d112      	bne.n	800a8a8 <USB_EPStartXfer+0x482>
 800a882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a884:	881b      	ldrh	r3, [r3, #0]
 800a886:	b29b      	uxth	r3, r3
 800a888:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a88c:	b29a      	uxth	r2, r3
 800a88e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a890:	801a      	strh	r2, [r3, #0]
 800a892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a894:	881b      	ldrh	r3, [r3, #0]
 800a896:	b29b      	uxth	r3, r3
 800a898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a89c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8a0:	b29a      	uxth	r2, r3
 800a8a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8a4:	801a      	strh	r2, [r3, #0]
 800a8a6:	e036      	b.n	800a916 <USB_EPStartXfer+0x4f0>
 800a8a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ac:	085b      	lsrs	r3, r3, #1
 800a8ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a8b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b6:	f003 0301 	and.w	r3, r3, #1
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d004      	beq.n	800a8c8 <USB_EPStartXfer+0x4a2>
 800a8be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a8c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	029b      	lsls	r3, r3, #10
 800a8d0:	b29a      	uxth	r2, r3
 800a8d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8d4:	801a      	strh	r2, [r3, #0]
 800a8d6:	e01e      	b.n	800a916 <USB_EPStartXfer+0x4f0>
 800a8d8:	463b      	mov	r3, r7
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	785b      	ldrb	r3, [r3, #1]
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d119      	bne.n	800a916 <USB_EPStartXfer+0x4f0>
 800a8e2:	1d3b      	adds	r3, r7, #4
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	653b      	str	r3, [r7, #80]	; 0x50
 800a8e8:	1d3b      	adds	r3, r7, #4
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8f6:	4413      	add	r3, r2
 800a8f8:	653b      	str	r3, [r7, #80]	; 0x50
 800a8fa:	463b      	mov	r3, r7
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	00da      	lsls	r2, r3, #3
 800a902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a904:	4413      	add	r3, r2
 800a906:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a90a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a90c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a910:	b29a      	uxth	r2, r3
 800a912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a914:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a916:	463b      	mov	r3, r7
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	891b      	ldrh	r3, [r3, #8]
 800a91c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a920:	463b      	mov	r3, r7
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6959      	ldr	r1, [r3, #20]
 800a926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a930:	1d38      	adds	r0, r7, #4
 800a932:	6800      	ldr	r0, [r0, #0]
 800a934:	f000 ffa4 	bl	800b880 <USB_WritePMA>
            ep->xfer_buff += len;
 800a938:	463b      	mov	r3, r7
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	695a      	ldr	r2, [r3, #20]
 800a93e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a942:	441a      	add	r2, r3
 800a944:	463b      	mov	r3, r7
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a94a:	463b      	mov	r3, r7
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	6a1a      	ldr	r2, [r3, #32]
 800a950:	463b      	mov	r3, r7
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	691b      	ldr	r3, [r3, #16]
 800a956:	429a      	cmp	r2, r3
 800a958:	d909      	bls.n	800a96e <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 800a95a:	463b      	mov	r3, r7
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	6a1a      	ldr	r2, [r3, #32]
 800a960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a964:	1ad2      	subs	r2, r2, r3
 800a966:	463b      	mov	r3, r7
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	621a      	str	r2, [r3, #32]
 800a96c:	e008      	b.n	800a980 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 800a96e:	463b      	mov	r3, r7
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	6a1b      	ldr	r3, [r3, #32]
 800a974:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a978:	463b      	mov	r3, r7
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2200      	movs	r2, #0
 800a97e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a980:	1d3b      	adds	r3, r7, #4
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	643b      	str	r3, [r7, #64]	; 0x40
 800a986:	463b      	mov	r3, r7
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	785b      	ldrb	r3, [r3, #1]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d164      	bne.n	800aa5a <USB_EPStartXfer+0x634>
 800a990:	1d3b      	adds	r3, r7, #4
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	63bb      	str	r3, [r7, #56]	; 0x38
 800a996:	1d3b      	adds	r3, r7, #4
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a4:	4413      	add	r3, r2
 800a9a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9a8:	463b      	mov	r3, r7
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	00da      	lsls	r2, r3, #3
 800a9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a9b8:	637b      	str	r3, [r7, #52]	; 0x34
 800a9ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9be:	2b3e      	cmp	r3, #62	; 0x3e
 800a9c0:	d91c      	bls.n	800a9fc <USB_EPStartXfer+0x5d6>
 800a9c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c6:	095b      	lsrs	r3, r3, #5
 800a9c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d0:	f003 031f 	and.w	r3, r3, #31
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d104      	bne.n	800a9e2 <USB_EPStartXfer+0x5bc>
 800a9d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a9e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	029b      	lsls	r3, r3, #10
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9f4:	b29a      	uxth	r2, r3
 800a9f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f8:	801a      	strh	r2, [r3, #0]
 800a9fa:	e04a      	b.n	800aa92 <USB_EPStartXfer+0x66c>
 800a9fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d112      	bne.n	800aa2a <USB_EPStartXfer+0x604>
 800aa04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa06:	881b      	ldrh	r3, [r3, #0]
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa12:	801a      	strh	r2, [r3, #0]
 800aa14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa16:	881b      	ldrh	r3, [r3, #0]
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa26:	801a      	strh	r2, [r3, #0]
 800aa28:	e033      	b.n	800aa92 <USB_EPStartXfer+0x66c>
 800aa2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa2e:	085b      	lsrs	r3, r3, #1
 800aa30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aa34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa38:	f003 0301 	and.w	r3, r3, #1
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d004      	beq.n	800aa4a <USB_EPStartXfer+0x624>
 800aa40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa44:	3301      	adds	r3, #1
 800aa46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aa4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	029b      	lsls	r3, r3, #10
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa56:	801a      	strh	r2, [r3, #0]
 800aa58:	e01b      	b.n	800aa92 <USB_EPStartXfer+0x66c>
 800aa5a:	463b      	mov	r3, r7
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	785b      	ldrb	r3, [r3, #1]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d116      	bne.n	800aa92 <USB_EPStartXfer+0x66c>
 800aa64:	1d3b      	adds	r3, r7, #4
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	461a      	mov	r2, r3
 800aa70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa72:	4413      	add	r3, r2
 800aa74:	643b      	str	r3, [r7, #64]	; 0x40
 800aa76:	463b      	mov	r3, r7
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	00da      	lsls	r2, r3, #3
 800aa7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa80:	4413      	add	r3, r2
 800aa82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa8c:	b29a      	uxth	r2, r3
 800aa8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800aa92:	463b      	mov	r3, r7
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	895b      	ldrh	r3, [r3, #10]
 800aa98:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa9c:	463b      	mov	r3, r7
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	6959      	ldr	r1, [r3, #20]
 800aaa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aaac:	1d38      	adds	r0, r7, #4
 800aaae:	6800      	ldr	r0, [r0, #0]
 800aab0:	f000 fee6 	bl	800b880 <USB_WritePMA>
 800aab4:	e1a4      	b.n	800ae00 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800aab6:	463b      	mov	r3, r7
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	6a1b      	ldr	r3, [r3, #32]
 800aabc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800aac0:	1d3b      	adds	r3, r7, #4
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	463b      	mov	r3, r7
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	4413      	add	r3, r2
 800aace:	881b      	ldrh	r3, [r3, #0]
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800aad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aada:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800aade:	1d3b      	adds	r3, r7, #4
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	463b      	mov	r3, r7
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	441a      	add	r2, r3
 800aaec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800aaf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aafc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ab04:	1d3b      	adds	r3, r7, #4
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab0a:	1d3b      	adds	r3, r7, #4
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	461a      	mov	r2, r3
 800ab16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab18:	4413      	add	r3, r2
 800ab1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab1c:	463b      	mov	r3, r7
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	00da      	lsls	r2, r3, #3
 800ab24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab26:	4413      	add	r3, r2
 800ab28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab2c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab32:	b29a      	uxth	r2, r3
 800ab34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab36:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ab38:	463b      	mov	r3, r7
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	891b      	ldrh	r3, [r3, #8]
 800ab3e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab42:	463b      	mov	r3, r7
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	6959      	ldr	r1, [r3, #20]
 800ab48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ab52:	1d38      	adds	r0, r7, #4
 800ab54:	6800      	ldr	r0, [r0, #0]
 800ab56:	f000 fe93 	bl	800b880 <USB_WritePMA>
 800ab5a:	e151      	b.n	800ae00 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ab5c:	463b      	mov	r3, r7
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	6a1a      	ldr	r2, [r3, #32]
 800ab62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab66:	1ad2      	subs	r2, r2, r3
 800ab68:	463b      	mov	r3, r7
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ab6e:	1d3b      	adds	r3, r7, #4
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	463b      	mov	r3, r7
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	4413      	add	r3, r2
 800ab7c:	881b      	ldrh	r3, [r3, #0]
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 809b 	beq.w	800acc0 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab8a:	1d3b      	adds	r3, r7, #4
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	673b      	str	r3, [r7, #112]	; 0x70
 800ab90:	463b      	mov	r3, r7
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	785b      	ldrb	r3, [r3, #1]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d164      	bne.n	800ac64 <USB_EPStartXfer+0x83e>
 800ab9a:	1d3b      	adds	r3, r7, #4
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	66bb      	str	r3, [r7, #104]	; 0x68
 800aba0:	1d3b      	adds	r3, r7, #4
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	461a      	mov	r2, r3
 800abac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abae:	4413      	add	r3, r2
 800abb0:	66bb      	str	r3, [r7, #104]	; 0x68
 800abb2:	463b      	mov	r3, r7
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	00da      	lsls	r2, r3, #3
 800abba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abbc:	4413      	add	r3, r2
 800abbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800abc2:	667b      	str	r3, [r7, #100]	; 0x64
 800abc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc8:	2b3e      	cmp	r3, #62	; 0x3e
 800abca:	d91c      	bls.n	800ac06 <USB_EPStartXfer+0x7e0>
 800abcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd0:	095b      	lsrs	r3, r3, #5
 800abd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800abd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abda:	f003 031f 	and.w	r3, r3, #31
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d104      	bne.n	800abec <USB_EPStartXfer+0x7c6>
 800abe2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800abe6:	3b01      	subs	r3, #1
 800abe8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800abec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	029b      	lsls	r3, r3, #10
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abfe:	b29a      	uxth	r2, r3
 800ac00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac02:	801a      	strh	r2, [r3, #0]
 800ac04:	e04a      	b.n	800ac9c <USB_EPStartXfer+0x876>
 800ac06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d112      	bne.n	800ac34 <USB_EPStartXfer+0x80e>
 800ac0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac10:	881b      	ldrh	r3, [r3, #0]
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ac18:	b29a      	uxth	r2, r3
 800ac1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac1c:	801a      	strh	r2, [r3, #0]
 800ac1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac20:	881b      	ldrh	r3, [r3, #0]
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac30:	801a      	strh	r2, [r3, #0]
 800ac32:	e033      	b.n	800ac9c <USB_EPStartXfer+0x876>
 800ac34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac38:	085b      	lsrs	r3, r3, #1
 800ac3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac42:	f003 0301 	and.w	r3, r3, #1
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d004      	beq.n	800ac54 <USB_EPStartXfer+0x82e>
 800ac4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac4e:	3301      	adds	r3, #1
 800ac50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	029b      	lsls	r3, r3, #10
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac60:	801a      	strh	r2, [r3, #0]
 800ac62:	e01b      	b.n	800ac9c <USB_EPStartXfer+0x876>
 800ac64:	463b      	mov	r3, r7
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	785b      	ldrb	r3, [r3, #1]
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d116      	bne.n	800ac9c <USB_EPStartXfer+0x876>
 800ac6e:	1d3b      	adds	r3, r7, #4
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	461a      	mov	r2, r3
 800ac7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac7c:	4413      	add	r3, r2
 800ac7e:	673b      	str	r3, [r7, #112]	; 0x70
 800ac80:	463b      	mov	r3, r7
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	00da      	lsls	r2, r3, #3
 800ac88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac8a:	4413      	add	r3, r2
 800ac8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac90:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac96:	b29a      	uxth	r2, r3
 800ac98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac9a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ac9c:	463b      	mov	r3, r7
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	895b      	ldrh	r3, [r3, #10]
 800aca2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aca6:	463b      	mov	r3, r7
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	6959      	ldr	r1, [r3, #20]
 800acac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800acb6:	1d38      	adds	r0, r7, #4
 800acb8:	6800      	ldr	r0, [r0, #0]
 800acba:	f000 fde1 	bl	800b880 <USB_WritePMA>
 800acbe:	e09f      	b.n	800ae00 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800acc0:	463b      	mov	r3, r7
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	785b      	ldrb	r3, [r3, #1]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d164      	bne.n	800ad94 <USB_EPStartXfer+0x96e>
 800acca:	1d3b      	adds	r3, r7, #4
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	67fb      	str	r3, [r7, #124]	; 0x7c
 800acd0:	1d3b      	adds	r3, r7, #4
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acd8:	b29b      	uxth	r3, r3
 800acda:	461a      	mov	r2, r3
 800acdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800acde:	4413      	add	r3, r2
 800ace0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ace2:	463b      	mov	r3, r7
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	00da      	lsls	r2, r3, #3
 800acea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800acec:	4413      	add	r3, r2
 800acee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800acf2:	67bb      	str	r3, [r7, #120]	; 0x78
 800acf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acf8:	2b3e      	cmp	r3, #62	; 0x3e
 800acfa:	d91c      	bls.n	800ad36 <USB_EPStartXfer+0x910>
 800acfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad00:	095b      	lsrs	r3, r3, #5
 800ad02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad0a:	f003 031f 	and.w	r3, r3, #31
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d104      	bne.n	800ad1c <USB_EPStartXfer+0x8f6>
 800ad12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad16:	3b01      	subs	r3, #1
 800ad18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	029b      	lsls	r3, r3, #10
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad2e:	b29a      	uxth	r2, r3
 800ad30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad32:	801a      	strh	r2, [r3, #0]
 800ad34:	e053      	b.n	800adde <USB_EPStartXfer+0x9b8>
 800ad36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d112      	bne.n	800ad64 <USB_EPStartXfer+0x93e>
 800ad3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad40:	881b      	ldrh	r3, [r3, #0]
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad48:	b29a      	uxth	r2, r3
 800ad4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad4c:	801a      	strh	r2, [r3, #0]
 800ad4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad50:	881b      	ldrh	r3, [r3, #0]
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad60:	801a      	strh	r2, [r3, #0]
 800ad62:	e03c      	b.n	800adde <USB_EPStartXfer+0x9b8>
 800ad64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad68:	085b      	lsrs	r3, r3, #1
 800ad6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad72:	f003 0301 	and.w	r3, r3, #1
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d004      	beq.n	800ad84 <USB_EPStartXfer+0x95e>
 800ad7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad7e:	3301      	adds	r3, #1
 800ad80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	029b      	lsls	r3, r3, #10
 800ad8c:	b29a      	uxth	r2, r3
 800ad8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad90:	801a      	strh	r2, [r3, #0]
 800ad92:	e024      	b.n	800adde <USB_EPStartXfer+0x9b8>
 800ad94:	463b      	mov	r3, r7
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	785b      	ldrb	r3, [r3, #1]
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d11f      	bne.n	800adde <USB_EPStartXfer+0x9b8>
 800ad9e:	1d3b      	adds	r3, r7, #4
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ada6:	1d3b      	adds	r3, r7, #4
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adae:	b29b      	uxth	r3, r3
 800adb0:	461a      	mov	r2, r3
 800adb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800adb6:	4413      	add	r3, r2
 800adb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800adbc:	463b      	mov	r3, r7
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	00da      	lsls	r2, r3, #3
 800adc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800adc8:	4413      	add	r3, r2
 800adca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800adce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800add2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add6:	b29a      	uxth	r2, r3
 800add8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800addc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800adde:	463b      	mov	r3, r7
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	891b      	ldrh	r3, [r3, #8]
 800ade4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ade8:	463b      	mov	r3, r7
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	6959      	ldr	r1, [r3, #20]
 800adee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800adf8:	1d38      	adds	r0, r7, #4
 800adfa:	6800      	ldr	r0, [r0, #0]
 800adfc:	f000 fd40 	bl	800b880 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ae00:	1d3b      	adds	r3, r7, #4
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	463b      	mov	r3, r7
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	4413      	add	r3, r2
 800ae0e:	881b      	ldrh	r3, [r3, #0]
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae1a:	817b      	strh	r3, [r7, #10]
 800ae1c:	897b      	ldrh	r3, [r7, #10]
 800ae1e:	f083 0310 	eor.w	r3, r3, #16
 800ae22:	817b      	strh	r3, [r7, #10]
 800ae24:	897b      	ldrh	r3, [r7, #10]
 800ae26:	f083 0320 	eor.w	r3, r3, #32
 800ae2a:	817b      	strh	r3, [r7, #10]
 800ae2c:	1d3b      	adds	r3, r7, #4
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	463b      	mov	r3, r7
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	441a      	add	r2, r3
 800ae3a:	897b      	ldrh	r3, [r7, #10]
 800ae3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	8013      	strh	r3, [r2, #0]
 800ae50:	e3b5      	b.n	800b5be <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ae52:	463b      	mov	r3, r7
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	7b1b      	ldrb	r3, [r3, #12]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f040 8090 	bne.w	800af7e <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ae5e:	463b      	mov	r3, r7
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	699a      	ldr	r2, [r3, #24]
 800ae64:	463b      	mov	r3, r7
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d90e      	bls.n	800ae8c <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800ae6e:	463b      	mov	r3, r7
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	691b      	ldr	r3, [r3, #16]
 800ae74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800ae78:	463b      	mov	r3, r7
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	699a      	ldr	r2, [r3, #24]
 800ae7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae82:	1ad2      	subs	r2, r2, r3
 800ae84:	463b      	mov	r3, r7
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	619a      	str	r2, [r3, #24]
 800ae8a:	e008      	b.n	800ae9e <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 800ae8c:	463b      	mov	r3, r7
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800ae96:	463b      	mov	r3, r7
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ae9e:	1d3b      	adds	r3, r7, #4
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aea6:	1d3b      	adds	r3, r7, #4
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aeb6:	4413      	add	r3, r2
 800aeb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aebc:	463b      	mov	r3, r7
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	00da      	lsls	r2, r3, #3
 800aec4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aec8:	4413      	add	r3, r2
 800aeca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aece:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aed6:	2b3e      	cmp	r3, #62	; 0x3e
 800aed8:	d91d      	bls.n	800af16 <USB_EPStartXfer+0xaf0>
 800aeda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aede:	095b      	lsrs	r3, r3, #5
 800aee0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee8:	f003 031f 	and.w	r3, r3, #31
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d104      	bne.n	800aefa <USB_EPStartXfer+0xad4>
 800aef0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aef4:	3b01      	subs	r3, #1
 800aef6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aefa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aefe:	b29b      	uxth	r3, r3
 800af00:	029b      	lsls	r3, r3, #10
 800af02:	b29b      	uxth	r3, r3
 800af04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af0c:	b29a      	uxth	r2, r3
 800af0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af12:	801a      	strh	r2, [r3, #0]
 800af14:	e325      	b.n	800b562 <USB_EPStartXfer+0x113c>
 800af16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d116      	bne.n	800af4c <USB_EPStartXfer+0xb26>
 800af1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af22:	881b      	ldrh	r3, [r3, #0]
 800af24:	b29b      	uxth	r3, r3
 800af26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800af2a:	b29a      	uxth	r2, r3
 800af2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af30:	801a      	strh	r2, [r3, #0]
 800af32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af36:	881b      	ldrh	r3, [r3, #0]
 800af38:	b29b      	uxth	r3, r3
 800af3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af42:	b29a      	uxth	r2, r3
 800af44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af48:	801a      	strh	r2, [r3, #0]
 800af4a:	e30a      	b.n	800b562 <USB_EPStartXfer+0x113c>
 800af4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af50:	085b      	lsrs	r3, r3, #1
 800af52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af5a:	f003 0301 	and.w	r3, r3, #1
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d004      	beq.n	800af6c <USB_EPStartXfer+0xb46>
 800af62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af66:	3301      	adds	r3, #1
 800af68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af70:	b29b      	uxth	r3, r3
 800af72:	029b      	lsls	r3, r3, #10
 800af74:	b29a      	uxth	r2, r3
 800af76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af7a:	801a      	strh	r2, [r3, #0]
 800af7c:	e2f1      	b.n	800b562 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800af7e:	463b      	mov	r3, r7
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	78db      	ldrb	r3, [r3, #3]
 800af84:	2b02      	cmp	r3, #2
 800af86:	f040 818f 	bne.w	800b2a8 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800af8a:	463b      	mov	r3, r7
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	785b      	ldrb	r3, [r3, #1]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d175      	bne.n	800b080 <USB_EPStartXfer+0xc5a>
 800af94:	1d3b      	adds	r3, r7, #4
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800af9c:	1d3b      	adds	r3, r7, #4
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	461a      	mov	r2, r3
 800afa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800afac:	4413      	add	r3, r2
 800afae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800afb2:	463b      	mov	r3, r7
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	00da      	lsls	r2, r3, #3
 800afba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800afbe:	4413      	add	r3, r2
 800afc0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800afc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800afc8:	463b      	mov	r3, r7
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	2b3e      	cmp	r3, #62	; 0x3e
 800afd0:	d91f      	bls.n	800b012 <USB_EPStartXfer+0xbec>
 800afd2:	463b      	mov	r3, r7
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	691b      	ldr	r3, [r3, #16]
 800afd8:	095b      	lsrs	r3, r3, #5
 800afda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800afde:	463b      	mov	r3, r7
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	f003 031f 	and.w	r3, r3, #31
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d104      	bne.n	800aff6 <USB_EPStartXfer+0xbd0>
 800afec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aff0:	3b01      	subs	r3, #1
 800aff2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800affa:	b29b      	uxth	r3, r3
 800affc:	029b      	lsls	r3, r3, #10
 800affe:	b29b      	uxth	r3, r3
 800b000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b008:	b29a      	uxth	r2, r3
 800b00a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b00e:	801a      	strh	r2, [r3, #0]
 800b010:	e05c      	b.n	800b0cc <USB_EPStartXfer+0xca6>
 800b012:	463b      	mov	r3, r7
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	691b      	ldr	r3, [r3, #16]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d116      	bne.n	800b04a <USB_EPStartXfer+0xc24>
 800b01c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b020:	881b      	ldrh	r3, [r3, #0]
 800b022:	b29b      	uxth	r3, r3
 800b024:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b028:	b29a      	uxth	r2, r3
 800b02a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b02e:	801a      	strh	r2, [r3, #0]
 800b030:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b034:	881b      	ldrh	r3, [r3, #0]
 800b036:	b29b      	uxth	r3, r3
 800b038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b03c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b040:	b29a      	uxth	r2, r3
 800b042:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b046:	801a      	strh	r2, [r3, #0]
 800b048:	e040      	b.n	800b0cc <USB_EPStartXfer+0xca6>
 800b04a:	463b      	mov	r3, r7
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	085b      	lsrs	r3, r3, #1
 800b052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b056:	463b      	mov	r3, r7
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	691b      	ldr	r3, [r3, #16]
 800b05c:	f003 0301 	and.w	r3, r3, #1
 800b060:	2b00      	cmp	r3, #0
 800b062:	d004      	beq.n	800b06e <USB_EPStartXfer+0xc48>
 800b064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b068:	3301      	adds	r3, #1
 800b06a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b06e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b072:	b29b      	uxth	r3, r3
 800b074:	029b      	lsls	r3, r3, #10
 800b076:	b29a      	uxth	r2, r3
 800b078:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b07c:	801a      	strh	r2, [r3, #0]
 800b07e:	e025      	b.n	800b0cc <USB_EPStartXfer+0xca6>
 800b080:	463b      	mov	r3, r7
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	785b      	ldrb	r3, [r3, #1]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d120      	bne.n	800b0cc <USB_EPStartXfer+0xca6>
 800b08a:	1d3b      	adds	r3, r7, #4
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b092:	1d3b      	adds	r3, r7, #4
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	461a      	mov	r2, r3
 800b09e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b0a2:	4413      	add	r3, r2
 800b0a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b0a8:	463b      	mov	r3, r7
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	00da      	lsls	r2, r3, #3
 800b0b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b0b4:	4413      	add	r3, r2
 800b0b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b0ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0be:	463b      	mov	r3, r7
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	691b      	ldr	r3, [r3, #16]
 800b0c4:	b29a      	uxth	r2, r3
 800b0c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b0ca:	801a      	strh	r2, [r3, #0]
 800b0cc:	1d3b      	adds	r3, r7, #4
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b0d4:	463b      	mov	r3, r7
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	785b      	ldrb	r3, [r3, #1]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d175      	bne.n	800b1ca <USB_EPStartXfer+0xda4>
 800b0de:	1d3b      	adds	r3, r7, #4
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b0e6:	1d3b      	adds	r3, r7, #4
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b0f6:	4413      	add	r3, r2
 800b0f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b0fc:	463b      	mov	r3, r7
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	00da      	lsls	r2, r3, #3
 800b104:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b108:	4413      	add	r3, r2
 800b10a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b10e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b112:	463b      	mov	r3, r7
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	2b3e      	cmp	r3, #62	; 0x3e
 800b11a:	d91f      	bls.n	800b15c <USB_EPStartXfer+0xd36>
 800b11c:	463b      	mov	r3, r7
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	095b      	lsrs	r3, r3, #5
 800b124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b128:	463b      	mov	r3, r7
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	691b      	ldr	r3, [r3, #16]
 800b12e:	f003 031f 	and.w	r3, r3, #31
 800b132:	2b00      	cmp	r3, #0
 800b134:	d104      	bne.n	800b140 <USB_EPStartXfer+0xd1a>
 800b136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b13a:	3b01      	subs	r3, #1
 800b13c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b144:	b29b      	uxth	r3, r3
 800b146:	029b      	lsls	r3, r3, #10
 800b148:	b29b      	uxth	r3, r3
 800b14a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b14e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b152:	b29a      	uxth	r2, r3
 800b154:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b158:	801a      	strh	r2, [r3, #0]
 800b15a:	e058      	b.n	800b20e <USB_EPStartXfer+0xde8>
 800b15c:	463b      	mov	r3, r7
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	691b      	ldr	r3, [r3, #16]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d116      	bne.n	800b194 <USB_EPStartXfer+0xd6e>
 800b166:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b16a:	881b      	ldrh	r3, [r3, #0]
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b172:	b29a      	uxth	r2, r3
 800b174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b178:	801a      	strh	r2, [r3, #0]
 800b17a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b17e:	881b      	ldrh	r3, [r3, #0]
 800b180:	b29b      	uxth	r3, r3
 800b182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b18a:	b29a      	uxth	r2, r3
 800b18c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b190:	801a      	strh	r2, [r3, #0]
 800b192:	e03c      	b.n	800b20e <USB_EPStartXfer+0xde8>
 800b194:	463b      	mov	r3, r7
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	691b      	ldr	r3, [r3, #16]
 800b19a:	085b      	lsrs	r3, r3, #1
 800b19c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b1a0:	463b      	mov	r3, r7
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	691b      	ldr	r3, [r3, #16]
 800b1a6:	f003 0301 	and.w	r3, r3, #1
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d004      	beq.n	800b1b8 <USB_EPStartXfer+0xd92>
 800b1ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b1b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	029b      	lsls	r3, r3, #10
 800b1c0:	b29a      	uxth	r2, r3
 800b1c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b1c6:	801a      	strh	r2, [r3, #0]
 800b1c8:	e021      	b.n	800b20e <USB_EPStartXfer+0xde8>
 800b1ca:	463b      	mov	r3, r7
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	785b      	ldrb	r3, [r3, #1]
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d11c      	bne.n	800b20e <USB_EPStartXfer+0xde8>
 800b1d4:	1d3b      	adds	r3, r7, #4
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	461a      	mov	r2, r3
 800b1e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b1e4:	4413      	add	r3, r2
 800b1e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b1ea:	463b      	mov	r3, r7
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	00da      	lsls	r2, r3, #3
 800b1f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b1f6:	4413      	add	r3, r2
 800b1f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b1fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b200:	463b      	mov	r3, r7
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	b29a      	uxth	r2, r3
 800b208:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b20c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b20e:	463b      	mov	r3, r7
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	69db      	ldr	r3, [r3, #28]
 800b214:	2b00      	cmp	r3, #0
 800b216:	f000 81a4 	beq.w	800b562 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b21a:	1d3b      	adds	r3, r7, #4
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	463b      	mov	r3, r7
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	4413      	add	r3, r2
 800b228:	881b      	ldrh	r3, [r3, #0]
 800b22a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b22e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b236:	2b00      	cmp	r3, #0
 800b238:	d005      	beq.n	800b246 <USB_EPStartXfer+0xe20>
 800b23a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b23e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b242:	2b00      	cmp	r3, #0
 800b244:	d10d      	bne.n	800b262 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b246:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b24a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b24e:	2b00      	cmp	r3, #0
 800b250:	f040 8187 	bne.w	800b562 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b254:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f040 8180 	bne.w	800b562 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b262:	1d3b      	adds	r3, r7, #4
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	463b      	mov	r3, r7
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	4413      	add	r3, r2
 800b270:	881b      	ldrh	r3, [r3, #0]
 800b272:	b29b      	uxth	r3, r3
 800b274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b27c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b280:	1d3b      	adds	r3, r7, #4
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	463b      	mov	r3, r7
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	441a      	add	r2, r3
 800b28e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b29a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b29e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	8013      	strh	r3, [r2, #0]
 800b2a6:	e15c      	b.n	800b562 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b2a8:	463b      	mov	r3, r7
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	78db      	ldrb	r3, [r3, #3]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	f040 8155 	bne.w	800b55e <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b2b4:	463b      	mov	r3, r7
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	699a      	ldr	r2, [r3, #24]
 800b2ba:	463b      	mov	r3, r7
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	691b      	ldr	r3, [r3, #16]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d90e      	bls.n	800b2e2 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 800b2c4:	463b      	mov	r3, r7
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b2ce:	463b      	mov	r3, r7
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	699a      	ldr	r2, [r3, #24]
 800b2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2d8:	1ad2      	subs	r2, r2, r3
 800b2da:	463b      	mov	r3, r7
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	619a      	str	r2, [r3, #24]
 800b2e0:	e008      	b.n	800b2f4 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 800b2e2:	463b      	mov	r3, r7
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	699b      	ldr	r3, [r3, #24]
 800b2e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b2ec:	463b      	mov	r3, r7
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b2f4:	463b      	mov	r3, r7
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	785b      	ldrb	r3, [r3, #1]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d16f      	bne.n	800b3de <USB_EPStartXfer+0xfb8>
 800b2fe:	1d3b      	adds	r3, r7, #4
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b306:	1d3b      	adds	r3, r7, #4
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b30e:	b29b      	uxth	r3, r3
 800b310:	461a      	mov	r2, r3
 800b312:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b316:	4413      	add	r3, r2
 800b318:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b31c:	463b      	mov	r3, r7
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	00da      	lsls	r2, r3, #3
 800b324:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b328:	4413      	add	r3, r2
 800b32a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b32e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b336:	2b3e      	cmp	r3, #62	; 0x3e
 800b338:	d91d      	bls.n	800b376 <USB_EPStartXfer+0xf50>
 800b33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b33e:	095b      	lsrs	r3, r3, #5
 800b340:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b348:	f003 031f 	and.w	r3, r3, #31
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d104      	bne.n	800b35a <USB_EPStartXfer+0xf34>
 800b350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b354:	3b01      	subs	r3, #1
 800b356:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b35a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b35e:	b29b      	uxth	r3, r3
 800b360:	029b      	lsls	r3, r3, #10
 800b362:	b29b      	uxth	r3, r3
 800b364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b36c:	b29a      	uxth	r2, r3
 800b36e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b372:	801a      	strh	r2, [r3, #0]
 800b374:	e058      	b.n	800b428 <USB_EPStartXfer+0x1002>
 800b376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d116      	bne.n	800b3ac <USB_EPStartXfer+0xf86>
 800b37e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b382:	881b      	ldrh	r3, [r3, #0]
 800b384:	b29b      	uxth	r3, r3
 800b386:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b38a:	b29a      	uxth	r2, r3
 800b38c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b390:	801a      	strh	r2, [r3, #0]
 800b392:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b396:	881b      	ldrh	r3, [r3, #0]
 800b398:	b29b      	uxth	r3, r3
 800b39a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b39e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3a2:	b29a      	uxth	r2, r3
 800b3a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3a8:	801a      	strh	r2, [r3, #0]
 800b3aa:	e03d      	b.n	800b428 <USB_EPStartXfer+0x1002>
 800b3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3b0:	085b      	lsrs	r3, r3, #1
 800b3b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b3b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ba:	f003 0301 	and.w	r3, r3, #1
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d004      	beq.n	800b3cc <USB_EPStartXfer+0xfa6>
 800b3c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b3cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	029b      	lsls	r3, r3, #10
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3da:	801a      	strh	r2, [r3, #0]
 800b3dc:	e024      	b.n	800b428 <USB_EPStartXfer+0x1002>
 800b3de:	463b      	mov	r3, r7
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	785b      	ldrb	r3, [r3, #1]
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d11f      	bne.n	800b428 <USB_EPStartXfer+0x1002>
 800b3e8:	1d3b      	adds	r3, r7, #4
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b3f0:	1d3b      	adds	r3, r7, #4
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b400:	4413      	add	r3, r2
 800b402:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b406:	463b      	mov	r3, r7
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	00da      	lsls	r2, r3, #3
 800b40e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b412:	4413      	add	r3, r2
 800b414:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b418:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b41c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b420:	b29a      	uxth	r2, r3
 800b422:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b426:	801a      	strh	r2, [r3, #0]
 800b428:	1d3b      	adds	r3, r7, #4
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b430:	463b      	mov	r3, r7
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	785b      	ldrb	r3, [r3, #1]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d16f      	bne.n	800b51a <USB_EPStartXfer+0x10f4>
 800b43a:	1d3b      	adds	r3, r7, #4
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b442:	1d3b      	adds	r3, r7, #4
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	461a      	mov	r2, r3
 800b44e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b452:	4413      	add	r3, r2
 800b454:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b458:	463b      	mov	r3, r7
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	00da      	lsls	r2, r3, #3
 800b460:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b464:	4413      	add	r3, r2
 800b466:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b46a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b472:	2b3e      	cmp	r3, #62	; 0x3e
 800b474:	d91d      	bls.n	800b4b2 <USB_EPStartXfer+0x108c>
 800b476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b47a:	095b      	lsrs	r3, r3, #5
 800b47c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b484:	f003 031f 	and.w	r3, r3, #31
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d104      	bne.n	800b496 <USB_EPStartXfer+0x1070>
 800b48c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b490:	3b01      	subs	r3, #1
 800b492:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b496:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	029b      	lsls	r3, r3, #10
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4a8:	b29a      	uxth	r2, r3
 800b4aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b4ae:	801a      	strh	r2, [r3, #0]
 800b4b0:	e057      	b.n	800b562 <USB_EPStartXfer+0x113c>
 800b4b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d116      	bne.n	800b4e8 <USB_EPStartXfer+0x10c2>
 800b4ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b4be:	881b      	ldrh	r3, [r3, #0]
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b4c6:	b29a      	uxth	r2, r3
 800b4c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b4cc:	801a      	strh	r2, [r3, #0]
 800b4ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b4d2:	881b      	ldrh	r3, [r3, #0]
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4de:	b29a      	uxth	r2, r3
 800b4e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b4e4:	801a      	strh	r2, [r3, #0]
 800b4e6:	e03c      	b.n	800b562 <USB_EPStartXfer+0x113c>
 800b4e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ec:	085b      	lsrs	r3, r3, #1
 800b4ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b4f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f6:	f003 0301 	and.w	r3, r3, #1
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d004      	beq.n	800b508 <USB_EPStartXfer+0x10e2>
 800b4fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b502:	3301      	adds	r3, #1
 800b504:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b508:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	029b      	lsls	r3, r3, #10
 800b510:	b29a      	uxth	r2, r3
 800b512:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b516:	801a      	strh	r2, [r3, #0]
 800b518:	e023      	b.n	800b562 <USB_EPStartXfer+0x113c>
 800b51a:	463b      	mov	r3, r7
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	785b      	ldrb	r3, [r3, #1]
 800b520:	2b01      	cmp	r3, #1
 800b522:	d11e      	bne.n	800b562 <USB_EPStartXfer+0x113c>
 800b524:	1d3b      	adds	r3, r7, #4
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	461a      	mov	r2, r3
 800b530:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b534:	4413      	add	r3, r2
 800b536:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b53a:	463b      	mov	r3, r7
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	00da      	lsls	r2, r3, #3
 800b542:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b546:	4413      	add	r3, r2
 800b548:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b54c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b554:	b29a      	uxth	r2, r3
 800b556:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b55a:	801a      	strh	r2, [r3, #0]
 800b55c:	e001      	b.n	800b562 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	e02e      	b.n	800b5c0 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b562:	1d3b      	adds	r3, r7, #4
 800b564:	681a      	ldr	r2, [r3, #0]
 800b566:	463b      	mov	r3, r7
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	4413      	add	r3, r2
 800b570:	881b      	ldrh	r3, [r3, #0]
 800b572:	b29b      	uxth	r3, r3
 800b574:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b57c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b580:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b584:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b588:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b58c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b590:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b594:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b598:	1d3b      	adds	r3, r7, #4
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	463b      	mov	r3, r7
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	441a      	add	r2, r3
 800b5a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b5aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b5ca:	b480      	push	{r7}
 800b5cc:	b085      	sub	sp, #20
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	785b      	ldrb	r3, [r3, #1]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d020      	beq.n	800b61e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b5dc:	687a      	ldr	r2, [r7, #4]
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	4413      	add	r3, r2
 800b5e6:	881b      	ldrh	r3, [r3, #0]
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5f2:	81bb      	strh	r3, [r7, #12]
 800b5f4:	89bb      	ldrh	r3, [r7, #12]
 800b5f6:	f083 0310 	eor.w	r3, r3, #16
 800b5fa:	81bb      	strh	r3, [r7, #12]
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	441a      	add	r2, r3
 800b606:	89bb      	ldrh	r3, [r7, #12]
 800b608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b60c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b618:	b29b      	uxth	r3, r3
 800b61a:	8013      	strh	r3, [r2, #0]
 800b61c:	e01f      	b.n	800b65e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	4413      	add	r3, r2
 800b628:	881b      	ldrh	r3, [r3, #0]
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b634:	81fb      	strh	r3, [r7, #14]
 800b636:	89fb      	ldrh	r3, [r7, #14]
 800b638:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b63c:	81fb      	strh	r3, [r7, #14]
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	441a      	add	r2, r3
 800b648:	89fb      	ldrh	r3, [r7, #14]
 800b64a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b64e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b65e:	2300      	movs	r3, #0
}
 800b660:	4618      	mov	r0, r3
 800b662:	3714      	adds	r7, #20
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b087      	sub	sp, #28
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	7b1b      	ldrb	r3, [r3, #12]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f040 809d 	bne.w	800b7ba <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	785b      	ldrb	r3, [r3, #1]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d04c      	beq.n	800b722 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	4413      	add	r3, r2
 800b692:	881b      	ldrh	r3, [r3, #0]
 800b694:	823b      	strh	r3, [r7, #16]
 800b696:	8a3b      	ldrh	r3, [r7, #16]
 800b698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d01b      	beq.n	800b6d8 <USB_EPClearStall+0x6c>
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	4413      	add	r3, r2
 800b6aa:	881b      	ldrh	r3, [r3, #0]
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6b6:	81fb      	strh	r3, [r7, #14]
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	441a      	add	r2, r3
 800b6c2:	89fb      	ldrh	r3, [r7, #14]
 800b6c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	78db      	ldrb	r3, [r3, #3]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d06c      	beq.n	800b7ba <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	4413      	add	r3, r2
 800b6ea:	881b      	ldrh	r3, [r3, #0]
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6f6:	81bb      	strh	r3, [r7, #12]
 800b6f8:	89bb      	ldrh	r3, [r7, #12]
 800b6fa:	f083 0320 	eor.w	r3, r3, #32
 800b6fe:	81bb      	strh	r3, [r7, #12]
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	441a      	add	r2, r3
 800b70a:	89bb      	ldrh	r3, [r7, #12]
 800b70c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	8013      	strh	r3, [r2, #0]
 800b720:	e04b      	b.n	800b7ba <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	4413      	add	r3, r2
 800b72c:	881b      	ldrh	r3, [r3, #0]
 800b72e:	82fb      	strh	r3, [r7, #22]
 800b730:	8afb      	ldrh	r3, [r7, #22]
 800b732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b736:	2b00      	cmp	r3, #0
 800b738:	d01b      	beq.n	800b772 <USB_EPClearStall+0x106>
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	4413      	add	r3, r2
 800b744:	881b      	ldrh	r3, [r3, #0]
 800b746:	b29b      	uxth	r3, r3
 800b748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b74c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b750:	82bb      	strh	r3, [r7, #20]
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	441a      	add	r2, r3
 800b75c:	8abb      	ldrh	r3, [r7, #20]
 800b75e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b76a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b76e:	b29b      	uxth	r3, r3
 800b770:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	4413      	add	r3, r2
 800b77c:	881b      	ldrh	r3, [r3, #0]
 800b77e:	b29b      	uxth	r3, r3
 800b780:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b788:	827b      	strh	r3, [r7, #18]
 800b78a:	8a7b      	ldrh	r3, [r7, #18]
 800b78c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b790:	827b      	strh	r3, [r7, #18]
 800b792:	8a7b      	ldrh	r3, [r7, #18]
 800b794:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b798:	827b      	strh	r3, [r7, #18]
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	441a      	add	r2, r3
 800b7a4:	8a7b      	ldrh	r3, [r7, #18]
 800b7a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	371c      	adds	r7, #28
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b7d4:	78fb      	ldrb	r3, [r7, #3]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d103      	bne.n	800b7e2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2280      	movs	r2, #128	; 0x80
 800b7de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b7e2:	2300      	movs	r3, #0
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	370c      	adds	r7, #12
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr

0800b7f0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b808:	b29a      	uxth	r2, r3
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b810:	2300      	movs	r3, #0
}
 800b812:	4618      	mov	r0, r3
 800b814:	370c      	adds	r7, #12
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr

0800b81e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b81e:	b480      	push	{r7}
 800b820:	b083      	sub	sp, #12
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800b832:	b29a      	uxth	r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b83a:	2300      	movs	r3, #0
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b856:	b29b      	uxth	r3, r3
 800b858:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b85a:	68fb      	ldr	r3, [r7, #12]
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3714      	adds	r7, #20
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	370c      	adds	r7, #12
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b880:	b480      	push	{r7}
 800b882:	b08b      	sub	sp, #44	; 0x2c
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	4611      	mov	r1, r2
 800b88c:	461a      	mov	r2, r3
 800b88e:	460b      	mov	r3, r1
 800b890:	80fb      	strh	r3, [r7, #6]
 800b892:	4613      	mov	r3, r2
 800b894:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b896:	88bb      	ldrh	r3, [r7, #4]
 800b898:	3301      	adds	r3, #1
 800b89a:	085b      	lsrs	r3, r3, #1
 800b89c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b8a6:	88fa      	ldrh	r2, [r7, #6]
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8b0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	627b      	str	r3, [r7, #36]	; 0x24
 800b8b6:	e01b      	b.n	800b8f0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	021b      	lsls	r3, r3, #8
 800b8c6:	b21a      	sxth	r2, r3
 800b8c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	b21b      	sxth	r3, r3
 800b8d0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b8d2:	6a3b      	ldr	r3, [r7, #32]
 800b8d4:	8a7a      	ldrh	r2, [r7, #18]
 800b8d6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b8d8:	6a3b      	ldr	r3, [r7, #32]
 800b8da:	3302      	adds	r3, #2
 800b8dc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b8e4:	69fb      	ldr	r3, [r7, #28]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	627b      	str	r3, [r7, #36]	; 0x24
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d1e0      	bne.n	800b8b8 <USB_WritePMA+0x38>
  }
}
 800b8f6:	bf00      	nop
 800b8f8:	bf00      	nop
 800b8fa:	372c      	adds	r7, #44	; 0x2c
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b904:	b480      	push	{r7}
 800b906:	b08b      	sub	sp, #44	; 0x2c
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	4611      	mov	r1, r2
 800b910:	461a      	mov	r2, r3
 800b912:	460b      	mov	r3, r1
 800b914:	80fb      	strh	r3, [r7, #6]
 800b916:	4613      	mov	r3, r2
 800b918:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b91a:	88bb      	ldrh	r3, [r7, #4]
 800b91c:	085b      	lsrs	r3, r3, #1
 800b91e:	b29b      	uxth	r3, r3
 800b920:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b92a:	88fa      	ldrh	r2, [r7, #6]
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	4413      	add	r3, r2
 800b930:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b934:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	627b      	str	r3, [r7, #36]	; 0x24
 800b93a:	e018      	b.n	800b96e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b93c:	6a3b      	ldr	r3, [r7, #32]
 800b93e:	881b      	ldrh	r3, [r3, #0]
 800b940:	b29b      	uxth	r3, r3
 800b942:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b944:	6a3b      	ldr	r3, [r7, #32]
 800b946:	3302      	adds	r3, #2
 800b948:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	b2da      	uxtb	r2, r3
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	3301      	adds	r3, #1
 800b956:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	0a1b      	lsrs	r3, r3, #8
 800b95c:	b2da      	uxtb	r2, r3
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	3301      	adds	r3, #1
 800b966:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96a:	3b01      	subs	r3, #1
 800b96c:	627b      	str	r3, [r7, #36]	; 0x24
 800b96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b970:	2b00      	cmp	r3, #0
 800b972:	d1e3      	bne.n	800b93c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b974:	88bb      	ldrh	r3, [r7, #4]
 800b976:	f003 0301 	and.w	r3, r3, #1
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d007      	beq.n	800b990 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b980:	6a3b      	ldr	r3, [r7, #32]
 800b982:	881b      	ldrh	r3, [r3, #0]
 800b984:	b29b      	uxth	r3, r3
 800b986:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	b2da      	uxtb	r2, r3
 800b98c:	69fb      	ldr	r3, [r7, #28]
 800b98e:	701a      	strb	r2, [r3, #0]
  }
}
 800b990:	bf00      	nop
 800b992:	372c      	adds	r7, #44	; 0x2c
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b9a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b9ac:	f002 f9d2 	bl	800dd54 <USBD_static_malloc>
 800b9b0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d105      	bne.n	800b9c4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b9c0:	2302      	movs	r3, #2
 800b9c2:	e066      	b.n	800ba92 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	68fa      	ldr	r2, [r7, #12]
 800b9c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	7c1b      	ldrb	r3, [r3, #16]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d119      	bne.n	800ba08 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b9d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9d8:	2202      	movs	r2, #2
 800b9da:	2181      	movs	r1, #129	; 0x81
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f001 ffbb 	bl	800d958 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b9e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9ec:	2202      	movs	r2, #2
 800b9ee:	2101      	movs	r1, #1
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f001 ffb1 	bl	800d958 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2210      	movs	r2, #16
 800ba02:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ba06:	e016      	b.n	800ba36 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ba08:	2340      	movs	r3, #64	; 0x40
 800ba0a:	2202      	movs	r2, #2
 800ba0c:	2181      	movs	r1, #129	; 0x81
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f001 ffa2 	bl	800d958 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ba1a:	2340      	movs	r3, #64	; 0x40
 800ba1c:	2202      	movs	r2, #2
 800ba1e:	2101      	movs	r1, #1
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f001 ff99 	bl	800d958 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2210      	movs	r2, #16
 800ba32:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ba36:	2308      	movs	r3, #8
 800ba38:	2203      	movs	r2, #3
 800ba3a:	2182      	movs	r1, #130	; 0x82
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f001 ff8b 	bl	800d958 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2201      	movs	r2, #1
 800ba46:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	7c1b      	ldrb	r3, [r3, #16]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d109      	bne.n	800ba80 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ba72:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba76:	2101      	movs	r1, #1
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f002 f8e9 	bl	800dc50 <USBD_LL_PrepareReceive>
 800ba7e:	e007      	b.n	800ba90 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ba86:	2340      	movs	r3, #64	; 0x40
 800ba88:	2101      	movs	r1, #1
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f002 f8e0 	bl	800dc50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b082      	sub	sp, #8
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
 800baa2:	460b      	mov	r3, r1
 800baa4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800baa6:	2181      	movs	r1, #129	; 0x81
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f001 ff93 	bl	800d9d4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2200      	movs	r2, #0
 800bab2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bab4:	2101      	movs	r1, #1
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f001 ff8c 	bl	800d9d4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bac4:	2182      	movs	r1, #130	; 0x82
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f001 ff84 	bl	800d9d4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d00e      	beq.n	800bb04 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800baf6:	4618      	mov	r0, r3
 800baf8:	f002 f93a 	bl	800dd70 <USBD_static_free>
    pdev->pClassData = NULL;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
	...

0800bb10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b086      	sub	sp, #24
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb20:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bb22:	2300      	movs	r3, #0
 800bb24:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bb26:	2300      	movs	r3, #0
 800bb28:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d101      	bne.n	800bb38 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bb34:	2303      	movs	r3, #3
 800bb36:	e0af      	b.n	800bc98 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d03f      	beq.n	800bbc4 <USBD_CDC_Setup+0xb4>
 800bb44:	2b20      	cmp	r3, #32
 800bb46:	f040 809f 	bne.w	800bc88 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	88db      	ldrh	r3, [r3, #6]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d02e      	beq.n	800bbb0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	b25b      	sxtb	r3, r3
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	da16      	bge.n	800bb8a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	683a      	ldr	r2, [r7, #0]
 800bb66:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bb68:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bb6a:	683a      	ldr	r2, [r7, #0]
 800bb6c:	88d2      	ldrh	r2, [r2, #6]
 800bb6e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	88db      	ldrh	r3, [r3, #6]
 800bb74:	2b07      	cmp	r3, #7
 800bb76:	bf28      	it	cs
 800bb78:	2307      	movcs	r3, #7
 800bb7a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	89fa      	ldrh	r2, [r7, #14]
 800bb80:	4619      	mov	r1, r3
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f001 facf 	bl	800d126 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800bb88:	e085      	b.n	800bc96 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	785a      	ldrb	r2, [r3, #1]
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	88db      	ldrh	r3, [r3, #6]
 800bb98:	b2da      	uxtb	r2, r3
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bba0:	6939      	ldr	r1, [r7, #16]
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	88db      	ldrh	r3, [r3, #6]
 800bba6:	461a      	mov	r2, r3
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f001 fae8 	bl	800d17e <USBD_CtlPrepareRx>
      break;
 800bbae:	e072      	b.n	800bc96 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	683a      	ldr	r2, [r7, #0]
 800bbba:	7850      	ldrb	r0, [r2, #1]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	6839      	ldr	r1, [r7, #0]
 800bbc0:	4798      	blx	r3
      break;
 800bbc2:	e068      	b.n	800bc96 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	785b      	ldrb	r3, [r3, #1]
 800bbc8:	2b0b      	cmp	r3, #11
 800bbca:	d852      	bhi.n	800bc72 <USBD_CDC_Setup+0x162>
 800bbcc:	a201      	add	r2, pc, #4	; (adr r2, 800bbd4 <USBD_CDC_Setup+0xc4>)
 800bbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd2:	bf00      	nop
 800bbd4:	0800bc05 	.word	0x0800bc05
 800bbd8:	0800bc81 	.word	0x0800bc81
 800bbdc:	0800bc73 	.word	0x0800bc73
 800bbe0:	0800bc73 	.word	0x0800bc73
 800bbe4:	0800bc73 	.word	0x0800bc73
 800bbe8:	0800bc73 	.word	0x0800bc73
 800bbec:	0800bc73 	.word	0x0800bc73
 800bbf0:	0800bc73 	.word	0x0800bc73
 800bbf4:	0800bc73 	.word	0x0800bc73
 800bbf8:	0800bc73 	.word	0x0800bc73
 800bbfc:	0800bc2f 	.word	0x0800bc2f
 800bc00:	0800bc59 	.word	0x0800bc59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	2b03      	cmp	r3, #3
 800bc0e:	d107      	bne.n	800bc20 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bc10:	f107 030a 	add.w	r3, r7, #10
 800bc14:	2202      	movs	r2, #2
 800bc16:	4619      	mov	r1, r3
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f001 fa84 	bl	800d126 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc1e:	e032      	b.n	800bc86 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bc20:	6839      	ldr	r1, [r7, #0]
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f001 fa0e 	bl	800d044 <USBD_CtlError>
            ret = USBD_FAIL;
 800bc28:	2303      	movs	r3, #3
 800bc2a:	75fb      	strb	r3, [r7, #23]
          break;
 800bc2c:	e02b      	b.n	800bc86 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	2b03      	cmp	r3, #3
 800bc38:	d107      	bne.n	800bc4a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bc3a:	f107 030d 	add.w	r3, r7, #13
 800bc3e:	2201      	movs	r2, #1
 800bc40:	4619      	mov	r1, r3
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f001 fa6f 	bl	800d126 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc48:	e01d      	b.n	800bc86 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bc4a:	6839      	ldr	r1, [r7, #0]
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f001 f9f9 	bl	800d044 <USBD_CtlError>
            ret = USBD_FAIL;
 800bc52:	2303      	movs	r3, #3
 800bc54:	75fb      	strb	r3, [r7, #23]
          break;
 800bc56:	e016      	b.n	800bc86 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	2b03      	cmp	r3, #3
 800bc62:	d00f      	beq.n	800bc84 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800bc64:	6839      	ldr	r1, [r7, #0]
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f001 f9ec 	bl	800d044 <USBD_CtlError>
            ret = USBD_FAIL;
 800bc6c:	2303      	movs	r3, #3
 800bc6e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bc70:	e008      	b.n	800bc84 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bc72:	6839      	ldr	r1, [r7, #0]
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f001 f9e5 	bl	800d044 <USBD_CtlError>
          ret = USBD_FAIL;
 800bc7a:	2303      	movs	r3, #3
 800bc7c:	75fb      	strb	r3, [r7, #23]
          break;
 800bc7e:	e002      	b.n	800bc86 <USBD_CDC_Setup+0x176>
          break;
 800bc80:	bf00      	nop
 800bc82:	e008      	b.n	800bc96 <USBD_CDC_Setup+0x186>
          break;
 800bc84:	bf00      	nop
      }
      break;
 800bc86:	e006      	b.n	800bc96 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800bc88:	6839      	ldr	r1, [r7, #0]
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f001 f9da 	bl	800d044 <USBD_CtlError>
      ret = USBD_FAIL;
 800bc90:	2303      	movs	r3, #3
 800bc92:	75fb      	strb	r3, [r7, #23]
      break;
 800bc94:	bf00      	nop
  }

  return (uint8_t)ret;
 800bc96:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3718      	adds	r7, #24
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	460b      	mov	r3, r1
 800bcaa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bcb2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d101      	bne.n	800bcc2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bcbe:	2303      	movs	r3, #3
 800bcc0:	e04f      	b.n	800bd62 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcc8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bcca:	78fa      	ldrb	r2, [r7, #3]
 800bccc:	6879      	ldr	r1, [r7, #4]
 800bcce:	4613      	mov	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4413      	add	r3, r2
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	440b      	add	r3, r1
 800bcd8:	3318      	adds	r3, #24
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d029      	beq.n	800bd34 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bce0:	78fa      	ldrb	r2, [r7, #3]
 800bce2:	6879      	ldr	r1, [r7, #4]
 800bce4:	4613      	mov	r3, r2
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	4413      	add	r3, r2
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	440b      	add	r3, r1
 800bcee:	3318      	adds	r3, #24
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	78f9      	ldrb	r1, [r7, #3]
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	440b      	add	r3, r1
 800bcfc:	00db      	lsls	r3, r3, #3
 800bcfe:	4403      	add	r3, r0
 800bd00:	333c      	adds	r3, #60	; 0x3c
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	fbb2 f1f3 	udiv	r1, r2, r3
 800bd08:	fb03 f301 	mul.w	r3, r3, r1
 800bd0c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d110      	bne.n	800bd34 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bd12:	78fa      	ldrb	r2, [r7, #3]
 800bd14:	6879      	ldr	r1, [r7, #4]
 800bd16:	4613      	mov	r3, r2
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4413      	add	r3, r2
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	440b      	add	r3, r1
 800bd20:	3318      	adds	r3, #24
 800bd22:	2200      	movs	r2, #0
 800bd24:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bd26:	78f9      	ldrb	r1, [r7, #3]
 800bd28:	2300      	movs	r3, #0
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f001 ff57 	bl	800dbe0 <USBD_LL_Transmit>
 800bd32:	e015      	b.n	800bd60 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	2200      	movs	r2, #0
 800bd38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd42:	691b      	ldr	r3, [r3, #16]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d00b      	beq.n	800bd60 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd4e:	691b      	ldr	r3, [r3, #16]
 800bd50:	68ba      	ldr	r2, [r7, #8]
 800bd52:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bd56:	68ba      	ldr	r2, [r7, #8]
 800bd58:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bd5c:	78fa      	ldrb	r2, [r7, #3]
 800bd5e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bd60:	2300      	movs	r3, #0
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3710      	adds	r7, #16
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}

0800bd6a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b084      	sub	sp, #16
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
 800bd72:	460b      	mov	r3, r1
 800bd74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd7c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d101      	bne.n	800bd8c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bd88:	2303      	movs	r3, #3
 800bd8a:	e015      	b.n	800bdb8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bd8c:	78fb      	ldrb	r3, [r7, #3]
 800bd8e:	4619      	mov	r1, r3
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f001 ff95 	bl	800dcc0 <USBD_LL_GetRxDataSize>
 800bd96:	4602      	mov	r2, r0
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	68fa      	ldr	r2, [r7, #12]
 800bda8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bdac:	68fa      	ldr	r2, [r7, #12]
 800bdae:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bdb2:	4611      	mov	r1, r2
 800bdb4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3710      	adds	r7, #16
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d101      	bne.n	800bdda <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800bdd6:	2303      	movs	r3, #3
 800bdd8:	e01b      	b.n	800be12 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d015      	beq.n	800be10 <USBD_CDC_EP0_RxReady+0x50>
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bdea:	2bff      	cmp	r3, #255	; 0xff
 800bdec:	d010      	beq.n	800be10 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bdfc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800be04:	b292      	uxth	r2, r2
 800be06:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	22ff      	movs	r2, #255	; 0xff
 800be0c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800be10:	2300      	movs	r3, #0
}
 800be12:	4618      	mov	r0, r3
 800be14:	3710      	adds	r7, #16
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
	...

0800be1c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b083      	sub	sp, #12
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2243      	movs	r2, #67	; 0x43
 800be28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800be2a:	4b03      	ldr	r3, [pc, #12]	; (800be38 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	370c      	adds	r7, #12
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr
 800be38:	20000094 	.word	0x20000094

0800be3c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b083      	sub	sp, #12
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2243      	movs	r2, #67	; 0x43
 800be48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800be4a:	4b03      	ldr	r3, [pc, #12]	; (800be58 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	370c      	adds	r7, #12
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr
 800be58:	20000050 	.word	0x20000050

0800be5c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2243      	movs	r2, #67	; 0x43
 800be68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800be6a:	4b03      	ldr	r3, [pc, #12]	; (800be78 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr
 800be78:	200000d8 	.word	0x200000d8

0800be7c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	220a      	movs	r2, #10
 800be88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800be8a:	4b03      	ldr	r3, [pc, #12]	; (800be98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr
 800be98:	2000000c 	.word	0x2000000c

0800be9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d101      	bne.n	800beb0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800beac:	2303      	movs	r3, #3
 800beae:	e004      	b.n	800beba <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	683a      	ldr	r2, [r7, #0]
 800beb4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800beb8:	2300      	movs	r3, #0
}
 800beba:	4618      	mov	r0, r3
 800bebc:	370c      	adds	r7, #12
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr

0800bec6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bec6:	b480      	push	{r7}
 800bec8:	b087      	sub	sp, #28
 800beca:	af00      	add	r7, sp, #0
 800becc:	60f8      	str	r0, [r7, #12]
 800bece:	60b9      	str	r1, [r7, #8]
 800bed0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bed8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d101      	bne.n	800bee4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bee0:	2303      	movs	r3, #3
 800bee2:	e008      	b.n	800bef6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	371c      	adds	r7, #28
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr

0800bf02 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bf02:	b480      	push	{r7}
 800bf04:	b085      	sub	sp, #20
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
 800bf0a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf12:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d101      	bne.n	800bf1e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800bf1a:	2303      	movs	r3, #3
 800bf1c:	e004      	b.n	800bf28 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	683a      	ldr	r2, [r7, #0]
 800bf22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3714      	adds	r7, #20
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf42:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bf44:	2301      	movs	r3, #1
 800bf46:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d101      	bne.n	800bf56 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bf52:	2303      	movs	r3, #3
 800bf54:	e01a      	b.n	800bf8c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d114      	bne.n	800bf8a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	2201      	movs	r2, #1
 800bf64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bf7e:	2181      	movs	r1, #129	; 0x81
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f001 fe2d 	bl	800dbe0 <USBD_LL_Transmit>

    ret = USBD_OK;
 800bf86:	2300      	movs	r3, #0
 800bf88:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bf8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3710      	adds	r7, #16
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfa2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d101      	bne.n	800bfb2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bfae:	2303      	movs	r3, #3
 800bfb0:	e016      	b.n	800bfe0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	7c1b      	ldrb	r3, [r3, #16]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d109      	bne.n	800bfce <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bfc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bfc4:	2101      	movs	r1, #1
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f001 fe42 	bl	800dc50 <USBD_LL_PrepareReceive>
 800bfcc:	e007      	b.n	800bfde <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bfd4:	2340      	movs	r3, #64	; 0x40
 800bfd6:	2101      	movs	r1, #1
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f001 fe39 	bl	800dc50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bfde:	2300      	movs	r3, #0
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3710      	adds	r7, #16
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b086      	sub	sp, #24
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	4613      	mov	r3, r2
 800bff4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d101      	bne.n	800c000 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bffc:	2303      	movs	r3, #3
 800bffe:	e01f      	b.n	800c040 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2200      	movs	r2, #0
 800c004:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2200      	movs	r2, #0
 800c00c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2200      	movs	r2, #0
 800c014:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d003      	beq.n	800c026 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	68ba      	ldr	r2, [r7, #8]
 800c022:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2201      	movs	r2, #1
 800c02a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	79fa      	ldrb	r2, [r7, #7]
 800c032:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f001 fbfb 	bl	800d830 <USBD_LL_Init>
 800c03a:	4603      	mov	r3, r0
 800c03c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c03e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c040:	4618      	mov	r0, r3
 800c042:	3718      	adds	r7, #24
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b084      	sub	sp, #16
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c052:	2300      	movs	r3, #0
 800c054:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d101      	bne.n	800c060 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c05c:	2303      	movs	r3, #3
 800c05e:	e016      	b.n	800c08e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	683a      	ldr	r2, [r7, #0]
 800c064:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c070:	2b00      	cmp	r3, #0
 800c072:	d00b      	beq.n	800c08c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c07c:	f107 020e 	add.w	r2, r7, #14
 800c080:	4610      	mov	r0, r2
 800c082:	4798      	blx	r3
 800c084:	4602      	mov	r2, r0
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3710      	adds	r7, #16
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}

0800c096 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c096:	b580      	push	{r7, lr}
 800c098:	b082      	sub	sp, #8
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f001 fc28 	bl	800d8f4 <USBD_LL_Start>
 800c0a4:	4603      	mov	r3, r0
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3708      	adds	r7, #8
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c0ae:	b480      	push	{r7}
 800c0b0:	b083      	sub	sp, #12
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0b6:	2300      	movs	r3, #0
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	370c      	adds	r7, #12
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c0d0:	2303      	movs	r3, #3
 800c0d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d009      	beq.n	800c0f2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	78fa      	ldrb	r2, [r7, #3]
 800c0e8:	4611      	mov	r1, r2
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	4798      	blx	r3
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3710      	adds	r7, #16
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	460b      	mov	r3, r1
 800c106:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d007      	beq.n	800c122 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	78fa      	ldrb	r2, [r7, #3]
 800c11c:	4611      	mov	r1, r2
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	4798      	blx	r3
  }

  return USBD_OK;
 800c122:	2300      	movs	r3, #0
}
 800c124:	4618      	mov	r0, r3
 800c126:	3708      	adds	r7, #8
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c13c:	6839      	ldr	r1, [r7, #0]
 800c13e:	4618      	mov	r0, r3
 800c140:	f000 ff46 	bl	800cfd0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2201      	movs	r2, #1
 800c148:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c152:	461a      	mov	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c160:	f003 031f 	and.w	r3, r3, #31
 800c164:	2b02      	cmp	r3, #2
 800c166:	d01a      	beq.n	800c19e <USBD_LL_SetupStage+0x72>
 800c168:	2b02      	cmp	r3, #2
 800c16a:	d822      	bhi.n	800c1b2 <USBD_LL_SetupStage+0x86>
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d002      	beq.n	800c176 <USBD_LL_SetupStage+0x4a>
 800c170:	2b01      	cmp	r3, #1
 800c172:	d00a      	beq.n	800c18a <USBD_LL_SetupStage+0x5e>
 800c174:	e01d      	b.n	800c1b2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c17c:	4619      	mov	r1, r3
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 f9ee 	bl	800c560 <USBD_StdDevReq>
 800c184:	4603      	mov	r3, r0
 800c186:	73fb      	strb	r3, [r7, #15]
      break;
 800c188:	e020      	b.n	800c1cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c190:	4619      	mov	r1, r3
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fa52 	bl	800c63c <USBD_StdItfReq>
 800c198:	4603      	mov	r3, r0
 800c19a:	73fb      	strb	r3, [r7, #15]
      break;
 800c19c:	e016      	b.n	800c1cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 fa91 	bl	800c6ce <USBD_StdEPReq>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	73fb      	strb	r3, [r7, #15]
      break;
 800c1b0:	e00c      	b.n	800c1cc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c1b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	4619      	mov	r1, r3
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f001 fc3d 	bl	800da40 <USBD_LL_StallEP>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	73fb      	strb	r3, [r7, #15]
      break;
 800c1ca:	bf00      	nop
  }

  return ret;
 800c1cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}

0800c1d6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c1d6:	b580      	push	{r7, lr}
 800c1d8:	b086      	sub	sp, #24
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	60f8      	str	r0, [r7, #12]
 800c1de:	460b      	mov	r3, r1
 800c1e0:	607a      	str	r2, [r7, #4]
 800c1e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c1e4:	7afb      	ldrb	r3, [r7, #11]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d138      	bne.n	800c25c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c1f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c1f8:	2b03      	cmp	r3, #3
 800c1fa:	d14a      	bne.n	800c292 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	689a      	ldr	r2, [r3, #8]
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	68db      	ldr	r3, [r3, #12]
 800c204:	429a      	cmp	r2, r3
 800c206:	d913      	bls.n	800c230 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	689a      	ldr	r2, [r3, #8]
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	1ad2      	subs	r2, r2, r3
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	68da      	ldr	r2, [r3, #12]
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	4293      	cmp	r3, r2
 800c220:	bf28      	it	cs
 800c222:	4613      	movcs	r3, r2
 800c224:	461a      	mov	r2, r3
 800c226:	6879      	ldr	r1, [r7, #4]
 800c228:	68f8      	ldr	r0, [r7, #12]
 800c22a:	f000 ffc5 	bl	800d1b8 <USBD_CtlContinueRx>
 800c22e:	e030      	b.n	800c292 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c236:	b2db      	uxtb	r3, r3
 800c238:	2b03      	cmp	r3, #3
 800c23a:	d10b      	bne.n	800c254 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c242:	691b      	ldr	r3, [r3, #16]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d005      	beq.n	800c254 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c24e:	691b      	ldr	r3, [r3, #16]
 800c250:	68f8      	ldr	r0, [r7, #12]
 800c252:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c254:	68f8      	ldr	r0, [r7, #12]
 800c256:	f000 ffc0 	bl	800d1da <USBD_CtlSendStatus>
 800c25a:	e01a      	b.n	800c292 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c262:	b2db      	uxtb	r3, r3
 800c264:	2b03      	cmp	r3, #3
 800c266:	d114      	bne.n	800c292 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c26e:	699b      	ldr	r3, [r3, #24]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d00e      	beq.n	800c292 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c27a:	699b      	ldr	r3, [r3, #24]
 800c27c:	7afa      	ldrb	r2, [r7, #11]
 800c27e:	4611      	mov	r1, r2
 800c280:	68f8      	ldr	r0, [r7, #12]
 800c282:	4798      	blx	r3
 800c284:	4603      	mov	r3, r0
 800c286:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c288:	7dfb      	ldrb	r3, [r7, #23]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d001      	beq.n	800c292 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c28e:	7dfb      	ldrb	r3, [r7, #23]
 800c290:	e000      	b.n	800c294 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c292:	2300      	movs	r3, #0
}
 800c294:	4618      	mov	r0, r3
 800c296:	3718      	adds	r7, #24
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b086      	sub	sp, #24
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	607a      	str	r2, [r7, #4]
 800c2a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c2aa:	7afb      	ldrb	r3, [r7, #11]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d16b      	bne.n	800c388 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	3314      	adds	r3, #20
 800c2b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d156      	bne.n	800c36e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	689a      	ldr	r2, [r3, #8]
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d914      	bls.n	800c2f6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	689a      	ldr	r2, [r3, #8]
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	1ad2      	subs	r2, r2, r3
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	461a      	mov	r2, r3
 800c2e0:	6879      	ldr	r1, [r7, #4]
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f000 ff3a 	bl	800d15c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	2100      	movs	r1, #0
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	f001 fcae 	bl	800dc50 <USBD_LL_PrepareReceive>
 800c2f4:	e03b      	b.n	800c36e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	68da      	ldr	r2, [r3, #12]
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	689b      	ldr	r3, [r3, #8]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d11c      	bne.n	800c33c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	685a      	ldr	r2, [r3, #4]
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d316      	bcc.n	800c33c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	685a      	ldr	r2, [r3, #4]
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c318:	429a      	cmp	r2, r3
 800c31a:	d20f      	bcs.n	800c33c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c31c:	2200      	movs	r2, #0
 800c31e:	2100      	movs	r1, #0
 800c320:	68f8      	ldr	r0, [r7, #12]
 800c322:	f000 ff1b 	bl	800d15c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2200      	movs	r2, #0
 800c32a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c32e:	2300      	movs	r3, #0
 800c330:	2200      	movs	r2, #0
 800c332:	2100      	movs	r1, #0
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	f001 fc8b 	bl	800dc50 <USBD_LL_PrepareReceive>
 800c33a:	e018      	b.n	800c36e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c342:	b2db      	uxtb	r3, r3
 800c344:	2b03      	cmp	r3, #3
 800c346:	d10b      	bne.n	800c360 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c34e:	68db      	ldr	r3, [r3, #12]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d005      	beq.n	800c360 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c360:	2180      	movs	r1, #128	; 0x80
 800c362:	68f8      	ldr	r0, [r7, #12]
 800c364:	f001 fb6c 	bl	800da40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c368:	68f8      	ldr	r0, [r7, #12]
 800c36a:	f000 ff49 	bl	800d200 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c374:	2b01      	cmp	r3, #1
 800c376:	d122      	bne.n	800c3be <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f7ff fe98 	bl	800c0ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2200      	movs	r2, #0
 800c382:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c386:	e01a      	b.n	800c3be <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	2b03      	cmp	r3, #3
 800c392:	d114      	bne.n	800c3be <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c39a:	695b      	ldr	r3, [r3, #20]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d00e      	beq.n	800c3be <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3a6:	695b      	ldr	r3, [r3, #20]
 800c3a8:	7afa      	ldrb	r2, [r7, #11]
 800c3aa:	4611      	mov	r1, r2
 800c3ac:	68f8      	ldr	r0, [r7, #12]
 800c3ae:	4798      	blx	r3
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c3b4:	7dfb      	ldrb	r3, [r7, #23]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d001      	beq.n	800c3be <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c3ba:	7dfb      	ldrb	r3, [r7, #23]
 800c3bc:	e000      	b.n	800c3c0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c3be:	2300      	movs	r3, #0
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3718      	adds	r7, #24
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d101      	bne.n	800c3fc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c3f8:	2303      	movs	r3, #3
 800c3fa:	e02f      	b.n	800c45c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c402:	2b00      	cmp	r3, #0
 800c404:	d00f      	beq.n	800c426 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d009      	beq.n	800c426 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	6852      	ldr	r2, [r2, #4]
 800c41e:	b2d2      	uxtb	r2, r2
 800c420:	4611      	mov	r1, r2
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c426:	2340      	movs	r3, #64	; 0x40
 800c428:	2200      	movs	r2, #0
 800c42a:	2100      	movs	r1, #0
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f001 fa93 	bl	800d958 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2201      	movs	r2, #1
 800c436:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2240      	movs	r2, #64	; 0x40
 800c43e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c442:	2340      	movs	r3, #64	; 0x40
 800c444:	2200      	movs	r2, #0
 800c446:	2180      	movs	r1, #128	; 0x80
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f001 fa85 	bl	800d958 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2201      	movs	r2, #1
 800c452:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2240      	movs	r2, #64	; 0x40
 800c458:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c45a:	2300      	movs	r3, #0
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3708      	adds	r7, #8
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	460b      	mov	r3, r1
 800c46e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	78fa      	ldrb	r2, [r7, #3]
 800c474:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c476:	2300      	movs	r3, #0
}
 800c478:	4618      	mov	r0, r3
 800c47a:	370c      	adds	r7, #12
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr

0800c484 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c484:	b480      	push	{r7}
 800c486:	b083      	sub	sp, #12
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c492:	b2da      	uxtb	r2, r3
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2204      	movs	r2, #4
 800c49e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c4a2:	2300      	movs	r3, #0
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b083      	sub	sp, #12
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	2b04      	cmp	r3, #4
 800c4c2:	d106      	bne.n	800c4d2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c4ca:	b2da      	uxtb	r2, r3
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c4d2:	2300      	movs	r3, #0
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d101      	bne.n	800c4f6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c4f2:	2303      	movs	r3, #3
 800c4f4:	e012      	b.n	800c51c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	2b03      	cmp	r3, #3
 800c500:	d10b      	bne.n	800c51a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c508:	69db      	ldr	r3, [r3, #28]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d005      	beq.n	800c51a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c514:	69db      	ldr	r3, [r3, #28]
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3708      	adds	r7, #8
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c524:	b480      	push	{r7}
 800c526:	b087      	sub	sp, #28
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	3301      	adds	r3, #1
 800c53a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c542:	8a3b      	ldrh	r3, [r7, #16]
 800c544:	021b      	lsls	r3, r3, #8
 800c546:	b21a      	sxth	r2, r3
 800c548:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c54c:	4313      	orrs	r3, r2
 800c54e:	b21b      	sxth	r3, r3
 800c550:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c552:	89fb      	ldrh	r3, [r7, #14]
}
 800c554:	4618      	mov	r0, r3
 800c556:	371c      	adds	r7, #28
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr

0800c560 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c56a:	2300      	movs	r3, #0
 800c56c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c576:	2b40      	cmp	r3, #64	; 0x40
 800c578:	d005      	beq.n	800c586 <USBD_StdDevReq+0x26>
 800c57a:	2b40      	cmp	r3, #64	; 0x40
 800c57c:	d853      	bhi.n	800c626 <USBD_StdDevReq+0xc6>
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d00b      	beq.n	800c59a <USBD_StdDevReq+0x3a>
 800c582:	2b20      	cmp	r3, #32
 800c584:	d14f      	bne.n	800c626 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	6839      	ldr	r1, [r7, #0]
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	4798      	blx	r3
 800c594:	4603      	mov	r3, r0
 800c596:	73fb      	strb	r3, [r7, #15]
      break;
 800c598:	e04a      	b.n	800c630 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	785b      	ldrb	r3, [r3, #1]
 800c59e:	2b09      	cmp	r3, #9
 800c5a0:	d83b      	bhi.n	800c61a <USBD_StdDevReq+0xba>
 800c5a2:	a201      	add	r2, pc, #4	; (adr r2, 800c5a8 <USBD_StdDevReq+0x48>)
 800c5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5a8:	0800c5fd 	.word	0x0800c5fd
 800c5ac:	0800c611 	.word	0x0800c611
 800c5b0:	0800c61b 	.word	0x0800c61b
 800c5b4:	0800c607 	.word	0x0800c607
 800c5b8:	0800c61b 	.word	0x0800c61b
 800c5bc:	0800c5db 	.word	0x0800c5db
 800c5c0:	0800c5d1 	.word	0x0800c5d1
 800c5c4:	0800c61b 	.word	0x0800c61b
 800c5c8:	0800c5f3 	.word	0x0800c5f3
 800c5cc:	0800c5e5 	.word	0x0800c5e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c5d0:	6839      	ldr	r1, [r7, #0]
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 f9de 	bl	800c994 <USBD_GetDescriptor>
          break;
 800c5d8:	e024      	b.n	800c624 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c5da:	6839      	ldr	r1, [r7, #0]
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f000 fb6d 	bl	800ccbc <USBD_SetAddress>
          break;
 800c5e2:	e01f      	b.n	800c624 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c5e4:	6839      	ldr	r1, [r7, #0]
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 fbac 	bl	800cd44 <USBD_SetConfig>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	73fb      	strb	r3, [r7, #15]
          break;
 800c5f0:	e018      	b.n	800c624 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c5f2:	6839      	ldr	r1, [r7, #0]
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 fc4b 	bl	800ce90 <USBD_GetConfig>
          break;
 800c5fa:	e013      	b.n	800c624 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c5fc:	6839      	ldr	r1, [r7, #0]
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 fc7c 	bl	800cefc <USBD_GetStatus>
          break;
 800c604:	e00e      	b.n	800c624 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c606:	6839      	ldr	r1, [r7, #0]
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 fcab 	bl	800cf64 <USBD_SetFeature>
          break;
 800c60e:	e009      	b.n	800c624 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c610:	6839      	ldr	r1, [r7, #0]
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 fcba 	bl	800cf8c <USBD_ClrFeature>
          break;
 800c618:	e004      	b.n	800c624 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c61a:	6839      	ldr	r1, [r7, #0]
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f000 fd11 	bl	800d044 <USBD_CtlError>
          break;
 800c622:	bf00      	nop
      }
      break;
 800c624:	e004      	b.n	800c630 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c626:	6839      	ldr	r1, [r7, #0]
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 fd0b 	bl	800d044 <USBD_CtlError>
      break;
 800c62e:	bf00      	nop
  }

  return ret;
 800c630:	7bfb      	ldrb	r3, [r7, #15]
}
 800c632:	4618      	mov	r0, r3
 800c634:	3710      	adds	r7, #16
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop

0800c63c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c646:	2300      	movs	r3, #0
 800c648:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c652:	2b40      	cmp	r3, #64	; 0x40
 800c654:	d005      	beq.n	800c662 <USBD_StdItfReq+0x26>
 800c656:	2b40      	cmp	r3, #64	; 0x40
 800c658:	d82f      	bhi.n	800c6ba <USBD_StdItfReq+0x7e>
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d001      	beq.n	800c662 <USBD_StdItfReq+0x26>
 800c65e:	2b20      	cmp	r3, #32
 800c660:	d12b      	bne.n	800c6ba <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	3b01      	subs	r3, #1
 800c66c:	2b02      	cmp	r3, #2
 800c66e:	d81d      	bhi.n	800c6ac <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	889b      	ldrh	r3, [r3, #4]
 800c674:	b2db      	uxtb	r3, r3
 800c676:	2b01      	cmp	r3, #1
 800c678:	d813      	bhi.n	800c6a2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c680:	689b      	ldr	r3, [r3, #8]
 800c682:	6839      	ldr	r1, [r7, #0]
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	4798      	blx	r3
 800c688:	4603      	mov	r3, r0
 800c68a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	88db      	ldrh	r3, [r3, #6]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d110      	bne.n	800c6b6 <USBD_StdItfReq+0x7a>
 800c694:	7bfb      	ldrb	r3, [r7, #15]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d10d      	bne.n	800c6b6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 fd9d 	bl	800d1da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c6a0:	e009      	b.n	800c6b6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c6a2:	6839      	ldr	r1, [r7, #0]
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 fccd 	bl	800d044 <USBD_CtlError>
          break;
 800c6aa:	e004      	b.n	800c6b6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c6ac:	6839      	ldr	r1, [r7, #0]
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 fcc8 	bl	800d044 <USBD_CtlError>
          break;
 800c6b4:	e000      	b.n	800c6b8 <USBD_StdItfReq+0x7c>
          break;
 800c6b6:	bf00      	nop
      }
      break;
 800c6b8:	e004      	b.n	800c6c4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c6ba:	6839      	ldr	r1, [r7, #0]
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 fcc1 	bl	800d044 <USBD_CtlError>
      break;
 800c6c2:	bf00      	nop
  }

  return ret;
 800c6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3710      	adds	r7, #16
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}

0800c6ce <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6ce:	b580      	push	{r7, lr}
 800c6d0:	b084      	sub	sp, #16
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
 800c6d6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	889b      	ldrh	r3, [r3, #4]
 800c6e0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c6ea:	2b40      	cmp	r3, #64	; 0x40
 800c6ec:	d007      	beq.n	800c6fe <USBD_StdEPReq+0x30>
 800c6ee:	2b40      	cmp	r3, #64	; 0x40
 800c6f0:	f200 8145 	bhi.w	800c97e <USBD_StdEPReq+0x2b0>
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d00c      	beq.n	800c712 <USBD_StdEPReq+0x44>
 800c6f8:	2b20      	cmp	r3, #32
 800c6fa:	f040 8140 	bne.w	800c97e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c704:	689b      	ldr	r3, [r3, #8]
 800c706:	6839      	ldr	r1, [r7, #0]
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	4798      	blx	r3
 800c70c:	4603      	mov	r3, r0
 800c70e:	73fb      	strb	r3, [r7, #15]
      break;
 800c710:	e13a      	b.n	800c988 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	785b      	ldrb	r3, [r3, #1]
 800c716:	2b03      	cmp	r3, #3
 800c718:	d007      	beq.n	800c72a <USBD_StdEPReq+0x5c>
 800c71a:	2b03      	cmp	r3, #3
 800c71c:	f300 8129 	bgt.w	800c972 <USBD_StdEPReq+0x2a4>
 800c720:	2b00      	cmp	r3, #0
 800c722:	d07f      	beq.n	800c824 <USBD_StdEPReq+0x156>
 800c724:	2b01      	cmp	r3, #1
 800c726:	d03c      	beq.n	800c7a2 <USBD_StdEPReq+0xd4>
 800c728:	e123      	b.n	800c972 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c730:	b2db      	uxtb	r3, r3
 800c732:	2b02      	cmp	r3, #2
 800c734:	d002      	beq.n	800c73c <USBD_StdEPReq+0x6e>
 800c736:	2b03      	cmp	r3, #3
 800c738:	d016      	beq.n	800c768 <USBD_StdEPReq+0x9a>
 800c73a:	e02c      	b.n	800c796 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c73c:	7bbb      	ldrb	r3, [r7, #14]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d00d      	beq.n	800c75e <USBD_StdEPReq+0x90>
 800c742:	7bbb      	ldrb	r3, [r7, #14]
 800c744:	2b80      	cmp	r3, #128	; 0x80
 800c746:	d00a      	beq.n	800c75e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c748:	7bbb      	ldrb	r3, [r7, #14]
 800c74a:	4619      	mov	r1, r3
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f001 f977 	bl	800da40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c752:	2180      	movs	r1, #128	; 0x80
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f001 f973 	bl	800da40 <USBD_LL_StallEP>
 800c75a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c75c:	e020      	b.n	800c7a0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c75e:	6839      	ldr	r1, [r7, #0]
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f000 fc6f 	bl	800d044 <USBD_CtlError>
              break;
 800c766:	e01b      	b.n	800c7a0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	885b      	ldrh	r3, [r3, #2]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d10e      	bne.n	800c78e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c770:	7bbb      	ldrb	r3, [r7, #14]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d00b      	beq.n	800c78e <USBD_StdEPReq+0xc0>
 800c776:	7bbb      	ldrb	r3, [r7, #14]
 800c778:	2b80      	cmp	r3, #128	; 0x80
 800c77a:	d008      	beq.n	800c78e <USBD_StdEPReq+0xc0>
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	88db      	ldrh	r3, [r3, #6]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d104      	bne.n	800c78e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c784:	7bbb      	ldrb	r3, [r7, #14]
 800c786:	4619      	mov	r1, r3
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f001 f959 	bl	800da40 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 fd23 	bl	800d1da <USBD_CtlSendStatus>

              break;
 800c794:	e004      	b.n	800c7a0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c796:	6839      	ldr	r1, [r7, #0]
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 fc53 	bl	800d044 <USBD_CtlError>
              break;
 800c79e:	bf00      	nop
          }
          break;
 800c7a0:	e0ec      	b.n	800c97c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7a8:	b2db      	uxtb	r3, r3
 800c7aa:	2b02      	cmp	r3, #2
 800c7ac:	d002      	beq.n	800c7b4 <USBD_StdEPReq+0xe6>
 800c7ae:	2b03      	cmp	r3, #3
 800c7b0:	d016      	beq.n	800c7e0 <USBD_StdEPReq+0x112>
 800c7b2:	e030      	b.n	800c816 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c7b4:	7bbb      	ldrb	r3, [r7, #14]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d00d      	beq.n	800c7d6 <USBD_StdEPReq+0x108>
 800c7ba:	7bbb      	ldrb	r3, [r7, #14]
 800c7bc:	2b80      	cmp	r3, #128	; 0x80
 800c7be:	d00a      	beq.n	800c7d6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c7c0:	7bbb      	ldrb	r3, [r7, #14]
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f001 f93b 	bl	800da40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7ca:	2180      	movs	r1, #128	; 0x80
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f001 f937 	bl	800da40 <USBD_LL_StallEP>
 800c7d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c7d4:	e025      	b.n	800c822 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c7d6:	6839      	ldr	r1, [r7, #0]
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 fc33 	bl	800d044 <USBD_CtlError>
              break;
 800c7de:	e020      	b.n	800c822 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	885b      	ldrh	r3, [r3, #2]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d11b      	bne.n	800c820 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c7e8:	7bbb      	ldrb	r3, [r7, #14]
 800c7ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d004      	beq.n	800c7fc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c7f2:	7bbb      	ldrb	r3, [r7, #14]
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f001 f958 	bl	800daac <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 fcec 	bl	800d1da <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c808:	689b      	ldr	r3, [r3, #8]
 800c80a:	6839      	ldr	r1, [r7, #0]
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	4798      	blx	r3
 800c810:	4603      	mov	r3, r0
 800c812:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c814:	e004      	b.n	800c820 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c816:	6839      	ldr	r1, [r7, #0]
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 fc13 	bl	800d044 <USBD_CtlError>
              break;
 800c81e:	e000      	b.n	800c822 <USBD_StdEPReq+0x154>
              break;
 800c820:	bf00      	nop
          }
          break;
 800c822:	e0ab      	b.n	800c97c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c82a:	b2db      	uxtb	r3, r3
 800c82c:	2b02      	cmp	r3, #2
 800c82e:	d002      	beq.n	800c836 <USBD_StdEPReq+0x168>
 800c830:	2b03      	cmp	r3, #3
 800c832:	d032      	beq.n	800c89a <USBD_StdEPReq+0x1cc>
 800c834:	e097      	b.n	800c966 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c836:	7bbb      	ldrb	r3, [r7, #14]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d007      	beq.n	800c84c <USBD_StdEPReq+0x17e>
 800c83c:	7bbb      	ldrb	r3, [r7, #14]
 800c83e:	2b80      	cmp	r3, #128	; 0x80
 800c840:	d004      	beq.n	800c84c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c842:	6839      	ldr	r1, [r7, #0]
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 fbfd 	bl	800d044 <USBD_CtlError>
                break;
 800c84a:	e091      	b.n	800c970 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c84c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c850:	2b00      	cmp	r3, #0
 800c852:	da0b      	bge.n	800c86c <USBD_StdEPReq+0x19e>
 800c854:	7bbb      	ldrb	r3, [r7, #14]
 800c856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c85a:	4613      	mov	r3, r2
 800c85c:	009b      	lsls	r3, r3, #2
 800c85e:	4413      	add	r3, r2
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	3310      	adds	r3, #16
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	4413      	add	r3, r2
 800c868:	3304      	adds	r3, #4
 800c86a:	e00b      	b.n	800c884 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c86c:	7bbb      	ldrb	r3, [r7, #14]
 800c86e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c872:	4613      	mov	r3, r2
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	4413      	add	r3, r2
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	4413      	add	r3, r2
 800c882:	3304      	adds	r3, #4
 800c884:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	2200      	movs	r2, #0
 800c88a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	2202      	movs	r2, #2
 800c890:	4619      	mov	r1, r3
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 fc47 	bl	800d126 <USBD_CtlSendData>
              break;
 800c898:	e06a      	b.n	800c970 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c89a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	da11      	bge.n	800c8c6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c8a2:	7bbb      	ldrb	r3, [r7, #14]
 800c8a4:	f003 020f 	and.w	r2, r3, #15
 800c8a8:	6879      	ldr	r1, [r7, #4]
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	4413      	add	r3, r2
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	440b      	add	r3, r1
 800c8b4:	3324      	adds	r3, #36	; 0x24
 800c8b6:	881b      	ldrh	r3, [r3, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d117      	bne.n	800c8ec <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c8bc:	6839      	ldr	r1, [r7, #0]
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 fbc0 	bl	800d044 <USBD_CtlError>
                  break;
 800c8c4:	e054      	b.n	800c970 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c8c6:	7bbb      	ldrb	r3, [r7, #14]
 800c8c8:	f003 020f 	and.w	r2, r3, #15
 800c8cc:	6879      	ldr	r1, [r7, #4]
 800c8ce:	4613      	mov	r3, r2
 800c8d0:	009b      	lsls	r3, r3, #2
 800c8d2:	4413      	add	r3, r2
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	440b      	add	r3, r1
 800c8d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c8dc:	881b      	ldrh	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d104      	bne.n	800c8ec <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c8e2:	6839      	ldr	r1, [r7, #0]
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f000 fbad 	bl	800d044 <USBD_CtlError>
                  break;
 800c8ea:	e041      	b.n	800c970 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c8ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	da0b      	bge.n	800c90c <USBD_StdEPReq+0x23e>
 800c8f4:	7bbb      	ldrb	r3, [r7, #14]
 800c8f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c8fa:	4613      	mov	r3, r2
 800c8fc:	009b      	lsls	r3, r3, #2
 800c8fe:	4413      	add	r3, r2
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	3310      	adds	r3, #16
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	4413      	add	r3, r2
 800c908:	3304      	adds	r3, #4
 800c90a:	e00b      	b.n	800c924 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c90c:	7bbb      	ldrb	r3, [r7, #14]
 800c90e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c912:	4613      	mov	r3, r2
 800c914:	009b      	lsls	r3, r3, #2
 800c916:	4413      	add	r3, r2
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	4413      	add	r3, r2
 800c922:	3304      	adds	r3, #4
 800c924:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c926:	7bbb      	ldrb	r3, [r7, #14]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d002      	beq.n	800c932 <USBD_StdEPReq+0x264>
 800c92c:	7bbb      	ldrb	r3, [r7, #14]
 800c92e:	2b80      	cmp	r3, #128	; 0x80
 800c930:	d103      	bne.n	800c93a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	2200      	movs	r2, #0
 800c936:	601a      	str	r2, [r3, #0]
 800c938:	e00e      	b.n	800c958 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c93a:	7bbb      	ldrb	r3, [r7, #14]
 800c93c:	4619      	mov	r1, r3
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f001 f8ea 	bl	800db18 <USBD_LL_IsStallEP>
 800c944:	4603      	mov	r3, r0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d003      	beq.n	800c952 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	2201      	movs	r2, #1
 800c94e:	601a      	str	r2, [r3, #0]
 800c950:	e002      	b.n	800c958 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	2200      	movs	r2, #0
 800c956:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	2202      	movs	r2, #2
 800c95c:	4619      	mov	r1, r3
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 fbe1 	bl	800d126 <USBD_CtlSendData>
              break;
 800c964:	e004      	b.n	800c970 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c966:	6839      	ldr	r1, [r7, #0]
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 fb6b 	bl	800d044 <USBD_CtlError>
              break;
 800c96e:	bf00      	nop
          }
          break;
 800c970:	e004      	b.n	800c97c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c972:	6839      	ldr	r1, [r7, #0]
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 fb65 	bl	800d044 <USBD_CtlError>
          break;
 800c97a:	bf00      	nop
      }
      break;
 800c97c:	e004      	b.n	800c988 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c97e:	6839      	ldr	r1, [r7, #0]
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 fb5f 	bl	800d044 <USBD_CtlError>
      break;
 800c986:	bf00      	nop
  }

  return ret;
 800c988:	7bfb      	ldrb	r3, [r7, #15]
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3710      	adds	r7, #16
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
	...

0800c994 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	885b      	ldrh	r3, [r3, #2]
 800c9ae:	0a1b      	lsrs	r3, r3, #8
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	3b01      	subs	r3, #1
 800c9b4:	2b0e      	cmp	r3, #14
 800c9b6:	f200 8152 	bhi.w	800cc5e <USBD_GetDescriptor+0x2ca>
 800c9ba:	a201      	add	r2, pc, #4	; (adr r2, 800c9c0 <USBD_GetDescriptor+0x2c>)
 800c9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c0:	0800ca31 	.word	0x0800ca31
 800c9c4:	0800ca49 	.word	0x0800ca49
 800c9c8:	0800ca89 	.word	0x0800ca89
 800c9cc:	0800cc5f 	.word	0x0800cc5f
 800c9d0:	0800cc5f 	.word	0x0800cc5f
 800c9d4:	0800cbff 	.word	0x0800cbff
 800c9d8:	0800cc2b 	.word	0x0800cc2b
 800c9dc:	0800cc5f 	.word	0x0800cc5f
 800c9e0:	0800cc5f 	.word	0x0800cc5f
 800c9e4:	0800cc5f 	.word	0x0800cc5f
 800c9e8:	0800cc5f 	.word	0x0800cc5f
 800c9ec:	0800cc5f 	.word	0x0800cc5f
 800c9f0:	0800cc5f 	.word	0x0800cc5f
 800c9f4:	0800cc5f 	.word	0x0800cc5f
 800c9f8:	0800c9fd 	.word	0x0800c9fd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca02:	69db      	ldr	r3, [r3, #28]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d00b      	beq.n	800ca20 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca0e:	69db      	ldr	r3, [r3, #28]
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	7c12      	ldrb	r2, [r2, #16]
 800ca14:	f107 0108 	add.w	r1, r7, #8
 800ca18:	4610      	mov	r0, r2
 800ca1a:	4798      	blx	r3
 800ca1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca1e:	e126      	b.n	800cc6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ca20:	6839      	ldr	r1, [r7, #0]
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 fb0e 	bl	800d044 <USBD_CtlError>
        err++;
 800ca28:	7afb      	ldrb	r3, [r7, #11]
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	72fb      	strb	r3, [r7, #11]
      break;
 800ca2e:	e11e      	b.n	800cc6e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	7c12      	ldrb	r2, [r2, #16]
 800ca3c:	f107 0108 	add.w	r1, r7, #8
 800ca40:	4610      	mov	r0, r2
 800ca42:	4798      	blx	r3
 800ca44:	60f8      	str	r0, [r7, #12]
      break;
 800ca46:	e112      	b.n	800cc6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	7c1b      	ldrb	r3, [r3, #16]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d10d      	bne.n	800ca6c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca58:	f107 0208 	add.w	r2, r7, #8
 800ca5c:	4610      	mov	r0, r2
 800ca5e:	4798      	blx	r3
 800ca60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	3301      	adds	r3, #1
 800ca66:	2202      	movs	r2, #2
 800ca68:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ca6a:	e100      	b.n	800cc6e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca74:	f107 0208 	add.w	r2, r7, #8
 800ca78:	4610      	mov	r0, r2
 800ca7a:	4798      	blx	r3
 800ca7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	3301      	adds	r3, #1
 800ca82:	2202      	movs	r2, #2
 800ca84:	701a      	strb	r2, [r3, #0]
      break;
 800ca86:	e0f2      	b.n	800cc6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	885b      	ldrh	r3, [r3, #2]
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	2b05      	cmp	r3, #5
 800ca90:	f200 80ac 	bhi.w	800cbec <USBD_GetDescriptor+0x258>
 800ca94:	a201      	add	r2, pc, #4	; (adr r2, 800ca9c <USBD_GetDescriptor+0x108>)
 800ca96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca9a:	bf00      	nop
 800ca9c:	0800cab5 	.word	0x0800cab5
 800caa0:	0800cae9 	.word	0x0800cae9
 800caa4:	0800cb1d 	.word	0x0800cb1d
 800caa8:	0800cb51 	.word	0x0800cb51
 800caac:	0800cb85 	.word	0x0800cb85
 800cab0:	0800cbb9 	.word	0x0800cbb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800caba:	685b      	ldr	r3, [r3, #4]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d00b      	beq.n	800cad8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	7c12      	ldrb	r2, [r2, #16]
 800cacc:	f107 0108 	add.w	r1, r7, #8
 800cad0:	4610      	mov	r0, r2
 800cad2:	4798      	blx	r3
 800cad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cad6:	e091      	b.n	800cbfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cad8:	6839      	ldr	r1, [r7, #0]
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f000 fab2 	bl	800d044 <USBD_CtlError>
            err++;
 800cae0:	7afb      	ldrb	r3, [r7, #11]
 800cae2:	3301      	adds	r3, #1
 800cae4:	72fb      	strb	r3, [r7, #11]
          break;
 800cae6:	e089      	b.n	800cbfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800caee:	689b      	ldr	r3, [r3, #8]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d00b      	beq.n	800cb0c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cafa:	689b      	ldr	r3, [r3, #8]
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	7c12      	ldrb	r2, [r2, #16]
 800cb00:	f107 0108 	add.w	r1, r7, #8
 800cb04:	4610      	mov	r0, r2
 800cb06:	4798      	blx	r3
 800cb08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb0a:	e077      	b.n	800cbfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cb0c:	6839      	ldr	r1, [r7, #0]
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 fa98 	bl	800d044 <USBD_CtlError>
            err++;
 800cb14:	7afb      	ldrb	r3, [r7, #11]
 800cb16:	3301      	adds	r3, #1
 800cb18:	72fb      	strb	r3, [r7, #11]
          break;
 800cb1a:	e06f      	b.n	800cbfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb22:	68db      	ldr	r3, [r3, #12]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d00b      	beq.n	800cb40 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	7c12      	ldrb	r2, [r2, #16]
 800cb34:	f107 0108 	add.w	r1, r7, #8
 800cb38:	4610      	mov	r0, r2
 800cb3a:	4798      	blx	r3
 800cb3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb3e:	e05d      	b.n	800cbfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cb40:	6839      	ldr	r1, [r7, #0]
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 fa7e 	bl	800d044 <USBD_CtlError>
            err++;
 800cb48:	7afb      	ldrb	r3, [r7, #11]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	72fb      	strb	r3, [r7, #11]
          break;
 800cb4e:	e055      	b.n	800cbfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb56:	691b      	ldr	r3, [r3, #16]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d00b      	beq.n	800cb74 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb62:	691b      	ldr	r3, [r3, #16]
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	7c12      	ldrb	r2, [r2, #16]
 800cb68:	f107 0108 	add.w	r1, r7, #8
 800cb6c:	4610      	mov	r0, r2
 800cb6e:	4798      	blx	r3
 800cb70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb72:	e043      	b.n	800cbfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cb74:	6839      	ldr	r1, [r7, #0]
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 fa64 	bl	800d044 <USBD_CtlError>
            err++;
 800cb7c:	7afb      	ldrb	r3, [r7, #11]
 800cb7e:	3301      	adds	r3, #1
 800cb80:	72fb      	strb	r3, [r7, #11]
          break;
 800cb82:	e03b      	b.n	800cbfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb8a:	695b      	ldr	r3, [r3, #20]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d00b      	beq.n	800cba8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb96:	695b      	ldr	r3, [r3, #20]
 800cb98:	687a      	ldr	r2, [r7, #4]
 800cb9a:	7c12      	ldrb	r2, [r2, #16]
 800cb9c:	f107 0108 	add.w	r1, r7, #8
 800cba0:	4610      	mov	r0, r2
 800cba2:	4798      	blx	r3
 800cba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cba6:	e029      	b.n	800cbfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cba8:	6839      	ldr	r1, [r7, #0]
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f000 fa4a 	bl	800d044 <USBD_CtlError>
            err++;
 800cbb0:	7afb      	ldrb	r3, [r7, #11]
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	72fb      	strb	r3, [r7, #11]
          break;
 800cbb6:	e021      	b.n	800cbfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbbe:	699b      	ldr	r3, [r3, #24]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d00b      	beq.n	800cbdc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbca:	699b      	ldr	r3, [r3, #24]
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	7c12      	ldrb	r2, [r2, #16]
 800cbd0:	f107 0108 	add.w	r1, r7, #8
 800cbd4:	4610      	mov	r0, r2
 800cbd6:	4798      	blx	r3
 800cbd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbda:	e00f      	b.n	800cbfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cbdc:	6839      	ldr	r1, [r7, #0]
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f000 fa30 	bl	800d044 <USBD_CtlError>
            err++;
 800cbe4:	7afb      	ldrb	r3, [r7, #11]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	72fb      	strb	r3, [r7, #11]
          break;
 800cbea:	e007      	b.n	800cbfc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cbec:	6839      	ldr	r1, [r7, #0]
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 fa28 	bl	800d044 <USBD_CtlError>
          err++;
 800cbf4:	7afb      	ldrb	r3, [r7, #11]
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cbfa:	bf00      	nop
      }
      break;
 800cbfc:	e037      	b.n	800cc6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	7c1b      	ldrb	r3, [r3, #16]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d109      	bne.n	800cc1a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc0e:	f107 0208 	add.w	r2, r7, #8
 800cc12:	4610      	mov	r0, r2
 800cc14:	4798      	blx	r3
 800cc16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc18:	e029      	b.n	800cc6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cc1a:	6839      	ldr	r1, [r7, #0]
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f000 fa11 	bl	800d044 <USBD_CtlError>
        err++;
 800cc22:	7afb      	ldrb	r3, [r7, #11]
 800cc24:	3301      	adds	r3, #1
 800cc26:	72fb      	strb	r3, [r7, #11]
      break;
 800cc28:	e021      	b.n	800cc6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	7c1b      	ldrb	r3, [r3, #16]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d10d      	bne.n	800cc4e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc3a:	f107 0208 	add.w	r2, r7, #8
 800cc3e:	4610      	mov	r0, r2
 800cc40:	4798      	blx	r3
 800cc42:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	3301      	adds	r3, #1
 800cc48:	2207      	movs	r2, #7
 800cc4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc4c:	e00f      	b.n	800cc6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cc4e:	6839      	ldr	r1, [r7, #0]
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 f9f7 	bl	800d044 <USBD_CtlError>
        err++;
 800cc56:	7afb      	ldrb	r3, [r7, #11]
 800cc58:	3301      	adds	r3, #1
 800cc5a:	72fb      	strb	r3, [r7, #11]
      break;
 800cc5c:	e007      	b.n	800cc6e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cc5e:	6839      	ldr	r1, [r7, #0]
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f000 f9ef 	bl	800d044 <USBD_CtlError>
      err++;
 800cc66:	7afb      	ldrb	r3, [r7, #11]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	72fb      	strb	r3, [r7, #11]
      break;
 800cc6c:	bf00      	nop
  }

  if (err != 0U)
 800cc6e:	7afb      	ldrb	r3, [r7, #11]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d11e      	bne.n	800ccb2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	88db      	ldrh	r3, [r3, #6]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d016      	beq.n	800ccaa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800cc7c:	893b      	ldrh	r3, [r7, #8]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00e      	beq.n	800cca0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	88da      	ldrh	r2, [r3, #6]
 800cc86:	893b      	ldrh	r3, [r7, #8]
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	bf28      	it	cs
 800cc8c:	4613      	movcs	r3, r2
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cc92:	893b      	ldrh	r3, [r7, #8]
 800cc94:	461a      	mov	r2, r3
 800cc96:	68f9      	ldr	r1, [r7, #12]
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f000 fa44 	bl	800d126 <USBD_CtlSendData>
 800cc9e:	e009      	b.n	800ccb4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cca0:	6839      	ldr	r1, [r7, #0]
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 f9ce 	bl	800d044 <USBD_CtlError>
 800cca8:	e004      	b.n	800ccb4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 fa95 	bl	800d1da <USBD_CtlSendStatus>
 800ccb0:	e000      	b.n	800ccb4 <USBD_GetDescriptor+0x320>
    return;
 800ccb2:	bf00      	nop
  }
}
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop

0800ccbc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b084      	sub	sp, #16
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	889b      	ldrh	r3, [r3, #4]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d131      	bne.n	800cd32 <USBD_SetAddress+0x76>
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	88db      	ldrh	r3, [r3, #6]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d12d      	bne.n	800cd32 <USBD_SetAddress+0x76>
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	885b      	ldrh	r3, [r3, #2]
 800ccda:	2b7f      	cmp	r3, #127	; 0x7f
 800ccdc:	d829      	bhi.n	800cd32 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	885b      	ldrh	r3, [r3, #2]
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cce8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	2b03      	cmp	r3, #3
 800ccf4:	d104      	bne.n	800cd00 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ccf6:	6839      	ldr	r1, [r7, #0]
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f000 f9a3 	bl	800d044 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccfe:	e01d      	b.n	800cd3c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	7bfa      	ldrb	r2, [r7, #15]
 800cd04:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cd08:	7bfb      	ldrb	r3, [r7, #15]
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 ff31 	bl	800db74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f000 fa61 	bl	800d1da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cd18:	7bfb      	ldrb	r3, [r7, #15]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d004      	beq.n	800cd28 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2202      	movs	r2, #2
 800cd22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd26:	e009      	b.n	800cd3c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd30:	e004      	b.n	800cd3c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cd32:	6839      	ldr	r1, [r7, #0]
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 f985 	bl	800d044 <USBD_CtlError>
  }
}
 800cd3a:	bf00      	nop
 800cd3c:	bf00      	nop
 800cd3e:	3710      	adds	r7, #16
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b084      	sub	sp, #16
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	885b      	ldrh	r3, [r3, #2]
 800cd56:	b2da      	uxtb	r2, r3
 800cd58:	4b4c      	ldr	r3, [pc, #304]	; (800ce8c <USBD_SetConfig+0x148>)
 800cd5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cd5c:	4b4b      	ldr	r3, [pc, #300]	; (800ce8c <USBD_SetConfig+0x148>)
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d905      	bls.n	800cd70 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cd64:	6839      	ldr	r1, [r7, #0]
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 f96c 	bl	800d044 <USBD_CtlError>
    return USBD_FAIL;
 800cd6c:	2303      	movs	r3, #3
 800cd6e:	e088      	b.n	800ce82 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	2b02      	cmp	r3, #2
 800cd7a:	d002      	beq.n	800cd82 <USBD_SetConfig+0x3e>
 800cd7c:	2b03      	cmp	r3, #3
 800cd7e:	d025      	beq.n	800cdcc <USBD_SetConfig+0x88>
 800cd80:	e071      	b.n	800ce66 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cd82:	4b42      	ldr	r3, [pc, #264]	; (800ce8c <USBD_SetConfig+0x148>)
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d01c      	beq.n	800cdc4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800cd8a:	4b40      	ldr	r3, [pc, #256]	; (800ce8c <USBD_SetConfig+0x148>)
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	461a      	mov	r2, r3
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd94:	4b3d      	ldr	r3, [pc, #244]	; (800ce8c <USBD_SetConfig+0x148>)
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	4619      	mov	r1, r3
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f7ff f992 	bl	800c0c4 <USBD_SetClassConfig>
 800cda0:	4603      	mov	r3, r0
 800cda2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cda4:	7bfb      	ldrb	r3, [r7, #15]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d004      	beq.n	800cdb4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800cdaa:	6839      	ldr	r1, [r7, #0]
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 f949 	bl	800d044 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cdb2:	e065      	b.n	800ce80 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f000 fa10 	bl	800d1da <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2203      	movs	r2, #3
 800cdbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cdc2:	e05d      	b.n	800ce80 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 fa08 	bl	800d1da <USBD_CtlSendStatus>
      break;
 800cdca:	e059      	b.n	800ce80 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cdcc:	4b2f      	ldr	r3, [pc, #188]	; (800ce8c <USBD_SetConfig+0x148>)
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d112      	bne.n	800cdfa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2202      	movs	r2, #2
 800cdd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cddc:	4b2b      	ldr	r3, [pc, #172]	; (800ce8c <USBD_SetConfig+0x148>)
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	461a      	mov	r2, r3
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cde6:	4b29      	ldr	r3, [pc, #164]	; (800ce8c <USBD_SetConfig+0x148>)
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	4619      	mov	r1, r3
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f7ff f985 	bl	800c0fc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 f9f1 	bl	800d1da <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cdf8:	e042      	b.n	800ce80 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800cdfa:	4b24      	ldr	r3, [pc, #144]	; (800ce8c <USBD_SetConfig+0x148>)
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	461a      	mov	r2, r3
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d02a      	beq.n	800ce5e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	b2db      	uxtb	r3, r3
 800ce0e:	4619      	mov	r1, r3
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f7ff f973 	bl	800c0fc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ce16:	4b1d      	ldr	r3, [pc, #116]	; (800ce8c <USBD_SetConfig+0x148>)
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ce20:	4b1a      	ldr	r3, [pc, #104]	; (800ce8c <USBD_SetConfig+0x148>)
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	4619      	mov	r1, r3
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f7ff f94c 	bl	800c0c4 <USBD_SetClassConfig>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ce30:	7bfb      	ldrb	r3, [r7, #15]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d00f      	beq.n	800ce56 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ce36:	6839      	ldr	r1, [r7, #0]
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 f903 	bl	800d044 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	b2db      	uxtb	r3, r3
 800ce44:	4619      	mov	r1, r3
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f7ff f958 	bl	800c0fc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2202      	movs	r2, #2
 800ce50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ce54:	e014      	b.n	800ce80 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f000 f9bf 	bl	800d1da <USBD_CtlSendStatus>
      break;
 800ce5c:	e010      	b.n	800ce80 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 f9bb 	bl	800d1da <USBD_CtlSendStatus>
      break;
 800ce64:	e00c      	b.n	800ce80 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ce66:	6839      	ldr	r1, [r7, #0]
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f000 f8eb 	bl	800d044 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ce6e:	4b07      	ldr	r3, [pc, #28]	; (800ce8c <USBD_SetConfig+0x148>)
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	4619      	mov	r1, r3
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f7ff f941 	bl	800c0fc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ce7a:	2303      	movs	r3, #3
 800ce7c:	73fb      	strb	r3, [r7, #15]
      break;
 800ce7e:	bf00      	nop
  }

  return ret;
 800ce80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3710      	adds	r7, #16
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	200003a0 	.word	0x200003a0

0800ce90 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	88db      	ldrh	r3, [r3, #6]
 800ce9e:	2b01      	cmp	r3, #1
 800cea0:	d004      	beq.n	800ceac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cea2:	6839      	ldr	r1, [r7, #0]
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f000 f8cd 	bl	800d044 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ceaa:	e023      	b.n	800cef4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	2b02      	cmp	r3, #2
 800ceb6:	dc02      	bgt.n	800cebe <USBD_GetConfig+0x2e>
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	dc03      	bgt.n	800cec4 <USBD_GetConfig+0x34>
 800cebc:	e015      	b.n	800ceea <USBD_GetConfig+0x5a>
 800cebe:	2b03      	cmp	r3, #3
 800cec0:	d00b      	beq.n	800ceda <USBD_GetConfig+0x4a>
 800cec2:	e012      	b.n	800ceea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2200      	movs	r2, #0
 800cec8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	3308      	adds	r3, #8
 800cece:	2201      	movs	r2, #1
 800ced0:	4619      	mov	r1, r3
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f000 f927 	bl	800d126 <USBD_CtlSendData>
        break;
 800ced8:	e00c      	b.n	800cef4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	3304      	adds	r3, #4
 800cede:	2201      	movs	r2, #1
 800cee0:	4619      	mov	r1, r3
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f000 f91f 	bl	800d126 <USBD_CtlSendData>
        break;
 800cee8:	e004      	b.n	800cef4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ceea:	6839      	ldr	r1, [r7, #0]
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 f8a9 	bl	800d044 <USBD_CtlError>
        break;
 800cef2:	bf00      	nop
}
 800cef4:	bf00      	nop
 800cef6:	3708      	adds	r7, #8
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	3b01      	subs	r3, #1
 800cf10:	2b02      	cmp	r3, #2
 800cf12:	d81e      	bhi.n	800cf52 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	88db      	ldrh	r3, [r3, #6]
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	d004      	beq.n	800cf26 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cf1c:	6839      	ldr	r1, [r7, #0]
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f000 f890 	bl	800d044 <USBD_CtlError>
        break;
 800cf24:	e01a      	b.n	800cf5c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d005      	beq.n	800cf42 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	68db      	ldr	r3, [r3, #12]
 800cf3a:	f043 0202 	orr.w	r2, r3, #2
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	330c      	adds	r3, #12
 800cf46:	2202      	movs	r2, #2
 800cf48:	4619      	mov	r1, r3
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 f8eb 	bl	800d126 <USBD_CtlSendData>
      break;
 800cf50:	e004      	b.n	800cf5c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cf52:	6839      	ldr	r1, [r7, #0]
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 f875 	bl	800d044 <USBD_CtlError>
      break;
 800cf5a:	bf00      	nop
  }
}
 800cf5c:	bf00      	nop
 800cf5e:	3708      	adds	r7, #8
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	885b      	ldrh	r3, [r3, #2]
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d106      	bne.n	800cf84 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f000 f92b 	bl	800d1da <USBD_CtlSendStatus>
  }
}
 800cf84:	bf00      	nop
 800cf86:	3708      	adds	r7, #8
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	3b01      	subs	r3, #1
 800cfa0:	2b02      	cmp	r3, #2
 800cfa2:	d80b      	bhi.n	800cfbc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	885b      	ldrh	r3, [r3, #2]
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d10c      	bne.n	800cfc6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f000 f910 	bl	800d1da <USBD_CtlSendStatus>
      }
      break;
 800cfba:	e004      	b.n	800cfc6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cfbc:	6839      	ldr	r1, [r7, #0]
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 f840 	bl	800d044 <USBD_CtlError>
      break;
 800cfc4:	e000      	b.n	800cfc8 <USBD_ClrFeature+0x3c>
      break;
 800cfc6:	bf00      	nop
  }
}
 800cfc8:	bf00      	nop
 800cfca:	3708      	adds	r7, #8
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	781a      	ldrb	r2, [r3, #0]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	3301      	adds	r3, #1
 800cfea:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	781a      	ldrb	r2, [r3, #0]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	3301      	adds	r3, #1
 800cff8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cffa:	68f8      	ldr	r0, [r7, #12]
 800cffc:	f7ff fa92 	bl	800c524 <SWAPBYTE>
 800d000:	4603      	mov	r3, r0
 800d002:	461a      	mov	r2, r3
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	3301      	adds	r3, #1
 800d00c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	3301      	adds	r3, #1
 800d012:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d014:	68f8      	ldr	r0, [r7, #12]
 800d016:	f7ff fa85 	bl	800c524 <SWAPBYTE>
 800d01a:	4603      	mov	r3, r0
 800d01c:	461a      	mov	r2, r3
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	3301      	adds	r3, #1
 800d026:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	3301      	adds	r3, #1
 800d02c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d02e:	68f8      	ldr	r0, [r7, #12]
 800d030:	f7ff fa78 	bl	800c524 <SWAPBYTE>
 800d034:	4603      	mov	r3, r0
 800d036:	461a      	mov	r2, r3
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	80da      	strh	r2, [r3, #6]
}
 800d03c:	bf00      	nop
 800d03e:	3710      	adds	r7, #16
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d04e:	2180      	movs	r1, #128	; 0x80
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f000 fcf5 	bl	800da40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d056:	2100      	movs	r1, #0
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f000 fcf1 	bl	800da40 <USBD_LL_StallEP>
}
 800d05e:	bf00      	nop
 800d060:	3708      	adds	r7, #8
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}

0800d066 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d066:	b580      	push	{r7, lr}
 800d068:	b086      	sub	sp, #24
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	60f8      	str	r0, [r7, #12]
 800d06e:	60b9      	str	r1, [r7, #8]
 800d070:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d072:	2300      	movs	r3, #0
 800d074:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d036      	beq.n	800d0ea <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d080:	6938      	ldr	r0, [r7, #16]
 800d082:	f000 f836 	bl	800d0f2 <USBD_GetLen>
 800d086:	4603      	mov	r3, r0
 800d088:	3301      	adds	r3, #1
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	005b      	lsls	r3, r3, #1
 800d08e:	b29a      	uxth	r2, r3
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d094:	7dfb      	ldrb	r3, [r7, #23]
 800d096:	68ba      	ldr	r2, [r7, #8]
 800d098:	4413      	add	r3, r2
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	7812      	ldrb	r2, [r2, #0]
 800d09e:	701a      	strb	r2, [r3, #0]
  idx++;
 800d0a0:	7dfb      	ldrb	r3, [r7, #23]
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d0a6:	7dfb      	ldrb	r3, [r7, #23]
 800d0a8:	68ba      	ldr	r2, [r7, #8]
 800d0aa:	4413      	add	r3, r2
 800d0ac:	2203      	movs	r2, #3
 800d0ae:	701a      	strb	r2, [r3, #0]
  idx++;
 800d0b0:	7dfb      	ldrb	r3, [r7, #23]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d0b6:	e013      	b.n	800d0e0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d0b8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ba:	68ba      	ldr	r2, [r7, #8]
 800d0bc:	4413      	add	r3, r2
 800d0be:	693a      	ldr	r2, [r7, #16]
 800d0c0:	7812      	ldrb	r2, [r2, #0]
 800d0c2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	613b      	str	r3, [r7, #16]
    idx++;
 800d0ca:	7dfb      	ldrb	r3, [r7, #23]
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d0d0:	7dfb      	ldrb	r3, [r7, #23]
 800d0d2:	68ba      	ldr	r2, [r7, #8]
 800d0d4:	4413      	add	r3, r2
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	701a      	strb	r2, [r3, #0]
    idx++;
 800d0da:	7dfb      	ldrb	r3, [r7, #23]
 800d0dc:	3301      	adds	r3, #1
 800d0de:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d1e7      	bne.n	800d0b8 <USBD_GetString+0x52>
 800d0e8:	e000      	b.n	800d0ec <USBD_GetString+0x86>
    return;
 800d0ea:	bf00      	nop
  }
}
 800d0ec:	3718      	adds	r7, #24
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d0f2:	b480      	push	{r7}
 800d0f4:	b085      	sub	sp, #20
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d102:	e005      	b.n	800d110 <USBD_GetLen+0x1e>
  {
    len++;
 800d104:	7bfb      	ldrb	r3, [r7, #15]
 800d106:	3301      	adds	r3, #1
 800d108:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	3301      	adds	r3, #1
 800d10e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d1f5      	bne.n	800d104 <USBD_GetLen+0x12>
  }

  return len;
 800d118:	7bfb      	ldrb	r3, [r7, #15]
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3714      	adds	r7, #20
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr

0800d126 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d126:	b580      	push	{r7, lr}
 800d128:	b084      	sub	sp, #16
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	60f8      	str	r0, [r7, #12]
 800d12e:	60b9      	str	r1, [r7, #8]
 800d130:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2202      	movs	r2, #2
 800d136:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	687a      	ldr	r2, [r7, #4]
 800d144:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	68ba      	ldr	r2, [r7, #8]
 800d14a:	2100      	movs	r1, #0
 800d14c:	68f8      	ldr	r0, [r7, #12]
 800d14e:	f000 fd47 	bl	800dbe0 <USBD_LL_Transmit>

  return USBD_OK;
 800d152:	2300      	movs	r3, #0
}
 800d154:	4618      	mov	r0, r3
 800d156:	3710      	adds	r7, #16
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	60b9      	str	r1, [r7, #8]
 800d166:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	68ba      	ldr	r2, [r7, #8]
 800d16c:	2100      	movs	r1, #0
 800d16e:	68f8      	ldr	r0, [r7, #12]
 800d170:	f000 fd36 	bl	800dbe0 <USBD_LL_Transmit>

  return USBD_OK;
 800d174:	2300      	movs	r3, #0
}
 800d176:	4618      	mov	r0, r3
 800d178:	3710      	adds	r7, #16
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}

0800d17e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d17e:	b580      	push	{r7, lr}
 800d180:	b084      	sub	sp, #16
 800d182:	af00      	add	r7, sp, #0
 800d184:	60f8      	str	r0, [r7, #12]
 800d186:	60b9      	str	r1, [r7, #8]
 800d188:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2203      	movs	r2, #3
 800d18e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	687a      	ldr	r2, [r7, #4]
 800d19e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	68ba      	ldr	r2, [r7, #8]
 800d1a6:	2100      	movs	r1, #0
 800d1a8:	68f8      	ldr	r0, [r7, #12]
 800d1aa:	f000 fd51 	bl	800dc50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3710      	adds	r7, #16
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	60b9      	str	r1, [r7, #8]
 800d1c2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	68ba      	ldr	r2, [r7, #8]
 800d1c8:	2100      	movs	r1, #0
 800d1ca:	68f8      	ldr	r0, [r7, #12]
 800d1cc:	f000 fd40 	bl	800dc50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1d0:	2300      	movs	r3, #0
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3710      	adds	r7, #16
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d1da:	b580      	push	{r7, lr}
 800d1dc:	b082      	sub	sp, #8
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2204      	movs	r2, #4
 800d1e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	2100      	movs	r1, #0
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 fcf5 	bl	800dbe0 <USBD_LL_Transmit>

  return USBD_OK;
 800d1f6:	2300      	movs	r3, #0
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3708      	adds	r7, #8
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2205      	movs	r2, #5
 800d20c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d210:	2300      	movs	r3, #0
 800d212:	2200      	movs	r2, #0
 800d214:	2100      	movs	r1, #0
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 fd1a 	bl	800dc50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3708      	adds	r7, #8
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
	...

0800d228 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d22c:	2200      	movs	r2, #0
 800d22e:	4912      	ldr	r1, [pc, #72]	; (800d278 <MX_USB_DEVICE_Init+0x50>)
 800d230:	4812      	ldr	r0, [pc, #72]	; (800d27c <MX_USB_DEVICE_Init+0x54>)
 800d232:	f7fe fed9 	bl	800bfe8 <USBD_Init>
 800d236:	4603      	mov	r3, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d001      	beq.n	800d240 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d23c:	f7f6 fb86 	bl	800394c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d240:	490f      	ldr	r1, [pc, #60]	; (800d280 <MX_USB_DEVICE_Init+0x58>)
 800d242:	480e      	ldr	r0, [pc, #56]	; (800d27c <MX_USB_DEVICE_Init+0x54>)
 800d244:	f7fe ff00 	bl	800c048 <USBD_RegisterClass>
 800d248:	4603      	mov	r3, r0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d001      	beq.n	800d252 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d24e:	f7f6 fb7d 	bl	800394c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d252:	490c      	ldr	r1, [pc, #48]	; (800d284 <MX_USB_DEVICE_Init+0x5c>)
 800d254:	4809      	ldr	r0, [pc, #36]	; (800d27c <MX_USB_DEVICE_Init+0x54>)
 800d256:	f7fe fe21 	bl	800be9c <USBD_CDC_RegisterInterface>
 800d25a:	4603      	mov	r3, r0
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d001      	beq.n	800d264 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d260:	f7f6 fb74 	bl	800394c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d264:	4805      	ldr	r0, [pc, #20]	; (800d27c <MX_USB_DEVICE_Init+0x54>)
 800d266:	f7fe ff16 	bl	800c096 <USBD_Start>
 800d26a:	4603      	mov	r3, r0
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d001      	beq.n	800d274 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d270:	f7f6 fb6c 	bl	800394c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d274:	bf00      	nop
 800d276:	bd80      	pop	{r7, pc}
 800d278:	20000130 	.word	0x20000130
 800d27c:	20000838 	.word	0x20000838
 800d280:	20000018 	.word	0x20000018
 800d284:	2000011c 	.word	0x2000011c

0800d288 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d28c:	2200      	movs	r2, #0
 800d28e:	4905      	ldr	r1, [pc, #20]	; (800d2a4 <CDC_Init_FS+0x1c>)
 800d290:	4805      	ldr	r0, [pc, #20]	; (800d2a8 <CDC_Init_FS+0x20>)
 800d292:	f7fe fe18 	bl	800bec6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d296:	4905      	ldr	r1, [pc, #20]	; (800d2ac <CDC_Init_FS+0x24>)
 800d298:	4803      	ldr	r0, [pc, #12]	; (800d2a8 <CDC_Init_FS+0x20>)
 800d29a:	f7fe fe32 	bl	800bf02 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d29e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	bd80      	pop	{r7, pc}
 800d2a4:	20000c04 	.word	0x20000c04
 800d2a8:	20000838 	.word	0x20000838
 800d2ac:	20000b08 	.word	0x20000b08

0800d2b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d2b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr

0800d2c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b083      	sub	sp, #12
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	6039      	str	r1, [r7, #0]
 800d2ca:	71fb      	strb	r3, [r7, #7]
 800d2cc:	4613      	mov	r3, r2
 800d2ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d2d0:	79fb      	ldrb	r3, [r7, #7]
 800d2d2:	2b23      	cmp	r3, #35	; 0x23
 800d2d4:	d84a      	bhi.n	800d36c <CDC_Control_FS+0xac>
 800d2d6:	a201      	add	r2, pc, #4	; (adr r2, 800d2dc <CDC_Control_FS+0x1c>)
 800d2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2dc:	0800d36d 	.word	0x0800d36d
 800d2e0:	0800d36d 	.word	0x0800d36d
 800d2e4:	0800d36d 	.word	0x0800d36d
 800d2e8:	0800d36d 	.word	0x0800d36d
 800d2ec:	0800d36d 	.word	0x0800d36d
 800d2f0:	0800d36d 	.word	0x0800d36d
 800d2f4:	0800d36d 	.word	0x0800d36d
 800d2f8:	0800d36d 	.word	0x0800d36d
 800d2fc:	0800d36d 	.word	0x0800d36d
 800d300:	0800d36d 	.word	0x0800d36d
 800d304:	0800d36d 	.word	0x0800d36d
 800d308:	0800d36d 	.word	0x0800d36d
 800d30c:	0800d36d 	.word	0x0800d36d
 800d310:	0800d36d 	.word	0x0800d36d
 800d314:	0800d36d 	.word	0x0800d36d
 800d318:	0800d36d 	.word	0x0800d36d
 800d31c:	0800d36d 	.word	0x0800d36d
 800d320:	0800d36d 	.word	0x0800d36d
 800d324:	0800d36d 	.word	0x0800d36d
 800d328:	0800d36d 	.word	0x0800d36d
 800d32c:	0800d36d 	.word	0x0800d36d
 800d330:	0800d36d 	.word	0x0800d36d
 800d334:	0800d36d 	.word	0x0800d36d
 800d338:	0800d36d 	.word	0x0800d36d
 800d33c:	0800d36d 	.word	0x0800d36d
 800d340:	0800d36d 	.word	0x0800d36d
 800d344:	0800d36d 	.word	0x0800d36d
 800d348:	0800d36d 	.word	0x0800d36d
 800d34c:	0800d36d 	.word	0x0800d36d
 800d350:	0800d36d 	.word	0x0800d36d
 800d354:	0800d36d 	.word	0x0800d36d
 800d358:	0800d36d 	.word	0x0800d36d
 800d35c:	0800d36d 	.word	0x0800d36d
 800d360:	0800d36d 	.word	0x0800d36d
 800d364:	0800d36d 	.word	0x0800d36d
 800d368:	0800d36d 	.word	0x0800d36d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d36c:	bf00      	nop
  }

  return (USBD_OK);
 800d36e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d370:	4618      	mov	r0, r3
 800d372:	370c      	adds	r7, #12
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d386:	6879      	ldr	r1, [r7, #4]
 800d388:	4808      	ldr	r0, [pc, #32]	; (800d3ac <CDC_Receive_FS+0x30>)
 800d38a:	f7fe fdba 	bl	800bf02 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d38e:	4807      	ldr	r0, [pc, #28]	; (800d3ac <CDC_Receive_FS+0x30>)
 800d390:	f7fe fe00 	bl	800bf94 <USBD_CDC_ReceivePacket>
  USB_CDC_RX_Interrupt(Buf, *Len);
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4619      	mov	r1, r3
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f7f6 fac6 	bl	800392c <USB_CDC_RX_Interrupt>
  return (USBD_OK);
 800d3a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3708      	adds	r7, #8
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
 800d3aa:	bf00      	nop
 800d3ac:	20000838 	.word	0x20000838

0800d3b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b084      	sub	sp, #16
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d3c0:	4b0d      	ldr	r3, [pc, #52]	; (800d3f8 <CDC_Transmit_FS+0x48>)
 800d3c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d3c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d001      	beq.n	800d3d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	e00b      	b.n	800d3ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d3d6:	887b      	ldrh	r3, [r7, #2]
 800d3d8:	461a      	mov	r2, r3
 800d3da:	6879      	ldr	r1, [r7, #4]
 800d3dc:	4806      	ldr	r0, [pc, #24]	; (800d3f8 <CDC_Transmit_FS+0x48>)
 800d3de:	f7fe fd72 	bl	800bec6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d3e2:	4805      	ldr	r0, [pc, #20]	; (800d3f8 <CDC_Transmit_FS+0x48>)
 800d3e4:	f7fe fda6 	bl	800bf34 <USBD_CDC_TransmitPacket>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3710      	adds	r7, #16
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	20000838 	.word	0x20000838

0800d3fc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b087      	sub	sp, #28
 800d400:	af00      	add	r7, sp, #0
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	4613      	mov	r3, r2
 800d408:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d40a:	2300      	movs	r3, #0
 800d40c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d40e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d412:	4618      	mov	r0, r3
 800d414:	371c      	adds	r7, #28
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr
	...

0800d420 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	4603      	mov	r3, r0
 800d428:	6039      	str	r1, [r7, #0]
 800d42a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	2212      	movs	r2, #18
 800d430:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d432:	4b03      	ldr	r3, [pc, #12]	; (800d440 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d434:	4618      	mov	r0, r3
 800d436:	370c      	adds	r7, #12
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr
 800d440:	20000150 	.word	0x20000150

0800d444 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d444:	b480      	push	{r7}
 800d446:	b083      	sub	sp, #12
 800d448:	af00      	add	r7, sp, #0
 800d44a:	4603      	mov	r3, r0
 800d44c:	6039      	str	r1, [r7, #0]
 800d44e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	2204      	movs	r2, #4
 800d454:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d456:	4b03      	ldr	r3, [pc, #12]	; (800d464 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d458:	4618      	mov	r0, r3
 800d45a:	370c      	adds	r7, #12
 800d45c:	46bd      	mov	sp, r7
 800d45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d462:	4770      	bx	lr
 800d464:	20000170 	.word	0x20000170

0800d468 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	4603      	mov	r3, r0
 800d470:	6039      	str	r1, [r7, #0]
 800d472:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d474:	79fb      	ldrb	r3, [r7, #7]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d105      	bne.n	800d486 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d47a:	683a      	ldr	r2, [r7, #0]
 800d47c:	4907      	ldr	r1, [pc, #28]	; (800d49c <USBD_FS_ProductStrDescriptor+0x34>)
 800d47e:	4808      	ldr	r0, [pc, #32]	; (800d4a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d480:	f7ff fdf1 	bl	800d066 <USBD_GetString>
 800d484:	e004      	b.n	800d490 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d486:	683a      	ldr	r2, [r7, #0]
 800d488:	4904      	ldr	r1, [pc, #16]	; (800d49c <USBD_FS_ProductStrDescriptor+0x34>)
 800d48a:	4805      	ldr	r0, [pc, #20]	; (800d4a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d48c:	f7ff fdeb 	bl	800d066 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d490:	4b02      	ldr	r3, [pc, #8]	; (800d49c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d492:	4618      	mov	r0, r3
 800d494:	3708      	adds	r7, #8
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	20000d00 	.word	0x20000d00
 800d4a0:	0800de04 	.word	0x0800de04

0800d4a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b082      	sub	sp, #8
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	6039      	str	r1, [r7, #0]
 800d4ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d4b0:	683a      	ldr	r2, [r7, #0]
 800d4b2:	4904      	ldr	r1, [pc, #16]	; (800d4c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d4b4:	4804      	ldr	r0, [pc, #16]	; (800d4c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d4b6:	f7ff fdd6 	bl	800d066 <USBD_GetString>
  return USBD_StrDesc;
 800d4ba:	4b02      	ldr	r3, [pc, #8]	; (800d4c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	3708      	adds	r7, #8
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}
 800d4c4:	20000d00 	.word	0x20000d00
 800d4c8:	0800de1c 	.word	0x0800de1c

0800d4cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	6039      	str	r1, [r7, #0]
 800d4d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	221a      	movs	r2, #26
 800d4dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d4de:	f000 f855 	bl	800d58c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d4e2:	4b02      	ldr	r3, [pc, #8]	; (800d4ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}
 800d4ec:	20000174 	.word	0x20000174

0800d4f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	6039      	str	r1, [r7, #0]
 800d4fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d4fc:	79fb      	ldrb	r3, [r7, #7]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d105      	bne.n	800d50e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d502:	683a      	ldr	r2, [r7, #0]
 800d504:	4907      	ldr	r1, [pc, #28]	; (800d524 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d506:	4808      	ldr	r0, [pc, #32]	; (800d528 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d508:	f7ff fdad 	bl	800d066 <USBD_GetString>
 800d50c:	e004      	b.n	800d518 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d50e:	683a      	ldr	r2, [r7, #0]
 800d510:	4904      	ldr	r1, [pc, #16]	; (800d524 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d512:	4805      	ldr	r0, [pc, #20]	; (800d528 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d514:	f7ff fda7 	bl	800d066 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d518:	4b02      	ldr	r3, [pc, #8]	; (800d524 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3708      	adds	r7, #8
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
 800d522:	bf00      	nop
 800d524:	20000d00 	.word	0x20000d00
 800d528:	0800de30 	.word	0x0800de30

0800d52c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b082      	sub	sp, #8
 800d530:	af00      	add	r7, sp, #0
 800d532:	4603      	mov	r3, r0
 800d534:	6039      	str	r1, [r7, #0]
 800d536:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d538:	79fb      	ldrb	r3, [r7, #7]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d105      	bne.n	800d54a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d53e:	683a      	ldr	r2, [r7, #0]
 800d540:	4907      	ldr	r1, [pc, #28]	; (800d560 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d542:	4808      	ldr	r0, [pc, #32]	; (800d564 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d544:	f7ff fd8f 	bl	800d066 <USBD_GetString>
 800d548:	e004      	b.n	800d554 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d54a:	683a      	ldr	r2, [r7, #0]
 800d54c:	4904      	ldr	r1, [pc, #16]	; (800d560 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d54e:	4805      	ldr	r0, [pc, #20]	; (800d564 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d550:	f7ff fd89 	bl	800d066 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d554:	4b02      	ldr	r3, [pc, #8]	; (800d560 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d556:	4618      	mov	r0, r3
 800d558:	3708      	adds	r7, #8
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
 800d55e:	bf00      	nop
 800d560:	20000d00 	.word	0x20000d00
 800d564:	0800de3c 	.word	0x0800de3c

0800d568 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d568:	b480      	push	{r7}
 800d56a:	b083      	sub	sp, #12
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	4603      	mov	r3, r0
 800d570:	6039      	str	r1, [r7, #0]
 800d572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	220c      	movs	r2, #12
 800d578:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d57a:	4b03      	ldr	r3, [pc, #12]	; (800d588 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	370c      	adds	r7, #12
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr
 800d588:	20000164 	.word	0x20000164

0800d58c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d592:	4b0f      	ldr	r3, [pc, #60]	; (800d5d0 <Get_SerialNum+0x44>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d598:	4b0e      	ldr	r3, [pc, #56]	; (800d5d4 <Get_SerialNum+0x48>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d59e:	4b0e      	ldr	r3, [pc, #56]	; (800d5d8 <Get_SerialNum+0x4c>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d5a4:	68fa      	ldr	r2, [r7, #12]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	4413      	add	r3, r2
 800d5aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d009      	beq.n	800d5c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d5b2:	2208      	movs	r2, #8
 800d5b4:	4909      	ldr	r1, [pc, #36]	; (800d5dc <Get_SerialNum+0x50>)
 800d5b6:	68f8      	ldr	r0, [r7, #12]
 800d5b8:	f000 f814 	bl	800d5e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d5bc:	2204      	movs	r2, #4
 800d5be:	4908      	ldr	r1, [pc, #32]	; (800d5e0 <Get_SerialNum+0x54>)
 800d5c0:	68b8      	ldr	r0, [r7, #8]
 800d5c2:	f000 f80f 	bl	800d5e4 <IntToUnicode>
  }
}
 800d5c6:	bf00      	nop
 800d5c8:	3710      	adds	r7, #16
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
 800d5ce:	bf00      	nop
 800d5d0:	1fff7590 	.word	0x1fff7590
 800d5d4:	1fff7594 	.word	0x1fff7594
 800d5d8:	1fff7598 	.word	0x1fff7598
 800d5dc:	20000176 	.word	0x20000176
 800d5e0:	20000186 	.word	0x20000186

0800d5e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b087      	sub	sp, #28
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	60f8      	str	r0, [r7, #12]
 800d5ec:	60b9      	str	r1, [r7, #8]
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	75fb      	strb	r3, [r7, #23]
 800d5fa:	e027      	b.n	800d64c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	0f1b      	lsrs	r3, r3, #28
 800d600:	2b09      	cmp	r3, #9
 800d602:	d80b      	bhi.n	800d61c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	0f1b      	lsrs	r3, r3, #28
 800d608:	b2da      	uxtb	r2, r3
 800d60a:	7dfb      	ldrb	r3, [r7, #23]
 800d60c:	005b      	lsls	r3, r3, #1
 800d60e:	4619      	mov	r1, r3
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	440b      	add	r3, r1
 800d614:	3230      	adds	r2, #48	; 0x30
 800d616:	b2d2      	uxtb	r2, r2
 800d618:	701a      	strb	r2, [r3, #0]
 800d61a:	e00a      	b.n	800d632 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	0f1b      	lsrs	r3, r3, #28
 800d620:	b2da      	uxtb	r2, r3
 800d622:	7dfb      	ldrb	r3, [r7, #23]
 800d624:	005b      	lsls	r3, r3, #1
 800d626:	4619      	mov	r1, r3
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	440b      	add	r3, r1
 800d62c:	3237      	adds	r2, #55	; 0x37
 800d62e:	b2d2      	uxtb	r2, r2
 800d630:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	011b      	lsls	r3, r3, #4
 800d636:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d638:	7dfb      	ldrb	r3, [r7, #23]
 800d63a:	005b      	lsls	r3, r3, #1
 800d63c:	3301      	adds	r3, #1
 800d63e:	68ba      	ldr	r2, [r7, #8]
 800d640:	4413      	add	r3, r2
 800d642:	2200      	movs	r2, #0
 800d644:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d646:	7dfb      	ldrb	r3, [r7, #23]
 800d648:	3301      	adds	r3, #1
 800d64a:	75fb      	strb	r3, [r7, #23]
 800d64c:	7dfa      	ldrb	r2, [r7, #23]
 800d64e:	79fb      	ldrb	r3, [r7, #7]
 800d650:	429a      	cmp	r2, r3
 800d652:	d3d3      	bcc.n	800d5fc <IntToUnicode+0x18>
  }
}
 800d654:	bf00      	nop
 800d656:	bf00      	nop
 800d658:	371c      	adds	r7, #28
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr
	...

0800d664 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b09c      	sub	sp, #112	; 0x70
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d66c:	f107 0310 	add.w	r3, r7, #16
 800d670:	2260      	movs	r2, #96	; 0x60
 800d672:	2100      	movs	r1, #0
 800d674:	4618      	mov	r0, r3
 800d676:	f000 fbb1 	bl	800dddc <memset>
  if(pcdHandle->Instance==USB)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	4a15      	ldr	r2, [pc, #84]	; (800d6d4 <HAL_PCD_MspInit+0x70>)
 800d680:	4293      	cmp	r3, r2
 800d682:	d122      	bne.n	800d6ca <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d684:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d688:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d68a:	2300      	movs	r3, #0
 800d68c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d68e:	f107 0310 	add.w	r3, r7, #16
 800d692:	4618      	mov	r0, r3
 800d694:	f7fa fd1c 	bl	80080d0 <HAL_RCCEx_PeriphCLKConfig>
 800d698:	4603      	mov	r3, r0
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d001      	beq.n	800d6a2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800d69e:	f7f6 f955 	bl	800394c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d6a2:	4b0d      	ldr	r3, [pc, #52]	; (800d6d8 <HAL_PCD_MspInit+0x74>)
 800d6a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6a6:	4a0c      	ldr	r2, [pc, #48]	; (800d6d8 <HAL_PCD_MspInit+0x74>)
 800d6a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d6ac:	6593      	str	r3, [r2, #88]	; 0x58
 800d6ae:	4b0a      	ldr	r3, [pc, #40]	; (800d6d8 <HAL_PCD_MspInit+0x74>)
 800d6b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d6b6:	60fb      	str	r3, [r7, #12]
 800d6b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	2100      	movs	r1, #0
 800d6be:	2043      	movs	r0, #67	; 0x43
 800d6c0:	f7f7 fb73 	bl	8004daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d6c4:	2043      	movs	r0, #67	; 0x43
 800d6c6:	f7f7 fb8c 	bl	8004de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d6ca:	bf00      	nop
 800d6cc:	3770      	adds	r7, #112	; 0x70
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
 800d6d2:	bf00      	nop
 800d6d4:	40006800 	.word	0x40006800
 800d6d8:	40021000 	.word	0x40021000

0800d6dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	4610      	mov	r0, r2
 800d6f4:	f7fe fd1a 	bl	800c12c <USBD_LL_SetupStage>
}
 800d6f8:	bf00      	nop
 800d6fa:	3708      	adds	r7, #8
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b082      	sub	sp, #8
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	460b      	mov	r3, r1
 800d70a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800d712:	78fa      	ldrb	r2, [r7, #3]
 800d714:	6879      	ldr	r1, [r7, #4]
 800d716:	4613      	mov	r3, r2
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	4413      	add	r3, r2
 800d71c:	00db      	lsls	r3, r3, #3
 800d71e:	440b      	add	r3, r1
 800d720:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800d724:	681a      	ldr	r2, [r3, #0]
 800d726:	78fb      	ldrb	r3, [r7, #3]
 800d728:	4619      	mov	r1, r3
 800d72a:	f7fe fd54 	bl	800c1d6 <USBD_LL_DataOutStage>
}
 800d72e:	bf00      	nop
 800d730:	3708      	adds	r7, #8
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}

0800d736 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d736:	b580      	push	{r7, lr}
 800d738:	b082      	sub	sp, #8
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	6078      	str	r0, [r7, #4]
 800d73e:	460b      	mov	r3, r1
 800d740:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 800d748:	78fa      	ldrb	r2, [r7, #3]
 800d74a:	6879      	ldr	r1, [r7, #4]
 800d74c:	4613      	mov	r3, r2
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	4413      	add	r3, r2
 800d752:	00db      	lsls	r3, r3, #3
 800d754:	440b      	add	r3, r1
 800d756:	3340      	adds	r3, #64	; 0x40
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	78fb      	ldrb	r3, [r7, #3]
 800d75c:	4619      	mov	r1, r3
 800d75e:	f7fe fd9d 	bl	800c29c <USBD_LL_DataInStage>
}
 800d762:	bf00      	nop
 800d764:	3708      	adds	r7, #8
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}

0800d76a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d76a:	b580      	push	{r7, lr}
 800d76c:	b082      	sub	sp, #8
 800d76e:	af00      	add	r7, sp, #0
 800d770:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d778:	4618      	mov	r0, r3
 800d77a:	f7fe feb1 	bl	800c4e0 <USBD_LL_SOF>
}
 800d77e:	bf00      	nop
 800d780:	3708      	adds	r7, #8
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}

0800d786 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d786:	b580      	push	{r7, lr}
 800d788:	b084      	sub	sp, #16
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d78e:	2301      	movs	r3, #1
 800d790:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	2b02      	cmp	r3, #2
 800d798:	d001      	beq.n	800d79e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d79a:	f7f6 f8d7 	bl	800394c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d7a4:	7bfa      	ldrb	r2, [r7, #15]
 800d7a6:	4611      	mov	r1, r2
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7fe fe5b 	bl	800c464 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7fe fe07 	bl	800c3c8 <USBD_LL_Reset>
}
 800d7ba:	bf00      	nop
 800d7bc:	3710      	adds	r7, #16
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
	...

0800d7c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b082      	sub	sp, #8
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7fe fe56 	bl	800c484 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	699b      	ldr	r3, [r3, #24]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d005      	beq.n	800d7ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d7e0:	4b04      	ldr	r3, [pc, #16]	; (800d7f4 <HAL_PCD_SuspendCallback+0x30>)
 800d7e2:	691b      	ldr	r3, [r3, #16]
 800d7e4:	4a03      	ldr	r2, [pc, #12]	; (800d7f4 <HAL_PCD_SuspendCallback+0x30>)
 800d7e6:	f043 0306 	orr.w	r3, r3, #6
 800d7ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d7ec:	bf00      	nop
 800d7ee:	3708      	adds	r7, #8
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}
 800d7f4:	e000ed00 	.word	0xe000ed00

0800d7f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	699b      	ldr	r3, [r3, #24]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d007      	beq.n	800d818 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d808:	4b08      	ldr	r3, [pc, #32]	; (800d82c <HAL_PCD_ResumeCallback+0x34>)
 800d80a:	691b      	ldr	r3, [r3, #16]
 800d80c:	4a07      	ldr	r2, [pc, #28]	; (800d82c <HAL_PCD_ResumeCallback+0x34>)
 800d80e:	f023 0306 	bic.w	r3, r3, #6
 800d812:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d814:	f000 fab6 	bl	800dd84 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800d81e:	4618      	mov	r0, r3
 800d820:	f7fe fe46 	bl	800c4b0 <USBD_LL_Resume>
}
 800d824:	bf00      	nop
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	e000ed00 	.word	0xe000ed00

0800d830 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800d838:	f7f9 fe30 	bl	800749c <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d83c:	4a2b      	ldr	r2, [pc, #172]	; (800d8ec <USBD_LL_Init+0xbc>)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	4a29      	ldr	r2, [pc, #164]	; (800d8ec <USBD_LL_Init+0xbc>)
 800d848:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d84c:	4b27      	ldr	r3, [pc, #156]	; (800d8ec <USBD_LL_Init+0xbc>)
 800d84e:	4a28      	ldr	r2, [pc, #160]	; (800d8f0 <USBD_LL_Init+0xc0>)
 800d850:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d852:	4b26      	ldr	r3, [pc, #152]	; (800d8ec <USBD_LL_Init+0xbc>)
 800d854:	2208      	movs	r2, #8
 800d856:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d858:	4b24      	ldr	r3, [pc, #144]	; (800d8ec <USBD_LL_Init+0xbc>)
 800d85a:	2202      	movs	r2, #2
 800d85c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d85e:	4b23      	ldr	r3, [pc, #140]	; (800d8ec <USBD_LL_Init+0xbc>)
 800d860:	2202      	movs	r2, #2
 800d862:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d864:	4b21      	ldr	r3, [pc, #132]	; (800d8ec <USBD_LL_Init+0xbc>)
 800d866:	2200      	movs	r2, #0
 800d868:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d86a:	4b20      	ldr	r3, [pc, #128]	; (800d8ec <USBD_LL_Init+0xbc>)
 800d86c:	2200      	movs	r2, #0
 800d86e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d870:	4b1e      	ldr	r3, [pc, #120]	; (800d8ec <USBD_LL_Init+0xbc>)
 800d872:	2200      	movs	r2, #0
 800d874:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d876:	4b1d      	ldr	r3, [pc, #116]	; (800d8ec <USBD_LL_Init+0xbc>)
 800d878:	2200      	movs	r2, #0
 800d87a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d87c:	481b      	ldr	r0, [pc, #108]	; (800d8ec <USBD_LL_Init+0xbc>)
 800d87e:	f7f8 f81d 	bl	80058bc <HAL_PCD_Init>
 800d882:	4603      	mov	r3, r0
 800d884:	2b00      	cmp	r3, #0
 800d886:	d001      	beq.n	800d88c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800d888:	f7f6 f860 	bl	800394c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d892:	2318      	movs	r3, #24
 800d894:	2200      	movs	r2, #0
 800d896:	2100      	movs	r1, #0
 800d898:	f7f9 fd2d 	bl	80072f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d8a2:	2358      	movs	r3, #88	; 0x58
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	2180      	movs	r1, #128	; 0x80
 800d8a8:	f7f9 fd25 	bl	80072f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d8b2:	23c0      	movs	r3, #192	; 0xc0
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	2181      	movs	r1, #129	; 0x81
 800d8b8:	f7f9 fd1d 	bl	80072f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d8c2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	2101      	movs	r1, #1
 800d8ca:	f7f9 fd14 	bl	80072f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d8d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d8d8:	2200      	movs	r2, #0
 800d8da:	2182      	movs	r1, #130	; 0x82
 800d8dc:	f7f9 fd0b 	bl	80072f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d8e0:	2300      	movs	r3, #0
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3708      	adds	r7, #8
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	20000f00 	.word	0x20000f00
 800d8f0:	40006800 	.word	0x40006800

0800d8f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b084      	sub	sp, #16
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d900:	2300      	movs	r3, #0
 800d902:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7f8 f8ed 	bl	8005aea <HAL_PCD_Start>
 800d910:	4603      	mov	r3, r0
 800d912:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d914:	7bbb      	ldrb	r3, [r7, #14]
 800d916:	2b03      	cmp	r3, #3
 800d918:	d816      	bhi.n	800d948 <USBD_LL_Start+0x54>
 800d91a:	a201      	add	r2, pc, #4	; (adr r2, 800d920 <USBD_LL_Start+0x2c>)
 800d91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d920:	0800d931 	.word	0x0800d931
 800d924:	0800d937 	.word	0x0800d937
 800d928:	0800d93d 	.word	0x0800d93d
 800d92c:	0800d943 	.word	0x0800d943
    case HAL_OK :
      usb_status = USBD_OK;
 800d930:	2300      	movs	r3, #0
 800d932:	73fb      	strb	r3, [r7, #15]
    break;
 800d934:	e00b      	b.n	800d94e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d936:	2303      	movs	r3, #3
 800d938:	73fb      	strb	r3, [r7, #15]
    break;
 800d93a:	e008      	b.n	800d94e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d93c:	2301      	movs	r3, #1
 800d93e:	73fb      	strb	r3, [r7, #15]
    break;
 800d940:	e005      	b.n	800d94e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d942:	2303      	movs	r3, #3
 800d944:	73fb      	strb	r3, [r7, #15]
    break;
 800d946:	e002      	b.n	800d94e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d948:	2303      	movs	r3, #3
 800d94a:	73fb      	strb	r3, [r7, #15]
    break;
 800d94c:	bf00      	nop
  }
  return usb_status;
 800d94e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d950:	4618      	mov	r0, r3
 800d952:	3710      	adds	r7, #16
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	4608      	mov	r0, r1
 800d962:	4611      	mov	r1, r2
 800d964:	461a      	mov	r2, r3
 800d966:	4603      	mov	r3, r0
 800d968:	70fb      	strb	r3, [r7, #3]
 800d96a:	460b      	mov	r3, r1
 800d96c:	70bb      	strb	r3, [r7, #2]
 800d96e:	4613      	mov	r3, r2
 800d970:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d972:	2300      	movs	r3, #0
 800d974:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d976:	2300      	movs	r3, #0
 800d978:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d980:	78bb      	ldrb	r3, [r7, #2]
 800d982:	883a      	ldrh	r2, [r7, #0]
 800d984:	78f9      	ldrb	r1, [r7, #3]
 800d986:	f7f8 fa1e 	bl	8005dc6 <HAL_PCD_EP_Open>
 800d98a:	4603      	mov	r3, r0
 800d98c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d98e:	7bbb      	ldrb	r3, [r7, #14]
 800d990:	2b03      	cmp	r3, #3
 800d992:	d817      	bhi.n	800d9c4 <USBD_LL_OpenEP+0x6c>
 800d994:	a201      	add	r2, pc, #4	; (adr r2, 800d99c <USBD_LL_OpenEP+0x44>)
 800d996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d99a:	bf00      	nop
 800d99c:	0800d9ad 	.word	0x0800d9ad
 800d9a0:	0800d9b3 	.word	0x0800d9b3
 800d9a4:	0800d9b9 	.word	0x0800d9b9
 800d9a8:	0800d9bf 	.word	0x0800d9bf
    case HAL_OK :
      usb_status = USBD_OK;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	73fb      	strb	r3, [r7, #15]
    break;
 800d9b0:	e00b      	b.n	800d9ca <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d9b2:	2303      	movs	r3, #3
 800d9b4:	73fb      	strb	r3, [r7, #15]
    break;
 800d9b6:	e008      	b.n	800d9ca <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	73fb      	strb	r3, [r7, #15]
    break;
 800d9bc:	e005      	b.n	800d9ca <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d9be:	2303      	movs	r3, #3
 800d9c0:	73fb      	strb	r3, [r7, #15]
    break;
 800d9c2:	e002      	b.n	800d9ca <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d9c4:	2303      	movs	r3, #3
 800d9c6:	73fb      	strb	r3, [r7, #15]
    break;
 800d9c8:	bf00      	nop
  }
  return usb_status;
 800d9ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3710      	adds	r7, #16
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	460b      	mov	r3, r1
 800d9de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d9ee:	78fa      	ldrb	r2, [r7, #3]
 800d9f0:	4611      	mov	r1, r2
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7f8 fa4f 	bl	8005e96 <HAL_PCD_EP_Close>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d9fc:	7bbb      	ldrb	r3, [r7, #14]
 800d9fe:	2b03      	cmp	r3, #3
 800da00:	d816      	bhi.n	800da30 <USBD_LL_CloseEP+0x5c>
 800da02:	a201      	add	r2, pc, #4	; (adr r2, 800da08 <USBD_LL_CloseEP+0x34>)
 800da04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da08:	0800da19 	.word	0x0800da19
 800da0c:	0800da1f 	.word	0x0800da1f
 800da10:	0800da25 	.word	0x0800da25
 800da14:	0800da2b 	.word	0x0800da2b
    case HAL_OK :
      usb_status = USBD_OK;
 800da18:	2300      	movs	r3, #0
 800da1a:	73fb      	strb	r3, [r7, #15]
    break;
 800da1c:	e00b      	b.n	800da36 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800da1e:	2303      	movs	r3, #3
 800da20:	73fb      	strb	r3, [r7, #15]
    break;
 800da22:	e008      	b.n	800da36 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800da24:	2301      	movs	r3, #1
 800da26:	73fb      	strb	r3, [r7, #15]
    break;
 800da28:	e005      	b.n	800da36 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800da2a:	2303      	movs	r3, #3
 800da2c:	73fb      	strb	r3, [r7, #15]
    break;
 800da2e:	e002      	b.n	800da36 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800da30:	2303      	movs	r3, #3
 800da32:	73fb      	strb	r3, [r7, #15]
    break;
 800da34:	bf00      	nop
  }
  return usb_status;
 800da36:	7bfb      	ldrb	r3, [r7, #15]
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3710      	adds	r7, #16
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	460b      	mov	r3, r1
 800da4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da4c:	2300      	movs	r3, #0
 800da4e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da50:	2300      	movs	r3, #0
 800da52:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da5a:	78fa      	ldrb	r2, [r7, #3]
 800da5c:	4611      	mov	r1, r2
 800da5e:	4618      	mov	r0, r3
 800da60:	f7f8 fafd 	bl	800605e <HAL_PCD_EP_SetStall>
 800da64:	4603      	mov	r3, r0
 800da66:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800da68:	7bbb      	ldrb	r3, [r7, #14]
 800da6a:	2b03      	cmp	r3, #3
 800da6c:	d816      	bhi.n	800da9c <USBD_LL_StallEP+0x5c>
 800da6e:	a201      	add	r2, pc, #4	; (adr r2, 800da74 <USBD_LL_StallEP+0x34>)
 800da70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da74:	0800da85 	.word	0x0800da85
 800da78:	0800da8b 	.word	0x0800da8b
 800da7c:	0800da91 	.word	0x0800da91
 800da80:	0800da97 	.word	0x0800da97
    case HAL_OK :
      usb_status = USBD_OK;
 800da84:	2300      	movs	r3, #0
 800da86:	73fb      	strb	r3, [r7, #15]
    break;
 800da88:	e00b      	b.n	800daa2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800da8a:	2303      	movs	r3, #3
 800da8c:	73fb      	strb	r3, [r7, #15]
    break;
 800da8e:	e008      	b.n	800daa2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800da90:	2301      	movs	r3, #1
 800da92:	73fb      	strb	r3, [r7, #15]
    break;
 800da94:	e005      	b.n	800daa2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800da96:	2303      	movs	r3, #3
 800da98:	73fb      	strb	r3, [r7, #15]
    break;
 800da9a:	e002      	b.n	800daa2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800da9c:	2303      	movs	r3, #3
 800da9e:	73fb      	strb	r3, [r7, #15]
    break;
 800daa0:	bf00      	nop
  }
  return usb_status;
 800daa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3710      	adds	r7, #16
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b084      	sub	sp, #16
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	460b      	mov	r3, r1
 800dab6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dab8:	2300      	movs	r3, #0
 800daba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dabc:	2300      	movs	r3, #0
 800dabe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dac6:	78fa      	ldrb	r2, [r7, #3]
 800dac8:	4611      	mov	r1, r2
 800daca:	4618      	mov	r0, r3
 800dacc:	f7f8 fb29 	bl	8006122 <HAL_PCD_EP_ClrStall>
 800dad0:	4603      	mov	r3, r0
 800dad2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dad4:	7bbb      	ldrb	r3, [r7, #14]
 800dad6:	2b03      	cmp	r3, #3
 800dad8:	d816      	bhi.n	800db08 <USBD_LL_ClearStallEP+0x5c>
 800dada:	a201      	add	r2, pc, #4	; (adr r2, 800dae0 <USBD_LL_ClearStallEP+0x34>)
 800dadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae0:	0800daf1 	.word	0x0800daf1
 800dae4:	0800daf7 	.word	0x0800daf7
 800dae8:	0800dafd 	.word	0x0800dafd
 800daec:	0800db03 	.word	0x0800db03
    case HAL_OK :
      usb_status = USBD_OK;
 800daf0:	2300      	movs	r3, #0
 800daf2:	73fb      	strb	r3, [r7, #15]
    break;
 800daf4:	e00b      	b.n	800db0e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800daf6:	2303      	movs	r3, #3
 800daf8:	73fb      	strb	r3, [r7, #15]
    break;
 800dafa:	e008      	b.n	800db0e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dafc:	2301      	movs	r3, #1
 800dafe:	73fb      	strb	r3, [r7, #15]
    break;
 800db00:	e005      	b.n	800db0e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db02:	2303      	movs	r3, #3
 800db04:	73fb      	strb	r3, [r7, #15]
    break;
 800db06:	e002      	b.n	800db0e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800db08:	2303      	movs	r3, #3
 800db0a:	73fb      	strb	r3, [r7, #15]
    break;
 800db0c:	bf00      	nop
  }
  return usb_status;
 800db0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db10:	4618      	mov	r0, r3
 800db12:	3710      	adds	r7, #16
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db18:	b480      	push	{r7}
 800db1a:	b085      	sub	sp, #20
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	460b      	mov	r3, r1
 800db22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800db2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800db2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db30:	2b00      	cmp	r3, #0
 800db32:	da0c      	bge.n	800db4e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800db34:	78fb      	ldrb	r3, [r7, #3]
 800db36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db3a:	68f9      	ldr	r1, [r7, #12]
 800db3c:	1c5a      	adds	r2, r3, #1
 800db3e:	4613      	mov	r3, r2
 800db40:	009b      	lsls	r3, r3, #2
 800db42:	4413      	add	r3, r2
 800db44:	00db      	lsls	r3, r3, #3
 800db46:	440b      	add	r3, r1
 800db48:	3306      	adds	r3, #6
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	e00b      	b.n	800db66 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800db4e:	78fb      	ldrb	r3, [r7, #3]
 800db50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db54:	68f9      	ldr	r1, [r7, #12]
 800db56:	4613      	mov	r3, r2
 800db58:	009b      	lsls	r3, r3, #2
 800db5a:	4413      	add	r3, r2
 800db5c:	00db      	lsls	r3, r3, #3
 800db5e:	440b      	add	r3, r1
 800db60:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800db64:	781b      	ldrb	r3, [r3, #0]
  }
}
 800db66:	4618      	mov	r0, r3
 800db68:	3714      	adds	r7, #20
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr
	...

0800db74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	460b      	mov	r3, r1
 800db7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db80:	2300      	movs	r3, #0
 800db82:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db84:	2300      	movs	r3, #0
 800db86:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800db8e:	78fa      	ldrb	r2, [r7, #3]
 800db90:	4611      	mov	r1, r2
 800db92:	4618      	mov	r0, r3
 800db94:	f7f8 f8f2 	bl	8005d7c <HAL_PCD_SetAddress>
 800db98:	4603      	mov	r3, r0
 800db9a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800db9c:	7bbb      	ldrb	r3, [r7, #14]
 800db9e:	2b03      	cmp	r3, #3
 800dba0:	d816      	bhi.n	800dbd0 <USBD_LL_SetUSBAddress+0x5c>
 800dba2:	a201      	add	r2, pc, #4	; (adr r2, 800dba8 <USBD_LL_SetUSBAddress+0x34>)
 800dba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dba8:	0800dbb9 	.word	0x0800dbb9
 800dbac:	0800dbbf 	.word	0x0800dbbf
 800dbb0:	0800dbc5 	.word	0x0800dbc5
 800dbb4:	0800dbcb 	.word	0x0800dbcb
    case HAL_OK :
      usb_status = USBD_OK;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	73fb      	strb	r3, [r7, #15]
    break;
 800dbbc:	e00b      	b.n	800dbd6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dbbe:	2303      	movs	r3, #3
 800dbc0:	73fb      	strb	r3, [r7, #15]
    break;
 800dbc2:	e008      	b.n	800dbd6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	73fb      	strb	r3, [r7, #15]
    break;
 800dbc8:	e005      	b.n	800dbd6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dbca:	2303      	movs	r3, #3
 800dbcc:	73fb      	strb	r3, [r7, #15]
    break;
 800dbce:	e002      	b.n	800dbd6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800dbd0:	2303      	movs	r3, #3
 800dbd2:	73fb      	strb	r3, [r7, #15]
    break;
 800dbd4:	bf00      	nop
  }
  return usb_status;
 800dbd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3710      	adds	r7, #16
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b086      	sub	sp, #24
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	60f8      	str	r0, [r7, #12]
 800dbe8:	607a      	str	r2, [r7, #4]
 800dbea:	603b      	str	r3, [r7, #0]
 800dbec:	460b      	mov	r3, r1
 800dbee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dbfe:	7af9      	ldrb	r1, [r7, #11]
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	f7f8 f9e7 	bl	8005fd6 <HAL_PCD_EP_Transmit>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800dc0c:	7dbb      	ldrb	r3, [r7, #22]
 800dc0e:	2b03      	cmp	r3, #3
 800dc10:	d816      	bhi.n	800dc40 <USBD_LL_Transmit+0x60>
 800dc12:	a201      	add	r2, pc, #4	; (adr r2, 800dc18 <USBD_LL_Transmit+0x38>)
 800dc14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc18:	0800dc29 	.word	0x0800dc29
 800dc1c:	0800dc2f 	.word	0x0800dc2f
 800dc20:	0800dc35 	.word	0x0800dc35
 800dc24:	0800dc3b 	.word	0x0800dc3b
    case HAL_OK :
      usb_status = USBD_OK;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	75fb      	strb	r3, [r7, #23]
    break;
 800dc2c:	e00b      	b.n	800dc46 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dc2e:	2303      	movs	r3, #3
 800dc30:	75fb      	strb	r3, [r7, #23]
    break;
 800dc32:	e008      	b.n	800dc46 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dc34:	2301      	movs	r3, #1
 800dc36:	75fb      	strb	r3, [r7, #23]
    break;
 800dc38:	e005      	b.n	800dc46 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dc3a:	2303      	movs	r3, #3
 800dc3c:	75fb      	strb	r3, [r7, #23]
    break;
 800dc3e:	e002      	b.n	800dc46 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800dc40:	2303      	movs	r3, #3
 800dc42:	75fb      	strb	r3, [r7, #23]
    break;
 800dc44:	bf00      	nop
  }
  return usb_status;
 800dc46:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3718      	adds	r7, #24
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b086      	sub	sp, #24
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	60f8      	str	r0, [r7, #12]
 800dc58:	607a      	str	r2, [r7, #4]
 800dc5a:	603b      	str	r3, [r7, #0]
 800dc5c:	460b      	mov	r3, r1
 800dc5e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc60:	2300      	movs	r3, #0
 800dc62:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc64:	2300      	movs	r3, #0
 800dc66:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dc6e:	7af9      	ldrb	r1, [r7, #11]
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	687a      	ldr	r2, [r7, #4]
 800dc74:	f7f8 f959 	bl	8005f2a <HAL_PCD_EP_Receive>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800dc7c:	7dbb      	ldrb	r3, [r7, #22]
 800dc7e:	2b03      	cmp	r3, #3
 800dc80:	d816      	bhi.n	800dcb0 <USBD_LL_PrepareReceive+0x60>
 800dc82:	a201      	add	r2, pc, #4	; (adr r2, 800dc88 <USBD_LL_PrepareReceive+0x38>)
 800dc84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc88:	0800dc99 	.word	0x0800dc99
 800dc8c:	0800dc9f 	.word	0x0800dc9f
 800dc90:	0800dca5 	.word	0x0800dca5
 800dc94:	0800dcab 	.word	0x0800dcab
    case HAL_OK :
      usb_status = USBD_OK;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	75fb      	strb	r3, [r7, #23]
    break;
 800dc9c:	e00b      	b.n	800dcb6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dc9e:	2303      	movs	r3, #3
 800dca0:	75fb      	strb	r3, [r7, #23]
    break;
 800dca2:	e008      	b.n	800dcb6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dca4:	2301      	movs	r3, #1
 800dca6:	75fb      	strb	r3, [r7, #23]
    break;
 800dca8:	e005      	b.n	800dcb6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dcaa:	2303      	movs	r3, #3
 800dcac:	75fb      	strb	r3, [r7, #23]
    break;
 800dcae:	e002      	b.n	800dcb6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800dcb0:	2303      	movs	r3, #3
 800dcb2:	75fb      	strb	r3, [r7, #23]
    break;
 800dcb4:	bf00      	nop
  }
  return usb_status;
 800dcb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3718      	adds	r7, #24
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	460b      	mov	r3, r1
 800dcca:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dcd2:	78fa      	ldrb	r2, [r7, #3]
 800dcd4:	4611      	mov	r1, r2
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7f8 f965 	bl	8005fa6 <HAL_PCD_EP_GetRxCount>
 800dcdc:	4603      	mov	r3, r0
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3708      	adds	r7, #8
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
	...

0800dce8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b082      	sub	sp, #8
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800dcf4:	78fb      	ldrb	r3, [r7, #3]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d002      	beq.n	800dd00 <HAL_PCDEx_LPM_Callback+0x18>
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d013      	beq.n	800dd26 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800dcfe:	e023      	b.n	800dd48 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	699b      	ldr	r3, [r3, #24]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d007      	beq.n	800dd18 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800dd08:	f000 f83c 	bl	800dd84 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd0c:	4b10      	ldr	r3, [pc, #64]	; (800dd50 <HAL_PCDEx_LPM_Callback+0x68>)
 800dd0e:	691b      	ldr	r3, [r3, #16]
 800dd10:	4a0f      	ldr	r2, [pc, #60]	; (800dd50 <HAL_PCDEx_LPM_Callback+0x68>)
 800dd12:	f023 0306 	bic.w	r3, r3, #6
 800dd16:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7fe fbc6 	bl	800c4b0 <USBD_LL_Resume>
    break;
 800dd24:	e010      	b.n	800dd48 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7fe fba9 	bl	800c484 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	699b      	ldr	r3, [r3, #24]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d005      	beq.n	800dd46 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd3a:	4b05      	ldr	r3, [pc, #20]	; (800dd50 <HAL_PCDEx_LPM_Callback+0x68>)
 800dd3c:	691b      	ldr	r3, [r3, #16]
 800dd3e:	4a04      	ldr	r2, [pc, #16]	; (800dd50 <HAL_PCDEx_LPM_Callback+0x68>)
 800dd40:	f043 0306 	orr.w	r3, r3, #6
 800dd44:	6113      	str	r3, [r2, #16]
    break;
 800dd46:	bf00      	nop
}
 800dd48:	bf00      	nop
 800dd4a:	3708      	adds	r7, #8
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	e000ed00 	.word	0xe000ed00

0800dd54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dd54:	b480      	push	{r7}
 800dd56:	b083      	sub	sp, #12
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dd5c:	4b03      	ldr	r3, [pc, #12]	; (800dd6c <USBD_static_malloc+0x18>)
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	370c      	adds	r7, #12
 800dd62:	46bd      	mov	sp, r7
 800dd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd68:	4770      	bx	lr
 800dd6a:	bf00      	nop
 800dd6c:	200003a4 	.word	0x200003a4

0800dd70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]

}
 800dd78:	bf00      	nop
 800dd7a:	370c      	adds	r7, #12
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800dd84:	b480      	push	{r7}
 800dd86:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800dd88:	bf00      	nop
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr
	...

0800dd94 <__libc_init_array>:
 800dd94:	b570      	push	{r4, r5, r6, lr}
 800dd96:	4d0d      	ldr	r5, [pc, #52]	; (800ddcc <__libc_init_array+0x38>)
 800dd98:	4c0d      	ldr	r4, [pc, #52]	; (800ddd0 <__libc_init_array+0x3c>)
 800dd9a:	1b64      	subs	r4, r4, r5
 800dd9c:	10a4      	asrs	r4, r4, #2
 800dd9e:	2600      	movs	r6, #0
 800dda0:	42a6      	cmp	r6, r4
 800dda2:	d109      	bne.n	800ddb8 <__libc_init_array+0x24>
 800dda4:	4d0b      	ldr	r5, [pc, #44]	; (800ddd4 <__libc_init_array+0x40>)
 800dda6:	4c0c      	ldr	r4, [pc, #48]	; (800ddd8 <__libc_init_array+0x44>)
 800dda8:	f000 f820 	bl	800ddec <_init>
 800ddac:	1b64      	subs	r4, r4, r5
 800ddae:	10a4      	asrs	r4, r4, #2
 800ddb0:	2600      	movs	r6, #0
 800ddb2:	42a6      	cmp	r6, r4
 800ddb4:	d105      	bne.n	800ddc2 <__libc_init_array+0x2e>
 800ddb6:	bd70      	pop	{r4, r5, r6, pc}
 800ddb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddbc:	4798      	blx	r3
 800ddbe:	3601      	adds	r6, #1
 800ddc0:	e7ee      	b.n	800dda0 <__libc_init_array+0xc>
 800ddc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddc6:	4798      	blx	r3
 800ddc8:	3601      	adds	r6, #1
 800ddca:	e7f2      	b.n	800ddb2 <__libc_init_array+0x1e>
 800ddcc:	0800deb0 	.word	0x0800deb0
 800ddd0:	0800deb0 	.word	0x0800deb0
 800ddd4:	0800deb0 	.word	0x0800deb0
 800ddd8:	0800deb8 	.word	0x0800deb8

0800dddc <memset>:
 800dddc:	4402      	add	r2, r0
 800ddde:	4603      	mov	r3, r0
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d100      	bne.n	800dde6 <memset+0xa>
 800dde4:	4770      	bx	lr
 800dde6:	f803 1b01 	strb.w	r1, [r3], #1
 800ddea:	e7f9      	b.n	800dde0 <memset+0x4>

0800ddec <_init>:
 800ddec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddee:	bf00      	nop
 800ddf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddf2:	bc08      	pop	{r3}
 800ddf4:	469e      	mov	lr, r3
 800ddf6:	4770      	bx	lr

0800ddf8 <_fini>:
 800ddf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddfa:	bf00      	nop
 800ddfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddfe:	bc08      	pop	{r3}
 800de00:	469e      	mov	lr, r3
 800de02:	4770      	bx	lr
